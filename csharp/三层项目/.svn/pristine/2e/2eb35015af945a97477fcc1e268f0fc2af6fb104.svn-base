using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using WP.Demo.BLL;
using WP.Demo.Common;
using WP.Demo.Model;

namespace WP.Demo.UI
{
    public partial class frmHallInfo : Form
    {
        private HallInfoBLL objHallInfoBLL = new HallInfoBLL();

        public static frmHallInfo _frmSingle = null; // 存储单例窗体的对象
        // 刷新控件信息的委托
        private DelInitializeFrmTableInfoData del;
        // 刷新主界面信息的委托
        private DelInitializeFrmMainData delMain;
        /// <summary>
        ///  私有构造函数，构造单例
        /// </summary>
        private frmHallInfo(DelInitializeFrmTableInfoData del,DelInitializeFrmMainData delMain)
        {
            InitializeComponent();
            this.del = del;
            this.delMain = delMain;
        }
        /// <summary>
        ///  获取单例对象
        /// </summary>
        /// <returns></returns>
        public static frmHallInfo GetSingleObject(DelInitializeFrmTableInfoData del,DelInitializeFrmMainData delMain)
        {
            try
            {
                if (_frmSingle == null)
                {
                    _frmSingle = new frmHallInfo(del,delMain);
                }
                return _frmSingle;
            }
            catch (Exception objException)
            {
                if (objException.InnerException != null)
                {
                    throw new Exception(objException.InnerException.Message);
                }
                throw new Exception(objException.Message);
            }
        }
        /// <summary>
        ///  窗体加载
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void frmHallInfo_Load(object sender, EventArgs e)
        {
            try
            {
                this.InitializeDataGridView();
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  初始化表格
        /// </summary>
        private void InitializeDataGridView()
        {
            try
            {
                // 设置DataGridView是否自动生成绑定的数据源所具有的列
                this.dgvList.AutoGenerateColumns = false;
                // 加载数据源
                this.OnDataGridViewDataBusinese();
            }
            catch (Exception objException)
            {
                if (objException.InnerException != null)
                {
                    throw new Exception(objException.InnerException.Message);
                }
                throw new Exception(objException.Message);
            }
        }
        /// <summary>
        ///  获取表格数据
        /// </summary>
        private void OnDataGridViewDataBusinese()
        {
            try
            {
                DataTable dtResult = this.objHallInfoBLL.GetData();
                this.dgvList.DataSource = dtResult;
            }
            catch (Exception objException)
            {
                if (objException.InnerException != null)
                {
                    throw new Exception(objException.InnerException.Message);
                }
                throw new Exception(objException.Message);
            }
        }
        /// <summary>
        ///  双击表格
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgvList_CellDoubleClick(object sender, DataGridViewCellEventArgs e)
        {
            try
            {
                if (this.dgvList.Rows.Count <= 0)
                {
                    return;
                }

                this.btnSave.Text = "修改";

                // 添加数据
                DataGridViewRow dgvr = this.dgvList.CurrentRow;
                this.txtId.Text = Convert.ToString(dgvr.Cells["dgvtxthid"].Value);
                this.txtTitle.Text = Convert.ToString(dgvr.Cells["dgvtxthtitle"].Value);
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  取消重置
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnCancel_Click(object sender, EventArgs e)
        {
            try
            {
                this.txtId.Text = "添加时无编号";
                this.txtTitle.Text = string.Empty;
                this.btnSave.Text = "添加";
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  添加/修改
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnSave_Click(object sender, EventArgs e)
        {
            try
            {
                if (string.IsNullOrEmpty(this.txtTitle.Text))
                {
                    throw new Exception("请输入厅包名字");
                }

                HallInfoModel model = new HallInfoModel()
                {
                    HTitle = this.txtTitle.Text
                };
                if (this.btnSave.Text == "添加")
                {
                    if (!string.IsNullOrEmpty(ConvertWP.ToTrimString(this.objHallInfoBLL.CheckHaveSameHallTitle(model).Rows[0]["CharacterResult"])))
                    {
                        MessageBox.Show("已存在该厅包名！请检查或修改");
                        return;
                    }

                    if (this.objHallInfoBLL.AddHallInfoDetail(model) > 0)
                    {
                        this.OnDataGridViewDataBusinese();
                        // 修正选中的行
                        DataGridViewDefaultExtra.AmendmentSelectedRow(this.dgvList, "dgvtxthtitle", model.HTitle);

                        MessageBox.Show("添加成功！");

                        // 刷新主界面信息
                        this.delMain();
                    }
                    else
                    {
                        MessageBox.Show("添加失败！");
                        return;
                    }
                }
                else // 修改
                {
                    model.HId = this.txtId.Text.ToString();

                    if (this.objHallInfoBLL.UpdateHallInfoDetail(model) > 0)
                    {
                        this.OnDataGridViewDataBusinese();
                        // 修正选中的行
                        DataGridViewDefaultExtra.AmendmentSelectedRow(this.dgvList, "dgvtxthid", ConvertWP.ToTrimString(model.HId));

                        MessageBox.Show("修改成功！");

                        // 刷新主界面信息
                        this.delMain();
                    }
                    else
                    {
                        MessageBox.Show("修改失败！");
                    }
                }
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  删除数据
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void btnRemove_Click(object sender, EventArgs e)
        {
            try
            {
                if (MessageBox.Show("是否删除选中的明细", "警告", MessageBoxButtons.YesNo).Equals(DialogResult.No))
                {
                    return;
                }

                HallInfoModel model = new HallInfoModel()
                {
                    HId = ConvertWP.ToTrimString(this.dgvList.CurrentRow.Cells["dgvtxthid"].Value)
                };

                if (this.objHallInfoBLL.DeleteHallInfoDetail(model) <= 0)
                {
                    MessageBox.Show("删除失败，请检查数据的完整性");
                    return;
                }
                // 刷新明细
                OnDataGridViewDataBusinese();

                MessageBox.Show("删除成功!");

                // 刷新主界面信息
                this.delMain();
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }
        /// <summary>
        ///  关闭的时候还原单例对象
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void frmHallInfo_FormClosing(object sender, FormClosingEventArgs e)
        {
            try
            {
                _frmSingle = null;
            }
            catch { }
        }
        /// <summary>
        ///  每当数据改变时候，刷新frmTableInfo的数据
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void dgvList_DataBindingComplete(object sender, DataGridViewBindingCompleteEventArgs e)
        {
            try
            {
                this.del(null, null);
            }
            catch (Exception objException)
            {
                MessageBox.Show(objException.Message);
            }
        }

    }
}
