// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kwmsgpregame.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kwmsgpregame_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kwmsgpregame_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "kwmsgdefine.pb.h"
#include "kwmsgbase.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kwmsgpregame_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kwmsgpregame_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[38]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kwmsgpregame_2eproto;
namespace KWMsg {
class AckConnectWorldResult;
struct AckConnectWorldResultDefaultTypeInternal;
extern AckConnectWorldResultDefaultTypeInternal _AckConnectWorldResult_default_instance_;
class AckEventResult;
struct AckEventResultDefaultTypeInternal;
extern AckEventResultDefaultTypeInternal _AckEventResult_default_instance_;
class AckLeaveGame;
struct AckLeaveGameDefaultTypeInternal;
extern AckLeaveGameDefaultTypeInternal _AckLeaveGame_default_instance_;
class AckLoadPlayerData;
struct AckLoadPlayerDataDefaultTypeInternal;
extern AckLoadPlayerDataDefaultTypeInternal _AckLoadPlayerData_default_instance_;
class AckLogin;
struct AckLoginDefaultTypeInternal;
extern AckLoginDefaultTypeInternal _AckLogin_default_instance_;
class AckLogout;
struct AckLogoutDefaultTypeInternal;
extern AckLogoutDefaultTypeInternal _AckLogout_default_instance_;
class AckPlayerLite;
struct AckPlayerLiteDefaultTypeInternal;
extern AckPlayerLiteDefaultTypeInternal _AckPlayerLite_default_instance_;
class AckRegister;
struct AckRegisterDefaultTypeInternal;
extern AckRegisterDefaultTypeInternal _AckRegister_default_instance_;
class AckVerifyJwt;
struct AckVerifyJwtDefaultTypeInternal;
extern AckVerifyJwtDefaultTypeInternal _AckVerifyJwt_default_instance_;
class AckWorldPlayerHasRole;
struct AckWorldPlayerHasRoleDefaultTypeInternal;
extern AckWorldPlayerHasRoleDefaultTypeInternal _AckWorldPlayerHasRole_default_instance_;
class PlayerDataPack;
struct PlayerDataPackDefaultTypeInternal;
extern PlayerDataPackDefaultTypeInternal _PlayerDataPack_default_instance_;
class PlayerLiteInfo;
struct PlayerLiteInfoDefaultTypeInternal;
extern PlayerLiteInfoDefaultTypeInternal _PlayerLiteInfo_default_instance_;
class PlayerOfflineNotify;
struct PlayerOfflineNotifyDefaultTypeInternal;
extern PlayerOfflineNotifyDefaultTypeInternal _PlayerOfflineNotify_default_instance_;
class PlayerOnlineNotify;
struct PlayerOnlineNotifyDefaultTypeInternal;
extern PlayerOnlineNotifyDefaultTypeInternal _PlayerOnlineNotify_default_instance_;
class ReqAckKickFromWorld;
struct ReqAckKickFromWorldDefaultTypeInternal;
extern ReqAckKickFromWorldDefaultTypeInternal _ReqAckKickFromWorld_default_instance_;
class ReqAckRefreshConfig;
struct ReqAckRefreshConfigDefaultTypeInternal;
extern ReqAckRefreshConfigDefaultTypeInternal _ReqAckRefreshConfig_default_instance_;
class ReqAckSetGameServerState;
struct ReqAckSetGameServerStateDefaultTypeInternal;
extern ReqAckSetGameServerStateDefaultTypeInternal _ReqAckSetGameServerState_default_instance_;
class ReqConnectWorld;
struct ReqConnectWorldDefaultTypeInternal;
extern ReqConnectWorldDefaultTypeInternal _ReqConnectWorld_default_instance_;
class ReqEnterGame;
struct ReqEnterGameDefaultTypeInternal;
extern ReqEnterGameDefaultTypeInternal _ReqEnterGame_default_instance_;
class ReqLeaveGame;
struct ReqLeaveGameDefaultTypeInternal;
extern ReqLeaveGameDefaultTypeInternal _ReqLeaveGame_default_instance_;
class ReqLoadPlayerData;
struct ReqLoadPlayerDataDefaultTypeInternal;
extern ReqLoadPlayerDataDefaultTypeInternal _ReqLoadPlayerData_default_instance_;
class ReqLogin;
struct ReqLoginDefaultTypeInternal;
extern ReqLoginDefaultTypeInternal _ReqLogin_default_instance_;
class ReqLogout;
struct ReqLogoutDefaultTypeInternal;
extern ReqLogoutDefaultTypeInternal _ReqLogout_default_instance_;
class ReqPlayerLite;
struct ReqPlayerLiteDefaultTypeInternal;
extern ReqPlayerLiteDefaultTypeInternal _ReqPlayerLite_default_instance_;
class ReqReconnect;
struct ReqReconnectDefaultTypeInternal;
extern ReqReconnectDefaultTypeInternal _ReqReconnect_default_instance_;
class ReqRecord;
struct ReqRecordDefaultTypeInternal;
extern ReqRecordDefaultTypeInternal _ReqRecord_default_instance_;
class ReqRegister;
struct ReqRegisterDefaultTypeInternal;
extern ReqRegisterDefaultTypeInternal _ReqRegister_default_instance_;
class ReqUpdateAccountLastLoginInfo;
struct ReqUpdateAccountLastLoginInfoDefaultTypeInternal;
extern ReqUpdateAccountLastLoginInfoDefaultTypeInternal _ReqUpdateAccountLastLoginInfo_default_instance_;
class ReqUpdateAccountPlayer;
struct ReqUpdateAccountPlayerDefaultTypeInternal;
extern ReqUpdateAccountPlayerDefaultTypeInternal _ReqUpdateAccountPlayer_default_instance_;
class ReqVerifyJwt;
struct ReqVerifyJwtDefaultTypeInternal;
extern ReqVerifyJwtDefaultTypeInternal _ReqVerifyJwt_default_instance_;
class ServerHeartBeat;
struct ServerHeartBeatDefaultTypeInternal;
extern ServerHeartBeatDefaultTypeInternal _ServerHeartBeat_default_instance_;
class ServerInfo;
struct ServerInfoDefaultTypeInternal;
extern ServerInfoDefaultTypeInternal _ServerInfo_default_instance_;
class ServerInfoReport;
struct ServerInfoReportDefaultTypeInternal;
extern ServerInfoReportDefaultTypeInternal _ServerInfoReport_default_instance_;
class ServerInfoReportList;
struct ServerInfoReportListDefaultTypeInternal;
extern ServerInfoReportListDefaultTypeInternal _ServerInfoReportList_default_instance_;
class SyncQueueUpCount;
struct SyncQueueUpCountDefaultTypeInternal;
extern SyncQueueUpCountDefaultTypeInternal _SyncQueueUpCount_default_instance_;
class SyncQueueupRegStatus;
struct SyncQueueupRegStatusDefaultTypeInternal;
extern SyncQueueupRegStatusDefaultTypeInternal _SyncQueueupRegStatus_default_instance_;
class SyncWorldInfoToGame;
struct SyncWorldInfoToGameDefaultTypeInternal;
extern SyncWorldInfoToGameDefaultTypeInternal _SyncWorldInfoToGame_default_instance_;
class SyncWorldState;
struct SyncWorldStateDefaultTypeInternal;
extern SyncWorldStateDefaultTypeInternal _SyncWorldState_default_instance_;
}  // namespace KWMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::KWMsg::AckConnectWorldResult* Arena::CreateMaybeMessage<::KWMsg::AckConnectWorldResult>(Arena*);
template<> ::KWMsg::AckEventResult* Arena::CreateMaybeMessage<::KWMsg::AckEventResult>(Arena*);
template<> ::KWMsg::AckLeaveGame* Arena::CreateMaybeMessage<::KWMsg::AckLeaveGame>(Arena*);
template<> ::KWMsg::AckLoadPlayerData* Arena::CreateMaybeMessage<::KWMsg::AckLoadPlayerData>(Arena*);
template<> ::KWMsg::AckLogin* Arena::CreateMaybeMessage<::KWMsg::AckLogin>(Arena*);
template<> ::KWMsg::AckLogout* Arena::CreateMaybeMessage<::KWMsg::AckLogout>(Arena*);
template<> ::KWMsg::AckPlayerLite* Arena::CreateMaybeMessage<::KWMsg::AckPlayerLite>(Arena*);
template<> ::KWMsg::AckRegister* Arena::CreateMaybeMessage<::KWMsg::AckRegister>(Arena*);
template<> ::KWMsg::AckVerifyJwt* Arena::CreateMaybeMessage<::KWMsg::AckVerifyJwt>(Arena*);
template<> ::KWMsg::AckWorldPlayerHasRole* Arena::CreateMaybeMessage<::KWMsg::AckWorldPlayerHasRole>(Arena*);
template<> ::KWMsg::PlayerDataPack* Arena::CreateMaybeMessage<::KWMsg::PlayerDataPack>(Arena*);
template<> ::KWMsg::PlayerLiteInfo* Arena::CreateMaybeMessage<::KWMsg::PlayerLiteInfo>(Arena*);
template<> ::KWMsg::PlayerOfflineNotify* Arena::CreateMaybeMessage<::KWMsg::PlayerOfflineNotify>(Arena*);
template<> ::KWMsg::PlayerOnlineNotify* Arena::CreateMaybeMessage<::KWMsg::PlayerOnlineNotify>(Arena*);
template<> ::KWMsg::ReqAckKickFromWorld* Arena::CreateMaybeMessage<::KWMsg::ReqAckKickFromWorld>(Arena*);
template<> ::KWMsg::ReqAckRefreshConfig* Arena::CreateMaybeMessage<::KWMsg::ReqAckRefreshConfig>(Arena*);
template<> ::KWMsg::ReqAckSetGameServerState* Arena::CreateMaybeMessage<::KWMsg::ReqAckSetGameServerState>(Arena*);
template<> ::KWMsg::ReqConnectWorld* Arena::CreateMaybeMessage<::KWMsg::ReqConnectWorld>(Arena*);
template<> ::KWMsg::ReqEnterGame* Arena::CreateMaybeMessage<::KWMsg::ReqEnterGame>(Arena*);
template<> ::KWMsg::ReqLeaveGame* Arena::CreateMaybeMessage<::KWMsg::ReqLeaveGame>(Arena*);
template<> ::KWMsg::ReqLoadPlayerData* Arena::CreateMaybeMessage<::KWMsg::ReqLoadPlayerData>(Arena*);
template<> ::KWMsg::ReqLogin* Arena::CreateMaybeMessage<::KWMsg::ReqLogin>(Arena*);
template<> ::KWMsg::ReqLogout* Arena::CreateMaybeMessage<::KWMsg::ReqLogout>(Arena*);
template<> ::KWMsg::ReqPlayerLite* Arena::CreateMaybeMessage<::KWMsg::ReqPlayerLite>(Arena*);
template<> ::KWMsg::ReqReconnect* Arena::CreateMaybeMessage<::KWMsg::ReqReconnect>(Arena*);
template<> ::KWMsg::ReqRecord* Arena::CreateMaybeMessage<::KWMsg::ReqRecord>(Arena*);
template<> ::KWMsg::ReqRegister* Arena::CreateMaybeMessage<::KWMsg::ReqRegister>(Arena*);
template<> ::KWMsg::ReqUpdateAccountLastLoginInfo* Arena::CreateMaybeMessage<::KWMsg::ReqUpdateAccountLastLoginInfo>(Arena*);
template<> ::KWMsg::ReqUpdateAccountPlayer* Arena::CreateMaybeMessage<::KWMsg::ReqUpdateAccountPlayer>(Arena*);
template<> ::KWMsg::ReqVerifyJwt* Arena::CreateMaybeMessage<::KWMsg::ReqVerifyJwt>(Arena*);
template<> ::KWMsg::ServerHeartBeat* Arena::CreateMaybeMessage<::KWMsg::ServerHeartBeat>(Arena*);
template<> ::KWMsg::ServerInfo* Arena::CreateMaybeMessage<::KWMsg::ServerInfo>(Arena*);
template<> ::KWMsg::ServerInfoReport* Arena::CreateMaybeMessage<::KWMsg::ServerInfoReport>(Arena*);
template<> ::KWMsg::ServerInfoReportList* Arena::CreateMaybeMessage<::KWMsg::ServerInfoReportList>(Arena*);
template<> ::KWMsg::SyncQueueUpCount* Arena::CreateMaybeMessage<::KWMsg::SyncQueueUpCount>(Arena*);
template<> ::KWMsg::SyncQueueupRegStatus* Arena::CreateMaybeMessage<::KWMsg::SyncQueueupRegStatus>(Arena*);
template<> ::KWMsg::SyncWorldInfoToGame* Arena::CreateMaybeMessage<::KWMsg::SyncWorldInfoToGame>(Arena*);
template<> ::KWMsg::SyncWorldState* Arena::CreateMaybeMessage<::KWMsg::SyncWorldState>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace KWMsg {

enum ReqRecord_EAskRecordType : int {
  ReqRecord_EAskRecordType_EART_OPEN_PAGE = 0,
  ReqRecord_EAskRecordType_EART_OPEN_NOPAGE = 1,
  ReqRecord_EAskRecordType_EART_END = 2,
  ReqRecord_EAskRecordType_ReqRecord_EAskRecordType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReqRecord_EAskRecordType_ReqRecord_EAskRecordType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReqRecord_EAskRecordType_IsValid(int value);
constexpr ReqRecord_EAskRecordType ReqRecord_EAskRecordType_EAskRecordType_MIN = ReqRecord_EAskRecordType_EART_OPEN_PAGE;
constexpr ReqRecord_EAskRecordType ReqRecord_EAskRecordType_EAskRecordType_MAX = ReqRecord_EAskRecordType_EART_END;
constexpr int ReqRecord_EAskRecordType_EAskRecordType_ARRAYSIZE = ReqRecord_EAskRecordType_EAskRecordType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqRecord_EAskRecordType_descriptor();
template<typename T>
inline const std::string& ReqRecord_EAskRecordType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReqRecord_EAskRecordType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReqRecord_EAskRecordType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReqRecord_EAskRecordType_descriptor(), enum_t_value);
}
inline bool ReqRecord_EAskRecordType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReqRecord_EAskRecordType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReqRecord_EAskRecordType>(
    ReqRecord_EAskRecordType_descriptor(), name, value);
}
enum EServerState : int {
  EST_CRASH = 0,
  EST_NORMAL = 1,
  EST_BUSY = 2,
  EST_FIRE = 3,
  EST_MAINTEN = 4,
  EServerState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EServerState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EServerState_IsValid(int value);
constexpr EServerState EServerState_MIN = EST_CRASH;
constexpr EServerState EServerState_MAX = EST_MAINTEN;
constexpr int EServerState_ARRAYSIZE = EServerState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EServerState_descriptor();
template<typename T>
inline const std::string& EServerState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EServerState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EServerState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EServerState_descriptor(), enum_t_value);
}
inline bool EServerState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EServerState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EServerState>(
    EServerState_descriptor(), name, value);
}
enum EServerShowState : int {
  ESST_MAINTEN = 0,
  ESST_FULL = 1,
  ESST_FIRE = 2,
  ESST_NORMAL = 3,
  EServerShowState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EServerShowState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EServerShowState_IsValid(int value);
constexpr EServerShowState EServerShowState_MIN = ESST_MAINTEN;
constexpr EServerShowState EServerShowState_MAX = ESST_NORMAL;
constexpr int EServerShowState_ARRAYSIZE = EServerShowState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EServerShowState_descriptor();
template<typename T>
inline const std::string& EServerShowState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EServerShowState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EServerShowState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EServerShowState_descriptor(), enum_t_value);
}
inline bool EServerShowState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EServerShowState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EServerShowState>(
    EServerShowState_descriptor(), name, value);
}
// ===================================================================

class ServerInfoReport final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ServerInfoReport) */ {
 public:
  inline ServerInfoReport() : ServerInfoReport(nullptr) {}
  ~ServerInfoReport() override;
  explicit constexpr ServerInfoReport(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfoReport(const ServerInfoReport& from);
  ServerInfoReport(ServerInfoReport&& from) noexcept
    : ServerInfoReport() {
    *this = ::std::move(from);
  }

  inline ServerInfoReport& operator=(const ServerInfoReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfoReport& operator=(ServerInfoReport&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfoReport& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfoReport* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReport*>(
               &_ServerInfoReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServerInfoReport& a, ServerInfoReport& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfoReport* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfoReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReport* New() const final {
    return new ServerInfoReport();
  }

  ServerInfoReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfoReport& from);
  void MergeFrom(const ServerInfoReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ServerInfoReport";
  }
  protected:
  explicit ServerInfoReport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerNameFieldNumber = 2,
    kZoneIdFieldNumber = 3,
    kZoneNameFieldNumber = 4,
    kServerIpFieldNumber = 5,
    kServerPublicIpFieldNumber = 6,
    kServerIdFieldNumber = 1,
    kServerPortFieldNumber = 7,
    kServerMaxOnlineFieldNumber = 8,
    kServerCurCountFieldNumber = 9,
    kServerTypeFieldNumber = 10,
    kServerStateFieldNumber = 11,
    kServerShowStateFieldNumber = 12,
    kServerOpenTimeFieldNumber = 13,
    kServerRegistCountFieldNumber = 14,
  };
  // bytes server_name = 2;
  void clear_server_name();
  const std::string& server_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_server_name();
  void set_allocated_server_name(std::string* server_name);
  private:
  const std::string& _internal_server_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_name(const std::string& value);
  std::string* _internal_mutable_server_name();
  public:

  // bytes zone_id = 3;
  void clear_zone_id();
  const std::string& zone_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_zone_id();
  void set_allocated_zone_id(std::string* zone_id);
  private:
  const std::string& _internal_zone_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone_id(const std::string& value);
  std::string* _internal_mutable_zone_id();
  public:

  // bytes zone_name = 4;
  void clear_zone_name();
  const std::string& zone_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_zone_name();
  void set_allocated_zone_name(std::string* zone_name);
  private:
  const std::string& _internal_zone_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone_name(const std::string& value);
  std::string* _internal_mutable_zone_name();
  public:

  // bytes server_ip = 5;
  void clear_server_ip();
  const std::string& server_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_server_ip();
  void set_allocated_server_ip(std::string* server_ip);
  private:
  const std::string& _internal_server_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_ip(const std::string& value);
  std::string* _internal_mutable_server_ip();
  public:

  // bytes server_public_ip = 6;
  void clear_server_public_ip();
  const std::string& server_public_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_public_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_public_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_server_public_ip();
  void set_allocated_server_public_ip(std::string* server_public_ip);
  private:
  const std::string& _internal_server_public_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_public_ip(const std::string& value);
  std::string* _internal_mutable_server_public_ip();
  public:

  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_port = 7;
  void clear_server_port();
  ::PROTOBUF_NAMESPACE_ID::int32 server_port() const;
  void set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_port() const;
  void _internal_set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_max_online = 8;
  void clear_server_max_online();
  ::PROTOBUF_NAMESPACE_ID::int32 server_max_online() const;
  void set_server_max_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_max_online() const;
  void _internal_set_server_max_online(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_cur_count = 9;
  void clear_server_cur_count();
  ::PROTOBUF_NAMESPACE_ID::int32 server_cur_count() const;
  void set_server_cur_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_cur_count() const;
  void _internal_set_server_cur_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_type = 10;
  void clear_server_type();
  ::PROTOBUF_NAMESPACE_ID::int32 server_type() const;
  void set_server_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_type() const;
  void _internal_set_server_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.EServerState server_state = 11;
  void clear_server_state();
  ::KWMsg::EServerState server_state() const;
  void set_server_state(::KWMsg::EServerState value);
  private:
  ::KWMsg::EServerState _internal_server_state() const;
  void _internal_set_server_state(::KWMsg::EServerState value);
  public:

  // .KWMsg.EServerShowState server_show_state = 12;
  void clear_server_show_state();
  ::KWMsg::EServerShowState server_show_state() const;
  void set_server_show_state(::KWMsg::EServerShowState value);
  private:
  ::KWMsg::EServerShowState _internal_server_show_state() const;
  void _internal_set_server_show_state(::KWMsg::EServerShowState value);
  public:

  // int32 server_open_time = 13;
  void clear_server_open_time();
  ::PROTOBUF_NAMESPACE_ID::int32 server_open_time() const;
  void set_server_open_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_open_time() const;
  void _internal_set_server_open_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 server_regist_count = 14;
  void clear_server_regist_count();
  ::PROTOBUF_NAMESPACE_ID::int32 server_regist_count() const;
  void set_server_regist_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_regist_count() const;
  void _internal_set_server_regist_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ServerInfoReport)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_public_ip_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_port_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_max_online_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_cur_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_type_;
  int server_state_;
  int server_show_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_open_time_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_regist_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ServerInfoReportList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ServerInfoReportList) */ {
 public:
  inline ServerInfoReportList() : ServerInfoReportList(nullptr) {}
  ~ServerInfoReportList() override;
  explicit constexpr ServerInfoReportList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfoReportList(const ServerInfoReportList& from);
  ServerInfoReportList(ServerInfoReportList&& from) noexcept
    : ServerInfoReportList() {
    *this = ::std::move(from);
  }

  inline ServerInfoReportList& operator=(const ServerInfoReportList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfoReportList& operator=(ServerInfoReportList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfoReportList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfoReportList* internal_default_instance() {
    return reinterpret_cast<const ServerInfoReportList*>(
               &_ServerInfoReportList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ServerInfoReportList& a, ServerInfoReportList& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfoReportList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfoReportList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfoReportList* New() const final {
    return new ServerInfoReportList();
  }

  ServerInfoReportList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfoReportList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfoReportList& from);
  void MergeFrom(const ServerInfoReportList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfoReportList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ServerInfoReportList";
  }
  protected:
  explicit ServerInfoReportList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerListFieldNumber = 1,
  };
  // repeated .KWMsg.ServerInfoReport server_list = 1;
  int server_list_size() const;
  private:
  int _internal_server_list_size() const;
  public:
  void clear_server_list();
  ::KWMsg::ServerInfoReport* mutable_server_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ServerInfoReport >*
      mutable_server_list();
  private:
  const ::KWMsg::ServerInfoReport& _internal_server_list(int index) const;
  ::KWMsg::ServerInfoReport* _internal_add_server_list();
  public:
  const ::KWMsg::ServerInfoReport& server_list(int index) const;
  ::KWMsg::ServerInfoReport* add_server_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ServerInfoReport >&
      server_list() const;

  // @@protoc_insertion_point(class_scope:KWMsg.ServerInfoReportList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ServerInfoReport > server_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class AckEventResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckEventResult) */ {
 public:
  inline AckEventResult() : AckEventResult(nullptr) {}
  ~AckEventResult() override;
  explicit constexpr AckEventResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckEventResult(const AckEventResult& from);
  AckEventResult(AckEventResult&& from) noexcept
    : AckEventResult() {
    *this = ::std::move(from);
  }

  inline AckEventResult& operator=(const AckEventResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckEventResult& operator=(AckEventResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckEventResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckEventResult* internal_default_instance() {
    return reinterpret_cast<const AckEventResult*>(
               &_AckEventResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AckEventResult& a, AckEventResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AckEventResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckEventResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckEventResult* New() const final {
    return new AckEventResult();
  }

  AckEventResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckEventResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckEventResult& from);
  void MergeFrom(const AckEventResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckEventResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckEventResult";
  }
  protected:
  explicit AckEventResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUserDataFieldNumber = 4,
    kEventObjectFieldNumber = 2,
    kEventClientFieldNumber = 3,
    kEventCodeFieldNumber = 1,
  };
  // bytes user_data = 4;
  void clear_user_data();
  const std::string& user_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_user_data();
  void set_allocated_user_data(std::string* user_data);
  private:
  const std::string& _internal_user_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_data(const std::string& value);
  std::string* _internal_mutable_user_data();
  public:

  // .KWMsg.Ident event_object = 2;
  bool has_event_object() const;
  private:
  bool _internal_has_event_object() const;
  public:
  void clear_event_object();
  const ::KWMsg::Ident& event_object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_event_object();
  ::KWMsg::Ident* mutable_event_object();
  void set_allocated_event_object(::KWMsg::Ident* event_object);
  private:
  const ::KWMsg::Ident& _internal_event_object() const;
  ::KWMsg::Ident* _internal_mutable_event_object();
  public:
  void unsafe_arena_set_allocated_event_object(
      ::KWMsg::Ident* event_object);
  ::KWMsg::Ident* unsafe_arena_release_event_object();

  // .KWMsg.Ident event_client = 3;
  bool has_event_client() const;
  private:
  bool _internal_has_event_client() const;
  public:
  void clear_event_client();
  const ::KWMsg::Ident& event_client() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_event_client();
  ::KWMsg::Ident* mutable_event_client();
  void set_allocated_event_client(::KWMsg::Ident* event_client);
  private:
  const ::KWMsg::Ident& _internal_event_client() const;
  ::KWMsg::Ident* _internal_mutable_event_client();
  public:
  void unsafe_arena_set_allocated_event_client(
      ::KWMsg::Ident* event_client);
  ::KWMsg::Ident* unsafe_arena_release_event_client();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckEventResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_data_;
  ::KWMsg::Ident* event_object_;
  ::KWMsg::Ident* event_client_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqLogin) */ {
 public:
  inline ReqLogin() : ReqLogin(nullptr) {}
  ~ReqLogin() override;
  explicit constexpr ReqLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqLogin(const ReqLogin& from);
  ReqLogin(ReqLogin&& from) noexcept
    : ReqLogin() {
    *this = ::std::move(from);
  }

  inline ReqLogin& operator=(const ReqLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLogin& operator=(ReqLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqLogin* internal_default_instance() {
    return reinterpret_cast<const ReqLogin*>(
               &_ReqLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReqLogin& a, ReqLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqLogin* New() const final {
    return new ReqLogin();
  }

  ReqLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqLogin& from);
  void MergeFrom(const ReqLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqLogin";
  }
  protected:
  explicit ReqLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kPasswordFieldNumber = 3,
    kSignFieldNumber = 4,
    kDeviceInfoFieldNumber = 6,
    kChannelFieldNumber = 1,
    kClientVersionFieldNumber = 5,
  };
  // bytes account = 2;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // bytes sign = 4;
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // .KWMsg.DeviceInfo device_info = 6;
  bool has_device_info() const;
  private:
  bool _internal_has_device_info() const;
  public:
  void clear_device_info();
  const ::KWMsg::DeviceInfo& device_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::DeviceInfo* release_device_info();
  ::KWMsg::DeviceInfo* mutable_device_info();
  void set_allocated_device_info(::KWMsg::DeviceInfo* device_info);
  private:
  const ::KWMsg::DeviceInfo& _internal_device_info() const;
  ::KWMsg::DeviceInfo* _internal_mutable_device_info();
  public:
  void unsafe_arena_set_allocated_device_info(
      ::KWMsg::DeviceInfo* device_info);
  ::KWMsg::DeviceInfo* unsafe_arena_release_device_info();

  // int32 channel = 1;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 client_version = 5;
  void clear_client_version();
  ::PROTOBUF_NAMESPACE_ID::int32 client_version() const;
  void set_client_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_client_version() const;
  void _internal_set_client_version(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::KWMsg::DeviceInfo* device_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 client_version_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class AckLogin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckLogin) */ {
 public:
  inline AckLogin() : AckLogin(nullptr) {}
  ~AckLogin() override;
  explicit constexpr AckLogin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckLogin(const AckLogin& from);
  AckLogin(AckLogin&& from) noexcept
    : AckLogin() {
    *this = ::std::move(from);
  }

  inline AckLogin& operator=(const AckLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckLogin& operator=(AckLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckLogin* internal_default_instance() {
    return reinterpret_cast<const AckLogin*>(
               &_AckLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AckLogin& a, AckLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(AckLogin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckLogin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckLogin* New() const final {
    return new AckLogin();
  }

  AckLogin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckLogin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckLogin& from);
  void MergeFrom(const AckLogin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckLogin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckLogin";
  }
  protected:
  explicit AckLogin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 3,
    kIpFieldNumber = 4,
    kEventCodeFieldNumber = 1,
    kChannelFieldNumber = 2,
  };
  // bytes account = 3;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes ip = 4;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 channel = 2;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckLogin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqLogout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqLogout) */ {
 public:
  inline ReqLogout() : ReqLogout(nullptr) {}
  ~ReqLogout() override;
  explicit constexpr ReqLogout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqLogout(const ReqLogout& from);
  ReqLogout(ReqLogout&& from) noexcept
    : ReqLogout() {
    *this = ::std::move(from);
  }

  inline ReqLogout& operator=(const ReqLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLogout& operator=(ReqLogout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqLogout& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqLogout* internal_default_instance() {
    return reinterpret_cast<const ReqLogout*>(
               &_ReqLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReqLogout& a, ReqLogout& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqLogout* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqLogout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqLogout* New() const final {
    return new ReqLogout();
  }

  ReqLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqLogout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqLogout& from);
  void MergeFrom(const ReqLogout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLogout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqLogout";
  }
  protected:
  explicit ReqLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kSignFieldNumber = 3,
    kChannelFieldNumber = 1,
  };
  // bytes account = 2;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes sign = 3;
  void clear_sign();
  const std::string& sign() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sign(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sign();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sign();
  void set_allocated_sign(std::string* sign);
  private:
  const std::string& _internal_sign() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sign(const std::string& value);
  std::string* _internal_mutable_sign();
  public:

  // int32 channel = 1;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqLogout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sign_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class AckLogout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckLogout) */ {
 public:
  inline AckLogout() : AckLogout(nullptr) {}
  ~AckLogout() override;
  explicit constexpr AckLogout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckLogout(const AckLogout& from);
  AckLogout(AckLogout&& from) noexcept
    : AckLogout() {
    *this = ::std::move(from);
  }

  inline AckLogout& operator=(const AckLogout& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckLogout& operator=(AckLogout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckLogout& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckLogout* internal_default_instance() {
    return reinterpret_cast<const AckLogout*>(
               &_AckLogout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AckLogout& a, AckLogout& b) {
    a.Swap(&b);
  }
  inline void Swap(AckLogout* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckLogout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckLogout* New() const final {
    return new AckLogout();
  }

  AckLogout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckLogout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckLogout& from);
  void MergeFrom(const AckLogout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckLogout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckLogout";
  }
  protected:
  explicit AckLogout(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 3,
    kEventCodeFieldNumber = 1,
    kChannelFieldNumber = 2,
  };
  // bytes account = 3;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 channel = 2;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::int32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckLogout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 channel_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ServerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ServerInfo) */ {
 public:
  inline ServerInfo() : ServerInfo(nullptr) {}
  ~ServerInfo() override;
  explicit constexpr ServerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerInfo(const ServerInfo& from);
  ServerInfo(ServerInfo&& from) noexcept
    : ServerInfo() {
    *this = ::std::move(from);
  }

  inline ServerInfo& operator=(const ServerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerInfo& operator=(ServerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerInfo* internal_default_instance() {
    return reinterpret_cast<const ServerInfo*>(
               &_ServerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ServerInfo& a, ServerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerInfo* New() const final {
    return new ServerInfo();
  }

  ServerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerInfo& from);
  void MergeFrom(const ServerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ServerInfo";
  }
  protected:
  explicit ServerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kServerIdFieldNumber = 1,
    kWaitCountFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // int32 server_id = 1;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 wait_count = 3;
  void clear_wait_count();
  ::PROTOBUF_NAMESPACE_ID::int32 wait_count() const;
  void set_wait_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_wait_count() const;
  void _internal_set_wait_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.EServerState status = 4;
  void clear_status();
  ::KWMsg::EServerState status() const;
  void set_status(::KWMsg::EServerState value);
  private:
  ::KWMsg::EServerState _internal_status() const;
  void _internal_set_status(::KWMsg::EServerState value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ServerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 wait_count_;
  int status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqConnectWorld final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqConnectWorld) */ {
 public:
  inline ReqConnectWorld() : ReqConnectWorld(nullptr) {}
  ~ReqConnectWorld() override;
  explicit constexpr ReqConnectWorld(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqConnectWorld(const ReqConnectWorld& from);
  ReqConnectWorld(ReqConnectWorld&& from) noexcept
    : ReqConnectWorld() {
    *this = ::std::move(from);
  }

  inline ReqConnectWorld& operator=(const ReqConnectWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqConnectWorld& operator=(ReqConnectWorld&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqConnectWorld& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqConnectWorld* internal_default_instance() {
    return reinterpret_cast<const ReqConnectWorld*>(
               &_ReqConnectWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReqConnectWorld& a, ReqConnectWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqConnectWorld* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqConnectWorld* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqConnectWorld* New() const final {
    return new ReqConnectWorld();
  }

  ReqConnectWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqConnectWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqConnectWorld& from);
  void MergeFrom(const ReqConnectWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqConnectWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqConnectWorld";
  }
  protected:
  explicit ReqConnectWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kSenderFieldNumber = 3,
    kWorldIdFieldNumber = 1,
    kLoginIdFieldNumber = 4,
    kHasRoleFieldNumber = 5,
  };
  // bytes account = 2;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // .KWMsg.Ident sender = 3;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::KWMsg::Ident& sender() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_sender();
  ::KWMsg::Ident* mutable_sender();
  void set_allocated_sender(::KWMsg::Ident* sender);
  private:
  const ::KWMsg::Ident& _internal_sender() const;
  ::KWMsg::Ident* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::KWMsg::Ident* sender);
  ::KWMsg::Ident* unsafe_arena_release_sender();

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 login_id = 4;
  void clear_login_id();
  ::PROTOBUF_NAMESPACE_ID::int32 login_id() const;
  void set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_login_id() const;
  void _internal_set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool has_role = 5;
  void clear_has_role();
  bool has_role() const;
  void set_has_role(bool value);
  private:
  bool _internal_has_role() const;
  void _internal_set_has_role(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqConnectWorld)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::KWMsg::Ident* sender_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 login_id_;
  bool has_role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class AckConnectWorldResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckConnectWorldResult) */ {
 public:
  inline AckConnectWorldResult() : AckConnectWorldResult(nullptr) {}
  ~AckConnectWorldResult() override;
  explicit constexpr AckConnectWorldResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckConnectWorldResult(const AckConnectWorldResult& from);
  AckConnectWorldResult(AckConnectWorldResult&& from) noexcept
    : AckConnectWorldResult() {
    *this = ::std::move(from);
  }

  inline AckConnectWorldResult& operator=(const AckConnectWorldResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckConnectWorldResult& operator=(AckConnectWorldResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckConnectWorldResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckConnectWorldResult* internal_default_instance() {
    return reinterpret_cast<const AckConnectWorldResult*>(
               &_AckConnectWorldResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AckConnectWorldResult& a, AckConnectWorldResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AckConnectWorldResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckConnectWorldResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckConnectWorldResult* New() const final {
    return new AckConnectWorldResult();
  }

  AckConnectWorldResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckConnectWorldResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckConnectWorldResult& from);
  void MergeFrom(const AckConnectWorldResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckConnectWorldResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckConnectWorldResult";
  }
  protected:
  explicit AckConnectWorldResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 4,
    kWorldIpFieldNumber = 5,
    kWorldKeyFieldNumber = 7,
    kTicketFieldNumber = 8,
    kSenderFieldNumber = 2,
    kWorldIdFieldNumber = 1,
    kLoginIdFieldNumber = 3,
    kWorldPortFieldNumber = 6,
  };
  // bytes account = 4;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes world_ip = 5;
  void clear_world_ip();
  const std::string& world_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_world_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_world_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_world_ip();
  void set_allocated_world_ip(std::string* world_ip);
  private:
  const std::string& _internal_world_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_world_ip(const std::string& value);
  std::string* _internal_mutable_world_ip();
  public:

  // bytes world_key = 7;
  void clear_world_key();
  const std::string& world_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_world_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_world_key();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_world_key();
  void set_allocated_world_key(std::string* world_key);
  private:
  const std::string& _internal_world_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_world_key(const std::string& value);
  std::string* _internal_mutable_world_key();
  public:

  // bytes ticket = 8;
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // .KWMsg.Ident sender = 2;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::KWMsg::Ident& sender() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_sender();
  ::KWMsg::Ident* mutable_sender();
  void set_allocated_sender(::KWMsg::Ident* sender);
  private:
  const ::KWMsg::Ident& _internal_sender() const;
  ::KWMsg::Ident* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::KWMsg::Ident* sender);
  ::KWMsg::Ident* unsafe_arena_release_sender();

  // int32 world_id = 1;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 login_id = 3;
  void clear_login_id();
  ::PROTOBUF_NAMESPACE_ID::int32 login_id() const;
  void set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_login_id() const;
  void _internal_set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_port = 6;
  void clear_world_port();
  ::PROTOBUF_NAMESPACE_ID::int32 world_port() const;
  void set_world_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_port() const;
  void _internal_set_world_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckConnectWorldResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr world_ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr world_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::KWMsg::Ident* sender_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 login_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqVerifyJwt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqVerifyJwt) */ {
 public:
  inline ReqVerifyJwt() : ReqVerifyJwt(nullptr) {}
  ~ReqVerifyJwt() override;
  explicit constexpr ReqVerifyJwt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqVerifyJwt(const ReqVerifyJwt& from);
  ReqVerifyJwt(ReqVerifyJwt&& from) noexcept
    : ReqVerifyJwt() {
    *this = ::std::move(from);
  }

  inline ReqVerifyJwt& operator=(const ReqVerifyJwt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqVerifyJwt& operator=(ReqVerifyJwt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqVerifyJwt& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqVerifyJwt* internal_default_instance() {
    return reinterpret_cast<const ReqVerifyJwt*>(
               &_ReqVerifyJwt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReqVerifyJwt& a, ReqVerifyJwt& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqVerifyJwt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqVerifyJwt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqVerifyJwt* New() const final {
    return new ReqVerifyJwt();
  }

  ReqVerifyJwt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqVerifyJwt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqVerifyJwt& from);
  void MergeFrom(const ReqVerifyJwt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqVerifyJwt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqVerifyJwt";
  }
  protected:
  explicit ReqVerifyJwt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kJwtFieldNumber = 1,
    kTicketFieldNumber = 3,
    kWorldIdFieldNumber = 2,
  };
  // bytes jwt = 1;
  void clear_jwt();
  const std::string& jwt() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_jwt(ArgT0&& arg0, ArgT... args);
  std::string* mutable_jwt();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_jwt();
  void set_allocated_jwt(std::string* jwt);
  private:
  const std::string& _internal_jwt() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_jwt(const std::string& value);
  std::string* _internal_mutable_jwt();
  public:

  // bytes ticket = 3;
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // int32 world_id = 2;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqVerifyJwt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr jwt_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class AckVerifyJwt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckVerifyJwt) */ {
 public:
  inline AckVerifyJwt() : AckVerifyJwt(nullptr) {}
  ~AckVerifyJwt() override;
  explicit constexpr AckVerifyJwt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckVerifyJwt(const AckVerifyJwt& from);
  AckVerifyJwt(AckVerifyJwt&& from) noexcept
    : AckVerifyJwt() {
    *this = ::std::move(from);
  }

  inline AckVerifyJwt& operator=(const AckVerifyJwt& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckVerifyJwt& operator=(AckVerifyJwt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckVerifyJwt& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckVerifyJwt* internal_default_instance() {
    return reinterpret_cast<const AckVerifyJwt*>(
               &_AckVerifyJwt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(AckVerifyJwt& a, AckVerifyJwt& b) {
    a.Swap(&b);
  }
  inline void Swap(AckVerifyJwt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckVerifyJwt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckVerifyJwt* New() const final {
    return new AckVerifyJwt();
  }

  AckVerifyJwt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckVerifyJwt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckVerifyJwt& from);
  void MergeFrom(const AckVerifyJwt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckVerifyJwt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckVerifyJwt";
  }
  protected:
  explicit AckVerifyJwt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSecurityKeyFieldNumber = 3,
    kSecurityIvFieldNumber = 4,
    kClientIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // bytes security_key = 3;
  void clear_security_key();
  const std::string& security_key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_security_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_security_key();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_security_key();
  void set_allocated_security_key(std::string* security_key);
  private:
  const std::string& _internal_security_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_security_key(const std::string& value);
  std::string* _internal_mutable_security_key();
  public:

  // bytes security_iv = 4;
  void clear_security_iv();
  const std::string& security_iv() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_security_iv(ArgT0&& arg0, ArgT... args);
  std::string* mutable_security_iv();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_security_iv();
  void set_allocated_security_iv(std::string* security_iv);
  private:
  const std::string& _internal_security_iv() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_security_iv(const std::string& value);
  std::string* _internal_mutable_security_iv();
  public:

  // .KWMsg.Ident client_id = 2;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  const ::KWMsg::Ident& client_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_client_id();
  ::KWMsg::Ident* mutable_client_id();
  void set_allocated_client_id(::KWMsg::Ident* client_id);
  private:
  const ::KWMsg::Ident& _internal_client_id() const;
  ::KWMsg::Ident* _internal_mutable_client_id();
  public:
  void unsafe_arena_set_allocated_client_id(
      ::KWMsg::Ident* client_id);
  ::KWMsg::Ident* unsafe_arena_release_client_id();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckVerifyJwt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr security_key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr security_iv_;
  ::KWMsg::Ident* client_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqAckKickFromWorld final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAckKickFromWorld) */ {
 public:
  inline ReqAckKickFromWorld() : ReqAckKickFromWorld(nullptr) {}
  ~ReqAckKickFromWorld() override;
  explicit constexpr ReqAckKickFromWorld(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckKickFromWorld(const ReqAckKickFromWorld& from);
  ReqAckKickFromWorld(ReqAckKickFromWorld&& from) noexcept
    : ReqAckKickFromWorld() {
    *this = ::std::move(from);
  }

  inline ReqAckKickFromWorld& operator=(const ReqAckKickFromWorld& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckKickFromWorld& operator=(ReqAckKickFromWorld&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckKickFromWorld& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckKickFromWorld* internal_default_instance() {
    return reinterpret_cast<const ReqAckKickFromWorld*>(
               &_ReqAckKickFromWorld_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReqAckKickFromWorld& a, ReqAckKickFromWorld& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckKickFromWorld* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckKickFromWorld* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckKickFromWorld* New() const final {
    return new ReqAckKickFromWorld();
  }

  ReqAckKickFromWorld* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckKickFromWorld>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckKickFromWorld& from);
  void MergeFrom(const ReqAckKickFromWorld& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckKickFromWorld* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAckKickFromWorld";
  }
  protected:
  explicit ReqAckKickFromWorld(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kTargetDigitalIdFieldNumber = 2,
    kTargetClientIdFieldNumber = 4,
    kTargetGateIdFieldNumber = 3,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes target_digital_id = 2;
  void clear_target_digital_id();
  const std::string& target_digital_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_digital_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_digital_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_target_digital_id();
  void set_allocated_target_digital_id(std::string* target_digital_id);
  private:
  const std::string& _internal_target_digital_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_digital_id(const std::string& value);
  std::string* _internal_mutable_target_digital_id();
  public:

  // .KWMsg.Ident target_client_id = 4;
  bool has_target_client_id() const;
  private:
  bool _internal_has_target_client_id() const;
  public:
  void clear_target_client_id();
  const ::KWMsg::Ident& target_client_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_target_client_id();
  ::KWMsg::Ident* mutable_target_client_id();
  void set_allocated_target_client_id(::KWMsg::Ident* target_client_id);
  private:
  const ::KWMsg::Ident& _internal_target_client_id() const;
  ::KWMsg::Ident* _internal_mutable_target_client_id();
  public:
  void unsafe_arena_set_allocated_target_client_id(
      ::KWMsg::Ident* target_client_id);
  ::KWMsg::Ident* unsafe_arena_release_target_client_id();

  // int32 target_gate_id = 3;
  void clear_target_gate_id();
  ::PROTOBUF_NAMESPACE_ID::int32 target_gate_id() const;
  void set_target_gate_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_gate_id() const;
  void _internal_set_target_gate_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAckKickFromWorld)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_digital_id_;
  ::KWMsg::Ident* target_client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_gate_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqLeaveGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqLeaveGame) */ {
 public:
  inline ReqLeaveGame() : ReqLeaveGame(nullptr) {}
  ~ReqLeaveGame() override;
  explicit constexpr ReqLeaveGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqLeaveGame(const ReqLeaveGame& from);
  ReqLeaveGame(ReqLeaveGame&& from) noexcept
    : ReqLeaveGame() {
    *this = ::std::move(from);
  }

  inline ReqLeaveGame& operator=(const ReqLeaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLeaveGame& operator=(ReqLeaveGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqLeaveGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqLeaveGame* internal_default_instance() {
    return reinterpret_cast<const ReqLeaveGame*>(
               &_ReqLeaveGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReqLeaveGame& a, ReqLeaveGame& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqLeaveGame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqLeaveGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqLeaveGame* New() const final {
    return new ReqLeaveGame();
  }

  ReqLeaveGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqLeaveGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqLeaveGame& from);
  void MergeFrom(const ReqLeaveGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLeaveGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqLeaveGame";
  }
  protected:
  explicit ReqLeaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kClientIdFieldNumber = 3,
    kGameIdFieldNumber = 4,
    kReasonFieldNumber = 5,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident client_id = 3;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  const ::KWMsg::Ident& client_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_client_id();
  ::KWMsg::Ident* mutable_client_id();
  void set_allocated_client_id(::KWMsg::Ident* client_id);
  private:
  const ::KWMsg::Ident& _internal_client_id() const;
  ::KWMsg::Ident* _internal_mutable_client_id();
  public:
  void unsafe_arena_set_allocated_client_id(
      ::KWMsg::Ident* client_id);
  ::KWMsg::Ident* unsafe_arena_release_client_id();

  // int32 game_id = 4;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.EOfflineReason reason = 5;
  void clear_reason();
  ::KWMsg::EOfflineReason reason() const;
  void set_reason(::KWMsg::EOfflineReason value);
  private:
  ::KWMsg::EOfflineReason _internal_reason() const;
  void _internal_set_reason(::KWMsg::EOfflineReason value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqLeaveGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class AckLeaveGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckLeaveGame) */ {
 public:
  inline AckLeaveGame() : AckLeaveGame(nullptr) {}
  ~AckLeaveGame() override;
  explicit constexpr AckLeaveGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckLeaveGame(const AckLeaveGame& from);
  AckLeaveGame(AckLeaveGame&& from) noexcept
    : AckLeaveGame() {
    *this = ::std::move(from);
  }

  inline AckLeaveGame& operator=(const AckLeaveGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckLeaveGame& operator=(AckLeaveGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckLeaveGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckLeaveGame* internal_default_instance() {
    return reinterpret_cast<const AckLeaveGame*>(
               &_AckLeaveGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AckLeaveGame& a, AckLeaveGame& b) {
    a.Swap(&b);
  }
  inline void Swap(AckLeaveGame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckLeaveGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckLeaveGame* New() const final {
    return new AckLeaveGame();
  }

  AckLeaveGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckLeaveGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckLeaveGame& from);
  void MergeFrom(const AckLeaveGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckLeaveGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckLeaveGame";
  }
  protected:
  explicit AckLeaveGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kPlayerIdFieldNumber = 2,
    kClientIdFieldNumber = 3,
    kGameIdFieldNumber = 4,
    kReasonFieldNumber = 5,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident client_id = 3;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  const ::KWMsg::Ident& client_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_client_id();
  ::KWMsg::Ident* mutable_client_id();
  void set_allocated_client_id(::KWMsg::Ident* client_id);
  private:
  const ::KWMsg::Ident& _internal_client_id() const;
  ::KWMsg::Ident* _internal_mutable_client_id();
  public:
  void unsafe_arena_set_allocated_client_id(
      ::KWMsg::Ident* client_id);
  ::KWMsg::Ident* unsafe_arena_release_client_id();

  // int32 game_id = 4;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.EOfflineReason reason = 5;
  void clear_reason();
  ::KWMsg::EOfflineReason reason() const;
  void set_reason(::KWMsg::EOfflineReason value);
  private:
  ::KWMsg::EOfflineReason _internal_reason() const;
  void _internal_set_reason(::KWMsg::EOfflineReason value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckLeaveGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  int reason_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqEnterGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqEnterGame) */ {
 public:
  inline ReqEnterGame() : ReqEnterGame(nullptr) {}
  ~ReqEnterGame() override;
  explicit constexpr ReqEnterGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqEnterGame(const ReqEnterGame& from);
  ReqEnterGame(ReqEnterGame&& from) noexcept
    : ReqEnterGame() {
    *this = ::std::move(from);
  }

  inline ReqEnterGame& operator=(const ReqEnterGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqEnterGame& operator=(ReqEnterGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqEnterGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqEnterGame* internal_default_instance() {
    return reinterpret_cast<const ReqEnterGame*>(
               &_ReqEnterGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ReqEnterGame& a, ReqEnterGame& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqEnterGame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqEnterGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqEnterGame* New() const final {
    return new ReqEnterGame();
  }

  ReqEnterGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqEnterGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqEnterGame& from);
  void MergeFrom(const ReqEnterGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqEnterGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqEnterGame";
  }
  protected:
  explicit ReqEnterGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kDigitalIdFieldNumber = 2,
    kDeviceInfoFieldNumber = 3,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes digital_id = 2;
  void clear_digital_id();
  const std::string& digital_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digital_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digital_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_digital_id();
  void set_allocated_digital_id(std::string* digital_id);
  private:
  const std::string& _internal_digital_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digital_id(const std::string& value);
  std::string* _internal_mutable_digital_id();
  public:

  // .KWMsg.DeviceInfo device_info = 3;
  bool has_device_info() const;
  private:
  bool _internal_has_device_info() const;
  public:
  void clear_device_info();
  const ::KWMsg::DeviceInfo& device_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::DeviceInfo* release_device_info();
  ::KWMsg::DeviceInfo* mutable_device_info();
  void set_allocated_device_info(::KWMsg::DeviceInfo* device_info);
  private:
  const ::KWMsg::DeviceInfo& _internal_device_info() const;
  ::KWMsg::DeviceInfo* _internal_mutable_device_info();
  public:
  void unsafe_arena_set_allocated_device_info(
      ::KWMsg::DeviceInfo* device_info);
  ::KWMsg::DeviceInfo* unsafe_arena_release_device_info();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqEnterGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digital_id_;
  ::KWMsg::DeviceInfo* device_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqPlayerLite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqPlayerLite) */ {
 public:
  inline ReqPlayerLite() : ReqPlayerLite(nullptr) {}
  ~ReqPlayerLite() override;
  explicit constexpr ReqPlayerLite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqPlayerLite(const ReqPlayerLite& from);
  ReqPlayerLite(ReqPlayerLite&& from) noexcept
    : ReqPlayerLite() {
    *this = ::std::move(from);
  }

  inline ReqPlayerLite& operator=(const ReqPlayerLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqPlayerLite& operator=(ReqPlayerLite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqPlayerLite& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqPlayerLite* internal_default_instance() {
    return reinterpret_cast<const ReqPlayerLite*>(
               &_ReqPlayerLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ReqPlayerLite& a, ReqPlayerLite& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqPlayerLite* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqPlayerLite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqPlayerLite* New() const final {
    return new ReqPlayerLite();
  }

  ReqPlayerLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqPlayerLite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqPlayerLite& from);
  void MergeFrom(const ReqPlayerLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqPlayerLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqPlayerLite";
  }
  protected:
  explicit ReqPlayerLite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kDigitalIdFieldNumber = 2,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes digital_id = 2;
  void clear_digital_id();
  const std::string& digital_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digital_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digital_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_digital_id();
  void set_allocated_digital_id(std::string* digital_id);
  private:
  const std::string& _internal_digital_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digital_id(const std::string& value);
  std::string* _internal_mutable_digital_id();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqPlayerLite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digital_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqUpdateAccountLastLoginInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUpdateAccountLastLoginInfo) */ {
 public:
  inline ReqUpdateAccountLastLoginInfo() : ReqUpdateAccountLastLoginInfo(nullptr) {}
  ~ReqUpdateAccountLastLoginInfo() override;
  explicit constexpr ReqUpdateAccountLastLoginInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUpdateAccountLastLoginInfo(const ReqUpdateAccountLastLoginInfo& from);
  ReqUpdateAccountLastLoginInfo(ReqUpdateAccountLastLoginInfo&& from) noexcept
    : ReqUpdateAccountLastLoginInfo() {
    *this = ::std::move(from);
  }

  inline ReqUpdateAccountLastLoginInfo& operator=(const ReqUpdateAccountLastLoginInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUpdateAccountLastLoginInfo& operator=(ReqUpdateAccountLastLoginInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUpdateAccountLastLoginInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUpdateAccountLastLoginInfo* internal_default_instance() {
    return reinterpret_cast<const ReqUpdateAccountLastLoginInfo*>(
               &_ReqUpdateAccountLastLoginInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ReqUpdateAccountLastLoginInfo& a, ReqUpdateAccountLastLoginInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUpdateAccountLastLoginInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUpdateAccountLastLoginInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUpdateAccountLastLoginInfo* New() const final {
    return new ReqUpdateAccountLastLoginInfo();
  }

  ReqUpdateAccountLastLoginInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUpdateAccountLastLoginInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUpdateAccountLastLoginInfo& from);
  void MergeFrom(const ReqUpdateAccountLastLoginInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUpdateAccountLastLoginInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUpdateAccountLastLoginInfo";
  }
  protected:
  explicit ReqUpdateAccountLastLoginInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kDevIdFieldNumber = 2,
    kZoneIdFieldNumber = 3,
    kLoginTsFieldNumber = 4,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes dev_id = 2;
  void clear_dev_id();
  const std::string& dev_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dev_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dev_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_dev_id();
  void set_allocated_dev_id(std::string* dev_id);
  private:
  const std::string& _internal_dev_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dev_id(const std::string& value);
  std::string* _internal_mutable_dev_id();
  public:

  // bytes zone_id = 3;
  void clear_zone_id();
  const std::string& zone_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_zone_id();
  void set_allocated_zone_id(std::string* zone_id);
  private:
  const std::string& _internal_zone_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone_id(const std::string& value);
  std::string* _internal_mutable_zone_id();
  public:

  // int64 login_ts = 4;
  void clear_login_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 login_ts() const;
  void set_login_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_login_ts() const;
  void _internal_set_login_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUpdateAccountLastLoginInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dev_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 login_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class PlayerLiteInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PlayerLiteInfo) */ {
 public:
  inline PlayerLiteInfo() : PlayerLiteInfo(nullptr) {}
  ~PlayerLiteInfo() override;
  explicit constexpr PlayerLiteInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerLiteInfo(const PlayerLiteInfo& from);
  PlayerLiteInfo(PlayerLiteInfo&& from) noexcept
    : PlayerLiteInfo() {
    *this = ::std::move(from);
  }

  inline PlayerLiteInfo& operator=(const PlayerLiteInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerLiteInfo& operator=(PlayerLiteInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerLiteInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerLiteInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerLiteInfo*>(
               &_PlayerLiteInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(PlayerLiteInfo& a, PlayerLiteInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerLiteInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerLiteInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerLiteInfo* New() const final {
    return new PlayerLiteInfo();
  }

  PlayerLiteInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerLiteInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerLiteInfo& from);
  void MergeFrom(const PlayerLiteInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerLiteInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PlayerLiteInfo";
  }
  protected:
  explicit PlayerLiteInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kDigitalIdFieldNumber = 3,
    kNicknameFieldNumber = 4,
    kZoneIdFieldNumber = 5,
    kAvatarFieldNumber = 8,
    kAvatarFrameFieldNumber = 9,
    kPlayerIdFieldNumber = 1,
    kLevelFieldNumber = 6,
    kLastOfflineTimeFieldNumber = 7,
  };
  // bytes account = 2;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes digital_id = 3;
  void clear_digital_id();
  const std::string& digital_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digital_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digital_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_digital_id();
  void set_allocated_digital_id(std::string* digital_id);
  private:
  const std::string& _internal_digital_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digital_id(const std::string& value);
  std::string* _internal_mutable_digital_id();
  public:

  // bytes nickname = 4;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // bytes zone_id = 5;
  void clear_zone_id();
  const std::string& zone_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_zone_id();
  void set_allocated_zone_id(std::string* zone_id);
  private:
  const std::string& _internal_zone_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone_id(const std::string& value);
  std::string* _internal_mutable_zone_id();
  public:

  // bytes avatar = 8;
  void clear_avatar();
  const std::string& avatar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // bytes avatar_frame = 9;
  void clear_avatar_frame();
  const std::string& avatar_frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_frame();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_avatar_frame();
  void set_allocated_avatar_frame(std::string* avatar_frame);
  private:
  const std::string& _internal_avatar_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_frame(const std::string& value);
  std::string* _internal_mutable_avatar_frame();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 level = 6;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 last_offline_time = 7;
  void clear_last_offline_time();
  ::PROTOBUF_NAMESPACE_ID::int32 last_offline_time() const;
  void set_last_offline_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_last_offline_time() const;
  void _internal_set_last_offline_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.PlayerLiteInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digital_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_frame_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 last_offline_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class AckPlayerLite final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckPlayerLite) */ {
 public:
  inline AckPlayerLite() : AckPlayerLite(nullptr) {}
  ~AckPlayerLite() override;
  explicit constexpr AckPlayerLite(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckPlayerLite(const AckPlayerLite& from);
  AckPlayerLite(AckPlayerLite&& from) noexcept
    : AckPlayerLite() {
    *this = ::std::move(from);
  }

  inline AckPlayerLite& operator=(const AckPlayerLite& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckPlayerLite& operator=(AckPlayerLite&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckPlayerLite& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckPlayerLite* internal_default_instance() {
    return reinterpret_cast<const AckPlayerLite*>(
               &_AckPlayerLite_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AckPlayerLite& a, AckPlayerLite& b) {
    a.Swap(&b);
  }
  inline void Swap(AckPlayerLite* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckPlayerLite* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckPlayerLite* New() const final {
    return new AckPlayerLite();
  }

  AckPlayerLite* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckPlayerLite>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckPlayerLite& from);
  void MergeFrom(const AckPlayerLite& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPlayerLite* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckPlayerLite";
  }
  protected:
  explicit AckPlayerLite(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerDataFieldNumber = 1,
  };
  // .KWMsg.PlayerLiteInfo player_data = 1;
  bool has_player_data() const;
  private:
  bool _internal_has_player_data() const;
  public:
  void clear_player_data();
  const ::KWMsg::PlayerLiteInfo& player_data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::PlayerLiteInfo* release_player_data();
  ::KWMsg::PlayerLiteInfo* mutable_player_data();
  void set_allocated_player_data(::KWMsg::PlayerLiteInfo* player_data);
  private:
  const ::KWMsg::PlayerLiteInfo& _internal_player_data() const;
  ::KWMsg::PlayerLiteInfo* _internal_mutable_player_data();
  public:
  void unsafe_arena_set_allocated_player_data(
      ::KWMsg::PlayerLiteInfo* player_data);
  ::KWMsg::PlayerLiteInfo* unsafe_arena_release_player_data();

  // @@protoc_insertion_point(class_scope:KWMsg.AckPlayerLite)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::PlayerLiteInfo* player_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqUpdateAccountPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUpdateAccountPlayer) */ {
 public:
  inline ReqUpdateAccountPlayer() : ReqUpdateAccountPlayer(nullptr) {}
  ~ReqUpdateAccountPlayer() override;
  explicit constexpr ReqUpdateAccountPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUpdateAccountPlayer(const ReqUpdateAccountPlayer& from);
  ReqUpdateAccountPlayer(ReqUpdateAccountPlayer&& from) noexcept
    : ReqUpdateAccountPlayer() {
    *this = ::std::move(from);
  }

  inline ReqUpdateAccountPlayer& operator=(const ReqUpdateAccountPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUpdateAccountPlayer& operator=(ReqUpdateAccountPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUpdateAccountPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUpdateAccountPlayer* internal_default_instance() {
    return reinterpret_cast<const ReqUpdateAccountPlayer*>(
               &_ReqUpdateAccountPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ReqUpdateAccountPlayer& a, ReqUpdateAccountPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUpdateAccountPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUpdateAccountPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUpdateAccountPlayer* New() const final {
    return new ReqUpdateAccountPlayer();
  }

  ReqUpdateAccountPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUpdateAccountPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUpdateAccountPlayer& from);
  void MergeFrom(const ReqUpdateAccountPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUpdateAccountPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUpdateAccountPlayer";
  }
  protected:
  explicit ReqUpdateAccountPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kZoneIdFieldNumber = 2,
    kJsonFieldNumber = 3,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes zone_id = 2;
  void clear_zone_id();
  const std::string& zone_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_zone_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_zone_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_zone_id();
  void set_allocated_zone_id(std::string* zone_id);
  private:
  const std::string& _internal_zone_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_zone_id(const std::string& value);
  std::string* _internal_mutable_zone_id();
  public:

  // bytes json = 3;
  void clear_json();
  const std::string& json() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_json(ArgT0&& arg0, ArgT... args);
  std::string* mutable_json();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_json();
  void set_allocated_json(std::string* json);
  private:
  const std::string& _internal_json() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_json(const std::string& value);
  std::string* _internal_mutable_json();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUpdateAccountPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr zone_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr json_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqLoadPlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqLoadPlayerData) */ {
 public:
  inline ReqLoadPlayerData() : ReqLoadPlayerData(nullptr) {}
  ~ReqLoadPlayerData() override;
  explicit constexpr ReqLoadPlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqLoadPlayerData(const ReqLoadPlayerData& from);
  ReqLoadPlayerData(ReqLoadPlayerData&& from) noexcept
    : ReqLoadPlayerData() {
    *this = ::std::move(from);
  }

  inline ReqLoadPlayerData& operator=(const ReqLoadPlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLoadPlayerData& operator=(ReqLoadPlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqLoadPlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqLoadPlayerData* internal_default_instance() {
    return reinterpret_cast<const ReqLoadPlayerData*>(
               &_ReqLoadPlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ReqLoadPlayerData& a, ReqLoadPlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqLoadPlayerData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqLoadPlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqLoadPlayerData* New() const final {
    return new ReqLoadPlayerData();
  }

  ReqLoadPlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqLoadPlayerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqLoadPlayerData& from);
  void MergeFrom(const ReqLoadPlayerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLoadPlayerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqLoadPlayerData";
  }
  protected:
  explicit ReqLoadPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqLoadPlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class AckLoadPlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckLoadPlayerData) */ {
 public:
  inline AckLoadPlayerData() : AckLoadPlayerData(nullptr) {}
  ~AckLoadPlayerData() override;
  explicit constexpr AckLoadPlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckLoadPlayerData(const AckLoadPlayerData& from);
  AckLoadPlayerData(AckLoadPlayerData&& from) noexcept
    : AckLoadPlayerData() {
    *this = ::std::move(from);
  }

  inline AckLoadPlayerData& operator=(const AckLoadPlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckLoadPlayerData& operator=(AckLoadPlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckLoadPlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckLoadPlayerData* internal_default_instance() {
    return reinterpret_cast<const AckLoadPlayerData*>(
               &_AckLoadPlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AckLoadPlayerData& a, AckLoadPlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(AckLoadPlayerData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckLoadPlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckLoadPlayerData* New() const final {
    return new AckLoadPlayerData();
  }

  AckLoadPlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckLoadPlayerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckLoadPlayerData& from);
  void MergeFrom(const AckLoadPlayerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckLoadPlayerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckLoadPlayerData";
  }
  protected:
  explicit AckLoadPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataPackFieldNumber = 1,
  };
  // .KWMsg.PlayerDataPack data_pack = 1;
  bool has_data_pack() const;
  private:
  bool _internal_has_data_pack() const;
  public:
  void clear_data_pack();
  const ::KWMsg::PlayerDataPack& data_pack() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::PlayerDataPack* release_data_pack();
  ::KWMsg::PlayerDataPack* mutable_data_pack();
  void set_allocated_data_pack(::KWMsg::PlayerDataPack* data_pack);
  private:
  const ::KWMsg::PlayerDataPack& _internal_data_pack() const;
  ::KWMsg::PlayerDataPack* _internal_mutable_data_pack();
  public:
  void unsafe_arena_set_allocated_data_pack(
      ::KWMsg::PlayerDataPack* data_pack);
  ::KWMsg::PlayerDataPack* unsafe_arena_release_data_pack();

  // @@protoc_insertion_point(class_scope:KWMsg.AckLoadPlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::PlayerDataPack* data_pack_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class PlayerDataPack final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PlayerDataPack) */ {
 public:
  inline PlayerDataPack() : PlayerDataPack(nullptr) {}
  ~PlayerDataPack() override;
  explicit constexpr PlayerDataPack(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerDataPack(const PlayerDataPack& from);
  PlayerDataPack(PlayerDataPack&& from) noexcept
    : PlayerDataPack() {
    *this = ::std::move(from);
  }

  inline PlayerDataPack& operator=(const PlayerDataPack& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerDataPack& operator=(PlayerDataPack&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerDataPack& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerDataPack* internal_default_instance() {
    return reinterpret_cast<const PlayerDataPack*>(
               &_PlayerDataPack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(PlayerDataPack& a, PlayerDataPack& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerDataPack* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerDataPack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerDataPack* New() const final {
    return new PlayerDataPack();
  }

  PlayerDataPack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerDataPack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerDataPack& from);
  void MergeFrom(const PlayerDataPack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerDataPack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PlayerDataPack";
  }
  protected:
  explicit PlayerDataPack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kPropertyFieldNumber = 2,
    kRecordFieldNumber = 3,
  };
  // .KWMsg.Ident id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::KWMsg::Ident& id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_id();
  ::KWMsg::Ident* mutable_id();
  void set_allocated_id(::KWMsg::Ident* id);
  private:
  const ::KWMsg::Ident& _internal_id() const;
  ::KWMsg::Ident* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::KWMsg::Ident* id);
  ::KWMsg::Ident* unsafe_arena_release_id();

  // .KWMsg.ObjectPropertyList property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const ::KWMsg::ObjectPropertyList& property() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::ObjectPropertyList* release_property();
  ::KWMsg::ObjectPropertyList* mutable_property();
  void set_allocated_property(::KWMsg::ObjectPropertyList* property);
  private:
  const ::KWMsg::ObjectPropertyList& _internal_property() const;
  ::KWMsg::ObjectPropertyList* _internal_mutable_property();
  public:
  void unsafe_arena_set_allocated_property(
      ::KWMsg::ObjectPropertyList* property);
  ::KWMsg::ObjectPropertyList* unsafe_arena_release_property();

  // .KWMsg.ObjectRecordList record = 3;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::KWMsg::ObjectRecordList& record() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::ObjectRecordList* release_record();
  ::KWMsg::ObjectRecordList* mutable_record();
  void set_allocated_record(::KWMsg::ObjectRecordList* record);
  private:
  const ::KWMsg::ObjectRecordList& _internal_record() const;
  ::KWMsg::ObjectRecordList* _internal_mutable_record();
  public:
  void unsafe_arena_set_allocated_record(
      ::KWMsg::ObjectRecordList* record);
  ::KWMsg::ObjectRecordList* unsafe_arena_release_record();

  // @@protoc_insertion_point(class_scope:KWMsg.PlayerDataPack)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* id_;
  ::KWMsg::ObjectPropertyList* property_;
  ::KWMsg::ObjectRecordList* record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ServerHeartBeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ServerHeartBeat) */ {
 public:
  inline ServerHeartBeat() : ServerHeartBeat(nullptr) {}
  ~ServerHeartBeat() override;
  explicit constexpr ServerHeartBeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ServerHeartBeat(const ServerHeartBeat& from);
  ServerHeartBeat(ServerHeartBeat&& from) noexcept
    : ServerHeartBeat() {
    *this = ::std::move(from);
  }

  inline ServerHeartBeat& operator=(const ServerHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerHeartBeat& operator=(ServerHeartBeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerHeartBeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerHeartBeat* internal_default_instance() {
    return reinterpret_cast<const ServerHeartBeat*>(
               &_ServerHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ServerHeartBeat& a, ServerHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerHeartBeat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerHeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServerHeartBeat* New() const final {
    return new ServerHeartBeat();
  }

  ServerHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServerHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServerHeartBeat& from);
  void MergeFrom(const ServerHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServerHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ServerHeartBeat";
  }
  protected:
  explicit ServerHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCountFieldNumber = 1,
  };
  // int32 count = 1;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ServerHeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class PlayerOnlineNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PlayerOnlineNotify) */ {
 public:
  inline PlayerOnlineNotify() : PlayerOnlineNotify(nullptr) {}
  ~PlayerOnlineNotify() override;
  explicit constexpr PlayerOnlineNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerOnlineNotify(const PlayerOnlineNotify& from);
  PlayerOnlineNotify(PlayerOnlineNotify&& from) noexcept
    : PlayerOnlineNotify() {
    *this = ::std::move(from);
  }

  inline PlayerOnlineNotify& operator=(const PlayerOnlineNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerOnlineNotify& operator=(PlayerOnlineNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerOnlineNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerOnlineNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerOnlineNotify*>(
               &_PlayerOnlineNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(PlayerOnlineNotify& a, PlayerOnlineNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerOnlineNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerOnlineNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerOnlineNotify* New() const final {
    return new PlayerOnlineNotify();
  }

  PlayerOnlineNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerOnlineNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerOnlineNotify& from);
  void MergeFrom(const PlayerOnlineNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerOnlineNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PlayerOnlineNotify";
  }
  protected:
  explicit PlayerOnlineNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kDigitalIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kClientIdFieldNumber = 6,
    kGameIdFieldNumber = 4,
    kProxyIdFieldNumber = 5,
  };
  // bytes account = 2;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes digital_id = 3;
  void clear_digital_id();
  const std::string& digital_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_digital_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_digital_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_digital_id();
  void set_allocated_digital_id(std::string* digital_id);
  private:
  const std::string& _internal_digital_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_digital_id(const std::string& value);
  std::string* _internal_mutable_digital_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident client_id = 6;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  const ::KWMsg::Ident& client_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_client_id();
  ::KWMsg::Ident* mutable_client_id();
  void set_allocated_client_id(::KWMsg::Ident* client_id);
  private:
  const ::KWMsg::Ident& _internal_client_id() const;
  ::KWMsg::Ident* _internal_mutable_client_id();
  public:
  void unsafe_arena_set_allocated_client_id(
      ::KWMsg::Ident* client_id);
  ::KWMsg::Ident* unsafe_arena_release_client_id();

  // int32 game_id = 4;
  void clear_game_id();
  ::PROTOBUF_NAMESPACE_ID::int32 game_id() const;
  void set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_game_id() const;
  void _internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 proxy_id = 5;
  void clear_proxy_id();
  ::PROTOBUF_NAMESPACE_ID::int32 proxy_id() const;
  void set_proxy_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_proxy_id() const;
  void _internal_set_proxy_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.PlayerOnlineNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr digital_id_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 game_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 proxy_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class PlayerOfflineNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PlayerOfflineNotify) */ {
 public:
  inline PlayerOfflineNotify() : PlayerOfflineNotify(nullptr) {}
  ~PlayerOfflineNotify() override;
  explicit constexpr PlayerOfflineNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerOfflineNotify(const PlayerOfflineNotify& from);
  PlayerOfflineNotify(PlayerOfflineNotify&& from) noexcept
    : PlayerOfflineNotify() {
    *this = ::std::move(from);
  }

  inline PlayerOfflineNotify& operator=(const PlayerOfflineNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerOfflineNotify& operator=(PlayerOfflineNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerOfflineNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerOfflineNotify* internal_default_instance() {
    return reinterpret_cast<const PlayerOfflineNotify*>(
               &_PlayerOfflineNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(PlayerOfflineNotify& a, PlayerOfflineNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerOfflineNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerOfflineNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerOfflineNotify* New() const final {
    return new PlayerOfflineNotify();
  }

  PlayerOfflineNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerOfflineNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerOfflineNotify& from);
  void MergeFrom(const PlayerOfflineNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerOfflineNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PlayerOfflineNotify";
  }
  protected:
  explicit PlayerOfflineNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.PlayerOfflineNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqAckSetGameServerState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAckSetGameServerState) */ {
 public:
  inline ReqAckSetGameServerState() : ReqAckSetGameServerState(nullptr) {}
  ~ReqAckSetGameServerState() override;
  explicit constexpr ReqAckSetGameServerState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckSetGameServerState(const ReqAckSetGameServerState& from);
  ReqAckSetGameServerState(ReqAckSetGameServerState&& from) noexcept
    : ReqAckSetGameServerState() {
    *this = ::std::move(from);
  }

  inline ReqAckSetGameServerState& operator=(const ReqAckSetGameServerState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckSetGameServerState& operator=(ReqAckSetGameServerState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckSetGameServerState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckSetGameServerState* internal_default_instance() {
    return reinterpret_cast<const ReqAckSetGameServerState*>(
               &_ReqAckSetGameServerState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ReqAckSetGameServerState& a, ReqAckSetGameServerState& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckSetGameServerState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckSetGameServerState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckSetGameServerState* New() const final {
    return new ReqAckSetGameServerState();
  }

  ReqAckSetGameServerState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckSetGameServerState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckSetGameServerState& from);
  void MergeFrom(const ReqAckSetGameServerState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckSetGameServerState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAckSetGameServerState";
  }
  protected:
  explicit ReqAckSetGameServerState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerStateFieldNumber = 1,
    kKickOffAllFieldNumber = 2,
  };
  // .KWMsg.EServerState server_state = 1;
  void clear_server_state();
  ::KWMsg::EServerState server_state() const;
  void set_server_state(::KWMsg::EServerState value);
  private:
  ::KWMsg::EServerState _internal_server_state() const;
  void _internal_set_server_state(::KWMsg::EServerState value);
  public:

  // int32 kick_off_all = 2;
  void clear_kick_off_all();
  ::PROTOBUF_NAMESPACE_ID::int32 kick_off_all() const;
  void set_kick_off_all(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_kick_off_all() const;
  void _internal_set_kick_off_all(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAckSetGameServerState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int server_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 kick_off_all_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqAckRefreshConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAckRefreshConfig) */ {
 public:
  inline ReqAckRefreshConfig() : ReqAckRefreshConfig(nullptr) {}
  ~ReqAckRefreshConfig() override;
  explicit constexpr ReqAckRefreshConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckRefreshConfig(const ReqAckRefreshConfig& from);
  ReqAckRefreshConfig(ReqAckRefreshConfig&& from) noexcept
    : ReqAckRefreshConfig() {
    *this = ::std::move(from);
  }

  inline ReqAckRefreshConfig& operator=(const ReqAckRefreshConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckRefreshConfig& operator=(ReqAckRefreshConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckRefreshConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckRefreshConfig* internal_default_instance() {
    return reinterpret_cast<const ReqAckRefreshConfig*>(
               &_ReqAckRefreshConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ReqAckRefreshConfig& a, ReqAckRefreshConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckRefreshConfig* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckRefreshConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckRefreshConfig* New() const final {
    return new ReqAckRefreshConfig();
  }

  ReqAckRefreshConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckRefreshConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckRefreshConfig& from);
  void MergeFrom(const ReqAckRefreshConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckRefreshConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAckRefreshConfig";
  }
  protected:
  explicit ReqAckRefreshConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTsFieldNumber = 1,
  };
  // int64 ts = 1;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAckRefreshConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqReconnect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqReconnect) */ {
 public:
  inline ReqReconnect() : ReqReconnect(nullptr) {}
  ~ReqReconnect() override;
  explicit constexpr ReqReconnect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqReconnect(const ReqReconnect& from);
  ReqReconnect(ReqReconnect&& from) noexcept
    : ReqReconnect() {
    *this = ::std::move(from);
  }

  inline ReqReconnect& operator=(const ReqReconnect& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqReconnect& operator=(ReqReconnect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqReconnect& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqReconnect* internal_default_instance() {
    return reinterpret_cast<const ReqReconnect*>(
               &_ReqReconnect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ReqReconnect& a, ReqReconnect& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqReconnect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqReconnect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqReconnect* New() const final {
    return new ReqReconnect();
  }

  ReqReconnect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqReconnect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqReconnect& from);
  void MergeFrom(const ReqReconnect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqReconnect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqReconnect";
  }
  protected:
  explicit ReqReconnect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTokenFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kClientIdFieldNumber = 2,
    kBattleSeqIdFieldNumber = 4,
  };
  // bytes token = 3;
  void clear_token();
  const std::string& token() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_token(ArgT0&& arg0, ArgT... args);
  std::string* mutable_token();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_token();
  void set_allocated_token(std::string* token);
  private:
  const std::string& _internal_token() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_token(const std::string& value);
  std::string* _internal_mutable_token();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident client_id = 2;
  bool has_client_id() const;
  private:
  bool _internal_has_client_id() const;
  public:
  void clear_client_id();
  const ::KWMsg::Ident& client_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_client_id();
  ::KWMsg::Ident* mutable_client_id();
  void set_allocated_client_id(::KWMsg::Ident* client_id);
  private:
  const ::KWMsg::Ident& _internal_client_id() const;
  ::KWMsg::Ident* _internal_mutable_client_id();
  public:
  void unsafe_arena_set_allocated_client_id(
      ::KWMsg::Ident* client_id);
  ::KWMsg::Ident* unsafe_arena_release_client_id();

  // int32 battle_seq_id = 4;
  void clear_battle_seq_id();
  ::PROTOBUF_NAMESPACE_ID::int32 battle_seq_id() const;
  void set_battle_seq_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_battle_seq_id() const;
  void _internal_set_battle_seq_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqReconnect)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr token_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* client_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 battle_seq_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqRecord) */ {
 public:
  inline ReqRecord() : ReqRecord(nullptr) {}
  ~ReqRecord() override;
  explicit constexpr ReqRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqRecord(const ReqRecord& from);
  ReqRecord(ReqRecord&& from) noexcept
    : ReqRecord() {
    *this = ::std::move(from);
  }

  inline ReqRecord& operator=(const ReqRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqRecord& operator=(ReqRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqRecord* internal_default_instance() {
    return reinterpret_cast<const ReqRecord*>(
               &_ReqRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ReqRecord& a, ReqRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqRecord* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqRecord* New() const final {
    return new ReqRecord();
  }

  ReqRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqRecord& from);
  void MergeFrom(const ReqRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqRecord";
  }
  protected:
  explicit ReqRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqRecord_EAskRecordType EAskRecordType;
  static constexpr EAskRecordType EART_OPEN_PAGE =
    ReqRecord_EAskRecordType_EART_OPEN_PAGE;
  static constexpr EAskRecordType EART_OPEN_NOPAGE =
    ReqRecord_EAskRecordType_EART_OPEN_NOPAGE;
  static constexpr EAskRecordType EART_END =
    ReqRecord_EAskRecordType_EART_END;
  static inline bool EAskRecordType_IsValid(int value) {
    return ReqRecord_EAskRecordType_IsValid(value);
  }
  static constexpr EAskRecordType EAskRecordType_MIN =
    ReqRecord_EAskRecordType_EAskRecordType_MIN;
  static constexpr EAskRecordType EAskRecordType_MAX =
    ReqRecord_EAskRecordType_EAskRecordType_MAX;
  static constexpr int EAskRecordType_ARRAYSIZE =
    ReqRecord_EAskRecordType_EAskRecordType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EAskRecordType_descriptor() {
    return ReqRecord_EAskRecordType_descriptor();
  }
  template<typename T>
  static inline const std::string& EAskRecordType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EAskRecordType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EAskRecordType_Name.");
    return ReqRecord_EAskRecordType_Name(enum_t_value);
  }
  static inline bool EAskRecordType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EAskRecordType* value) {
    return ReqRecord_EAskRecordType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRecordNameFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kReqTypeFieldNumber = 2,
    kCursorFieldNumber = 4,
    kCountFieldNumber = 5,
  };
  // bytes record_name = 3;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.ReqRecord.EAskRecordType req_type = 2;
  void clear_req_type();
  ::KWMsg::ReqRecord_EAskRecordType req_type() const;
  void set_req_type(::KWMsg::ReqRecord_EAskRecordType value);
  private:
  ::KWMsg::ReqRecord_EAskRecordType _internal_req_type() const;
  void _internal_set_req_type(::KWMsg::ReqRecord_EAskRecordType value);
  public:

  // int32 cursor = 4;
  void clear_cursor();
  ::PROTOBUF_NAMESPACE_ID::int32 cursor() const;
  void set_cursor(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cursor() const;
  void _internal_set_cursor(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 count = 5;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::KWMsg::Ident* player_id_;
  int req_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 cursor_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class SyncQueueupRegStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncQueueupRegStatus) */ {
 public:
  inline SyncQueueupRegStatus() : SyncQueueupRegStatus(nullptr) {}
  ~SyncQueueupRegStatus() override;
  explicit constexpr SyncQueueupRegStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncQueueupRegStatus(const SyncQueueupRegStatus& from);
  SyncQueueupRegStatus(SyncQueueupRegStatus&& from) noexcept
    : SyncQueueupRegStatus() {
    *this = ::std::move(from);
  }

  inline SyncQueueupRegStatus& operator=(const SyncQueueupRegStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncQueueupRegStatus& operator=(SyncQueueupRegStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncQueueupRegStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncQueueupRegStatus* internal_default_instance() {
    return reinterpret_cast<const SyncQueueupRegStatus*>(
               &_SyncQueueupRegStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SyncQueueupRegStatus& a, SyncQueueupRegStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncQueueupRegStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncQueueupRegStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncQueueupRegStatus* New() const final {
    return new SyncQueueupRegStatus();
  }

  SyncQueueupRegStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncQueueupRegStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncQueueupRegStatus& from);
  void MergeFrom(const SyncQueueupRegStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncQueueupRegStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncQueueupRegStatus";
  }
  protected:
  explicit SyncQueueupRegStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetServerIdFieldNumber = 1,
    kIsRegisteredFieldNumber = 2,
    kKeepOnlineStatusFieldNumber = 3,
    kKeepOnlineSecFieldNumber = 4,
  };
  // int32 target_server_id = 1;
  void clear_target_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 target_server_id() const;
  void set_target_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target_server_id() const;
  void _internal_set_target_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 is_registered = 2;
  void clear_is_registered();
  ::PROTOBUF_NAMESPACE_ID::int32 is_registered() const;
  void set_is_registered(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_registered() const;
  void _internal_set_is_registered(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 keep_online_status = 3;
  void clear_keep_online_status();
  ::PROTOBUF_NAMESPACE_ID::int32 keep_online_status() const;
  void set_keep_online_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keep_online_status() const;
  void _internal_set_keep_online_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 keep_online_sec = 4;
  void clear_keep_online_sec();
  ::PROTOBUF_NAMESPACE_ID::int32 keep_online_sec() const;
  void set_keep_online_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_keep_online_sec() const;
  void _internal_set_keep_online_sec(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncQueueupRegStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_server_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_registered_;
  ::PROTOBUF_NAMESPACE_ID::int32 keep_online_status_;
  ::PROTOBUF_NAMESPACE_ID::int32 keep_online_sec_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class SyncWorldState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncWorldState) */ {
 public:
  inline SyncWorldState() : SyncWorldState(nullptr) {}
  ~SyncWorldState() override;
  explicit constexpr SyncWorldState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncWorldState(const SyncWorldState& from);
  SyncWorldState(SyncWorldState&& from) noexcept
    : SyncWorldState() {
    *this = ::std::move(from);
  }

  inline SyncWorldState& operator=(const SyncWorldState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncWorldState& operator=(SyncWorldState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncWorldState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncWorldState* internal_default_instance() {
    return reinterpret_cast<const SyncWorldState*>(
               &_SyncWorldState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SyncWorldState& a, SyncWorldState& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncWorldState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncWorldState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncWorldState* New() const final {
    return new SyncWorldState();
  }

  SyncWorldState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncWorldState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncWorldState& from);
  void MergeFrom(const SyncWorldState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncWorldState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncWorldState";
  }
  protected:
  explicit SyncWorldState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRoleNumFieldNumber = 1,
  };
  // int32 role_num = 1;
  void clear_role_num();
  ::PROTOBUF_NAMESPACE_ID::int32 role_num() const;
  void set_role_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_role_num() const;
  void _internal_set_role_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncWorldState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 role_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class ReqRegister final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqRegister) */ {
 public:
  inline ReqRegister() : ReqRegister(nullptr) {}
  ~ReqRegister() override;
  explicit constexpr ReqRegister(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqRegister(const ReqRegister& from);
  ReqRegister(ReqRegister&& from) noexcept
    : ReqRegister() {
    *this = ::std::move(from);
  }

  inline ReqRegister& operator=(const ReqRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqRegister& operator=(ReqRegister&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqRegister& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqRegister* internal_default_instance() {
    return reinterpret_cast<const ReqRegister*>(
               &_ReqRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ReqRegister& a, ReqRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqRegister* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqRegister* New() const final {
    return new ReqRegister();
  }

  ReqRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqRegister& from);
  void MergeFrom(const ReqRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqRegister";
  }
  protected:
  explicit ReqRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kNameFieldNumber = 2,
    kPasswordFieldNumber = 3,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes password = 3;
  void clear_password();
  const std::string& password() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_password(ArgT0&& arg0, ArgT... args);
  std::string* mutable_password();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_password();
  void set_allocated_password(std::string* password);
  private:
  const std::string& _internal_password() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_password(const std::string& value);
  std::string* _internal_mutable_password();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr password_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class AckRegister final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckRegister) */ {
 public:
  inline AckRegister() : AckRegister(nullptr) {}
  ~AckRegister() override;
  explicit constexpr AckRegister(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckRegister(const AckRegister& from);
  AckRegister(AckRegister&& from) noexcept
    : AckRegister() {
    *this = ::std::move(from);
  }

  inline AckRegister& operator=(const AckRegister& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckRegister& operator=(AckRegister&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckRegister& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckRegister* internal_default_instance() {
    return reinterpret_cast<const AckRegister*>(
               &_AckRegister_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(AckRegister& a, AckRegister& b) {
    a.Swap(&b);
  }
  inline void Swap(AckRegister* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckRegister* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckRegister* New() const final {
    return new AckRegister();
  }

  AckRegister* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckRegister>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckRegister& from);
  void MergeFrom(const AckRegister& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckRegister* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckRegister";
  }
  protected:
  explicit AckRegister(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 2,
    kNameFieldNumber = 3,
    kEventCodeFieldNumber = 1,
  };
  // bytes account = 2;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckRegister)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class AckWorldPlayerHasRole final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckWorldPlayerHasRole) */ {
 public:
  inline AckWorldPlayerHasRole() : AckWorldPlayerHasRole(nullptr) {}
  ~AckWorldPlayerHasRole() override;
  explicit constexpr AckWorldPlayerHasRole(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckWorldPlayerHasRole(const AckWorldPlayerHasRole& from);
  AckWorldPlayerHasRole(AckWorldPlayerHasRole&& from) noexcept
    : AckWorldPlayerHasRole() {
    *this = ::std::move(from);
  }

  inline AckWorldPlayerHasRole& operator=(const AckWorldPlayerHasRole& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckWorldPlayerHasRole& operator=(AckWorldPlayerHasRole&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckWorldPlayerHasRole& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckWorldPlayerHasRole* internal_default_instance() {
    return reinterpret_cast<const AckWorldPlayerHasRole*>(
               &_AckWorldPlayerHasRole_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(AckWorldPlayerHasRole& a, AckWorldPlayerHasRole& b) {
    a.Swap(&b);
  }
  inline void Swap(AckWorldPlayerHasRole* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckWorldPlayerHasRole* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckWorldPlayerHasRole* New() const final {
    return new AckWorldPlayerHasRole();
  }

  AckWorldPlayerHasRole* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckWorldPlayerHasRole>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckWorldPlayerHasRole& from);
  void MergeFrom(const AckWorldPlayerHasRole& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckWorldPlayerHasRole* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckWorldPlayerHasRole";
  }
  protected:
  explicit AckWorldPlayerHasRole(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHasRoleFieldNumber = 1,
  };
  // bool has_role = 1;
  void clear_has_role();
  bool has_role() const;
  void set_has_role(bool value);
  private:
  bool _internal_has_role() const;
  void _internal_set_has_role(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckWorldPlayerHasRole)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  bool has_role_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class SyncQueueUpCount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncQueueUpCount) */ {
 public:
  inline SyncQueueUpCount() : SyncQueueUpCount(nullptr) {}
  ~SyncQueueUpCount() override;
  explicit constexpr SyncQueueUpCount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncQueueUpCount(const SyncQueueUpCount& from);
  SyncQueueUpCount(SyncQueueUpCount&& from) noexcept
    : SyncQueueUpCount() {
    *this = ::std::move(from);
  }

  inline SyncQueueUpCount& operator=(const SyncQueueUpCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncQueueUpCount& operator=(SyncQueueUpCount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncQueueUpCount& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncQueueUpCount* internal_default_instance() {
    return reinterpret_cast<const SyncQueueUpCount*>(
               &_SyncQueueUpCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SyncQueueUpCount& a, SyncQueueUpCount& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncQueueUpCount* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncQueueUpCount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncQueueUpCount* New() const final {
    return new SyncQueueUpCount();
  }

  SyncQueueUpCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncQueueUpCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncQueueUpCount& from);
  void MergeFrom(const SyncQueueUpCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncQueueUpCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncQueueUpCount";
  }
  protected:
  explicit SyncQueueUpCount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQueueUpCountFieldNumber = 1,
  };
  // int32 queue_up_count = 1;
  void clear_queue_up_count();
  ::PROTOBUF_NAMESPACE_ID::int32 queue_up_count() const;
  void set_queue_up_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_queue_up_count() const;
  void _internal_set_queue_up_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncQueueUpCount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 queue_up_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// -------------------------------------------------------------------

class SyncWorldInfoToGame final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncWorldInfoToGame) */ {
 public:
  inline SyncWorldInfoToGame() : SyncWorldInfoToGame(nullptr) {}
  ~SyncWorldInfoToGame() override;
  explicit constexpr SyncWorldInfoToGame(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncWorldInfoToGame(const SyncWorldInfoToGame& from);
  SyncWorldInfoToGame(SyncWorldInfoToGame&& from) noexcept
    : SyncWorldInfoToGame() {
    *this = ::std::move(from);
  }

  inline SyncWorldInfoToGame& operator=(const SyncWorldInfoToGame& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncWorldInfoToGame& operator=(SyncWorldInfoToGame&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncWorldInfoToGame& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncWorldInfoToGame* internal_default_instance() {
    return reinterpret_cast<const SyncWorldInfoToGame*>(
               &_SyncWorldInfoToGame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SyncWorldInfoToGame& a, SyncWorldInfoToGame& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncWorldInfoToGame* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncWorldInfoToGame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncWorldInfoToGame* New() const final {
    return new SyncWorldInfoToGame();
  }

  SyncWorldInfoToGame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncWorldInfoToGame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncWorldInfoToGame& from);
  void MergeFrom(const SyncWorldInfoToGame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncWorldInfoToGame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncWorldInfoToGame";
  }
  protected:
  explicit SyncWorldInfoToGame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenTimeFieldNumber = 1,
  };
  // int32 open_time = 1;
  void clear_open_time();
  ::PROTOBUF_NAMESPACE_ID::int32 open_time() const;
  void set_open_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_open_time() const;
  void _internal_set_open_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncWorldInfoToGame)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 open_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgpregame_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServerInfoReport

// int32 server_id = 1;
inline void ServerInfoReport::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::server_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReport.server_id)
  return _internal_server_id();
}
inline void ServerInfoReport::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void ServerInfoReport::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfoReport.server_id)
}

// bytes server_name = 2;
inline void ServerInfoReport::clear_server_name() {
  server_name_.ClearToEmpty();
}
inline const std::string& ServerInfoReport::server_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReport.server_name)
  return _internal_server_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfoReport::set_server_name(ArgT0&& arg0, ArgT... args) {
 
 server_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfoReport.server_name)
}
inline std::string* ServerInfoReport::mutable_server_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ServerInfoReport.server_name)
  return _internal_mutable_server_name();
}
inline const std::string& ServerInfoReport::_internal_server_name() const {
  return server_name_.Get();
}
inline void ServerInfoReport::_internal_set_server_name(const std::string& value) {
  
  server_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerInfoReport::_internal_mutable_server_name() {
  
  return server_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerInfoReport::release_server_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ServerInfoReport.server_name)
  return server_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServerInfoReport::set_allocated_server_name(std::string* server_name) {
  if (server_name != nullptr) {
    
  } else {
    
  }
  server_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ServerInfoReport.server_name)
}

// bytes zone_id = 3;
inline void ServerInfoReport::clear_zone_id() {
  zone_id_.ClearToEmpty();
}
inline const std::string& ServerInfoReport::zone_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReport.zone_id)
  return _internal_zone_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfoReport::set_zone_id(ArgT0&& arg0, ArgT... args) {
 
 zone_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfoReport.zone_id)
}
inline std::string* ServerInfoReport::mutable_zone_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ServerInfoReport.zone_id)
  return _internal_mutable_zone_id();
}
inline const std::string& ServerInfoReport::_internal_zone_id() const {
  return zone_id_.Get();
}
inline void ServerInfoReport::_internal_set_zone_id(const std::string& value) {
  
  zone_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerInfoReport::_internal_mutable_zone_id() {
  
  return zone_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerInfoReport::release_zone_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ServerInfoReport.zone_id)
  return zone_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServerInfoReport::set_allocated_zone_id(std::string* zone_id) {
  if (zone_id != nullptr) {
    
  } else {
    
  }
  zone_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zone_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ServerInfoReport.zone_id)
}

// bytes zone_name = 4;
inline void ServerInfoReport::clear_zone_name() {
  zone_name_.ClearToEmpty();
}
inline const std::string& ServerInfoReport::zone_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReport.zone_name)
  return _internal_zone_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfoReport::set_zone_name(ArgT0&& arg0, ArgT... args) {
 
 zone_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfoReport.zone_name)
}
inline std::string* ServerInfoReport::mutable_zone_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ServerInfoReport.zone_name)
  return _internal_mutable_zone_name();
}
inline const std::string& ServerInfoReport::_internal_zone_name() const {
  return zone_name_.Get();
}
inline void ServerInfoReport::_internal_set_zone_name(const std::string& value) {
  
  zone_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerInfoReport::_internal_mutable_zone_name() {
  
  return zone_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerInfoReport::release_zone_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ServerInfoReport.zone_name)
  return zone_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServerInfoReport::set_allocated_zone_name(std::string* zone_name) {
  if (zone_name != nullptr) {
    
  } else {
    
  }
  zone_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zone_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ServerInfoReport.zone_name)
}

// bytes server_ip = 5;
inline void ServerInfoReport::clear_server_ip() {
  server_ip_.ClearToEmpty();
}
inline const std::string& ServerInfoReport::server_ip() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReport.server_ip)
  return _internal_server_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfoReport::set_server_ip(ArgT0&& arg0, ArgT... args) {
 
 server_ip_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfoReport.server_ip)
}
inline std::string* ServerInfoReport::mutable_server_ip() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ServerInfoReport.server_ip)
  return _internal_mutable_server_ip();
}
inline const std::string& ServerInfoReport::_internal_server_ip() const {
  return server_ip_.Get();
}
inline void ServerInfoReport::_internal_set_server_ip(const std::string& value) {
  
  server_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerInfoReport::_internal_mutable_server_ip() {
  
  return server_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerInfoReport::release_server_ip() {
  // @@protoc_insertion_point(field_release:KWMsg.ServerInfoReport.server_ip)
  return server_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServerInfoReport::set_allocated_server_ip(std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  server_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ServerInfoReport.server_ip)
}

// bytes server_public_ip = 6;
inline void ServerInfoReport::clear_server_public_ip() {
  server_public_ip_.ClearToEmpty();
}
inline const std::string& ServerInfoReport::server_public_ip() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReport.server_public_ip)
  return _internal_server_public_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfoReport::set_server_public_ip(ArgT0&& arg0, ArgT... args) {
 
 server_public_ip_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfoReport.server_public_ip)
}
inline std::string* ServerInfoReport::mutable_server_public_ip() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ServerInfoReport.server_public_ip)
  return _internal_mutable_server_public_ip();
}
inline const std::string& ServerInfoReport::_internal_server_public_ip() const {
  return server_public_ip_.Get();
}
inline void ServerInfoReport::_internal_set_server_public_ip(const std::string& value) {
  
  server_public_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerInfoReport::_internal_mutable_server_public_ip() {
  
  return server_public_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerInfoReport::release_server_public_ip() {
  // @@protoc_insertion_point(field_release:KWMsg.ServerInfoReport.server_public_ip)
  return server_public_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServerInfoReport::set_allocated_server_public_ip(std::string* server_public_ip) {
  if (server_public_ip != nullptr) {
    
  } else {
    
  }
  server_public_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_public_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ServerInfoReport.server_public_ip)
}

// int32 server_port = 7;
inline void ServerInfoReport::clear_server_port() {
  server_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::_internal_server_port() const {
  return server_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::server_port() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReport.server_port)
  return _internal_server_port();
}
inline void ServerInfoReport::_internal_set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_port_ = value;
}
inline void ServerInfoReport::set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfoReport.server_port)
}

// int32 server_max_online = 8;
inline void ServerInfoReport::clear_server_max_online() {
  server_max_online_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::_internal_server_max_online() const {
  return server_max_online_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::server_max_online() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReport.server_max_online)
  return _internal_server_max_online();
}
inline void ServerInfoReport::_internal_set_server_max_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_max_online_ = value;
}
inline void ServerInfoReport::set_server_max_online(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_max_online(value);
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfoReport.server_max_online)
}

// int32 server_cur_count = 9;
inline void ServerInfoReport::clear_server_cur_count() {
  server_cur_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::_internal_server_cur_count() const {
  return server_cur_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::server_cur_count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReport.server_cur_count)
  return _internal_server_cur_count();
}
inline void ServerInfoReport::_internal_set_server_cur_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_cur_count_ = value;
}
inline void ServerInfoReport::set_server_cur_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_cur_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfoReport.server_cur_count)
}

// int32 server_type = 10;
inline void ServerInfoReport::clear_server_type() {
  server_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::_internal_server_type() const {
  return server_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::server_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReport.server_type)
  return _internal_server_type();
}
inline void ServerInfoReport::_internal_set_server_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_type_ = value;
}
inline void ServerInfoReport::set_server_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfoReport.server_type)
}

// .KWMsg.EServerState server_state = 11;
inline void ServerInfoReport::clear_server_state() {
  server_state_ = 0;
}
inline ::KWMsg::EServerState ServerInfoReport::_internal_server_state() const {
  return static_cast< ::KWMsg::EServerState >(server_state_);
}
inline ::KWMsg::EServerState ServerInfoReport::server_state() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReport.server_state)
  return _internal_server_state();
}
inline void ServerInfoReport::_internal_set_server_state(::KWMsg::EServerState value) {
  
  server_state_ = value;
}
inline void ServerInfoReport::set_server_state(::KWMsg::EServerState value) {
  _internal_set_server_state(value);
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfoReport.server_state)
}

// .KWMsg.EServerShowState server_show_state = 12;
inline void ServerInfoReport::clear_server_show_state() {
  server_show_state_ = 0;
}
inline ::KWMsg::EServerShowState ServerInfoReport::_internal_server_show_state() const {
  return static_cast< ::KWMsg::EServerShowState >(server_show_state_);
}
inline ::KWMsg::EServerShowState ServerInfoReport::server_show_state() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReport.server_show_state)
  return _internal_server_show_state();
}
inline void ServerInfoReport::_internal_set_server_show_state(::KWMsg::EServerShowState value) {
  
  server_show_state_ = value;
}
inline void ServerInfoReport::set_server_show_state(::KWMsg::EServerShowState value) {
  _internal_set_server_show_state(value);
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfoReport.server_show_state)
}

// int32 server_open_time = 13;
inline void ServerInfoReport::clear_server_open_time() {
  server_open_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::_internal_server_open_time() const {
  return server_open_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::server_open_time() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReport.server_open_time)
  return _internal_server_open_time();
}
inline void ServerInfoReport::_internal_set_server_open_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_open_time_ = value;
}
inline void ServerInfoReport::set_server_open_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_open_time(value);
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfoReport.server_open_time)
}

// int32 server_regist_count = 14;
inline void ServerInfoReport::clear_server_regist_count() {
  server_regist_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::_internal_server_regist_count() const {
  return server_regist_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfoReport::server_regist_count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReport.server_regist_count)
  return _internal_server_regist_count();
}
inline void ServerInfoReport::_internal_set_server_regist_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_regist_count_ = value;
}
inline void ServerInfoReport::set_server_regist_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_regist_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfoReport.server_regist_count)
}

// -------------------------------------------------------------------

// ServerInfoReportList

// repeated .KWMsg.ServerInfoReport server_list = 1;
inline int ServerInfoReportList::_internal_server_list_size() const {
  return server_list_.size();
}
inline int ServerInfoReportList::server_list_size() const {
  return _internal_server_list_size();
}
inline void ServerInfoReportList::clear_server_list() {
  server_list_.Clear();
}
inline ::KWMsg::ServerInfoReport* ServerInfoReportList::mutable_server_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ServerInfoReportList.server_list)
  return server_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ServerInfoReport >*
ServerInfoReportList::mutable_server_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ServerInfoReportList.server_list)
  return &server_list_;
}
inline const ::KWMsg::ServerInfoReport& ServerInfoReportList::_internal_server_list(int index) const {
  return server_list_.Get(index);
}
inline const ::KWMsg::ServerInfoReport& ServerInfoReportList::server_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfoReportList.server_list)
  return _internal_server_list(index);
}
inline ::KWMsg::ServerInfoReport* ServerInfoReportList::_internal_add_server_list() {
  return server_list_.Add();
}
inline ::KWMsg::ServerInfoReport* ServerInfoReportList::add_server_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ServerInfoReportList.server_list)
  return _internal_add_server_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ServerInfoReport >&
ServerInfoReportList::server_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ServerInfoReportList.server_list)
  return server_list_;
}

// -------------------------------------------------------------------

// AckEventResult

// .KWMsg.EGameEventCode event_code = 1;
inline void AckEventResult::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckEventResult::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckEventResult::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckEventResult.event_code)
  return _internal_event_code();
}
inline void AckEventResult::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckEventResult::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckEventResult.event_code)
}

// .KWMsg.Ident event_object = 2;
inline bool AckEventResult::_internal_has_event_object() const {
  return this != internal_default_instance() && event_object_ != nullptr;
}
inline bool AckEventResult::has_event_object() const {
  return _internal_has_event_object();
}
inline const ::KWMsg::Ident& AckEventResult::_internal_event_object() const {
  const ::KWMsg::Ident* p = event_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckEventResult::event_object() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckEventResult.event_object)
  return _internal_event_object();
}
inline void AckEventResult::unsafe_arena_set_allocated_event_object(
    ::KWMsg::Ident* event_object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_object_);
  }
  event_object_ = event_object;
  if (event_object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckEventResult.event_object)
}
inline ::KWMsg::Ident* AckEventResult::release_event_object() {
  
  ::KWMsg::Ident* temp = event_object_;
  event_object_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckEventResult::unsafe_arena_release_event_object() {
  // @@protoc_insertion_point(field_release:KWMsg.AckEventResult.event_object)
  
  ::KWMsg::Ident* temp = event_object_;
  event_object_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckEventResult::_internal_mutable_event_object() {
  
  if (event_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    event_object_ = p;
  }
  return event_object_;
}
inline ::KWMsg::Ident* AckEventResult::mutable_event_object() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckEventResult.event_object)
  return _internal_mutable_event_object();
}
inline void AckEventResult::set_allocated_event_object(::KWMsg::Ident* event_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_object_);
  }
  if (event_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_object));
    if (message_arena != submessage_arena) {
      event_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_object, submessage_arena);
    }
    
  } else {
    
  }
  event_object_ = event_object;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckEventResult.event_object)
}

// .KWMsg.Ident event_client = 3;
inline bool AckEventResult::_internal_has_event_client() const {
  return this != internal_default_instance() && event_client_ != nullptr;
}
inline bool AckEventResult::has_event_client() const {
  return _internal_has_event_client();
}
inline const ::KWMsg::Ident& AckEventResult::_internal_event_client() const {
  const ::KWMsg::Ident* p = event_client_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckEventResult::event_client() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckEventResult.event_client)
  return _internal_event_client();
}
inline void AckEventResult::unsafe_arena_set_allocated_event_client(
    ::KWMsg::Ident* event_client) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_client_);
  }
  event_client_ = event_client;
  if (event_client) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckEventResult.event_client)
}
inline ::KWMsg::Ident* AckEventResult::release_event_client() {
  
  ::KWMsg::Ident* temp = event_client_;
  event_client_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckEventResult::unsafe_arena_release_event_client() {
  // @@protoc_insertion_point(field_release:KWMsg.AckEventResult.event_client)
  
  ::KWMsg::Ident* temp = event_client_;
  event_client_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckEventResult::_internal_mutable_event_client() {
  
  if (event_client_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    event_client_ = p;
  }
  return event_client_;
}
inline ::KWMsg::Ident* AckEventResult::mutable_event_client() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckEventResult.event_client)
  return _internal_mutable_event_client();
}
inline void AckEventResult::set_allocated_event_client(::KWMsg::Ident* event_client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_client_);
  }
  if (event_client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(event_client));
    if (message_arena != submessage_arena) {
      event_client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, event_client, submessage_arena);
    }
    
  } else {
    
  }
  event_client_ = event_client;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckEventResult.event_client)
}

// bytes user_data = 4;
inline void AckEventResult::clear_user_data() {
  user_data_.ClearToEmpty();
}
inline const std::string& AckEventResult::user_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckEventResult.user_data)
  return _internal_user_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckEventResult::set_user_data(ArgT0&& arg0, ArgT... args) {
 
 user_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckEventResult.user_data)
}
inline std::string* AckEventResult::mutable_user_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckEventResult.user_data)
  return _internal_mutable_user_data();
}
inline const std::string& AckEventResult::_internal_user_data() const {
  return user_data_.Get();
}
inline void AckEventResult::_internal_set_user_data(const std::string& value) {
  
  user_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckEventResult::_internal_mutable_user_data() {
  
  return user_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckEventResult::release_user_data() {
  // @@protoc_insertion_point(field_release:KWMsg.AckEventResult.user_data)
  return user_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckEventResult::set_allocated_user_data(std::string* user_data) {
  if (user_data != nullptr) {
    
  } else {
    
  }
  user_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckEventResult.user_data)
}

// -------------------------------------------------------------------

// ReqLogin

// int32 channel = 1;
inline void ReqLogin::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLogin::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLogin::channel() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLogin.channel)
  return _internal_channel();
}
inline void ReqLogin::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void ReqLogin::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqLogin.channel)
}

// bytes account = 2;
inline void ReqLogin::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqLogin::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLogin.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqLogin::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqLogin.account)
}
inline std::string* ReqLogin::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqLogin.account)
  return _internal_mutable_account();
}
inline const std::string& ReqLogin::_internal_account() const {
  return account_.Get();
}
inline void ReqLogin::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqLogin::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqLogin::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqLogin.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqLogin::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqLogin.account)
}

// bytes password = 3;
inline void ReqLogin::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& ReqLogin::password() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLogin.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqLogin::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqLogin.password)
}
inline std::string* ReqLogin::mutable_password() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqLogin.password)
  return _internal_mutable_password();
}
inline const std::string& ReqLogin::_internal_password() const {
  return password_.Get();
}
inline void ReqLogin::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqLogin::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqLogin::release_password() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqLogin.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqLogin::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqLogin.password)
}

// bytes sign = 4;
inline void ReqLogin::clear_sign() {
  sign_.ClearToEmpty();
}
inline const std::string& ReqLogin::sign() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLogin.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqLogin::set_sign(ArgT0&& arg0, ArgT... args) {
 
 sign_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqLogin.sign)
}
inline std::string* ReqLogin::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqLogin.sign)
  return _internal_mutable_sign();
}
inline const std::string& ReqLogin::_internal_sign() const {
  return sign_.Get();
}
inline void ReqLogin::_internal_set_sign(const std::string& value) {
  
  sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqLogin::_internal_mutable_sign() {
  
  return sign_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqLogin::release_sign() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqLogin.sign)
  return sign_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqLogin::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqLogin.sign)
}

// int32 client_version = 5;
inline void ReqLogin::clear_client_version() {
  client_version_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLogin::_internal_client_version() const {
  return client_version_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLogin::client_version() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLogin.client_version)
  return _internal_client_version();
}
inline void ReqLogin::_internal_set_client_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  client_version_ = value;
}
inline void ReqLogin::set_client_version(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_client_version(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqLogin.client_version)
}

// .KWMsg.DeviceInfo device_info = 6;
inline bool ReqLogin::_internal_has_device_info() const {
  return this != internal_default_instance() && device_info_ != nullptr;
}
inline bool ReqLogin::has_device_info() const {
  return _internal_has_device_info();
}
inline const ::KWMsg::DeviceInfo& ReqLogin::_internal_device_info() const {
  const ::KWMsg::DeviceInfo* p = device_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::DeviceInfo&>(
      ::KWMsg::_DeviceInfo_default_instance_);
}
inline const ::KWMsg::DeviceInfo& ReqLogin::device_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLogin.device_info)
  return _internal_device_info();
}
inline void ReqLogin::unsafe_arena_set_allocated_device_info(
    ::KWMsg::DeviceInfo* device_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_info_);
  }
  device_info_ = device_info;
  if (device_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqLogin.device_info)
}
inline ::KWMsg::DeviceInfo* ReqLogin::release_device_info() {
  
  ::KWMsg::DeviceInfo* temp = device_info_;
  device_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::DeviceInfo* ReqLogin::unsafe_arena_release_device_info() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqLogin.device_info)
  
  ::KWMsg::DeviceInfo* temp = device_info_;
  device_info_ = nullptr;
  return temp;
}
inline ::KWMsg::DeviceInfo* ReqLogin::_internal_mutable_device_info() {
  
  if (device_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::DeviceInfo>(GetArenaForAllocation());
    device_info_ = p;
  }
  return device_info_;
}
inline ::KWMsg::DeviceInfo* ReqLogin::mutable_device_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqLogin.device_info)
  return _internal_mutable_device_info();
}
inline void ReqLogin::set_allocated_device_info(::KWMsg::DeviceInfo* device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_info_);
  }
  if (device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_info));
    if (message_arena != submessage_arena) {
      device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_info, submessage_arena);
    }
    
  } else {
    
  }
  device_info_ = device_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqLogin.device_info)
}

// -------------------------------------------------------------------

// AckLogin

// .KWMsg.EGameEventCode event_code = 1;
inline void AckLogin::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckLogin::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckLogin::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckLogin.event_code)
  return _internal_event_code();
}
inline void AckLogin::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckLogin::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckLogin.event_code)
}

// int32 channel = 2;
inline void AckLogin::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckLogin::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckLogin::channel() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckLogin.channel)
  return _internal_channel();
}
inline void AckLogin::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void AckLogin::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckLogin.channel)
}

// bytes account = 3;
inline void AckLogin::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& AckLogin::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckLogin.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckLogin::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckLogin.account)
}
inline std::string* AckLogin::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckLogin.account)
  return _internal_mutable_account();
}
inline const std::string& AckLogin::_internal_account() const {
  return account_.Get();
}
inline void AckLogin::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckLogin::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckLogin::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.AckLogin.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckLogin::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckLogin.account)
}

// bytes ip = 4;
inline void AckLogin::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& AckLogin::ip() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckLogin.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckLogin::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckLogin.ip)
}
inline std::string* AckLogin::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckLogin.ip)
  return _internal_mutable_ip();
}
inline const std::string& AckLogin::_internal_ip() const {
  return ip_.Get();
}
inline void AckLogin::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckLogin::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckLogin::release_ip() {
  // @@protoc_insertion_point(field_release:KWMsg.AckLogin.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckLogin::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckLogin.ip)
}

// -------------------------------------------------------------------

// ReqLogout

// int32 channel = 1;
inline void ReqLogout::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLogout::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLogout::channel() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLogout.channel)
  return _internal_channel();
}
inline void ReqLogout::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void ReqLogout::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqLogout.channel)
}

// bytes account = 2;
inline void ReqLogout::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqLogout::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLogout.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqLogout::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqLogout.account)
}
inline std::string* ReqLogout::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqLogout.account)
  return _internal_mutable_account();
}
inline const std::string& ReqLogout::_internal_account() const {
  return account_.Get();
}
inline void ReqLogout::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqLogout::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqLogout::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqLogout.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqLogout::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqLogout.account)
}

// bytes sign = 3;
inline void ReqLogout::clear_sign() {
  sign_.ClearToEmpty();
}
inline const std::string& ReqLogout::sign() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLogout.sign)
  return _internal_sign();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqLogout::set_sign(ArgT0&& arg0, ArgT... args) {
 
 sign_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqLogout.sign)
}
inline std::string* ReqLogout::mutable_sign() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqLogout.sign)
  return _internal_mutable_sign();
}
inline const std::string& ReqLogout::_internal_sign() const {
  return sign_.Get();
}
inline void ReqLogout::_internal_set_sign(const std::string& value) {
  
  sign_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqLogout::_internal_mutable_sign() {
  
  return sign_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqLogout::release_sign() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqLogout.sign)
  return sign_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqLogout::set_allocated_sign(std::string* sign) {
  if (sign != nullptr) {
    
  } else {
    
  }
  sign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sign,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqLogout.sign)
}

// -------------------------------------------------------------------

// AckLogout

// .KWMsg.EGameEventCode event_code = 1;
inline void AckLogout::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckLogout::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckLogout::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckLogout.event_code)
  return _internal_event_code();
}
inline void AckLogout::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckLogout::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckLogout.event_code)
}

// int32 channel = 2;
inline void AckLogout::clear_channel() {
  channel_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckLogout::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckLogout::channel() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckLogout.channel)
  return _internal_channel();
}
inline void AckLogout::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  channel_ = value;
}
inline void AckLogout::set_channel(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckLogout.channel)
}

// bytes account = 3;
inline void AckLogout::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& AckLogout::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckLogout.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckLogout::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckLogout.account)
}
inline std::string* AckLogout::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckLogout.account)
  return _internal_mutable_account();
}
inline const std::string& AckLogout::_internal_account() const {
  return account_.Get();
}
inline void AckLogout::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckLogout::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckLogout::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.AckLogout.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckLogout::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckLogout.account)
}

// -------------------------------------------------------------------

// ServerInfo

// int32 server_id = 1;
inline void ServerInfo::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::server_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfo.server_id)
  return _internal_server_id();
}
inline void ServerInfo::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void ServerInfo::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfo.server_id)
}

// bytes name = 2;
inline void ServerInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ServerInfo::name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ServerInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfo.name)
}
inline std::string* ServerInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ServerInfo.name)
  return _internal_mutable_name();
}
inline const std::string& ServerInfo::_internal_name() const {
  return name_.Get();
}
inline void ServerInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ServerInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ServerInfo::release_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ServerInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ServerInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ServerInfo.name)
}

// int32 wait_count = 3;
inline void ServerInfo::clear_wait_count() {
  wait_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::_internal_wait_count() const {
  return wait_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerInfo::wait_count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfo.wait_count)
  return _internal_wait_count();
}
inline void ServerInfo::_internal_set_wait_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  wait_count_ = value;
}
inline void ServerInfo::set_wait_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_wait_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfo.wait_count)
}

// .KWMsg.EServerState status = 4;
inline void ServerInfo::clear_status() {
  status_ = 0;
}
inline ::KWMsg::EServerState ServerInfo::_internal_status() const {
  return static_cast< ::KWMsg::EServerState >(status_);
}
inline ::KWMsg::EServerState ServerInfo::status() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerInfo.status)
  return _internal_status();
}
inline void ServerInfo::_internal_set_status(::KWMsg::EServerState value) {
  
  status_ = value;
}
inline void ServerInfo::set_status(::KWMsg::EServerState value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:KWMsg.ServerInfo.status)
}

// -------------------------------------------------------------------

// ReqConnectWorld

// int32 world_id = 1;
inline void ReqConnectWorld::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqConnectWorld::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqConnectWorld::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqConnectWorld.world_id)
  return _internal_world_id();
}
inline void ReqConnectWorld::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void ReqConnectWorld::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqConnectWorld.world_id)
}

// bytes account = 2;
inline void ReqConnectWorld::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqConnectWorld::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqConnectWorld.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqConnectWorld::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqConnectWorld.account)
}
inline std::string* ReqConnectWorld::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqConnectWorld.account)
  return _internal_mutable_account();
}
inline const std::string& ReqConnectWorld::_internal_account() const {
  return account_.Get();
}
inline void ReqConnectWorld::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqConnectWorld::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqConnectWorld::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqConnectWorld.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqConnectWorld::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqConnectWorld.account)
}

// .KWMsg.Ident sender = 3;
inline bool ReqConnectWorld::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool ReqConnectWorld::has_sender() const {
  return _internal_has_sender();
}
inline const ::KWMsg::Ident& ReqConnectWorld::_internal_sender() const {
  const ::KWMsg::Ident* p = sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqConnectWorld::sender() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqConnectWorld.sender)
  return _internal_sender();
}
inline void ReqConnectWorld::unsafe_arena_set_allocated_sender(
    ::KWMsg::Ident* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqConnectWorld.sender)
}
inline ::KWMsg::Ident* ReqConnectWorld::release_sender() {
  
  ::KWMsg::Ident* temp = sender_;
  sender_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqConnectWorld::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqConnectWorld.sender)
  
  ::KWMsg::Ident* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqConnectWorld::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    sender_ = p;
  }
  return sender_;
}
inline ::KWMsg::Ident* ReqConnectWorld::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqConnectWorld.sender)
  return _internal_mutable_sender();
}
inline void ReqConnectWorld::set_allocated_sender(::KWMsg::Ident* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender));
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqConnectWorld.sender)
}

// int32 login_id = 4;
inline void ReqConnectWorld::clear_login_id() {
  login_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqConnectWorld::_internal_login_id() const {
  return login_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqConnectWorld::login_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqConnectWorld.login_id)
  return _internal_login_id();
}
inline void ReqConnectWorld::_internal_set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  login_id_ = value;
}
inline void ReqConnectWorld::set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_login_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqConnectWorld.login_id)
}

// bool has_role = 5;
inline void ReqConnectWorld::clear_has_role() {
  has_role_ = false;
}
inline bool ReqConnectWorld::_internal_has_role() const {
  return has_role_;
}
inline bool ReqConnectWorld::has_role() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqConnectWorld.has_role)
  return _internal_has_role();
}
inline void ReqConnectWorld::_internal_set_has_role(bool value) {
  
  has_role_ = value;
}
inline void ReqConnectWorld::set_has_role(bool value) {
  _internal_set_has_role(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqConnectWorld.has_role)
}

// -------------------------------------------------------------------

// AckConnectWorldResult

// int32 world_id = 1;
inline void AckConnectWorldResult::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckConnectWorldResult::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckConnectWorldResult::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckConnectWorldResult.world_id)
  return _internal_world_id();
}
inline void AckConnectWorldResult::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void AckConnectWorldResult::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckConnectWorldResult.world_id)
}

// .KWMsg.Ident sender = 2;
inline bool AckConnectWorldResult::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool AckConnectWorldResult::has_sender() const {
  return _internal_has_sender();
}
inline const ::KWMsg::Ident& AckConnectWorldResult::_internal_sender() const {
  const ::KWMsg::Ident* p = sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckConnectWorldResult::sender() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckConnectWorldResult.sender)
  return _internal_sender();
}
inline void AckConnectWorldResult::unsafe_arena_set_allocated_sender(
    ::KWMsg::Ident* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckConnectWorldResult.sender)
}
inline ::KWMsg::Ident* AckConnectWorldResult::release_sender() {
  
  ::KWMsg::Ident* temp = sender_;
  sender_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckConnectWorldResult::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:KWMsg.AckConnectWorldResult.sender)
  
  ::KWMsg::Ident* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckConnectWorldResult::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    sender_ = p;
  }
  return sender_;
}
inline ::KWMsg::Ident* AckConnectWorldResult::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckConnectWorldResult.sender)
  return _internal_mutable_sender();
}
inline void AckConnectWorldResult::set_allocated_sender(::KWMsg::Ident* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender));
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckConnectWorldResult.sender)
}

// int32 login_id = 3;
inline void AckConnectWorldResult::clear_login_id() {
  login_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckConnectWorldResult::_internal_login_id() const {
  return login_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckConnectWorldResult::login_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckConnectWorldResult.login_id)
  return _internal_login_id();
}
inline void AckConnectWorldResult::_internal_set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  login_id_ = value;
}
inline void AckConnectWorldResult::set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_login_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckConnectWorldResult.login_id)
}

// bytes account = 4;
inline void AckConnectWorldResult::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& AckConnectWorldResult::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckConnectWorldResult.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckConnectWorldResult::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckConnectWorldResult.account)
}
inline std::string* AckConnectWorldResult::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckConnectWorldResult.account)
  return _internal_mutable_account();
}
inline const std::string& AckConnectWorldResult::_internal_account() const {
  return account_.Get();
}
inline void AckConnectWorldResult::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckConnectWorldResult::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckConnectWorldResult::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.AckConnectWorldResult.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckConnectWorldResult::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckConnectWorldResult.account)
}

// bytes world_ip = 5;
inline void AckConnectWorldResult::clear_world_ip() {
  world_ip_.ClearToEmpty();
}
inline const std::string& AckConnectWorldResult::world_ip() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckConnectWorldResult.world_ip)
  return _internal_world_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckConnectWorldResult::set_world_ip(ArgT0&& arg0, ArgT... args) {
 
 world_ip_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckConnectWorldResult.world_ip)
}
inline std::string* AckConnectWorldResult::mutable_world_ip() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckConnectWorldResult.world_ip)
  return _internal_mutable_world_ip();
}
inline const std::string& AckConnectWorldResult::_internal_world_ip() const {
  return world_ip_.Get();
}
inline void AckConnectWorldResult::_internal_set_world_ip(const std::string& value) {
  
  world_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckConnectWorldResult::_internal_mutable_world_ip() {
  
  return world_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckConnectWorldResult::release_world_ip() {
  // @@protoc_insertion_point(field_release:KWMsg.AckConnectWorldResult.world_ip)
  return world_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckConnectWorldResult::set_allocated_world_ip(std::string* world_ip) {
  if (world_ip != nullptr) {
    
  } else {
    
  }
  world_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), world_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckConnectWorldResult.world_ip)
}

// int32 world_port = 6;
inline void AckConnectWorldResult::clear_world_port() {
  world_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckConnectWorldResult::_internal_world_port() const {
  return world_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckConnectWorldResult::world_port() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckConnectWorldResult.world_port)
  return _internal_world_port();
}
inline void AckConnectWorldResult::_internal_set_world_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_port_ = value;
}
inline void AckConnectWorldResult::set_world_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_port(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckConnectWorldResult.world_port)
}

// bytes world_key = 7;
inline void AckConnectWorldResult::clear_world_key() {
  world_key_.ClearToEmpty();
}
inline const std::string& AckConnectWorldResult::world_key() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckConnectWorldResult.world_key)
  return _internal_world_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckConnectWorldResult::set_world_key(ArgT0&& arg0, ArgT... args) {
 
 world_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckConnectWorldResult.world_key)
}
inline std::string* AckConnectWorldResult::mutable_world_key() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckConnectWorldResult.world_key)
  return _internal_mutable_world_key();
}
inline const std::string& AckConnectWorldResult::_internal_world_key() const {
  return world_key_.Get();
}
inline void AckConnectWorldResult::_internal_set_world_key(const std::string& value) {
  
  world_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckConnectWorldResult::_internal_mutable_world_key() {
  
  return world_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckConnectWorldResult::release_world_key() {
  // @@protoc_insertion_point(field_release:KWMsg.AckConnectWorldResult.world_key)
  return world_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckConnectWorldResult::set_allocated_world_key(std::string* world_key) {
  if (world_key != nullptr) {
    
  } else {
    
  }
  world_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), world_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckConnectWorldResult.world_key)
}

// bytes ticket = 8;
inline void AckConnectWorldResult::clear_ticket() {
  ticket_.ClearToEmpty();
}
inline const std::string& AckConnectWorldResult::ticket() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckConnectWorldResult.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckConnectWorldResult::set_ticket(ArgT0&& arg0, ArgT... args) {
 
 ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckConnectWorldResult.ticket)
}
inline std::string* AckConnectWorldResult::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckConnectWorldResult.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& AckConnectWorldResult::_internal_ticket() const {
  return ticket_.Get();
}
inline void AckConnectWorldResult::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckConnectWorldResult::_internal_mutable_ticket() {
  
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckConnectWorldResult::release_ticket() {
  // @@protoc_insertion_point(field_release:KWMsg.AckConnectWorldResult.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckConnectWorldResult::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckConnectWorldResult.ticket)
}

// -------------------------------------------------------------------

// ReqVerifyJwt

// bytes jwt = 1;
inline void ReqVerifyJwt::clear_jwt() {
  jwt_.ClearToEmpty();
}
inline const std::string& ReqVerifyJwt::jwt() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqVerifyJwt.jwt)
  return _internal_jwt();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqVerifyJwt::set_jwt(ArgT0&& arg0, ArgT... args) {
 
 jwt_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqVerifyJwt.jwt)
}
inline std::string* ReqVerifyJwt::mutable_jwt() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqVerifyJwt.jwt)
  return _internal_mutable_jwt();
}
inline const std::string& ReqVerifyJwt::_internal_jwt() const {
  return jwt_.Get();
}
inline void ReqVerifyJwt::_internal_set_jwt(const std::string& value) {
  
  jwt_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqVerifyJwt::_internal_mutable_jwt() {
  
  return jwt_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqVerifyJwt::release_jwt() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqVerifyJwt.jwt)
  return jwt_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqVerifyJwt::set_allocated_jwt(std::string* jwt) {
  if (jwt != nullptr) {
    
  } else {
    
  }
  jwt_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), jwt,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqVerifyJwt.jwt)
}

// int32 world_id = 2;
inline void ReqVerifyJwt::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqVerifyJwt::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqVerifyJwt::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqVerifyJwt.world_id)
  return _internal_world_id();
}
inline void ReqVerifyJwt::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void ReqVerifyJwt::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqVerifyJwt.world_id)
}

// bytes ticket = 3;
inline void ReqVerifyJwt::clear_ticket() {
  ticket_.ClearToEmpty();
}
inline const std::string& ReqVerifyJwt::ticket() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqVerifyJwt.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqVerifyJwt::set_ticket(ArgT0&& arg0, ArgT... args) {
 
 ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqVerifyJwt.ticket)
}
inline std::string* ReqVerifyJwt::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqVerifyJwt.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& ReqVerifyJwt::_internal_ticket() const {
  return ticket_.Get();
}
inline void ReqVerifyJwt::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqVerifyJwt::_internal_mutable_ticket() {
  
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqVerifyJwt::release_ticket() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqVerifyJwt.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqVerifyJwt::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqVerifyJwt.ticket)
}

// -------------------------------------------------------------------

// AckVerifyJwt

// .KWMsg.EGameEventCode event_code = 1;
inline void AckVerifyJwt::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckVerifyJwt::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckVerifyJwt::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckVerifyJwt.event_code)
  return _internal_event_code();
}
inline void AckVerifyJwt::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckVerifyJwt::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckVerifyJwt.event_code)
}

// .KWMsg.Ident client_id = 2;
inline bool AckVerifyJwt::_internal_has_client_id() const {
  return this != internal_default_instance() && client_id_ != nullptr;
}
inline bool AckVerifyJwt::has_client_id() const {
  return _internal_has_client_id();
}
inline const ::KWMsg::Ident& AckVerifyJwt::_internal_client_id() const {
  const ::KWMsg::Ident* p = client_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckVerifyJwt::client_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckVerifyJwt.client_id)
  return _internal_client_id();
}
inline void AckVerifyJwt::unsafe_arena_set_allocated_client_id(
    ::KWMsg::Ident* client_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id_);
  }
  client_id_ = client_id;
  if (client_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckVerifyJwt.client_id)
}
inline ::KWMsg::Ident* AckVerifyJwt::release_client_id() {
  
  ::KWMsg::Ident* temp = client_id_;
  client_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckVerifyJwt::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckVerifyJwt.client_id)
  
  ::KWMsg::Ident* temp = client_id_;
  client_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckVerifyJwt::_internal_mutable_client_id() {
  
  if (client_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    client_id_ = p;
  }
  return client_id_;
}
inline ::KWMsg::Ident* AckVerifyJwt::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckVerifyJwt.client_id)
  return _internal_mutable_client_id();
}
inline void AckVerifyJwt::set_allocated_client_id(::KWMsg::Ident* client_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id_);
  }
  if (client_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id));
    if (message_arena != submessage_arena) {
      client_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_id, submessage_arena);
    }
    
  } else {
    
  }
  client_id_ = client_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckVerifyJwt.client_id)
}

// bytes security_key = 3;
inline void AckVerifyJwt::clear_security_key() {
  security_key_.ClearToEmpty();
}
inline const std::string& AckVerifyJwt::security_key() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckVerifyJwt.security_key)
  return _internal_security_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckVerifyJwt::set_security_key(ArgT0&& arg0, ArgT... args) {
 
 security_key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckVerifyJwt.security_key)
}
inline std::string* AckVerifyJwt::mutable_security_key() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckVerifyJwt.security_key)
  return _internal_mutable_security_key();
}
inline const std::string& AckVerifyJwt::_internal_security_key() const {
  return security_key_.Get();
}
inline void AckVerifyJwt::_internal_set_security_key(const std::string& value) {
  
  security_key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckVerifyJwt::_internal_mutable_security_key() {
  
  return security_key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckVerifyJwt::release_security_key() {
  // @@protoc_insertion_point(field_release:KWMsg.AckVerifyJwt.security_key)
  return security_key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckVerifyJwt::set_allocated_security_key(std::string* security_key) {
  if (security_key != nullptr) {
    
  } else {
    
  }
  security_key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), security_key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckVerifyJwt.security_key)
}

// bytes security_iv = 4;
inline void AckVerifyJwt::clear_security_iv() {
  security_iv_.ClearToEmpty();
}
inline const std::string& AckVerifyJwt::security_iv() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckVerifyJwt.security_iv)
  return _internal_security_iv();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckVerifyJwt::set_security_iv(ArgT0&& arg0, ArgT... args) {
 
 security_iv_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckVerifyJwt.security_iv)
}
inline std::string* AckVerifyJwt::mutable_security_iv() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckVerifyJwt.security_iv)
  return _internal_mutable_security_iv();
}
inline const std::string& AckVerifyJwt::_internal_security_iv() const {
  return security_iv_.Get();
}
inline void AckVerifyJwt::_internal_set_security_iv(const std::string& value) {
  
  security_iv_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckVerifyJwt::_internal_mutable_security_iv() {
  
  return security_iv_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckVerifyJwt::release_security_iv() {
  // @@protoc_insertion_point(field_release:KWMsg.AckVerifyJwt.security_iv)
  return security_iv_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckVerifyJwt::set_allocated_security_iv(std::string* security_iv) {
  if (security_iv != nullptr) {
    
  } else {
    
  }
  security_iv_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), security_iv,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckVerifyJwt.security_iv)
}

// -------------------------------------------------------------------

// ReqAckKickFromWorld

// bytes account = 1;
inline void ReqAckKickFromWorld::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqAckKickFromWorld::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckKickFromWorld.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAckKickFromWorld::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckKickFromWorld.account)
}
inline std::string* ReqAckKickFromWorld::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckKickFromWorld.account)
  return _internal_mutable_account();
}
inline const std::string& ReqAckKickFromWorld::_internal_account() const {
  return account_.Get();
}
inline void ReqAckKickFromWorld::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqAckKickFromWorld::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqAckKickFromWorld::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckKickFromWorld.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqAckKickFromWorld::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckKickFromWorld.account)
}

// bytes target_digital_id = 2;
inline void ReqAckKickFromWorld::clear_target_digital_id() {
  target_digital_id_.ClearToEmpty();
}
inline const std::string& ReqAckKickFromWorld::target_digital_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckKickFromWorld.target_digital_id)
  return _internal_target_digital_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAckKickFromWorld::set_target_digital_id(ArgT0&& arg0, ArgT... args) {
 
 target_digital_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckKickFromWorld.target_digital_id)
}
inline std::string* ReqAckKickFromWorld::mutable_target_digital_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckKickFromWorld.target_digital_id)
  return _internal_mutable_target_digital_id();
}
inline const std::string& ReqAckKickFromWorld::_internal_target_digital_id() const {
  return target_digital_id_.Get();
}
inline void ReqAckKickFromWorld::_internal_set_target_digital_id(const std::string& value) {
  
  target_digital_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqAckKickFromWorld::_internal_mutable_target_digital_id() {
  
  return target_digital_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqAckKickFromWorld::release_target_digital_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckKickFromWorld.target_digital_id)
  return target_digital_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqAckKickFromWorld::set_allocated_target_digital_id(std::string* target_digital_id) {
  if (target_digital_id != nullptr) {
    
  } else {
    
  }
  target_digital_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_digital_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckKickFromWorld.target_digital_id)
}

// int32 target_gate_id = 3;
inline void ReqAckKickFromWorld::clear_target_gate_id() {
  target_gate_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckKickFromWorld::_internal_target_gate_id() const {
  return target_gate_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckKickFromWorld::target_gate_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckKickFromWorld.target_gate_id)
  return _internal_target_gate_id();
}
inline void ReqAckKickFromWorld::_internal_set_target_gate_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_gate_id_ = value;
}
inline void ReqAckKickFromWorld::set_target_gate_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_gate_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckKickFromWorld.target_gate_id)
}

// .KWMsg.Ident target_client_id = 4;
inline bool ReqAckKickFromWorld::_internal_has_target_client_id() const {
  return this != internal_default_instance() && target_client_id_ != nullptr;
}
inline bool ReqAckKickFromWorld::has_target_client_id() const {
  return _internal_has_target_client_id();
}
inline const ::KWMsg::Ident& ReqAckKickFromWorld::_internal_target_client_id() const {
  const ::KWMsg::Ident* p = target_client_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqAckKickFromWorld::target_client_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckKickFromWorld.target_client_id)
  return _internal_target_client_id();
}
inline void ReqAckKickFromWorld::unsafe_arena_set_allocated_target_client_id(
    ::KWMsg::Ident* target_client_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_client_id_);
  }
  target_client_id_ = target_client_id;
  if (target_client_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqAckKickFromWorld.target_client_id)
}
inline ::KWMsg::Ident* ReqAckKickFromWorld::release_target_client_id() {
  
  ::KWMsg::Ident* temp = target_client_id_;
  target_client_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqAckKickFromWorld::unsafe_arena_release_target_client_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckKickFromWorld.target_client_id)
  
  ::KWMsg::Ident* temp = target_client_id_;
  target_client_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqAckKickFromWorld::_internal_mutable_target_client_id() {
  
  if (target_client_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    target_client_id_ = p;
  }
  return target_client_id_;
}
inline ::KWMsg::Ident* ReqAckKickFromWorld::mutable_target_client_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckKickFromWorld.target_client_id)
  return _internal_mutable_target_client_id();
}
inline void ReqAckKickFromWorld::set_allocated_target_client_id(::KWMsg::Ident* target_client_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_client_id_);
  }
  if (target_client_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_client_id));
    if (message_arena != submessage_arena) {
      target_client_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_client_id, submessage_arena);
    }
    
  } else {
    
  }
  target_client_id_ = target_client_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckKickFromWorld.target_client_id)
}

// -------------------------------------------------------------------

// ReqLeaveGame

// bytes account = 1;
inline void ReqLeaveGame::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqLeaveGame::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLeaveGame.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqLeaveGame::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqLeaveGame.account)
}
inline std::string* ReqLeaveGame::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqLeaveGame.account)
  return _internal_mutable_account();
}
inline const std::string& ReqLeaveGame::_internal_account() const {
  return account_.Get();
}
inline void ReqLeaveGame::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqLeaveGame::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqLeaveGame::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqLeaveGame.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqLeaveGame::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqLeaveGame.account)
}

// .KWMsg.Ident player_id = 2;
inline bool ReqLeaveGame::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqLeaveGame::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqLeaveGame::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqLeaveGame::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLeaveGame.player_id)
  return _internal_player_id();
}
inline void ReqLeaveGame::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqLeaveGame.player_id)
}
inline ::KWMsg::Ident* ReqLeaveGame::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqLeaveGame::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqLeaveGame.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqLeaveGame::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqLeaveGame::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqLeaveGame.player_id)
  return _internal_mutable_player_id();
}
inline void ReqLeaveGame::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqLeaveGame.player_id)
}

// .KWMsg.Ident client_id = 3;
inline bool ReqLeaveGame::_internal_has_client_id() const {
  return this != internal_default_instance() && client_id_ != nullptr;
}
inline bool ReqLeaveGame::has_client_id() const {
  return _internal_has_client_id();
}
inline const ::KWMsg::Ident& ReqLeaveGame::_internal_client_id() const {
  const ::KWMsg::Ident* p = client_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqLeaveGame::client_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLeaveGame.client_id)
  return _internal_client_id();
}
inline void ReqLeaveGame::unsafe_arena_set_allocated_client_id(
    ::KWMsg::Ident* client_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id_);
  }
  client_id_ = client_id;
  if (client_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqLeaveGame.client_id)
}
inline ::KWMsg::Ident* ReqLeaveGame::release_client_id() {
  
  ::KWMsg::Ident* temp = client_id_;
  client_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqLeaveGame::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqLeaveGame.client_id)
  
  ::KWMsg::Ident* temp = client_id_;
  client_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqLeaveGame::_internal_mutable_client_id() {
  
  if (client_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    client_id_ = p;
  }
  return client_id_;
}
inline ::KWMsg::Ident* ReqLeaveGame::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqLeaveGame.client_id)
  return _internal_mutable_client_id();
}
inline void ReqLeaveGame::set_allocated_client_id(::KWMsg::Ident* client_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id_);
  }
  if (client_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id));
    if (message_arena != submessage_arena) {
      client_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_id, submessage_arena);
    }
    
  } else {
    
  }
  client_id_ = client_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqLeaveGame.client_id)
}

// int32 game_id = 4;
inline void ReqLeaveGame::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLeaveGame::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqLeaveGame::game_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLeaveGame.game_id)
  return _internal_game_id();
}
inline void ReqLeaveGame::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
}
inline void ReqLeaveGame::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqLeaveGame.game_id)
}

// .KWMsg.EOfflineReason reason = 5;
inline void ReqLeaveGame::clear_reason() {
  reason_ = 0;
}
inline ::KWMsg::EOfflineReason ReqLeaveGame::_internal_reason() const {
  return static_cast< ::KWMsg::EOfflineReason >(reason_);
}
inline ::KWMsg::EOfflineReason ReqLeaveGame::reason() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLeaveGame.reason)
  return _internal_reason();
}
inline void ReqLeaveGame::_internal_set_reason(::KWMsg::EOfflineReason value) {
  
  reason_ = value;
}
inline void ReqLeaveGame::set_reason(::KWMsg::EOfflineReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqLeaveGame.reason)
}

// -------------------------------------------------------------------

// AckLeaveGame

// bytes account = 1;
inline void AckLeaveGame::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& AckLeaveGame::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckLeaveGame.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckLeaveGame::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckLeaveGame.account)
}
inline std::string* AckLeaveGame::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckLeaveGame.account)
  return _internal_mutable_account();
}
inline const std::string& AckLeaveGame::_internal_account() const {
  return account_.Get();
}
inline void AckLeaveGame::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckLeaveGame::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckLeaveGame::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.AckLeaveGame.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckLeaveGame::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckLeaveGame.account)
}

// .KWMsg.Ident player_id = 2;
inline bool AckLeaveGame::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckLeaveGame::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckLeaveGame::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckLeaveGame::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckLeaveGame.player_id)
  return _internal_player_id();
}
inline void AckLeaveGame::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckLeaveGame.player_id)
}
inline ::KWMsg::Ident* AckLeaveGame::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckLeaveGame::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckLeaveGame.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckLeaveGame::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckLeaveGame::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckLeaveGame.player_id)
  return _internal_mutable_player_id();
}
inline void AckLeaveGame::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckLeaveGame.player_id)
}

// .KWMsg.Ident client_id = 3;
inline bool AckLeaveGame::_internal_has_client_id() const {
  return this != internal_default_instance() && client_id_ != nullptr;
}
inline bool AckLeaveGame::has_client_id() const {
  return _internal_has_client_id();
}
inline const ::KWMsg::Ident& AckLeaveGame::_internal_client_id() const {
  const ::KWMsg::Ident* p = client_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckLeaveGame::client_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckLeaveGame.client_id)
  return _internal_client_id();
}
inline void AckLeaveGame::unsafe_arena_set_allocated_client_id(
    ::KWMsg::Ident* client_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id_);
  }
  client_id_ = client_id;
  if (client_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckLeaveGame.client_id)
}
inline ::KWMsg::Ident* AckLeaveGame::release_client_id() {
  
  ::KWMsg::Ident* temp = client_id_;
  client_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckLeaveGame::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckLeaveGame.client_id)
  
  ::KWMsg::Ident* temp = client_id_;
  client_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckLeaveGame::_internal_mutable_client_id() {
  
  if (client_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    client_id_ = p;
  }
  return client_id_;
}
inline ::KWMsg::Ident* AckLeaveGame::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckLeaveGame.client_id)
  return _internal_mutable_client_id();
}
inline void AckLeaveGame::set_allocated_client_id(::KWMsg::Ident* client_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id_);
  }
  if (client_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id));
    if (message_arena != submessage_arena) {
      client_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_id, submessage_arena);
    }
    
  } else {
    
  }
  client_id_ = client_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckLeaveGame.client_id)
}

// int32 game_id = 4;
inline void AckLeaveGame::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckLeaveGame::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckLeaveGame::game_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckLeaveGame.game_id)
  return _internal_game_id();
}
inline void AckLeaveGame::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
}
inline void AckLeaveGame::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckLeaveGame.game_id)
}

// .KWMsg.EOfflineReason reason = 5;
inline void AckLeaveGame::clear_reason() {
  reason_ = 0;
}
inline ::KWMsg::EOfflineReason AckLeaveGame::_internal_reason() const {
  return static_cast< ::KWMsg::EOfflineReason >(reason_);
}
inline ::KWMsg::EOfflineReason AckLeaveGame::reason() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckLeaveGame.reason)
  return _internal_reason();
}
inline void AckLeaveGame::_internal_set_reason(::KWMsg::EOfflineReason value) {
  
  reason_ = value;
}
inline void AckLeaveGame::set_reason(::KWMsg::EOfflineReason value) {
  _internal_set_reason(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckLeaveGame.reason)
}

// -------------------------------------------------------------------

// ReqEnterGame

// bytes account = 1;
inline void ReqEnterGame::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqEnterGame::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqEnterGame.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqEnterGame::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqEnterGame.account)
}
inline std::string* ReqEnterGame::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqEnterGame.account)
  return _internal_mutable_account();
}
inline const std::string& ReqEnterGame::_internal_account() const {
  return account_.Get();
}
inline void ReqEnterGame::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqEnterGame::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqEnterGame::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqEnterGame.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqEnterGame::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqEnterGame.account)
}

// bytes digital_id = 2;
inline void ReqEnterGame::clear_digital_id() {
  digital_id_.ClearToEmpty();
}
inline const std::string& ReqEnterGame::digital_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqEnterGame.digital_id)
  return _internal_digital_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqEnterGame::set_digital_id(ArgT0&& arg0, ArgT... args) {
 
 digital_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqEnterGame.digital_id)
}
inline std::string* ReqEnterGame::mutable_digital_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqEnterGame.digital_id)
  return _internal_mutable_digital_id();
}
inline const std::string& ReqEnterGame::_internal_digital_id() const {
  return digital_id_.Get();
}
inline void ReqEnterGame::_internal_set_digital_id(const std::string& value) {
  
  digital_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqEnterGame::_internal_mutable_digital_id() {
  
  return digital_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqEnterGame::release_digital_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqEnterGame.digital_id)
  return digital_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqEnterGame::set_allocated_digital_id(std::string* digital_id) {
  if (digital_id != nullptr) {
    
  } else {
    
  }
  digital_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digital_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqEnterGame.digital_id)
}

// .KWMsg.DeviceInfo device_info = 3;
inline bool ReqEnterGame::_internal_has_device_info() const {
  return this != internal_default_instance() && device_info_ != nullptr;
}
inline bool ReqEnterGame::has_device_info() const {
  return _internal_has_device_info();
}
inline const ::KWMsg::DeviceInfo& ReqEnterGame::_internal_device_info() const {
  const ::KWMsg::DeviceInfo* p = device_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::DeviceInfo&>(
      ::KWMsg::_DeviceInfo_default_instance_);
}
inline const ::KWMsg::DeviceInfo& ReqEnterGame::device_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqEnterGame.device_info)
  return _internal_device_info();
}
inline void ReqEnterGame::unsafe_arena_set_allocated_device_info(
    ::KWMsg::DeviceInfo* device_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_info_);
  }
  device_info_ = device_info;
  if (device_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqEnterGame.device_info)
}
inline ::KWMsg::DeviceInfo* ReqEnterGame::release_device_info() {
  
  ::KWMsg::DeviceInfo* temp = device_info_;
  device_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::DeviceInfo* ReqEnterGame::unsafe_arena_release_device_info() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqEnterGame.device_info)
  
  ::KWMsg::DeviceInfo* temp = device_info_;
  device_info_ = nullptr;
  return temp;
}
inline ::KWMsg::DeviceInfo* ReqEnterGame::_internal_mutable_device_info() {
  
  if (device_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::DeviceInfo>(GetArenaForAllocation());
    device_info_ = p;
  }
  return device_info_;
}
inline ::KWMsg::DeviceInfo* ReqEnterGame::mutable_device_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqEnterGame.device_info)
  return _internal_mutable_device_info();
}
inline void ReqEnterGame::set_allocated_device_info(::KWMsg::DeviceInfo* device_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_info_);
  }
  if (device_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(device_info));
    if (message_arena != submessage_arena) {
      device_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_info, submessage_arena);
    }
    
  } else {
    
  }
  device_info_ = device_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqEnterGame.device_info)
}

// -------------------------------------------------------------------

// ReqPlayerLite

// bytes account = 1;
inline void ReqPlayerLite::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqPlayerLite::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqPlayerLite.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqPlayerLite::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqPlayerLite.account)
}
inline std::string* ReqPlayerLite::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqPlayerLite.account)
  return _internal_mutable_account();
}
inline const std::string& ReqPlayerLite::_internal_account() const {
  return account_.Get();
}
inline void ReqPlayerLite::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqPlayerLite::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqPlayerLite::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqPlayerLite.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqPlayerLite::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqPlayerLite.account)
}

// bytes digital_id = 2;
inline void ReqPlayerLite::clear_digital_id() {
  digital_id_.ClearToEmpty();
}
inline const std::string& ReqPlayerLite::digital_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqPlayerLite.digital_id)
  return _internal_digital_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqPlayerLite::set_digital_id(ArgT0&& arg0, ArgT... args) {
 
 digital_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqPlayerLite.digital_id)
}
inline std::string* ReqPlayerLite::mutable_digital_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqPlayerLite.digital_id)
  return _internal_mutable_digital_id();
}
inline const std::string& ReqPlayerLite::_internal_digital_id() const {
  return digital_id_.Get();
}
inline void ReqPlayerLite::_internal_set_digital_id(const std::string& value) {
  
  digital_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqPlayerLite::_internal_mutable_digital_id() {
  
  return digital_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqPlayerLite::release_digital_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqPlayerLite.digital_id)
  return digital_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqPlayerLite::set_allocated_digital_id(std::string* digital_id) {
  if (digital_id != nullptr) {
    
  } else {
    
  }
  digital_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digital_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqPlayerLite.digital_id)
}

// -------------------------------------------------------------------

// ReqUpdateAccountLastLoginInfo

// bytes account = 1;
inline void ReqUpdateAccountLastLoginInfo::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqUpdateAccountLastLoginInfo::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdateAccountLastLoginInfo.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUpdateAccountLastLoginInfo::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdateAccountLastLoginInfo.account)
}
inline std::string* ReqUpdateAccountLastLoginInfo::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdateAccountLastLoginInfo.account)
  return _internal_mutable_account();
}
inline const std::string& ReqUpdateAccountLastLoginInfo::_internal_account() const {
  return account_.Get();
}
inline void ReqUpdateAccountLastLoginInfo::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUpdateAccountLastLoginInfo::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUpdateAccountLastLoginInfo::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdateAccountLastLoginInfo.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUpdateAccountLastLoginInfo::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdateAccountLastLoginInfo.account)
}

// bytes dev_id = 2;
inline void ReqUpdateAccountLastLoginInfo::clear_dev_id() {
  dev_id_.ClearToEmpty();
}
inline const std::string& ReqUpdateAccountLastLoginInfo::dev_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdateAccountLastLoginInfo.dev_id)
  return _internal_dev_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUpdateAccountLastLoginInfo::set_dev_id(ArgT0&& arg0, ArgT... args) {
 
 dev_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdateAccountLastLoginInfo.dev_id)
}
inline std::string* ReqUpdateAccountLastLoginInfo::mutable_dev_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdateAccountLastLoginInfo.dev_id)
  return _internal_mutable_dev_id();
}
inline const std::string& ReqUpdateAccountLastLoginInfo::_internal_dev_id() const {
  return dev_id_.Get();
}
inline void ReqUpdateAccountLastLoginInfo::_internal_set_dev_id(const std::string& value) {
  
  dev_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUpdateAccountLastLoginInfo::_internal_mutable_dev_id() {
  
  return dev_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUpdateAccountLastLoginInfo::release_dev_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdateAccountLastLoginInfo.dev_id)
  return dev_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUpdateAccountLastLoginInfo::set_allocated_dev_id(std::string* dev_id) {
  if (dev_id != nullptr) {
    
  } else {
    
  }
  dev_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dev_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdateAccountLastLoginInfo.dev_id)
}

// bytes zone_id = 3;
inline void ReqUpdateAccountLastLoginInfo::clear_zone_id() {
  zone_id_.ClearToEmpty();
}
inline const std::string& ReqUpdateAccountLastLoginInfo::zone_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdateAccountLastLoginInfo.zone_id)
  return _internal_zone_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUpdateAccountLastLoginInfo::set_zone_id(ArgT0&& arg0, ArgT... args) {
 
 zone_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdateAccountLastLoginInfo.zone_id)
}
inline std::string* ReqUpdateAccountLastLoginInfo::mutable_zone_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdateAccountLastLoginInfo.zone_id)
  return _internal_mutable_zone_id();
}
inline const std::string& ReqUpdateAccountLastLoginInfo::_internal_zone_id() const {
  return zone_id_.Get();
}
inline void ReqUpdateAccountLastLoginInfo::_internal_set_zone_id(const std::string& value) {
  
  zone_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUpdateAccountLastLoginInfo::_internal_mutable_zone_id() {
  
  return zone_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUpdateAccountLastLoginInfo::release_zone_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdateAccountLastLoginInfo.zone_id)
  return zone_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUpdateAccountLastLoginInfo::set_allocated_zone_id(std::string* zone_id) {
  if (zone_id != nullptr) {
    
  } else {
    
  }
  zone_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zone_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdateAccountLastLoginInfo.zone_id)
}

// int64 login_ts = 4;
inline void ReqUpdateAccountLastLoginInfo::clear_login_ts() {
  login_ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqUpdateAccountLastLoginInfo::_internal_login_ts() const {
  return login_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqUpdateAccountLastLoginInfo::login_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdateAccountLastLoginInfo.login_ts)
  return _internal_login_ts();
}
inline void ReqUpdateAccountLastLoginInfo::_internal_set_login_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  login_ts_ = value;
}
inline void ReqUpdateAccountLastLoginInfo::set_login_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_login_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdateAccountLastLoginInfo.login_ts)
}

// -------------------------------------------------------------------

// PlayerLiteInfo

// .KWMsg.Ident player_id = 1;
inline bool PlayerLiteInfo::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool PlayerLiteInfo::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& PlayerLiteInfo::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& PlayerLiteInfo::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerLiteInfo.player_id)
  return _internal_player_id();
}
inline void PlayerLiteInfo::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PlayerLiteInfo.player_id)
}
inline ::KWMsg::Ident* PlayerLiteInfo::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* PlayerLiteInfo::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerLiteInfo.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* PlayerLiteInfo::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* PlayerLiteInfo::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerLiteInfo.player_id)
  return _internal_mutable_player_id();
}
inline void PlayerLiteInfo::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerLiteInfo.player_id)
}

// bytes account = 2;
inline void PlayerLiteInfo::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& PlayerLiteInfo::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerLiteInfo.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerLiteInfo::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerLiteInfo.account)
}
inline std::string* PlayerLiteInfo::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerLiteInfo.account)
  return _internal_mutable_account();
}
inline const std::string& PlayerLiteInfo::_internal_account() const {
  return account_.Get();
}
inline void PlayerLiteInfo::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerLiteInfo::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerLiteInfo::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerLiteInfo.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerLiteInfo::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerLiteInfo.account)
}

// bytes digital_id = 3;
inline void PlayerLiteInfo::clear_digital_id() {
  digital_id_.ClearToEmpty();
}
inline const std::string& PlayerLiteInfo::digital_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerLiteInfo.digital_id)
  return _internal_digital_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerLiteInfo::set_digital_id(ArgT0&& arg0, ArgT... args) {
 
 digital_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerLiteInfo.digital_id)
}
inline std::string* PlayerLiteInfo::mutable_digital_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerLiteInfo.digital_id)
  return _internal_mutable_digital_id();
}
inline const std::string& PlayerLiteInfo::_internal_digital_id() const {
  return digital_id_.Get();
}
inline void PlayerLiteInfo::_internal_set_digital_id(const std::string& value) {
  
  digital_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerLiteInfo::_internal_mutable_digital_id() {
  
  return digital_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerLiteInfo::release_digital_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerLiteInfo.digital_id)
  return digital_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerLiteInfo::set_allocated_digital_id(std::string* digital_id) {
  if (digital_id != nullptr) {
    
  } else {
    
  }
  digital_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digital_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerLiteInfo.digital_id)
}

// bytes nickname = 4;
inline void PlayerLiteInfo::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& PlayerLiteInfo::nickname() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerLiteInfo.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerLiteInfo::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerLiteInfo.nickname)
}
inline std::string* PlayerLiteInfo::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerLiteInfo.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& PlayerLiteInfo::_internal_nickname() const {
  return nickname_.Get();
}
inline void PlayerLiteInfo::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerLiteInfo::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerLiteInfo::release_nickname() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerLiteInfo.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerLiteInfo::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerLiteInfo.nickname)
}

// bytes zone_id = 5;
inline void PlayerLiteInfo::clear_zone_id() {
  zone_id_.ClearToEmpty();
}
inline const std::string& PlayerLiteInfo::zone_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerLiteInfo.zone_id)
  return _internal_zone_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerLiteInfo::set_zone_id(ArgT0&& arg0, ArgT... args) {
 
 zone_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerLiteInfo.zone_id)
}
inline std::string* PlayerLiteInfo::mutable_zone_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerLiteInfo.zone_id)
  return _internal_mutable_zone_id();
}
inline const std::string& PlayerLiteInfo::_internal_zone_id() const {
  return zone_id_.Get();
}
inline void PlayerLiteInfo::_internal_set_zone_id(const std::string& value) {
  
  zone_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerLiteInfo::_internal_mutable_zone_id() {
  
  return zone_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerLiteInfo::release_zone_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerLiteInfo.zone_id)
  return zone_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerLiteInfo::set_allocated_zone_id(std::string* zone_id) {
  if (zone_id != nullptr) {
    
  } else {
    
  }
  zone_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zone_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerLiteInfo.zone_id)
}

// int32 level = 6;
inline void PlayerLiteInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerLiteInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerLiteInfo::level() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerLiteInfo.level)
  return _internal_level();
}
inline void PlayerLiteInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void PlayerLiteInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerLiteInfo.level)
}

// int32 last_offline_time = 7;
inline void PlayerLiteInfo::clear_last_offline_time() {
  last_offline_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerLiteInfo::_internal_last_offline_time() const {
  return last_offline_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerLiteInfo::last_offline_time() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerLiteInfo.last_offline_time)
  return _internal_last_offline_time();
}
inline void PlayerLiteInfo::_internal_set_last_offline_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  last_offline_time_ = value;
}
inline void PlayerLiteInfo::set_last_offline_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_last_offline_time(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerLiteInfo.last_offline_time)
}

// bytes avatar = 8;
inline void PlayerLiteInfo::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& PlayerLiteInfo::avatar() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerLiteInfo.avatar)
  return _internal_avatar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerLiteInfo::set_avatar(ArgT0&& arg0, ArgT... args) {
 
 avatar_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerLiteInfo.avatar)
}
inline std::string* PlayerLiteInfo::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerLiteInfo.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& PlayerLiteInfo::_internal_avatar() const {
  return avatar_.Get();
}
inline void PlayerLiteInfo::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerLiteInfo::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerLiteInfo::release_avatar() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerLiteInfo.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerLiteInfo::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerLiteInfo.avatar)
}

// bytes avatar_frame = 9;
inline void PlayerLiteInfo::clear_avatar_frame() {
  avatar_frame_.ClearToEmpty();
}
inline const std::string& PlayerLiteInfo::avatar_frame() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerLiteInfo.avatar_frame)
  return _internal_avatar_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerLiteInfo::set_avatar_frame(ArgT0&& arg0, ArgT... args) {
 
 avatar_frame_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerLiteInfo.avatar_frame)
}
inline std::string* PlayerLiteInfo::mutable_avatar_frame() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerLiteInfo.avatar_frame)
  return _internal_mutable_avatar_frame();
}
inline const std::string& PlayerLiteInfo::_internal_avatar_frame() const {
  return avatar_frame_.Get();
}
inline void PlayerLiteInfo::_internal_set_avatar_frame(const std::string& value) {
  
  avatar_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerLiteInfo::_internal_mutable_avatar_frame() {
  
  return avatar_frame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerLiteInfo::release_avatar_frame() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerLiteInfo.avatar_frame)
  return avatar_frame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerLiteInfo::set_allocated_avatar_frame(std::string* avatar_frame) {
  if (avatar_frame != nullptr) {
    
  } else {
    
  }
  avatar_frame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_frame,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerLiteInfo.avatar_frame)
}

// -------------------------------------------------------------------

// AckPlayerLite

// .KWMsg.PlayerLiteInfo player_data = 1;
inline bool AckPlayerLite::_internal_has_player_data() const {
  return this != internal_default_instance() && player_data_ != nullptr;
}
inline bool AckPlayerLite::has_player_data() const {
  return _internal_has_player_data();
}
inline void AckPlayerLite::clear_player_data() {
  if (GetArenaForAllocation() == nullptr && player_data_ != nullptr) {
    delete player_data_;
  }
  player_data_ = nullptr;
}
inline const ::KWMsg::PlayerLiteInfo& AckPlayerLite::_internal_player_data() const {
  const ::KWMsg::PlayerLiteInfo* p = player_data_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::PlayerLiteInfo&>(
      ::KWMsg::_PlayerLiteInfo_default_instance_);
}
inline const ::KWMsg::PlayerLiteInfo& AckPlayerLite::player_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPlayerLite.player_data)
  return _internal_player_data();
}
inline void AckPlayerLite::unsafe_arena_set_allocated_player_data(
    ::KWMsg::PlayerLiteInfo* player_data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_data_);
  }
  player_data_ = player_data;
  if (player_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckPlayerLite.player_data)
}
inline ::KWMsg::PlayerLiteInfo* AckPlayerLite::release_player_data() {
  
  ::KWMsg::PlayerLiteInfo* temp = player_data_;
  player_data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::PlayerLiteInfo* AckPlayerLite::unsafe_arena_release_player_data() {
  // @@protoc_insertion_point(field_release:KWMsg.AckPlayerLite.player_data)
  
  ::KWMsg::PlayerLiteInfo* temp = player_data_;
  player_data_ = nullptr;
  return temp;
}
inline ::KWMsg::PlayerLiteInfo* AckPlayerLite::_internal_mutable_player_data() {
  
  if (player_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::PlayerLiteInfo>(GetArenaForAllocation());
    player_data_ = p;
  }
  return player_data_;
}
inline ::KWMsg::PlayerLiteInfo* AckPlayerLite::mutable_player_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckPlayerLite.player_data)
  return _internal_mutable_player_data();
}
inline void AckPlayerLite::set_allocated_player_data(::KWMsg::PlayerLiteInfo* player_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_data_;
  }
  if (player_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::PlayerLiteInfo>::GetOwningArena(player_data);
    if (message_arena != submessage_arena) {
      player_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_data, submessage_arena);
    }
    
  } else {
    
  }
  player_data_ = player_data;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckPlayerLite.player_data)
}

// -------------------------------------------------------------------

// ReqUpdateAccountPlayer

// bytes account = 1;
inline void ReqUpdateAccountPlayer::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqUpdateAccountPlayer::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdateAccountPlayer.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUpdateAccountPlayer::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdateAccountPlayer.account)
}
inline std::string* ReqUpdateAccountPlayer::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdateAccountPlayer.account)
  return _internal_mutable_account();
}
inline const std::string& ReqUpdateAccountPlayer::_internal_account() const {
  return account_.Get();
}
inline void ReqUpdateAccountPlayer::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUpdateAccountPlayer::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUpdateAccountPlayer::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdateAccountPlayer.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUpdateAccountPlayer::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdateAccountPlayer.account)
}

// bytes zone_id = 2;
inline void ReqUpdateAccountPlayer::clear_zone_id() {
  zone_id_.ClearToEmpty();
}
inline const std::string& ReqUpdateAccountPlayer::zone_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdateAccountPlayer.zone_id)
  return _internal_zone_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUpdateAccountPlayer::set_zone_id(ArgT0&& arg0, ArgT... args) {
 
 zone_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdateAccountPlayer.zone_id)
}
inline std::string* ReqUpdateAccountPlayer::mutable_zone_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdateAccountPlayer.zone_id)
  return _internal_mutable_zone_id();
}
inline const std::string& ReqUpdateAccountPlayer::_internal_zone_id() const {
  return zone_id_.Get();
}
inline void ReqUpdateAccountPlayer::_internal_set_zone_id(const std::string& value) {
  
  zone_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUpdateAccountPlayer::_internal_mutable_zone_id() {
  
  return zone_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUpdateAccountPlayer::release_zone_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdateAccountPlayer.zone_id)
  return zone_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUpdateAccountPlayer::set_allocated_zone_id(std::string* zone_id) {
  if (zone_id != nullptr) {
    
  } else {
    
  }
  zone_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), zone_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdateAccountPlayer.zone_id)
}

// bytes json = 3;
inline void ReqUpdateAccountPlayer::clear_json() {
  json_.ClearToEmpty();
}
inline const std::string& ReqUpdateAccountPlayer::json() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdateAccountPlayer.json)
  return _internal_json();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUpdateAccountPlayer::set_json(ArgT0&& arg0, ArgT... args) {
 
 json_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdateAccountPlayer.json)
}
inline std::string* ReqUpdateAccountPlayer::mutable_json() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdateAccountPlayer.json)
  return _internal_mutable_json();
}
inline const std::string& ReqUpdateAccountPlayer::_internal_json() const {
  return json_.Get();
}
inline void ReqUpdateAccountPlayer::_internal_set_json(const std::string& value) {
  
  json_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUpdateAccountPlayer::_internal_mutable_json() {
  
  return json_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUpdateAccountPlayer::release_json() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdateAccountPlayer.json)
  return json_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUpdateAccountPlayer::set_allocated_json(std::string* json) {
  if (json != nullptr) {
    
  } else {
    
  }
  json_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), json,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdateAccountPlayer.json)
}

// -------------------------------------------------------------------

// ReqLoadPlayerData

// .KWMsg.Ident player_id = 1;
inline bool ReqLoadPlayerData::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqLoadPlayerData::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqLoadPlayerData::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqLoadPlayerData::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLoadPlayerData.player_id)
  return _internal_player_id();
}
inline void ReqLoadPlayerData::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqLoadPlayerData.player_id)
}
inline ::KWMsg::Ident* ReqLoadPlayerData::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqLoadPlayerData::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqLoadPlayerData.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqLoadPlayerData::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqLoadPlayerData::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqLoadPlayerData.player_id)
  return _internal_mutable_player_id();
}
inline void ReqLoadPlayerData::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqLoadPlayerData.player_id)
}

// -------------------------------------------------------------------

// AckLoadPlayerData

// .KWMsg.PlayerDataPack data_pack = 1;
inline bool AckLoadPlayerData::_internal_has_data_pack() const {
  return this != internal_default_instance() && data_pack_ != nullptr;
}
inline bool AckLoadPlayerData::has_data_pack() const {
  return _internal_has_data_pack();
}
inline void AckLoadPlayerData::clear_data_pack() {
  if (GetArenaForAllocation() == nullptr && data_pack_ != nullptr) {
    delete data_pack_;
  }
  data_pack_ = nullptr;
}
inline const ::KWMsg::PlayerDataPack& AckLoadPlayerData::_internal_data_pack() const {
  const ::KWMsg::PlayerDataPack* p = data_pack_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::PlayerDataPack&>(
      ::KWMsg::_PlayerDataPack_default_instance_);
}
inline const ::KWMsg::PlayerDataPack& AckLoadPlayerData::data_pack() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckLoadPlayerData.data_pack)
  return _internal_data_pack();
}
inline void AckLoadPlayerData::unsafe_arena_set_allocated_data_pack(
    ::KWMsg::PlayerDataPack* data_pack) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_pack_);
  }
  data_pack_ = data_pack;
  if (data_pack) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckLoadPlayerData.data_pack)
}
inline ::KWMsg::PlayerDataPack* AckLoadPlayerData::release_data_pack() {
  
  ::KWMsg::PlayerDataPack* temp = data_pack_;
  data_pack_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::PlayerDataPack* AckLoadPlayerData::unsafe_arena_release_data_pack() {
  // @@protoc_insertion_point(field_release:KWMsg.AckLoadPlayerData.data_pack)
  
  ::KWMsg::PlayerDataPack* temp = data_pack_;
  data_pack_ = nullptr;
  return temp;
}
inline ::KWMsg::PlayerDataPack* AckLoadPlayerData::_internal_mutable_data_pack() {
  
  if (data_pack_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::PlayerDataPack>(GetArenaForAllocation());
    data_pack_ = p;
  }
  return data_pack_;
}
inline ::KWMsg::PlayerDataPack* AckLoadPlayerData::mutable_data_pack() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckLoadPlayerData.data_pack)
  return _internal_mutable_data_pack();
}
inline void AckLoadPlayerData::set_allocated_data_pack(::KWMsg::PlayerDataPack* data_pack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_pack_;
  }
  if (data_pack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::PlayerDataPack>::GetOwningArena(data_pack);
    if (message_arena != submessage_arena) {
      data_pack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data_pack, submessage_arena);
    }
    
  } else {
    
  }
  data_pack_ = data_pack;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckLoadPlayerData.data_pack)
}

// -------------------------------------------------------------------

// PlayerDataPack

// .KWMsg.Ident id = 1;
inline bool PlayerDataPack::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool PlayerDataPack::has_id() const {
  return _internal_has_id();
}
inline const ::KWMsg::Ident& PlayerDataPack::_internal_id() const {
  const ::KWMsg::Ident* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& PlayerDataPack::id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerDataPack.id)
  return _internal_id();
}
inline void PlayerDataPack::unsafe_arena_set_allocated_id(
    ::KWMsg::Ident* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PlayerDataPack.id)
}
inline ::KWMsg::Ident* PlayerDataPack::release_id() {
  
  ::KWMsg::Ident* temp = id_;
  id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* PlayerDataPack::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerDataPack.id)
  
  ::KWMsg::Ident* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* PlayerDataPack::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::KWMsg::Ident* PlayerDataPack::mutable_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerDataPack.id)
  return _internal_mutable_id();
}
inline void PlayerDataPack::set_allocated_id(::KWMsg::Ident* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerDataPack.id)
}

// .KWMsg.ObjectPropertyList property = 2;
inline bool PlayerDataPack::_internal_has_property() const {
  return this != internal_default_instance() && property_ != nullptr;
}
inline bool PlayerDataPack::has_property() const {
  return _internal_has_property();
}
inline const ::KWMsg::ObjectPropertyList& PlayerDataPack::_internal_property() const {
  const ::KWMsg::ObjectPropertyList* p = property_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::ObjectPropertyList&>(
      ::KWMsg::_ObjectPropertyList_default_instance_);
}
inline const ::KWMsg::ObjectPropertyList& PlayerDataPack::property() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerDataPack.property)
  return _internal_property();
}
inline void PlayerDataPack::unsafe_arena_set_allocated_property(
    ::KWMsg::ObjectPropertyList* property) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  property_ = property;
  if (property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PlayerDataPack.property)
}
inline ::KWMsg::ObjectPropertyList* PlayerDataPack::release_property() {
  
  ::KWMsg::ObjectPropertyList* temp = property_;
  property_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::ObjectPropertyList* PlayerDataPack::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerDataPack.property)
  
  ::KWMsg::ObjectPropertyList* temp = property_;
  property_ = nullptr;
  return temp;
}
inline ::KWMsg::ObjectPropertyList* PlayerDataPack::_internal_mutable_property() {
  
  if (property_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::ObjectPropertyList>(GetArenaForAllocation());
    property_ = p;
  }
  return property_;
}
inline ::KWMsg::ObjectPropertyList* PlayerDataPack::mutable_property() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerDataPack.property)
  return _internal_mutable_property();
}
inline void PlayerDataPack::set_allocated_property(::KWMsg::ObjectPropertyList* property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  if (property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property));
    if (message_arena != submessage_arena) {
      property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerDataPack.property)
}

// .KWMsg.ObjectRecordList record = 3;
inline bool PlayerDataPack::_internal_has_record() const {
  return this != internal_default_instance() && record_ != nullptr;
}
inline bool PlayerDataPack::has_record() const {
  return _internal_has_record();
}
inline const ::KWMsg::ObjectRecordList& PlayerDataPack::_internal_record() const {
  const ::KWMsg::ObjectRecordList* p = record_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::ObjectRecordList&>(
      ::KWMsg::_ObjectRecordList_default_instance_);
}
inline const ::KWMsg::ObjectRecordList& PlayerDataPack::record() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerDataPack.record)
  return _internal_record();
}
inline void PlayerDataPack::unsafe_arena_set_allocated_record(
    ::KWMsg::ObjectRecordList* record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_);
  }
  record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PlayerDataPack.record)
}
inline ::KWMsg::ObjectRecordList* PlayerDataPack::release_record() {
  
  ::KWMsg::ObjectRecordList* temp = record_;
  record_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::ObjectRecordList* PlayerDataPack::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerDataPack.record)
  
  ::KWMsg::ObjectRecordList* temp = record_;
  record_ = nullptr;
  return temp;
}
inline ::KWMsg::ObjectRecordList* PlayerDataPack::_internal_mutable_record() {
  
  if (record_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::ObjectRecordList>(GetArenaForAllocation());
    record_ = p;
  }
  return record_;
}
inline ::KWMsg::ObjectRecordList* PlayerDataPack::mutable_record() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerDataPack.record)
  return _internal_mutable_record();
}
inline void PlayerDataPack::set_allocated_record(::KWMsg::ObjectRecordList* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_);
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record));
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    
  } else {
    
  }
  record_ = record;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerDataPack.record)
}

// -------------------------------------------------------------------

// ServerHeartBeat

// int32 count = 1;
inline void ServerHeartBeat::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerHeartBeat::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ServerHeartBeat::count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ServerHeartBeat.count)
  return _internal_count();
}
inline void ServerHeartBeat::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ServerHeartBeat::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ServerHeartBeat.count)
}

// -------------------------------------------------------------------

// PlayerOnlineNotify

// .KWMsg.Ident player_id = 1;
inline bool PlayerOnlineNotify::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool PlayerOnlineNotify::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& PlayerOnlineNotify::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& PlayerOnlineNotify::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerOnlineNotify.player_id)
  return _internal_player_id();
}
inline void PlayerOnlineNotify::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PlayerOnlineNotify.player_id)
}
inline ::KWMsg::Ident* PlayerOnlineNotify::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* PlayerOnlineNotify::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerOnlineNotify.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* PlayerOnlineNotify::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* PlayerOnlineNotify::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerOnlineNotify.player_id)
  return _internal_mutable_player_id();
}
inline void PlayerOnlineNotify::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerOnlineNotify.player_id)
}

// bytes account = 2;
inline void PlayerOnlineNotify::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& PlayerOnlineNotify::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerOnlineNotify.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerOnlineNotify::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerOnlineNotify.account)
}
inline std::string* PlayerOnlineNotify::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerOnlineNotify.account)
  return _internal_mutable_account();
}
inline const std::string& PlayerOnlineNotify::_internal_account() const {
  return account_.Get();
}
inline void PlayerOnlineNotify::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerOnlineNotify::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerOnlineNotify::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerOnlineNotify.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerOnlineNotify::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerOnlineNotify.account)
}

// bytes digital_id = 3;
inline void PlayerOnlineNotify::clear_digital_id() {
  digital_id_.ClearToEmpty();
}
inline const std::string& PlayerOnlineNotify::digital_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerOnlineNotify.digital_id)
  return _internal_digital_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerOnlineNotify::set_digital_id(ArgT0&& arg0, ArgT... args) {
 
 digital_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerOnlineNotify.digital_id)
}
inline std::string* PlayerOnlineNotify::mutable_digital_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerOnlineNotify.digital_id)
  return _internal_mutable_digital_id();
}
inline const std::string& PlayerOnlineNotify::_internal_digital_id() const {
  return digital_id_.Get();
}
inline void PlayerOnlineNotify::_internal_set_digital_id(const std::string& value) {
  
  digital_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerOnlineNotify::_internal_mutable_digital_id() {
  
  return digital_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerOnlineNotify::release_digital_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerOnlineNotify.digital_id)
  return digital_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerOnlineNotify::set_allocated_digital_id(std::string* digital_id) {
  if (digital_id != nullptr) {
    
  } else {
    
  }
  digital_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), digital_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerOnlineNotify.digital_id)
}

// int32 game_id = 4;
inline void PlayerOnlineNotify::clear_game_id() {
  game_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerOnlineNotify::_internal_game_id() const {
  return game_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerOnlineNotify::game_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerOnlineNotify.game_id)
  return _internal_game_id();
}
inline void PlayerOnlineNotify::_internal_set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  game_id_ = value;
}
inline void PlayerOnlineNotify::set_game_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_game_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerOnlineNotify.game_id)
}

// int32 proxy_id = 5;
inline void PlayerOnlineNotify::clear_proxy_id() {
  proxy_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerOnlineNotify::_internal_proxy_id() const {
  return proxy_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerOnlineNotify::proxy_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerOnlineNotify.proxy_id)
  return _internal_proxy_id();
}
inline void PlayerOnlineNotify::_internal_set_proxy_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  proxy_id_ = value;
}
inline void PlayerOnlineNotify::set_proxy_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_proxy_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerOnlineNotify.proxy_id)
}

// .KWMsg.Ident client_id = 6;
inline bool PlayerOnlineNotify::_internal_has_client_id() const {
  return this != internal_default_instance() && client_id_ != nullptr;
}
inline bool PlayerOnlineNotify::has_client_id() const {
  return _internal_has_client_id();
}
inline const ::KWMsg::Ident& PlayerOnlineNotify::_internal_client_id() const {
  const ::KWMsg::Ident* p = client_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& PlayerOnlineNotify::client_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerOnlineNotify.client_id)
  return _internal_client_id();
}
inline void PlayerOnlineNotify::unsafe_arena_set_allocated_client_id(
    ::KWMsg::Ident* client_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id_);
  }
  client_id_ = client_id;
  if (client_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PlayerOnlineNotify.client_id)
}
inline ::KWMsg::Ident* PlayerOnlineNotify::release_client_id() {
  
  ::KWMsg::Ident* temp = client_id_;
  client_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* PlayerOnlineNotify::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerOnlineNotify.client_id)
  
  ::KWMsg::Ident* temp = client_id_;
  client_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* PlayerOnlineNotify::_internal_mutable_client_id() {
  
  if (client_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    client_id_ = p;
  }
  return client_id_;
}
inline ::KWMsg::Ident* PlayerOnlineNotify::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerOnlineNotify.client_id)
  return _internal_mutable_client_id();
}
inline void PlayerOnlineNotify::set_allocated_client_id(::KWMsg::Ident* client_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id_);
  }
  if (client_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id));
    if (message_arena != submessage_arena) {
      client_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_id, submessage_arena);
    }
    
  } else {
    
  }
  client_id_ = client_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerOnlineNotify.client_id)
}

// -------------------------------------------------------------------

// PlayerOfflineNotify

// bytes account = 1;
inline void PlayerOfflineNotify::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& PlayerOfflineNotify::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerOfflineNotify.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerOfflineNotify::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerOfflineNotify.account)
}
inline std::string* PlayerOfflineNotify::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerOfflineNotify.account)
  return _internal_mutable_account();
}
inline const std::string& PlayerOfflineNotify::_internal_account() const {
  return account_.Get();
}
inline void PlayerOfflineNotify::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerOfflineNotify::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerOfflineNotify::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerOfflineNotify.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerOfflineNotify::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerOfflineNotify.account)
}

// -------------------------------------------------------------------

// ReqAckSetGameServerState

// .KWMsg.EServerState server_state = 1;
inline void ReqAckSetGameServerState::clear_server_state() {
  server_state_ = 0;
}
inline ::KWMsg::EServerState ReqAckSetGameServerState::_internal_server_state() const {
  return static_cast< ::KWMsg::EServerState >(server_state_);
}
inline ::KWMsg::EServerState ReqAckSetGameServerState::server_state() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckSetGameServerState.server_state)
  return _internal_server_state();
}
inline void ReqAckSetGameServerState::_internal_set_server_state(::KWMsg::EServerState value) {
  
  server_state_ = value;
}
inline void ReqAckSetGameServerState::set_server_state(::KWMsg::EServerState value) {
  _internal_set_server_state(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckSetGameServerState.server_state)
}

// int32 kick_off_all = 2;
inline void ReqAckSetGameServerState::clear_kick_off_all() {
  kick_off_all_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckSetGameServerState::_internal_kick_off_all() const {
  return kick_off_all_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckSetGameServerState::kick_off_all() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckSetGameServerState.kick_off_all)
  return _internal_kick_off_all();
}
inline void ReqAckSetGameServerState::_internal_set_kick_off_all(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  kick_off_all_ = value;
}
inline void ReqAckSetGameServerState::set_kick_off_all(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_kick_off_all(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckSetGameServerState.kick_off_all)
}

// -------------------------------------------------------------------

// ReqAckRefreshConfig

// int64 ts = 1;
inline void ReqAckRefreshConfig::clear_ts() {
  ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqAckRefreshConfig::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqAckRefreshConfig::ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckRefreshConfig.ts)
  return _internal_ts();
}
inline void ReqAckRefreshConfig::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void ReqAckRefreshConfig::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckRefreshConfig.ts)
}

// -------------------------------------------------------------------

// ReqReconnect

// .KWMsg.Ident player_id = 1;
inline bool ReqReconnect::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqReconnect::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqReconnect::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqReconnect::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqReconnect.player_id)
  return _internal_player_id();
}
inline void ReqReconnect::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqReconnect.player_id)
}
inline ::KWMsg::Ident* ReqReconnect::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqReconnect::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqReconnect.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqReconnect::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqReconnect::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqReconnect.player_id)
  return _internal_mutable_player_id();
}
inline void ReqReconnect::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqReconnect.player_id)
}

// .KWMsg.Ident client_id = 2;
inline bool ReqReconnect::_internal_has_client_id() const {
  return this != internal_default_instance() && client_id_ != nullptr;
}
inline bool ReqReconnect::has_client_id() const {
  return _internal_has_client_id();
}
inline const ::KWMsg::Ident& ReqReconnect::_internal_client_id() const {
  const ::KWMsg::Ident* p = client_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqReconnect::client_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqReconnect.client_id)
  return _internal_client_id();
}
inline void ReqReconnect::unsafe_arena_set_allocated_client_id(
    ::KWMsg::Ident* client_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id_);
  }
  client_id_ = client_id;
  if (client_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqReconnect.client_id)
}
inline ::KWMsg::Ident* ReqReconnect::release_client_id() {
  
  ::KWMsg::Ident* temp = client_id_;
  client_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqReconnect::unsafe_arena_release_client_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqReconnect.client_id)
  
  ::KWMsg::Ident* temp = client_id_;
  client_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqReconnect::_internal_mutable_client_id() {
  
  if (client_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    client_id_ = p;
  }
  return client_id_;
}
inline ::KWMsg::Ident* ReqReconnect::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqReconnect.client_id)
  return _internal_mutable_client_id();
}
inline void ReqReconnect::set_allocated_client_id(::KWMsg::Ident* client_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id_);
  }
  if (client_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_id));
    if (message_arena != submessage_arena) {
      client_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_id, submessage_arena);
    }
    
  } else {
    
  }
  client_id_ = client_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqReconnect.client_id)
}

// bytes token = 3;
inline void ReqReconnect::clear_token() {
  token_.ClearToEmpty();
}
inline const std::string& ReqReconnect::token() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqReconnect.token)
  return _internal_token();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqReconnect::set_token(ArgT0&& arg0, ArgT... args) {
 
 token_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqReconnect.token)
}
inline std::string* ReqReconnect::mutable_token() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqReconnect.token)
  return _internal_mutable_token();
}
inline const std::string& ReqReconnect::_internal_token() const {
  return token_.Get();
}
inline void ReqReconnect::_internal_set_token(const std::string& value) {
  
  token_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqReconnect::_internal_mutable_token() {
  
  return token_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqReconnect::release_token() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqReconnect.token)
  return token_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqReconnect::set_allocated_token(std::string* token) {
  if (token != nullptr) {
    
  } else {
    
  }
  token_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), token,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqReconnect.token)
}

// int32 battle_seq_id = 4;
inline void ReqReconnect::clear_battle_seq_id() {
  battle_seq_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqReconnect::_internal_battle_seq_id() const {
  return battle_seq_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqReconnect::battle_seq_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqReconnect.battle_seq_id)
  return _internal_battle_seq_id();
}
inline void ReqReconnect::_internal_set_battle_seq_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  battle_seq_id_ = value;
}
inline void ReqReconnect::set_battle_seq_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_battle_seq_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqReconnect.battle_seq_id)
}

// -------------------------------------------------------------------

// ReqRecord

// .KWMsg.Ident player_id = 1;
inline bool ReqRecord::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqRecord::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqRecord::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqRecord::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRecord.player_id)
  return _internal_player_id();
}
inline void ReqRecord::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqRecord.player_id)
}
inline ::KWMsg::Ident* ReqRecord::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqRecord::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqRecord.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqRecord::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqRecord::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqRecord.player_id)
  return _internal_mutable_player_id();
}
inline void ReqRecord::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqRecord.player_id)
}

// .KWMsg.ReqRecord.EAskRecordType req_type = 2;
inline void ReqRecord::clear_req_type() {
  req_type_ = 0;
}
inline ::KWMsg::ReqRecord_EAskRecordType ReqRecord::_internal_req_type() const {
  return static_cast< ::KWMsg::ReqRecord_EAskRecordType >(req_type_);
}
inline ::KWMsg::ReqRecord_EAskRecordType ReqRecord::req_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRecord.req_type)
  return _internal_req_type();
}
inline void ReqRecord::_internal_set_req_type(::KWMsg::ReqRecord_EAskRecordType value) {
  
  req_type_ = value;
}
inline void ReqRecord::set_req_type(::KWMsg::ReqRecord_EAskRecordType value) {
  _internal_set_req_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqRecord.req_type)
}

// bytes record_name = 3;
inline void ReqRecord::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ReqRecord::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRecord.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqRecord::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqRecord.record_name)
}
inline std::string* ReqRecord::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqRecord.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& ReqRecord::_internal_record_name() const {
  return record_name_.Get();
}
inline void ReqRecord::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqRecord::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqRecord::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqRecord.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqRecord::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqRecord.record_name)
}

// int32 cursor = 4;
inline void ReqRecord::clear_cursor() {
  cursor_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqRecord::_internal_cursor() const {
  return cursor_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqRecord::cursor() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRecord.cursor)
  return _internal_cursor();
}
inline void ReqRecord::_internal_set_cursor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cursor_ = value;
}
inline void ReqRecord::set_cursor(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cursor(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqRecord.cursor)
}

// int32 count = 5;
inline void ReqRecord::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqRecord::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqRecord::count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRecord.count)
  return _internal_count();
}
inline void ReqRecord::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ReqRecord::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqRecord.count)
}

// -------------------------------------------------------------------

// SyncQueueupRegStatus

// int32 target_server_id = 1;
inline void SyncQueueupRegStatus::clear_target_server_id() {
  target_server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncQueueupRegStatus::_internal_target_server_id() const {
  return target_server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncQueueupRegStatus::target_server_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncQueueupRegStatus.target_server_id)
  return _internal_target_server_id();
}
inline void SyncQueueupRegStatus::_internal_set_target_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_server_id_ = value;
}
inline void SyncQueueupRegStatus::set_target_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target_server_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncQueueupRegStatus.target_server_id)
}

// int32 is_registered = 2;
inline void SyncQueueupRegStatus::clear_is_registered() {
  is_registered_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncQueueupRegStatus::_internal_is_registered() const {
  return is_registered_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncQueueupRegStatus::is_registered() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncQueueupRegStatus.is_registered)
  return _internal_is_registered();
}
inline void SyncQueueupRegStatus::_internal_set_is_registered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_registered_ = value;
}
inline void SyncQueueupRegStatus::set_is_registered(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_registered(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncQueueupRegStatus.is_registered)
}

// int32 keep_online_status = 3;
inline void SyncQueueupRegStatus::clear_keep_online_status() {
  keep_online_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncQueueupRegStatus::_internal_keep_online_status() const {
  return keep_online_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncQueueupRegStatus::keep_online_status() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncQueueupRegStatus.keep_online_status)
  return _internal_keep_online_status();
}
inline void SyncQueueupRegStatus::_internal_set_keep_online_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keep_online_status_ = value;
}
inline void SyncQueueupRegStatus::set_keep_online_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keep_online_status(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncQueueupRegStatus.keep_online_status)
}

// int32 keep_online_sec = 4;
inline void SyncQueueupRegStatus::clear_keep_online_sec() {
  keep_online_sec_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncQueueupRegStatus::_internal_keep_online_sec() const {
  return keep_online_sec_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncQueueupRegStatus::keep_online_sec() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncQueueupRegStatus.keep_online_sec)
  return _internal_keep_online_sec();
}
inline void SyncQueueupRegStatus::_internal_set_keep_online_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  keep_online_sec_ = value;
}
inline void SyncQueueupRegStatus::set_keep_online_sec(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_keep_online_sec(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncQueueupRegStatus.keep_online_sec)
}

// -------------------------------------------------------------------

// SyncWorldState

// int32 role_num = 1;
inline void SyncWorldState::clear_role_num() {
  role_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncWorldState::_internal_role_num() const {
  return role_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncWorldState::role_num() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncWorldState.role_num)
  return _internal_role_num();
}
inline void SyncWorldState::_internal_set_role_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  role_num_ = value;
}
inline void SyncWorldState::set_role_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_role_num(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncWorldState.role_num)
}

// -------------------------------------------------------------------

// ReqRegister

// bytes account = 1;
inline void ReqRegister::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqRegister::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRegister.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqRegister::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqRegister.account)
}
inline std::string* ReqRegister::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqRegister.account)
  return _internal_mutable_account();
}
inline const std::string& ReqRegister::_internal_account() const {
  return account_.Get();
}
inline void ReqRegister::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqRegister::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqRegister::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqRegister.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqRegister::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqRegister.account)
}

// bytes name = 2;
inline void ReqRegister::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ReqRegister::name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRegister.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqRegister::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqRegister.name)
}
inline std::string* ReqRegister::mutable_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqRegister.name)
  return _internal_mutable_name();
}
inline const std::string& ReqRegister::_internal_name() const {
  return name_.Get();
}
inline void ReqRegister::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqRegister::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqRegister::release_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqRegister.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqRegister::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqRegister.name)
}

// bytes password = 3;
inline void ReqRegister::clear_password() {
  password_.ClearToEmpty();
}
inline const std::string& ReqRegister::password() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRegister.password)
  return _internal_password();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqRegister::set_password(ArgT0&& arg0, ArgT... args) {
 
 password_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqRegister.password)
}
inline std::string* ReqRegister::mutable_password() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqRegister.password)
  return _internal_mutable_password();
}
inline const std::string& ReqRegister::_internal_password() const {
  return password_.Get();
}
inline void ReqRegister::_internal_set_password(const std::string& value) {
  
  password_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqRegister::_internal_mutable_password() {
  
  return password_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqRegister::release_password() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqRegister.password)
  return password_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqRegister::set_allocated_password(std::string* password) {
  if (password != nullptr) {
    
  } else {
    
  }
  password_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), password,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqRegister.password)
}

// -------------------------------------------------------------------

// AckRegister

// .KWMsg.EGameEventCode event_code = 1;
inline void AckRegister::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckRegister::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckRegister::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckRegister.event_code)
  return _internal_event_code();
}
inline void AckRegister::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckRegister::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckRegister.event_code)
}

// bytes account = 2;
inline void AckRegister::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& AckRegister::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckRegister.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckRegister::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckRegister.account)
}
inline std::string* AckRegister::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckRegister.account)
  return _internal_mutable_account();
}
inline const std::string& AckRegister::_internal_account() const {
  return account_.Get();
}
inline void AckRegister::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckRegister::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckRegister::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.AckRegister.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckRegister::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckRegister.account)
}

// bytes name = 3;
inline void AckRegister::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AckRegister::name() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckRegister.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckRegister::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckRegister.name)
}
inline std::string* AckRegister::mutable_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckRegister.name)
  return _internal_mutable_name();
}
inline const std::string& AckRegister::_internal_name() const {
  return name_.Get();
}
inline void AckRegister::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckRegister::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckRegister::release_name() {
  // @@protoc_insertion_point(field_release:KWMsg.AckRegister.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckRegister::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckRegister.name)
}

// -------------------------------------------------------------------

// AckWorldPlayerHasRole

// bool has_role = 1;
inline void AckWorldPlayerHasRole::clear_has_role() {
  has_role_ = false;
}
inline bool AckWorldPlayerHasRole::_internal_has_role() const {
  return has_role_;
}
inline bool AckWorldPlayerHasRole::has_role() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckWorldPlayerHasRole.has_role)
  return _internal_has_role();
}
inline void AckWorldPlayerHasRole::_internal_set_has_role(bool value) {
  
  has_role_ = value;
}
inline void AckWorldPlayerHasRole::set_has_role(bool value) {
  _internal_set_has_role(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckWorldPlayerHasRole.has_role)
}

// -------------------------------------------------------------------

// SyncQueueUpCount

// int32 queue_up_count = 1;
inline void SyncQueueUpCount::clear_queue_up_count() {
  queue_up_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncQueueUpCount::_internal_queue_up_count() const {
  return queue_up_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncQueueUpCount::queue_up_count() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncQueueUpCount.queue_up_count)
  return _internal_queue_up_count();
}
inline void SyncQueueUpCount::_internal_set_queue_up_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  queue_up_count_ = value;
}
inline void SyncQueueUpCount::set_queue_up_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_queue_up_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncQueueUpCount.queue_up_count)
}

// -------------------------------------------------------------------

// SyncWorldInfoToGame

// int32 open_time = 1;
inline void SyncWorldInfoToGame::clear_open_time() {
  open_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncWorldInfoToGame::_internal_open_time() const {
  return open_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncWorldInfoToGame::open_time() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncWorldInfoToGame.open_time)
  return _internal_open_time();
}
inline void SyncWorldInfoToGame::_internal_set_open_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  open_time_ = value;
}
inline void SyncWorldInfoToGame::set_open_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_open_time(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncWorldInfoToGame.open_time)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KWMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KWMsg::ReqRecord_EAskRecordType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::ReqRecord_EAskRecordType>() {
  return ::KWMsg::ReqRecord_EAskRecordType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::EServerState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EServerState>() {
  return ::KWMsg::EServerState_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::EServerShowState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EServerShowState>() {
  return ::KWMsg::EServerShowState_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kwmsgpregame_2eproto
