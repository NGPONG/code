// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kwmsgshare.proto

#include "kwmsgshare.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace KWMsg {
constexpr ReqAckLagTest::ReqAckLagTest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ReqAckLagTestDefaultTypeInternal {
  constexpr ReqAckLagTestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAckLagTestDefaultTypeInternal() {}
  union {
    ReqAckLagTest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAckLagTestDefaultTypeInternal _ReqAckLagTest_default_instance_;
constexpr ReqAckHeartBeat::ReqAckHeartBeat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ReqAckHeartBeatDefaultTypeInternal {
  constexpr ReqAckHeartBeatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAckHeartBeatDefaultTypeInternal() {}
  union {
    ReqAckHeartBeat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAckHeartBeatDefaultTypeInternal _ReqAckHeartBeat_default_instance_;
constexpr ReqLeaveGameServer::ReqLeaveGameServer(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqLeaveGameServerDefaultTypeInternal {
  constexpr ReqLeaveGameServerDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqLeaveGameServerDefaultTypeInternal() {}
  union {
    ReqLeaveGameServer _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqLeaveGameServerDefaultTypeInternal _ReqLeaveGameServer_default_instance_;
constexpr PlayerEntryInfo::PlayerEntryInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : config_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , class_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , object_guid_(nullptr)
  , pos_(nullptr)
  , scene_id_(0){}
struct PlayerEntryInfoDefaultTypeInternal {
  constexpr PlayerEntryInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PlayerEntryInfoDefaultTypeInternal() {}
  union {
    PlayerEntryInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PlayerEntryInfoDefaultTypeInternal _PlayerEntryInfo_default_instance_;
constexpr AckPlayerEntryList::AckPlayerEntryList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_list_(){}
struct AckPlayerEntryListDefaultTypeInternal {
  constexpr AckPlayerEntryListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckPlayerEntryListDefaultTypeInternal() {}
  union {
    AckPlayerEntryList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckPlayerEntryListDefaultTypeInternal _AckPlayerEntryList_default_instance_;
constexpr AckPlayerLeaveList::AckPlayerLeaveList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_list_(){}
struct AckPlayerLeaveListDefaultTypeInternal {
  constexpr AckPlayerLeaveListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckPlayerLeaveListDefaultTypeInternal() {}
  union {
    AckPlayerLeaveList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckPlayerLeaveListDefaultTypeInternal _AckPlayerLeaveList_default_instance_;
constexpr AckPlayerDataFinished::AckPlayerDataFinished(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : object_list_(){}
struct AckPlayerDataFinishedDefaultTypeInternal {
  constexpr AckPlayerDataFinishedDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckPlayerDataFinishedDefaultTypeInternal() {}
  union {
    AckPlayerDataFinished _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckPlayerDataFinishedDefaultTypeInternal _AckPlayerDataFinished_default_instance_;
constexpr PosSyncUnit::PosSyncUnit(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , pos_(nullptr)
  , orientation_(nullptr)
  , status_(0)
  , type_(0)
{}
struct PosSyncUnitDefaultTypeInternal {
  constexpr PosSyncUnitDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PosSyncUnitDefaultTypeInternal() {}
  union {
    PosSyncUnit _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PosSyncUnitDefaultTypeInternal _PosSyncUnit_default_instance_;
constexpr ReqAckPlayerPosSync::ReqAckPlayerPosSync(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sync_unit_(nullptr)
  , sequence_(0){}
struct ReqAckPlayerPosSyncDefaultTypeInternal {
  constexpr ReqAckPlayerPosSyncDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAckPlayerPosSyncDefaultTypeInternal() {}
  union {
    ReqAckPlayerPosSync _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAckPlayerPosSyncDefaultTypeInternal _ReqAckPlayerPosSync_default_instance_;
constexpr ReqSwapScene::ReqSwapScene(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , scene_id_(0){}
struct ReqSwapSceneDefaultTypeInternal {
  constexpr ReqSwapSceneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqSwapSceneDefaultTypeInternal() {}
  union {
    ReqSwapScene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqSwapSceneDefaultTypeInternal _ReqSwapScene_default_instance_;
constexpr AckSwapScene::AckSwapScene(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : args_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , scene_id_(0){}
struct AckSwapSceneDefaultTypeInternal {
  constexpr AckSwapSceneDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckSwapSceneDefaultTypeInternal() {}
  union {
    AckSwapScene _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckSwapSceneDefaultTypeInternal _AckSwapScene_default_instance_;
constexpr ReqAckPlayerChat::ReqAckPlayerChat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : nickname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , avatar_frame_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chat_info_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , chat_channel_(0)

  , chat_type_(0)
{}
struct ReqAckPlayerChatDefaultTypeInternal {
  constexpr ReqAckPlayerChatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqAckPlayerChatDefaultTypeInternal() {}
  union {
    ReqAckPlayerChat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqAckPlayerChatDefaultTypeInternal _ReqAckPlayerChat_default_instance_;
constexpr ReqCreateKcpObject::ReqCreateKcpObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqCreateKcpObjectDefaultTypeInternal {
  constexpr ReqCreateKcpObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCreateKcpObjectDefaultTypeInternal() {}
  union {
    ReqCreateKcpObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCreateKcpObjectDefaultTypeInternal _ReqCreateKcpObject_default_instance_;
constexpr AckCreateKcpObject::AckCreateKcpObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : server_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , server_port_(0)
  , conv_(0u){}
struct AckCreateKcpObjectDefaultTypeInternal {
  constexpr AckCreateKcpObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCreateKcpObjectDefaultTypeInternal() {}
  union {
    AckCreateKcpObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCreateKcpObjectDefaultTypeInternal _AckCreateKcpObject_default_instance_;
constexpr ReqEstablishKcpConnection::ReqEstablishKcpConnection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr){}
struct ReqEstablishKcpConnectionDefaultTypeInternal {
  constexpr ReqEstablishKcpConnectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqEstablishKcpConnectionDefaultTypeInternal() {}
  union {
    ReqEstablishKcpConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqEstablishKcpConnectionDefaultTypeInternal _ReqEstablishKcpConnection_default_instance_;
constexpr AckEstablishKcpConnection::AckEstablishKcpConnection(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckEstablishKcpConnectionDefaultTypeInternal {
  constexpr AckEstablishKcpConnectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckEstablishKcpConnectionDefaultTypeInternal() {}
  union {
    AckEstablishKcpConnection _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckEstablishKcpConnectionDefaultTypeInternal _AckEstablishKcpConnection_default_instance_;
constexpr ReqTryPushClientIntoQueueUp::ReqTryPushClientIntoQueueUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(nullptr)
  , world_id_(0)
  , login_id_(0){}
struct ReqTryPushClientIntoQueueUpDefaultTypeInternal {
  constexpr ReqTryPushClientIntoQueueUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqTryPushClientIntoQueueUpDefaultTypeInternal() {}
  union {
    ReqTryPushClientIntoQueueUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqTryPushClientIntoQueueUpDefaultTypeInternal _ReqTryPushClientIntoQueueUp_default_instance_;
constexpr AckPushClientIntoQueueUp::AckPushClientIntoQueueUp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sender_(nullptr)
  , event_code_(0)

  , world_id_(0)
  , login_id_(0){}
struct AckPushClientIntoQueueUpDefaultTypeInternal {
  constexpr AckPushClientIntoQueueUpDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckPushClientIntoQueueUpDefaultTypeInternal() {}
  union {
    AckPushClientIntoQueueUp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckPushClientIntoQueueUpDefaultTypeInternal _AckPushClientIntoQueueUp_default_instance_;
constexpr ReqQueueUpGetCurWorldSuitProxy::ReqQueueUpGetCurWorldSuitProxy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transpond_id_(nullptr){}
struct ReqQueueUpGetCurWorldSuitProxyDefaultTypeInternal {
  constexpr ReqQueueUpGetCurWorldSuitProxyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqQueueUpGetCurWorldSuitProxyDefaultTypeInternal() {}
  union {
    ReqQueueUpGetCurWorldSuitProxy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqQueueUpGetCurWorldSuitProxyDefaultTypeInternal _ReqQueueUpGetCurWorldSuitProxy_default_instance_;
constexpr AckQueueUpGetCurWorldSuitProxy::AckQueueUpGetCurWorldSuitProxy(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : ticket_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , world_ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , transpond_id_(nullptr)
  , world_port_(0){}
struct AckQueueUpGetCurWorldSuitProxyDefaultTypeInternal {
  constexpr AckQueueUpGetCurWorldSuitProxyDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckQueueUpGetCurWorldSuitProxyDefaultTypeInternal() {}
  union {
    AckQueueUpGetCurWorldSuitProxy _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckQueueUpGetCurWorldSuitProxyDefaultTypeInternal _AckQueueUpGetCurWorldSuitProxy_default_instance_;
constexpr ReqUpdatePlayerLastHeartbeatTS::ReqUpdatePlayerLastHeartbeatTS(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : account_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ts_(int64_t{0}){}
struct ReqUpdatePlayerLastHeartbeatTSDefaultTypeInternal {
  constexpr ReqUpdatePlayerLastHeartbeatTSDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqUpdatePlayerLastHeartbeatTSDefaultTypeInternal() {}
  union {
    ReqUpdatePlayerLastHeartbeatTS _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqUpdatePlayerLastHeartbeatTSDefaultTypeInternal _ReqUpdatePlayerLastHeartbeatTS_default_instance_;
constexpr ReqTestBattle::ReqTestBattle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : battle_list_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqTestBattleDefaultTypeInternal {
  constexpr ReqTestBattleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqTestBattleDefaultTypeInternal() {}
  union {
    ReqTestBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqTestBattleDefaultTypeInternal _ReqTestBattle_default_instance_;
constexpr AckTestBattle::AckTestBattle(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : battle_list_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , team_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)
{}
struct AckTestBattleDefaultTypeInternal {
  constexpr AckTestBattleDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckTestBattleDefaultTypeInternal() {}
  union {
    AckTestBattle _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckTestBattleDefaultTypeInternal _AckTestBattle_default_instance_;
constexpr ReqCollectWitch::ReqCollectWitch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ReqCollectWitchDefaultTypeInternal {
  constexpr ReqCollectWitchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqCollectWitchDefaultTypeInternal() {}
  union {
    ReqCollectWitch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqCollectWitchDefaultTypeInternal _ReqCollectWitch_default_instance_;
constexpr AckCollectWitch::AckCollectWitch(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : witch_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , event_code_(0)

  , is_collect_(0){}
struct AckCollectWitchDefaultTypeInternal {
  constexpr AckCollectWitchDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckCollectWitchDefaultTypeInternal() {}
  union {
    AckCollectWitch _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckCollectWitchDefaultTypeInternal _AckCollectWitch_default_instance_;
constexpr ReqInitMainRoleName::ReqInitMainRoleName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , is_random_name_(0){}
struct ReqInitMainRoleNameDefaultTypeInternal {
  constexpr ReqInitMainRoleNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ReqInitMainRoleNameDefaultTypeInternal() {}
  union {
    ReqInitMainRoleName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ReqInitMainRoleNameDefaultTypeInternal _ReqInitMainRoleName_default_instance_;
constexpr AckInitMainRoleName::AckInitMainRoleName(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : event_code_(0)
{}
struct AckInitMainRoleNameDefaultTypeInternal {
  constexpr AckInitMainRoleNameDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckInitMainRoleNameDefaultTypeInternal() {}
  union {
    AckInitMainRoleName _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckInitMainRoleNameDefaultTypeInternal _AckInitMainRoleName_default_instance_;
}  // namespace KWMsg
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kwmsgshare_2eproto[27];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kwmsgshare_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kwmsgshare_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kwmsgshare_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckLagTest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckHeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLeaveGameServer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqLeaveGameServer, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerEntryInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerEntryInfo, object_guid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerEntryInfo, pos_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerEntryInfo, config_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerEntryInfo, scene_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PlayerEntryInfo, class_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPlayerEntryList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPlayerEntryList, object_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPlayerLeaveList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPlayerLeaveList, object_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPlayerDataFinished, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPlayerDataFinished, object_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PosSyncUnit, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PosSyncUnit, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PosSyncUnit, pos_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PosSyncUnit, orientation_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PosSyncUnit, status_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PosSyncUnit, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerPosSync, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerPosSync, sequence_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerPosSync, sync_unit_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSwapScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSwapScene, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSwapScene, scene_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqSwapScene, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwapScene, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwapScene, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwapScene, scene_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckSwapScene, args_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, nickname_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, avatar_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, avatar_frame_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, chat_channel_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, chat_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqAckPlayerChat, chat_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateKcpObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCreateKcpObject, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateKcpObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateKcpObject, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateKcpObject, server_ip_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateKcpObject, server_port_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCreateKcpObject, conv_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEstablishKcpConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqEstablishKcpConnection, player_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEstablishKcpConnection, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckEstablishKcpConnection, event_code_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTryPushClientIntoQueueUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTryPushClientIntoQueueUp, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTryPushClientIntoQueueUp, world_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTryPushClientIntoQueueUp, login_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTryPushClientIntoQueueUp, sender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, ticket_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, world_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, login_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckPushClientIntoQueueUp, sender_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQueueUpGetCurWorldSuitProxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQueueUpGetCurWorldSuitProxy, ticket_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqQueueUpGetCurWorldSuitProxy, transpond_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQueueUpGetCurWorldSuitProxy, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQueueUpGetCurWorldSuitProxy, ticket_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQueueUpGetCurWorldSuitProxy, transpond_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQueueUpGetCurWorldSuitProxy, world_ip_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckQueueUpGetCurWorldSuitProxy, world_port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePlayerLastHeartbeatTS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePlayerLastHeartbeatTS, account_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqUpdatePlayerLastHeartbeatTS, ts_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestBattle, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestBattle, battle_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqTestBattle, team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTestBattle, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTestBattle, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTestBattle, battle_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckTestBattle, team_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollectWitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollectWitch, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqCollectWitch, witch_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollectWitch, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollectWitch, event_code_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollectWitch, witch_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckCollectWitch, is_collect_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqInitMainRoleName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqInitMainRoleName, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqInitMainRoleName, name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ReqInitMainRoleName, is_random_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckInitMainRoleName, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::AckInitMainRoleName, event_code_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::KWMsg::ReqAckLagTest)},
  { 5, -1, sizeof(::KWMsg::ReqAckHeartBeat)},
  { 10, -1, sizeof(::KWMsg::ReqLeaveGameServer)},
  { 16, -1, sizeof(::KWMsg::PlayerEntryInfo)},
  { 26, -1, sizeof(::KWMsg::AckPlayerEntryList)},
  { 32, -1, sizeof(::KWMsg::AckPlayerLeaveList)},
  { 38, -1, sizeof(::KWMsg::AckPlayerDataFinished)},
  { 44, -1, sizeof(::KWMsg::PosSyncUnit)},
  { 54, -1, sizeof(::KWMsg::ReqAckPlayerPosSync)},
  { 61, -1, sizeof(::KWMsg::ReqSwapScene)},
  { 69, -1, sizeof(::KWMsg::AckSwapScene)},
  { 77, -1, sizeof(::KWMsg::ReqAckPlayerChat)},
  { 89, -1, sizeof(::KWMsg::ReqCreateKcpObject)},
  { 95, -1, sizeof(::KWMsg::AckCreateKcpObject)},
  { 104, -1, sizeof(::KWMsg::ReqEstablishKcpConnection)},
  { 110, -1, sizeof(::KWMsg::AckEstablishKcpConnection)},
  { 116, -1, sizeof(::KWMsg::ReqTryPushClientIntoQueueUp)},
  { 125, -1, sizeof(::KWMsg::AckPushClientIntoQueueUp)},
  { 136, -1, sizeof(::KWMsg::ReqQueueUpGetCurWorldSuitProxy)},
  { 143, -1, sizeof(::KWMsg::AckQueueUpGetCurWorldSuitProxy)},
  { 152, -1, sizeof(::KWMsg::ReqUpdatePlayerLastHeartbeatTS)},
  { 159, -1, sizeof(::KWMsg::ReqTestBattle)},
  { 167, -1, sizeof(::KWMsg::AckTestBattle)},
  { 175, -1, sizeof(::KWMsg::ReqCollectWitch)},
  { 182, -1, sizeof(::KWMsg::AckCollectWitch)},
  { 190, -1, sizeof(::KWMsg::ReqInitMainRoleName)},
  { 198, -1, sizeof(::KWMsg::AckInitMainRoleName)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAckLagTest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAckHeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqLeaveGameServer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PlayerEntryInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckPlayerEntryList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckPlayerLeaveList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckPlayerDataFinished_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PosSyncUnit_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAckPlayerPosSync_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqSwapScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckSwapScene_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqAckPlayerChat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCreateKcpObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCreateKcpObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqEstablishKcpConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckEstablishKcpConnection_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqTryPushClientIntoQueueUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckPushClientIntoQueueUp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqQueueUpGetCurWorldSuitProxy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckQueueUpGetCurWorldSuitProxy_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqUpdatePlayerLastHeartbeatTS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqTestBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckTestBattle_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqCollectWitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckCollectWitch_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ReqInitMainRoleName_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_AckInitMainRoleName_default_instance_),
};

const char descriptor_table_protodef_kwmsgshare_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\020kwmsgshare.proto\022\005KWMsg\032\021kwmsgdefine.p"
  "roto\032\017kwmsgbase.proto\"\017\n\rReqAckLagTest\"\021"
  "\n\017ReqAckHeartBeat\"5\n\022ReqLeaveGameServer\022"
  "\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\"\210\001\n\017Pla"
  "yerEntryInfo\022!\n\013object_guid\030\001 \001(\0132\014.KWMs"
  "g.Ident\022\033\n\003pos\030\002 \001(\0132\016.KWMsg.Vector3\022\021\n\t"
  "config_id\030\003 \001(\014\022\020\n\010scene_id\030\004 \001(\005\022\020\n\010cla"
  "ss_id\030\005 \001(\014\"A\n\022AckPlayerEntryList\022+\n\013obj"
  "ect_list\030\001 \003(\0132\026.KWMsg.PlayerEntryInfo\"7"
  "\n\022AckPlayerLeaveList\022!\n\013object_list\030\001 \003("
  "\0132\014.KWMsg.Ident\":\n\025AckPlayerDataFinished"
  "\022!\n\013object_list\030\001 \003(\0132\014.KWMsg.Ident\"\351\001\n\013"
  "PosSyncUnit\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.I"
  "dent\022\033\n\003pos\030\002 \001(\0132\016.KWMsg.Vector3\022#\n\013ori"
  "entation\030\003 \001(\0132\016.KWMsg.Vector3\022\016\n\006status"
  "\030\004 \001(\005\022*\n\004type\030\005 \001(\0162\034.KWMsg.PosSyncUnit"
  ".EMoveType\";\n\tEMoveType\022\014\n\010EMT_WALK\020\000\022\016\n"
  "\nEET_SPEEDY\020\001\022\020\n\014EET_TELEPORT\020\002\"N\n\023ReqAc"
  "kPlayerPosSync\022\020\n\010sequence\030\001 \001(\005\022%\n\tsync"
  "_unit\030\002 \001(\0132\022.KWMsg.PosSyncUnit\"O\n\014ReqSw"
  "apScene\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident"
  "\022\020\n\010scene_id\030\002 \001(\005\022\014\n\004args\030\003 \001(\014\"Y\n\014AckS"
  "wapScene\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGa"
  "meEventCode\022\020\n\010scene_id\030\002 \001(\005\022\014\n\004args\030\003 "
  "\001(\014\"\213\003\n\020ReqAckPlayerChat\022\037\n\tplayer_id\030\001 "
  "\001(\0132\014.KWMsg.Ident\022\020\n\010nickname\030\002 \001(\014\022\016\n\006a"
  "vatar\030\003 \001(\014\022\024\n\014avatar_frame\030\004 \001(\014\022>\n\014cha"
  "t_channel\030\005 \001(\0162(.KWMsg.ReqAckPlayerChat"
  ".EGameChatChannel\0228\n\tchat_type\030\006 \001(\0162%.K"
  "WMsg.ReqAckPlayerChat.EGameChatType\022\021\n\tc"
  "hat_info\030\007 \001(\014\"Q\n\020EGameChatChannel\022\017\n\013EG"
  "CC_GLOBAL\020\000\022\016\n\nEGCC_GUILD\020\001\022\r\n\tEGCC_ROOM"
  "\020\002\022\r\n\tEGCC_TEAM\020\003\">\n\rEGameChatType\022\r\n\tEG"
  "CT_TEXT\020\000\022\016\n\nEGCT_VOICE\020\001\022\016\n\nEGCT_EMOJI\020"
  "\002\"5\n\022ReqCreateKcpObject\022\037\n\tplayer_id\030\001 \001"
  "(\0132\014.KWMsg.Ident\"u\n\022AckCreateKcpObject\022)"
  "\n\nevent_code\030\001 \001(\0162\025.KWMsg.EGameEventCod"
  "e\022\021\n\tserver_ip\030\002 \001(\014\022\023\n\013server_port\030\003 \001("
  "\005\022\014\n\004conv\030\004 \001(\r\"<\n\031ReqEstablishKcpConnec"
  "tion\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\"F\n"
  "\031AckEstablishKcpConnection\022)\n\nevent_code"
  "\030\001 \001(\0162\025.KWMsg.EGameEventCode\"p\n\033ReqTryP"
  "ushClientIntoQueueUp\022\017\n\007account\030\001 \001(\014\022\020\n"
  "\010world_id\030\002 \001(\005\022\020\n\010login_id\030\003 \001(\005\022\034\n\006sen"
  "der\030\004 \001(\0132\014.KWMsg.Ident\"\250\001\n\030AckPushClien"
  "tIntoQueueUp\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg"
  ".EGameEventCode\022\016\n\006ticket\030\002 \001(\014\022\017\n\007accou"
  "nt\030\003 \001(\014\022\020\n\010world_id\030\004 \001(\005\022\020\n\010login_id\030\005"
  " \001(\005\022\034\n\006sender\030\006 \001(\0132\014.KWMsg.Ident\"T\n\036Re"
  "qQueueUpGetCurWorldSuitProxy\022\016\n\006ticket\030\001"
  " \001(\014\022\"\n\014transpond_id\030\002 \001(\0132\014.KWMsg.Ident"
  "\"z\n\036AckQueueUpGetCurWorldSuitProxy\022\016\n\006ti"
  "cket\030\001 \001(\014\022\"\n\014transpond_id\030\002 \001(\0132\014.KWMsg"
  ".Ident\022\020\n\010world_ip\030\003 \001(\014\022\022\n\nworld_port\030\004"
  " \001(\005\"=\n\036ReqUpdatePlayerLastHeartbeatTS\022\017"
  "\n\007account\030\001 \001(\014\022\n\n\002ts\030\002 \001(\003\"V\n\rReqTestBa"
  "ttle\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\023\n"
  "\013battle_list\030\002 \001(\014\022\017\n\007team_id\030\003 \001(\014\"`\n\rA"
  "ckTestBattle\022)\n\nevent_code\030\001 \001(\0162\025.KWMsg"
  ".EGameEventCode\022\023\n\013battle_list\030\002 \001(\014\022\017\n\007"
  "team_id\030\003 \001(\014\"D\n\017ReqCollectWitch\022\037\n\tplay"
  "er_id\030\001 \001(\0132\014.KWMsg.Ident\022\020\n\010witch_id\030\002 "
  "\001(\014\"b\n\017AckCollectWitch\022)\n\nevent_code\030\001 \001"
  "(\0162\025.KWMsg.EGameEventCode\022\020\n\010witch_id\030\002 "
  "\001(\014\022\022\n\nis_collect\030\003 \001(\005\"\\\n\023ReqInitMainRo"
  "leName\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022"
  "\014\n\004name\030\002 \001(\014\022\026\n\016is_random_name\030\003 \001(\005\"@\n"
  "\023AckInitMainRoleName\022)\n\nevent_code\030\001 \001(\016"
  "2\025.KWMsg.EGameEventCodeB\nZ\010./;KWMsgb\006pro"
  "to3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_kwmsgshare_2eproto_deps[2] = {
  &::descriptor_table_kwmsgbase_2eproto,
  &::descriptor_table_kwmsgdefine_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kwmsgshare_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kwmsgshare_2eproto = {
  false, false, 2763, descriptor_table_protodef_kwmsgshare_2eproto, "kwmsgshare.proto", 
  &descriptor_table_kwmsgshare_2eproto_once, descriptor_table_kwmsgshare_2eproto_deps, 2, 27,
  schemas, file_default_instances, TableStruct_kwmsgshare_2eproto::offsets,
  file_level_metadata_kwmsgshare_2eproto, file_level_enum_descriptors_kwmsgshare_2eproto, file_level_service_descriptors_kwmsgshare_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_kwmsgshare_2eproto_getter() {
  return &descriptor_table_kwmsgshare_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_kwmsgshare_2eproto(&descriptor_table_kwmsgshare_2eproto);
namespace KWMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PosSyncUnit_EMoveType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgshare_2eproto);
  return file_level_enum_descriptors_kwmsgshare_2eproto[0];
}
bool PosSyncUnit_EMoveType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr PosSyncUnit_EMoveType PosSyncUnit::EMT_WALK;
constexpr PosSyncUnit_EMoveType PosSyncUnit::EET_SPEEDY;
constexpr PosSyncUnit_EMoveType PosSyncUnit::EET_TELEPORT;
constexpr PosSyncUnit_EMoveType PosSyncUnit::EMoveType_MIN;
constexpr PosSyncUnit_EMoveType PosSyncUnit::EMoveType_MAX;
constexpr int PosSyncUnit::EMoveType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatChannel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgshare_2eproto);
  return file_level_enum_descriptors_kwmsgshare_2eproto[1];
}
bool ReqAckPlayerChat_EGameChatChannel_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_GLOBAL;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_GUILD;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_ROOM;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGCC_TEAM;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGameChatChannel_MIN;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::EGameChatChannel_MAX;
constexpr int ReqAckPlayerChat::EGameChatChannel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgshare_2eproto);
  return file_level_enum_descriptors_kwmsgshare_2eproto[2];
}
bool ReqAckPlayerChat_EGameChatType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_TEXT;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_VOICE;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGCT_EMOJI;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MIN;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::EGameChatType_MAX;
constexpr int ReqAckPlayerChat::EGameChatType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class ReqAckLagTest::_Internal {
 public:
};

ReqAckLagTest::ReqAckLagTest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAckLagTest)
}
ReqAckLagTest::ReqAckLagTest(const ReqAckLagTest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAckLagTest)
}

void ReqAckLagTest::SharedCtor() {
}

ReqAckLagTest::~ReqAckLagTest() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAckLagTest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAckLagTest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqAckLagTest::ArenaDtor(void* object) {
  ReqAckLagTest* _this = reinterpret_cast< ReqAckLagTest* >(object);
  (void)_this;
}
void ReqAckLagTest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAckLagTest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAckLagTest::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAckLagTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAckLagTest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckLagTest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAckLagTest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAckLagTest)
  return target;
}

size_t ReqAckLagTest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAckLagTest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckLagTest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAckLagTest)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckLagTest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckLagTest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAckLagTest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAckLagTest)
    MergeFrom(*source);
  }
}

void ReqAckLagTest::MergeFrom(const ReqAckLagTest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAckLagTest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqAckLagTest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAckLagTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckLagTest::CopyFrom(const ReqAckLagTest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAckLagTest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckLagTest::IsInitialized() const {
  return true;
}

void ReqAckLagTest::InternalSwap(ReqAckLagTest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckLagTest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[0]);
}

// ===================================================================

class ReqAckHeartBeat::_Internal {
 public:
};

ReqAckHeartBeat::ReqAckHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAckHeartBeat)
}
ReqAckHeartBeat::ReqAckHeartBeat(const ReqAckHeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAckHeartBeat)
}

void ReqAckHeartBeat::SharedCtor() {
}

ReqAckHeartBeat::~ReqAckHeartBeat() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAckHeartBeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAckHeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ReqAckHeartBeat::ArenaDtor(void* object) {
  ReqAckHeartBeat* _this = reinterpret_cast< ReqAckHeartBeat* >(object);
  (void)_this;
}
void ReqAckHeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAckHeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAckHeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAckHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAckHeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckHeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAckHeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAckHeartBeat)
  return target;
}

size_t ReqAckHeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAckHeartBeat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckHeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAckHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckHeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckHeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAckHeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAckHeartBeat)
    MergeFrom(*source);
  }
}

void ReqAckHeartBeat::MergeFrom(const ReqAckHeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAckHeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void ReqAckHeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAckHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckHeartBeat::CopyFrom(const ReqAckHeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAckHeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckHeartBeat::IsInitialized() const {
  return true;
}

void ReqAckHeartBeat::InternalSwap(ReqAckHeartBeat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckHeartBeat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[1]);
}

// ===================================================================

class ReqLeaveGameServer::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqLeaveGameServer* msg);
};

const ::KWMsg::Ident&
ReqLeaveGameServer::_Internal::player_id(const ReqLeaveGameServer* msg) {
  return *msg->player_id_;
}
void ReqLeaveGameServer::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqLeaveGameServer::ReqLeaveGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqLeaveGameServer)
}
ReqLeaveGameServer::ReqLeaveGameServer(const ReqLeaveGameServer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqLeaveGameServer)
}

void ReqLeaveGameServer::SharedCtor() {
player_id_ = nullptr;
}

ReqLeaveGameServer::~ReqLeaveGameServer() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqLeaveGameServer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqLeaveGameServer::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqLeaveGameServer::ArenaDtor(void* object) {
  ReqLeaveGameServer* _this = reinterpret_cast< ReqLeaveGameServer* >(object);
  (void)_this;
}
void ReqLeaveGameServer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqLeaveGameServer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqLeaveGameServer::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqLeaveGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqLeaveGameServer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqLeaveGameServer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqLeaveGameServer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqLeaveGameServer)
  return target;
}

size_t ReqLeaveGameServer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqLeaveGameServer)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqLeaveGameServer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqLeaveGameServer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqLeaveGameServer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqLeaveGameServer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqLeaveGameServer)
    MergeFrom(*source);
  }
}

void ReqLeaveGameServer::MergeFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqLeaveGameServer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqLeaveGameServer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLeaveGameServer::CopyFrom(const ReqLeaveGameServer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqLeaveGameServer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLeaveGameServer::IsInitialized() const {
  return true;
}

void ReqLeaveGameServer::InternalSwap(ReqLeaveGameServer* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqLeaveGameServer::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[2]);
}

// ===================================================================

class PlayerEntryInfo::_Internal {
 public:
  static const ::KWMsg::Ident& object_guid(const PlayerEntryInfo* msg);
  static const ::KWMsg::Vector3& pos(const PlayerEntryInfo* msg);
};

const ::KWMsg::Ident&
PlayerEntryInfo::_Internal::object_guid(const PlayerEntryInfo* msg) {
  return *msg->object_guid_;
}
const ::KWMsg::Vector3&
PlayerEntryInfo::_Internal::pos(const PlayerEntryInfo* msg) {
  return *msg->pos_;
}
void PlayerEntryInfo::clear_object_guid() {
  if (GetArenaForAllocation() == nullptr && object_guid_ != nullptr) {
    delete object_guid_;
  }
  object_guid_ = nullptr;
}
void PlayerEntryInfo::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
PlayerEntryInfo::PlayerEntryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PlayerEntryInfo)
}
PlayerEntryInfo::PlayerEntryInfo(const PlayerEntryInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_config_id().empty()) {
    config_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_config_id(), 
      GetArenaForAllocation());
  }
  class_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_class_id().empty()) {
    class_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_class_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_object_guid()) {
    object_guid_ = new ::KWMsg::Ident(*from.object_guid_);
  } else {
    object_guid_ = nullptr;
  }
  if (from._internal_has_pos()) {
    pos_ = new ::KWMsg::Vector3(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  scene_id_ = from.scene_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.PlayerEntryInfo)
}

void PlayerEntryInfo::SharedCtor() {
config_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
class_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&object_guid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&object_guid_)) + sizeof(scene_id_));
}

PlayerEntryInfo::~PlayerEntryInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.PlayerEntryInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PlayerEntryInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  config_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  class_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete object_guid_;
  if (this != internal_default_instance()) delete pos_;
}

void PlayerEntryInfo::ArenaDtor(void* object) {
  PlayerEntryInfo* _this = reinterpret_cast< PlayerEntryInfo* >(object);
  (void)_this;
}
void PlayerEntryInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PlayerEntryInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PlayerEntryInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PlayerEntryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  config_id_.ClearToEmpty();
  class_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && object_guid_ != nullptr) {
    delete object_guid_;
  }
  object_guid_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  scene_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PlayerEntryInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident object_guid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_object_guid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Vector3 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes config_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_config_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes class_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_class_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PlayerEntryInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PlayerEntryInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::object_guid(this), target, stream);
  }

  // .KWMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // bytes config_id = 3;
  if (!this->config_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_config_id(), target);
  }

  // int32 scene_id = 4;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_scene_id(), target);
  }

  // bytes class_id = 5;
  if (!this->class_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_class_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PlayerEntryInfo)
  return target;
}

size_t PlayerEntryInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PlayerEntryInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes config_id = 3;
  if (!this->config_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_config_id());
  }

  // bytes class_id = 5;
  if (!this->class_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_class_id());
  }

  // .KWMsg.Ident object_guid = 1;
  if (this->has_object_guid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *object_guid_);
  }

  // .KWMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // int32 scene_id = 4;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PlayerEntryInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PlayerEntryInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PlayerEntryInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PlayerEntryInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PlayerEntryInfo)
    MergeFrom(*source);
  }
}

void PlayerEntryInfo::MergeFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PlayerEntryInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.config_id().empty()) {
    _internal_set_config_id(from._internal_config_id());
  }
  if (!from.class_id().empty()) {
    _internal_set_class_id(from._internal_class_id());
  }
  if (from.has_object_guid()) {
    _internal_mutable_object_guid()->::KWMsg::Ident::MergeFrom(from._internal_object_guid());
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::KWMsg::Vector3::MergeFrom(from._internal_pos());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
}

void PlayerEntryInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerEntryInfo::CopyFrom(const PlayerEntryInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PlayerEntryInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerEntryInfo::IsInitialized() const {
  return true;
}

void PlayerEntryInfo::InternalSwap(PlayerEntryInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &config_id_, GetArenaForAllocation(),
      &other->config_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &class_id_, GetArenaForAllocation(),
      &other->class_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PlayerEntryInfo, scene_id_)
      + sizeof(PlayerEntryInfo::scene_id_)
      - PROTOBUF_FIELD_OFFSET(PlayerEntryInfo, object_guid_)>(
          reinterpret_cast<char*>(&object_guid_),
          reinterpret_cast<char*>(&other->object_guid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PlayerEntryInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[3]);
}

// ===================================================================

class AckPlayerEntryList::_Internal {
 public:
};

AckPlayerEntryList::AckPlayerEntryList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckPlayerEntryList)
}
AckPlayerEntryList::AckPlayerEntryList(const AckPlayerEntryList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckPlayerEntryList)
}

void AckPlayerEntryList::SharedCtor() {
}

AckPlayerEntryList::~AckPlayerEntryList() {
  // @@protoc_insertion_point(destructor:KWMsg.AckPlayerEntryList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckPlayerEntryList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckPlayerEntryList::ArenaDtor(void* object) {
  AckPlayerEntryList* _this = reinterpret_cast< AckPlayerEntryList* >(object);
  (void)_this;
}
void AckPlayerEntryList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckPlayerEntryList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckPlayerEntryList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckPlayerEntryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckPlayerEntryList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.PlayerEntryInfo object_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckPlayerEntryList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckPlayerEntryList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.PlayerEntryInfo object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_object_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckPlayerEntryList)
  return target;
}

size_t AckPlayerEntryList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckPlayerEntryList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.PlayerEntryInfo object_list = 1;
  total_size += 1UL * this->_internal_object_list_size();
  for (const auto& msg : this->object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerEntryList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerEntryList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckPlayerEntryList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckPlayerEntryList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckPlayerEntryList)
    MergeFrom(*source);
  }
}

void AckPlayerEntryList::MergeFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckPlayerEntryList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerEntryList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerEntryList::CopyFrom(const AckPlayerEntryList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckPlayerEntryList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerEntryList::IsInitialized() const {
  return true;
}

void AckPlayerEntryList::InternalSwap(AckPlayerEntryList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  object_list_.InternalSwap(&other->object_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckPlayerEntryList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[4]);
}

// ===================================================================

class AckPlayerLeaveList::_Internal {
 public:
};

void AckPlayerLeaveList::clear_object_list() {
  object_list_.Clear();
}
AckPlayerLeaveList::AckPlayerLeaveList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckPlayerLeaveList)
}
AckPlayerLeaveList::AckPlayerLeaveList(const AckPlayerLeaveList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckPlayerLeaveList)
}

void AckPlayerLeaveList::SharedCtor() {
}

AckPlayerLeaveList::~AckPlayerLeaveList() {
  // @@protoc_insertion_point(destructor:KWMsg.AckPlayerLeaveList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckPlayerLeaveList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckPlayerLeaveList::ArenaDtor(void* object) {
  AckPlayerLeaveList* _this = reinterpret_cast< AckPlayerLeaveList* >(object);
  (void)_this;
}
void AckPlayerLeaveList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckPlayerLeaveList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckPlayerLeaveList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckPlayerLeaveList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckPlayerLeaveList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.Ident object_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckPlayerLeaveList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckPlayerLeaveList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.Ident object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_object_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckPlayerLeaveList)
  return target;
}

size_t AckPlayerLeaveList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckPlayerLeaveList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.Ident object_list = 1;
  total_size += 1UL * this->_internal_object_list_size();
  for (const auto& msg : this->object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerLeaveList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerLeaveList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckPlayerLeaveList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckPlayerLeaveList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckPlayerLeaveList)
    MergeFrom(*source);
  }
}

void AckPlayerLeaveList::MergeFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckPlayerLeaveList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerLeaveList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerLeaveList::CopyFrom(const AckPlayerLeaveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckPlayerLeaveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerLeaveList::IsInitialized() const {
  return true;
}

void AckPlayerLeaveList::InternalSwap(AckPlayerLeaveList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  object_list_.InternalSwap(&other->object_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckPlayerLeaveList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[5]);
}

// ===================================================================

class AckPlayerDataFinished::_Internal {
 public:
};

void AckPlayerDataFinished::clear_object_list() {
  object_list_.Clear();
}
AckPlayerDataFinished::AckPlayerDataFinished(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  object_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckPlayerDataFinished)
}
AckPlayerDataFinished::AckPlayerDataFinished(const AckPlayerDataFinished& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      object_list_(from.object_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckPlayerDataFinished)
}

void AckPlayerDataFinished::SharedCtor() {
}

AckPlayerDataFinished::~AckPlayerDataFinished() {
  // @@protoc_insertion_point(destructor:KWMsg.AckPlayerDataFinished)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckPlayerDataFinished::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckPlayerDataFinished::ArenaDtor(void* object) {
  AckPlayerDataFinished* _this = reinterpret_cast< AckPlayerDataFinished* >(object);
  (void)_this;
}
void AckPlayerDataFinished::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckPlayerDataFinished::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckPlayerDataFinished::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckPlayerDataFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  object_list_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckPlayerDataFinished::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.Ident object_list = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckPlayerDataFinished::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckPlayerDataFinished)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.Ident object_list = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_object_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckPlayerDataFinished)
  return target;
}

size_t AckPlayerDataFinished::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckPlayerDataFinished)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.Ident object_list = 1;
  total_size += 1UL * this->_internal_object_list_size();
  for (const auto& msg : this->object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPlayerDataFinished::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckPlayerDataFinished)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPlayerDataFinished* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckPlayerDataFinished>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckPlayerDataFinished)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckPlayerDataFinished)
    MergeFrom(*source);
  }
}

void AckPlayerDataFinished::MergeFrom(const AckPlayerDataFinished& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckPlayerDataFinished)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  object_list_.MergeFrom(from.object_list_);
}

void AckPlayerDataFinished::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckPlayerDataFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerDataFinished::CopyFrom(const AckPlayerDataFinished& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckPlayerDataFinished)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerDataFinished::IsInitialized() const {
  return true;
}

void AckPlayerDataFinished::InternalSwap(AckPlayerDataFinished* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  object_list_.InternalSwap(&other->object_list_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckPlayerDataFinished::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[6]);
}

// ===================================================================

class PosSyncUnit::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const PosSyncUnit* msg);
  static const ::KWMsg::Vector3& pos(const PosSyncUnit* msg);
  static const ::KWMsg::Vector3& orientation(const PosSyncUnit* msg);
};

const ::KWMsg::Ident&
PosSyncUnit::_Internal::player_id(const PosSyncUnit* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Vector3&
PosSyncUnit::_Internal::pos(const PosSyncUnit* msg) {
  return *msg->pos_;
}
const ::KWMsg::Vector3&
PosSyncUnit::_Internal::orientation(const PosSyncUnit* msg) {
  return *msg->orientation_;
}
void PosSyncUnit::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
void PosSyncUnit::clear_pos() {
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
}
void PosSyncUnit::clear_orientation() {
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
}
PosSyncUnit::PosSyncUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PosSyncUnit)
}
PosSyncUnit::PosSyncUnit(const PosSyncUnit& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_pos()) {
    pos_ = new ::KWMsg::Vector3(*from.pos_);
  } else {
    pos_ = nullptr;
  }
  if (from._internal_has_orientation()) {
    orientation_ = new ::KWMsg::Vector3(*from.orientation_);
  } else {
    orientation_ = nullptr;
  }
  ::memcpy(&status_, &from.status_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&status_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.PosSyncUnit)
}

void PosSyncUnit::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(type_));
}

PosSyncUnit::~PosSyncUnit() {
  // @@protoc_insertion_point(destructor:KWMsg.PosSyncUnit)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PosSyncUnit::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete pos_;
  if (this != internal_default_instance()) delete orientation_;
}

void PosSyncUnit::ArenaDtor(void* object) {
  PosSyncUnit* _this = reinterpret_cast< PosSyncUnit* >(object);
  (void)_this;
}
void PosSyncUnit::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PosSyncUnit::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PosSyncUnit::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PosSyncUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && pos_ != nullptr) {
    delete pos_;
  }
  pos_ = nullptr;
  if (GetArenaForAllocation() == nullptr && orientation_ != nullptr) {
    delete orientation_;
  }
  orientation_ = nullptr;
  ::memset(&status_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&status_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PosSyncUnit::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Vector3 pos = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_pos(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Vector3 orientation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_orientation(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.PosSyncUnit.EMoveType type = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::KWMsg::PosSyncUnit_EMoveType>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PosSyncUnit::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PosSyncUnit)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::pos(this), target, stream);
  }

  // .KWMsg.Vector3 orientation = 3;
  if (this->has_orientation()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::orientation(this), target, stream);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_status(), target);
  }

  // .KWMsg.PosSyncUnit.EMoveType type = 5;
  if (this->type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_type(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PosSyncUnit)
  return target;
}

size_t PosSyncUnit::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PosSyncUnit)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Vector3 pos = 2;
  if (this->has_pos()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *pos_);
  }

  // .KWMsg.Vector3 orientation = 3;
  if (this->has_orientation()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orientation_);
  }

  // int32 status = 4;
  if (this->status() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_status());
  }

  // .KWMsg.PosSyncUnit.EMoveType type = 5;
  if (this->type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PosSyncUnit::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PosSyncUnit)
  GOOGLE_DCHECK_NE(&from, this);
  const PosSyncUnit* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PosSyncUnit>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PosSyncUnit)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PosSyncUnit)
    MergeFrom(*source);
  }
}

void PosSyncUnit::MergeFrom(const PosSyncUnit& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PosSyncUnit)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_pos()) {
    _internal_mutable_pos()->::KWMsg::Vector3::MergeFrom(from._internal_pos());
  }
  if (from.has_orientation()) {
    _internal_mutable_orientation()->::KWMsg::Vector3::MergeFrom(from._internal_orientation());
  }
  if (from.status() != 0) {
    _internal_set_status(from._internal_status());
  }
  if (from.type() != 0) {
    _internal_set_type(from._internal_type());
  }
}

void PosSyncUnit::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PosSyncUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PosSyncUnit::CopyFrom(const PosSyncUnit& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PosSyncUnit)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PosSyncUnit::IsInitialized() const {
  return true;
}

void PosSyncUnit::InternalSwap(PosSyncUnit* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PosSyncUnit, type_)
      + sizeof(PosSyncUnit::type_)
      - PROTOBUF_FIELD_OFFSET(PosSyncUnit, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PosSyncUnit::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[7]);
}

// ===================================================================

class ReqAckPlayerPosSync::_Internal {
 public:
  static const ::KWMsg::PosSyncUnit& sync_unit(const ReqAckPlayerPosSync* msg);
};

const ::KWMsg::PosSyncUnit&
ReqAckPlayerPosSync::_Internal::sync_unit(const ReqAckPlayerPosSync* msg) {
  return *msg->sync_unit_;
}
ReqAckPlayerPosSync::ReqAckPlayerPosSync(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAckPlayerPosSync)
}
ReqAckPlayerPosSync::ReqAckPlayerPosSync(const ReqAckPlayerPosSync& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_sync_unit()) {
    sync_unit_ = new ::KWMsg::PosSyncUnit(*from.sync_unit_);
  } else {
    sync_unit_ = nullptr;
  }
  sequence_ = from.sequence_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAckPlayerPosSync)
}

void ReqAckPlayerPosSync::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sync_unit_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sequence_) -
    reinterpret_cast<char*>(&sync_unit_)) + sizeof(sequence_));
}

ReqAckPlayerPosSync::~ReqAckPlayerPosSync() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAckPlayerPosSync)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAckPlayerPosSync::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete sync_unit_;
}

void ReqAckPlayerPosSync::ArenaDtor(void* object) {
  ReqAckPlayerPosSync* _this = reinterpret_cast< ReqAckPlayerPosSync* >(object);
  (void)_this;
}
void ReqAckPlayerPosSync::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAckPlayerPosSync::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAckPlayerPosSync::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAckPlayerPosSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && sync_unit_ != nullptr) {
    delete sync_unit_;
  }
  sync_unit_ = nullptr;
  sequence_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAckPlayerPosSync::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 sequence = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          sequence_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.PosSyncUnit sync_unit = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_sync_unit(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckPlayerPosSync::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAckPlayerPosSync)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_sequence(), target);
  }

  // .KWMsg.PosSyncUnit sync_unit = 2;
  if (this->has_sync_unit()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::sync_unit(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAckPlayerPosSync)
  return target;
}

size_t ReqAckPlayerPosSync::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAckPlayerPosSync)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.PosSyncUnit sync_unit = 2;
  if (this->has_sync_unit()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sync_unit_);
  }

  // int32 sequence = 1;
  if (this->sequence() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_sequence());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerPosSync::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAckPlayerPosSync)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerPosSync* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckPlayerPosSync>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAckPlayerPosSync)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAckPlayerPosSync)
    MergeFrom(*source);
  }
}

void ReqAckPlayerPosSync::MergeFrom(const ReqAckPlayerPosSync& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAckPlayerPosSync)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_sync_unit()) {
    _internal_mutable_sync_unit()->::KWMsg::PosSyncUnit::MergeFrom(from._internal_sync_unit());
  }
  if (from.sequence() != 0) {
    _internal_set_sequence(from._internal_sequence());
  }
}

void ReqAckPlayerPosSync::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAckPlayerPosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerPosSync::CopyFrom(const ReqAckPlayerPosSync& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAckPlayerPosSync)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerPosSync::IsInitialized() const {
  return true;
}

void ReqAckPlayerPosSync::InternalSwap(ReqAckPlayerPosSync* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqAckPlayerPosSync, sequence_)
      + sizeof(ReqAckPlayerPosSync::sequence_)
      - PROTOBUF_FIELD_OFFSET(ReqAckPlayerPosSync, sync_unit_)>(
          reinterpret_cast<char*>(&sync_unit_),
          reinterpret_cast<char*>(&other->sync_unit_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckPlayerPosSync::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[8]);
}

// ===================================================================

class ReqSwapScene::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqSwapScene* msg);
};

const ::KWMsg::Ident&
ReqSwapScene::_Internal::player_id(const ReqSwapScene* msg) {
  return *msg->player_id_;
}
void ReqSwapScene::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqSwapScene::ReqSwapScene(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqSwapScene)
}
ReqSwapScene::ReqSwapScene(const ReqSwapScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  scene_id_ = from.scene_id_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqSwapScene)
}

void ReqSwapScene::SharedCtor() {
args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(scene_id_));
}

ReqSwapScene::~ReqSwapScene() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqSwapScene)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqSwapScene::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqSwapScene::ArenaDtor(void* object) {
  ReqSwapScene* _this = reinterpret_cast< ReqSwapScene* >(object);
  (void)_this;
}
void ReqSwapScene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqSwapScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqSwapScene::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqSwapScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  scene_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqSwapScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqSwapScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqSwapScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  // bytes args = 3;
  if (!this->args().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqSwapScene)
  return target;
}

size_t ReqSwapScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqSwapScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes args = 3;
  if (!this->args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqSwapScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqSwapScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqSwapScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqSwapScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqSwapScene)
    MergeFrom(*source);
  }
}

void ReqSwapScene::MergeFrom(const ReqSwapScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.args().empty()) {
    _internal_set_args(from._internal_args());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
}

void ReqSwapScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSwapScene::CopyFrom(const ReqSwapScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSwapScene::IsInitialized() const {
  return true;
}

void ReqSwapScene::InternalSwap(ReqSwapScene* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &args_, GetArenaForAllocation(),
      &other->args_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqSwapScene, scene_id_)
      + sizeof(ReqSwapScene::scene_id_)
      - PROTOBUF_FIELD_OFFSET(ReqSwapScene, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqSwapScene::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[9]);
}

// ===================================================================

class AckSwapScene::_Internal {
 public:
};

AckSwapScene::AckSwapScene(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckSwapScene)
}
AckSwapScene::AckSwapScene(const AckSwapScene& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_args().empty()) {
    args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_args(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(scene_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckSwapScene)
}

void AckSwapScene::SharedCtor() {
args_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&scene_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(scene_id_));
}

AckSwapScene::~AckSwapScene() {
  // @@protoc_insertion_point(destructor:KWMsg.AckSwapScene)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckSwapScene::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  args_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckSwapScene::ArenaDtor(void* object) {
  AckSwapScene* _this = reinterpret_cast< AckSwapScene* >(object);
  (void)_this;
}
void AckSwapScene::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckSwapScene::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckSwapScene::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckSwapScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  args_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&scene_id_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(scene_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckSwapScene::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // int32 scene_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          scene_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_args();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckSwapScene::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckSwapScene)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_scene_id(), target);
  }

  // bytes args = 3;
  if (!this->args().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_args(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckSwapScene)
  return target;
}

size_t AckSwapScene::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckSwapScene)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes args = 3;
  if (!this->args().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_args());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 scene_id = 2;
  if (this->scene_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_scene_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckSwapScene::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  const AckSwapScene* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckSwapScene>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckSwapScene)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckSwapScene)
    MergeFrom(*source);
  }
}

void AckSwapScene::MergeFrom(const AckSwapScene& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckSwapScene)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.args().empty()) {
    _internal_set_args(from._internal_args());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.scene_id() != 0) {
    _internal_set_scene_id(from._internal_scene_id());
  }
}

void AckSwapScene::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSwapScene::CopyFrom(const AckSwapScene& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckSwapScene)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSwapScene::IsInitialized() const {
  return true;
}

void AckSwapScene::InternalSwap(AckSwapScene* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &args_, GetArenaForAllocation(),
      &other->args_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckSwapScene, scene_id_)
      + sizeof(AckSwapScene::scene_id_)
      - PROTOBUF_FIELD_OFFSET(AckSwapScene, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckSwapScene::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[10]);
}

// ===================================================================

class ReqAckPlayerChat::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqAckPlayerChat* msg);
};

const ::KWMsg::Ident&
ReqAckPlayerChat::_Internal::player_id(const ReqAckPlayerChat* msg) {
  return *msg->player_id_;
}
void ReqAckPlayerChat::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqAckPlayerChat::ReqAckPlayerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqAckPlayerChat)
}
ReqAckPlayerChat::ReqAckPlayerChat(const ReqAckPlayerChat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_nickname().empty()) {
    nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_nickname(), 
      GetArenaForAllocation());
  }
  avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar().empty()) {
    avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar(), 
      GetArenaForAllocation());
  }
  avatar_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_avatar_frame().empty()) {
    avatar_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_avatar_frame(), 
      GetArenaForAllocation());
  }
  chat_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_chat_info().empty()) {
    chat_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chat_info(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&chat_channel_, &from.chat_channel_,
    static_cast<size_t>(reinterpret_cast<char*>(&chat_type_) -
    reinterpret_cast<char*>(&chat_channel_)) + sizeof(chat_type_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqAckPlayerChat)
}

void ReqAckPlayerChat::SharedCtor() {
nickname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
avatar_frame_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
chat_info_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&chat_type_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(chat_type_));
}

ReqAckPlayerChat::~ReqAckPlayerChat() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqAckPlayerChat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqAckPlayerChat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  nickname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  avatar_frame_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  chat_info_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqAckPlayerChat::ArenaDtor(void* object) {
  ReqAckPlayerChat* _this = reinterpret_cast< ReqAckPlayerChat* >(object);
  (void)_this;
}
void ReqAckPlayerChat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqAckPlayerChat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqAckPlayerChat::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqAckPlayerChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  nickname_.ClearToEmpty();
  avatar_.ClearToEmpty();
  avatar_frame_.ClearToEmpty();
  chat_info_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&chat_channel_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&chat_type_) -
      reinterpret_cast<char*>(&chat_channel_)) + sizeof(chat_type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqAckPlayerChat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes nickname = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_nickname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_avatar();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes avatar_frame = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_avatar_frame();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chat_channel(static_cast<::KWMsg::ReqAckPlayerChat_EGameChatChannel>(val));
        } else goto handle_unusual;
        continue;
      // .KWMsg.ReqAckPlayerChat.EGameChatType chat_type = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_chat_type(static_cast<::KWMsg::ReqAckPlayerChat_EGameChatType>(val));
        } else goto handle_unusual;
        continue;
      // bytes chat_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_chat_info();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqAckPlayerChat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqAckPlayerChat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes nickname = 2;
  if (!this->nickname().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_nickname(), target);
  }

  // bytes avatar = 3;
  if (!this->avatar().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_avatar(), target);
  }

  // bytes avatar_frame = 4;
  if (!this->avatar_frame().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_avatar_frame(), target);
  }

  // .KWMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 5;
  if (this->chat_channel() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_chat_channel(), target);
  }

  // .KWMsg.ReqAckPlayerChat.EGameChatType chat_type = 6;
  if (this->chat_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      6, this->_internal_chat_type(), target);
  }

  // bytes chat_info = 7;
  if (!this->chat_info().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_chat_info(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqAckPlayerChat)
  return target;
}

size_t ReqAckPlayerChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqAckPlayerChat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes nickname = 2;
  if (!this->nickname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_nickname());
  }

  // bytes avatar = 3;
  if (!this->avatar().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar());
  }

  // bytes avatar_frame = 4;
  if (!this->avatar_frame().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_avatar_frame());
  }

  // bytes chat_info = 7;
  if (!this->chat_info().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_chat_info());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 5;
  if (this->chat_channel() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chat_channel());
  }

  // .KWMsg.ReqAckPlayerChat.EGameChatType chat_type = 6;
  if (this->chat_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_chat_type());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqAckPlayerChat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqAckPlayerChat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqAckPlayerChat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqAckPlayerChat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqAckPlayerChat)
    MergeFrom(*source);
  }
}

void ReqAckPlayerChat::MergeFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqAckPlayerChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.nickname().empty()) {
    _internal_set_nickname(from._internal_nickname());
  }
  if (!from.avatar().empty()) {
    _internal_set_avatar(from._internal_avatar());
  }
  if (!from.avatar_frame().empty()) {
    _internal_set_avatar_frame(from._internal_avatar_frame());
  }
  if (!from.chat_info().empty()) {
    _internal_set_chat_info(from._internal_chat_info());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.chat_channel() != 0) {
    _internal_set_chat_channel(from._internal_chat_channel());
  }
  if (from.chat_type() != 0) {
    _internal_set_chat_type(from._internal_chat_type());
  }
}

void ReqAckPlayerChat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqAckPlayerChat::CopyFrom(const ReqAckPlayerChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqAckPlayerChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqAckPlayerChat::IsInitialized() const {
  return true;
}

void ReqAckPlayerChat::InternalSwap(ReqAckPlayerChat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &nickname_, GetArenaForAllocation(),
      &other->nickname_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_, GetArenaForAllocation(),
      &other->avatar_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &avatar_frame_, GetArenaForAllocation(),
      &other->avatar_frame_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chat_info_, GetArenaForAllocation(),
      &other->chat_info_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqAckPlayerChat, chat_type_)
      + sizeof(ReqAckPlayerChat::chat_type_)
      - PROTOBUF_FIELD_OFFSET(ReqAckPlayerChat, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqAckPlayerChat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[11]);
}

// ===================================================================

class ReqCreateKcpObject::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCreateKcpObject* msg);
};

const ::KWMsg::Ident&
ReqCreateKcpObject::_Internal::player_id(const ReqCreateKcpObject* msg) {
  return *msg->player_id_;
}
void ReqCreateKcpObject::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCreateKcpObject::ReqCreateKcpObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCreateKcpObject)
}
ReqCreateKcpObject::ReqCreateKcpObject(const ReqCreateKcpObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCreateKcpObject)
}

void ReqCreateKcpObject::SharedCtor() {
player_id_ = nullptr;
}

ReqCreateKcpObject::~ReqCreateKcpObject() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCreateKcpObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCreateKcpObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCreateKcpObject::ArenaDtor(void* object) {
  ReqCreateKcpObject* _this = reinterpret_cast< ReqCreateKcpObject* >(object);
  (void)_this;
}
void ReqCreateKcpObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCreateKcpObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCreateKcpObject::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCreateKcpObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCreateKcpObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCreateKcpObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCreateKcpObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCreateKcpObject)
  return target;
}

size_t ReqCreateKcpObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCreateKcpObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCreateKcpObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCreateKcpObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCreateKcpObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCreateKcpObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCreateKcpObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCreateKcpObject)
    MergeFrom(*source);
  }
}

void ReqCreateKcpObject::MergeFrom(const ReqCreateKcpObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCreateKcpObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqCreateKcpObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCreateKcpObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateKcpObject::CopyFrom(const ReqCreateKcpObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCreateKcpObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreateKcpObject::IsInitialized() const {
  return true;
}

void ReqCreateKcpObject::InternalSwap(ReqCreateKcpObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCreateKcpObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[12]);
}

// ===================================================================

class AckCreateKcpObject::_Internal {
 public:
};

AckCreateKcpObject::AckCreateKcpObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCreateKcpObject)
}
AckCreateKcpObject::AckCreateKcpObject(const AckCreateKcpObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_server_ip().empty()) {
    server_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_server_ip(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&conv_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(conv_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCreateKcpObject)
}

void AckCreateKcpObject::SharedCtor() {
server_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&conv_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(conv_));
}

AckCreateKcpObject::~AckCreateKcpObject() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCreateKcpObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCreateKcpObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  server_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckCreateKcpObject::ArenaDtor(void* object) {
  AckCreateKcpObject* _this = reinterpret_cast< AckCreateKcpObject* >(object);
  (void)_this;
}
void AckCreateKcpObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCreateKcpObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCreateKcpObject::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCreateKcpObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  server_ip_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&conv_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(conv_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCreateKcpObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes server_ip = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_server_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 server_port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          server_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 conv = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          conv_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCreateKcpObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCreateKcpObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes server_ip = 2;
  if (!this->server_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_server_ip(), target);
  }

  // int32 server_port = 3;
  if (this->server_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_server_port(), target);
  }

  // uint32 conv = 4;
  if (this->conv() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_conv(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCreateKcpObject)
  return target;
}

size_t AckCreateKcpObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCreateKcpObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes server_ip = 2;
  if (!this->server_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_server_ip());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 server_port = 3;
  if (this->server_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_server_port());
  }

  // uint32 conv = 4;
  if (this->conv() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_conv());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCreateKcpObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCreateKcpObject)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCreateKcpObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCreateKcpObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCreateKcpObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCreateKcpObject)
    MergeFrom(*source);
  }
}

void AckCreateKcpObject::MergeFrom(const AckCreateKcpObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCreateKcpObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.server_ip().empty()) {
    _internal_set_server_ip(from._internal_server_ip());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.server_port() != 0) {
    _internal_set_server_port(from._internal_server_port());
  }
  if (from.conv() != 0) {
    _internal_set_conv(from._internal_conv());
  }
}

void AckCreateKcpObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCreateKcpObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCreateKcpObject::CopyFrom(const AckCreateKcpObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCreateKcpObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCreateKcpObject::IsInitialized() const {
  return true;
}

void AckCreateKcpObject::InternalSwap(AckCreateKcpObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &server_ip_, GetArenaForAllocation(),
      &other->server_ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckCreateKcpObject, conv_)
      + sizeof(AckCreateKcpObject::conv_)
      - PROTOBUF_FIELD_OFFSET(AckCreateKcpObject, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCreateKcpObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[13]);
}

// ===================================================================

class ReqEstablishKcpConnection::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqEstablishKcpConnection* msg);
};

const ::KWMsg::Ident&
ReqEstablishKcpConnection::_Internal::player_id(const ReqEstablishKcpConnection* msg) {
  return *msg->player_id_;
}
void ReqEstablishKcpConnection::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqEstablishKcpConnection::ReqEstablishKcpConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqEstablishKcpConnection)
}
ReqEstablishKcpConnection::ReqEstablishKcpConnection(const ReqEstablishKcpConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqEstablishKcpConnection)
}

void ReqEstablishKcpConnection::SharedCtor() {
player_id_ = nullptr;
}

ReqEstablishKcpConnection::~ReqEstablishKcpConnection() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqEstablishKcpConnection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqEstablishKcpConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ReqEstablishKcpConnection::ArenaDtor(void* object) {
  ReqEstablishKcpConnection* _this = reinterpret_cast< ReqEstablishKcpConnection* >(object);
  (void)_this;
}
void ReqEstablishKcpConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqEstablishKcpConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqEstablishKcpConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqEstablishKcpConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqEstablishKcpConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqEstablishKcpConnection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqEstablishKcpConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqEstablishKcpConnection)
  return target;
}

size_t ReqEstablishKcpConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqEstablishKcpConnection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqEstablishKcpConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqEstablishKcpConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqEstablishKcpConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqEstablishKcpConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqEstablishKcpConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqEstablishKcpConnection)
    MergeFrom(*source);
  }
}

void ReqEstablishKcpConnection::MergeFrom(const ReqEstablishKcpConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqEstablishKcpConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqEstablishKcpConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqEstablishKcpConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEstablishKcpConnection::CopyFrom(const ReqEstablishKcpConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqEstablishKcpConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEstablishKcpConnection::IsInitialized() const {
  return true;
}

void ReqEstablishKcpConnection::InternalSwap(ReqEstablishKcpConnection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqEstablishKcpConnection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[14]);
}

// ===================================================================

class AckEstablishKcpConnection::_Internal {
 public:
};

AckEstablishKcpConnection::AckEstablishKcpConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckEstablishKcpConnection)
}
AckEstablishKcpConnection::AckEstablishKcpConnection(const AckEstablishKcpConnection& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckEstablishKcpConnection)
}

void AckEstablishKcpConnection::SharedCtor() {
event_code_ = 0;
}

AckEstablishKcpConnection::~AckEstablishKcpConnection() {
  // @@protoc_insertion_point(destructor:KWMsg.AckEstablishKcpConnection)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckEstablishKcpConnection::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckEstablishKcpConnection::ArenaDtor(void* object) {
  AckEstablishKcpConnection* _this = reinterpret_cast< AckEstablishKcpConnection* >(object);
  (void)_this;
}
void AckEstablishKcpConnection::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckEstablishKcpConnection::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckEstablishKcpConnection::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckEstablishKcpConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckEstablishKcpConnection::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckEstablishKcpConnection::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckEstablishKcpConnection)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckEstablishKcpConnection)
  return target;
}

size_t AckEstablishKcpConnection::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckEstablishKcpConnection)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckEstablishKcpConnection::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckEstablishKcpConnection)
  GOOGLE_DCHECK_NE(&from, this);
  const AckEstablishKcpConnection* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckEstablishKcpConnection>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckEstablishKcpConnection)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckEstablishKcpConnection)
    MergeFrom(*source);
  }
}

void AckEstablishKcpConnection::MergeFrom(const AckEstablishKcpConnection& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckEstablishKcpConnection)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckEstablishKcpConnection::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckEstablishKcpConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckEstablishKcpConnection::CopyFrom(const AckEstablishKcpConnection& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckEstablishKcpConnection)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckEstablishKcpConnection::IsInitialized() const {
  return true;
}

void AckEstablishKcpConnection::InternalSwap(AckEstablishKcpConnection* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckEstablishKcpConnection::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[15]);
}

// ===================================================================

class ReqTryPushClientIntoQueueUp::_Internal {
 public:
  static const ::KWMsg::Ident& sender(const ReqTryPushClientIntoQueueUp* msg);
};

const ::KWMsg::Ident&
ReqTryPushClientIntoQueueUp::_Internal::sender(const ReqTryPushClientIntoQueueUp* msg) {
  return *msg->sender_;
}
void ReqTryPushClientIntoQueueUp::clear_sender() {
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
ReqTryPushClientIntoQueueUp::ReqTryPushClientIntoQueueUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqTryPushClientIntoQueueUp)
}
ReqTryPushClientIntoQueueUp::ReqTryPushClientIntoQueueUp(const ReqTryPushClientIntoQueueUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sender()) {
    sender_ = new ::KWMsg::Ident(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  ::memcpy(&world_id_, &from.world_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&login_id_) -
    reinterpret_cast<char*>(&world_id_)) + sizeof(login_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqTryPushClientIntoQueueUp)
}

void ReqTryPushClientIntoQueueUp::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sender_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&login_id_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(login_id_));
}

ReqTryPushClientIntoQueueUp::~ReqTryPushClientIntoQueueUp() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqTryPushClientIntoQueueUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqTryPushClientIntoQueueUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void ReqTryPushClientIntoQueueUp::ArenaDtor(void* object) {
  ReqTryPushClientIntoQueueUp* _this = reinterpret_cast< ReqTryPushClientIntoQueueUp* >(object);
  (void)_this;
}
void ReqTryPushClientIntoQueueUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqTryPushClientIntoQueueUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqTryPushClientIntoQueueUp::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqTryPushClientIntoQueueUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  ::memset(&world_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_id_) -
      reinterpret_cast<char*>(&world_id_)) + sizeof(login_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqTryPushClientIntoQueueUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 login_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident sender = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqTryPushClientIntoQueueUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqTryPushClientIntoQueueUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // int32 world_id = 2;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_world_id(), target);
  }

  // int32 login_id = 3;
  if (this->login_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_login_id(), target);
  }

  // .KWMsg.Ident sender = 4;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::sender(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqTryPushClientIntoQueueUp)
  return target;
}

size_t ReqTryPushClientIntoQueueUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqTryPushClientIntoQueueUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // .KWMsg.Ident sender = 4;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // int32 world_id = 2;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  // int32 login_id = 3;
  if (this->login_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_login_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqTryPushClientIntoQueueUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqTryPushClientIntoQueueUp)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqTryPushClientIntoQueueUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqTryPushClientIntoQueueUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqTryPushClientIntoQueueUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqTryPushClientIntoQueueUp)
    MergeFrom(*source);
  }
}

void ReqTryPushClientIntoQueueUp::MergeFrom(const ReqTryPushClientIntoQueueUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqTryPushClientIntoQueueUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::KWMsg::Ident::MergeFrom(from._internal_sender());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
  if (from.login_id() != 0) {
    _internal_set_login_id(from._internal_login_id());
  }
}

void ReqTryPushClientIntoQueueUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqTryPushClientIntoQueueUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTryPushClientIntoQueueUp::CopyFrom(const ReqTryPushClientIntoQueueUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqTryPushClientIntoQueueUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTryPushClientIntoQueueUp::IsInitialized() const {
  return true;
}

void ReqTryPushClientIntoQueueUp::InternalSwap(ReqTryPushClientIntoQueueUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqTryPushClientIntoQueueUp, login_id_)
      + sizeof(ReqTryPushClientIntoQueueUp::login_id_)
      - PROTOBUF_FIELD_OFFSET(ReqTryPushClientIntoQueueUp, sender_)>(
          reinterpret_cast<char*>(&sender_),
          reinterpret_cast<char*>(&other->sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqTryPushClientIntoQueueUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[16]);
}

// ===================================================================

class AckPushClientIntoQueueUp::_Internal {
 public:
  static const ::KWMsg::Ident& sender(const AckPushClientIntoQueueUp* msg);
};

const ::KWMsg::Ident&
AckPushClientIntoQueueUp::_Internal::sender(const AckPushClientIntoQueueUp* msg) {
  return *msg->sender_;
}
void AckPushClientIntoQueueUp::clear_sender() {
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
}
AckPushClientIntoQueueUp::AckPushClientIntoQueueUp(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckPushClientIntoQueueUp)
}
AckPushClientIntoQueueUp::AckPushClientIntoQueueUp(const AckPushClientIntoQueueUp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticket().empty()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArenaForAllocation());
  }
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_sender()) {
    sender_ = new ::KWMsg::Ident(*from.sender_);
  } else {
    sender_ = nullptr;
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&login_id_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(login_id_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckPushClientIntoQueueUp)
}

void AckPushClientIntoQueueUp::SharedCtor() {
ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&sender_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&login_id_) -
    reinterpret_cast<char*>(&sender_)) + sizeof(login_id_));
}

AckPushClientIntoQueueUp::~AckPushClientIntoQueueUp() {
  // @@protoc_insertion_point(destructor:KWMsg.AckPushClientIntoQueueUp)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckPushClientIntoQueueUp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete sender_;
}

void AckPushClientIntoQueueUp::ArenaDtor(void* object) {
  AckPushClientIntoQueueUp* _this = reinterpret_cast< AckPushClientIntoQueueUp* >(object);
  (void)_this;
}
void AckPushClientIntoQueueUp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckPushClientIntoQueueUp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckPushClientIntoQueueUp::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckPushClientIntoQueueUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_.ClearToEmpty();
  account_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && sender_ != nullptr) {
    delete sender_;
  }
  sender_ = nullptr;
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&login_id_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(login_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckPushClientIntoQueueUp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes ticket = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes account = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_id = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          world_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 login_id = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          login_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident sender = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_sender(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckPushClientIntoQueueUp::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckPushClientIntoQueueUp)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes ticket = 2;
  if (!this->ticket().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_ticket(), target);
  }

  // bytes account = 3;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_account(), target);
  }

  // int32 world_id = 4;
  if (this->world_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_world_id(), target);
  }

  // int32 login_id = 5;
  if (this->login_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_login_id(), target);
  }

  // .KWMsg.Ident sender = 6;
  if (this->has_sender()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::sender(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckPushClientIntoQueueUp)
  return target;
}

size_t AckPushClientIntoQueueUp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckPushClientIntoQueueUp)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ticket = 2;
  if (!this->ticket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ticket());
  }

  // bytes account = 3;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // .KWMsg.Ident sender = 6;
  if (this->has_sender()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *sender_);
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 world_id = 4;
  if (this->world_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_id());
  }

  // int32 login_id = 5;
  if (this->login_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_login_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckPushClientIntoQueueUp::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckPushClientIntoQueueUp)
  GOOGLE_DCHECK_NE(&from, this);
  const AckPushClientIntoQueueUp* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckPushClientIntoQueueUp>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckPushClientIntoQueueUp)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckPushClientIntoQueueUp)
    MergeFrom(*source);
  }
}

void AckPushClientIntoQueueUp::MergeFrom(const AckPushClientIntoQueueUp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckPushClientIntoQueueUp)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.ticket().empty()) {
    _internal_set_ticket(from._internal_ticket());
  }
  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from.has_sender()) {
    _internal_mutable_sender()->::KWMsg::Ident::MergeFrom(from._internal_sender());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.world_id() != 0) {
    _internal_set_world_id(from._internal_world_id());
  }
  if (from.login_id() != 0) {
    _internal_set_login_id(from._internal_login_id());
  }
}

void AckPushClientIntoQueueUp::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckPushClientIntoQueueUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPushClientIntoQueueUp::CopyFrom(const AckPushClientIntoQueueUp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckPushClientIntoQueueUp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPushClientIntoQueueUp::IsInitialized() const {
  return true;
}

void AckPushClientIntoQueueUp::InternalSwap(AckPushClientIntoQueueUp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ticket_, GetArenaForAllocation(),
      &other->ticket_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckPushClientIntoQueueUp, login_id_)
      + sizeof(AckPushClientIntoQueueUp::login_id_)
      - PROTOBUF_FIELD_OFFSET(AckPushClientIntoQueueUp, sender_)>(
          reinterpret_cast<char*>(&sender_),
          reinterpret_cast<char*>(&other->sender_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckPushClientIntoQueueUp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[17]);
}

// ===================================================================

class ReqQueueUpGetCurWorldSuitProxy::_Internal {
 public:
  static const ::KWMsg::Ident& transpond_id(const ReqQueueUpGetCurWorldSuitProxy* msg);
};

const ::KWMsg::Ident&
ReqQueueUpGetCurWorldSuitProxy::_Internal::transpond_id(const ReqQueueUpGetCurWorldSuitProxy* msg) {
  return *msg->transpond_id_;
}
void ReqQueueUpGetCurWorldSuitProxy::clear_transpond_id() {
  if (GetArenaForAllocation() == nullptr && transpond_id_ != nullptr) {
    delete transpond_id_;
  }
  transpond_id_ = nullptr;
}
ReqQueueUpGetCurWorldSuitProxy::ReqQueueUpGetCurWorldSuitProxy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
}
ReqQueueUpGetCurWorldSuitProxy::ReqQueueUpGetCurWorldSuitProxy(const ReqQueueUpGetCurWorldSuitProxy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticket().empty()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transpond_id()) {
    transpond_id_ = new ::KWMsg::Ident(*from.transpond_id_);
  } else {
    transpond_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
}

void ReqQueueUpGetCurWorldSuitProxy::SharedCtor() {
ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
transpond_id_ = nullptr;
}

ReqQueueUpGetCurWorldSuitProxy::~ReqQueueUpGetCurWorldSuitProxy() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqQueueUpGetCurWorldSuitProxy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transpond_id_;
}

void ReqQueueUpGetCurWorldSuitProxy::ArenaDtor(void* object) {
  ReqQueueUpGetCurWorldSuitProxy* _this = reinterpret_cast< ReqQueueUpGetCurWorldSuitProxy* >(object);
  (void)_this;
}
void ReqQueueUpGetCurWorldSuitProxy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqQueueUpGetCurWorldSuitProxy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqQueueUpGetCurWorldSuitProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transpond_id_ != nullptr) {
    delete transpond_id_;
  }
  transpond_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqQueueUpGetCurWorldSuitProxy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident transpond_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transpond_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqQueueUpGetCurWorldSuitProxy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ticket = 1;
  if (!this->ticket().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ticket(), target);
  }

  // .KWMsg.Ident transpond_id = 2;
  if (this->has_transpond_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transpond_id(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  return target;
}

size_t ReqQueueUpGetCurWorldSuitProxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ticket = 1;
  if (!this->ticket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ticket());
  }

  // .KWMsg.Ident transpond_id = 2;
  if (this->has_transpond_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transpond_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqQueueUpGetCurWorldSuitProxy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqQueueUpGetCurWorldSuitProxy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqQueueUpGetCurWorldSuitProxy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
    MergeFrom(*source);
  }
}

void ReqQueueUpGetCurWorldSuitProxy::MergeFrom(const ReqQueueUpGetCurWorldSuitProxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.ticket().empty()) {
    _internal_set_ticket(from._internal_ticket());
  }
  if (from.has_transpond_id()) {
    _internal_mutable_transpond_id()->::KWMsg::Ident::MergeFrom(from._internal_transpond_id());
  }
}

void ReqQueueUpGetCurWorldSuitProxy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqQueueUpGetCurWorldSuitProxy::CopyFrom(const ReqQueueUpGetCurWorldSuitProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqQueueUpGetCurWorldSuitProxy::IsInitialized() const {
  return true;
}

void ReqQueueUpGetCurWorldSuitProxy::InternalSwap(ReqQueueUpGetCurWorldSuitProxy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ticket_, GetArenaForAllocation(),
      &other->ticket_, other->GetArenaForAllocation()
  );
  swap(transpond_id_, other->transpond_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqQueueUpGetCurWorldSuitProxy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[18]);
}

// ===================================================================

class AckQueueUpGetCurWorldSuitProxy::_Internal {
 public:
  static const ::KWMsg::Ident& transpond_id(const AckQueueUpGetCurWorldSuitProxy* msg);
};

const ::KWMsg::Ident&
AckQueueUpGetCurWorldSuitProxy::_Internal::transpond_id(const AckQueueUpGetCurWorldSuitProxy* msg) {
  return *msg->transpond_id_;
}
void AckQueueUpGetCurWorldSuitProxy::clear_transpond_id() {
  if (GetArenaForAllocation() == nullptr && transpond_id_ != nullptr) {
    delete transpond_id_;
  }
  transpond_id_ = nullptr;
}
AckQueueUpGetCurWorldSuitProxy::AckQueueUpGetCurWorldSuitProxy(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckQueueUpGetCurWorldSuitProxy)
}
AckQueueUpGetCurWorldSuitProxy::AckQueueUpGetCurWorldSuitProxy(const AckQueueUpGetCurWorldSuitProxy& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ticket().empty()) {
    ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ticket(), 
      GetArenaForAllocation());
  }
  world_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_world_ip().empty()) {
    world_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_world_ip(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_transpond_id()) {
    transpond_id_ = new ::KWMsg::Ident(*from.transpond_id_);
  } else {
    transpond_id_ = nullptr;
  }
  world_port_ = from.world_port_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckQueueUpGetCurWorldSuitProxy)
}

void AckQueueUpGetCurWorldSuitProxy::SharedCtor() {
ticket_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
world_ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&transpond_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&world_port_) -
    reinterpret_cast<char*>(&transpond_id_)) + sizeof(world_port_));
}

AckQueueUpGetCurWorldSuitProxy::~AckQueueUpGetCurWorldSuitProxy() {
  // @@protoc_insertion_point(destructor:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckQueueUpGetCurWorldSuitProxy::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  ticket_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  world_ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete transpond_id_;
}

void AckQueueUpGetCurWorldSuitProxy::ArenaDtor(void* object) {
  AckQueueUpGetCurWorldSuitProxy* _this = reinterpret_cast< AckQueueUpGetCurWorldSuitProxy* >(object);
  (void)_this;
}
void AckQueueUpGetCurWorldSuitProxy::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckQueueUpGetCurWorldSuitProxy::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckQueueUpGetCurWorldSuitProxy::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ticket_.ClearToEmpty();
  world_ip_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && transpond_id_ != nullptr) {
    delete transpond_id_;
  }
  transpond_id_ = nullptr;
  world_port_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckQueueUpGetCurWorldSuitProxy::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes ticket = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_ticket();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident transpond_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_transpond_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes world_ip = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_world_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 world_port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          world_port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckQueueUpGetCurWorldSuitProxy::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes ticket = 1;
  if (!this->ticket().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_ticket(), target);
  }

  // .KWMsg.Ident transpond_id = 2;
  if (this->has_transpond_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::transpond_id(this), target, stream);
  }

  // bytes world_ip = 3;
  if (!this->world_ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_world_ip(), target);
  }

  // int32 world_port = 4;
  if (this->world_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_world_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  return target;
}

size_t AckQueueUpGetCurWorldSuitProxy::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes ticket = 1;
  if (!this->ticket().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ticket());
  }

  // bytes world_ip = 3;
  if (!this->world_ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_world_ip());
  }

  // .KWMsg.Ident transpond_id = 2;
  if (this->has_transpond_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *transpond_id_);
  }

  // int32 world_port = 4;
  if (this->world_port() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_world_port());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckQueueUpGetCurWorldSuitProxy::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  GOOGLE_DCHECK_NE(&from, this);
  const AckQueueUpGetCurWorldSuitProxy* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckQueueUpGetCurWorldSuitProxy>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckQueueUpGetCurWorldSuitProxy)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckQueueUpGetCurWorldSuitProxy)
    MergeFrom(*source);
  }
}

void AckQueueUpGetCurWorldSuitProxy::MergeFrom(const AckQueueUpGetCurWorldSuitProxy& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.ticket().empty()) {
    _internal_set_ticket(from._internal_ticket());
  }
  if (!from.world_ip().empty()) {
    _internal_set_world_ip(from._internal_world_ip());
  }
  if (from.has_transpond_id()) {
    _internal_mutable_transpond_id()->::KWMsg::Ident::MergeFrom(from._internal_transpond_id());
  }
  if (from.world_port() != 0) {
    _internal_set_world_port(from._internal_world_port());
  }
}

void AckQueueUpGetCurWorldSuitProxy::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckQueueUpGetCurWorldSuitProxy::CopyFrom(const AckQueueUpGetCurWorldSuitProxy& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckQueueUpGetCurWorldSuitProxy)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckQueueUpGetCurWorldSuitProxy::IsInitialized() const {
  return true;
}

void AckQueueUpGetCurWorldSuitProxy::InternalSwap(AckQueueUpGetCurWorldSuitProxy* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ticket_, GetArenaForAllocation(),
      &other->ticket_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &world_ip_, GetArenaForAllocation(),
      &other->world_ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckQueueUpGetCurWorldSuitProxy, world_port_)
      + sizeof(AckQueueUpGetCurWorldSuitProxy::world_port_)
      - PROTOBUF_FIELD_OFFSET(AckQueueUpGetCurWorldSuitProxy, transpond_id_)>(
          reinterpret_cast<char*>(&transpond_id_),
          reinterpret_cast<char*>(&other->transpond_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckQueueUpGetCurWorldSuitProxy::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[19]);
}

// ===================================================================

class ReqUpdatePlayerLastHeartbeatTS::_Internal {
 public:
};

ReqUpdatePlayerLastHeartbeatTS::ReqUpdatePlayerLastHeartbeatTS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
}
ReqUpdatePlayerLastHeartbeatTS::ReqUpdatePlayerLastHeartbeatTS(const ReqUpdatePlayerLastHeartbeatTS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_account().empty()) {
    account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_account(), 
      GetArenaForAllocation());
  }
  ts_ = from.ts_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
}

void ReqUpdatePlayerLastHeartbeatTS::SharedCtor() {
account_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ts_ = int64_t{0};
}

ReqUpdatePlayerLastHeartbeatTS::~ReqUpdatePlayerLastHeartbeatTS() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqUpdatePlayerLastHeartbeatTS::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  account_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ReqUpdatePlayerLastHeartbeatTS::ArenaDtor(void* object) {
  ReqUpdatePlayerLastHeartbeatTS* _this = reinterpret_cast< ReqUpdatePlayerLastHeartbeatTS* >(object);
  (void)_this;
}
void ReqUpdatePlayerLastHeartbeatTS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqUpdatePlayerLastHeartbeatTS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqUpdatePlayerLastHeartbeatTS::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  account_.ClearToEmpty();
  ts_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqUpdatePlayerLastHeartbeatTS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes account = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_account();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 ts = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqUpdatePlayerLastHeartbeatTS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_account(), target);
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_ts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  return target;
}

size_t ReqUpdatePlayerLastHeartbeatTS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes account = 1;
  if (!this->account().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_account());
  }

  // int64 ts = 2;
  if (this->ts() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ts());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqUpdatePlayerLastHeartbeatTS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqUpdatePlayerLastHeartbeatTS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqUpdatePlayerLastHeartbeatTS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
    MergeFrom(*source);
  }
}

void ReqUpdatePlayerLastHeartbeatTS::MergeFrom(const ReqUpdatePlayerLastHeartbeatTS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.account().empty()) {
    _internal_set_account(from._internal_account());
  }
  if (from.ts() != 0) {
    _internal_set_ts(from._internal_ts());
  }
}

void ReqUpdatePlayerLastHeartbeatTS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqUpdatePlayerLastHeartbeatTS::CopyFrom(const ReqUpdatePlayerLastHeartbeatTS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqUpdatePlayerLastHeartbeatTS::IsInitialized() const {
  return true;
}

void ReqUpdatePlayerLastHeartbeatTS::InternalSwap(ReqUpdatePlayerLastHeartbeatTS* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &account_, GetArenaForAllocation(),
      &other->account_, other->GetArenaForAllocation()
  );
  swap(ts_, other->ts_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqUpdatePlayerLastHeartbeatTS::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[20]);
}

// ===================================================================

class ReqTestBattle::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqTestBattle* msg);
};

const ::KWMsg::Ident&
ReqTestBattle::_Internal::player_id(const ReqTestBattle* msg) {
  return *msg->player_id_;
}
void ReqTestBattle::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqTestBattle::ReqTestBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqTestBattle)
}
ReqTestBattle::ReqTestBattle(const ReqTestBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battle_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_battle_list().empty()) {
    battle_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_battle_list(), 
      GetArenaForAllocation());
  }
  team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_team_id().empty()) {
    team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqTestBattle)
}

void ReqTestBattle::SharedCtor() {
battle_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqTestBattle::~ReqTestBattle() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqTestBattle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqTestBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  battle_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqTestBattle::ArenaDtor(void* object) {
  ReqTestBattle* _this = reinterpret_cast< ReqTestBattle* >(object);
  (void)_this;
}
void ReqTestBattle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqTestBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqTestBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqTestBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battle_list_.ClearToEmpty();
  team_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqTestBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes battle_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_battle_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqTestBattle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqTestBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes battle_list = 2;
  if (!this->battle_list().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_battle_list(), target);
  }

  // bytes team_id = 3;
  if (!this->team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqTestBattle)
  return target;
}

size_t ReqTestBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqTestBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes battle_list = 2;
  if (!this->battle_list().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_battle_list());
  }

  // bytes team_id = 3;
  if (!this->team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_team_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqTestBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqTestBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqTestBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqTestBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqTestBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqTestBattle)
    MergeFrom(*source);
  }
}

void ReqTestBattle::MergeFrom(const ReqTestBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqTestBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.battle_list().empty()) {
    _internal_set_battle_list(from._internal_battle_list());
  }
  if (!from.team_id().empty()) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqTestBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqTestBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqTestBattle::CopyFrom(const ReqTestBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqTestBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqTestBattle::IsInitialized() const {
  return true;
}

void ReqTestBattle::InternalSwap(ReqTestBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &battle_list_, GetArenaForAllocation(),
      &other->battle_list_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &team_id_, GetArenaForAllocation(),
      &other->team_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqTestBattle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[21]);
}

// ===================================================================

class AckTestBattle::_Internal {
 public:
};

AckTestBattle::AckTestBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckTestBattle)
}
AckTestBattle::AckTestBattle(const AckTestBattle& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  battle_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_battle_list().empty()) {
    battle_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_battle_list(), 
      GetArenaForAllocation());
  }
  team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_team_id().empty()) {
    team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_team_id(), 
      GetArenaForAllocation());
  }
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckTestBattle)
}

void AckTestBattle::SharedCtor() {
battle_list_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
team_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
event_code_ = 0;
}

AckTestBattle::~AckTestBattle() {
  // @@protoc_insertion_point(destructor:KWMsg.AckTestBattle)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckTestBattle::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  battle_list_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  team_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckTestBattle::ArenaDtor(void* object) {
  AckTestBattle* _this = reinterpret_cast< AckTestBattle* >(object);
  (void)_this;
}
void AckTestBattle::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckTestBattle::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckTestBattle::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckTestBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  battle_list_.ClearToEmpty();
  team_id_.ClearToEmpty();
  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckTestBattle::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes battle_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_battle_list();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes team_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_team_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckTestBattle::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckTestBattle)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes battle_list = 2;
  if (!this->battle_list().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_battle_list(), target);
  }

  // bytes team_id = 3;
  if (!this->team_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_team_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckTestBattle)
  return target;
}

size_t AckTestBattle::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckTestBattle)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes battle_list = 2;
  if (!this->battle_list().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_battle_list());
  }

  // bytes team_id = 3;
  if (!this->team_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_team_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckTestBattle::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckTestBattle)
  GOOGLE_DCHECK_NE(&from, this);
  const AckTestBattle* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckTestBattle>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckTestBattle)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckTestBattle)
    MergeFrom(*source);
  }
}

void AckTestBattle::MergeFrom(const AckTestBattle& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckTestBattle)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.battle_list().empty()) {
    _internal_set_battle_list(from._internal_battle_list());
  }
  if (!from.team_id().empty()) {
    _internal_set_team_id(from._internal_team_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckTestBattle::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckTestBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckTestBattle::CopyFrom(const AckTestBattle& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckTestBattle)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckTestBattle::IsInitialized() const {
  return true;
}

void AckTestBattle::InternalSwap(AckTestBattle* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &battle_list_, GetArenaForAllocation(),
      &other->battle_list_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &team_id_, GetArenaForAllocation(),
      &other->team_id_, other->GetArenaForAllocation()
  );
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckTestBattle::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[22]);
}

// ===================================================================

class ReqCollectWitch::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqCollectWitch* msg);
};

const ::KWMsg::Ident&
ReqCollectWitch::_Internal::player_id(const ReqCollectWitch* msg) {
  return *msg->player_id_;
}
void ReqCollectWitch::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqCollectWitch::ReqCollectWitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqCollectWitch)
}
ReqCollectWitch::ReqCollectWitch(const ReqCollectWitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqCollectWitch)
}

void ReqCollectWitch::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ReqCollectWitch::~ReqCollectWitch() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqCollectWitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqCollectWitch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqCollectWitch::ArenaDtor(void* object) {
  ReqCollectWitch* _this = reinterpret_cast< ReqCollectWitch* >(object);
  (void)_this;
}
void ReqCollectWitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqCollectWitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqCollectWitch::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqCollectWitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqCollectWitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqCollectWitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqCollectWitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqCollectWitch)
  return target;
}

size_t ReqCollectWitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqCollectWitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqCollectWitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqCollectWitch)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqCollectWitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqCollectWitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqCollectWitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqCollectWitch)
    MergeFrom(*source);
  }
}

void ReqCollectWitch::MergeFrom(const ReqCollectWitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqCollectWitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ReqCollectWitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqCollectWitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCollectWitch::CopyFrom(const ReqCollectWitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqCollectWitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCollectWitch::IsInitialized() const {
  return true;
}

void ReqCollectWitch::InternalSwap(ReqCollectWitch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqCollectWitch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[23]);
}

// ===================================================================

class AckCollectWitch::_Internal {
 public:
};

AckCollectWitch::AckCollectWitch(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckCollectWitch)
}
AckCollectWitch::AckCollectWitch(const AckCollectWitch& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_witch_id().empty()) {
    witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_witch_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&event_code_, &from.event_code_,
    static_cast<size_t>(reinterpret_cast<char*>(&is_collect_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(is_collect_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckCollectWitch)
}

void AckCollectWitch::SharedCtor() {
witch_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&event_code_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_collect_) -
    reinterpret_cast<char*>(&event_code_)) + sizeof(is_collect_));
}

AckCollectWitch::~AckCollectWitch() {
  // @@protoc_insertion_point(destructor:KWMsg.AckCollectWitch)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckCollectWitch::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  witch_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AckCollectWitch::ArenaDtor(void* object) {
  AckCollectWitch* _this = reinterpret_cast< AckCollectWitch* >(object);
  (void)_this;
}
void AckCollectWitch::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckCollectWitch::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckCollectWitch::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckCollectWitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  witch_id_.ClearToEmpty();
  ::memset(&event_code_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&is_collect_) -
      reinterpret_cast<char*>(&event_code_)) + sizeof(is_collect_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckCollectWitch::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      // bytes witch_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_witch_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_collect = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_collect_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckCollectWitch::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckCollectWitch)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_witch_id(), target);
  }

  // int32 is_collect = 3;
  if (this->is_collect() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_is_collect(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckCollectWitch)
  return target;
}

size_t AckCollectWitch::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckCollectWitch)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes witch_id = 2;
  if (!this->witch_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_witch_id());
  }

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  // int32 is_collect = 3;
  if (this->is_collect() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_collect());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckCollectWitch::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckCollectWitch)
  GOOGLE_DCHECK_NE(&from, this);
  const AckCollectWitch* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckCollectWitch>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckCollectWitch)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckCollectWitch)
    MergeFrom(*source);
  }
}

void AckCollectWitch::MergeFrom(const AckCollectWitch& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckCollectWitch)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.witch_id().empty()) {
    _internal_set_witch_id(from._internal_witch_id());
  }
  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
  if (from.is_collect() != 0) {
    _internal_set_is_collect(from._internal_is_collect());
  }
}

void AckCollectWitch::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckCollectWitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCollectWitch::CopyFrom(const AckCollectWitch& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckCollectWitch)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCollectWitch::IsInitialized() const {
  return true;
}

void AckCollectWitch::InternalSwap(AckCollectWitch* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &witch_id_, GetArenaForAllocation(),
      &other->witch_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AckCollectWitch, is_collect_)
      + sizeof(AckCollectWitch::is_collect_)
      - PROTOBUF_FIELD_OFFSET(AckCollectWitch, event_code_)>(
          reinterpret_cast<char*>(&event_code_),
          reinterpret_cast<char*>(&other->event_code_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AckCollectWitch::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[24]);
}

// ===================================================================

class ReqInitMainRoleName::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ReqInitMainRoleName* msg);
};

const ::KWMsg::Ident&
ReqInitMainRoleName::_Internal::player_id(const ReqInitMainRoleName* msg) {
  return *msg->player_id_;
}
void ReqInitMainRoleName::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
ReqInitMainRoleName::ReqInitMainRoleName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ReqInitMainRoleName)
}
ReqInitMainRoleName::ReqInitMainRoleName(const ReqInitMainRoleName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  is_random_name_ = from.is_random_name_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.ReqInitMainRoleName)
}

void ReqInitMainRoleName::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&is_random_name_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(is_random_name_));
}

ReqInitMainRoleName::~ReqInitMainRoleName() {
  // @@protoc_insertion_point(destructor:KWMsg.ReqInitMainRoleName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReqInitMainRoleName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ReqInitMainRoleName::ArenaDtor(void* object) {
  ReqInitMainRoleName* _this = reinterpret_cast< ReqInitMainRoleName* >(object);
  (void)_this;
}
void ReqInitMainRoleName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReqInitMainRoleName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ReqInitMainRoleName::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ReqInitMainRoleName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  is_random_name_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReqInitMainRoleName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 is_random_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          is_random_name_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReqInitMainRoleName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ReqInitMainRoleName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes name = 2;
  if (!this->name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_name(), target);
  }

  // int32 is_random_name = 3;
  if (this->is_random_name() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_is_random_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ReqInitMainRoleName)
  return target;
}

size_t ReqInitMainRoleName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ReqInitMainRoleName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes name = 2;
  if (!this->name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 is_random_name = 3;
  if (this->is_random_name() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_is_random_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReqInitMainRoleName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ReqInitMainRoleName)
  GOOGLE_DCHECK_NE(&from, this);
  const ReqInitMainRoleName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReqInitMainRoleName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ReqInitMainRoleName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ReqInitMainRoleName)
    MergeFrom(*source);
  }
}

void ReqInitMainRoleName::MergeFrom(const ReqInitMainRoleName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ReqInitMainRoleName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.is_random_name() != 0) {
    _internal_set_is_random_name(from._internal_is_random_name());
  }
}

void ReqInitMainRoleName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ReqInitMainRoleName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInitMainRoleName::CopyFrom(const ReqInitMainRoleName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ReqInitMainRoleName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInitMainRoleName::IsInitialized() const {
  return true;
}

void ReqInitMainRoleName::InternalSwap(ReqInitMainRoleName* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, GetArenaForAllocation(),
      &other->name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ReqInitMainRoleName, is_random_name_)
      + sizeof(ReqInitMainRoleName::is_random_name_)
      - PROTOBUF_FIELD_OFFSET(ReqInitMainRoleName, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ReqInitMainRoleName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[25]);
}

// ===================================================================

class AckInitMainRoleName::_Internal {
 public:
};

AckInitMainRoleName::AckInitMainRoleName(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.AckInitMainRoleName)
}
AckInitMainRoleName::AckInitMainRoleName(const AckInitMainRoleName& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  event_code_ = from.event_code_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.AckInitMainRoleName)
}

void AckInitMainRoleName::SharedCtor() {
event_code_ = 0;
}

AckInitMainRoleName::~AckInitMainRoleName() {
  // @@protoc_insertion_point(destructor:KWMsg.AckInitMainRoleName)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AckInitMainRoleName::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckInitMainRoleName::ArenaDtor(void* object) {
  AckInitMainRoleName* _this = reinterpret_cast< AckInitMainRoleName* >(object);
  (void)_this;
}
void AckInitMainRoleName::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckInitMainRoleName::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckInitMainRoleName::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.AckInitMainRoleName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  event_code_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckInitMainRoleName::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.EGameEventCode event_code = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_event_code(static_cast<::KWMsg::EGameEventCode>(val));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AckInitMainRoleName::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.AckInitMainRoleName)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_event_code(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.AckInitMainRoleName)
  return target;
}

size_t AckInitMainRoleName::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.AckInitMainRoleName)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.EGameEventCode event_code = 1;
  if (this->event_code() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_event_code());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AckInitMainRoleName::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.AckInitMainRoleName)
  GOOGLE_DCHECK_NE(&from, this);
  const AckInitMainRoleName* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AckInitMainRoleName>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.AckInitMainRoleName)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.AckInitMainRoleName)
    MergeFrom(*source);
  }
}

void AckInitMainRoleName::MergeFrom(const AckInitMainRoleName& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.AckInitMainRoleName)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.event_code() != 0) {
    _internal_set_event_code(from._internal_event_code());
  }
}

void AckInitMainRoleName::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.AckInitMainRoleName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckInitMainRoleName::CopyFrom(const AckInitMainRoleName& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.AckInitMainRoleName)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckInitMainRoleName::IsInitialized() const {
  return true;
}

void AckInitMainRoleName::InternalSwap(AckInitMainRoleName* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(event_code_, other->event_code_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckInitMainRoleName::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgshare_2eproto_getter, &descriptor_table_kwmsgshare_2eproto_once,
      file_level_metadata_kwmsgshare_2eproto[26]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace KWMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAckLagTest* Arena::CreateMaybeMessage< ::KWMsg::ReqAckLagTest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAckLagTest >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAckHeartBeat* Arena::CreateMaybeMessage< ::KWMsg::ReqAckHeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAckHeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqLeaveGameServer* Arena::CreateMaybeMessage< ::KWMsg::ReqLeaveGameServer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqLeaveGameServer >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PlayerEntryInfo* Arena::CreateMaybeMessage< ::KWMsg::PlayerEntryInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PlayerEntryInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckPlayerEntryList* Arena::CreateMaybeMessage< ::KWMsg::AckPlayerEntryList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckPlayerEntryList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckPlayerLeaveList* Arena::CreateMaybeMessage< ::KWMsg::AckPlayerLeaveList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckPlayerLeaveList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckPlayerDataFinished* Arena::CreateMaybeMessage< ::KWMsg::AckPlayerDataFinished >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckPlayerDataFinished >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PosSyncUnit* Arena::CreateMaybeMessage< ::KWMsg::PosSyncUnit >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PosSyncUnit >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAckPlayerPosSync* Arena::CreateMaybeMessage< ::KWMsg::ReqAckPlayerPosSync >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAckPlayerPosSync >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqSwapScene* Arena::CreateMaybeMessage< ::KWMsg::ReqSwapScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqSwapScene >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckSwapScene* Arena::CreateMaybeMessage< ::KWMsg::AckSwapScene >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckSwapScene >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqAckPlayerChat* Arena::CreateMaybeMessage< ::KWMsg::ReqAckPlayerChat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqAckPlayerChat >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCreateKcpObject* Arena::CreateMaybeMessage< ::KWMsg::ReqCreateKcpObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCreateKcpObject >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCreateKcpObject* Arena::CreateMaybeMessage< ::KWMsg::AckCreateKcpObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCreateKcpObject >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqEstablishKcpConnection* Arena::CreateMaybeMessage< ::KWMsg::ReqEstablishKcpConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqEstablishKcpConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckEstablishKcpConnection* Arena::CreateMaybeMessage< ::KWMsg::AckEstablishKcpConnection >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckEstablishKcpConnection >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqTryPushClientIntoQueueUp* Arena::CreateMaybeMessage< ::KWMsg::ReqTryPushClientIntoQueueUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqTryPushClientIntoQueueUp >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckPushClientIntoQueueUp* Arena::CreateMaybeMessage< ::KWMsg::AckPushClientIntoQueueUp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckPushClientIntoQueueUp >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqQueueUpGetCurWorldSuitProxy* Arena::CreateMaybeMessage< ::KWMsg::ReqQueueUpGetCurWorldSuitProxy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqQueueUpGetCurWorldSuitProxy >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckQueueUpGetCurWorldSuitProxy* Arena::CreateMaybeMessage< ::KWMsg::AckQueueUpGetCurWorldSuitProxy >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckQueueUpGetCurWorldSuitProxy >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqUpdatePlayerLastHeartbeatTS* Arena::CreateMaybeMessage< ::KWMsg::ReqUpdatePlayerLastHeartbeatTS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqUpdatePlayerLastHeartbeatTS >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqTestBattle* Arena::CreateMaybeMessage< ::KWMsg::ReqTestBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqTestBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckTestBattle* Arena::CreateMaybeMessage< ::KWMsg::AckTestBattle >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckTestBattle >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqCollectWitch* Arena::CreateMaybeMessage< ::KWMsg::ReqCollectWitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqCollectWitch >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckCollectWitch* Arena::CreateMaybeMessage< ::KWMsg::AckCollectWitch >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckCollectWitch >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ReqInitMainRoleName* Arena::CreateMaybeMessage< ::KWMsg::ReqInitMainRoleName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ReqInitMainRoleName >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::AckInitMainRoleName* Arena::CreateMaybeMessage< ::KWMsg::AckInitMainRoleName >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::AckInitMainRoleName >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
