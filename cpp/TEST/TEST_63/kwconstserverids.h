#ifndef KW_CONST_SERVER_IDS_HPP
#define KW_CONST_SERVER_IDS_HPP

#include <string>
namespace KWFrame
{
class KWConstServerIds
{
public:
    static const std::string& KW_LOGIN_MIN_PW_LENGTH();
    static const std::string& KW_LOGIN_MAX_PW_LENGTH();
    static const std::string& KW_LOGIN_MAX_PIN_CD_SECONDS();
    static const std::string& KW_LOGIN_SERVER_HOT_TIME();
    static const std::string& KW_WITCH_ATTACK_ENERGY_REWARD ();
    static const std::string& KW_WITCH_SKILL_ENERGY_REWARD();
    static const std::string& KW_JUNIOR_MON_ATTACK_ENERGY_REWARD();
    static const std::string& KW_INTERMEDIATE_MON_ATTACK_ENERGY_REWARD();
    static const std::string& KW_SENIOR_MON_ATTACK_ENERGY_REWARD();
    static const std::string& KW_BOSS_ATTACK_ENERGY_REWARD();
    static const std::string& KW_MAX_ENERGY();
    static const std::string& KW_CRISTAL_CONVERT_UNIT();
    static const std::string& KW_MAX_CRISTAL();
    static const std::string& KW_WITCH_FIGHT_LEVEL_GROWTH();
    static const std::string& KW_WITCH_STAR_INITIAL();
    static const std::string& KW_WITCH_STAR_LIMIT();
    static const std::string& KW_WITCH_HP_GROWTH_LIMIT();
    static const std::string& KW_WITCH_DEFENCE_GROWTH_LIMIT();
    static const std::string& KW_WITCH_SPEED_GROWTH_LIMIT();
    static const std::string& KW_WITCH_ATTACK_MIN_GROWTH_LIMIT();
    static const std::string& KW_WITCH_ATTACK_MAX_GROWTH_LIMIT();
    static const std::string& KW_WITCH_CRIT_GROWTH_LIMIT();
    static const std::string& KW_WITCH_HIT_GROWTH_LIMIT();
    static const std::string& KW_WITCH_RESIST_GROWTH_LIMIT();
    static const std::string& KW_WITCH_EMOTION_LEVEL();
    static const std::string& KW_NAME_SPECIAL_MARK();
    static const std::string& KW_LOGIN_QUEUE_HEARTBEAT();
    static const std::string& KW_MH_MAX();
    static const std::string& KW_MH_MIN();
    static const std::string& KW_MH_WITCH_ATTACK_INCR();
    static const std::string& KW_MH_WITCH_SKILL_INCR();
    static const std::string& KW_MH_WITCH_SPECIAL_INCR();
    static const std::string& KW_MH_JNR_ITM_ATTACK_INCR();
    static const std::string& KW_MH_JNR_ITM_SKILL_INCR();
    static const std::string& KW_MH_JNR_ITM_SPECIAL_INCR();
    static const std::string& KW_MH_SNR_BOSS_ATTACK_INCR();
    static const std::string& KW_MH_SNR_BOSS_SKILL_INCR();
    static const std::string& KW_MH_SNR_BOSS_SPECIAL_INCR();
    static const std::string& KW_MH_TYPE_RESTRAINTS();
    static const std::string& KW_MH_RESTRAINT_APPEND_DAMAGE_RATIO();
    static const std::string& KW_POWER_RECOVER_TIME();
    static const std::string& KW_AVG_MODULE_CREATE();
    static const std::string& KW_ENERGY_PURCHASE_RULE();
    static const std::string& KW_ENERGY_PURCHASE_REFRESH();
    static const std::string& KW_ENERGY_PURCHASE_AMOUNT();
    static const std::string& KW_BIGROUND_RECOVER_CRISTAL_BY_TYPE_0();
    static const std::string& KW_BIGROUND_RECOVER_CRISTAL_BY_TYPE_1();
    static const std::string& KW_BIGROUND_RECOVER_CRISTAL_BY_TYPE_2();
    static const std::string& KW_BIGROUND_RECOVER_CRISTAL_BY_TYPE_3();
    static const std::string& KW_WITCH_TEAM_COUNT_LIMIT();
    static const std::string& KW_COLLEGE_HOMEWORK_INT_DELAY_TIME();
    static const std::string& KW_COLLEGE_EXAMINATION_DELAY_TIME();
    static const std::string& KW_HERO_ID();
    static const std::string& KW_SEND_GIFT_FREE_NUM();
    static const std::string& KW_SEND_GIFT_FAVORITE_REWARD();
    static const std::string& KW_SEND_GIFT_GEMERIC_REWARD();
    static const std::string& KW_SEND_GIFT_BORING_REWARD();
    static const std::string& KW_WITCH_LEVEL_MAX_NUM();
    static const std::string& KW_WITCH_FAVORATE_MAX_NUM();
    static const std::string& KW_HOUSEKEEPER_DEFAULT_WITCH();
    static const std::string& KW_FASTPAY_TESTVALUE();
    static const std::string& KW_ACTIVEMISSION_DAILY();
    static const std::string& KW_ACTIVEMISSION_WEEKLY();
    static const std::string& KW_ACTIVE_DALIY_RESOURCE();
    static const std::string& KW_ACTIVE_WEEKLY_RESOURCE();
    static const std::string& KW_WITCH_SHARD_COMMON_ID();
    static const std::string& KW_EXPLORE_MAX_SWEEP_COUNT();
    static const std::string& KW_POWER_PURCHASE_TOP_LIMIT();
    static const std::string& KW_MAIL_STORAGE_LIMIT();
    static const std::string& KW_MAIL_STORAGE_TIME();
    static const std::string& KW_MAIL_ADDRESSER_NAME();
    static const std::string& KW_MAIL_TEXT_LIMIT();
    static const std::string& KW_MAIL_ATTACHMENT_TEST();
    static const std::string& KW_PNEUMA_BAG_BOXNUM();
    static const std::string& KW_PNEUMA_BAG_UPGRADE_COST();
    static const std::string& KW_PNEUMA_BAG_UPGRADE_BOXNUM();
    static const std::string& KW_PNEUMA_BAG_UPGRADE_BOXNUM_LIMIT();
    static const std::string& KW_PNEUMA_RESONATE_ATTR_COLECTION();
    static const std::string& KW_MAIL_TITLE_LIMIT();
    static const std::string& KW_TOWER_COST();
    static const std::string& KW_TOWER_KEY_LIMIT();
    static const std::string& KW_TOWER_KEY_TOTAL_LIMIT();
    static const std::string& KW_SDK_APP_ID();
    static const std::string& KW_TOWER_SWEPT_TIME_SINGULAR();
    static const std::string& KW_TOWER_SWEPT_TIME_PLURAL();
    static const std::string& KW_GUILD_CREATE_COST();
    static const std::string& KW_GUILD_INVITE_LIMIT();
    static const std::string& KW_GUILD_APPLY_LIMIT();
    static const std::string& KW_GUILD_SEND_REQUEST_LIMIT();
    static const std::string& KW_GUILD_SEARCH_COLD_DOWN();
    static const std::string& KW_GUILD_QUICK_JOIN_COLD_DOWN();
    static const std::string& KW_BOTARENAINFO_ID();
    static const std::string& KW_GUILD_NAME_TEXT_LIMIT();
    static const std::string& KW_GUILD_PROFILE_TEXT_LIMIT();
    static const std::string& KW_GUILD_CHANGE_NAME_COST();
    static const std::string& KW_GUILD_OPERATION_FREQUENCY_TIME();
    static const std::string& KW_GUILD_KICK_MEMBER_TIME();
    static const std::string& KW_CHAT_REPORT_LIMIT();
    static const std::string& KW_GUILD_JOIN_COLD_TIME();
    static const std::string& KW_SCENE_HOME();
    static const std::string& KW_FRIEND_LIMIT();
    static const std::string& KW_FRIEND_REQUEST_LIMIT();
    static const std::string& KW_FRIEND_RECOMMEND_LIST_REFRESH_COLDDOWN();
    static const std::string& KW_FRIEND_BLACKLIST_LIMIT();
    static const std::string& KW_FRIEND_SEARCH_COLD_DOWN();
    static const std::string& KW_BLACKMARKET_REFRESH_COUNT_FREE();
    static const std::string& KW_BLACKMARKET_REFRESH_COUNT_TOTAL();
    static const std::string& KW_BLACKMARKET_REFRESH_COST();
    static const std::string& KW_BLACKMARKET_REFRESH_TIME_LOCAL();
    static const std::string& KW_BLACKMARKET_REFRESH_TIME_OUTSIDE();
    static const std::string& KW_PNEUMA_STRONG_COST_NORMAL();
    static const std::string& KW_PNEUMA_STRONG_COST_SPECIAL_1();
    static const std::string& KW_PNEUMA_STRONG_COST_SPECIAL_2();
    static const std::string& KW_PNEUMA_STRONG_COST_SPECIAL_3();
    static const std::string& KW_PNEUMA_STRONG_COST_SPECIAL_4();
    static const std::string& KW_PNEUMA_STRONG_COST_SPECIAL_5();
    static const std::string& KW_CONSUL_IP();
    static const std::string& KW_CONSUL_PORT();
    static const std::string& KW_CONSUL_ID();
    static const std::string& KW_CONSUL_NAME();
    static const std::string& KW_KAFKA_BROKERS();
    static const std::string& KW_REQ_MAX_ROW_PER_PAGE();
    static const std::string& KW_REQ_MAX_TIMEOUT_SECONDS();
    static const std::string& KW_LOGIN_MAX_TIMEOUT_SECONDS();
    static const std::string& KW_LOGIN_MAX_HISTORY_INFORMATION_DAYS();
    static const std::string& KW_LOGIN_MAX_PIN_AMOUNT();
    static const std::string& KW_LOGIN_MAX_SAVE_TIME_SECONDS();
    static const std::string& KW_BTL_SPEED_THRESHOLD();
    static const std::string& KW_BTL_THUMP_THRESHOLD();
    static const std::string& KW_ROLE_CRITICAL_DAMAGE();
    static const std::string& KW_ROLE_DEFENCE_RESIST_TRANSFER();
    static const std::string& KW_BTL_MAX_CONTINUE_UNHIT_COUNT();
    static const std::string& KW_WITCH_SKILLUNLOCK_PASSIVE1();
    static const std::string& KW_WITCH_SKILLUNLOCK_PASSIVE2();
    static const std::string& KW_WITCH_SKILLUNLOCK_PASSIVE3();
    static const std::string& KW_WITCH_SKILLUNLOCK_MASTER();
    static const std::string& KW_CHANNEL_ID();
    static const std::string& KW_APT_EARLIER_STAGE_ROUND_RANGE();
    static const std::string& KW_APT_MIDDLE_STAGE_ROUND_RANGE();
    static const std::string& KW_APT_LATER_STAGE_ROUND_RANGE();
    static const std::string& KW_MAINSTORY_FIRST_MODULE();
    static const std::string& KW_FINAL_DOT_HOT_PERCENT();
    static const std::string& KW_BATTLE_TEST_WITCHES();
    static const std::string& KW_PROLOGUE_LAST_MODULE();
    static const std::string& KW_ITEM_STACK_LIMIT();
    static const std::string& KW_ITEM_PACKAGE_LIMIT();
    static const std::string& KW_INSTITUTE_FIRST_SEMETER();
    static const std::string& KW_BTL_DEFENSE_IGNORE_BY_DOT();
    static const std::string& KW_BTL_COEFF_FUNC_MAX_BIG_ROUND();
    static const std::string& KW_COLLEGE_EXAMINATION_QUESTION_NUM();
    static const std::string& KW_DISPATCH_SWITCH_APPOINT_AREA_CD();
    static const std::string& KW_DATA_RESET_PER_MONTH();
    static const std::string& KW_DATA_RESET_PER_WEEK();
    static const std::string& KW_DATA_RESET_PER_DAY();
    static const std::string& KW_DISPATCH_AFFAIR_REWARD_ADD_RATIO();
    static const std::string& KW_DIVINE_POKERHANDS_PROBABILITY();
    static const std::string& KW_DIVINE_POKER_PROBABILITY();
    static const std::string& KW_DIVINE_7DAY_REWARD();
    static const std::string& KW_DIVINE_15DAY_REWARD();
    static const std::string& KW_DIVINE_30DAY_REWARD();
    static const std::string& KW_DOT_OR_HOT_BUFF_LIMIT();
    static const std::string& KW_GOOD_OR_BAD_BUFF_LIMIT();
    static const std::string& KW_BUFF_EFFECT_TYPE_SETTLEMENT_SEQUENCE();
    static const std::string& KW_RESTRAIN_TARGET_SELECT_WEIGHT();
    static const std::string& KW_OTHER_TARGET_SELECT_WEIGHT();
    static const std::string& KW_MAGIC_RESONANCE_SAME_TYPE_ATTR_ADDITION();
    static const std::string& KW_MAGIC_RESONANCE_LIGHT_TYPE_ATTR_ADDITION();
    static const std::string& KW_MAGIC_RESONANCE_DARK_TYPE_ATTR_ADDITION();
    static const std::string& KW_SDK_SECURITY_KEY();
    static const std::string& KW_SDK_LOGIN_VERIFY_URL();
    static const std::string& KW_PLAYER_INIT_WITCHES();
    static const std::string& KW_PLAYER_INIT_ITEMS();
    static const std::string& KW_TOWER_FIRST_STAGE();
    static const std::string& KW_CHAT_SDK_CLIENT_ID();
    static const std::string& KW_CHAT_SDK_CLIENT_SECRET();
    static const std::string& KW_CHAT_SDK_SERVER_HOST();
    static const std::string& KW_CHAT_SDK_ORG_NAME();
    static const std::string& KW_CHAT_SDK_APP_NAME();
    static const std::string& KW_CHAT_AUTO_MUZZLE();
    static const std::string& KW_GUILD_SIGNIN_REWARD();
    static const std::string& KW_GUILD_SIGNIN_ACTIVE();
    static const std::string& KW_GUILD_SIGNIN_EXP();
    static const std::string& KW_GUILD_OWNER_AUTO_CHANGE_TIME();
    static const std::string& KW_GUILD_APPLY_LIST_AUTO_CLEAN_TIME();
    static const std::string& KW_GUILD_KICKED_MAIL();
    static const std::string& KW_GUILD_OWNER_CHANGE_MAIL();
    static const std::string& KW_FRIEND_RECOMMEND_LIST_LIMIT();
    static const std::string& KW_FRIEND_RECOMMEND_RANK();
    static const std::string& KW_FRIEND_RECOMMEND_LEVEL();
    static const std::string& KW_FRIEND_RECOMMEND_LEVEL_REGION();
};
} // namespace KWFrame
#endif
