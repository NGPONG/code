// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kwmsgbase.proto

#include "kwmsgbase.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace KWMsg {
constexpr Ident::Ident(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : svrid_(int64_t{0})
  , index_(int64_t{0}){}
struct IdentDefaultTypeInternal {
  constexpr IdentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IdentDefaultTypeInternal() {}
  union {
    Ident _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IdentDefaultTypeInternal _Ident_default_instance_;
constexpr Vector2::Vector2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0){}
struct Vector2DefaultTypeInternal {
  constexpr Vector2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector2DefaultTypeInternal() {}
  union {
    Vector2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector2DefaultTypeInternal _Vector2_default_instance_;
constexpr Vector3::Vector3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : x_(0)
  , y_(0)
  , z_(0){}
struct Vector3DefaultTypeInternal {
  constexpr Vector3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Vector3DefaultTypeInternal() {}
  union {
    Vector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Vector3DefaultTypeInternal _Vector3_default_instance_;
constexpr PropertyInt::PropertyInt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(int64_t{0}){}
struct PropertyIntDefaultTypeInternal {
  constexpr PropertyIntDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropertyIntDefaultTypeInternal() {}
  union {
    PropertyInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropertyIntDefaultTypeInternal _PropertyInt_default_instance_;
constexpr PropertyFloat::PropertyFloat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(0){}
struct PropertyFloatDefaultTypeInternal {
  constexpr PropertyFloatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropertyFloatDefaultTypeInternal() {}
  union {
    PropertyFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropertyFloatDefaultTypeInternal _PropertyFloat_default_instance_;
constexpr PropertyString::PropertyString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PropertyStringDefaultTypeInternal {
  constexpr PropertyStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropertyStringDefaultTypeInternal() {}
  union {
    PropertyString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropertyStringDefaultTypeInternal _PropertyString_default_instance_;
constexpr PropertyObject::PropertyObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr){}
struct PropertyObjectDefaultTypeInternal {
  constexpr PropertyObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropertyObjectDefaultTypeInternal() {}
  union {
    PropertyObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropertyObjectDefaultTypeInternal _PropertyObject_default_instance_;
constexpr PropertyVector2::PropertyVector2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr){}
struct PropertyVector2DefaultTypeInternal {
  constexpr PropertyVector2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropertyVector2DefaultTypeInternal() {}
  union {
    PropertyVector2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropertyVector2DefaultTypeInternal _PropertyVector2_default_instance_;
constexpr PropertyVector3::PropertyVector3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , data_(nullptr){}
struct PropertyVector3DefaultTypeInternal {
  constexpr PropertyVector3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PropertyVector3DefaultTypeInternal() {}
  union {
    PropertyVector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PropertyVector3DefaultTypeInternal _PropertyVector3_default_instance_;
constexpr RecordInt::RecordInt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_(0)
  , col_(0)
  , data_(int64_t{0}){}
struct RecordIntDefaultTypeInternal {
  constexpr RecordIntDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordIntDefaultTypeInternal() {}
  union {
    RecordInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordIntDefaultTypeInternal _RecordInt_default_instance_;
constexpr RecordFloat::RecordFloat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_(0)
  , col_(0)
  , data_(0){}
struct RecordFloatDefaultTypeInternal {
  constexpr RecordFloatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordFloatDefaultTypeInternal() {}
  union {
    RecordFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordFloatDefaultTypeInternal _RecordFloat_default_instance_;
constexpr RecordString::RecordString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , row_(0)
  , col_(0){}
struct RecordStringDefaultTypeInternal {
  constexpr RecordStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordStringDefaultTypeInternal() {}
  union {
    RecordString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordStringDefaultTypeInternal _RecordString_default_instance_;
constexpr RecordObject::RecordObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr)
  , row_(0)
  , col_(0){}
struct RecordObjectDefaultTypeInternal {
  constexpr RecordObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordObjectDefaultTypeInternal() {}
  union {
    RecordObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordObjectDefaultTypeInternal _RecordObject_default_instance_;
constexpr RecordVector2::RecordVector2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr)
  , row_(0)
  , col_(0){}
struct RecordVector2DefaultTypeInternal {
  constexpr RecordVector2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordVector2DefaultTypeInternal() {}
  union {
    RecordVector2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordVector2DefaultTypeInternal _RecordVector2_default_instance_;
constexpr RecordVector3::RecordVector3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : data_(nullptr)
  , row_(0)
  , col_(0){}
struct RecordVector3DefaultTypeInternal {
  constexpr RecordVector3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordVector3DefaultTypeInternal() {}
  union {
    RecordVector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordVector3DefaultTypeInternal _RecordVector3_default_instance_;
constexpr RecordAddRowStruct::RecordAddRowStruct(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_int_list_()
  , record_float_list_()
  , record_string_list_()
  , record_object_list_()
  , record_vector2_list_()
  , record_vector3_list_()
  , row_(0){}
struct RecordAddRowStructDefaultTypeInternal {
  constexpr RecordAddRowStructDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~RecordAddRowStructDefaultTypeInternal() {}
  union {
    RecordAddRowStruct _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT RecordAddRowStructDefaultTypeInternal _RecordAddRowStruct_default_instance_;
constexpr ObjectRecordBase::ObjectRecordBase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_struct_()
  , record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ObjectRecordBaseDefaultTypeInternal {
  constexpr ObjectRecordBaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectRecordBaseDefaultTypeInternal() {}
  union {
    ObjectRecordBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectRecordBaseDefaultTypeInternal _ObjectRecordBase_default_instance_;
constexpr ObjectPropertyInt::ObjectPropertyInt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_list_()
  , player_id_(nullptr){}
struct ObjectPropertyIntDefaultTypeInternal {
  constexpr ObjectPropertyIntDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectPropertyIntDefaultTypeInternal() {}
  union {
    ObjectPropertyInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectPropertyIntDefaultTypeInternal _ObjectPropertyInt_default_instance_;
constexpr ObjectPropertyFloat::ObjectPropertyFloat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_list_()
  , player_id_(nullptr){}
struct ObjectPropertyFloatDefaultTypeInternal {
  constexpr ObjectPropertyFloatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectPropertyFloatDefaultTypeInternal() {}
  union {
    ObjectPropertyFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectPropertyFloatDefaultTypeInternal _ObjectPropertyFloat_default_instance_;
constexpr ObjectPropertyString::ObjectPropertyString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_list_()
  , player_id_(nullptr){}
struct ObjectPropertyStringDefaultTypeInternal {
  constexpr ObjectPropertyStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectPropertyStringDefaultTypeInternal() {}
  union {
    ObjectPropertyString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectPropertyStringDefaultTypeInternal _ObjectPropertyString_default_instance_;
constexpr ObjectPropertyObject::ObjectPropertyObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_list_()
  , player_id_(nullptr){}
struct ObjectPropertyObjectDefaultTypeInternal {
  constexpr ObjectPropertyObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectPropertyObjectDefaultTypeInternal() {}
  union {
    ObjectPropertyObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectPropertyObjectDefaultTypeInternal _ObjectPropertyObject_default_instance_;
constexpr ObjectPropertyVector2::ObjectPropertyVector2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_list_()
  , player_id_(nullptr){}
struct ObjectPropertyVector2DefaultTypeInternal {
  constexpr ObjectPropertyVector2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectPropertyVector2DefaultTypeInternal() {}
  union {
    ObjectPropertyVector2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectPropertyVector2DefaultTypeInternal _ObjectPropertyVector2_default_instance_;
constexpr ObjectPropertyVector3::ObjectPropertyVector3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_list_()
  , player_id_(nullptr){}
struct ObjectPropertyVector3DefaultTypeInternal {
  constexpr ObjectPropertyVector3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectPropertyVector3DefaultTypeInternal() {}
  union {
    ObjectPropertyVector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectPropertyVector3DefaultTypeInternal _ObjectPropertyVector3_default_instance_;
constexpr ObjectRecordInt::ObjectRecordInt(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_list_()
  , record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ObjectRecordIntDefaultTypeInternal {
  constexpr ObjectRecordIntDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectRecordIntDefaultTypeInternal() {}
  union {
    ObjectRecordInt _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectRecordIntDefaultTypeInternal _ObjectRecordInt_default_instance_;
constexpr ObjectRecordFloat::ObjectRecordFloat(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_list_()
  , record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ObjectRecordFloatDefaultTypeInternal {
  constexpr ObjectRecordFloatDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectRecordFloatDefaultTypeInternal() {}
  union {
    ObjectRecordFloat _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectRecordFloatDefaultTypeInternal _ObjectRecordFloat_default_instance_;
constexpr ObjectRecordString::ObjectRecordString(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_list_()
  , record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ObjectRecordStringDefaultTypeInternal {
  constexpr ObjectRecordStringDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectRecordStringDefaultTypeInternal() {}
  union {
    ObjectRecordString _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectRecordStringDefaultTypeInternal _ObjectRecordString_default_instance_;
constexpr ObjectRecordObject::ObjectRecordObject(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_list_()
  , record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ObjectRecordObjectDefaultTypeInternal {
  constexpr ObjectRecordObjectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectRecordObjectDefaultTypeInternal() {}
  union {
    ObjectRecordObject _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectRecordObjectDefaultTypeInternal _ObjectRecordObject_default_instance_;
constexpr ObjectRecordVector2::ObjectRecordVector2(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_list_()
  , record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ObjectRecordVector2DefaultTypeInternal {
  constexpr ObjectRecordVector2DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectRecordVector2DefaultTypeInternal() {}
  union {
    ObjectRecordVector2 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectRecordVector2DefaultTypeInternal _ObjectRecordVector2_default_instance_;
constexpr ObjectRecordVector3::ObjectRecordVector3(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_list_()
  , record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ObjectRecordVector3DefaultTypeInternal {
  constexpr ObjectRecordVector3DefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectRecordVector3DefaultTypeInternal() {}
  union {
    ObjectRecordVector3 _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectRecordVector3DefaultTypeInternal _ObjectRecordVector3_default_instance_;
constexpr ObjectRecordSwap::ObjectRecordSwap(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , row_origin_(0)
  , row_target_(0){}
struct ObjectRecordSwapDefaultTypeInternal {
  constexpr ObjectRecordSwapDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectRecordSwapDefaultTypeInternal() {}
  union {
    ObjectRecordSwap _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectRecordSwapDefaultTypeInternal _ObjectRecordSwap_default_instance_;
constexpr ObjectRecordAddRow::ObjectRecordAddRow(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : row_data_()
  , record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ObjectRecordAddRowDefaultTypeInternal {
  constexpr ObjectRecordAddRowDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectRecordAddRowDefaultTypeInternal() {}
  union {
    ObjectRecordAddRow _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectRecordAddRowDefaultTypeInternal _ObjectRecordAddRow_default_instance_;
constexpr ObjectRecordRemove::ObjectRecordRemove(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : remove_row_()
  , _remove_row_cached_byte_size_()
  , record_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr){}
struct ObjectRecordRemoveDefaultTypeInternal {
  constexpr ObjectRecordRemoveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectRecordRemoveDefaultTypeInternal() {}
  union {
    ObjectRecordRemove _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectRecordRemoveDefaultTypeInternal _ObjectRecordRemove_default_instance_;
constexpr ObjectPropertyList::ObjectPropertyList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : property_int_list_()
  , property_float_list_()
  , property_string_list_()
  , property_object_list_()
  , property_vector2_list_()
  , property_vector3_list_()
  , player_id_(nullptr){}
struct ObjectPropertyListDefaultTypeInternal {
  constexpr ObjectPropertyListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectPropertyListDefaultTypeInternal() {}
  union {
    ObjectPropertyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectPropertyListDefaultTypeInternal _ObjectPropertyList_default_instance_;
constexpr MultiObjectPropertyList::MultiObjectPropertyList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : multi_player_property_(){}
struct MultiObjectPropertyListDefaultTypeInternal {
  constexpr MultiObjectPropertyListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiObjectPropertyListDefaultTypeInternal() {}
  union {
    MultiObjectPropertyList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiObjectPropertyListDefaultTypeInternal _MultiObjectPropertyList_default_instance_;
constexpr ObjectRecordList::ObjectRecordList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : record_list_()
  , player_id_(nullptr){}
struct ObjectRecordListDefaultTypeInternal {
  constexpr ObjectRecordListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectRecordListDefaultTypeInternal() {}
  union {
    ObjectRecordList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectRecordListDefaultTypeInternal _ObjectRecordList_default_instance_;
constexpr MultiObjectRecordList::MultiObjectRecordList(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : multi_player_record_(){}
struct MultiObjectRecordListDefaultTypeInternal {
  constexpr MultiObjectRecordListDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MultiObjectRecordListDefaultTypeInternal() {}
  union {
    MultiObjectRecordList _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MultiObjectRecordListDefaultTypeInternal _MultiObjectRecordList_default_instance_;
constexpr ObjectRecordPagination::ObjectRecordPagination(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_id_(nullptr)
  , record_list_(nullptr)
  , ret_type_(0)

  , cursor_prev_(0)
  , cursor_next_(0)
  , is_end_(false)
  , count_(0){}
struct ObjectRecordPaginationDefaultTypeInternal {
  constexpr ObjectRecordPaginationDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ObjectRecordPaginationDefaultTypeInternal() {}
  union {
    ObjectRecordPagination _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ObjectRecordPaginationDefaultTypeInternal _ObjectRecordPagination_default_instance_;
constexpr DeviceInfo::DeviceInfo(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : platform_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , media_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , mac_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , ip_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_model_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_sys_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , idfa_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , device_id_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , os_(0)
  , device_ram_(0){}
struct DeviceInfoDefaultTypeInternal {
  constexpr DeviceInfoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeviceInfoDefaultTypeInternal() {}
  union {
    DeviceInfo _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
constexpr MsgBase::MsgBase(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : player_client_list_()
  , msg_data_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , player_id_(nullptr)
  , hash_ident_(nullptr){}
struct MsgBaseDefaultTypeInternal {
  constexpr MsgBaseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgBaseDefaultTypeInternal() {}
  union {
    MsgBase _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgBaseDefaultTypeInternal _MsgBase_default_instance_;
}  // namespace KWMsg
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_kwmsgbase_2eproto[39];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_kwmsgbase_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_kwmsgbase_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_kwmsgbase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::Ident, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::Ident, svrid_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::Ident, index_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::Vector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::Vector2, x_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::Vector2, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::Vector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::Vector3, x_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::Vector3, y_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::Vector3, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyInt, property_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyInt, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyFloat, property_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyFloat, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyString, property_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyString, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyObject, property_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyObject, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyVector2, property_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyVector2, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyVector3, property_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::PropertyVector3, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordInt, row_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordInt, col_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordInt, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordFloat, row_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordFloat, col_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordFloat, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordString, row_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordString, col_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordString, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordObject, row_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordObject, col_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordObject, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordVector2, row_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordVector2, col_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordVector2, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordVector3, row_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordVector3, col_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordVector3, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordAddRowStruct, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordAddRowStruct, row_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordAddRowStruct, record_int_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordAddRowStruct, record_float_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordAddRowStruct, record_string_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordAddRowStruct, record_object_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordAddRowStruct, record_vector2_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::RecordAddRowStruct, record_vector3_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordBase, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordBase, row_struct_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyInt, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyInt, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyFloat, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyFloat, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyString, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyString, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyObject, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyObject, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyVector2, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyVector2, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyVector3, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyVector3, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordInt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordInt, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordInt, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordInt, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordFloat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordFloat, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordFloat, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordFloat, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordString, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordString, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordString, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordString, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordObject, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordObject, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordObject, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordObject, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordVector2, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordVector2, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordVector2, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordVector2, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordVector3, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordVector3, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordVector3, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordVector3, property_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordSwap, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordSwap, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordSwap, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordSwap, row_origin_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordSwap, row_target_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordAddRow, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordAddRow, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordAddRow, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordAddRow, row_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordRemove, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordRemove, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordRemove, record_name_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordRemove, remove_row_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyList, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyList, property_int_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyList, property_float_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyList, property_string_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyList, property_object_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyList, property_vector2_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectPropertyList, property_vector3_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::MultiObjectPropertyList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::MultiObjectPropertyList, multi_player_property_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordList, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordList, record_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::MultiObjectRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::MultiObjectRecordList, multi_player_record_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordPagination, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordPagination, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordPagination, ret_type_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordPagination, cursor_prev_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordPagination, cursor_next_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordPagination, is_end_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordPagination, count_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::ObjectRecordPagination, record_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::DeviceInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::DeviceInfo, os_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::DeviceInfo, platform_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::DeviceInfo, media_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::DeviceInfo, mac_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::DeviceInfo, ip_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::DeviceInfo, device_model_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::DeviceInfo, device_sys_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::DeviceInfo, device_ram_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::DeviceInfo, idfa_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::DeviceInfo, device_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::KWMsg::MsgBase, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::KWMsg::MsgBase, player_id_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::MsgBase, msg_data_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::MsgBase, player_client_list_),
  PROTOBUF_FIELD_OFFSET(::KWMsg::MsgBase, hash_ident_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::KWMsg::Ident)},
  { 7, -1, sizeof(::KWMsg::Vector2)},
  { 14, -1, sizeof(::KWMsg::Vector3)},
  { 22, -1, sizeof(::KWMsg::PropertyInt)},
  { 29, -1, sizeof(::KWMsg::PropertyFloat)},
  { 36, -1, sizeof(::KWMsg::PropertyString)},
  { 43, -1, sizeof(::KWMsg::PropertyObject)},
  { 50, -1, sizeof(::KWMsg::PropertyVector2)},
  { 57, -1, sizeof(::KWMsg::PropertyVector3)},
  { 64, -1, sizeof(::KWMsg::RecordInt)},
  { 72, -1, sizeof(::KWMsg::RecordFloat)},
  { 80, -1, sizeof(::KWMsg::RecordString)},
  { 88, -1, sizeof(::KWMsg::RecordObject)},
  { 96, -1, sizeof(::KWMsg::RecordVector2)},
  { 104, -1, sizeof(::KWMsg::RecordVector3)},
  { 112, -1, sizeof(::KWMsg::RecordAddRowStruct)},
  { 124, -1, sizeof(::KWMsg::ObjectRecordBase)},
  { 131, -1, sizeof(::KWMsg::ObjectPropertyInt)},
  { 138, -1, sizeof(::KWMsg::ObjectPropertyFloat)},
  { 145, -1, sizeof(::KWMsg::ObjectPropertyString)},
  { 152, -1, sizeof(::KWMsg::ObjectPropertyObject)},
  { 159, -1, sizeof(::KWMsg::ObjectPropertyVector2)},
  { 166, -1, sizeof(::KWMsg::ObjectPropertyVector3)},
  { 173, -1, sizeof(::KWMsg::ObjectRecordInt)},
  { 181, -1, sizeof(::KWMsg::ObjectRecordFloat)},
  { 189, -1, sizeof(::KWMsg::ObjectRecordString)},
  { 197, -1, sizeof(::KWMsg::ObjectRecordObject)},
  { 205, -1, sizeof(::KWMsg::ObjectRecordVector2)},
  { 213, -1, sizeof(::KWMsg::ObjectRecordVector3)},
  { 221, -1, sizeof(::KWMsg::ObjectRecordSwap)},
  { 230, -1, sizeof(::KWMsg::ObjectRecordAddRow)},
  { 238, -1, sizeof(::KWMsg::ObjectRecordRemove)},
  { 246, -1, sizeof(::KWMsg::ObjectPropertyList)},
  { 258, -1, sizeof(::KWMsg::MultiObjectPropertyList)},
  { 264, -1, sizeof(::KWMsg::ObjectRecordList)},
  { 271, -1, sizeof(::KWMsg::MultiObjectRecordList)},
  { 277, -1, sizeof(::KWMsg::ObjectRecordPagination)},
  { 289, -1, sizeof(::KWMsg::DeviceInfo)},
  { 304, -1, sizeof(::KWMsg::MsgBase)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_Ident_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_Vector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_Vector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PropertyInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PropertyFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PropertyString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PropertyObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PropertyVector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_PropertyVector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_RecordInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_RecordFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_RecordString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_RecordObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_RecordVector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_RecordVector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_RecordAddRowStruct_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectRecordBase_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectPropertyInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectPropertyFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectPropertyString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectPropertyObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectPropertyVector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectPropertyVector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectRecordInt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectRecordFloat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectRecordString_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectRecordObject_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectRecordVector2_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectRecordVector3_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectRecordSwap_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectRecordAddRow_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectRecordRemove_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectPropertyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_MultiObjectPropertyList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectRecordList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_MultiObjectRecordList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_ObjectRecordPagination_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_DeviceInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::KWMsg::_MsgBase_default_instance_),
};

const char descriptor_table_protodef_kwmsgbase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017kwmsgbase.proto\022\005KWMsg\"%\n\005Ident\022\r\n\005svr"
  "id\030\001 \001(\003\022\r\n\005index\030\002 \001(\003\"\037\n\007Vector2\022\t\n\001x\030"
  "\001 \001(\002\022\t\n\001y\030\002 \001(\002\"*\n\007Vector3\022\t\n\001x\030\001 \001(\002\022\t"
  "\n\001y\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"2\n\013PropertyInt\022\025\n\rp"
  "roperty_name\030\001 \001(\014\022\014\n\004data\030\002 \001(\003\"4\n\rProp"
  "ertyFloat\022\025\n\rproperty_name\030\001 \001(\014\022\014\n\004data"
  "\030\002 \001(\002\"5\n\016PropertyString\022\025\n\rproperty_nam"
  "e\030\001 \001(\014\022\014\n\004data\030\002 \001(\014\"C\n\016PropertyObject\022"
  "\025\n\rproperty_name\030\001 \001(\014\022\032\n\004data\030\002 \001(\0132\014.K"
  "WMsg.Ident\"F\n\017PropertyVector2\022\025\n\rpropert"
  "y_name\030\001 \001(\014\022\034\n\004data\030\002 \001(\0132\016.KWMsg.Vecto"
  "r2\"F\n\017PropertyVector3\022\025\n\rproperty_name\030\001"
  " \001(\014\022\034\n\004data\030\002 \001(\0132\016.KWMsg.Vector3\"3\n\tRe"
  "cordInt\022\013\n\003row\030\001 \001(\005\022\013\n\003col\030\002 \001(\005\022\014\n\004dat"
  "a\030\003 \001(\003\"5\n\013RecordFloat\022\013\n\003row\030\001 \001(\005\022\013\n\003c"
  "ol\030\002 \001(\005\022\014\n\004data\030\003 \001(\002\"6\n\014RecordString\022\013"
  "\n\003row\030\001 \001(\005\022\013\n\003col\030\002 \001(\005\022\014\n\004data\030\003 \001(\014\"D"
  "\n\014RecordObject\022\013\n\003row\030\001 \001(\005\022\013\n\003col\030\002 \001(\005"
  "\022\032\n\004data\030\003 \001(\0132\014.KWMsg.Ident\"G\n\rRecordVe"
  "ctor2\022\013\n\003row\030\001 \001(\005\022\013\n\003col\030\002 \001(\005\022\034\n\004data\030"
  "\003 \001(\0132\016.KWMsg.Vector2\"G\n\rRecordVector3\022\013"
  "\n\003row\030\001 \001(\005\022\013\n\003col\030\002 \001(\005\022\034\n\004data\030\003 \001(\0132\016"
  ".KWMsg.Vector3\"\303\002\n\022RecordAddRowStruct\022\013\n"
  "\003row\030\001 \001(\005\022)\n\017record_int_list\030\002 \003(\0132\020.KW"
  "Msg.RecordInt\022-\n\021record_float_list\030\003 \003(\013"
  "2\022.KWMsg.RecordFloat\022/\n\022record_string_li"
  "st\030\004 \003(\0132\023.KWMsg.RecordString\022/\n\022record_"
  "object_list\030\005 \003(\0132\023.KWMsg.RecordObject\0221"
  "\n\023record_vector2_list\030\006 \003(\0132\024.KWMsg.Reco"
  "rdVector2\0221\n\023record_vector3_list\030\007 \003(\0132\024"
  ".KWMsg.RecordVector3\"V\n\020ObjectRecordBase"
  "\022\023\n\013record_name\030\001 \001(\014\022-\n\nrow_struct\030\002 \003("
  "\0132\031.KWMsg.RecordAddRowStruct\"_\n\021ObjectPr"
  "opertyInt\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ide"
  "nt\022)\n\rproperty_list\030\002 \003(\0132\022.KWMsg.Proper"
  "tyInt\"c\n\023ObjectPropertyFloat\022\037\n\tplayer_i"
  "d\030\001 \001(\0132\014.KWMsg.Ident\022+\n\rproperty_list\030\002"
  " \003(\0132\024.KWMsg.PropertyFloat\"e\n\024ObjectProp"
  "ertyString\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Id"
  "ent\022,\n\rproperty_list\030\002 \003(\0132\025.KWMsg.Prope"
  "rtyString\"e\n\024ObjectPropertyObject\022\037\n\tpla"
  "yer_id\030\001 \001(\0132\014.KWMsg.Ident\022,\n\rproperty_l"
  "ist\030\002 \003(\0132\025.KWMsg.PropertyObject\"g\n\025Obje"
  "ctPropertyVector2\022\037\n\tplayer_id\030\001 \001(\0132\014.K"
  "WMsg.Ident\022-\n\rproperty_list\030\002 \003(\0132\026.KWMs"
  "g.PropertyVector2\"g\n\025ObjectPropertyVecto"
  "r3\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022-\n\rp"
  "roperty_list\030\002 \003(\0132\026.KWMsg.PropertyVecto"
  "r3\"p\n\017ObjectRecordInt\022\037\n\tplayer_id\030\001 \001(\013"
  "2\014.KWMsg.Ident\022\023\n\013record_name\030\002 \001(\014\022\'\n\rp"
  "roperty_list\030\003 \003(\0132\020.KWMsg.RecordInt\"t\n\021"
  "ObjectRecordFloat\022\037\n\tplayer_id\030\001 \001(\0132\014.K"
  "WMsg.Ident\022\023\n\013record_name\030\002 \001(\014\022)\n\rprope"
  "rty_list\030\003 \003(\0132\022.KWMsg.RecordFloat\"v\n\022Ob"
  "jectRecordString\022\037\n\tplayer_id\030\001 \001(\0132\014.KW"
  "Msg.Ident\022\023\n\013record_name\030\002 \001(\014\022*\n\rproper"
  "ty_list\030\003 \003(\0132\023.KWMsg.RecordString\"v\n\022Ob"
  "jectRecordObject\022\037\n\tplayer_id\030\001 \001(\0132\014.KW"
  "Msg.Ident\022\023\n\013record_name\030\002 \001(\014\022*\n\rproper"
  "ty_list\030\003 \003(\0132\023.KWMsg.RecordObject\"x\n\023Ob"
  "jectRecordVector2\022\037\n\tplayer_id\030\001 \001(\0132\014.K"
  "WMsg.Ident\022\023\n\013record_name\030\002 \001(\014\022+\n\rprope"
  "rty_list\030\003 \003(\0132\024.KWMsg.RecordVector2\"x\n\023"
  "ObjectRecordVector3\022\037\n\tplayer_id\030\001 \001(\0132\014"
  ".KWMsg.Ident\022\023\n\013record_name\030\002 \001(\014\022+\n\rpro"
  "perty_list\030\003 \003(\0132\024.KWMsg.RecordVector3\"p"
  "\n\020ObjectRecordSwap\022\037\n\tplayer_id\030\001 \001(\0132\014."
  "KWMsg.Ident\022\023\n\013record_name\030\002 \001(\014\022\022\n\nrow_"
  "origin\030\003 \001(\005\022\022\n\nrow_target\030\004 \001(\005\"w\n\022Obje"
  "ctRecordAddRow\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMs"
  "g.Ident\022\023\n\013record_name\030\002 \001(\014\022+\n\010row_data"
  "\030\003 \003(\0132\031.KWMsg.RecordAddRowStruct\"^\n\022Obj"
  "ectRecordRemove\022\037\n\tplayer_id\030\001 \001(\0132\014.KWM"
  "sg.Ident\022\023\n\013record_name\030\002 \001(\014\022\022\n\nremove_"
  "row\030\003 \003(\005\"\357\002\n\022ObjectPropertyList\022\037\n\tplay"
  "er_id\030\001 \001(\0132\014.KWMsg.Ident\022-\n\021property_in"
  "t_list\030\002 \003(\0132\022.KWMsg.PropertyInt\0221\n\023prop"
  "erty_float_list\030\003 \003(\0132\024.KWMsg.PropertyFl"
  "oat\0223\n\024property_string_list\030\004 \003(\0132\025.KWMs"
  "g.PropertyString\0223\n\024property_object_list"
  "\030\005 \003(\0132\025.KWMsg.PropertyObject\0225\n\025propert"
  "y_vector2_list\030\006 \003(\0132\026.KWMsg.PropertyVec"
  "tor2\0225\n\025property_vector3_list\030\007 \003(\0132\026.KW"
  "Msg.PropertyVector3\"S\n\027MultiObjectProper"
  "tyList\0228\n\025multi_player_property\030\001 \003(\0132\031."
  "KWMsg.ObjectPropertyList\"a\n\020ObjectRecord"
  "List\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022,\n"
  "\013record_list\030\002 \003(\0132\027.KWMsg.ObjectRecordB"
  "ase\"M\n\025MultiObjectRecordList\0224\n\023multi_pl"
  "ayer_record\030\001 \003(\0132\027.KWMsg.ObjectRecordLi"
  "st\"\221\003\n\026ObjectRecordPagination\022\037\n\tplayer_"
  "id\030\001 \001(\0132\014.KWMsg.Ident\022>\n\010ret_type\030\002 \001(\016"
  "2,.KWMsg.ObjectRecordPagination.ERetReco"
  "rdType\022\023\n\013cursor_prev\030\003 \001(\005\022\023\n\013cursor_ne"
  "xt\030\004 \001(\005\022\016\n\006is_end\030\005 \001(\010\022\r\n\005count\030\006 \001(\005\022"
  ",\n\013record_list\030\007 \001(\0132\027.KWMsg.ObjectRecor"
  "dBase\"\236\001\n\016ERetRecordType\022\022\n\016ERRT_OPEN_SU"
  "CC\020\000\022\031\n\025ERRT_OPEN_ERR_REQTYPE\020\001\022\034\n\030ERRT_"
  "OPEN_ERR_RECORDNAME\020\002\022\030\n\024ERRT_OPEN_ERR_C"
  "URSOR\020\003\022\027\n\023ERRT_OPEN_ERR_COUNT\020\004\022\014\n\010ERRT"
  "_END\020\005\"\264\001\n\nDeviceInfo\022\n\n\002os\030\001 \001(\005\022\020\n\010pla"
  "tform\030\002 \001(\014\022\020\n\010media_id\030\003 \001(\014\022\013\n\003mac\030\004 \001"
  "(\014\022\n\n\002ip\030\005 \001(\014\022\024\n\014device_model\030\006 \001(\014\022\022\n\n"
  "device_sys\030\007 \001(\014\022\022\n\ndevice_ram\030\010 \001(\005\022\014\n\004"
  "idfa\030\t \001(\014\022\021\n\tdevice_id\030\n \001(\014\"\210\001\n\007MsgBas"
  "e\022\037\n\tplayer_id\030\001 \001(\0132\014.KWMsg.Ident\022\020\n\010ms"
  "g_data\030\002 \001(\014\022(\n\022player_client_list\030\003 \003(\013"
  "2\014.KWMsg.Ident\022 \n\nhash_ident\030\004 \001(\0132\014.KWM"
  "sg.IdentB\nZ\010./;KWMsgb\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_kwmsgbase_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kwmsgbase_2eproto = {
  false, false, 4348, descriptor_table_protodef_kwmsgbase_2eproto, "kwmsgbase.proto", 
  &descriptor_table_kwmsgbase_2eproto_once, nullptr, 0, 39,
  schemas, file_default_instances, TableStruct_kwmsgbase_2eproto::offsets,
  file_level_metadata_kwmsgbase_2eproto, file_level_enum_descriptors_kwmsgbase_2eproto, file_level_service_descriptors_kwmsgbase_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_kwmsgbase_2eproto_getter() {
  return &descriptor_table_kwmsgbase_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_kwmsgbase_2eproto(&descriptor_table_kwmsgbase_2eproto);
namespace KWMsg {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectRecordPagination_ERetRecordType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_kwmsgbase_2eproto);
  return file_level_enum_descriptors_kwmsgbase_2eproto[0];
}
bool ObjectRecordPagination_ERetRecordType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ObjectRecordPagination_ERetRecordType ObjectRecordPagination::ERRT_OPEN_SUCC;
constexpr ObjectRecordPagination_ERetRecordType ObjectRecordPagination::ERRT_OPEN_ERR_REQTYPE;
constexpr ObjectRecordPagination_ERetRecordType ObjectRecordPagination::ERRT_OPEN_ERR_RECORDNAME;
constexpr ObjectRecordPagination_ERetRecordType ObjectRecordPagination::ERRT_OPEN_ERR_CURSOR;
constexpr ObjectRecordPagination_ERetRecordType ObjectRecordPagination::ERRT_OPEN_ERR_COUNT;
constexpr ObjectRecordPagination_ERetRecordType ObjectRecordPagination::ERRT_END;
constexpr ObjectRecordPagination_ERetRecordType ObjectRecordPagination::ERetRecordType_MIN;
constexpr ObjectRecordPagination_ERetRecordType ObjectRecordPagination::ERetRecordType_MAX;
constexpr int ObjectRecordPagination::ERetRecordType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

class Ident::_Internal {
 public:
};

Ident::Ident(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.Ident)
}
Ident::Ident(const Ident& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&svrid_, &from.svrid_,
    static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&svrid_)) + sizeof(index_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.Ident)
}

void Ident::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&svrid_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&index_) -
    reinterpret_cast<char*>(&svrid_)) + sizeof(index_));
}

Ident::~Ident() {
  // @@protoc_insertion_point(destructor:KWMsg.Ident)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Ident::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Ident::ArenaDtor(void* object) {
  Ident* _this = reinterpret_cast< Ident* >(object);
  (void)_this;
}
void Ident::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ident::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ident::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.Ident)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&svrid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&svrid_)) + sizeof(index_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ident::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 svrid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          svrid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 index = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          index_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Ident::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.Ident)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 svrid = 1;
  if (this->svrid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_svrid(), target);
  }

  // int64 index = 2;
  if (this->index() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_index(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.Ident)
  return target;
}

size_t Ident::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.Ident)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 svrid = 1;
  if (this->svrid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_svrid());
  }

  // int64 index = 2;
  if (this->index() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_index());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Ident::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.Ident)
  GOOGLE_DCHECK_NE(&from, this);
  const Ident* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Ident>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.Ident)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.Ident)
    MergeFrom(*source);
  }
}

void Ident::MergeFrom(const Ident& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.Ident)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.svrid() != 0) {
    _internal_set_svrid(from._internal_svrid());
  }
  if (from.index() != 0) {
    _internal_set_index(from._internal_index());
  }
}

void Ident::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.Ident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ident::CopyFrom(const Ident& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.Ident)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ident::IsInitialized() const {
  return true;
}

void Ident::InternalSwap(Ident* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ident, index_)
      + sizeof(Ident::index_)
      - PROTOBUF_FIELD_OFFSET(Ident, svrid_)>(
          reinterpret_cast<char*>(&svrid_),
          reinterpret_cast<char*>(&other->svrid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ident::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[0]);
}

// ===================================================================

class Vector2::_Internal {
 public:
};

Vector2::Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.Vector2)
}
Vector2::Vector2(const Vector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.Vector2)
}

void Vector2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2::~Vector2() {
  // @@protoc_insertion_point(destructor:KWMsg.Vector2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector2::ArenaDtor(void* object) {
  Vector2* _this = reinterpret_cast< Vector2* >(object);
  (void)_this;
}
void Vector2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector2::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.Vector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.Vector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.Vector2)
  return target;
}

size_t Vector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.Vector2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.Vector2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.Vector2)
    MergeFrom(*source);
  }
}

void Vector2::MergeFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.Vector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Vector2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2::CopyFrom(const Vector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.Vector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2::IsInitialized() const {
  return true;
}

void Vector2::InternalSwap(Vector2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2, y_)
      + sizeof(Vector2::y_)
      - PROTOBUF_FIELD_OFFSET(Vector2, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[1]);
}

// ===================================================================

class Vector3::_Internal {
 public:
};

Vector3::Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.Vector3)
}
Vector3::Vector3(const Vector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.Vector3)
}

void Vector3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&x_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3::~Vector3() {
  // @@protoc_insertion_point(destructor:KWMsg.Vector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Vector3::ArenaDtor(void* object) {
  Vector3* _this = reinterpret_cast< Vector3* >(object);
  (void)_this;
}
void Vector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Vector3::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.Vector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.Vector3)
  return target;
}

size_t Vector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.Vector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.Vector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.Vector3)
    MergeFrom(*source);
  }
}

void Vector3::MergeFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.Vector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3::CopyFrom(const Vector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.Vector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3::IsInitialized() const {
  return true;
}

void Vector3::InternalSwap(Vector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3, z_)
      + sizeof(Vector3::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[2]);
}

// ===================================================================

class PropertyInt::_Internal {
 public:
};

PropertyInt::PropertyInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PropertyInt)
}
PropertyInt::PropertyInt(const PropertyInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_property_name().empty()) {
    property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property_name(), 
      GetArenaForAllocation());
  }
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.PropertyInt)
}

void PropertyInt::SharedCtor() {
property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_ = int64_t{0};
}

PropertyInt::~PropertyInt() {
  // @@protoc_insertion_point(destructor:KWMsg.PropertyInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PropertyInt::ArenaDtor(void* object) {
  PropertyInt* _this = reinterpret_cast< PropertyInt* >(object);
  (void)_this;
}
void PropertyInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PropertyInt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PropertyInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_name_.ClearToEmpty();
  data_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PropertyInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (!this->property_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_property_name(), target);
  }

  // int64 data = 2;
  if (this->data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PropertyInt)
  return target;
}

size_t PropertyInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PropertyInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (!this->property_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_property_name());
  }

  // int64 data = 2;
  if (this->data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PropertyInt)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PropertyInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PropertyInt)
    MergeFrom(*source);
  }
}

void PropertyInt::MergeFrom(const PropertyInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PropertyInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.property_name().empty()) {
    _internal_set_property_name(from._internal_property_name());
  }
  if (from.data() != 0) {
    _internal_set_data(from._internal_data());
  }
}

void PropertyInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PropertyInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyInt::CopyFrom(const PropertyInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PropertyInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyInt::IsInitialized() const {
  return true;
}

void PropertyInt::InternalSwap(PropertyInt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_name_, GetArenaForAllocation(),
      &other->property_name_, other->GetArenaForAllocation()
  );
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyInt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[3]);
}

// ===================================================================

class PropertyFloat::_Internal {
 public:
};

PropertyFloat::PropertyFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PropertyFloat)
}
PropertyFloat::PropertyFloat(const PropertyFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_property_name().empty()) {
    property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property_name(), 
      GetArenaForAllocation());
  }
  data_ = from.data_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.PropertyFloat)
}

void PropertyFloat::SharedCtor() {
property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_ = 0;
}

PropertyFloat::~PropertyFloat() {
  // @@protoc_insertion_point(destructor:KWMsg.PropertyFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PropertyFloat::ArenaDtor(void* object) {
  PropertyFloat* _this = reinterpret_cast< PropertyFloat* >(object);
  (void)_this;
}
void PropertyFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PropertyFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PropertyFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_name_.ClearToEmpty();
  data_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PropertyFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (!this->property_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_property_name(), target);
  }

  // float data = 2;
  if (!(this->data() <= 0 && this->data() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PropertyFloat)
  return target;
}

size_t PropertyFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PropertyFloat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (!this->property_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_property_name());
  }

  // float data = 2;
  if (!(this->data() <= 0 && this->data() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PropertyFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PropertyFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PropertyFloat)
    MergeFrom(*source);
  }
}

void PropertyFloat::MergeFrom(const PropertyFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PropertyFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.property_name().empty()) {
    _internal_set_property_name(from._internal_property_name());
  }
  if (!(from.data() <= 0 && from.data() >= 0)) {
    _internal_set_data(from._internal_data());
  }
}

void PropertyFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PropertyFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyFloat::CopyFrom(const PropertyFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PropertyFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyFloat::IsInitialized() const {
  return true;
}

void PropertyFloat::InternalSwap(PropertyFloat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_name_, GetArenaForAllocation(),
      &other->property_name_, other->GetArenaForAllocation()
  );
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyFloat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[4]);
}

// ===================================================================

class PropertyString::_Internal {
 public:
};

PropertyString::PropertyString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PropertyString)
}
PropertyString::PropertyString(const PropertyString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_property_name().empty()) {
    property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property_name(), 
      GetArenaForAllocation());
  }
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.PropertyString)
}

void PropertyString::SharedCtor() {
property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PropertyString::~PropertyString() {
  // @@protoc_insertion_point(destructor:KWMsg.PropertyString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PropertyString::ArenaDtor(void* object) {
  PropertyString* _this = reinterpret_cast< PropertyString* >(object);
  (void)_this;
}
void PropertyString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PropertyString::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PropertyString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_name_.ClearToEmpty();
  data_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PropertyString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (!this->property_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_property_name(), target);
  }

  // bytes data = 2;
  if (!this->data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PropertyString)
  return target;
}

size_t PropertyString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PropertyString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (!this->property_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_property_name());
  }

  // bytes data = 2;
  if (!this->data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PropertyString)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PropertyString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PropertyString)
    MergeFrom(*source);
  }
}

void PropertyString::MergeFrom(const PropertyString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PropertyString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.property_name().empty()) {
    _internal_set_property_name(from._internal_property_name());
  }
  if (!from.data().empty()) {
    _internal_set_data(from._internal_data());
  }
}

void PropertyString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PropertyString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyString::CopyFrom(const PropertyString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PropertyString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyString::IsInitialized() const {
  return true;
}

void PropertyString::InternalSwap(PropertyString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_name_, GetArenaForAllocation(),
      &other->property_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[5]);
}

// ===================================================================

class PropertyObject::_Internal {
 public:
  static const ::KWMsg::Ident& data(const PropertyObject* msg);
};

const ::KWMsg::Ident&
PropertyObject::_Internal::data(const PropertyObject* msg) {
  return *msg->data_;
}
PropertyObject::PropertyObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PropertyObject)
}
PropertyObject::PropertyObject(const PropertyObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_property_name().empty()) {
    property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    data_ = new ::KWMsg::Ident(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.PropertyObject)
}

void PropertyObject::SharedCtor() {
property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_ = nullptr;
}

PropertyObject::~PropertyObject() {
  // @@protoc_insertion_point(destructor:KWMsg.PropertyObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void PropertyObject::ArenaDtor(void* object) {
  PropertyObject* _this = reinterpret_cast< PropertyObject* >(object);
  (void)_this;
}
void PropertyObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PropertyObject::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PropertyObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PropertyObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (!this->property_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_property_name(), target);
  }

  // .KWMsg.Ident data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PropertyObject)
  return target;
}

size_t PropertyObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PropertyObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (!this->property_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_property_name());
  }

  // .KWMsg.Ident data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PropertyObject)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PropertyObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PropertyObject)
    MergeFrom(*source);
  }
}

void PropertyObject::MergeFrom(const PropertyObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PropertyObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.property_name().empty()) {
    _internal_set_property_name(from._internal_property_name());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::KWMsg::Ident::MergeFrom(from._internal_data());
  }
}

void PropertyObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PropertyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyObject::CopyFrom(const PropertyObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PropertyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyObject::IsInitialized() const {
  return true;
}

void PropertyObject::InternalSwap(PropertyObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_name_, GetArenaForAllocation(),
      &other->property_name_, other->GetArenaForAllocation()
  );
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[6]);
}

// ===================================================================

class PropertyVector2::_Internal {
 public:
  static const ::KWMsg::Vector2& data(const PropertyVector2* msg);
};

const ::KWMsg::Vector2&
PropertyVector2::_Internal::data(const PropertyVector2* msg) {
  return *msg->data_;
}
PropertyVector2::PropertyVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PropertyVector2)
}
PropertyVector2::PropertyVector2(const PropertyVector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_property_name().empty()) {
    property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    data_ = new ::KWMsg::Vector2(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.PropertyVector2)
}

void PropertyVector2::SharedCtor() {
property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_ = nullptr;
}

PropertyVector2::~PropertyVector2() {
  // @@protoc_insertion_point(destructor:KWMsg.PropertyVector2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyVector2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void PropertyVector2::ArenaDtor(void* object) {
  PropertyVector2* _this = reinterpret_cast< PropertyVector2* >(object);
  (void)_this;
}
void PropertyVector2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyVector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PropertyVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PropertyVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyVector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Vector2 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyVector2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PropertyVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (!this->property_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_property_name(), target);
  }

  // .KWMsg.Vector2 data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PropertyVector2)
  return target;
}

size_t PropertyVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PropertyVector2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (!this->property_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_property_name());
  }

  // .KWMsg.Vector2 data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyVector2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PropertyVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyVector2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyVector2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PropertyVector2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PropertyVector2)
    MergeFrom(*source);
  }
}

void PropertyVector2::MergeFrom(const PropertyVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PropertyVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.property_name().empty()) {
    _internal_set_property_name(from._internal_property_name());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::KWMsg::Vector2::MergeFrom(from._internal_data());
  }
}

void PropertyVector2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PropertyVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyVector2::CopyFrom(const PropertyVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PropertyVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyVector2::IsInitialized() const {
  return true;
}

void PropertyVector2::InternalSwap(PropertyVector2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_name_, GetArenaForAllocation(),
      &other->property_name_, other->GetArenaForAllocation()
  );
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyVector2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[7]);
}

// ===================================================================

class PropertyVector3::_Internal {
 public:
  static const ::KWMsg::Vector3& data(const PropertyVector3* msg);
};

const ::KWMsg::Vector3&
PropertyVector3::_Internal::data(const PropertyVector3* msg) {
  return *msg->data_;
}
PropertyVector3::PropertyVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.PropertyVector3)
}
PropertyVector3::PropertyVector3(const PropertyVector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_property_name().empty()) {
    property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_property_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_data()) {
    data_ = new ::KWMsg::Vector3(*from.data_);
  } else {
    data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.PropertyVector3)
}

void PropertyVector3::SharedCtor() {
property_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
data_ = nullptr;
}

PropertyVector3::~PropertyVector3() {
  // @@protoc_insertion_point(destructor:KWMsg.PropertyVector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PropertyVector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  property_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete data_;
}

void PropertyVector3::ArenaDtor(void* object) {
  PropertyVector3* _this = reinterpret_cast< PropertyVector3* >(object);
  (void)_this;
}
void PropertyVector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PropertyVector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PropertyVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.PropertyVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PropertyVector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes property_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_property_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Vector3 data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PropertyVector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.PropertyVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (!this->property_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_property_name(), target);
  }

  // .KWMsg.Vector3 data = 2;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.PropertyVector3)
  return target;
}

size_t PropertyVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.PropertyVector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes property_name = 1;
  if (!this->property_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_property_name());
  }

  // .KWMsg.Vector3 data = 2;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PropertyVector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.PropertyVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const PropertyVector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PropertyVector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.PropertyVector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.PropertyVector3)
    MergeFrom(*source);
  }
}

void PropertyVector3::MergeFrom(const PropertyVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.PropertyVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.property_name().empty()) {
    _internal_set_property_name(from._internal_property_name());
  }
  if (from.has_data()) {
    _internal_mutable_data()->::KWMsg::Vector3::MergeFrom(from._internal_data());
  }
}

void PropertyVector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.PropertyVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PropertyVector3::CopyFrom(const PropertyVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.PropertyVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PropertyVector3::IsInitialized() const {
  return true;
}

void PropertyVector3::InternalSwap(PropertyVector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &property_name_, GetArenaForAllocation(),
      &other->property_name_, other->GetArenaForAllocation()
  );
  swap(data_, other->data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PropertyVector3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[8]);
}

// ===================================================================

class RecordInt::_Internal {
 public:
};

RecordInt::RecordInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.RecordInt)
}
RecordInt::RecordInt(const RecordInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&row_)) + sizeof(data_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.RecordInt)
}

void RecordInt::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&row_)) + sizeof(data_));
}

RecordInt::~RecordInt() {
  // @@protoc_insertion_point(destructor:KWMsg.RecordInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordInt::ArenaDtor(void* object) {
  RecordInt* _this = reinterpret_cast< RecordInt* >(object);
  (void)_this;
}
void RecordInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordInt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.RecordInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&row_)) + sizeof(data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int64 data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.RecordInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row(), target);
  }

  // int32 col = 2;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_col(), target);
  }

  // int64 data = 3;
  if (this->data() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.RecordInt)
  return target;
}

size_t RecordInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.RecordInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 col = 2;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  // int64 data = 3;
  if (this->data() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_data());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.RecordInt)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.RecordInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.RecordInt)
    MergeFrom(*source);
  }
}

void RecordInt::MergeFrom(const RecordInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.RecordInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
  if (from.data() != 0) {
    _internal_set_data(from._internal_data());
  }
}

void RecordInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.RecordInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordInt::CopyFrom(const RecordInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.RecordInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordInt::IsInitialized() const {
  return true;
}

void RecordInt::InternalSwap(RecordInt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordInt, data_)
      + sizeof(RecordInt::data_)
      - PROTOBUF_FIELD_OFFSET(RecordInt, row_)>(
          reinterpret_cast<char*>(&row_),
          reinterpret_cast<char*>(&other->row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordInt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[9]);
}

// ===================================================================

class RecordFloat::_Internal {
 public:
};

RecordFloat::RecordFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.RecordFloat)
}
RecordFloat::RecordFloat(const RecordFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&row_)) + sizeof(data_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.RecordFloat)
}

void RecordFloat::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&data_) -
    reinterpret_cast<char*>(&row_)) + sizeof(data_));
}

RecordFloat::~RecordFloat() {
  // @@protoc_insertion_point(destructor:KWMsg.RecordFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordFloat::ArenaDtor(void* object) {
  RecordFloat* _this = reinterpret_cast< RecordFloat* >(object);
  (void)_this;
}
void RecordFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.RecordFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&data_) -
      reinterpret_cast<char*>(&row_)) + sizeof(data_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          data_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.RecordFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row(), target);
  }

  // int32 col = 2;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_col(), target);
  }

  // float data = 3;
  if (!(this->data() <= 0 && this->data() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.RecordFloat)
  return target;
}

size_t RecordFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.RecordFloat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 col = 2;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  // float data = 3;
  if (!(this->data() <= 0 && this->data() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.RecordFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.RecordFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.RecordFloat)
    MergeFrom(*source);
  }
}

void RecordFloat::MergeFrom(const RecordFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.RecordFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
  if (!(from.data() <= 0 && from.data() >= 0)) {
    _internal_set_data(from._internal_data());
  }
}

void RecordFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.RecordFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordFloat::CopyFrom(const RecordFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.RecordFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordFloat::IsInitialized() const {
  return true;
}

void RecordFloat::InternalSwap(RecordFloat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordFloat, data_)
      + sizeof(RecordFloat::data_)
      - PROTOBUF_FIELD_OFFSET(RecordFloat, row_)>(
          reinterpret_cast<char*>(&row_),
          reinterpret_cast<char*>(&other->row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordFloat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[10]);
}

// ===================================================================

class RecordString::_Internal {
 public:
};

RecordString::RecordString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.RecordString)
}
RecordString::RecordString(const RecordString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_data(), 
      GetArenaForAllocation());
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.RecordString)
}

void RecordString::SharedCtor() {
data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
}

RecordString::~RecordString() {
  // @@protoc_insertion_point(destructor:KWMsg.RecordString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RecordString::ArenaDtor(void* object) {
  RecordString* _this = reinterpret_cast< RecordString* >(object);
  (void)_this;
}
void RecordString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordString::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.RecordString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmpty();
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&row_)) + sizeof(col_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.RecordString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row(), target);
  }

  // int32 col = 2;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_col(), target);
  }

  // bytes data = 3;
  if (!this->data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.RecordString)
  return target;
}

size_t RecordString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.RecordString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 3;
  if (!this->data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 col = 2;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.RecordString)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.RecordString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.RecordString)
    MergeFrom(*source);
  }
}

void RecordString::MergeFrom(const RecordString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.RecordString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.data().empty()) {
    _internal_set_data(from._internal_data());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
}

void RecordString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.RecordString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordString::CopyFrom(const RecordString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.RecordString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordString::IsInitialized() const {
  return true;
}

void RecordString::InternalSwap(RecordString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &data_, GetArenaForAllocation(),
      &other->data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordString, col_)
      + sizeof(RecordString::col_)
      - PROTOBUF_FIELD_OFFSET(RecordString, row_)>(
          reinterpret_cast<char*>(&row_),
          reinterpret_cast<char*>(&other->row_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[11]);
}

// ===================================================================

class RecordObject::_Internal {
 public:
  static const ::KWMsg::Ident& data(const RecordObject* msg);
};

const ::KWMsg::Ident&
RecordObject::_Internal::data(const RecordObject* msg) {
  return *msg->data_;
}
RecordObject::RecordObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.RecordObject)
}
RecordObject::RecordObject(const RecordObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::KWMsg::Ident(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.RecordObject)
}

void RecordObject::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&data_)) + sizeof(col_));
}

RecordObject::~RecordObject() {
  // @@protoc_insertion_point(destructor:KWMsg.RecordObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void RecordObject::ArenaDtor(void* object) {
  RecordObject* _this = reinterpret_cast< RecordObject* >(object);
  (void)_this;
}
void RecordObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordObject::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.RecordObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&row_)) + sizeof(col_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.RecordObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row(), target);
  }

  // int32 col = 2;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_col(), target);
  }

  // .KWMsg.Ident data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.RecordObject)
  return target;
}

size_t RecordObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.RecordObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 col = 2;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.RecordObject)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.RecordObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.RecordObject)
    MergeFrom(*source);
  }
}

void RecordObject::MergeFrom(const RecordObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.RecordObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::KWMsg::Ident::MergeFrom(from._internal_data());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
}

void RecordObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.RecordObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordObject::CopyFrom(const RecordObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.RecordObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordObject::IsInitialized() const {
  return true;
}

void RecordObject::InternalSwap(RecordObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordObject, col_)
      + sizeof(RecordObject::col_)
      - PROTOBUF_FIELD_OFFSET(RecordObject, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[12]);
}

// ===================================================================

class RecordVector2::_Internal {
 public:
  static const ::KWMsg::Vector2& data(const RecordVector2* msg);
};

const ::KWMsg::Vector2&
RecordVector2::_Internal::data(const RecordVector2* msg) {
  return *msg->data_;
}
RecordVector2::RecordVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.RecordVector2)
}
RecordVector2::RecordVector2(const RecordVector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::KWMsg::Vector2(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.RecordVector2)
}

void RecordVector2::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&data_)) + sizeof(col_));
}

RecordVector2::~RecordVector2() {
  // @@protoc_insertion_point(destructor:KWMsg.RecordVector2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordVector2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void RecordVector2::ArenaDtor(void* object) {
  RecordVector2* _this = reinterpret_cast< RecordVector2* >(object);
  (void)_this;
}
void RecordVector2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordVector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.RecordVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&row_)) + sizeof(col_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordVector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Vector2 data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordVector2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.RecordVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row(), target);
  }

  // int32 col = 2;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_col(), target);
  }

  // .KWMsg.Vector2 data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.RecordVector2)
  return target;
}

size_t RecordVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.RecordVector2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Vector2 data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 col = 2;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordVector2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.RecordVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordVector2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordVector2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.RecordVector2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.RecordVector2)
    MergeFrom(*source);
  }
}

void RecordVector2::MergeFrom(const RecordVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.RecordVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::KWMsg::Vector2::MergeFrom(from._internal_data());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
}

void RecordVector2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.RecordVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordVector2::CopyFrom(const RecordVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.RecordVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordVector2::IsInitialized() const {
  return true;
}

void RecordVector2::InternalSwap(RecordVector2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordVector2, col_)
      + sizeof(RecordVector2::col_)
      - PROTOBUF_FIELD_OFFSET(RecordVector2, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordVector2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[13]);
}

// ===================================================================

class RecordVector3::_Internal {
 public:
  static const ::KWMsg::Vector3& data(const RecordVector3* msg);
};

const ::KWMsg::Vector3&
RecordVector3::_Internal::data(const RecordVector3* msg) {
  return *msg->data_;
}
RecordVector3::RecordVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.RecordVector3)
}
RecordVector3::RecordVector3(const RecordVector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_data()) {
    data_ = new ::KWMsg::Vector3(*from.data_);
  } else {
    data_ = nullptr;
  }
  ::memcpy(&row_, &from.row_,
    static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&row_)) + sizeof(col_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.RecordVector3)
}

void RecordVector3::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&data_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&col_) -
    reinterpret_cast<char*>(&data_)) + sizeof(col_));
}

RecordVector3::~RecordVector3() {
  // @@protoc_insertion_point(destructor:KWMsg.RecordVector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordVector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete data_;
}

void RecordVector3::ArenaDtor(void* object) {
  RecordVector3* _this = reinterpret_cast< RecordVector3* >(object);
  (void)_this;
}
void RecordVector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordVector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.RecordVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
  ::memset(&row_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&col_) -
      reinterpret_cast<char*>(&row_)) + sizeof(col_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordVector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 col = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          col_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.Vector3 data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordVector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.RecordVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row(), target);
  }

  // int32 col = 2;
  if (this->col() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_col(), target);
  }

  // .KWMsg.Vector3 data = 3;
  if (this->has_data()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.RecordVector3)
  return target;
}

size_t RecordVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.RecordVector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Vector3 data = 3;
  if (this->has_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *data_);
  }

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  // int32 col = 2;
  if (this->col() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_col());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordVector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.RecordVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordVector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordVector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.RecordVector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.RecordVector3)
    MergeFrom(*source);
  }
}

void RecordVector3::MergeFrom(const RecordVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.RecordVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_data()) {
    _internal_mutable_data()->::KWMsg::Vector3::MergeFrom(from._internal_data());
  }
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
  if (from.col() != 0) {
    _internal_set_col(from._internal_col());
  }
}

void RecordVector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.RecordVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordVector3::CopyFrom(const RecordVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.RecordVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordVector3::IsInitialized() const {
  return true;
}

void RecordVector3::InternalSwap(RecordVector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RecordVector3, col_)
      + sizeof(RecordVector3::col_)
      - PROTOBUF_FIELD_OFFSET(RecordVector3, data_)>(
          reinterpret_cast<char*>(&data_),
          reinterpret_cast<char*>(&other->data_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordVector3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[14]);
}

// ===================================================================

class RecordAddRowStruct::_Internal {
 public:
};

RecordAddRowStruct::RecordAddRowStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  record_int_list_(arena),
  record_float_list_(arena),
  record_string_list_(arena),
  record_object_list_(arena),
  record_vector2_list_(arena),
  record_vector3_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.RecordAddRowStruct)
}
RecordAddRowStruct::RecordAddRowStruct(const RecordAddRowStruct& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_int_list_(from.record_int_list_),
      record_float_list_(from.record_float_list_),
      record_string_list_(from.record_string_list_),
      record_object_list_(from.record_object_list_),
      record_vector2_list_(from.record_vector2_list_),
      record_vector3_list_(from.record_vector3_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  row_ = from.row_;
  // @@protoc_insertion_point(copy_constructor:KWMsg.RecordAddRowStruct)
}

void RecordAddRowStruct::SharedCtor() {
row_ = 0;
}

RecordAddRowStruct::~RecordAddRowStruct() {
  // @@protoc_insertion_point(destructor:KWMsg.RecordAddRowStruct)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RecordAddRowStruct::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void RecordAddRowStruct::ArenaDtor(void* object) {
  RecordAddRowStruct* _this = reinterpret_cast< RecordAddRowStruct* >(object);
  (void)_this;
}
void RecordAddRowStruct::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RecordAddRowStruct::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void RecordAddRowStruct::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.RecordAddRowStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_int_list_.Clear();
  record_float_list_.Clear();
  record_string_list_.Clear();
  record_object_list_.Clear();
  record_vector2_list_.Clear();
  record_vector3_list_.Clear();
  row_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RecordAddRowStruct::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 row = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          row_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordInt record_int_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_int_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordFloat record_float_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_float_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordString record_string_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_string_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordObject record_object_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordVector2 record_vector2_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_vector2_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordVector3 record_vector3_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_vector3_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RecordAddRowStruct::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.RecordAddRowStruct)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 row = 1;
  if (this->row() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_row(), target);
  }

  // repeated .KWMsg.RecordInt record_int_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_int_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_record_int_list(i), target, stream);
  }

  // repeated .KWMsg.RecordFloat record_float_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_float_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_record_float_list(i), target, stream);
  }

  // repeated .KWMsg.RecordString record_string_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_string_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_record_string_list(i), target, stream);
  }

  // repeated .KWMsg.RecordObject record_object_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_record_object_list(i), target, stream);
  }

  // repeated .KWMsg.RecordVector2 record_vector2_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_vector2_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_record_vector2_list(i), target, stream);
  }

  // repeated .KWMsg.RecordVector3 record_vector3_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_vector3_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_record_vector3_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.RecordAddRowStruct)
  return target;
}

size_t RecordAddRowStruct::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.RecordAddRowStruct)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RecordInt record_int_list = 2;
  total_size += 1UL * this->_internal_record_int_list_size();
  for (const auto& msg : this->record_int_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.RecordFloat record_float_list = 3;
  total_size += 1UL * this->_internal_record_float_list_size();
  for (const auto& msg : this->record_float_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.RecordString record_string_list = 4;
  total_size += 1UL * this->_internal_record_string_list_size();
  for (const auto& msg : this->record_string_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.RecordObject record_object_list = 5;
  total_size += 1UL * this->_internal_record_object_list_size();
  for (const auto& msg : this->record_object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.RecordVector2 record_vector2_list = 6;
  total_size += 1UL * this->_internal_record_vector2_list_size();
  for (const auto& msg : this->record_vector2_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.RecordVector3 record_vector3_list = 7;
  total_size += 1UL * this->_internal_record_vector3_list_size();
  for (const auto& msg : this->record_vector3_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // int32 row = 1;
  if (this->row() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RecordAddRowStruct::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.RecordAddRowStruct)
  GOOGLE_DCHECK_NE(&from, this);
  const RecordAddRowStruct* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RecordAddRowStruct>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.RecordAddRowStruct)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.RecordAddRowStruct)
    MergeFrom(*source);
  }
}

void RecordAddRowStruct::MergeFrom(const RecordAddRowStruct& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.RecordAddRowStruct)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_int_list_.MergeFrom(from.record_int_list_);
  record_float_list_.MergeFrom(from.record_float_list_);
  record_string_list_.MergeFrom(from.record_string_list_);
  record_object_list_.MergeFrom(from.record_object_list_);
  record_vector2_list_.MergeFrom(from.record_vector2_list_);
  record_vector3_list_.MergeFrom(from.record_vector3_list_);
  if (from.row() != 0) {
    _internal_set_row(from._internal_row());
  }
}

void RecordAddRowStruct::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.RecordAddRowStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecordAddRowStruct::CopyFrom(const RecordAddRowStruct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.RecordAddRowStruct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecordAddRowStruct::IsInitialized() const {
  return true;
}

void RecordAddRowStruct::InternalSwap(RecordAddRowStruct* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  record_int_list_.InternalSwap(&other->record_int_list_);
  record_float_list_.InternalSwap(&other->record_float_list_);
  record_string_list_.InternalSwap(&other->record_string_list_);
  record_object_list_.InternalSwap(&other->record_object_list_);
  record_vector2_list_.InternalSwap(&other->record_vector2_list_);
  record_vector3_list_.InternalSwap(&other->record_vector3_list_);
  swap(row_, other->row_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RecordAddRowStruct::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[15]);
}

// ===================================================================

class ObjectRecordBase::_Internal {
 public:
};

ObjectRecordBase::ObjectRecordBase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  row_struct_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectRecordBase)
}
ObjectRecordBase::ObjectRecordBase(const ObjectRecordBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      row_struct_(from.row_struct_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectRecordBase)
}

void ObjectRecordBase::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

ObjectRecordBase::~ObjectRecordBase() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectRecordBase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ObjectRecordBase::ArenaDtor(void* object) {
  ObjectRecordBase* _this = reinterpret_cast< ObjectRecordBase* >(object);
  (void)_this;
}
void ObjectRecordBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectRecordBase::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectRecordBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_struct_.Clear();
  record_name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bytes record_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordAddRowStruct row_struct = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_struct(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordBase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectRecordBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bytes record_name = 1;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        1, this->_internal_record_name(), target);
  }

  // repeated .KWMsg.RecordAddRowStruct row_struct = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_struct_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_row_struct(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectRecordBase)
  return target;
}

size_t ObjectRecordBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectRecordBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RecordAddRowStruct row_struct = 2;
  total_size += 1UL * this->_internal_row_struct_size();
  for (const auto& msg : this->row_struct_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 1;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectRecordBase)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectRecordBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectRecordBase)
    MergeFrom(*source);
  }
}

void ObjectRecordBase::MergeFrom(const ObjectRecordBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectRecordBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_struct_.MergeFrom(from.row_struct_);
  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
}

void ObjectRecordBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectRecordBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordBase::CopyFrom(const ObjectRecordBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectRecordBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordBase::IsInitialized() const {
  return true;
}

void ObjectRecordBase::InternalSwap(ObjectRecordBase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  row_struct_.InternalSwap(&other->row_struct_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordBase::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[16]);
}

// ===================================================================

class ObjectPropertyInt::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectPropertyInt* msg);
};

const ::KWMsg::Ident&
ObjectPropertyInt::_Internal::player_id(const ObjectPropertyInt* msg) {
  return *msg->player_id_;
}
ObjectPropertyInt::ObjectPropertyInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectPropertyInt)
}
ObjectPropertyInt::ObjectPropertyInt(const ObjectPropertyInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectPropertyInt)
}

void ObjectPropertyInt::SharedCtor() {
player_id_ = nullptr;
}

ObjectPropertyInt::~ObjectPropertyInt() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectPropertyInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyInt::ArenaDtor(void* object) {
  ObjectPropertyInt* _this = reinterpret_cast< ObjectPropertyInt* >(object);
  (void)_this;
}
void ObjectPropertyInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectPropertyInt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectPropertyInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PropertyInt property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectPropertyInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .KWMsg.PropertyInt property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectPropertyInt)
  return target;
}

size_t ObjectPropertyInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectPropertyInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.PropertyInt property_list = 2;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectPropertyInt)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectPropertyInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectPropertyInt)
    MergeFrom(*source);
  }
}

void ObjectPropertyInt::MergeFrom(const ObjectPropertyInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectPropertyInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectPropertyInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectPropertyInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyInt::CopyFrom(const ObjectPropertyInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectPropertyInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyInt::IsInitialized() const {
  return true;
}

void ObjectPropertyInt::InternalSwap(ObjectPropertyInt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyInt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[17]);
}

// ===================================================================

class ObjectPropertyFloat::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectPropertyFloat* msg);
};

const ::KWMsg::Ident&
ObjectPropertyFloat::_Internal::player_id(const ObjectPropertyFloat* msg) {
  return *msg->player_id_;
}
ObjectPropertyFloat::ObjectPropertyFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectPropertyFloat)
}
ObjectPropertyFloat::ObjectPropertyFloat(const ObjectPropertyFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectPropertyFloat)
}

void ObjectPropertyFloat::SharedCtor() {
player_id_ = nullptr;
}

ObjectPropertyFloat::~ObjectPropertyFloat() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectPropertyFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyFloat::ArenaDtor(void* object) {
  ObjectPropertyFloat* _this = reinterpret_cast< ObjectPropertyFloat* >(object);
  (void)_this;
}
void ObjectPropertyFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectPropertyFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectPropertyFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PropertyFloat property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectPropertyFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .KWMsg.PropertyFloat property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectPropertyFloat)
  return target;
}

size_t ObjectPropertyFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectPropertyFloat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.PropertyFloat property_list = 2;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectPropertyFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectPropertyFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectPropertyFloat)
    MergeFrom(*source);
  }
}

void ObjectPropertyFloat::MergeFrom(const ObjectPropertyFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectPropertyFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectPropertyFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectPropertyFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyFloat::CopyFrom(const ObjectPropertyFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectPropertyFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyFloat::IsInitialized() const {
  return true;
}

void ObjectPropertyFloat::InternalSwap(ObjectPropertyFloat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyFloat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[18]);
}

// ===================================================================

class ObjectPropertyString::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectPropertyString* msg);
};

const ::KWMsg::Ident&
ObjectPropertyString::_Internal::player_id(const ObjectPropertyString* msg) {
  return *msg->player_id_;
}
ObjectPropertyString::ObjectPropertyString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectPropertyString)
}
ObjectPropertyString::ObjectPropertyString(const ObjectPropertyString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectPropertyString)
}

void ObjectPropertyString::SharedCtor() {
player_id_ = nullptr;
}

ObjectPropertyString::~ObjectPropertyString() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectPropertyString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyString::ArenaDtor(void* object) {
  ObjectPropertyString* _this = reinterpret_cast< ObjectPropertyString* >(object);
  (void)_this;
}
void ObjectPropertyString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectPropertyString::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectPropertyString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PropertyString property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectPropertyString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .KWMsg.PropertyString property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectPropertyString)
  return target;
}

size_t ObjectPropertyString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectPropertyString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.PropertyString property_list = 2;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectPropertyString)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectPropertyString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectPropertyString)
    MergeFrom(*source);
  }
}

void ObjectPropertyString::MergeFrom(const ObjectPropertyString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectPropertyString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectPropertyString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectPropertyString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyString::CopyFrom(const ObjectPropertyString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectPropertyString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyString::IsInitialized() const {
  return true;
}

void ObjectPropertyString::InternalSwap(ObjectPropertyString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[19]);
}

// ===================================================================

class ObjectPropertyObject::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectPropertyObject* msg);
};

const ::KWMsg::Ident&
ObjectPropertyObject::_Internal::player_id(const ObjectPropertyObject* msg) {
  return *msg->player_id_;
}
ObjectPropertyObject::ObjectPropertyObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectPropertyObject)
}
ObjectPropertyObject::ObjectPropertyObject(const ObjectPropertyObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectPropertyObject)
}

void ObjectPropertyObject::SharedCtor() {
player_id_ = nullptr;
}

ObjectPropertyObject::~ObjectPropertyObject() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectPropertyObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyObject::ArenaDtor(void* object) {
  ObjectPropertyObject* _this = reinterpret_cast< ObjectPropertyObject* >(object);
  (void)_this;
}
void ObjectPropertyObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectPropertyObject::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectPropertyObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PropertyObject property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectPropertyObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .KWMsg.PropertyObject property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectPropertyObject)
  return target;
}

size_t ObjectPropertyObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectPropertyObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.PropertyObject property_list = 2;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectPropertyObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectPropertyObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectPropertyObject)
    MergeFrom(*source);
  }
}

void ObjectPropertyObject::MergeFrom(const ObjectPropertyObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectPropertyObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectPropertyObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectPropertyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyObject::CopyFrom(const ObjectPropertyObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectPropertyObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyObject::IsInitialized() const {
  return true;
}

void ObjectPropertyObject::InternalSwap(ObjectPropertyObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[20]);
}

// ===================================================================

class ObjectPropertyVector2::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectPropertyVector2* msg);
};

const ::KWMsg::Ident&
ObjectPropertyVector2::_Internal::player_id(const ObjectPropertyVector2* msg) {
  return *msg->player_id_;
}
ObjectPropertyVector2::ObjectPropertyVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectPropertyVector2)
}
ObjectPropertyVector2::ObjectPropertyVector2(const ObjectPropertyVector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectPropertyVector2)
}

void ObjectPropertyVector2::SharedCtor() {
player_id_ = nullptr;
}

ObjectPropertyVector2::~ObjectPropertyVector2() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectPropertyVector2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyVector2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyVector2::ArenaDtor(void* object) {
  ObjectPropertyVector2* _this = reinterpret_cast< ObjectPropertyVector2* >(object);
  (void)_this;
}
void ObjectPropertyVector2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyVector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectPropertyVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectPropertyVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyVector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PropertyVector2 property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyVector2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectPropertyVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .KWMsg.PropertyVector2 property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectPropertyVector2)
  return target;
}

size_t ObjectPropertyVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectPropertyVector2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.PropertyVector2 property_list = 2;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyVector2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectPropertyVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyVector2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyVector2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectPropertyVector2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectPropertyVector2)
    MergeFrom(*source);
  }
}

void ObjectPropertyVector2::MergeFrom(const ObjectPropertyVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectPropertyVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectPropertyVector2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectPropertyVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyVector2::CopyFrom(const ObjectPropertyVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectPropertyVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyVector2::IsInitialized() const {
  return true;
}

void ObjectPropertyVector2::InternalSwap(ObjectPropertyVector2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyVector2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[21]);
}

// ===================================================================

class ObjectPropertyVector3::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectPropertyVector3* msg);
};

const ::KWMsg::Ident&
ObjectPropertyVector3::_Internal::player_id(const ObjectPropertyVector3* msg) {
  return *msg->player_id_;
}
ObjectPropertyVector3::ObjectPropertyVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectPropertyVector3)
}
ObjectPropertyVector3::ObjectPropertyVector3(const ObjectPropertyVector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectPropertyVector3)
}

void ObjectPropertyVector3::SharedCtor() {
player_id_ = nullptr;
}

ObjectPropertyVector3::~ObjectPropertyVector3() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectPropertyVector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyVector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyVector3::ArenaDtor(void* object) {
  ObjectPropertyVector3* _this = reinterpret_cast< ObjectPropertyVector3* >(object);
  (void)_this;
}
void ObjectPropertyVector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyVector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectPropertyVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectPropertyVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyVector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PropertyVector3 property_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyVector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectPropertyVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .KWMsg.PropertyVector3 property_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectPropertyVector3)
  return target;
}

size_t ObjectPropertyVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectPropertyVector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.PropertyVector3 property_list = 2;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyVector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectPropertyVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyVector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyVector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectPropertyVector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectPropertyVector3)
    MergeFrom(*source);
  }
}

void ObjectPropertyVector3::MergeFrom(const ObjectPropertyVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectPropertyVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectPropertyVector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectPropertyVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyVector3::CopyFrom(const ObjectPropertyVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectPropertyVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyVector3::IsInitialized() const {
  return true;
}

void ObjectPropertyVector3::InternalSwap(ObjectPropertyVector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyVector3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[22]);
}

// ===================================================================

class ObjectRecordInt::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectRecordInt* msg);
};

const ::KWMsg::Ident&
ObjectRecordInt::_Internal::player_id(const ObjectRecordInt* msg) {
  return *msg->player_id_;
}
ObjectRecordInt::ObjectRecordInt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectRecordInt)
}
ObjectRecordInt::ObjectRecordInt(const ObjectRecordInt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectRecordInt)
}

void ObjectRecordInt::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ObjectRecordInt::~ObjectRecordInt() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectRecordInt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordInt::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordInt::ArenaDtor(void* object) {
  ObjectRecordInt* _this = reinterpret_cast< ObjectRecordInt* >(object);
  (void)_this;
}
void ObjectRecordInt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordInt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectRecordInt::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectRecordInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  record_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordInt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordInt property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordInt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectRecordInt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated .KWMsg.RecordInt property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectRecordInt)
  return target;
}

size_t ObjectRecordInt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectRecordInt)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RecordInt property_list = 3;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordInt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectRecordInt)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordInt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordInt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectRecordInt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectRecordInt)
    MergeFrom(*source);
  }
}

void ObjectRecordInt::MergeFrom(const ObjectRecordInt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectRecordInt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordInt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectRecordInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordInt::CopyFrom(const ObjectRecordInt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectRecordInt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordInt::IsInitialized() const {
  return true;
}

void ObjectRecordInt::InternalSwap(ObjectRecordInt* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordInt::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[23]);
}

// ===================================================================

class ObjectRecordFloat::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectRecordFloat* msg);
};

const ::KWMsg::Ident&
ObjectRecordFloat::_Internal::player_id(const ObjectRecordFloat* msg) {
  return *msg->player_id_;
}
ObjectRecordFloat::ObjectRecordFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectRecordFloat)
}
ObjectRecordFloat::ObjectRecordFloat(const ObjectRecordFloat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectRecordFloat)
}

void ObjectRecordFloat::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ObjectRecordFloat::~ObjectRecordFloat() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectRecordFloat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordFloat::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordFloat::ArenaDtor(void* object) {
  ObjectRecordFloat* _this = reinterpret_cast< ObjectRecordFloat* >(object);
  (void)_this;
}
void ObjectRecordFloat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordFloat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectRecordFloat::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectRecordFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  record_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordFloat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordFloat property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordFloat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectRecordFloat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated .KWMsg.RecordFloat property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectRecordFloat)
  return target;
}

size_t ObjectRecordFloat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectRecordFloat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RecordFloat property_list = 3;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordFloat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectRecordFloat)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordFloat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordFloat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectRecordFloat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectRecordFloat)
    MergeFrom(*source);
  }
}

void ObjectRecordFloat::MergeFrom(const ObjectRecordFloat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectRecordFloat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordFloat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectRecordFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordFloat::CopyFrom(const ObjectRecordFloat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectRecordFloat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordFloat::IsInitialized() const {
  return true;
}

void ObjectRecordFloat::InternalSwap(ObjectRecordFloat* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordFloat::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[24]);
}

// ===================================================================

class ObjectRecordString::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectRecordString* msg);
};

const ::KWMsg::Ident&
ObjectRecordString::_Internal::player_id(const ObjectRecordString* msg) {
  return *msg->player_id_;
}
ObjectRecordString::ObjectRecordString(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectRecordString)
}
ObjectRecordString::ObjectRecordString(const ObjectRecordString& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectRecordString)
}

void ObjectRecordString::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ObjectRecordString::~ObjectRecordString() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectRecordString)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordString::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordString::ArenaDtor(void* object) {
  ObjectRecordString* _this = reinterpret_cast< ObjectRecordString* >(object);
  (void)_this;
}
void ObjectRecordString::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordString::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectRecordString::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectRecordString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  record_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordString::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordString property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordString::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectRecordString)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated .KWMsg.RecordString property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectRecordString)
  return target;
}

size_t ObjectRecordString::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectRecordString)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RecordString property_list = 3;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordString::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectRecordString)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordString* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordString>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectRecordString)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectRecordString)
    MergeFrom(*source);
  }
}

void ObjectRecordString::MergeFrom(const ObjectRecordString& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectRecordString)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordString::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectRecordString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordString::CopyFrom(const ObjectRecordString& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectRecordString)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordString::IsInitialized() const {
  return true;
}

void ObjectRecordString::InternalSwap(ObjectRecordString* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordString::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[25]);
}

// ===================================================================

class ObjectRecordObject::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectRecordObject* msg);
};

const ::KWMsg::Ident&
ObjectRecordObject::_Internal::player_id(const ObjectRecordObject* msg) {
  return *msg->player_id_;
}
ObjectRecordObject::ObjectRecordObject(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectRecordObject)
}
ObjectRecordObject::ObjectRecordObject(const ObjectRecordObject& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectRecordObject)
}

void ObjectRecordObject::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ObjectRecordObject::~ObjectRecordObject() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectRecordObject)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordObject::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordObject::ArenaDtor(void* object) {
  ObjectRecordObject* _this = reinterpret_cast< ObjectRecordObject* >(object);
  (void)_this;
}
void ObjectRecordObject::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordObject::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectRecordObject::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectRecordObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  record_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordObject::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordObject property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordObject::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectRecordObject)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated .KWMsg.RecordObject property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectRecordObject)
  return target;
}

size_t ObjectRecordObject::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectRecordObject)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RecordObject property_list = 3;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordObject::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectRecordObject)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordObject* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordObject>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectRecordObject)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectRecordObject)
    MergeFrom(*source);
  }
}

void ObjectRecordObject::MergeFrom(const ObjectRecordObject& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectRecordObject)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordObject::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectRecordObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordObject::CopyFrom(const ObjectRecordObject& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectRecordObject)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordObject::IsInitialized() const {
  return true;
}

void ObjectRecordObject::InternalSwap(ObjectRecordObject* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordObject::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[26]);
}

// ===================================================================

class ObjectRecordVector2::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectRecordVector2* msg);
};

const ::KWMsg::Ident&
ObjectRecordVector2::_Internal::player_id(const ObjectRecordVector2* msg) {
  return *msg->player_id_;
}
ObjectRecordVector2::ObjectRecordVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectRecordVector2)
}
ObjectRecordVector2::ObjectRecordVector2(const ObjectRecordVector2& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectRecordVector2)
}

void ObjectRecordVector2::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ObjectRecordVector2::~ObjectRecordVector2() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectRecordVector2)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordVector2::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordVector2::ArenaDtor(void* object) {
  ObjectRecordVector2* _this = reinterpret_cast< ObjectRecordVector2* >(object);
  (void)_this;
}
void ObjectRecordVector2::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordVector2::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectRecordVector2::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectRecordVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  record_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordVector2::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordVector2 property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordVector2::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectRecordVector2)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated .KWMsg.RecordVector2 property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectRecordVector2)
  return target;
}

size_t ObjectRecordVector2::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectRecordVector2)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RecordVector2 property_list = 3;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordVector2::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectRecordVector2)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordVector2* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordVector2>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectRecordVector2)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectRecordVector2)
    MergeFrom(*source);
  }
}

void ObjectRecordVector2::MergeFrom(const ObjectRecordVector2& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectRecordVector2)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordVector2::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectRecordVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordVector2::CopyFrom(const ObjectRecordVector2& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectRecordVector2)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordVector2::IsInitialized() const {
  return true;
}

void ObjectRecordVector2::InternalSwap(ObjectRecordVector2* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordVector2::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[27]);
}

// ===================================================================

class ObjectRecordVector3::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectRecordVector3* msg);
};

const ::KWMsg::Ident&
ObjectRecordVector3::_Internal::player_id(const ObjectRecordVector3* msg) {
  return *msg->player_id_;
}
ObjectRecordVector3::ObjectRecordVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectRecordVector3)
}
ObjectRecordVector3::ObjectRecordVector3(const ObjectRecordVector3& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_list_(from.property_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectRecordVector3)
}

void ObjectRecordVector3::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ObjectRecordVector3::~ObjectRecordVector3() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectRecordVector3)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordVector3::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordVector3::ArenaDtor(void* object) {
  ObjectRecordVector3* _this = reinterpret_cast< ObjectRecordVector3* >(object);
  (void)_this;
}
void ObjectRecordVector3::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordVector3::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectRecordVector3::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectRecordVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_list_.Clear();
  record_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordVector3::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordVector3 property_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordVector3::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectRecordVector3)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated .KWMsg.RecordVector3 property_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_property_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectRecordVector3)
  return target;
}

size_t ObjectRecordVector3::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectRecordVector3)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RecordVector3 property_list = 3;
  total_size += 1UL * this->_internal_property_list_size();
  for (const auto& msg : this->property_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordVector3::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectRecordVector3)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordVector3* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordVector3>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectRecordVector3)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectRecordVector3)
    MergeFrom(*source);
  }
}

void ObjectRecordVector3::MergeFrom(const ObjectRecordVector3& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectRecordVector3)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_list_.MergeFrom(from.property_list_);
  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordVector3::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectRecordVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordVector3::CopyFrom(const ObjectRecordVector3& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectRecordVector3)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordVector3::IsInitialized() const {
  return true;
}

void ObjectRecordVector3::InternalSwap(ObjectRecordVector3* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_list_.InternalSwap(&other->property_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordVector3::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[28]);
}

// ===================================================================

class ObjectRecordSwap::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectRecordSwap* msg);
};

const ::KWMsg::Ident&
ObjectRecordSwap::_Internal::player_id(const ObjectRecordSwap* msg) {
  return *msg->player_id_;
}
ObjectRecordSwap::ObjectRecordSwap(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectRecordSwap)
}
ObjectRecordSwap::ObjectRecordSwap(const ObjectRecordSwap& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  ::memcpy(&row_origin_, &from.row_origin_,
    static_cast<size_t>(reinterpret_cast<char*>(&row_target_) -
    reinterpret_cast<char*>(&row_origin_)) + sizeof(row_target_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectRecordSwap)
}

void ObjectRecordSwap::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&row_target_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(row_target_));
}

ObjectRecordSwap::~ObjectRecordSwap() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectRecordSwap)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordSwap::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordSwap::ArenaDtor(void* object) {
  ObjectRecordSwap* _this = reinterpret_cast< ObjectRecordSwap* >(object);
  (void)_this;
}
void ObjectRecordSwap::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordSwap::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectRecordSwap::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectRecordSwap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  ::memset(&row_origin_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&row_target_) -
      reinterpret_cast<char*>(&row_origin_)) + sizeof(row_target_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordSwap::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 row_origin = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          row_origin_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 row_target = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          row_target_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordSwap::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectRecordSwap)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // int32 row_origin = 3;
  if (this->row_origin() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_row_origin(), target);
  }

  // int32 row_target = 4;
  if (this->row_target() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_row_target(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectRecordSwap)
  return target;
}

size_t ObjectRecordSwap::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectRecordSwap)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // int32 row_origin = 3;
  if (this->row_origin() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row_origin());
  }

  // int32 row_target = 4;
  if (this->row_target() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_row_target());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordSwap::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectRecordSwap)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordSwap* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordSwap>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectRecordSwap)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectRecordSwap)
    MergeFrom(*source);
  }
}

void ObjectRecordSwap::MergeFrom(const ObjectRecordSwap& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectRecordSwap)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.row_origin() != 0) {
    _internal_set_row_origin(from._internal_row_origin());
  }
  if (from.row_target() != 0) {
    _internal_set_row_target(from._internal_row_target());
  }
}

void ObjectRecordSwap::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectRecordSwap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordSwap::CopyFrom(const ObjectRecordSwap& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectRecordSwap)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordSwap::IsInitialized() const {
  return true;
}

void ObjectRecordSwap::InternalSwap(ObjectRecordSwap* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectRecordSwap, row_target_)
      + sizeof(ObjectRecordSwap::row_target_)
      - PROTOBUF_FIELD_OFFSET(ObjectRecordSwap, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordSwap::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[29]);
}

// ===================================================================

class ObjectRecordAddRow::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectRecordAddRow* msg);
};

const ::KWMsg::Ident&
ObjectRecordAddRow::_Internal::player_id(const ObjectRecordAddRow* msg) {
  return *msg->player_id_;
}
ObjectRecordAddRow::ObjectRecordAddRow(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  row_data_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectRecordAddRow)
}
ObjectRecordAddRow::ObjectRecordAddRow(const ObjectRecordAddRow& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      row_data_(from.row_data_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectRecordAddRow)
}

void ObjectRecordAddRow::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ObjectRecordAddRow::~ObjectRecordAddRow() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectRecordAddRow)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordAddRow::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordAddRow::ArenaDtor(void* object) {
  ObjectRecordAddRow* _this = reinterpret_cast< ObjectRecordAddRow* >(object);
  (void)_this;
}
void ObjectRecordAddRow::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordAddRow::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectRecordAddRow::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectRecordAddRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  row_data_.Clear();
  record_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordAddRow::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.RecordAddRowStruct row_data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_data(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordAddRow::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectRecordAddRow)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated .KWMsg.RecordAddRowStruct row_data = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_data_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_row_data(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectRecordAddRow)
  return target;
}

size_t ObjectRecordAddRow::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectRecordAddRow)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.RecordAddRowStruct row_data = 3;
  total_size += 1UL * this->_internal_row_data_size();
  for (const auto& msg : this->row_data_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordAddRow::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectRecordAddRow)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordAddRow* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordAddRow>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectRecordAddRow)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectRecordAddRow)
    MergeFrom(*source);
  }
}

void ObjectRecordAddRow::MergeFrom(const ObjectRecordAddRow& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectRecordAddRow)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  row_data_.MergeFrom(from.row_data_);
  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordAddRow::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectRecordAddRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordAddRow::CopyFrom(const ObjectRecordAddRow& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectRecordAddRow)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordAddRow::IsInitialized() const {
  return true;
}

void ObjectRecordAddRow::InternalSwap(ObjectRecordAddRow* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  row_data_.InternalSwap(&other->row_data_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordAddRow::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[30]);
}

// ===================================================================

class ObjectRecordRemove::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectRecordRemove* msg);
};

const ::KWMsg::Ident&
ObjectRecordRemove::_Internal::player_id(const ObjectRecordRemove* msg) {
  return *msg->player_id_;
}
ObjectRecordRemove::ObjectRecordRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  remove_row_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectRecordRemove)
}
ObjectRecordRemove::ObjectRecordRemove(const ObjectRecordRemove& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      remove_row_(from.remove_row_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_record_name().empty()) {
    record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_record_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectRecordRemove)
}

void ObjectRecordRemove::SharedCtor() {
record_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
player_id_ = nullptr;
}

ObjectRecordRemove::~ObjectRecordRemove() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectRecordRemove)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordRemove::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  record_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordRemove::ArenaDtor(void* object) {
  ObjectRecordRemove* _this = reinterpret_cast< ObjectRecordRemove* >(object);
  (void)_this;
}
void ObjectRecordRemove::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordRemove::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectRecordRemove::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectRecordRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  remove_row_.Clear();
  record_name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordRemove::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes record_name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_record_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 remove_row = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_remove_row(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_remove_row(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordRemove::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectRecordRemove)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_record_name(), target);
  }

  // repeated int32 remove_row = 3;
  {
    int byte_size = _remove_row_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_remove_row(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectRecordRemove)
  return target;
}

size_t ObjectRecordRemove::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectRecordRemove)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 remove_row = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->remove_row_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _remove_row_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // bytes record_name = 2;
  if (!this->record_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_record_name());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordRemove::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectRecordRemove)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordRemove* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordRemove>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectRecordRemove)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectRecordRemove)
    MergeFrom(*source);
  }
}

void ObjectRecordRemove::MergeFrom(const ObjectRecordRemove& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectRecordRemove)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  remove_row_.MergeFrom(from.remove_row_);
  if (!from.record_name().empty()) {
    _internal_set_record_name(from._internal_record_name());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordRemove::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectRecordRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordRemove::CopyFrom(const ObjectRecordRemove& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectRecordRemove)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordRemove::IsInitialized() const {
  return true;
}

void ObjectRecordRemove::InternalSwap(ObjectRecordRemove* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  remove_row_.InternalSwap(&other->remove_row_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &record_name_, GetArenaForAllocation(),
      &other->record_name_, other->GetArenaForAllocation()
  );
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordRemove::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[31]);
}

// ===================================================================

class ObjectPropertyList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectPropertyList* msg);
};

const ::KWMsg::Ident&
ObjectPropertyList::_Internal::player_id(const ObjectPropertyList* msg) {
  return *msg->player_id_;
}
ObjectPropertyList::ObjectPropertyList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  property_int_list_(arena),
  property_float_list_(arena),
  property_string_list_(arena),
  property_object_list_(arena),
  property_vector2_list_(arena),
  property_vector3_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectPropertyList)
}
ObjectPropertyList::ObjectPropertyList(const ObjectPropertyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      property_int_list_(from.property_int_list_),
      property_float_list_(from.property_float_list_),
      property_string_list_(from.property_string_list_),
      property_object_list_(from.property_object_list_),
      property_vector2_list_(from.property_vector2_list_),
      property_vector3_list_(from.property_vector3_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectPropertyList)
}

void ObjectPropertyList::SharedCtor() {
player_id_ = nullptr;
}

ObjectPropertyList::~ObjectPropertyList() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectPropertyList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectPropertyList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectPropertyList::ArenaDtor(void* object) {
  ObjectPropertyList* _this = reinterpret_cast< ObjectPropertyList* >(object);
  (void)_this;
}
void ObjectPropertyList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectPropertyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectPropertyList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectPropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  property_int_list_.Clear();
  property_float_list_.Clear();
  property_string_list_.Clear();
  property_object_list_.Clear();
  property_vector2_list_.Clear();
  property_vector3_list_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectPropertyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PropertyInt property_int_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_int_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PropertyFloat property_float_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_float_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PropertyString property_string_list = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_string_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PropertyObject property_object_list = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_object_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PropertyVector2 property_vector2_list = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_vector2_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.PropertyVector3 property_vector3_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_property_vector3_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectPropertyList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectPropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .KWMsg.PropertyInt property_int_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_int_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_property_int_list(i), target, stream);
  }

  // repeated .KWMsg.PropertyFloat property_float_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_float_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_property_float_list(i), target, stream);
  }

  // repeated .KWMsg.PropertyString property_string_list = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_string_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_property_string_list(i), target, stream);
  }

  // repeated .KWMsg.PropertyObject property_object_list = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_object_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_property_object_list(i), target, stream);
  }

  // repeated .KWMsg.PropertyVector2 property_vector2_list = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_vector2_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_property_vector2_list(i), target, stream);
  }

  // repeated .KWMsg.PropertyVector3 property_vector3_list = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_property_vector3_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_property_vector3_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectPropertyList)
  return target;
}

size_t ObjectPropertyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectPropertyList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.PropertyInt property_int_list = 2;
  total_size += 1UL * this->_internal_property_int_list_size();
  for (const auto& msg : this->property_int_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.PropertyFloat property_float_list = 3;
  total_size += 1UL * this->_internal_property_float_list_size();
  for (const auto& msg : this->property_float_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.PropertyString property_string_list = 4;
  total_size += 1UL * this->_internal_property_string_list_size();
  for (const auto& msg : this->property_string_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.PropertyObject property_object_list = 5;
  total_size += 1UL * this->_internal_property_object_list_size();
  for (const auto& msg : this->property_object_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.PropertyVector2 property_vector2_list = 6;
  total_size += 1UL * this->_internal_property_vector2_list_size();
  for (const auto& msg : this->property_vector2_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .KWMsg.PropertyVector3 property_vector3_list = 7;
  total_size += 1UL * this->_internal_property_vector3_list_size();
  for (const auto& msg : this->property_vector3_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectPropertyList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectPropertyList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectPropertyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectPropertyList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectPropertyList)
    MergeFrom(*source);
  }
}

void ObjectPropertyList::MergeFrom(const ObjectPropertyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  property_int_list_.MergeFrom(from.property_int_list_);
  property_float_list_.MergeFrom(from.property_float_list_);
  property_string_list_.MergeFrom(from.property_string_list_);
  property_object_list_.MergeFrom(from.property_object_list_);
  property_vector2_list_.MergeFrom(from.property_vector2_list_);
  property_vector3_list_.MergeFrom(from.property_vector3_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectPropertyList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectPropertyList::CopyFrom(const ObjectPropertyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectPropertyList::IsInitialized() const {
  return true;
}

void ObjectPropertyList::InternalSwap(ObjectPropertyList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  property_int_list_.InternalSwap(&other->property_int_list_);
  property_float_list_.InternalSwap(&other->property_float_list_);
  property_string_list_.InternalSwap(&other->property_string_list_);
  property_object_list_.InternalSwap(&other->property_object_list_);
  property_vector2_list_.InternalSwap(&other->property_vector2_list_);
  property_vector3_list_.InternalSwap(&other->property_vector3_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectPropertyList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[32]);
}

// ===================================================================

class MultiObjectPropertyList::_Internal {
 public:
};

MultiObjectPropertyList::MultiObjectPropertyList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multi_player_property_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.MultiObjectPropertyList)
}
MultiObjectPropertyList::MultiObjectPropertyList(const MultiObjectPropertyList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multi_player_property_(from.multi_player_property_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.MultiObjectPropertyList)
}

void MultiObjectPropertyList::SharedCtor() {
}

MultiObjectPropertyList::~MultiObjectPropertyList() {
  // @@protoc_insertion_point(destructor:KWMsg.MultiObjectPropertyList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiObjectPropertyList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MultiObjectPropertyList::ArenaDtor(void* object) {
  MultiObjectPropertyList* _this = reinterpret_cast< MultiObjectPropertyList* >(object);
  (void)_this;
}
void MultiObjectPropertyList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiObjectPropertyList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiObjectPropertyList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.MultiObjectPropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multi_player_property_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiObjectPropertyList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.ObjectPropertyList multi_player_property = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_player_property(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiObjectPropertyList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.MultiObjectPropertyList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.ObjectPropertyList multi_player_property = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_player_property_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_multi_player_property(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.MultiObjectPropertyList)
  return target;
}

size_t MultiObjectPropertyList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.MultiObjectPropertyList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.ObjectPropertyList multi_player_property = 1;
  total_size += 1UL * this->_internal_multi_player_property_size();
  for (const auto& msg : this->multi_player_property_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiObjectPropertyList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.MultiObjectPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiObjectPropertyList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiObjectPropertyList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.MultiObjectPropertyList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.MultiObjectPropertyList)
    MergeFrom(*source);
  }
}

void MultiObjectPropertyList::MergeFrom(const MultiObjectPropertyList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.MultiObjectPropertyList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multi_player_property_.MergeFrom(from.multi_player_property_);
}

void MultiObjectPropertyList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.MultiObjectPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiObjectPropertyList::CopyFrom(const MultiObjectPropertyList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.MultiObjectPropertyList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiObjectPropertyList::IsInitialized() const {
  return true;
}

void MultiObjectPropertyList::InternalSwap(MultiObjectPropertyList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  multi_player_property_.InternalSwap(&other->multi_player_property_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiObjectPropertyList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[33]);
}

// ===================================================================

class ObjectRecordList::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectRecordList* msg);
};

const ::KWMsg::Ident&
ObjectRecordList::_Internal::player_id(const ObjectRecordList* msg) {
  return *msg->player_id_;
}
ObjectRecordList::ObjectRecordList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  record_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectRecordList)
}
ObjectRecordList::ObjectRecordList(const ObjectRecordList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      record_list_(from.record_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectRecordList)
}

void ObjectRecordList::SharedCtor() {
player_id_ = nullptr;
}

ObjectRecordList::~ObjectRecordList() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectRecordList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
}

void ObjectRecordList::ArenaDtor(void* object) {
  ObjectRecordList* _this = reinterpret_cast< ObjectRecordList* >(object);
  (void)_this;
}
void ObjectRecordList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  record_list_.Clear();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.ObjectRecordBase record_list = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_record_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // repeated .KWMsg.ObjectRecordBase record_list = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_record_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_record_list(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectRecordList)
  return target;
}

size_t ObjectRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectRecordList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.ObjectRecordBase record_list = 2;
  total_size += 1UL * this->_internal_record_list_size();
  for (const auto& msg : this->record_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectRecordList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectRecordList)
    MergeFrom(*source);
  }
}

void ObjectRecordList::MergeFrom(const ObjectRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  record_list_.MergeFrom(from.record_list_);
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
}

void ObjectRecordList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordList::CopyFrom(const ObjectRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordList::IsInitialized() const {
  return true;
}

void ObjectRecordList::InternalSwap(ObjectRecordList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  record_list_.InternalSwap(&other->record_list_);
  swap(player_id_, other->player_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[34]);
}

// ===================================================================

class MultiObjectRecordList::_Internal {
 public:
};

MultiObjectRecordList::MultiObjectRecordList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  multi_player_record_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.MultiObjectRecordList)
}
MultiObjectRecordList::MultiObjectRecordList(const MultiObjectRecordList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      multi_player_record_(from.multi_player_record_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:KWMsg.MultiObjectRecordList)
}

void MultiObjectRecordList::SharedCtor() {
}

MultiObjectRecordList::~MultiObjectRecordList() {
  // @@protoc_insertion_point(destructor:KWMsg.MultiObjectRecordList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MultiObjectRecordList::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MultiObjectRecordList::ArenaDtor(void* object) {
  MultiObjectRecordList* _this = reinterpret_cast< MultiObjectRecordList* >(object);
  (void)_this;
}
void MultiObjectRecordList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MultiObjectRecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MultiObjectRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.MultiObjectRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  multi_player_record_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MultiObjectRecordList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .KWMsg.ObjectRecordList multi_player_record = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_multi_player_record(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MultiObjectRecordList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.MultiObjectRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .KWMsg.ObjectRecordList multi_player_record = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_multi_player_record_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_multi_player_record(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.MultiObjectRecordList)
  return target;
}

size_t MultiObjectRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.MultiObjectRecordList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.ObjectRecordList multi_player_record = 1;
  total_size += 1UL * this->_internal_multi_player_record_size();
  for (const auto& msg : this->multi_player_record_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MultiObjectRecordList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.MultiObjectRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const MultiObjectRecordList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MultiObjectRecordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.MultiObjectRecordList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.MultiObjectRecordList)
    MergeFrom(*source);
  }
}

void MultiObjectRecordList::MergeFrom(const MultiObjectRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.MultiObjectRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  multi_player_record_.MergeFrom(from.multi_player_record_);
}

void MultiObjectRecordList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.MultiObjectRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MultiObjectRecordList::CopyFrom(const MultiObjectRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.MultiObjectRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MultiObjectRecordList::IsInitialized() const {
  return true;
}

void MultiObjectRecordList::InternalSwap(MultiObjectRecordList* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  multi_player_record_.InternalSwap(&other->multi_player_record_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MultiObjectRecordList::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[35]);
}

// ===================================================================

class ObjectRecordPagination::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const ObjectRecordPagination* msg);
  static const ::KWMsg::ObjectRecordBase& record_list(const ObjectRecordPagination* msg);
};

const ::KWMsg::Ident&
ObjectRecordPagination::_Internal::player_id(const ObjectRecordPagination* msg) {
  return *msg->player_id_;
}
const ::KWMsg::ObjectRecordBase&
ObjectRecordPagination::_Internal::record_list(const ObjectRecordPagination* msg) {
  return *msg->record_list_;
}
ObjectRecordPagination::ObjectRecordPagination(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.ObjectRecordPagination)
}
ObjectRecordPagination::ObjectRecordPagination(const ObjectRecordPagination& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_record_list()) {
    record_list_ = new ::KWMsg::ObjectRecordBase(*from.record_list_);
  } else {
    record_list_ = nullptr;
  }
  ::memcpy(&ret_type_, &from.ret_type_,
    static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&ret_type_)) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.ObjectRecordPagination)
}

void ObjectRecordPagination::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(count_));
}

ObjectRecordPagination::~ObjectRecordPagination() {
  // @@protoc_insertion_point(destructor:KWMsg.ObjectRecordPagination)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ObjectRecordPagination::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete record_list_;
}

void ObjectRecordPagination::ArenaDtor(void* object) {
  ObjectRecordPagination* _this = reinterpret_cast< ObjectRecordPagination* >(object);
  (void)_this;
}
void ObjectRecordPagination::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ObjectRecordPagination::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ObjectRecordPagination::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.ObjectRecordPagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && record_list_ != nullptr) {
    delete record_list_;
  }
  record_list_ = nullptr;
  ::memset(&ret_type_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&count_) -
      reinterpret_cast<char*>(&ret_type_)) + sizeof(count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ObjectRecordPagination::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ObjectRecordPagination.ERetRecordType ret_type = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_ret_type(static_cast<::KWMsg::ObjectRecordPagination_ERetRecordType>(val));
        } else goto handle_unusual;
        continue;
      // int32 cursor_prev = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          cursor_prev_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 cursor_next = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          cursor_next_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bool is_end = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          is_end_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 count = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .KWMsg.ObjectRecordBase record_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_record_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ObjectRecordPagination::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.ObjectRecordPagination)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // .KWMsg.ObjectRecordPagination.ERetRecordType ret_type = 2;
  if (this->ret_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_ret_type(), target);
  }

  // int32 cursor_prev = 3;
  if (this->cursor_prev() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_cursor_prev(), target);
  }

  // int32 cursor_next = 4;
  if (this->cursor_next() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cursor_next(), target);
  }

  // bool is_end = 5;
  if (this->is_end() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_is_end(), target);
  }

  // int32 count = 6;
  if (this->count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_count(), target);
  }

  // .KWMsg.ObjectRecordBase record_list = 7;
  if (this->has_record_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::record_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.ObjectRecordPagination)
  return target;
}

size_t ObjectRecordPagination::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.ObjectRecordPagination)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.ObjectRecordBase record_list = 7;
  if (this->has_record_list()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *record_list_);
  }

  // .KWMsg.ObjectRecordPagination.ERetRecordType ret_type = 2;
  if (this->ret_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_ret_type());
  }

  // int32 cursor_prev = 3;
  if (this->cursor_prev() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cursor_prev());
  }

  // int32 cursor_next = 4;
  if (this->cursor_next() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cursor_next());
  }

  // bool is_end = 5;
  if (this->is_end() != 0) {
    total_size += 1 + 1;
  }

  // int32 count = 6;
  if (this->count() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_count());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ObjectRecordPagination::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.ObjectRecordPagination)
  GOOGLE_DCHECK_NE(&from, this);
  const ObjectRecordPagination* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ObjectRecordPagination>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.ObjectRecordPagination)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.ObjectRecordPagination)
    MergeFrom(*source);
  }
}

void ObjectRecordPagination::MergeFrom(const ObjectRecordPagination& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.ObjectRecordPagination)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_record_list()) {
    _internal_mutable_record_list()->::KWMsg::ObjectRecordBase::MergeFrom(from._internal_record_list());
  }
  if (from.ret_type() != 0) {
    _internal_set_ret_type(from._internal_ret_type());
  }
  if (from.cursor_prev() != 0) {
    _internal_set_cursor_prev(from._internal_cursor_prev());
  }
  if (from.cursor_next() != 0) {
    _internal_set_cursor_next(from._internal_cursor_next());
  }
  if (from.is_end() != 0) {
    _internal_set_is_end(from._internal_is_end());
  }
  if (from.count() != 0) {
    _internal_set_count(from._internal_count());
  }
}

void ObjectRecordPagination::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.ObjectRecordPagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ObjectRecordPagination::CopyFrom(const ObjectRecordPagination& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.ObjectRecordPagination)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ObjectRecordPagination::IsInitialized() const {
  return true;
}

void ObjectRecordPagination::InternalSwap(ObjectRecordPagination* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ObjectRecordPagination, count_)
      + sizeof(ObjectRecordPagination::count_)
      - PROTOBUF_FIELD_OFFSET(ObjectRecordPagination, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ObjectRecordPagination::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[36]);
}

// ===================================================================

class DeviceInfo::_Internal {
 public:
};

DeviceInfo::DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.DeviceInfo)
}
DeviceInfo::DeviceInfo(const DeviceInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_platform().empty()) {
    platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_platform(), 
      GetArenaForAllocation());
  }
  media_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_media_id().empty()) {
    media_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_media_id(), 
      GetArenaForAllocation());
  }
  mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_mac().empty()) {
    mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_mac(), 
      GetArenaForAllocation());
  }
  ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_ip().empty()) {
    ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_ip(), 
      GetArenaForAllocation());
  }
  device_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_model().empty()) {
    device_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_model(), 
      GetArenaForAllocation());
  }
  device_sys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_sys().empty()) {
    device_sys_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_sys(), 
      GetArenaForAllocation());
  }
  idfa_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_idfa().empty()) {
    idfa_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_idfa(), 
      GetArenaForAllocation());
  }
  device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_device_id().empty()) {
    device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_device_id(), 
      GetArenaForAllocation());
  }
  ::memcpy(&os_, &from.os_,
    static_cast<size_t>(reinterpret_cast<char*>(&device_ram_) -
    reinterpret_cast<char*>(&os_)) + sizeof(device_ram_));
  // @@protoc_insertion_point(copy_constructor:KWMsg.DeviceInfo)
}

void DeviceInfo::SharedCtor() {
platform_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
media_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
mac_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
ip_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_model_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_sys_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
idfa_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
device_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&os_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&device_ram_) -
    reinterpret_cast<char*>(&os_)) + sizeof(device_ram_));
}

DeviceInfo::~DeviceInfo() {
  // @@protoc_insertion_point(destructor:KWMsg.DeviceInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  platform_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  media_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ip_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_model_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_sys_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  idfa_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  device_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceInfo::ArenaDtor(void* object) {
  DeviceInfo* _this = reinterpret_cast< DeviceInfo* >(object);
  (void)_this;
}
void DeviceInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DeviceInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  platform_.ClearToEmpty();
  media_id_.ClearToEmpty();
  mac_.ClearToEmpty();
  ip_.ClearToEmpty();
  device_model_.ClearToEmpty();
  device_sys_.ClearToEmpty();
  idfa_.ClearToEmpty();
  device_id_.ClearToEmpty();
  ::memset(&os_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&device_ram_) -
      reinterpret_cast<char*>(&os_)) + sizeof(device_ram_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 os = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          os_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes platform = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_platform();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes media_id = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_media_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes mac = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_mac();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes ip = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_ip();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes device_model = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_device_model();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes device_sys = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_device_sys();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 device_ram = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          device_ram_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes idfa = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_idfa();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes device_id = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_device_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.DeviceInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 os = 1;
  if (this->os() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_os(), target);
  }

  // bytes platform = 2;
  if (!this->platform().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_platform(), target);
  }

  // bytes media_id = 3;
  if (!this->media_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_media_id(), target);
  }

  // bytes mac = 4;
  if (!this->mac().empty()) {
    target = stream->WriteBytesMaybeAliased(
        4, this->_internal_mac(), target);
  }

  // bytes ip = 5;
  if (!this->ip().empty()) {
    target = stream->WriteBytesMaybeAliased(
        5, this->_internal_ip(), target);
  }

  // bytes device_model = 6;
  if (!this->device_model().empty()) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_device_model(), target);
  }

  // bytes device_sys = 7;
  if (!this->device_sys().empty()) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_device_sys(), target);
  }

  // int32 device_ram = 8;
  if (this->device_ram() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_device_ram(), target);
  }

  // bytes idfa = 9;
  if (!this->idfa().empty()) {
    target = stream->WriteBytesMaybeAliased(
        9, this->_internal_idfa(), target);
  }

  // bytes device_id = 10;
  if (!this->device_id().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_device_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.DeviceInfo)
  return target;
}

size_t DeviceInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.DeviceInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes platform = 2;
  if (!this->platform().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_platform());
  }

  // bytes media_id = 3;
  if (!this->media_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_media_id());
  }

  // bytes mac = 4;
  if (!this->mac().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_mac());
  }

  // bytes ip = 5;
  if (!this->ip().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_ip());
  }

  // bytes device_model = 6;
  if (!this->device_model().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_device_model());
  }

  // bytes device_sys = 7;
  if (!this->device_sys().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_device_sys());
  }

  // bytes idfa = 9;
  if (!this->idfa().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_idfa());
  }

  // bytes device_id = 10;
  if (!this->device_id().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_device_id());
  }

  // int32 os = 1;
  if (this->os() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_os());
  }

  // int32 device_ram = 8;
  if (this->device_ram() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_device_ram());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.DeviceInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.DeviceInfo)
    MergeFrom(*source);
  }
}

void DeviceInfo::MergeFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.DeviceInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from.platform().empty()) {
    _internal_set_platform(from._internal_platform());
  }
  if (!from.media_id().empty()) {
    _internal_set_media_id(from._internal_media_id());
  }
  if (!from.mac().empty()) {
    _internal_set_mac(from._internal_mac());
  }
  if (!from.ip().empty()) {
    _internal_set_ip(from._internal_ip());
  }
  if (!from.device_model().empty()) {
    _internal_set_device_model(from._internal_device_model());
  }
  if (!from.device_sys().empty()) {
    _internal_set_device_sys(from._internal_device_sys());
  }
  if (!from.idfa().empty()) {
    _internal_set_idfa(from._internal_idfa());
  }
  if (!from.device_id().empty()) {
    _internal_set_device_id(from._internal_device_id());
  }
  if (from.os() != 0) {
    _internal_set_os(from._internal_os());
  }
  if (from.device_ram() != 0) {
    _internal_set_device_ram(from._internal_device_ram());
  }
}

void DeviceInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceInfo::CopyFrom(const DeviceInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.DeviceInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceInfo::IsInitialized() const {
  return true;
}

void DeviceInfo::InternalSwap(DeviceInfo* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &platform_, GetArenaForAllocation(),
      &other->platform_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &media_id_, GetArenaForAllocation(),
      &other->media_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &mac_, GetArenaForAllocation(),
      &other->mac_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &ip_, GetArenaForAllocation(),
      &other->ip_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_model_, GetArenaForAllocation(),
      &other->device_model_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_sys_, GetArenaForAllocation(),
      &other->device_sys_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &idfa_, GetArenaForAllocation(),
      &other->idfa_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &device_id_, GetArenaForAllocation(),
      &other->device_id_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceInfo, device_ram_)
      + sizeof(DeviceInfo::device_ram_)
      - PROTOBUF_FIELD_OFFSET(DeviceInfo, os_)>(
          reinterpret_cast<char*>(&os_),
          reinterpret_cast<char*>(&other->os_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceInfo::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[37]);
}

// ===================================================================

class MsgBase::_Internal {
 public:
  static const ::KWMsg::Ident& player_id(const MsgBase* msg);
  static const ::KWMsg::Ident& hash_ident(const MsgBase* msg);
};

const ::KWMsg::Ident&
MsgBase::_Internal::player_id(const MsgBase* msg) {
  return *msg->player_id_;
}
const ::KWMsg::Ident&
MsgBase::_Internal::hash_ident(const MsgBase* msg) {
  return *msg->hash_ident_;
}
MsgBase::MsgBase(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  player_client_list_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:KWMsg.MsgBase)
}
MsgBase::MsgBase(const MsgBase& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      player_client_list_(from.player_client_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_msg_data().empty()) {
    msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg_data(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_player_id()) {
    player_id_ = new ::KWMsg::Ident(*from.player_id_);
  } else {
    player_id_ = nullptr;
  }
  if (from._internal_has_hash_ident()) {
    hash_ident_ = new ::KWMsg::Ident(*from.hash_ident_);
  } else {
    hash_ident_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:KWMsg.MsgBase)
}

void MsgBase::SharedCtor() {
msg_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&player_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&hash_ident_) -
    reinterpret_cast<char*>(&player_id_)) + sizeof(hash_ident_));
}

MsgBase::~MsgBase() {
  // @@protoc_insertion_point(destructor:KWMsg.MsgBase)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MsgBase::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete player_id_;
  if (this != internal_default_instance()) delete hash_ident_;
}

void MsgBase::ArenaDtor(void* object) {
  MsgBase* _this = reinterpret_cast< MsgBase* >(object);
  (void)_this;
}
void MsgBase::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MsgBase::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MsgBase::Clear() {
// @@protoc_insertion_point(message_clear_start:KWMsg.MsgBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  player_client_list_.Clear();
  msg_data_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
  if (GetArenaForAllocation() == nullptr && hash_ident_ != nullptr) {
    delete hash_ident_;
  }
  hash_ident_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MsgBase::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .KWMsg.Ident player_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_player_id(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes msg_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_msg_data();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .KWMsg.Ident player_client_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_player_client_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // .KWMsg.Ident hash_ident = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_hash_ident(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MsgBase::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:KWMsg.MsgBase)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::player_id(this), target, stream);
  }

  // bytes msg_data = 2;
  if (!this->msg_data().empty()) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_msg_data(), target);
  }

  // repeated .KWMsg.Ident player_client_list = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_player_client_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_player_client_list(i), target, stream);
  }

  // .KWMsg.Ident hash_ident = 4;
  if (this->has_hash_ident()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::hash_ident(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:KWMsg.MsgBase)
  return target;
}

size_t MsgBase::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:KWMsg.MsgBase)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .KWMsg.Ident player_client_list = 3;
  total_size += 1UL * this->_internal_player_client_list_size();
  for (const auto& msg : this->player_client_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bytes msg_data = 2;
  if (!this->msg_data().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_msg_data());
  }

  // .KWMsg.Ident player_id = 1;
  if (this->has_player_id()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *player_id_);
  }

  // .KWMsg.Ident hash_ident = 4;
  if (this->has_hash_ident()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *hash_ident_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MsgBase::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:KWMsg.MsgBase)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgBase* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MsgBase>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:KWMsg.MsgBase)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:KWMsg.MsgBase)
    MergeFrom(*source);
  }
}

void MsgBase::MergeFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:KWMsg.MsgBase)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  player_client_list_.MergeFrom(from.player_client_list_);
  if (!from.msg_data().empty()) {
    _internal_set_msg_data(from._internal_msg_data());
  }
  if (from.has_player_id()) {
    _internal_mutable_player_id()->::KWMsg::Ident::MergeFrom(from._internal_player_id());
  }
  if (from.has_hash_ident()) {
    _internal_mutable_hash_ident()->::KWMsg::Ident::MergeFrom(from._internal_hash_ident());
  }
}

void MsgBase::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:KWMsg.MsgBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgBase::CopyFrom(const MsgBase& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:KWMsg.MsgBase)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgBase::IsInitialized() const {
  return true;
}

void MsgBase::InternalSwap(MsgBase* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  player_client_list_.InternalSwap(&other->player_client_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_data_, GetArenaForAllocation(),
      &other->msg_data_, other->GetArenaForAllocation()
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MsgBase, hash_ident_)
      + sizeof(MsgBase::hash_ident_)
      - PROTOBUF_FIELD_OFFSET(MsgBase, player_id_)>(
          reinterpret_cast<char*>(&player_id_),
          reinterpret_cast<char*>(&other->player_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MsgBase::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_kwmsgbase_2eproto_getter, &descriptor_table_kwmsgbase_2eproto_once,
      file_level_metadata_kwmsgbase_2eproto[38]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace KWMsg
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::KWMsg::Ident* Arena::CreateMaybeMessage< ::KWMsg::Ident >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::Ident >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::Vector2* Arena::CreateMaybeMessage< ::KWMsg::Vector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::Vector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::Vector3* Arena::CreateMaybeMessage< ::KWMsg::Vector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::Vector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PropertyInt* Arena::CreateMaybeMessage< ::KWMsg::PropertyInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PropertyInt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PropertyFloat* Arena::CreateMaybeMessage< ::KWMsg::PropertyFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PropertyFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PropertyString* Arena::CreateMaybeMessage< ::KWMsg::PropertyString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PropertyString >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PropertyObject* Arena::CreateMaybeMessage< ::KWMsg::PropertyObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PropertyObject >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PropertyVector2* Arena::CreateMaybeMessage< ::KWMsg::PropertyVector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PropertyVector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::PropertyVector3* Arena::CreateMaybeMessage< ::KWMsg::PropertyVector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::PropertyVector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::RecordInt* Arena::CreateMaybeMessage< ::KWMsg::RecordInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::RecordInt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::RecordFloat* Arena::CreateMaybeMessage< ::KWMsg::RecordFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::RecordFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::RecordString* Arena::CreateMaybeMessage< ::KWMsg::RecordString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::RecordString >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::RecordObject* Arena::CreateMaybeMessage< ::KWMsg::RecordObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::RecordObject >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::RecordVector2* Arena::CreateMaybeMessage< ::KWMsg::RecordVector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::RecordVector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::RecordVector3* Arena::CreateMaybeMessage< ::KWMsg::RecordVector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::RecordVector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::RecordAddRowStruct* Arena::CreateMaybeMessage< ::KWMsg::RecordAddRowStruct >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::RecordAddRowStruct >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectRecordBase* Arena::CreateMaybeMessage< ::KWMsg::ObjectRecordBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectRecordBase >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectPropertyInt* Arena::CreateMaybeMessage< ::KWMsg::ObjectPropertyInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectPropertyInt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectPropertyFloat* Arena::CreateMaybeMessage< ::KWMsg::ObjectPropertyFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectPropertyFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectPropertyString* Arena::CreateMaybeMessage< ::KWMsg::ObjectPropertyString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectPropertyString >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectPropertyObject* Arena::CreateMaybeMessage< ::KWMsg::ObjectPropertyObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectPropertyObject >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectPropertyVector2* Arena::CreateMaybeMessage< ::KWMsg::ObjectPropertyVector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectPropertyVector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectPropertyVector3* Arena::CreateMaybeMessage< ::KWMsg::ObjectPropertyVector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectPropertyVector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectRecordInt* Arena::CreateMaybeMessage< ::KWMsg::ObjectRecordInt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectRecordInt >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectRecordFloat* Arena::CreateMaybeMessage< ::KWMsg::ObjectRecordFloat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectRecordFloat >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectRecordString* Arena::CreateMaybeMessage< ::KWMsg::ObjectRecordString >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectRecordString >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectRecordObject* Arena::CreateMaybeMessage< ::KWMsg::ObjectRecordObject >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectRecordObject >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectRecordVector2* Arena::CreateMaybeMessage< ::KWMsg::ObjectRecordVector2 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectRecordVector2 >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectRecordVector3* Arena::CreateMaybeMessage< ::KWMsg::ObjectRecordVector3 >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectRecordVector3 >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectRecordSwap* Arena::CreateMaybeMessage< ::KWMsg::ObjectRecordSwap >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectRecordSwap >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectRecordAddRow* Arena::CreateMaybeMessage< ::KWMsg::ObjectRecordAddRow >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectRecordAddRow >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectRecordRemove* Arena::CreateMaybeMessage< ::KWMsg::ObjectRecordRemove >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectRecordRemove >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectPropertyList* Arena::CreateMaybeMessage< ::KWMsg::ObjectPropertyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectPropertyList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::MultiObjectPropertyList* Arena::CreateMaybeMessage< ::KWMsg::MultiObjectPropertyList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::MultiObjectPropertyList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectRecordList* Arena::CreateMaybeMessage< ::KWMsg::ObjectRecordList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectRecordList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::MultiObjectRecordList* Arena::CreateMaybeMessage< ::KWMsg::MultiObjectRecordList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::MultiObjectRecordList >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::ObjectRecordPagination* Arena::CreateMaybeMessage< ::KWMsg::ObjectRecordPagination >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::ObjectRecordPagination >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::DeviceInfo* Arena::CreateMaybeMessage< ::KWMsg::DeviceInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::DeviceInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::KWMsg::MsgBase* Arena::CreateMaybeMessage< ::KWMsg::MsgBase >(Arena* arena) {
  return Arena::CreateMessageInternal< ::KWMsg::MsgBase >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
