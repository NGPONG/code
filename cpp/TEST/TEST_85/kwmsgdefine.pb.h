// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kwmsgdefine.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kwmsgdefine_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kwmsgdefine_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kwmsgdefine_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kwmsgdefine_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kwmsgdefine_2eproto;
PROTOBUF_NAMESPACE_OPEN
PROTOBUF_NAMESPACE_CLOSE
namespace KWMsg {

enum EGameEventCode : int {
  SUCCESS = 0,
  UNKOWN_ERROR = 1,
  CONFIG_ERROR = 2,
  INVALID_PARAMETER = 3,
  SYSTEM_FUNCTION_LOCK = 4,
  ILLEGAL_TEXT = 5,
  TEXT_LENGTH_LIMIT = 6,
  RECORD_NOT_FOUND = 7,
  ADD_ROW_ERROR = 8,
  RECORD_UNEQUAL_CONFIG = 9,
  GET_GAME_SERVER_FAIL = 10,
  CONNECT_GAME_SERVER_FAIL = 11,
  SVR_ID_INVALID = 14,
  SVR_ZONEID_INVALID = 15,
  SVR_ZONE_OVERLOAD = 16,
  SVR_MAINTAINING = 17,
  REGISTER_DISABLE = 18,
  RECONNECT_SUCCESS = 19,
  RECONNECT_FAIL = 20,
  NOT_ONLINE = 21,
  VERIFY_JWT_FAILED = 22,
  ACCOUNT_DISABLE = 23,
  PLAYER_NOT_HAVA_WITCH = 30,
  CAN_NOT_SEND_GIFT_FOR_MAIN_WITCH = 31,
  MAX_WITCH_EMOTION_LEVEL = 32,
  MAX_DAILY_GIFT_LIMITED = 33,
  MAX_WITCH_LEVEL = 34,
  MAGICAL_MEDICINE_ITEM_NOT_ENOUGH = 35,
  MAGICAL_BOTTLE_EXP_NOT_ENOUGH = 36,
  INVALID_WITCH_SKIN_ID = 37,
  WITCH_SKIN_IS_ALREADY_UNLOCKED = 38,
  AT_LEAST_SR_CARD = 39,
  ALREADY_SET_HOUSE_KEEPER = 40,
  CURRENT_WITCH_IS_NOT_HOUSE_KEEPER = 41,
  CURRENT_SKIN_IS_NOT_UNLOCK = 42,
  STAR_LEVEL_DEBRIS_NOT_ENOUGH = 43,
  STAR_LEVEL_MAX_LIMITED = 44,
  LOGIN_INVALID_ACCOUNT_OR_PASSWORD = 50,
  LOGIN_ACCOUNT_NOT_EXIST = 51,
  LOGIN_REGISTER_ACCOUNT_EXIST = 52,
  LOGIN_REGISTER_PASS_CHAR_INVALID = 53,
  LOGIN_REGISTER_PASS_LEN_INVALID = 54,
  LOGIN_ACCOUNT_CHANNEL_MISMATCH = 55,
  KCP_OBJECT_EXIST = 60,
  QUEUE_UP_INVALID_STILL_IN_QUEUE = 70,
  QUEUE_UP_PUSH_INTO_QUEUE = 71,
  QUEUE_UP_CONSUME_TOKEN_FAILD = 72,
  QUEUE_UP_CONSUME_TOKEN_SUCCESS = 73,
  PLAYER_NAME_INVALID_FORMAT = 80,
  PLAYER_NAME_INVALID_WORDS = 81,
  PLAYER_NAME_INVALID_LENGTH = 82,
  PLAYER_NAME_EXIST = 83,
  BTL_MISS_PRIMARY_TARGET = 100,
  BTL_SKILL_SEALED = 150,
  BTL_SKILL_INVALID_CONSUME = 151,
  BTL_SKILL_IN_CD = 152,
  BTL_NOT_AUTO_MODE = 160,
  BTL_TARGET_DEAD = 161,
  BTL_CAN_NOT_ACTION = 162,
  BTL_UNCONTROLLABLE_NPC = 163,
  BTL_CAN_NOT_LEAVE = 164,
  BTL_IN_BATTLE = 165,
  BTL_NOT_IN_BATTLE = 166,
  BTL_IN_CONTROLLED_STATE = 167,
  BTL_SKILL_CONDITION_NOT_PASS = 168,
  BATTLE_ID_INVALID = 200,
  PRE_BTL_INVALID_WITCH_TEAM_ID = 201,
  PRE_BTL_DUPLICATE_WITCH_IN_TEAM = 202,
  GAME_PLAY_ID_INVALID = 203,
  SCENE_ID_INVALID = 204,
  PRE_BTL_TEAM_ID_LOCK = 205,
  PRE_BTL_TEAM_ID_ALREADY_UNLOCK = 206,
  PRE_BTL_PRE_TEAM_ID_LOCK = 207,
  BATTLE_CONTINUOUS_CONDITION_NOT_PASS = 208,
  BATTLE_CONTINUOUS_COUNT_INVALID = 209,
  BATTLE_CANT_CONTINUOUS_BATTLE = 210,
  BATTLE_NOT_IN_BATTLE_SCENE = 211,
  BATTLE_CONTINUOUS_BATTLE_NOT_SUPPORT = 212,
  PRE_BTL_WITCH_ID_INVALID_IN_TEAM = 213,
  BATTLE_MERCENARY_BATTLE_NOT_SUPPORT = 214,
  PRE_BTL_TEAM_LACK_SPECIFIC_WITCH = 215,
  PRE_BTL_TEAM_CONTAIN_BAN_WITCH = 216,
  PRE_BTL_TEAM_CANNOT_EMPTY = 217,
  STORY_MODULEID_INVALID = 300,
  STORY_CHAPTERSTATUS_INVALID = 301,
  STORY_BATTLE_INVALID = 302,
  BUY_POWER_NOT_ENOUGH_MONEY = 303,
  BUY_POWER_LIMIT = 304,
  COLLEGE_DRAMA_INVALID = 305,
  HOMEWORK_NOT_FINISH = 306,
  HOMEWORK_TASK_NOT_FINISH = 307,
  EXAM_NOT_PASS = 308,
  EXAM_ID_INVALID = 309,
  QUESTION_ID_INVALID = 310,
  HOMEWORK_TASK_ID_INVALID = 311,
  SEMESTER_STATUS_INVALID = 312,
  STUDY_STATUS_INVALID = 313,
  QUESTION_ALREADY_ANSWERED = 314,
  BUY_POWER_INVALID_COUNT = 315,
  STORY_IS_LOCKED = 316,
  EXPLORE_NODE_NOT_UNLOCK = 318,
  EXPLORE_MAP_NOT_UNLOCK = 319,
  EXPLORE_INVALID_NODE_ID = 320,
  EXPLORE_ALREADY_LAST_NODE = 321,
  EXPLORE_UNLOCK_MAP_CONDITION_NOT_PASS = 322,
  EXPLORE_UNLOCK_NODE_CONDITION_NOT_PASS = 323,
  EXPLORE_ALREADY_UNLOCK_NODE = 324,
  EXPLORE_ALREADY_UNLOCK_MAP = 325,
  EXPLORE_AREA_REWARDS_ALREADY_RECEIVE = 326,
  EXPLORE_MAP_NOT_COMPLETE = 327,
  EXPLORE_MAP_MAIN_LINE_REWARDS_ALREADY_RECEIVE = 328,
  EXPLORE_MAP_MAIN_LINE_REWARDS_COND_NOT_PASS = 329,
  EXPLORE_MAP_BRANCH_LINE_REWARDS_ALREADY_RECEIVE = 330,
  EXPLORE_MAP_BRANCH_LINE_REWARDS_COND_NOT_PASS = 331,
  EXPLORE_NODE_NOT_COMPLETE = 332,
  EXPLORE_THREE_STAR_NODE_NOT_FULL = 333,
  EXPLORE_SWEEP_CONSUME_NOT_ENOUGH = 334,
  EXPLORE_CHALLENGE_CONSUME_NOT_ENOUGH = 335,
  EXPLORE_NODE_EVENT_REPEACT_CHALLENGE = 336,
  EXPLORE_ALREADY_UNLOCK_GUIDER = 337,
  EXPLORE_GUIDER_NOT_UNLOCK = 338,
  EXPLORE_GUIDER_LEVEL_LIMIT = 339,
  EXPLORE_DUNGEON_NOT_UNLOCK = 340,
  EXPLORE_DUNGEON_INVALID_MONSTER = 341,
  EXPLORE_DUNGEON_CONSUME_NOT_ENOUGH = 342,
  EXPLORE_ELITE_CONSUME_NOT_ENOUGH = 343,
  EXPLORE_ELITE_NOT_UNLOCK = 344,
  EXPLORE_ELITE_INACTIVATE = 345,
  EXPLORE_ALREADY_UNLOCK_TASK = 346,
  EXPLORE_UNLOCK_GAMEPLAY_CONDITION_NOT_PASS = 347,
  EXPLORE_ALREADY_UNLOCK_DUNGEON = 348,
  EXPLORE_ALREADY_UNLOCK_RAID = 349,
  EXPLORE_RECEIVE_AREA_REWARDS_COND_NOT_PASS = 350,
  EXPLORE_RECEIVE_MAP_REWARDS_COND_NOT_PASS = 351,
  EXPLORE_ALREADY_UNLOCK_TREASURE_BOX = 352,
  EXPLORE_RECEIVE_TREASURE_BOX_REWARDS_COND_NOT_PASS = 353,
  EXPLORE_TREASURE_BOX_REWARDS_ALREADY_RECEIVE = 354,
  EXPLORE_ALREADY_UNLOCK_BASIC = 1230,
  DISPATCH_NOT_ENABLED = 355,
  DISPATCH_APPOINT_AREA_INVALID = 356,
  DISPATCH_APPOINT_AREA_ALREADY_UNLOCKED = 357,
  DISPATCH_APPOINT_AREA_LOCKED = 358,
  DISPATCH_APPOINT_TIME_LIMITED = 359,
  DISPATCH_APPOINT_ROUND_LIMITED = 360,
  DISPATCH_SWITCH_AREA_SAME = 361,
  DISPATCH_WITCH_NOT_UNLOCKED = 362,
  DISPATCH_AFFAIR_NOT_EXIST = 363,
  DISPATCH_AFFAIR_RUNNING_OR_FINISHED = 364,
  DISPATCH_WITCH_IN_BLACKLIST = 365,
  DISPATCH_WITCH_AFFAIR_NOT_FINISHED = 366,
  DISPATCH_AFFAIR_NOT_START_OR_FINISHED = 367,
  DISPATCH_ACC_TICKET_NOT_ENOUGH = 368,
  DISPATCH_AFFAIR_NOT_FINISHED = 369,
  DISPATCH_AFFAIR_CAN_NOT_DELETE = 370,
  DISPATCH_NO_ANY_WITCH = 371,
  DISPATCH_NO_ANY_AFFAIR = 372,
  DISPATCH_AFFAIR_EMPTY_REWARDS = 373,
  DISPATCH_CAN_NOT_USE_MAIN_WITCH = 374,
  HOUSEKEEPER_SIGNIN_ALREADY_FINISHED = 381,
  PNEUMAISLAND_NOT_ENABLED = 390,
  PNEUMAISLAND_BOSS_ID_INVALID = 391,
  PNEUMAISLAND_BOSS_ID_UNLOCKED = 392,
  PNEUMAISLAND_REWARD_PARAM_INVALID = 393,
  PNEUMAISLAND_REWARD_CONDITION_NOT_PASS = 394,
  PNEUMAISLAND_REWARD_ALREADY_GOT = 395,
  PNEUMAISLAND_BATTLE_CONSUME_NOT_ENOUGH = 396,
  PNEUMAISLAND_GROUP_ID_INVALID = 397,
  PNEUMAISLAND_PNEUMA_TYPE_INVALID = 398,
  PNEUMAISLAND_DECOMPOSE_SCHEME_INVALID = 399,
  ACTIVE_MISSION_INVALID_FLAG = 400,
  ACTIVE_MISSION_CAN_NOT_GET_REWARD = 401,
  ACTIVE_MISSION_ALREADY_GOT_REWARD = 402,
  ACTIVE_MISSION_SET_REWARD_FLAG_FAILED = 403,
  ACTIVE_MISSION_SEND_REWARD_FAILED = 404,
  ACTIVE_MISSION_MISSING_HANDLER = 405,
  ACTIVE_MISSION_NOT_EXIST = 406,
  ACTIVE_MISSION_UNFINISHED = 407,
  ACTIVE_MISSION_GOT_REWARD = 408,
  BEGINNING_MISSION_MODULE_LOCKED = 410,
  BEGINNING_MISSION_NONE = 411,
  BEGINNING_MISSION_UNLOCK = 412,
  BEGINNING_MISSION_UNFINISHED = 413,
  BEGINNING_MISSION_GOT_REWARD = 414,
  DRAW_CARD_INVALID_COUNT = 430,
  DRAW_CARD_MAX_COUNT_LIMITED = 431,
  DRAW_CARD_INVALID_CARD_POOL_ID = 432,
  DRAW_CARD_CAN_NOT_FREE = 433,
  DRAW_CARD_IS_IN_CD = 434,
  DRAW_CARD_ITEM_NOT_ENOUGH = 435,
  DRAW_CARD_CURRENCY_NOT_ENOUGH = 436,
  DRAW_CARD_IS_NOT_OPEN = 437,
  DRAW_CARD_IS_CLOSED = 438,
  WITCH_KNOWLEDGE_INVALID_OPT_TYPE = 440,
  WITCH_KNOWLEDGE_ROW_NOT_EXISTS = 441,
  WITCH_KNOWLEDGE_MAX_LEVEL = 442,
  WITCH_KNOWLEDGE_LEVEL_NOT_ENOUGH = 443,
  WITCH_KNOWLEDGE_RESOURCE_NOT_ENOUGH = 444,
  WITCH_KNOWLEDGE_SUBJECT_LEVEL_NOT_ENOUGH = 445,
  WITCH_KNOWLEDGE_MAX_SUBJECT_LEVEL = 446,
  MAIL_REPEATED = 451,
  MAIL_EXPIRED = 452,
  MAIL_FULL = 453,
  BOTARENA_NOT_OPEN = 460,
  BOTARENA_REFRESH_NOT_ENOUGH = 461,
  BOTARENA_BUT_SHABOWTOKEN_NOT_ENOUGH = 462,
  BOTARENA_QUICK_CONFIG_INVALID_WITCH_ID = 463,
  BOTARENA_CHALLENGE_NOT_ENOUGH = 464,
  BOTARENA_TRANSPOD_ENTER_BATTLE = 465,
  BOTARENA_CHALLENGE_ALREADY_FINISHED = 466,
  BOTARENA_REPLAY_NOT_FOUND = 467,
  BOTARENA_CHALLENGE_NOT_FOUND = 468,
  BOTARENA_COUNTERATTACK_ALREADY_FINISHED = 469,
  SHOP_NOT_FOUND = 480,
  PRODUCT_NOT_FOUND = 481,
  REACHED_PRODUCT_MAX_BUY_LIMIT = 482,
  BUY_PRODUCT_CONDITION_NOT_PASS = 483,
  BUY_PRODUCT_CONSUME_NOT_ENOUGH = 484,
  REACHED_PRODUCT_ONCE_BUY_LIMIT = 485,
  MAX_REFRESH_LIMIT = 486,
  PRODUCT_IS_LOCKED = 487,
  REFRESH_NOT_SUPPORT = 488,
  WITCH_SKILL_INVALID_OPT_TYPE = 490,
  WITCH_SKILL_ROW_NOT_EXISTS = 491,
  WITCH_SKILL_INVALID_SKILL_ID = 492,
  WITCH_SKILL_MAX_SKILL_LEVEL = 493,
  RECHARGE_PRODUCT_INVALID = 500,
  RECHARGE_REPETITIVE_ORDER = 501,
  RECHARGE_APP_ORDER_NOT_EXIST = 502,
  RECHARGE_APP_ID_INVALID = 503,
  WITCH_PNEUMA_MAX_BAG_SIZE = 510,
  WITCH_PNEUMA_NOT_EXIST = 511,
  WITCH_PNEUMA_INVALID_OPT_TYPE = 512,
  WITCH_PNEUMA_ALREADY_UNEQUIPPED = 513,
  WITCH_PNEUMA_UNMATCHED = 514,
  WITCH_PNEUMA_ALREADY_EQUIPPED = 515,
  WITCH_PNEUMA_MAX_LEVEL = 516,
  WITCH_PNEUMA_INVALID_GUID_LIST = 517,
  WITCH_PNEUMA_INVALID_EXPAND_COUNT = 518,
  WITCH_PNEUMA_INVALID_CREATION_ID = 519,
  WITCH_PNEUMA_CAN_NOT_CREATE = 520,
  ENDLESS_TOWER_INVALID_ID = 530,
  ENDLESS_TOWER_MAX_LAYER = 531,
  ENDLESS_TOWER_INVALID_SWEEP_COUNT = 532,
  ENDLESS_TOWER_NO_SETTLED_LAYER = 533,
  ENDLESS_TOWER_NOT_OPEN = 534,
  CHAT_NO_REPORT_COUNT = 550,
  CHAT_API_CALL_FAILED = 551,
  CHAT_REGISTER_SDK_ACCOUNT_TIMEOUT = 552,
  CHAT_REGISTER_SDK_ACCOUNT_EXIST = 553,
  CHAT_REGISTER_SDK_ACCOUNT_FAILED = 554,
  CHAT_CREATE_CHATROOM_TIMEOUT = 555,
  CHAT_CREATE_CHATROOM_FAILED = 556,
  CHAT_CREATE_CHAT_GROUP_FAILED = 557,
  CHAT_DELETE_CHAT_GROUP_FAILED = 558,
  CHAT_TRANSFER_CHAT_GROUP_FAILED = 559,
  CHAT_ADD_CHAT_GROUP_USER_FAILED = 560,
  CHAT_DELETE_CHAT_GROUP_USER_FAILED = 561,
  CHAT_BUBBLE_NOT_UNLOCKED = 562,
  CHAT_BUBBLE_ALREADY_UNLOCKED = 563,
  CHAT_BUBBLE_CANT_MANUAL_UNLOCK = 564,
  CHAT_MEME_GROUP_ALREADY_UNLOCKED = 565,
  CHAT_MEME_GROUP_CANT_MANUAL_UNLOCK = 566,
  CHAT_MEME_ALREADY_UNLOCKED = 567,
  CHAT_MEME_CANT_MANUAL_UNLOCK = 568,
  CHAT_NOT_FRIEND = 569,
  CHAT_IN_FORBIDDEN_STATE = 570,
  CHAT_IN_CD = 571,
  FRIEND_REFRESH_IN_CD = 600,
  FRIEND_FIND_IN_CD = 601,
  FRIEND_ALREADY_ADD = 602,
  FRIEND_ALREADY_APPLIED = 603,
  FRIEND_TARGET_NOT_APPLIED = 604,
  FRIEND_MAX_APPLY_LIMITED = 605,
  FRIEND_MAX_LIMITED = 606,
  FRIEND_TARGET_MAX_LIMITED = 607,
  FRIEND_MAX_BLACKLIST_LIMITED = 608,
  FRIEND_TARGET_NOT_FRIEND = 609,
  FRIEND_IN_BLACKLIST = 610,
  FRIEND_TARGET_IN_BLACKLIST = 611,
  PROTAGONIST_CHAOTIC_BOOK_NOT_FOUND = 700,
  PROTAGONIST_CHAOTIC_BOOK_LOCKED = 701,
  PROTAGONIST_CHAOTIC_BOOK_REPAIRED = 702,
  PROTAGONIST_NO_FREE_POWER = 703,
  GUIDE_GROUP_NOT_UNLOCKED = 800,
  GUIDE_GROUP_ALREADY_FINISHED = 801,
  GUIDE_GROUP_ID_INVALID = 802,
  STORY_BRANCH_NON_RECORD = 810,
  STORY_BRANCH_CHAPTER_ID_INVALID = 811,
  STORY_BRANCH_MODULE_ID_INVALID = 812,
  STORY_BRANCH_CHAPTER_STATUS_INVALID = 813,
  TALENT_SYSTEM_LOCKED = 815,
  TALENT_WITCH_BEEN_ACTIVATED = 816,
  TALENT_WITCH_STATUS_ERROR = 817,
  TALENT_MISSION_UNFINISHED = 818,
  TALENT_REWARD_HAVE_RECEIVED = 819,
  TALENT_BATTLE_ID_ERROR = 820,
  ACTIVITY_ALREADY_END = 821,
  ACTIVITY_ALREADY_CLOSE = 822,
  ACTIVITY_REWARDS_HAVE_RECEIVED = 823,
  ACTIVITY_PROGRESS_NOT_ENOUGH = 824,
  ANSWER_ID_ERROR = 825,
  ANSWER_ID_TIMEOUT = 826,
  ANSWER_ALREAD_REWARD_MAX = 827,
  ANSWER_ALREAD_ROUND_MAX = 828,
  COMMON_NOT_OPEN = 829,
  FUNCTION_ALREADLY_RESET = 830,
  ITEM_NOT_ENOUGH = 1000,
  RESOURCE_NOT_ENOUGH = 1001,
  ITEM_ID_INVALID = 1002,
  CONDITION_NOT_PASSED = 1003,
  RESOURCE_OVERFLOW_LIMIT = 1004,
  COMMUNITY_ALREADY_IN_COMMUNITY = 1200,
  COMMUNITY_STILL_IN_CD = 1201,
  COMMUNITY_INVALID_NAME = 1202,
  COMMUNITY_INVALID_NAME_LENGTH = 1203,
  COMMUNITY_INVALID_DIGIT_NAME = 1204,
  COMMUNITY_INVALID_DECLARATION = 1205,
  COMMUNITY_INVALID_DECLARATION_LENGTH = 1206,
  COMMUNITY_INVALID_FLAG = 1207,
  COMMUNITY_INVALID_ICON = 1208,
  COMMUNITY_NAME_EXISTS = 1209,
  COMMUNITY_INVALID_APPROVE_TYPE = 1210,
  COMMUNITY_INVALID_LEVEL_RESTRICTION = 1211,
  COMMUNITY_SEARCH_IN_CD = 1212,
  COMMUNITY_NOT_EXISTS = 1213,
  COMMUNITY_INVALID_PAGE_NO = 1214,
  COMMUNITY_QUICK_JOIN_IN_CD = 1215,
  COMMUNITY_QUICK_JOIN_TRY_AGAIN = 1216,
  COMMUNITY_LEVEL_RESTRICTION = 1217,
  COMMUNITY_MEMBER_IS_FULL = 1218,
  COMMUNITY_NOT_IN_COMMUNITY = 1219,
  COMMUNITY_PERMISSION_DEFINED = 1220,
  COMMUNITY_MAX_DAILY_OPT_LIMIT = 1221,
  COMMUNITY_TARGET_IS_NOT_MEMBER = 1222,
  COMMUNITY_TARGET_IS_MANAGER = 1223,
  COMMUNITY_TARGET_IS_MEMBER = 1224,
  COMMUNITY_TARGET_NOT_IN_APPLIED_LIST = 1225,
  COMMUNITY_UNMATCHED_ID = 1226,
  COMMUNITY_ALREADY_SIGN_IN = 1227,
  EGameEventCode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EGameEventCode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EGameEventCode_IsValid(int value);
constexpr EGameEventCode EGameEventCode_MIN = SUCCESS;
constexpr EGameEventCode EGameEventCode_MAX = EXPLORE_ALREADY_UNLOCK_BASIC;
constexpr int EGameEventCode_ARRAYSIZE = EGameEventCode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameEventCode_descriptor();
template<typename T>
inline const std::string& EGameEventCode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGameEventCode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGameEventCode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGameEventCode_descriptor(), enum_t_value);
}
inline bool EGameEventCode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGameEventCode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGameEventCode>(
    EGameEventCode_descriptor(), name, value);
}
enum EGameMsgID : int {
  UNKNOW = 0,
  EVENT_RESULT = 1,
  EVENT_TRANSPORT = 2,
  CLOSE_SOCKET = 3,
  STS_REGISTERED = 4,
  STS_UNREGISTERD = 5,
  STS_REFRESH = 6,
  STS_SERVICE_ROUTE = 7,
  STS_NET_INFO = 8,
  STS_HEART_BEAT = 9,
  STS_SYNC_WORLD_STATE = 10,
  STS_SYNC_QUEUE_UP_COUNT = 11,
  REQ_LOGIN = 200,
  ACK_LOGIN = 201,
  REQ_LOGOUT = 202,
  REQ_CONNECT_WORLD = 210,
  ACK_CONNECT_WORLD = 211,
  REQ_VERIFY_JWT = 212,
  ACK_VERIFY_JWT = 213,
  REQ_KICK_FROM_WORLD = 214,
  ACK_KICK_FROM_WORLD = 215,
  REQ_ENTER_GAME = 220,
  ACK_ENTER_GAME_BEGIN = 221,
  ACK_ENTER_GAME_END = 222,
  REQ_PLAYER_LITE = 223,
  ACK_PLAYER_LITE = 224,
  REQ_UPDATE_ACCOUNT_PLAYER = 225,
  REQ_UPDATE_ACCOUNT_LAST_LOGIN_INFO = 226,
  REQ_LOAD_PLAYER_DATA = 230,
  ACK_LOAD_PLAYER_DATA = 231,
  REQ_SAVE_PLAYER_DATA = 232,
  ACK_SAVE_PLAYER_DATA = 233,
  REQ_LEAVE_GAME = 252,
  ACK_LEAVE_GAME = 253,
  REQ_SWAP_SCENE = 254,
  ACK_SWAP_SCENE_BEGIN = 255,
  ACK_SWAP_SCENE_END = 256,
  REQ_RECONNECT = 260,
  ACK_RECONNECT = 261,
  SYNC_OBJECT_PROPERTY_LIST = 270,
  SYNC_OBJECT_RECORD_LIST = 271,
  ACK_OBJECT_ENTRY = 300,
  ACK_OBJECT_LEAVE = 301,
  ACK_OBJECT_PROPERTY_ENTRY = 302,
  ACK_OBJECT_RECORD_ENTRY = 303,
  ACK_PROPERTY_INT = 310,
  ACK_PROPERTY_FLOAT = 311,
  ACK_PROPERTY_STRING = 312,
  ACK_PROPERTY_OBJECT = 313,
  ACK_PROPERTY_VECTOR2 = 314,
  ACK_PROPERTY_VECTOR3 = 315,
  ACK_PROPERTY_CLEAR = 316,
  ACK_ADD_ROW = 320,
  ACK_REMOVE_ROW = 321,
  ACK_SWAP_ROW = 322,
  ACK_RECORD_INT = 323,
  ACK_RECORD_FLOAT = 324,
  ACK_RECORD_STRING = 325,
  ACK_RECORD_OBJECT = 326,
  ACK_RECORD_VECTOR2 = 327,
  ACK_RECORD_VECTOR3 = 328,
  ACK_RECORD_CLEAR = 329,
  ACK_RECORD_SORT = 330,
  ACK_DATA_FINISHED = 340,
  ACK_ONLINE_NOTIFY = 400,
  ACK_OFFLINE_NOTIFY = 401,
  ACK_ENTER_GAME_STATE_NOTIFY = 402,
  REQ_HEART_BEAT = 410,
  ACK_HEART_BEAT = 411,
  REQ_LAG_TEST = 412,
  ACK_LAG_TEST = 413,
  REQ_SET_GAME_SERVER_STATE = 420,
  ACK_SET_GAME_SERVER_STATE = 421,
  REQ_REFRESH_CONFIG = 422,
  REQ_PUSH_CLIENT_INTO_QUEUEUP = 423,
  ACK_PUSH_CLIENT_INTO_QUEUEUP = 424,
  REQ_QUEUEUP_GET_CUR_WORLD_SUIT_PROXY = 425,
  ACK_QUEUEUP_GET_CUR_WORLD_SUIT_PROXY = 426,
  SYNC_QUEUEUP_REG_STATUS = 427,
  REQ_KICK_CLIENTS_RANDOM = 428,
  REQ_UPDATE_PLAYER_LAST_HEARTBEAT_TS = 429,
  SYNC_QUEUE_UP_USER_CANCEL_OPERATION = 430,
  ACK_WORLD_PLAYER_HAS_ROLE = 431,
  SYNC_PLAYER_PROPERTIES_CACHE = 432,
  LOAD_PLAYER_PROPERTIES_CACHE = 433,
  LOAD_PLAYER_RECORDS_CACHE = 434,
  SYNC_PLAYER_RECORDS_CACHE_ADD = 435,
  SYNC_PLAYER_RECORDS_CACHE_UPDATE = 436,
  SYNC_PLAYER_RECORDS_CACHE_DEL = 437,
  SYNC_PLAYER_RECORDS_CACHE_SWAP = 438,
  SYNC_WORLD_INFO_TO_GAME = 439,
  REQ_RECORD = 1000,
  ACK_RECORD = 1001,
  REQ_CREATE_KCP_OBJECT = 1002,
  ACK_CREATE_KCP_OBJECT = 1003,
  REQ_ESTABLISH_KCP_CONNECTION = 1004,
  ACK_ESTABLISH_KCP_CONNECTION = 1005,
  REQ_KCP_HEART_BEAT = 1006,
  ACK_KCP_HEART_BEAT = 1007,
  REQ_COLLECT_WITCH = 1008,
  ACK_COLLECT_WITCH = 1009,
  REQ_INIT_PLAYER_NAME = 1010,
  ACK_INIT_PLAYER_NAME = 1011,
  REQ_UPDATE_MODULE = 1012,
  ACK_UPDATE_MODULE = 1013,
  REQ_CHAPTER_TIP_OK = 1014,
  ACK_CHAPTER_TIP_OK = 1015,
  REQ_BUY_POWER = 1016,
  ACK_BUY_POWER = 1017,
  SYNC_RESOURCE_OVERFLOW_TIPS = 1040,
  REQ_COLLEGE_DRAMA = 1018,
  ACK_COLLEGE_DRAMA = 1019,
  REQ_COLLEGE_REWARD = 1020,
  ACK_COLLEGE_REWARD = 1021,
  REQ_COLLEGE_ACTION_TASK = 1022,
  ACK_COLLEGE_ACTION_TASK = 1023,
  REQ_COLLEGE_COUNTDOWN_TASK = 1024,
  ACK_COLLEGE_COUNTDOWN_TASK = 1025,
  REQ_START_EXAM = 1026,
  ACK_START_EXAM = 1027,
  REQ_COLLEGE_ANSWER = 1028,
  ACK_COLLEGE_ANSWER = 1029,
  REQ_COLLEGE_EXAM_EXIT = 1030,
  ACK_COLLEGE_EXAM_EXIT = 1031,
  COMMON_GET_REWARD_INFO = 1032,
  SYNC_PLAYER_LEVEL_RANKING = 1033,
  REQ_STORY_BRANCH_UPDATE_MODULE = 1034,
  ACK_STORY_BRANCH_UPDATE_MODULE = 1035,
  REQ_STORY_BRANCH_CHAPTER_TIP_OK = 1036,
  ACK_STORY_BRANCH_CHAPTER_TIP_OK = 1037,
  ACK_NOTIFY_RECORD_CHANGE = 1038,
  REQ_EXPLORE_UPDATE_NODE_POSTION = 1041,
  ACK_EXPLORE_UPDATE_NODE_POSTION = 1042,
  REQ_GET_EXPLORE_AREA_PROGRESS_REWARDS = 1043,
  ACK_GET_EXPLORE_AREA_PROGRESS_REWARDS = 1044,
  REQ_SWEEP_EXPLORE_THREE_STAR_NODE = 1045,
  ACK_SWEEP_EXPLORE_THREE_STAR_NODE = 1046,
  REQ_GET_EXPLORE_MAP_PROGRESS_REWARDS = 1047,
  ACK_GET_EXPLORE_MAP_PROGRESS_REWARDS = 1048,
  REQ_UPGRADE_EXPLORE_GUIDER_FRIENDSHIP = 1049,
  ACK_UPGRADE_EXPLORE_GUIDER_FRIENDSHIP = 1050,
  REQ_COMPLETE_EXPLORE_NODE = 1051,
  ACK_COMPLETE_EXPLORE_NODE = 1052,
  SYNC_EXPLORE_NODE_STORY_PROGRESS = 1053,
  REQ_GET_EXPLORE_TREASURE_BOX_REWARDS = 1054,
  ACK_GET_EXPLORE_TREASURE_BOX_REWARDS = 1055,
  REQ_SET_EXPLORE_DUNGEON_MONSTER_FLGS = 1056,
  ACK_SET_EXPLORE_DUNGEON_MONSTER_FLGS = 1057,
  REQ_SET_EXPLORE_DUNGEON_FLGS = 1058,
  ACK_SET_EXPLORE_DUNGEON_FLGS = 1059,
  REQ_START_APPOINT = 1060,
  ACK_START_APPOINT = 1061,
  REQ_GET_APPOINT_REWARD = 1062,
  ACK_GET_APPOINT_REWARD = 1063,
  REQ_SWITCH_APPOINT_AREA = 1064,
  ACK_SWITCH_APPOINT_AREA = 1065,
  REQ_UNLOCK_APPOINT_AREA = 1066,
  ACK_UNLOCK_APPOINT_AREA = 1067,
  REQ_START_AFFAIR = 1068,
  ACK_START_AFFAIR = 1069,
  REQ_ACCELERATE_AFFAIR = 1070,
  ACK_ACCELERATE_AFFAIR = 1071,
  REQ_DELETE_AFFAIR = 1072,
  ACK_DELETE_AFFAIR = 1073,
  REQ_GET_AFFAIR_REWARD = 1074,
  ACK_GET_AFFAIR_REWARD = 1075,
  REQ_ONE_KEY_START_AFFAIR = 1076,
  ACK_ONE_KEY_START_AFFAIR = 1077,
  REQ_ONE_KEY_GET_AFFAIR_REWARD = 1078,
  ACK_ONE_KEY_GET_AFFAIR_REWARD = 1079,
  REQ_HOUSEKEEPER_SIGNIN = 1080,
  ACK_HOUSEKEEPER_SIGNIN = 1081,
  REQ_SET_HOUSE_KEEPER = 1082,
  ACK_SET_HOUSE_KEEPER = 1083,
  REQ_SET_HOUSE_KEEPER_SKIN_ID = 1084,
  ACK_SET_HOUSE_KEEPER_SKIN_ID = 1085,
  REQ_DELETE_READED_MAILS = 1091,
  ACK_DELETE_READED_MAILS = 1092,
  REQ_READ_MAILS = 1093,
  ACK_READ_MAILS = 1094,
  REQ_WORLD_SEND_MAIL_TO_PLAYER = 1095,
  ACK_WORLD_SEND_MAIL_TO_PLAYER = 1096,
  SYNC_ADD_PRE_SEND_GLOBAL_MAILS = 1097,
  SYNC_DEL_PRE_SEND_GLOBAL_MAILS = 1098,
  SYNC_ADD_PRE_SEND_PLAYER_MAILS = 1099,
  SYNC_DEL_PRE_SEND_PLAYER_MAILS = 1900,
  ACK_BATTLE_INFO = 1100,
  ACK_BATTLE_PK_INFO = 1101,
  REQ_BATTLE_ACTION = 1102,
  ACK_BATTLE_ACTION = 1103,
  REQ_BATTLE_PULL_MSG = 1104,
  ACK_BATTLE_PULL_MSG = 1105,
  ACK_BATTLE_END_INFO = 1106,
  REQ_BATTLE_TOGGLE_AUTO_MODE = 1107,
  ACK_BATTLE_TOGGLE_AUTO_MODE = 1108,
  REQ_BATTLE_UPDATE_ENTITY_AUTO_MODE = 1109,
  ACK_BATTLE_UPDATE_ENTITY_AUTO_MODE = 1110,
  REQ_BATTLE_SET_PRIO_TARGET = 1111,
  ACK_BATTLE_SET_PRIO_TARGET = 1112,
  REQ_BATTLE_ADJ_WITCH_TEAM = 1113,
  ACK_BATTLE_ADJ_WITCH_TEAM = 1114,
  REQ_BATTLE_CHANGE_WITCH_TEAM_NAME = 1115,
  ACK_BATTLE_CHANGE_WITCH_TEAM_NAME = 1116,
  REQ_BATTLE_RESET_WITCH_TEAM = 1117,
  ACK_BATTLE_RESET_WITCH_TEAM = 1118,
  REQ_BATTLE_QUICK_CONFIG_WITCH_TEAM = 1119,
  ACK_BATTLE_QUICK_CONFIG_WITCH_TEAM = 1120,
  REQ_BATTLE_BUY_WITCH_TEAM = 1121,
  ACK_BATTLE_BUY_WITCH_TEAM = 1122,
  REQ_TEST_BATTLE = 1200,
  ACK_TEST_BATTLE = 1201,
  REQ_ENTER_BATTLE = 1202,
  ACK_ENTER_BATTLE = 1203,
  REQ_BATTLE_PREPARED_INFO = 1204,
  ACK_BATTLE_PREPARED_INFO = 1205,
  REQ_LEAVE_BATTLE = 1206,
  ACK_LEAVE_BATTLE = 1207,
  REQ_CONTINUOUS_BATTLE = 1208,
  ACK_CONTINUOUS_BATTLE = 1209,
  REQ_REPLAY_DATA = 1210,
  ACK_REPLAY_DATA = 1211,
  REQ_BATTLE_MERCENARYS = 1212,
  ACK_BATTLE_MERCENARYS = 1213,
  SYNC_GAME_POP_4_MERCENARY_POOL = 1214,
  SYNC_GAME_PUSH_2_MERCENARY_POOL = 1215,
  SYNC_WORLD_POP_4_MERCENARY_POOL = 1216,
  SYNC_WORLD_PUSH_2_MERCENARY_POOL = 1217,
  SYNC_ENTER_BATTLE_IS_READY = 1218,
  SYNC_SETTLE_MERCENARY_PLAYER_REWARDS = 1219,
  SYNC_RESET_MERCENARY_REWARD_COUNT = 1220,
  REQ_SET_SYSTEM_FUNCTION_FLAG = 1221,
  ACK_SET_SYSTEM_FUNCTION_FLAG = 1222,
  SYNC_SYSTEM_FUNCTION_UNLOCK = 1223,
  REQ_SEND_GIFT_FOR_WITCH = 1300,
  ACK_SEND_GIFT_FOR_WITCH = 1301,
  REQ_USE_MAGICAL_MEDICINE = 1302,
  ACK_USE_MAGICAL_MEDICINE = 1303,
  REQ_UNLOCK_WITCH_SKIN = 1304,
  ACK_UNLOCK_WITCH_SKIN = 1305,
  REQ_WITCH_STAR_LEVEL_UP = 1306,
  ACK_WITCH_STAR_LEVEL_UP = 1307,
  REQ_DRAW_CARD = 1308,
  ACK_DRAW_CARD = 1309,
  REQ_WITCH_KNOWLEDGE_LEVEL_UP = 1310,
  ACK_WITCH_KNOWLEDGE_LEVEL_UP = 1311,
  REQ_EXPAND_WITCH_PNEUMA_BAG_SIZE = 1312,
  ACK_EXPAND_WITCH_PNEUMA_BAG_SIZE = 1313,
  REQ_WITCH_PNEUMA_OPT = 1314,
  ACK_WITCH_PNEUMA_OPT = 1315,
  REQ_WITCH_PNEUMA_ENHANCE = 1316,
  ACK_WITCH_PNEUMA_ENHANCE = 1317,
  REQ_WITCH_PNEUMA_DECOMPOSE = 1318,
  ACK_WITCH_PNEUMA_DECOMPOSE = 1319,
  REQ_WITCH_SKILL_LEVEL_UP = 1320,
  ACK_WITCH_SKILL_LEVEL_UP = 1321,
  REQ_CONVERT_UNIVERSAL_DEBRIS = 1322,
  ACK_CONVERT_UNIVERSAL_DEBRIS = 1323,
  REQ_SET_MERCENARY_UNIT = 1324,
  ACK_SET_MERCENARY_UNIT = 1325,
  REQ_WITCH_PNEUMA_CREATION = 1326,
  ACK_WITCH_PNEUMA_CREATION = 1327,
  REQ_SWEEP_ENDLESS_TOWER = 1330,
  ACK_SWEEP_ENDLESS_TOWER = 1331,
  REQ_WITCH_EXPERIENCE_LIST = 1340,
  ACK_WITCH_EXPERIENCE_LIST = 1341,
  REQ_WITCH_STORY_LIST = 1342,
  ACK_WITCH_STORY_LIST = 1343,
  REQ_WITCH_VOICE_LIST = 1344,
  ACK_WITCH_VOICE_LIST = 1345,
  REQ_UNLOCK_WITCH_STORY_MODULE = 1346,
  ACK_UNLOCK_WITCH_STORY_MODULE = 1347,
  REQ_FRIEND_LIST = 1350,
  ACK_FRIEND_LIST = 1351,
  REQ_APPLIED_FRIEND_LIST = 1352,
  ACK_APPLIED_FRIEND_LIST = 1353,
  REQ_ADD_FRIEND = 1354,
  ACK_ADD_FRIEND = 1355,
  REQ_DEAL_WITH_ADD_FRIEND = 1356,
  ACK_DEAL_WITH_ADD_FRIEND = 1357,
  REQ_DEL_FRIEND = 1358,
  ACK_DEL_FRIEND = 1359,
  REQ_BLACKLIST = 1360,
  ACK_BLACKLIST = 1361,
  REQ_BLACKLIST_OPT = 1362,
  ACK_BLACKLIST_OPT = 1363,
  REQ_RECOMMENDED_FRIEND_LIST = 1364,
  ACK_RECOMMENDED_FRIEND_LIST = 1365,
  REQ_FRIEND_COLLECT_OPT = 1366,
  ACK_FRIEND_COLLECT_OPT = 1367,
  REQ_FIND_PLAYER = 1368,
  ACK_FIND_PLAYER = 1369,
  REQ_GET_PNEUMAISLAND_STAR_REWARD = 1370,
  ACK_GET_PNEUMAISLAND_STAR_REWARD = 1371,
  REQ_UPDATE_PNEUMAISLAND_SHOW_STATE = 1372,
  ACK_UPDATE_PNEUMAISLAND_SHOW_STATE = 1373,
  REQ_UPDATE_PNEUMA_AUTO_DECOMPOSE_STATE = 1374,
  ACK_UPDATE_PNEUMA_AUTO_DECOMPOSE_STATE = 1375,
  REQ_UPDATE_PNEUMA_DECOMPOSE_SCHEME = 1376,
  ACK_UPDATE_PNEUMA_DECOMPOSE_SCHEME = 1377,
  REQ_BLACKMART_COMMODITY_LIST = 1390,
  ACK_BLACKMART_COMMODITY_LIST = 1391,
  REQ_REFRESH_BLACKMART_COMMODITY_LIST = 1392,
  ACK_REFRESH_BLACKMART_COMMODITY_LIST = 1393,
  REQ_BUY_BLACKMART_COMMODITY = 1394,
  ACK_BUY_BLACKMART_COMMODITY = 1395,
  SYNC_BLACKMART_COMMODITY_UPDATED = 1396,
  REQ_ACTIVE_MISSION_OPERATION = 1400,
  ACK_ACTIVE_MISSION_OPERATION = 1401,
  REQ_GET_ACTIVE_MISSION_REWARD = 1402,
  ACK_GET_ACTIVE_MISSION_REWARD = 1403,
  REQ_GET_EXPLORE_MISSION_REWARD = 1404,
  ACK_GET_EXPLORE_MISSION_REWARD = 1405,
  REQ_CREATE_ORDER = 1410,
  ACK_CREATE_ORDER = 1411,
  REQ_CALLBACK_RECHARGE = 1412,
  ACK_CALLBACK_RECHARGE = 1413,
  SYNC_PLAYER_HONOR_POINT_CHANGED = 1450,
  SAVE_PLAYER_HONOR_POINT_RANKING = 1451,
  SYNC_PLAYER_STRATEGY_POINT_CHANGED = 1452,
  SAVE_PLAYER_STRATEGY_POINT_RANKING = 1453,
  SYNC_BOTARENA_STATE = 1454,
  SYNC_BOTARENA_STAGE_SESSION = 1455,
  SAVE_PLAYER_CHALLENGE_LIST = 1456,
  UPDATE_PLAYER_CHALLENGE_ITEM = 1457,
  ADD_PLAYER_REPLAY_ITEM = 1458,
  DEL_PLAYER_REPLAY_ITEM = 1459,
  UPDATE_PLAYER_REPLAY_ITEM = 1460,
  SYNC_DEFENSIVE_PLAYER_BATTLE_REWARD = 1462,
  SYNC_BOTARENA_BATTLE_SETTLE_DATA = 1463,
  SYNC_BOTARENA_BATTLE_REPLAY_DATAS = 1464,
  SAVE_BOTARENA_BATTLE_REPLAY_DATAS = 1465,
  DEL_BOTARENA_BATTLE_REPLAY_DATAS = 1466,
  DEL_ALL_BOTARENA_BATTLE_REPLAY_DATAS = 1467,
  DEL_ALL_PLAYER_REPLAY_ITEM = 1468,
  DEL_ALL_PLAYER_CHALLENGE_ITEM = 1469,
  REQ_GET_PLAYER_HONOR_POINT_RANKING = 1470,
  ACK_GET_PLAYER_HONOR_POINT_RANKING = 1471,
  REQ_GET_PLAYER_STRATEGY_POINT_RANKING = 1472,
  ACK_GET_PLAYER_STRATEGY_POINT_RANKING = 1473,
  REQ_GET_PLAYER_BOTARENA_CHALLENGE_LIST = 1474,
  ACK_GET_PLAYER_BOTARENA_CHALLENGE_LIST = 1475,
  REQ_REFRESH_PLAYER_BOTARENA_CHALLENGE_LIST = 1476,
  ACK_REFRESH_PLAYER_BOTARENA_CHALLENGE_LIST = 1477,
  REQ_ADJ_BOTARENA_DEFENSIVE_TEAM = 1478,
  ACK_ADJ_BOTARENA_DEFENSIVE_TEAM = 1479,
  REQ_RESET_BOTARENA_DEFENSIVE_TEAM = 1480,
  ACK_RESET_BOTARENA_DEFENSIVE_TEAM = 1481,
  REQ_QUICK_CONFIG_BOTARENA_DEFENSIVE_TEAM = 1482,
  ACK_QUICK_CONFIG_BOTARENA_DEFENSIVE_TEAM = 1483,
  REQ_GET_BOTARENA_MAIN_PAGE_DATA = 1484,
  ACK_GET_BOTARENA_MAIN_PAGE_DATA = 1485,
  REQ_BUY_SHABOW_TOKEN = 1486,
  ACK_BUY_SHABOW_TOKEN = 1487,
  REQ_CLICK_BOTARENA_PROMPT_FORM = 1488,
  ACK_CLICK_BOTARENA_PROMPT_FORM = 1489,
  REQ_GET_BOTARENA_REPLAY_LIST = 1490,
  ACK_GET_BOTARENA_REPLAY_LIST = 1491,
  REQ_REPLAY_BOTARENA_BATTLE = 1492,
  ACK_REPLAY_BOTARENA_BATTLE = 1493,
  LISTING_SHOP_PRODUCTS = 1500,
  LISTING_SHOP_PRODUCTS_BEGIN = 1501,
  LISTING_SHOP_PRODUCTS_ENDED = 1502,
  REMOVED_SHOP_PRODUCTS = 1503,
  REFRESH_SHOP_PRODUCTS = 1504,
  REQ_GET_SHOP_PRODUCTS = 1510,
  ACK_GET_SHOP_PRODUCTS = 1511,
  REQ_BUY_PRODUCT = 1512,
  ACK_BUY_PRODUCT = 1513,
  SYNC_SHOP_RENOVATION_EVENT = 1514,
  REQ_CREATE_COMMUNITY = 1600,
  ACK_CREATE_COMMUNITY = 1601,
  REQ_SEARCH_COMMUNITY = 1602,
  ACK_SEARCH_COMMUNITY = 1603,
  REQ_QUERY_COMMUNITY = 1604,
  ACK_QUERY_COMMUNITY = 1605,
  REQ_SPECIFIED_COMMUNITY_PAGE = 1606,
  ACK_SPECIFIED_COMMUNITY_PAGE = 1607,
  REQ_QUICK_JOIN_COMMUNITY = 1608,
  ACK_QUICK_JOIN_COMMUNITY = 1609,
  REQ_APPLY_JOIN_COMMUNITY = 1610,
  ACK_APPLY_JOIN_COMMUNITY = 1611,
  REQ_CANCEL_JOIN_COMMUNITY = 1612,
  ACK_CANCEL_JOIN_COMMUNITY = 1613,
  REQ_APPLIED_COMMUNITY_LIST = 1614,
  ACK_APPLIED_COMMUNITY_LIST = 1615,
  REQ_MODIFY_NAME_AND_DECLARATION = 1616,
  ACK_MODIFY_NAME_AND_DECLARATION = 1617,
  REQ_MODIFY_FLAG_AND_ICON = 1618,
  ACK_MODIFY_FLAG_AND_ICON = 1619,
  REQ_MODIFY_APPROVED_RULES = 1620,
  ACK_MODIFY_APPROVED_RULES = 1621,
  REQ_PROMOTION_OR_DEMOTION_MANAGER = 1622,
  ACK_PROMOTION_OR_DEMOTION_MANAGER = 1623,
  REQ_APPLIED_PLAYER_LIST = 1624,
  ACK_APPLIED_PLAYER_LIST = 1625,
  REQ_DEAL_WITH_JOIN_COMMUNITY = 1626,
  ACK_DEAL_WITH_JOIN_COMMUNITY = 1627,
  REQ_QUIT_COMMUNITY = 1628,
  ACK_QUIT_COMMUNITY = 1629,
  REQ_GET_OUT_OF_MY_COMMUNITY = 1630,
  ACK_GET_OUT_OF_MY_COMMUNITY = 1631,
  REQ_COMMUNITY_SIGN_IN = 1632,
  ACK_COMMUNITY_SIGN_IN = 1633,
  SYNC_PLAYER_COMMUNITY_INFO = 1680,
  ADD_COMMUNITY_ACTIVE_VAL_AND_EXP = 1681,
  NOTIFY_APPLY_JOIN_COMMUNITY_RESULT = 1682,
  NOTIFY_PLAYER_GET_FIRED_FROM_COMMUNITY = 1683,
  REQ_REGISTER_CHAT_SDK_ACCOUNT = 1700,
  ACK_REGISTER_CHAT_SDK_ACCOUNT = 1701,
  REQ_CREATE_CHATROOM = 1702,
  ACK_CREATE_CHATROOM = 1703,
  REQ_SDK_LOGIN_INFO_AND_CHATROOM = 1704,
  ACK_SDK_LOGIN_INFO_AND_CHATROOM = 1705,
  REQ_REPORT_CHAT_PLAYER = 1706,
  ACK_REPORT_CHAT_PLAYER = 1707,
  REQ_SEND_CHATROOM_MSG = 1708,
  ACK_SEND_CHATROOM_MSG = 1709,
  REQ_UPDATE_CHATROOM_ANNOUNCEMENT = 1710,
  ACK_UPDATE_CHATROOM_ANNOUNCEMENT = 1711,
  REQ_CHECK_CHAT_TEXT = 1712,
  ACK_CHECK_CHAT_TEXT = 1713,
  REQ_CREATE_CHAT_GROUP = 1714,
  ACK_CREATE_CHAT_GROUP = 1715,
  REQ_DELETE_CHAT_GROUP = 1716,
  ACK_DELETE_CHAT_GROUP = 1717,
  REQ_TRANSFER_CHAT_GROUP = 1718,
  ACK_TRANSFER_CHAT_GROUP = 1719,
  REQ_ADD_CHAT_GROUP_USER = 1720,
  ACK_ADD_CHAT_GROUP_USER = 1721,
  REQ_DELETE_CHAT_GROUP_USER = 1722,
  ACK_DELETE_CHAT_GROUP_USER = 1723,
  REQ_SWITCH_CHAT_BUBBLE = 1724,
  ACK_SWITCH_CHAT_BUBBLE = 1725,
  REQ_UNLOCK_CHAT_BUBBLE = 1726,
  ACK_UNLOCK_CHAT_BUBBLE = 1727,
  REQ_UNLOCK_CHAT_MEME_GROUP = 1728,
  ACK_UNLOCK_CHAT_MEME_GROUP = 1729,
  REQ_UNLOCK_CHAT_MEME = 1730,
  ACK_UNLOCK_CHAT_MEME = 1731,
  REQ_ACTIVITY_REWARDS = 1740,
  ACK_ACTIVITY_REWARDS = 1741,
  REQ_START_GUIDE_GROUP = 1800,
  ACK_START_GUIDE_GROUP = 1801,
  REQ_FINISH_GUIDE_GROUP = 1802,
  ACK_FINISH_GUIDE_GROUP = 1803,
  REQ_BEGINNING_MISSION_REWARD = 1810,
  ACK_BEGINNING_MISSION_REWARD = 1811,
  REQ_BEGINNING_MISSION_UNLOCK = 1812,
  ACK_BEGINNING_MISSION_UNLOCK = 1813,
  ACK_RESET_EVENT_DAILY = 1814,
  ACK_SEND_NOTIFICATION_EVENT = 1815,
  REQ_CHECK_CONDITION = 1816,
  ACK_CHECK_CONDITION = 1817,
  REQ_GET_CHAOTIC_BOOK_LIST = 2000,
  ACK_GET_CHAOTIC_BOOK_LIST = 2001,
  REQ_REPAIR_CHAOTIC_BOOK = 2002,
  ACK_REPAIR_CHAOTIC_BOOK = 2003,
  REQ_GET_FREE_POWER = 2004,
  ACK_GET_FREE_POWER = 2005,
  REQ_TALENT_MISSION_REWARDS = 2031,
  ACK_TALENT_MISSION_REWARDS = 2032,
  REQ_TALENT_REPLACE_WITCH = 2033,
  ACK_TALENT_REPLACE_WITCH = 2034,
  REQ_ANSWER_PREPARE = 2036,
  ACK_ANSWER_PREPARE = 2037,
  REQ_ANSWER_START = 2038,
  ACK_ANSWER_START = 2039,
  REQ_ANSWER_END = 2040,
  ACK_ANSWER_END = 2041,
  REQ_ANSWER_RESPOND = 2042,
  ACK_ANSWER_RESPOND = 2043,
  REQ_ANSWER_REWARDS = 2044,
  ACK_ANSWER_REWARDS = 2045,
  REQ_CMD_EXECUTE = 10000,
  REQ_TEST_SET_RESOURCE = 10003,
  REQ_SET_ITEM = 10004,
  REQ_TEST_SET_COLLEGE_EXAM_STATUS = 10005,
  REQ_TEST_REQ_RECRUIT_WITCH = 10006,
  REQ_GM_GET_PLAYER_DATA = 10011,
  ACK_GM_GET_PLAYER_DATA = 10012,
  REQ_GM_SET_PROPERTY = 10013,
  ACK_GM_SET_PROPERTY = 10014,
  REQ_GM_OPEN_FUNCTION = 10015,
  ACK_GM_OPEN_FUNCTION = 10016,
  REQ_GM_ADD_RESOURCES = 10017,
  ACK_GM_ADD_RESOURCES = 10018,
  REQ_GM_ENTER_BATTLE = 10019,
  ACK_GM_ENTER_BATTLE = 10020,
  REQ_GM_END_BATTLE = 10021,
  ACK_GM_END_BATTLE = 10022,
  REQ_GM_CHAT_MUZZLE = 10023,
  ACK_GM_CHAT_MUZZLE = 10024,
  REQ_GM_SET_GUIDE_GROUP = 10025,
  ACK_GM_SET_GUIDE_GROUP = 10026,
  REQ_GM_SEND_NOTIFICATION_EVENT = 10027,
  ACK_GM_SEND_NOTIFICATION_EVENT = 10028,
  REQ_GM_TRIGGER_EVENT = 10029,
  ACK_GM_TRIGGER_EVENT = 10030,
  REQ_GM_SET_RECORD = 10031,
  ACK_GM_SET_RECORD = 10032,
  REQ_GM_DEBUG_ACCOUNT = 10033,
  ACK_GM_DEBUG_ACCOUNT = 10034,
  EGameMsgID_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EGameMsgID_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EGameMsgID_IsValid(int value);
constexpr EGameMsgID EGameMsgID_MIN = UNKNOW;
constexpr EGameMsgID EGameMsgID_MAX = ACK_GM_DEBUG_ACCOUNT;
constexpr int EGameMsgID_ARRAYSIZE = EGameMsgID_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGameMsgID_descriptor();
template<typename T>
inline const std::string& EGameMsgID_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGameMsgID>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGameMsgID_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGameMsgID_descriptor(), enum_t_value);
}
inline bool EGameMsgID_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGameMsgID* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGameMsgID>(
    EGameMsgID_descriptor(), name, value);
}
enum ESceneType : int {
  NORMAL_SCENE = 0,
  SINGLE_CLONE_SCENE = 1,
  MULTI_CLONE_SCENE = 2,
  ESceneType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ESceneType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ESceneType_IsValid(int value);
constexpr ESceneType ESceneType_MIN = NORMAL_SCENE;
constexpr ESceneType ESceneType_MAX = MULTI_CLONE_SCENE;
constexpr int ESceneType_ARRAYSIZE = ESceneType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ESceneType_descriptor();
template<typename T>
inline const std::string& ESceneType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ESceneType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ESceneType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ESceneType_descriptor(), enum_t_value);
}
inline bool ESceneType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ESceneType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ESceneType>(
    ESceneType_descriptor(), name, value);
}
enum EBattleType : int {
  BATTLE_TYPE_NONE = 0,
  BATTLE_TYPE_STORY = 1,
  BATTLE_TYPE_COLLEGE = 2,
  BATTLE_TYPE_EXPLORE = 3,
  BATTLE_TYPE_PNEUMAISLAND = 4,
  BATTLE_TYPE_ENDLESS_TOWER = 5,
  BATTLE_TYPE_BOT_ARENA = 6,
  BATTLE_TYPE_STORY_BRANCH = 7,
  BATTLE_TYPE_EXPLORE_DUNGEON = 8,
  BATTLE_TYPE_EXPLORE_ELITE = 9,
  BATTLE_TYPE_EXPLORE_TASK = 10,
  BATTLE_TYPE_EXPLORE_RAID = 11,
  BATTLE_TYPE_WITCH_TALENT = 12,
  EBattleType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EBattleType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EBattleType_IsValid(int value);
constexpr EBattleType EBattleType_MIN = BATTLE_TYPE_NONE;
constexpr EBattleType EBattleType_MAX = BATTLE_TYPE_WITCH_TALENT;
constexpr int EBattleType_ARRAYSIZE = EBattleType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EBattleType_descriptor();
template<typename T>
inline const std::string& EBattleType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EBattleType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EBattleType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EBattleType_descriptor(), enum_t_value);
}
inline bool EBattleType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EBattleType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EBattleType>(
    EBattleType_descriptor(), name, value);
}
enum EOfflineReason : int {
  OR_LEAVE_GAME = 0,
  OR_REMOTE_LOGIN = 1,
  OR_DEAD_CONNECTION = 2,
  OR_IDLE_CONNECTION = 3,
  OR_GM_KICK = 4,
  OR_SERVER_MAINTAIN = 5,
  OR_VERIFY_JWT_FAILED = 6,
  OR_RECONNECT_FAILED = 7,
  EOfflineReason_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EOfflineReason_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EOfflineReason_IsValid(int value);
constexpr EOfflineReason EOfflineReason_MIN = OR_LEAVE_GAME;
constexpr EOfflineReason EOfflineReason_MAX = OR_RECONNECT_FAILED;
constexpr int EOfflineReason_ARRAYSIZE = EOfflineReason_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EOfflineReason_descriptor();
template<typename T>
inline const std::string& EOfflineReason_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EOfflineReason>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EOfflineReason_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EOfflineReason_descriptor(), enum_t_value);
}
inline bool EOfflineReason_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EOfflineReason* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EOfflineReason>(
    EOfflineReason_descriptor(), name, value);
}
enum EWitchKnowledgeOptType : int {
  KO_KNOWLEDGE = 0,
  KO_SUB_MEDICINE = 1,
  KO_SUB_RUNE = 2,
  KO_SUB_DIVINATION = 3,
  KO_SUB_ALCHEMY = 4,
  EWitchKnowledgeOptType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EWitchKnowledgeOptType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EWitchKnowledgeOptType_IsValid(int value);
constexpr EWitchKnowledgeOptType EWitchKnowledgeOptType_MIN = KO_KNOWLEDGE;
constexpr EWitchKnowledgeOptType EWitchKnowledgeOptType_MAX = KO_SUB_ALCHEMY;
constexpr int EWitchKnowledgeOptType_ARRAYSIZE = EWitchKnowledgeOptType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWitchKnowledgeOptType_descriptor();
template<typename T>
inline const std::string& EWitchKnowledgeOptType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EWitchKnowledgeOptType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EWitchKnowledgeOptType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EWitchKnowledgeOptType_descriptor(), enum_t_value);
}
inline bool EWitchKnowledgeOptType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EWitchKnowledgeOptType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EWitchKnowledgeOptType>(
    EWitchKnowledgeOptType_descriptor(), name, value);
}
enum EWitchPneumaOptType : int {
  PO_EQUIP = 0,
  PO_UNEQUIP = 1,
  PO_REPLACE = 2,
  EWitchPneumaOptType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EWitchPneumaOptType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EWitchPneumaOptType_IsValid(int value);
constexpr EWitchPneumaOptType EWitchPneumaOptType_MIN = PO_EQUIP;
constexpr EWitchPneumaOptType EWitchPneumaOptType_MAX = PO_REPLACE;
constexpr int EWitchPneumaOptType_ARRAYSIZE = EWitchPneumaOptType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWitchPneumaOptType_descriptor();
template<typename T>
inline const std::string& EWitchPneumaOptType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EWitchPneumaOptType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EWitchPneumaOptType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EWitchPneumaOptType_descriptor(), enum_t_value);
}
inline bool EWitchPneumaOptType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EWitchPneumaOptType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EWitchPneumaOptType>(
    EWitchPneumaOptType_descriptor(), name, value);
}
enum EWitchSkillOptType : int {
  SO_GENERAL_SKILL = 0,
  SO_ADVANCED_SKILL = 1,
  SO_UNIQUE_SKILL = 2,
  EWitchSkillOptType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EWitchSkillOptType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EWitchSkillOptType_IsValid(int value);
constexpr EWitchSkillOptType EWitchSkillOptType_MIN = SO_GENERAL_SKILL;
constexpr EWitchSkillOptType EWitchSkillOptType_MAX = SO_UNIQUE_SKILL;
constexpr int EWitchSkillOptType_ARRAYSIZE = EWitchSkillOptType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EWitchSkillOptType_descriptor();
template<typename T>
inline const std::string& EWitchSkillOptType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EWitchSkillOptType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EWitchSkillOptType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EWitchSkillOptType_descriptor(), enum_t_value);
}
inline bool EWitchSkillOptType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EWitchSkillOptType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EWitchSkillOptType>(
    EWitchSkillOptType_descriptor(), name, value);
}
enum EActiveMisisonFlag : int {
  MF_DAILY_ACTIVE_REWARD_1 = 0,
  MF_DAILY_ACTIVE_REWARD_2 = 1,
  MF_DAILY_ACTIVE_REWARD_3 = 2,
  MF_DAILY_ACTIVE_REWARD_4 = 3,
  MF_DAILY_ACTIVE_REWARD_5 = 4,
  MF_DAILY_ACTIVE_REWARD_6 = 5,
  MF_DAILY_ACTIVE_REWARD_7 = 6,
  MF_DAILY_ACTIVE_REWARD_8 = 7,
  MF_DAILY_ACTIVE_REWARD_9 = 8,
  MF_DAILY_ACTIVE_REWARD_10 = 9,
  MF_DAILY_ACTIVE_REWARD_DONE_1 = 10,
  MF_DAILY_ACTIVE_REWARD_DONE_2 = 11,
  MF_DAILY_ACTIVE_REWARD_DONE_3 = 12,
  MF_DAILY_ACTIVE_REWARD_DONE_4 = 13,
  MF_DAILY_ACTIVE_REWARD_DONE_5 = 14,
  MF_DAILY_ACTIVE_REWARD_DONE_6 = 15,
  MF_DAILY_ACTIVE_REWARD_DONE_7 = 16,
  MF_DAILY_ACTIVE_REWARD_DONE_8 = 17,
  MF_DAILY_ACTIVE_REWARD_DONE_9 = 18,
  MF_DAILY_ACTIVE_REWARD_DONE_10 = 19,
  MF_WEEKLY_ACTIVE_REWARD_1 = 20,
  MF_WEEKLY_ACTIVE_REWARD_2 = 21,
  MF_WEEKLY_ACTIVE_REWARD_3 = 22,
  MF_WEEKLY_ACTIVE_REWARD_4 = 23,
  MF_WEEKLY_ACTIVE_REWARD_5 = 24,
  MF_WEEKLY_ACTIVE_REWARD_6 = 25,
  MF_WEEKLY_ACTIVE_REWARD_7 = 26,
  MF_WEEKLY_ACTIVE_REWARD_8 = 27,
  MF_WEEKLY_ACTIVE_REWARD_9 = 28,
  MF_WEEKLY_ACTIVE_REWARD_10 = 29,
  MF_WEEKLY_ACTIVE_REWARD_DONE_1 = 30,
  MF_WEEKLY_ACTIVE_REWARD_DONE_2 = 31,
  MF_WEEKLY_ACTIVE_REWARD_DONE_3 = 32,
  MF_WEEKLY_ACTIVE_REWARD_DONE_4 = 33,
  MF_WEEKLY_ACTIVE_REWARD_DONE_5 = 34,
  MF_WEEKLY_ACTIVE_REWARD_DONE_6 = 35,
  MF_WEEKLY_ACTIVE_REWARD_DONE_7 = 36,
  MF_WEEKLY_ACTIVE_REWARD_DONE_8 = 37,
  MF_WEEKLY_ACTIVE_REWARD_DONE_9 = 38,
  MF_WEEKLY_ACTIVE_REWARD_DONE_10 = 39,
  MF_DAILY_MISSION_UPDATE = 40,
  MF_WEEKLY_MISSION_UPDATE = 41,
  EActiveMisisonFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EActiveMisisonFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EActiveMisisonFlag_IsValid(int value);
constexpr EActiveMisisonFlag EActiveMisisonFlag_MIN = MF_DAILY_ACTIVE_REWARD_1;
constexpr EActiveMisisonFlag EActiveMisisonFlag_MAX = MF_WEEKLY_MISSION_UPDATE;
constexpr int EActiveMisisonFlag_ARRAYSIZE = EActiveMisisonFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EActiveMisisonFlag_descriptor();
template<typename T>
inline const std::string& EActiveMisisonFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EActiveMisisonFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EActiveMisisonFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EActiveMisisonFlag_descriptor(), enum_t_value);
}
inline bool EActiveMisisonFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EActiveMisisonFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EActiveMisisonFlag>(
    EActiveMisisonFlag_descriptor(), name, value);
}
enum ProductSellType : int {
  PST_NONE = 0,
  PST_COMMON = 1,
  PST_INCREMENT = 2,
  ProductSellType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProductSellType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProductSellType_IsValid(int value);
constexpr ProductSellType ProductSellType_MIN = PST_NONE;
constexpr ProductSellType ProductSellType_MAX = PST_INCREMENT;
constexpr int ProductSellType_ARRAYSIZE = ProductSellType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProductSellType_descriptor();
template<typename T>
inline const std::string& ProductSellType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProductSellType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProductSellType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProductSellType_descriptor(), enum_t_value);
}
inline bool ProductSellType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ProductSellType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProductSellType>(
    ProductSellType_descriptor(), name, value);
}
enum BotarenaPromptType : int {
  BPT_NONE = 0,
  BPT_GRADE = 1,
  BPT_STAGE = 2,
  BPT_SESSION = 3,
  BotarenaPromptType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BotarenaPromptType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BotarenaPromptType_IsValid(int value);
constexpr BotarenaPromptType BotarenaPromptType_MIN = BPT_NONE;
constexpr BotarenaPromptType BotarenaPromptType_MAX = BPT_SESSION;
constexpr int BotarenaPromptType_ARRAYSIZE = BotarenaPromptType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BotarenaPromptType_descriptor();
template<typename T>
inline const std::string& BotarenaPromptType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BotarenaPromptType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BotarenaPromptType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BotarenaPromptType_descriptor(), enum_t_value);
}
inline bool BotarenaPromptType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BotarenaPromptType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BotarenaPromptType>(
    BotarenaPromptType_descriptor(), name, value);
}
enum ECommunityMemberPosition : int {
  MP_PREPARED_MEMBER = 0,
  MP_MEMBER = 1,
  MP_MANAGER = 2,
  MP_CHIEF = 3,
  ECommunityMemberPosition_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ECommunityMemberPosition_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ECommunityMemberPosition_IsValid(int value);
constexpr ECommunityMemberPosition ECommunityMemberPosition_MIN = MP_PREPARED_MEMBER;
constexpr ECommunityMemberPosition ECommunityMemberPosition_MAX = MP_CHIEF;
constexpr int ECommunityMemberPosition_ARRAYSIZE = ECommunityMemberPosition_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ECommunityMemberPosition_descriptor();
template<typename T>
inline const std::string& ECommunityMemberPosition_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ECommunityMemberPosition>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ECommunityMemberPosition_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ECommunityMemberPosition_descriptor(), enum_t_value);
}
inline bool ECommunityMemberPosition_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ECommunityMemberPosition* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ECommunityMemberPosition>(
    ECommunityMemberPosition_descriptor(), name, value);
}
enum BotarenaReplayResult : int {
  BCR_ATTACK_SUCCESS = 0,
  BCR_ATTACK_FAILURE = 1,
  BCR_DEFENSIVE_SUCCESS = 2,
  BCR_DEFENSIVE_FAILURE = 3,
  BCR_COUNTER_ATTACK_SUCCESS = 4,
  BCR_COUNTER_ATTACK_FAILURE = 5,
  BCR_COUNTER_DEFENSIVE_SUCCESS = 6,
  BCR_COUNTER_DEFENSIVE_FAILURE = 7,
  BotarenaReplayResult_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BotarenaReplayResult_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BotarenaReplayResult_IsValid(int value);
constexpr BotarenaReplayResult BotarenaReplayResult_MIN = BCR_ATTACK_SUCCESS;
constexpr BotarenaReplayResult BotarenaReplayResult_MAX = BCR_COUNTER_DEFENSIVE_FAILURE;
constexpr int BotarenaReplayResult_ARRAYSIZE = BotarenaReplayResult_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BotarenaReplayResult_descriptor();
template<typename T>
inline const std::string& BotarenaReplayResult_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BotarenaReplayResult>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BotarenaReplayResult_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BotarenaReplayResult_descriptor(), enum_t_value);
}
inline bool BotarenaReplayResult_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BotarenaReplayResult* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BotarenaReplayResult>(
    BotarenaReplayResult_descriptor(), name, value);
}
enum EChatType : int {
  CT_PUBLIC = 0,
  CT_COMMUNITY = 1,
  CT_FRIEND = 2,
  EChatType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EChatType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EChatType_IsValid(int value);
constexpr EChatType EChatType_MIN = CT_PUBLIC;
constexpr EChatType EChatType_MAX = CT_FRIEND;
constexpr int EChatType_ARRAYSIZE = EChatType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EChatType_descriptor();
template<typename T>
inline const std::string& EChatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EChatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EChatType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EChatType_descriptor(), enum_t_value);
}
inline bool EChatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EChatType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EChatType>(
    EChatType_descriptor(), name, value);
}
enum ERecommendedFriendType : int {
  RT_TOP = 0,
  RT_SAME = 1,
  RT_RANDOM = 2,
  ERecommendedFriendType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ERecommendedFriendType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ERecommendedFriendType_IsValid(int value);
constexpr ERecommendedFriendType ERecommendedFriendType_MIN = RT_TOP;
constexpr ERecommendedFriendType ERecommendedFriendType_MAX = RT_RANDOM;
constexpr int ERecommendedFriendType_ARRAYSIZE = ERecommendedFriendType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERecommendedFriendType_descriptor();
template<typename T>
inline const std::string& ERecommendedFriendType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ERecommendedFriendType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ERecommendedFriendType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ERecommendedFriendType_descriptor(), enum_t_value);
}
inline bool ERecommendedFriendType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ERecommendedFriendType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ERecommendedFriendType>(
    ERecommendedFriendType_descriptor(), name, value);
}
enum NotificationEventType : int {
  NET_NONE = 0,
  NET_HOTFIX = 1,
  NET_SILENT_DOWNLOAD = 2,
  NotificationEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  NotificationEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool NotificationEventType_IsValid(int value);
constexpr NotificationEventType NotificationEventType_MIN = NET_NONE;
constexpr NotificationEventType NotificationEventType_MAX = NET_SILENT_DOWNLOAD;
constexpr int NotificationEventType_ARRAYSIZE = NotificationEventType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NotificationEventType_descriptor();
template<typename T>
inline const std::string& NotificationEventType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NotificationEventType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NotificationEventType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NotificationEventType_descriptor(), enum_t_value);
}
inline bool NotificationEventType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, NotificationEventType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NotificationEventType>(
    NotificationEventType_descriptor(), name, value);
}
enum ActivityState : int {
  AS_NOTOPEN = 0,
  AS_PREVIEW = 1,
  AS_SHOW = 2,
  AS_START = 3,
  AS_END = 4,
  AS_CLOSE = 5,
  ActivityState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ActivityState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ActivityState_IsValid(int value);
constexpr ActivityState ActivityState_MIN = AS_NOTOPEN;
constexpr ActivityState ActivityState_MAX = AS_CLOSE;
constexpr int ActivityState_ARRAYSIZE = ActivityState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ActivityState_descriptor();
template<typename T>
inline const std::string& ActivityState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ActivityState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ActivityState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ActivityState_descriptor(), enum_t_value);
}
inline bool ActivityState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ActivityState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ActivityState>(
    ActivityState_descriptor(), name, value);
}
enum ERedpointType : int {
  RPT_APPOINT_STATE = 0,
  RPT_UNLOCK_APPOINT_AREA = 1,
  RPT_7_DAY_REWARD = 2,
  RPT_ACTIVE_MISSION_REWARD = 3,
  RPT_TALENT_MISSION_REWARD = 4,
  RPT_FREE_POWER_REWARD = 5,
  RPT_BEGINNING_MISSION_REWARD = 6,
  ERedpointType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ERedpointType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ERedpointType_IsValid(int value);
constexpr ERedpointType ERedpointType_MIN = RPT_APPOINT_STATE;
constexpr ERedpointType ERedpointType_MAX = RPT_BEGINNING_MISSION_REWARD;
constexpr int ERedpointType_ARRAYSIZE = ERedpointType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ERedpointType_descriptor();
template<typename T>
inline const std::string& ERedpointType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ERedpointType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ERedpointType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ERedpointType_descriptor(), enum_t_value);
}
inline bool ERedpointType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ERedpointType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ERedpointType>(
    ERedpointType_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace KWMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KWMsg::EGameEventCode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EGameEventCode>() {
  return ::KWMsg::EGameEventCode_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::EGameMsgID> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EGameMsgID>() {
  return ::KWMsg::EGameMsgID_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::ESceneType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::ESceneType>() {
  return ::KWMsg::ESceneType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::EBattleType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EBattleType>() {
  return ::KWMsg::EBattleType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::EOfflineReason> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EOfflineReason>() {
  return ::KWMsg::EOfflineReason_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::EWitchKnowledgeOptType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EWitchKnowledgeOptType>() {
  return ::KWMsg::EWitchKnowledgeOptType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::EWitchPneumaOptType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EWitchPneumaOptType>() {
  return ::KWMsg::EWitchPneumaOptType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::EWitchSkillOptType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EWitchSkillOptType>() {
  return ::KWMsg::EWitchSkillOptType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::EActiveMisisonFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EActiveMisisonFlag>() {
  return ::KWMsg::EActiveMisisonFlag_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::ProductSellType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::ProductSellType>() {
  return ::KWMsg::ProductSellType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::BotarenaPromptType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::BotarenaPromptType>() {
  return ::KWMsg::BotarenaPromptType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::ECommunityMemberPosition> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::ECommunityMemberPosition>() {
  return ::KWMsg::ECommunityMemberPosition_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::BotarenaReplayResult> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::BotarenaReplayResult>() {
  return ::KWMsg::BotarenaReplayResult_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::EChatType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EChatType>() {
  return ::KWMsg::EChatType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::ERecommendedFriendType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::ERecommendedFriendType>() {
  return ::KWMsg::ERecommendedFriendType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::NotificationEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::NotificationEventType>() {
  return ::KWMsg::NotificationEventType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::ActivityState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::ActivityState>() {
  return ::KWMsg::ActivityState_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::ERedpointType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::ERedpointType>() {
  return ::KWMsg::ERedpointType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kwmsgdefine_2eproto
