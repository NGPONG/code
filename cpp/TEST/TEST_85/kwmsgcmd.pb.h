// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kwmsgcmd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kwmsgcmd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kwmsgcmd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kwmsgcmd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kwmsgcmd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kwmsgcmd_2eproto;
namespace KWMsg {
class AckGmGetPlayerData;
struct AckGmGetPlayerDataDefaultTypeInternal;
extern AckGmGetPlayerDataDefaultTypeInternal _AckGmGetPlayerData_default_instance_;
class ReqCmdExecute;
struct ReqCmdExecuteDefaultTypeInternal;
extern ReqCmdExecuteDefaultTypeInternal _ReqCmdExecute_default_instance_;
class ReqGmAddResources;
struct ReqGmAddResourcesDefaultTypeInternal;
extern ReqGmAddResourcesDefaultTypeInternal _ReqGmAddResources_default_instance_;
class ReqGmAddResources_ReqGmAddResourceInfo;
struct ReqGmAddResources_ReqGmAddResourceInfoDefaultTypeInternal;
extern ReqGmAddResources_ReqGmAddResourceInfoDefaultTypeInternal _ReqGmAddResources_ReqGmAddResourceInfo_default_instance_;
class ReqGmChatMuzzle;
struct ReqGmChatMuzzleDefaultTypeInternal;
extern ReqGmChatMuzzleDefaultTypeInternal _ReqGmChatMuzzle_default_instance_;
class ReqGmCmdDebugAccount;
struct ReqGmCmdDebugAccountDefaultTypeInternal;
extern ReqGmCmdDebugAccountDefaultTypeInternal _ReqGmCmdDebugAccount_default_instance_;
class ReqGmEndBattle;
struct ReqGmEndBattleDefaultTypeInternal;
extern ReqGmEndBattleDefaultTypeInternal _ReqGmEndBattle_default_instance_;
class ReqGmEnterBattle;
struct ReqGmEnterBattleDefaultTypeInternal;
extern ReqGmEnterBattleDefaultTypeInternal _ReqGmEnterBattle_default_instance_;
class ReqGmGetPlayerData;
struct ReqGmGetPlayerDataDefaultTypeInternal;
extern ReqGmGetPlayerDataDefaultTypeInternal _ReqGmGetPlayerData_default_instance_;
class ReqGmOpenFunction;
struct ReqGmOpenFunctionDefaultTypeInternal;
extern ReqGmOpenFunctionDefaultTypeInternal _ReqGmOpenFunction_default_instance_;
class ReqGmSendNotificationEvent;
struct ReqGmSendNotificationEventDefaultTypeInternal;
extern ReqGmSendNotificationEventDefaultTypeInternal _ReqGmSendNotificationEvent_default_instance_;
class ReqGmSetGuideGroup;
struct ReqGmSetGuideGroupDefaultTypeInternal;
extern ReqGmSetGuideGroupDefaultTypeInternal _ReqGmSetGuideGroup_default_instance_;
class ReqGmSetProperty;
struct ReqGmSetPropertyDefaultTypeInternal;
extern ReqGmSetPropertyDefaultTypeInternal _ReqGmSetProperty_default_instance_;
class ReqGmSetRecord;
struct ReqGmSetRecordDefaultTypeInternal;
extern ReqGmSetRecordDefaultTypeInternal _ReqGmSetRecord_default_instance_;
class ReqGmTriggerEvent;
struct ReqGmTriggerEventDefaultTypeInternal;
extern ReqGmTriggerEventDefaultTypeInternal _ReqGmTriggerEvent_default_instance_;
}  // namespace KWMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::KWMsg::AckGmGetPlayerData* Arena::CreateMaybeMessage<::KWMsg::AckGmGetPlayerData>(Arena*);
template<> ::KWMsg::ReqCmdExecute* Arena::CreateMaybeMessage<::KWMsg::ReqCmdExecute>(Arena*);
template<> ::KWMsg::ReqGmAddResources* Arena::CreateMaybeMessage<::KWMsg::ReqGmAddResources>(Arena*);
template<> ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo* Arena::CreateMaybeMessage<::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo>(Arena*);
template<> ::KWMsg::ReqGmChatMuzzle* Arena::CreateMaybeMessage<::KWMsg::ReqGmChatMuzzle>(Arena*);
template<> ::KWMsg::ReqGmCmdDebugAccount* Arena::CreateMaybeMessage<::KWMsg::ReqGmCmdDebugAccount>(Arena*);
template<> ::KWMsg::ReqGmEndBattle* Arena::CreateMaybeMessage<::KWMsg::ReqGmEndBattle>(Arena*);
template<> ::KWMsg::ReqGmEnterBattle* Arena::CreateMaybeMessage<::KWMsg::ReqGmEnterBattle>(Arena*);
template<> ::KWMsg::ReqGmGetPlayerData* Arena::CreateMaybeMessage<::KWMsg::ReqGmGetPlayerData>(Arena*);
template<> ::KWMsg::ReqGmOpenFunction* Arena::CreateMaybeMessage<::KWMsg::ReqGmOpenFunction>(Arena*);
template<> ::KWMsg::ReqGmSendNotificationEvent* Arena::CreateMaybeMessage<::KWMsg::ReqGmSendNotificationEvent>(Arena*);
template<> ::KWMsg::ReqGmSetGuideGroup* Arena::CreateMaybeMessage<::KWMsg::ReqGmSetGuideGroup>(Arena*);
template<> ::KWMsg::ReqGmSetProperty* Arena::CreateMaybeMessage<::KWMsg::ReqGmSetProperty>(Arena*);
template<> ::KWMsg::ReqGmSetRecord* Arena::CreateMaybeMessage<::KWMsg::ReqGmSetRecord>(Arena*);
template<> ::KWMsg::ReqGmTriggerEvent* Arena::CreateMaybeMessage<::KWMsg::ReqGmTriggerEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace KWMsg {

enum EGmGetPlayerDataType : int {
  EDT_MIN = 0,
  EDT_PROPERTY = 1,
  EDT_RECORD = 2,
  EDT_MAX = 3,
  EGmGetPlayerDataType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EGmGetPlayerDataType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EGmGetPlayerDataType_IsValid(int value);
constexpr EGmGetPlayerDataType EGmGetPlayerDataType_MIN = EDT_MIN;
constexpr EGmGetPlayerDataType EGmGetPlayerDataType_MAX = EDT_MAX;
constexpr int EGmGetPlayerDataType_ARRAYSIZE = EGmGetPlayerDataType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGmGetPlayerDataType_descriptor();
template<typename T>
inline const std::string& EGmGetPlayerDataType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGmGetPlayerDataType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGmGetPlayerDataType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGmGetPlayerDataType_descriptor(), enum_t_value);
}
inline bool EGmGetPlayerDataType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGmGetPlayerDataType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGmGetPlayerDataType>(
    EGmGetPlayerDataType_descriptor(), name, value);
}
enum EGmGetPlayerDataIDType : int {
  EIT_MIN = 0,
  EIT_ACCOUNT_ID = 1,
  EIT_DIGITAL_ID = 2,
  EIT_GUID = 3,
  EIT_MAX = 4,
  EGmGetPlayerDataIDType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EGmGetPlayerDataIDType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EGmGetPlayerDataIDType_IsValid(int value);
constexpr EGmGetPlayerDataIDType EGmGetPlayerDataIDType_MIN = EIT_MIN;
constexpr EGmGetPlayerDataIDType EGmGetPlayerDataIDType_MAX = EIT_MAX;
constexpr int EGmGetPlayerDataIDType_ARRAYSIZE = EGmGetPlayerDataIDType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EGmGetPlayerDataIDType_descriptor();
template<typename T>
inline const std::string& EGmGetPlayerDataIDType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EGmGetPlayerDataIDType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EGmGetPlayerDataIDType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EGmGetPlayerDataIDType_descriptor(), enum_t_value);
}
inline bool EGmGetPlayerDataIDType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EGmGetPlayerDataIDType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EGmGetPlayerDataIDType>(
    EGmGetPlayerDataIDType_descriptor(), name, value);
}
enum EAckGmGetPlayerDataRetType : int {
  EART_SUCCESS = 0,
  EART_ERR_PLAYER_NOT_EXIST = 1,
  EART_ERR_KEY_NOT_EXIST = 2,
  EART_ERR_DATA_TYPE = 3,
  EART_ERR_ID_TYPE = 4,
  EART_ERR_DATA_VALUE = 5,
  EART_ERR_UNKNOWN = 6,
  EAckGmGetPlayerDataRetType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  EAckGmGetPlayerDataRetType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool EAckGmGetPlayerDataRetType_IsValid(int value);
constexpr EAckGmGetPlayerDataRetType EAckGmGetPlayerDataRetType_MIN = EART_SUCCESS;
constexpr EAckGmGetPlayerDataRetType EAckGmGetPlayerDataRetType_MAX = EART_ERR_UNKNOWN;
constexpr int EAckGmGetPlayerDataRetType_ARRAYSIZE = EAckGmGetPlayerDataRetType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EAckGmGetPlayerDataRetType_descriptor();
template<typename T>
inline const std::string& EAckGmGetPlayerDataRetType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EAckGmGetPlayerDataRetType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EAckGmGetPlayerDataRetType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EAckGmGetPlayerDataRetType_descriptor(), enum_t_value);
}
inline bool EAckGmGetPlayerDataRetType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, EAckGmGetPlayerDataRetType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EAckGmGetPlayerDataRetType>(
    EAckGmGetPlayerDataRetType_descriptor(), name, value);
}
// ===================================================================

class ReqCmdExecute final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCmdExecute) */ {
 public:
  inline ReqCmdExecute() : ReqCmdExecute(nullptr) {}
  ~ReqCmdExecute() override;
  explicit constexpr ReqCmdExecute(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCmdExecute(const ReqCmdExecute& from);
  ReqCmdExecute(ReqCmdExecute&& from) noexcept
    : ReqCmdExecute() {
    *this = ::std::move(from);
  }

  inline ReqCmdExecute& operator=(const ReqCmdExecute& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCmdExecute& operator=(ReqCmdExecute&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCmdExecute& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCmdExecute* internal_default_instance() {
    return reinterpret_cast<const ReqCmdExecute*>(
               &_ReqCmdExecute_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqCmdExecute& a, ReqCmdExecute& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCmdExecute* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCmdExecute* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCmdExecute* New() const final {
    return new ReqCmdExecute();
  }

  ReqCmdExecute* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCmdExecute>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCmdExecute& from);
  void MergeFrom(const ReqCmdExecute& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCmdExecute* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCmdExecute";
  }
  protected:
  explicit ReqCmdExecute(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCmdOperatorFieldNumber = 1,
    kPayloadFieldNumber = 4,
    kCmdFieldNumber = 2,
    kWorldIdFieldNumber = 3,
    kReqIdFieldNumber = 5,
  };
  // bytes cmd_operator = 1;
  void clear_cmd_operator();
  const std::string& cmd_operator() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_cmd_operator(ArgT0&& arg0, ArgT... args);
  std::string* mutable_cmd_operator();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_cmd_operator();
  void set_allocated_cmd_operator(std::string* cmd_operator);
  private:
  const std::string& _internal_cmd_operator() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_cmd_operator(const std::string& value);
  std::string* _internal_mutable_cmd_operator();
  public:

  // bytes payload = 4;
  void clear_payload();
  const std::string& payload() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_payload(ArgT0&& arg0, ArgT... args);
  std::string* mutable_payload();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_payload();
  void set_allocated_payload(std::string* payload);
  private:
  const std::string& _internal_payload() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_payload(const std::string& value);
  std::string* _internal_mutable_payload();
  public:

  // int32 cmd = 2;
  void clear_cmd();
  ::PROTOBUF_NAMESPACE_ID::int32 cmd() const;
  void set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cmd() const;
  void _internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 3;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 req_id = 5;
  void clear_req_id();
  ::PROTOBUF_NAMESPACE_ID::int64 req_id() const;
  void set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_req_id() const;
  void _internal_set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCmdExecute)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cmd_operator_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr payload_;
  ::PROTOBUF_NAMESPACE_ID::int32 cmd_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 req_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class ReqGmGetPlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGmGetPlayerData) */ {
 public:
  inline ReqGmGetPlayerData() : ReqGmGetPlayerData(nullptr) {}
  ~ReqGmGetPlayerData() override;
  explicit constexpr ReqGmGetPlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGmGetPlayerData(const ReqGmGetPlayerData& from);
  ReqGmGetPlayerData(ReqGmGetPlayerData&& from) noexcept
    : ReqGmGetPlayerData() {
    *this = ::std::move(from);
  }

  inline ReqGmGetPlayerData& operator=(const ReqGmGetPlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGmGetPlayerData& operator=(ReqGmGetPlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGmGetPlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGmGetPlayerData* internal_default_instance() {
    return reinterpret_cast<const ReqGmGetPlayerData*>(
               &_ReqGmGetPlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReqGmGetPlayerData& a, ReqGmGetPlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGmGetPlayerData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGmGetPlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGmGetPlayerData* New() const final {
    return new ReqGmGetPlayerData();
  }

  ReqGmGetPlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGmGetPlayerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGmGetPlayerData& from);
  void MergeFrom(const ReqGmGetPlayerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGmGetPlayerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGmGetPlayerData";
  }
  protected:
  explicit ReqGmGetPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataNamesFieldNumber = 5,
    kIdFieldNumber = 1,
    kIdTypeFieldNumber = 2,
    kDataTypeFieldNumber = 3,
    kReqIdFieldNumber = 4,
  };
  // repeated bytes data_names = 5;
  int data_names_size() const;
  private:
  int _internal_data_names_size() const;
  public:
  void clear_data_names();
  const std::string& data_names(int index) const;
  std::string* mutable_data_names(int index);
  void set_data_names(int index, const std::string& value);
  void set_data_names(int index, std::string&& value);
  void set_data_names(int index, const char* value);
  void set_data_names(int index, const void* value, size_t size);
  std::string* add_data_names();
  void add_data_names(const std::string& value);
  void add_data_names(std::string&& value);
  void add_data_names(const char* value);
  void add_data_names(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_names();
  private:
  const std::string& _internal_data_names(int index) const;
  std::string* _internal_add_data_names();
  public:

  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // .KWMsg.EGmGetPlayerDataIDType id_type = 2;
  void clear_id_type();
  ::KWMsg::EGmGetPlayerDataIDType id_type() const;
  void set_id_type(::KWMsg::EGmGetPlayerDataIDType value);
  private:
  ::KWMsg::EGmGetPlayerDataIDType _internal_id_type() const;
  void _internal_set_id_type(::KWMsg::EGmGetPlayerDataIDType value);
  public:

  // .KWMsg.EGmGetPlayerDataType data_type = 3;
  void clear_data_type();
  ::KWMsg::EGmGetPlayerDataType data_type() const;
  void set_data_type(::KWMsg::EGmGetPlayerDataType value);
  private:
  ::KWMsg::EGmGetPlayerDataType _internal_data_type() const;
  void _internal_set_data_type(::KWMsg::EGmGetPlayerDataType value);
  public:

  // int64 req_id = 4;
  void clear_req_id();
  ::PROTOBUF_NAMESPACE_ID::int64 req_id() const;
  void set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_req_id() const;
  void _internal_set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGmGetPlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_names_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  int id_type_;
  int data_type_;
  ::PROTOBUF_NAMESPACE_ID::int64 req_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class AckGmGetPlayerData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGmGetPlayerData) */ {
 public:
  inline AckGmGetPlayerData() : AckGmGetPlayerData(nullptr) {}
  ~AckGmGetPlayerData() override;
  explicit constexpr AckGmGetPlayerData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGmGetPlayerData(const AckGmGetPlayerData& from);
  AckGmGetPlayerData(AckGmGetPlayerData&& from) noexcept
    : AckGmGetPlayerData() {
    *this = ::std::move(from);
  }

  inline AckGmGetPlayerData& operator=(const AckGmGetPlayerData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGmGetPlayerData& operator=(AckGmGetPlayerData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGmGetPlayerData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGmGetPlayerData* internal_default_instance() {
    return reinterpret_cast<const AckGmGetPlayerData*>(
               &_AckGmGetPlayerData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(AckGmGetPlayerData& a, AckGmGetPlayerData& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGmGetPlayerData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGmGetPlayerData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGmGetPlayerData* New() const final {
    return new AckGmGetPlayerData();
  }

  AckGmGetPlayerData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGmGetPlayerData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGmGetPlayerData& from);
  void MergeFrom(const AckGmGetPlayerData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGmGetPlayerData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGmGetPlayerData";
  }
  protected:
  explicit AckGmGetPlayerData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataNamesFieldNumber = 6,
    kDataValuesFieldNumber = 7,
    kIdFieldNumber = 1,
    kReqIdFieldNumber = 3,
    kIdTypeFieldNumber = 2,
    kDataTypeFieldNumber = 4,
    kRetTypeFieldNumber = 5,
  };
  // repeated bytes data_names = 6;
  int data_names_size() const;
  private:
  int _internal_data_names_size() const;
  public:
  void clear_data_names();
  const std::string& data_names(int index) const;
  std::string* mutable_data_names(int index);
  void set_data_names(int index, const std::string& value);
  void set_data_names(int index, std::string&& value);
  void set_data_names(int index, const char* value);
  void set_data_names(int index, const void* value, size_t size);
  std::string* add_data_names();
  void add_data_names(const std::string& value);
  void add_data_names(std::string&& value);
  void add_data_names(const char* value);
  void add_data_names(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_names();
  private:
  const std::string& _internal_data_names(int index) const;
  std::string* _internal_add_data_names();
  public:

  // repeated bytes data_values = 7;
  int data_values_size() const;
  private:
  int _internal_data_values_size() const;
  public:
  void clear_data_values();
  const std::string& data_values(int index) const;
  std::string* mutable_data_values(int index);
  void set_data_values(int index, const std::string& value);
  void set_data_values(int index, std::string&& value);
  void set_data_values(int index, const char* value);
  void set_data_values(int index, const void* value, size_t size);
  std::string* add_data_values();
  void add_data_values(const std::string& value);
  void add_data_values(std::string&& value);
  void add_data_values(const char* value);
  void add_data_values(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& data_values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_data_values();
  private:
  const std::string& _internal_data_values(int index) const;
  std::string* _internal_add_data_values();
  public:

  // bytes id = 1;
  void clear_id();
  const std::string& id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // int64 req_id = 3;
  void clear_req_id();
  ::PROTOBUF_NAMESPACE_ID::int64 req_id() const;
  void set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_req_id() const;
  void _internal_set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .KWMsg.EGmGetPlayerDataIDType id_type = 2;
  void clear_id_type();
  ::KWMsg::EGmGetPlayerDataIDType id_type() const;
  void set_id_type(::KWMsg::EGmGetPlayerDataIDType value);
  private:
  ::KWMsg::EGmGetPlayerDataIDType _internal_id_type() const;
  void _internal_set_id_type(::KWMsg::EGmGetPlayerDataIDType value);
  public:

  // .KWMsg.EGmGetPlayerDataType data_type = 4;
  void clear_data_type();
  ::KWMsg::EGmGetPlayerDataType data_type() const;
  void set_data_type(::KWMsg::EGmGetPlayerDataType value);
  private:
  ::KWMsg::EGmGetPlayerDataType _internal_data_type() const;
  void _internal_set_data_type(::KWMsg::EGmGetPlayerDataType value);
  public:

  // .KWMsg.EAckGmGetPlayerDataRetType ret_type = 5;
  void clear_ret_type();
  ::KWMsg::EAckGmGetPlayerDataRetType ret_type() const;
  void set_ret_type(::KWMsg::EAckGmGetPlayerDataRetType value);
  private:
  ::KWMsg::EAckGmGetPlayerDataRetType _internal_ret_type() const;
  void _internal_set_ret_type(::KWMsg::EAckGmGetPlayerDataRetType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGmGetPlayerData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> data_values_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int64 req_id_;
  int id_type_;
  int data_type_;
  int ret_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class ReqGmSetProperty final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGmSetProperty) */ {
 public:
  inline ReqGmSetProperty() : ReqGmSetProperty(nullptr) {}
  ~ReqGmSetProperty() override;
  explicit constexpr ReqGmSetProperty(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGmSetProperty(const ReqGmSetProperty& from);
  ReqGmSetProperty(ReqGmSetProperty&& from) noexcept
    : ReqGmSetProperty() {
    *this = ::std::move(from);
  }

  inline ReqGmSetProperty& operator=(const ReqGmSetProperty& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGmSetProperty& operator=(ReqGmSetProperty&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGmSetProperty& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGmSetProperty* internal_default_instance() {
    return reinterpret_cast<const ReqGmSetProperty*>(
               &_ReqGmSetProperty_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ReqGmSetProperty& a, ReqGmSetProperty& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGmSetProperty* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGmSetProperty* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGmSetProperty* New() const final {
    return new ReqGmSetProperty();
  }

  ReqGmSetProperty* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGmSetProperty>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGmSetProperty& from);
  void MergeFrom(const ReqGmSetProperty& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGmSetProperty* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGmSetProperty";
  }
  protected:
  explicit ReqGmSetProperty(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPropertyNameFieldNumber = 2,
    kPropertyValueFieldNumber = 3,
  };
  // bytes player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // bytes property_name = 2;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // bytes property_value = 3;
  void clear_property_value();
  const std::string& property_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_property_value();
  void set_allocated_property_value(std::string* property_value);
  private:
  const std::string& _internal_property_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_value(const std::string& value);
  std::string* _internal_mutable_property_value();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGmSetProperty)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class ReqGmOpenFunction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGmOpenFunction) */ {
 public:
  inline ReqGmOpenFunction() : ReqGmOpenFunction(nullptr) {}
  ~ReqGmOpenFunction() override;
  explicit constexpr ReqGmOpenFunction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGmOpenFunction(const ReqGmOpenFunction& from);
  ReqGmOpenFunction(ReqGmOpenFunction&& from) noexcept
    : ReqGmOpenFunction() {
    *this = ::std::move(from);
  }

  inline ReqGmOpenFunction& operator=(const ReqGmOpenFunction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGmOpenFunction& operator=(ReqGmOpenFunction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGmOpenFunction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGmOpenFunction* internal_default_instance() {
    return reinterpret_cast<const ReqGmOpenFunction*>(
               &_ReqGmOpenFunction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ReqGmOpenFunction& a, ReqGmOpenFunction& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGmOpenFunction* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGmOpenFunction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGmOpenFunction* New() const final {
    return new ReqGmOpenFunction();
  }

  ReqGmOpenFunction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGmOpenFunction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGmOpenFunction& from);
  void MergeFrom(const ReqGmOpenFunction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGmOpenFunction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGmOpenFunction";
  }
  protected:
  explicit ReqGmOpenFunction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kFunctionIdFieldNumber = 2,
    kOnFieldNumber = 3,
  };
  // bytes player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // bytes function_id = 2;
  void clear_function_id();
  const std::string& function_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_function_id();
  void set_allocated_function_id(std::string* function_id);
  private:
  const std::string& _internal_function_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_id(const std::string& value);
  std::string* _internal_mutable_function_id();
  public:

  // int32 on = 3;
  void clear_on();
  ::PROTOBUF_NAMESPACE_ID::int32 on() const;
  void set_on(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_on() const;
  void _internal_set_on(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGmOpenFunction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 on_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class ReqGmAddResources_ReqGmAddResourceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGmAddResources.ReqGmAddResourceInfo) */ {
 public:
  inline ReqGmAddResources_ReqGmAddResourceInfo() : ReqGmAddResources_ReqGmAddResourceInfo(nullptr) {}
  ~ReqGmAddResources_ReqGmAddResourceInfo() override;
  explicit constexpr ReqGmAddResources_ReqGmAddResourceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGmAddResources_ReqGmAddResourceInfo(const ReqGmAddResources_ReqGmAddResourceInfo& from);
  ReqGmAddResources_ReqGmAddResourceInfo(ReqGmAddResources_ReqGmAddResourceInfo&& from) noexcept
    : ReqGmAddResources_ReqGmAddResourceInfo() {
    *this = ::std::move(from);
  }

  inline ReqGmAddResources_ReqGmAddResourceInfo& operator=(const ReqGmAddResources_ReqGmAddResourceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGmAddResources_ReqGmAddResourceInfo& operator=(ReqGmAddResources_ReqGmAddResourceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGmAddResources_ReqGmAddResourceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGmAddResources_ReqGmAddResourceInfo* internal_default_instance() {
    return reinterpret_cast<const ReqGmAddResources_ReqGmAddResourceInfo*>(
               &_ReqGmAddResources_ReqGmAddResourceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ReqGmAddResources_ReqGmAddResourceInfo& a, ReqGmAddResources_ReqGmAddResourceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGmAddResources_ReqGmAddResourceInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGmAddResources_ReqGmAddResourceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGmAddResources_ReqGmAddResourceInfo* New() const final {
    return new ReqGmAddResources_ReqGmAddResourceInfo();
  }

  ReqGmAddResources_ReqGmAddResourceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGmAddResources_ReqGmAddResourceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGmAddResources_ReqGmAddResourceInfo& from);
  void MergeFrom(const ReqGmAddResources_ReqGmAddResourceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGmAddResources_ReqGmAddResourceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGmAddResources.ReqGmAddResourceInfo";
  }
  protected:
  explicit ReqGmAddResources_ReqGmAddResourceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // bytes resource_id = 1;
  void clear_resource_id();
  const std::string& resource_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resource_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resource_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_resource_id();
  void set_allocated_resource_id(std::string* resource_id);
  private:
  const std::string& _internal_resource_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resource_id(const std::string& value);
  std::string* _internal_mutable_resource_id();
  public:

  // int64 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGmAddResources.ReqGmAddResourceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resource_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class ReqGmAddResources final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGmAddResources) */ {
 public:
  inline ReqGmAddResources() : ReqGmAddResources(nullptr) {}
  ~ReqGmAddResources() override;
  explicit constexpr ReqGmAddResources(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGmAddResources(const ReqGmAddResources& from);
  ReqGmAddResources(ReqGmAddResources&& from) noexcept
    : ReqGmAddResources() {
    *this = ::std::move(from);
  }

  inline ReqGmAddResources& operator=(const ReqGmAddResources& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGmAddResources& operator=(ReqGmAddResources&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGmAddResources& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGmAddResources* internal_default_instance() {
    return reinterpret_cast<const ReqGmAddResources*>(
               &_ReqGmAddResources_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ReqGmAddResources& a, ReqGmAddResources& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGmAddResources* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGmAddResources* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGmAddResources* New() const final {
    return new ReqGmAddResources();
  }

  ReqGmAddResources* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGmAddResources>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGmAddResources& from);
  void MergeFrom(const ReqGmAddResources& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGmAddResources* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGmAddResources";
  }
  protected:
  explicit ReqGmAddResources(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqGmAddResources_ReqGmAddResourceInfo ReqGmAddResourceInfo;

  // accessors -------------------------------------------------------

  enum : int {
    kResourceInfosFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.ReqGmAddResources.ReqGmAddResourceInfo resource_infos = 2;
  int resource_infos_size() const;
  private:
  int _internal_resource_infos_size() const;
  public:
  void clear_resource_infos();
  ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo* mutable_resource_infos(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo >*
      mutable_resource_infos();
  private:
  const ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo& _internal_resource_infos(int index) const;
  ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo* _internal_add_resource_infos();
  public:
  const ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo& resource_infos(int index) const;
  ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo* add_resource_infos();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo >&
      resource_infos() const;

  // bytes player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGmAddResources)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo > resource_infos_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class ReqGmEnterBattle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGmEnterBattle) */ {
 public:
  inline ReqGmEnterBattle() : ReqGmEnterBattle(nullptr) {}
  ~ReqGmEnterBattle() override;
  explicit constexpr ReqGmEnterBattle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGmEnterBattle(const ReqGmEnterBattle& from);
  ReqGmEnterBattle(ReqGmEnterBattle&& from) noexcept
    : ReqGmEnterBattle() {
    *this = ::std::move(from);
  }

  inline ReqGmEnterBattle& operator=(const ReqGmEnterBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGmEnterBattle& operator=(ReqGmEnterBattle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGmEnterBattle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGmEnterBattle* internal_default_instance() {
    return reinterpret_cast<const ReqGmEnterBattle*>(
               &_ReqGmEnterBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(ReqGmEnterBattle& a, ReqGmEnterBattle& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGmEnterBattle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGmEnterBattle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGmEnterBattle* New() const final {
    return new ReqGmEnterBattle();
  }

  ReqGmEnterBattle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGmEnterBattle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGmEnterBattle& from);
  void MergeFrom(const ReqGmEnterBattle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGmEnterBattle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGmEnterBattle";
  }
  protected:
  explicit ReqGmEnterBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kGamePlayIdFieldNumber = 2,
    kTeamIdFieldNumber = 3,
  };
  // bytes player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // bytes game_play_id = 2;
  void clear_game_play_id();
  const std::string& game_play_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_play_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_play_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_game_play_id();
  void set_allocated_game_play_id(std::string* game_play_id);
  private:
  const std::string& _internal_game_play_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_play_id(const std::string& value);
  std::string* _internal_mutable_game_play_id();
  public:

  // bytes team_id = 3;
  void clear_team_id();
  const std::string& team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_team_id();
  void set_allocated_team_id(std::string* team_id);
  private:
  const std::string& _internal_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_id(const std::string& value);
  std::string* _internal_mutable_team_id();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGmEnterBattle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_play_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class ReqGmEndBattle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGmEndBattle) */ {
 public:
  inline ReqGmEndBattle() : ReqGmEndBattle(nullptr) {}
  ~ReqGmEndBattle() override;
  explicit constexpr ReqGmEndBattle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGmEndBattle(const ReqGmEndBattle& from);
  ReqGmEndBattle(ReqGmEndBattle&& from) noexcept
    : ReqGmEndBattle() {
    *this = ::std::move(from);
  }

  inline ReqGmEndBattle& operator=(const ReqGmEndBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGmEndBattle& operator=(ReqGmEndBattle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGmEndBattle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGmEndBattle* internal_default_instance() {
    return reinterpret_cast<const ReqGmEndBattle*>(
               &_ReqGmEndBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReqGmEndBattle& a, ReqGmEndBattle& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGmEndBattle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGmEndBattle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGmEndBattle* New() const final {
    return new ReqGmEndBattle();
  }

  ReqGmEndBattle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGmEndBattle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGmEndBattle& from);
  void MergeFrom(const ReqGmEndBattle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGmEndBattle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGmEndBattle";
  }
  protected:
  explicit ReqGmEndBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kVictoryFieldNumber = 2,
  };
  // bytes player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // int32 victory = 2;
  void clear_victory();
  ::PROTOBUF_NAMESPACE_ID::int32 victory() const;
  void set_victory(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_victory() const;
  void _internal_set_victory(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGmEndBattle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 victory_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class ReqGmChatMuzzle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGmChatMuzzle) */ {
 public:
  inline ReqGmChatMuzzle() : ReqGmChatMuzzle(nullptr) {}
  ~ReqGmChatMuzzle() override;
  explicit constexpr ReqGmChatMuzzle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGmChatMuzzle(const ReqGmChatMuzzle& from);
  ReqGmChatMuzzle(ReqGmChatMuzzle&& from) noexcept
    : ReqGmChatMuzzle() {
    *this = ::std::move(from);
  }

  inline ReqGmChatMuzzle& operator=(const ReqGmChatMuzzle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGmChatMuzzle& operator=(ReqGmChatMuzzle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGmChatMuzzle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGmChatMuzzle* internal_default_instance() {
    return reinterpret_cast<const ReqGmChatMuzzle*>(
               &_ReqGmChatMuzzle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReqGmChatMuzzle& a, ReqGmChatMuzzle& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGmChatMuzzle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGmChatMuzzle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGmChatMuzzle* New() const final {
    return new ReqGmChatMuzzle();
  }

  ReqGmChatMuzzle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGmChatMuzzle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGmChatMuzzle& from);
  void MergeFrom(const ReqGmChatMuzzle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGmChatMuzzle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGmChatMuzzle";
  }
  protected:
  explicit ReqGmChatMuzzle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kMuzzleTimeFieldNumber = 2,
  };
  // bytes player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // int32 muzzle_time = 2;
  void clear_muzzle_time();
  ::PROTOBUF_NAMESPACE_ID::int32 muzzle_time() const;
  void set_muzzle_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_muzzle_time() const;
  void _internal_set_muzzle_time(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGmChatMuzzle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 muzzle_time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class ReqGmSetGuideGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGmSetGuideGroup) */ {
 public:
  inline ReqGmSetGuideGroup() : ReqGmSetGuideGroup(nullptr) {}
  ~ReqGmSetGuideGroup() override;
  explicit constexpr ReqGmSetGuideGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGmSetGuideGroup(const ReqGmSetGuideGroup& from);
  ReqGmSetGuideGroup(ReqGmSetGuideGroup&& from) noexcept
    : ReqGmSetGuideGroup() {
    *this = ::std::move(from);
  }

  inline ReqGmSetGuideGroup& operator=(const ReqGmSetGuideGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGmSetGuideGroup& operator=(ReqGmSetGuideGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGmSetGuideGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGmSetGuideGroup* internal_default_instance() {
    return reinterpret_cast<const ReqGmSetGuideGroup*>(
               &_ReqGmSetGuideGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReqGmSetGuideGroup& a, ReqGmSetGuideGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGmSetGuideGroup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGmSetGuideGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGmSetGuideGroup* New() const final {
    return new ReqGmSetGuideGroup();
  }

  ReqGmSetGuideGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGmSetGuideGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGmSetGuideGroup& from);
  void MergeFrom(const ReqGmSetGuideGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGmSetGuideGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGmSetGuideGroup";
  }
  protected:
  explicit ReqGmSetGuideGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kGuideGroupIdsFieldNumber = 2,
    kGuideStateFieldNumber = 3,
  };
  // bytes player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // bytes guide_group_ids = 2;
  void clear_guide_group_ids();
  const std::string& guide_group_ids() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guide_group_ids(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guide_group_ids();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_guide_group_ids();
  void set_allocated_guide_group_ids(std::string* guide_group_ids);
  private:
  const std::string& _internal_guide_group_ids() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guide_group_ids(const std::string& value);
  std::string* _internal_mutable_guide_group_ids();
  public:

  // int32 guide_state = 3;
  void clear_guide_state();
  ::PROTOBUF_NAMESPACE_ID::int32 guide_state() const;
  void set_guide_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_guide_state() const;
  void _internal_set_guide_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGmSetGuideGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guide_group_ids_;
  ::PROTOBUF_NAMESPACE_ID::int32 guide_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class ReqGmSendNotificationEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGmSendNotificationEvent) */ {
 public:
  inline ReqGmSendNotificationEvent() : ReqGmSendNotificationEvent(nullptr) {}
  ~ReqGmSendNotificationEvent() override;
  explicit constexpr ReqGmSendNotificationEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGmSendNotificationEvent(const ReqGmSendNotificationEvent& from);
  ReqGmSendNotificationEvent(ReqGmSendNotificationEvent&& from) noexcept
    : ReqGmSendNotificationEvent() {
    *this = ::std::move(from);
  }

  inline ReqGmSendNotificationEvent& operator=(const ReqGmSendNotificationEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGmSendNotificationEvent& operator=(ReqGmSendNotificationEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGmSendNotificationEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGmSendNotificationEvent* internal_default_instance() {
    return reinterpret_cast<const ReqGmSendNotificationEvent*>(
               &_ReqGmSendNotificationEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReqGmSendNotificationEvent& a, ReqGmSendNotificationEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGmSendNotificationEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGmSendNotificationEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGmSendNotificationEvent* New() const final {
    return new ReqGmSendNotificationEvent();
  }

  ReqGmSendNotificationEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGmSendNotificationEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGmSendNotificationEvent& from);
  void MergeFrom(const ReqGmSendNotificationEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGmSendNotificationEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGmSendNotificationEvent";
  }
  protected:
  explicit ReqGmSendNotificationEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventTypeFieldNumber = 1,
  };
  // int32 event_type = 1;
  void clear_event_type();
  ::PROTOBUF_NAMESPACE_ID::int32 event_type() const;
  void set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_type() const;
  void _internal_set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGmSendNotificationEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class ReqGmTriggerEvent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGmTriggerEvent) */ {
 public:
  inline ReqGmTriggerEvent() : ReqGmTriggerEvent(nullptr) {}
  ~ReqGmTriggerEvent() override;
  explicit constexpr ReqGmTriggerEvent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGmTriggerEvent(const ReqGmTriggerEvent& from);
  ReqGmTriggerEvent(ReqGmTriggerEvent&& from) noexcept
    : ReqGmTriggerEvent() {
    *this = ::std::move(from);
  }

  inline ReqGmTriggerEvent& operator=(const ReqGmTriggerEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGmTriggerEvent& operator=(ReqGmTriggerEvent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGmTriggerEvent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGmTriggerEvent* internal_default_instance() {
    return reinterpret_cast<const ReqGmTriggerEvent*>(
               &_ReqGmTriggerEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReqGmTriggerEvent& a, ReqGmTriggerEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGmTriggerEvent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGmTriggerEvent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGmTriggerEvent* New() const final {
    return new ReqGmTriggerEvent();
  }

  ReqGmTriggerEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGmTriggerEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGmTriggerEvent& from);
  void MergeFrom(const ReqGmTriggerEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGmTriggerEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGmTriggerEvent";
  }
  protected:
  explicit ReqGmTriggerEvent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kParamsFieldNumber = 3,
    kEventIdFieldNumber = 2,
  };
  // bytes player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // bytes params = 3;
  void clear_params();
  const std::string& params() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_params(ArgT0&& arg0, ArgT... args);
  std::string* mutable_params();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_params();
  void set_allocated_params(std::string* params);
  private:
  const std::string& _internal_params() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_params(const std::string& value);
  std::string* _internal_mutable_params();
  public:

  // int32 event_id = 2;
  void clear_event_id();
  ::PROTOBUF_NAMESPACE_ID::int32 event_id() const;
  void set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_event_id() const;
  void _internal_set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGmTriggerEvent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr params_;
  ::PROTOBUF_NAMESPACE_ID::int32 event_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class ReqGmSetRecord final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGmSetRecord) */ {
 public:
  inline ReqGmSetRecord() : ReqGmSetRecord(nullptr) {}
  ~ReqGmSetRecord() override;
  explicit constexpr ReqGmSetRecord(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGmSetRecord(const ReqGmSetRecord& from);
  ReqGmSetRecord(ReqGmSetRecord&& from) noexcept
    : ReqGmSetRecord() {
    *this = ::std::move(from);
  }

  inline ReqGmSetRecord& operator=(const ReqGmSetRecord& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGmSetRecord& operator=(ReqGmSetRecord&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGmSetRecord& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGmSetRecord* internal_default_instance() {
    return reinterpret_cast<const ReqGmSetRecord*>(
               &_ReqGmSetRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ReqGmSetRecord& a, ReqGmSetRecord& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGmSetRecord* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGmSetRecord* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGmSetRecord* New() const final {
    return new ReqGmSetRecord();
  }

  ReqGmSetRecord* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGmSetRecord>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGmSetRecord& from);
  void MergeFrom(const ReqGmSetRecord& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGmSetRecord* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGmSetRecord";
  }
  protected:
  explicit ReqGmSetRecord(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kRecordNameFieldNumber = 3,
    kRecordValueFieldNumber = 4,
    kOptTypeFieldNumber = 2,
    kRecordRowFieldNumber = 5,
    kRecordColFieldNumber = 6,
  };
  // bytes player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // bytes record_name = 3;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // bytes record_value = 4;
  void clear_record_value();
  const std::string& record_value() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_value(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_value();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_value();
  void set_allocated_record_value(std::string* record_value);
  private:
  const std::string& _internal_record_value() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_value(const std::string& value);
  std::string* _internal_mutable_record_value();
  public:

  // int32 opt_type = 2;
  void clear_opt_type();
  ::PROTOBUF_NAMESPACE_ID::int32 opt_type() const;
  void set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opt_type() const;
  void _internal_set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 record_row = 5;
  void clear_record_row();
  ::PROTOBUF_NAMESPACE_ID::int32 record_row() const;
  void set_record_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_record_row() const;
  void _internal_set_record_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 record_col = 6;
  void clear_record_col();
  ::PROTOBUF_NAMESPACE_ID::int32 record_col() const;
  void set_record_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_record_col() const;
  void _internal_set_record_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGmSetRecord)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_value_;
  ::PROTOBUF_NAMESPACE_ID::int32 opt_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 record_row_;
  ::PROTOBUF_NAMESPACE_ID::int32 record_col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// -------------------------------------------------------------------

class ReqGmCmdDebugAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGmCmdDebugAccount) */ {
 public:
  inline ReqGmCmdDebugAccount() : ReqGmCmdDebugAccount(nullptr) {}
  ~ReqGmCmdDebugAccount() override;
  explicit constexpr ReqGmCmdDebugAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGmCmdDebugAccount(const ReqGmCmdDebugAccount& from);
  ReqGmCmdDebugAccount(ReqGmCmdDebugAccount&& from) noexcept
    : ReqGmCmdDebugAccount() {
    *this = ::std::move(from);
  }

  inline ReqGmCmdDebugAccount& operator=(const ReqGmCmdDebugAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGmCmdDebugAccount& operator=(ReqGmCmdDebugAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGmCmdDebugAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGmCmdDebugAccount* internal_default_instance() {
    return reinterpret_cast<const ReqGmCmdDebugAccount*>(
               &_ReqGmCmdDebugAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReqGmCmdDebugAccount& a, ReqGmCmdDebugAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGmCmdDebugAccount* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGmCmdDebugAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGmCmdDebugAccount* New() const final {
    return new ReqGmCmdDebugAccount();
  }

  ReqGmCmdDebugAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGmCmdDebugAccount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGmCmdDebugAccount& from);
  void MergeFrom(const ReqGmCmdDebugAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGmCmdDebugAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGmCmdDebugAccount";
  }
  protected:
  explicit ReqGmCmdDebugAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // bytes player_id = 1;
  void clear_player_id();
  const std::string& player_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_player_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_player_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_player_id();
  void set_allocated_player_id(std::string* player_id);
  private:
  const std::string& _internal_player_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_player_id(const std::string& value);
  std::string* _internal_mutable_player_id();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGmCmdDebugAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgcmd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqCmdExecute

// bytes cmd_operator = 1;
inline void ReqCmdExecute::clear_cmd_operator() {
  cmd_operator_.ClearToEmpty();
}
inline const std::string& ReqCmdExecute::cmd_operator() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCmdExecute.cmd_operator)
  return _internal_cmd_operator();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCmdExecute::set_cmd_operator(ArgT0&& arg0, ArgT... args) {
 
 cmd_operator_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCmdExecute.cmd_operator)
}
inline std::string* ReqCmdExecute::mutable_cmd_operator() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCmdExecute.cmd_operator)
  return _internal_mutable_cmd_operator();
}
inline const std::string& ReqCmdExecute::_internal_cmd_operator() const {
  return cmd_operator_.Get();
}
inline void ReqCmdExecute::_internal_set_cmd_operator(const std::string& value) {
  
  cmd_operator_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCmdExecute::_internal_mutable_cmd_operator() {
  
  return cmd_operator_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCmdExecute::release_cmd_operator() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCmdExecute.cmd_operator)
  return cmd_operator_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCmdExecute::set_allocated_cmd_operator(std::string* cmd_operator) {
  if (cmd_operator != nullptr) {
    
  } else {
    
  }
  cmd_operator_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cmd_operator,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCmdExecute.cmd_operator)
}

// int32 cmd = 2;
inline void ReqCmdExecute::clear_cmd() {
  cmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCmdExecute::_internal_cmd() const {
  return cmd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCmdExecute::cmd() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCmdExecute.cmd)
  return _internal_cmd();
}
inline void ReqCmdExecute::_internal_set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cmd_ = value;
}
inline void ReqCmdExecute::set_cmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cmd(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCmdExecute.cmd)
}

// int32 world_id = 3;
inline void ReqCmdExecute::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCmdExecute::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCmdExecute::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCmdExecute.world_id)
  return _internal_world_id();
}
inline void ReqCmdExecute::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void ReqCmdExecute::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCmdExecute.world_id)
}

// bytes payload = 4;
inline void ReqCmdExecute::clear_payload() {
  payload_.ClearToEmpty();
}
inline const std::string& ReqCmdExecute::payload() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCmdExecute.payload)
  return _internal_payload();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCmdExecute::set_payload(ArgT0&& arg0, ArgT... args) {
 
 payload_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCmdExecute.payload)
}
inline std::string* ReqCmdExecute::mutable_payload() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCmdExecute.payload)
  return _internal_mutable_payload();
}
inline const std::string& ReqCmdExecute::_internal_payload() const {
  return payload_.Get();
}
inline void ReqCmdExecute::_internal_set_payload(const std::string& value) {
  
  payload_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCmdExecute::_internal_mutable_payload() {
  
  return payload_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCmdExecute::release_payload() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCmdExecute.payload)
  return payload_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCmdExecute::set_allocated_payload(std::string* payload) {
  if (payload != nullptr) {
    
  } else {
    
  }
  payload_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), payload,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCmdExecute.payload)
}

// int64 req_id = 5;
inline void ReqCmdExecute::clear_req_id() {
  req_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqCmdExecute::_internal_req_id() const {
  return req_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqCmdExecute::req_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCmdExecute.req_id)
  return _internal_req_id();
}
inline void ReqCmdExecute::_internal_set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  req_id_ = value;
}
inline void ReqCmdExecute::set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_req_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCmdExecute.req_id)
}

// -------------------------------------------------------------------

// ReqGmGetPlayerData

// bytes id = 1;
inline void ReqGmGetPlayerData::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& ReqGmGetPlayerData::id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmGetPlayerData.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmGetPlayerData::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmGetPlayerData.id)
}
inline std::string* ReqGmGetPlayerData::mutable_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmGetPlayerData.id)
  return _internal_mutable_id();
}
inline const std::string& ReqGmGetPlayerData::_internal_id() const {
  return id_.Get();
}
inline void ReqGmGetPlayerData::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmGetPlayerData::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmGetPlayerData::release_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmGetPlayerData.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmGetPlayerData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmGetPlayerData.id)
}

// .KWMsg.EGmGetPlayerDataIDType id_type = 2;
inline void ReqGmGetPlayerData::clear_id_type() {
  id_type_ = 0;
}
inline ::KWMsg::EGmGetPlayerDataIDType ReqGmGetPlayerData::_internal_id_type() const {
  return static_cast< ::KWMsg::EGmGetPlayerDataIDType >(id_type_);
}
inline ::KWMsg::EGmGetPlayerDataIDType ReqGmGetPlayerData::id_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmGetPlayerData.id_type)
  return _internal_id_type();
}
inline void ReqGmGetPlayerData::_internal_set_id_type(::KWMsg::EGmGetPlayerDataIDType value) {
  
  id_type_ = value;
}
inline void ReqGmGetPlayerData::set_id_type(::KWMsg::EGmGetPlayerDataIDType value) {
  _internal_set_id_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmGetPlayerData.id_type)
}

// .KWMsg.EGmGetPlayerDataType data_type = 3;
inline void ReqGmGetPlayerData::clear_data_type() {
  data_type_ = 0;
}
inline ::KWMsg::EGmGetPlayerDataType ReqGmGetPlayerData::_internal_data_type() const {
  return static_cast< ::KWMsg::EGmGetPlayerDataType >(data_type_);
}
inline ::KWMsg::EGmGetPlayerDataType ReqGmGetPlayerData::data_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmGetPlayerData.data_type)
  return _internal_data_type();
}
inline void ReqGmGetPlayerData::_internal_set_data_type(::KWMsg::EGmGetPlayerDataType value) {
  
  data_type_ = value;
}
inline void ReqGmGetPlayerData::set_data_type(::KWMsg::EGmGetPlayerDataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmGetPlayerData.data_type)
}

// int64 req_id = 4;
inline void ReqGmGetPlayerData::clear_req_id() {
  req_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqGmGetPlayerData::_internal_req_id() const {
  return req_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqGmGetPlayerData::req_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmGetPlayerData.req_id)
  return _internal_req_id();
}
inline void ReqGmGetPlayerData::_internal_set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  req_id_ = value;
}
inline void ReqGmGetPlayerData::set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_req_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmGetPlayerData.req_id)
}

// repeated bytes data_names = 5;
inline int ReqGmGetPlayerData::_internal_data_names_size() const {
  return data_names_.size();
}
inline int ReqGmGetPlayerData::data_names_size() const {
  return _internal_data_names_size();
}
inline void ReqGmGetPlayerData::clear_data_names() {
  data_names_.Clear();
}
inline std::string* ReqGmGetPlayerData::add_data_names() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.ReqGmGetPlayerData.data_names)
  return _internal_add_data_names();
}
inline const std::string& ReqGmGetPlayerData::_internal_data_names(int index) const {
  return data_names_.Get(index);
}
inline const std::string& ReqGmGetPlayerData::data_names(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmGetPlayerData.data_names)
  return _internal_data_names(index);
}
inline std::string* ReqGmGetPlayerData::mutable_data_names(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmGetPlayerData.data_names)
  return data_names_.Mutable(index);
}
inline void ReqGmGetPlayerData::set_data_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmGetPlayerData.data_names)
  data_names_.Mutable(index)->assign(value);
}
inline void ReqGmGetPlayerData::set_data_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmGetPlayerData.data_names)
  data_names_.Mutable(index)->assign(std::move(value));
}
inline void ReqGmGetPlayerData::set_data_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.ReqGmGetPlayerData.data_names)
}
inline void ReqGmGetPlayerData::set_data_names(int index, const void* value, size_t size) {
  data_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.ReqGmGetPlayerData.data_names)
}
inline std::string* ReqGmGetPlayerData::_internal_add_data_names() {
  return data_names_.Add();
}
inline void ReqGmGetPlayerData::add_data_names(const std::string& value) {
  data_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.ReqGmGetPlayerData.data_names)
}
inline void ReqGmGetPlayerData::add_data_names(std::string&& value) {
  data_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.ReqGmGetPlayerData.data_names)
}
inline void ReqGmGetPlayerData::add_data_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.ReqGmGetPlayerData.data_names)
}
inline void ReqGmGetPlayerData::add_data_names(const void* value, size_t size) {
  data_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.ReqGmGetPlayerData.data_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReqGmGetPlayerData::data_names() const {
  // @@protoc_insertion_point(field_list:KWMsg.ReqGmGetPlayerData.data_names)
  return data_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReqGmGetPlayerData::mutable_data_names() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ReqGmGetPlayerData.data_names)
  return &data_names_;
}

// -------------------------------------------------------------------

// AckGmGetPlayerData

// bytes id = 1;
inline void AckGmGetPlayerData::clear_id() {
  id_.ClearToEmpty();
}
inline const std::string& AckGmGetPlayerData::id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGmGetPlayerData.id)
  return _internal_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckGmGetPlayerData::set_id(ArgT0&& arg0, ArgT... args) {
 
 id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.id)
}
inline std::string* AckGmGetPlayerData::mutable_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGmGetPlayerData.id)
  return _internal_mutable_id();
}
inline const std::string& AckGmGetPlayerData::_internal_id() const {
  return id_.Get();
}
inline void AckGmGetPlayerData::_internal_set_id(const std::string& value) {
  
  id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckGmGetPlayerData::_internal_mutable_id() {
  
  return id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckGmGetPlayerData::release_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckGmGetPlayerData.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckGmGetPlayerData::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckGmGetPlayerData.id)
}

// .KWMsg.EGmGetPlayerDataIDType id_type = 2;
inline void AckGmGetPlayerData::clear_id_type() {
  id_type_ = 0;
}
inline ::KWMsg::EGmGetPlayerDataIDType AckGmGetPlayerData::_internal_id_type() const {
  return static_cast< ::KWMsg::EGmGetPlayerDataIDType >(id_type_);
}
inline ::KWMsg::EGmGetPlayerDataIDType AckGmGetPlayerData::id_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGmGetPlayerData.id_type)
  return _internal_id_type();
}
inline void AckGmGetPlayerData::_internal_set_id_type(::KWMsg::EGmGetPlayerDataIDType value) {
  
  id_type_ = value;
}
inline void AckGmGetPlayerData::set_id_type(::KWMsg::EGmGetPlayerDataIDType value) {
  _internal_set_id_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.id_type)
}

// int64 req_id = 3;
inline void AckGmGetPlayerData::clear_req_id() {
  req_id_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AckGmGetPlayerData::_internal_req_id() const {
  return req_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AckGmGetPlayerData::req_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGmGetPlayerData.req_id)
  return _internal_req_id();
}
inline void AckGmGetPlayerData::_internal_set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  req_id_ = value;
}
inline void AckGmGetPlayerData::set_req_id(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_req_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.req_id)
}

// .KWMsg.EGmGetPlayerDataType data_type = 4;
inline void AckGmGetPlayerData::clear_data_type() {
  data_type_ = 0;
}
inline ::KWMsg::EGmGetPlayerDataType AckGmGetPlayerData::_internal_data_type() const {
  return static_cast< ::KWMsg::EGmGetPlayerDataType >(data_type_);
}
inline ::KWMsg::EGmGetPlayerDataType AckGmGetPlayerData::data_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGmGetPlayerData.data_type)
  return _internal_data_type();
}
inline void AckGmGetPlayerData::_internal_set_data_type(::KWMsg::EGmGetPlayerDataType value) {
  
  data_type_ = value;
}
inline void AckGmGetPlayerData::set_data_type(::KWMsg::EGmGetPlayerDataType value) {
  _internal_set_data_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.data_type)
}

// .KWMsg.EAckGmGetPlayerDataRetType ret_type = 5;
inline void AckGmGetPlayerData::clear_ret_type() {
  ret_type_ = 0;
}
inline ::KWMsg::EAckGmGetPlayerDataRetType AckGmGetPlayerData::_internal_ret_type() const {
  return static_cast< ::KWMsg::EAckGmGetPlayerDataRetType >(ret_type_);
}
inline ::KWMsg::EAckGmGetPlayerDataRetType AckGmGetPlayerData::ret_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGmGetPlayerData.ret_type)
  return _internal_ret_type();
}
inline void AckGmGetPlayerData::_internal_set_ret_type(::KWMsg::EAckGmGetPlayerDataRetType value) {
  
  ret_type_ = value;
}
inline void AckGmGetPlayerData::set_ret_type(::KWMsg::EAckGmGetPlayerDataRetType value) {
  _internal_set_ret_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.ret_type)
}

// repeated bytes data_names = 6;
inline int AckGmGetPlayerData::_internal_data_names_size() const {
  return data_names_.size();
}
inline int AckGmGetPlayerData::data_names_size() const {
  return _internal_data_names_size();
}
inline void AckGmGetPlayerData::clear_data_names() {
  data_names_.Clear();
}
inline std::string* AckGmGetPlayerData::add_data_names() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.AckGmGetPlayerData.data_names)
  return _internal_add_data_names();
}
inline const std::string& AckGmGetPlayerData::_internal_data_names(int index) const {
  return data_names_.Get(index);
}
inline const std::string& AckGmGetPlayerData::data_names(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGmGetPlayerData.data_names)
  return _internal_data_names(index);
}
inline std::string* AckGmGetPlayerData::mutable_data_names(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGmGetPlayerData.data_names)
  return data_names_.Mutable(index);
}
inline void AckGmGetPlayerData::set_data_names(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.data_names)
  data_names_.Mutable(index)->assign(value);
}
inline void AckGmGetPlayerData::set_data_names(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.data_names)
  data_names_.Mutable(index)->assign(std::move(value));
}
inline void AckGmGetPlayerData::set_data_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.AckGmGetPlayerData.data_names)
}
inline void AckGmGetPlayerData::set_data_names(int index, const void* value, size_t size) {
  data_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.AckGmGetPlayerData.data_names)
}
inline std::string* AckGmGetPlayerData::_internal_add_data_names() {
  return data_names_.Add();
}
inline void AckGmGetPlayerData::add_data_names(const std::string& value) {
  data_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.AckGmGetPlayerData.data_names)
}
inline void AckGmGetPlayerData::add_data_names(std::string&& value) {
  data_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.AckGmGetPlayerData.data_names)
}
inline void AckGmGetPlayerData::add_data_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.AckGmGetPlayerData.data_names)
}
inline void AckGmGetPlayerData::add_data_names(const void* value, size_t size) {
  data_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.AckGmGetPlayerData.data_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AckGmGetPlayerData::data_names() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckGmGetPlayerData.data_names)
  return data_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AckGmGetPlayerData::mutable_data_names() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckGmGetPlayerData.data_names)
  return &data_names_;
}

// repeated bytes data_values = 7;
inline int AckGmGetPlayerData::_internal_data_values_size() const {
  return data_values_.size();
}
inline int AckGmGetPlayerData::data_values_size() const {
  return _internal_data_values_size();
}
inline void AckGmGetPlayerData::clear_data_values() {
  data_values_.Clear();
}
inline std::string* AckGmGetPlayerData::add_data_values() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.AckGmGetPlayerData.data_values)
  return _internal_add_data_values();
}
inline const std::string& AckGmGetPlayerData::_internal_data_values(int index) const {
  return data_values_.Get(index);
}
inline const std::string& AckGmGetPlayerData::data_values(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGmGetPlayerData.data_values)
  return _internal_data_values(index);
}
inline std::string* AckGmGetPlayerData::mutable_data_values(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGmGetPlayerData.data_values)
  return data_values_.Mutable(index);
}
inline void AckGmGetPlayerData::set_data_values(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.data_values)
  data_values_.Mutable(index)->assign(value);
}
inline void AckGmGetPlayerData::set_data_values(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.AckGmGetPlayerData.data_values)
  data_values_.Mutable(index)->assign(std::move(value));
}
inline void AckGmGetPlayerData::set_data_values(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_values_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.AckGmGetPlayerData.data_values)
}
inline void AckGmGetPlayerData::set_data_values(int index, const void* value, size_t size) {
  data_values_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.AckGmGetPlayerData.data_values)
}
inline std::string* AckGmGetPlayerData::_internal_add_data_values() {
  return data_values_.Add();
}
inline void AckGmGetPlayerData::add_data_values(const std::string& value) {
  data_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.AckGmGetPlayerData.data_values)
}
inline void AckGmGetPlayerData::add_data_values(std::string&& value) {
  data_values_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.AckGmGetPlayerData.data_values)
}
inline void AckGmGetPlayerData::add_data_values(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  data_values_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.AckGmGetPlayerData.data_values)
}
inline void AckGmGetPlayerData::add_data_values(const void* value, size_t size) {
  data_values_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.AckGmGetPlayerData.data_values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AckGmGetPlayerData::data_values() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckGmGetPlayerData.data_values)
  return data_values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AckGmGetPlayerData::mutable_data_values() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckGmGetPlayerData.data_values)
  return &data_values_;
}

// -------------------------------------------------------------------

// ReqGmSetProperty

// bytes player_id = 1;
inline void ReqGmSetProperty::clear_player_id() {
  player_id_.ClearToEmpty();
}
inline const std::string& ReqGmSetProperty::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmSetProperty.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmSetProperty::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 player_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmSetProperty.player_id)
}
inline std::string* ReqGmSetProperty::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmSetProperty.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& ReqGmSetProperty::_internal_player_id() const {
  return player_id_.Get();
}
inline void ReqGmSetProperty::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmSetProperty::_internal_mutable_player_id() {
  
  return player_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmSetProperty::release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmSetProperty.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmSetProperty::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmSetProperty.player_id)
}

// bytes property_name = 2;
inline void ReqGmSetProperty::clear_property_name() {
  property_name_.ClearToEmpty();
}
inline const std::string& ReqGmSetProperty::property_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmSetProperty.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmSetProperty::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 property_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmSetProperty.property_name)
}
inline std::string* ReqGmSetProperty::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmSetProperty.property_name)
  return _internal_mutable_property_name();
}
inline const std::string& ReqGmSetProperty::_internal_property_name() const {
  return property_name_.Get();
}
inline void ReqGmSetProperty::_internal_set_property_name(const std::string& value) {
  
  property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmSetProperty::_internal_mutable_property_name() {
  
  return property_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmSetProperty::release_property_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmSetProperty.property_name)
  return property_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmSetProperty::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  property_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmSetProperty.property_name)
}

// bytes property_value = 3;
inline void ReqGmSetProperty::clear_property_value() {
  property_value_.ClearToEmpty();
}
inline const std::string& ReqGmSetProperty::property_value() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmSetProperty.property_value)
  return _internal_property_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmSetProperty::set_property_value(ArgT0&& arg0, ArgT... args) {
 
 property_value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmSetProperty.property_value)
}
inline std::string* ReqGmSetProperty::mutable_property_value() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmSetProperty.property_value)
  return _internal_mutable_property_value();
}
inline const std::string& ReqGmSetProperty::_internal_property_value() const {
  return property_value_.Get();
}
inline void ReqGmSetProperty::_internal_set_property_value(const std::string& value) {
  
  property_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmSetProperty::_internal_mutable_property_value() {
  
  return property_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmSetProperty::release_property_value() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmSetProperty.property_value)
  return property_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmSetProperty::set_allocated_property_value(std::string* property_value) {
  if (property_value != nullptr) {
    
  } else {
    
  }
  property_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmSetProperty.property_value)
}

// -------------------------------------------------------------------

// ReqGmOpenFunction

// bytes player_id = 1;
inline void ReqGmOpenFunction::clear_player_id() {
  player_id_.ClearToEmpty();
}
inline const std::string& ReqGmOpenFunction::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmOpenFunction.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmOpenFunction::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 player_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmOpenFunction.player_id)
}
inline std::string* ReqGmOpenFunction::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmOpenFunction.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& ReqGmOpenFunction::_internal_player_id() const {
  return player_id_.Get();
}
inline void ReqGmOpenFunction::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmOpenFunction::_internal_mutable_player_id() {
  
  return player_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmOpenFunction::release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmOpenFunction.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmOpenFunction::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmOpenFunction.player_id)
}

// bytes function_id = 2;
inline void ReqGmOpenFunction::clear_function_id() {
  function_id_.ClearToEmpty();
}
inline const std::string& ReqGmOpenFunction::function_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmOpenFunction.function_id)
  return _internal_function_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmOpenFunction::set_function_id(ArgT0&& arg0, ArgT... args) {
 
 function_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmOpenFunction.function_id)
}
inline std::string* ReqGmOpenFunction::mutable_function_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmOpenFunction.function_id)
  return _internal_mutable_function_id();
}
inline const std::string& ReqGmOpenFunction::_internal_function_id() const {
  return function_id_.Get();
}
inline void ReqGmOpenFunction::_internal_set_function_id(const std::string& value) {
  
  function_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmOpenFunction::_internal_mutable_function_id() {
  
  return function_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmOpenFunction::release_function_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmOpenFunction.function_id)
  return function_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmOpenFunction::set_allocated_function_id(std::string* function_id) {
  if (function_id != nullptr) {
    
  } else {
    
  }
  function_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmOpenFunction.function_id)
}

// int32 on = 3;
inline void ReqGmOpenFunction::clear_on() {
  on_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmOpenFunction::_internal_on() const {
  return on_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmOpenFunction::on() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmOpenFunction.on)
  return _internal_on();
}
inline void ReqGmOpenFunction::_internal_set_on(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  on_ = value;
}
inline void ReqGmOpenFunction::set_on(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_on(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmOpenFunction.on)
}

// -------------------------------------------------------------------

// ReqGmAddResources_ReqGmAddResourceInfo

// bytes resource_id = 1;
inline void ReqGmAddResources_ReqGmAddResourceInfo::clear_resource_id() {
  resource_id_.ClearToEmpty();
}
inline const std::string& ReqGmAddResources_ReqGmAddResourceInfo::resource_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmAddResources.ReqGmAddResourceInfo.resource_id)
  return _internal_resource_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmAddResources_ReqGmAddResourceInfo::set_resource_id(ArgT0&& arg0, ArgT... args) {
 
 resource_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmAddResources.ReqGmAddResourceInfo.resource_id)
}
inline std::string* ReqGmAddResources_ReqGmAddResourceInfo::mutable_resource_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmAddResources.ReqGmAddResourceInfo.resource_id)
  return _internal_mutable_resource_id();
}
inline const std::string& ReqGmAddResources_ReqGmAddResourceInfo::_internal_resource_id() const {
  return resource_id_.Get();
}
inline void ReqGmAddResources_ReqGmAddResourceInfo::_internal_set_resource_id(const std::string& value) {
  
  resource_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmAddResources_ReqGmAddResourceInfo::_internal_mutable_resource_id() {
  
  return resource_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmAddResources_ReqGmAddResourceInfo::release_resource_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmAddResources.ReqGmAddResourceInfo.resource_id)
  return resource_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmAddResources_ReqGmAddResourceInfo::set_allocated_resource_id(std::string* resource_id) {
  if (resource_id != nullptr) {
    
  } else {
    
  }
  resource_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), resource_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmAddResources.ReqGmAddResourceInfo.resource_id)
}

// int64 count = 2;
inline void ReqGmAddResources_ReqGmAddResourceInfo::clear_count() {
  count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqGmAddResources_ReqGmAddResourceInfo::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqGmAddResources_ReqGmAddResourceInfo::count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmAddResources.ReqGmAddResourceInfo.count)
  return _internal_count();
}
inline void ReqGmAddResources_ReqGmAddResourceInfo::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void ReqGmAddResources_ReqGmAddResourceInfo::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmAddResources.ReqGmAddResourceInfo.count)
}

// -------------------------------------------------------------------

// ReqGmAddResources

// bytes player_id = 1;
inline void ReqGmAddResources::clear_player_id() {
  player_id_.ClearToEmpty();
}
inline const std::string& ReqGmAddResources::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmAddResources.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmAddResources::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 player_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmAddResources.player_id)
}
inline std::string* ReqGmAddResources::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmAddResources.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& ReqGmAddResources::_internal_player_id() const {
  return player_id_.Get();
}
inline void ReqGmAddResources::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmAddResources::_internal_mutable_player_id() {
  
  return player_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmAddResources::release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmAddResources.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmAddResources::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmAddResources.player_id)
}

// repeated .KWMsg.ReqGmAddResources.ReqGmAddResourceInfo resource_infos = 2;
inline int ReqGmAddResources::_internal_resource_infos_size() const {
  return resource_infos_.size();
}
inline int ReqGmAddResources::resource_infos_size() const {
  return _internal_resource_infos_size();
}
inline void ReqGmAddResources::clear_resource_infos() {
  resource_infos_.Clear();
}
inline ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo* ReqGmAddResources::mutable_resource_infos(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmAddResources.resource_infos)
  return resource_infos_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo >*
ReqGmAddResources::mutable_resource_infos() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ReqGmAddResources.resource_infos)
  return &resource_infos_;
}
inline const ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo& ReqGmAddResources::_internal_resource_infos(int index) const {
  return resource_infos_.Get(index);
}
inline const ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo& ReqGmAddResources::resource_infos(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmAddResources.resource_infos)
  return _internal_resource_infos(index);
}
inline ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo* ReqGmAddResources::_internal_add_resource_infos() {
  return resource_infos_.Add();
}
inline ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo* ReqGmAddResources::add_resource_infos() {
  // @@protoc_insertion_point(field_add:KWMsg.ReqGmAddResources.resource_infos)
  return _internal_add_resource_infos();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ReqGmAddResources_ReqGmAddResourceInfo >&
ReqGmAddResources::resource_infos() const {
  // @@protoc_insertion_point(field_list:KWMsg.ReqGmAddResources.resource_infos)
  return resource_infos_;
}

// -------------------------------------------------------------------

// ReqGmEnterBattle

// bytes player_id = 1;
inline void ReqGmEnterBattle::clear_player_id() {
  player_id_.ClearToEmpty();
}
inline const std::string& ReqGmEnterBattle::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmEnterBattle.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmEnterBattle::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 player_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmEnterBattle.player_id)
}
inline std::string* ReqGmEnterBattle::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmEnterBattle.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& ReqGmEnterBattle::_internal_player_id() const {
  return player_id_.Get();
}
inline void ReqGmEnterBattle::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmEnterBattle::_internal_mutable_player_id() {
  
  return player_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmEnterBattle::release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmEnterBattle.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmEnterBattle::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmEnterBattle.player_id)
}

// bytes game_play_id = 2;
inline void ReqGmEnterBattle::clear_game_play_id() {
  game_play_id_.ClearToEmpty();
}
inline const std::string& ReqGmEnterBattle::game_play_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmEnterBattle.game_play_id)
  return _internal_game_play_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmEnterBattle::set_game_play_id(ArgT0&& arg0, ArgT... args) {
 
 game_play_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmEnterBattle.game_play_id)
}
inline std::string* ReqGmEnterBattle::mutable_game_play_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmEnterBattle.game_play_id)
  return _internal_mutable_game_play_id();
}
inline const std::string& ReqGmEnterBattle::_internal_game_play_id() const {
  return game_play_id_.Get();
}
inline void ReqGmEnterBattle::_internal_set_game_play_id(const std::string& value) {
  
  game_play_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmEnterBattle::_internal_mutable_game_play_id() {
  
  return game_play_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmEnterBattle::release_game_play_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmEnterBattle.game_play_id)
  return game_play_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmEnterBattle::set_allocated_game_play_id(std::string* game_play_id) {
  if (game_play_id != nullptr) {
    
  } else {
    
  }
  game_play_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_play_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmEnterBattle.game_play_id)
}

// bytes team_id = 3;
inline void ReqGmEnterBattle::clear_team_id() {
  team_id_.ClearToEmpty();
}
inline const std::string& ReqGmEnterBattle::team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmEnterBattle.team_id)
  return _internal_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmEnterBattle::set_team_id(ArgT0&& arg0, ArgT... args) {
 
 team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmEnterBattle.team_id)
}
inline std::string* ReqGmEnterBattle::mutable_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmEnterBattle.team_id)
  return _internal_mutable_team_id();
}
inline const std::string& ReqGmEnterBattle::_internal_team_id() const {
  return team_id_.Get();
}
inline void ReqGmEnterBattle::_internal_set_team_id(const std::string& value) {
  
  team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmEnterBattle::_internal_mutable_team_id() {
  
  return team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmEnterBattle::release_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmEnterBattle.team_id)
  return team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmEnterBattle::set_allocated_team_id(std::string* team_id) {
  if (team_id != nullptr) {
    
  } else {
    
  }
  team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmEnterBattle.team_id)
}

// -------------------------------------------------------------------

// ReqGmEndBattle

// bytes player_id = 1;
inline void ReqGmEndBattle::clear_player_id() {
  player_id_.ClearToEmpty();
}
inline const std::string& ReqGmEndBattle::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmEndBattle.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmEndBattle::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 player_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmEndBattle.player_id)
}
inline std::string* ReqGmEndBattle::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmEndBattle.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& ReqGmEndBattle::_internal_player_id() const {
  return player_id_.Get();
}
inline void ReqGmEndBattle::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmEndBattle::_internal_mutable_player_id() {
  
  return player_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmEndBattle::release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmEndBattle.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmEndBattle::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmEndBattle.player_id)
}

// int32 victory = 2;
inline void ReqGmEndBattle::clear_victory() {
  victory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmEndBattle::_internal_victory() const {
  return victory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmEndBattle::victory() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmEndBattle.victory)
  return _internal_victory();
}
inline void ReqGmEndBattle::_internal_set_victory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  victory_ = value;
}
inline void ReqGmEndBattle::set_victory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_victory(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmEndBattle.victory)
}

// -------------------------------------------------------------------

// ReqGmChatMuzzle

// bytes player_id = 1;
inline void ReqGmChatMuzzle::clear_player_id() {
  player_id_.ClearToEmpty();
}
inline const std::string& ReqGmChatMuzzle::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmChatMuzzle.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmChatMuzzle::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 player_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmChatMuzzle.player_id)
}
inline std::string* ReqGmChatMuzzle::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmChatMuzzle.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& ReqGmChatMuzzle::_internal_player_id() const {
  return player_id_.Get();
}
inline void ReqGmChatMuzzle::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmChatMuzzle::_internal_mutable_player_id() {
  
  return player_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmChatMuzzle::release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmChatMuzzle.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmChatMuzzle::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmChatMuzzle.player_id)
}

// int32 muzzle_time = 2;
inline void ReqGmChatMuzzle::clear_muzzle_time() {
  muzzle_time_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmChatMuzzle::_internal_muzzle_time() const {
  return muzzle_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmChatMuzzle::muzzle_time() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmChatMuzzle.muzzle_time)
  return _internal_muzzle_time();
}
inline void ReqGmChatMuzzle::_internal_set_muzzle_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  muzzle_time_ = value;
}
inline void ReqGmChatMuzzle::set_muzzle_time(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_muzzle_time(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmChatMuzzle.muzzle_time)
}

// -------------------------------------------------------------------

// ReqGmSetGuideGroup

// bytes player_id = 1;
inline void ReqGmSetGuideGroup::clear_player_id() {
  player_id_.ClearToEmpty();
}
inline const std::string& ReqGmSetGuideGroup::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmSetGuideGroup.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmSetGuideGroup::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 player_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmSetGuideGroup.player_id)
}
inline std::string* ReqGmSetGuideGroup::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmSetGuideGroup.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& ReqGmSetGuideGroup::_internal_player_id() const {
  return player_id_.Get();
}
inline void ReqGmSetGuideGroup::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmSetGuideGroup::_internal_mutable_player_id() {
  
  return player_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmSetGuideGroup::release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmSetGuideGroup.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmSetGuideGroup::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmSetGuideGroup.player_id)
}

// bytes guide_group_ids = 2;
inline void ReqGmSetGuideGroup::clear_guide_group_ids() {
  guide_group_ids_.ClearToEmpty();
}
inline const std::string& ReqGmSetGuideGroup::guide_group_ids() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmSetGuideGroup.guide_group_ids)
  return _internal_guide_group_ids();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmSetGuideGroup::set_guide_group_ids(ArgT0&& arg0, ArgT... args) {
 
 guide_group_ids_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmSetGuideGroup.guide_group_ids)
}
inline std::string* ReqGmSetGuideGroup::mutable_guide_group_ids() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmSetGuideGroup.guide_group_ids)
  return _internal_mutable_guide_group_ids();
}
inline const std::string& ReqGmSetGuideGroup::_internal_guide_group_ids() const {
  return guide_group_ids_.Get();
}
inline void ReqGmSetGuideGroup::_internal_set_guide_group_ids(const std::string& value) {
  
  guide_group_ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmSetGuideGroup::_internal_mutable_guide_group_ids() {
  
  return guide_group_ids_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmSetGuideGroup::release_guide_group_ids() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmSetGuideGroup.guide_group_ids)
  return guide_group_ids_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmSetGuideGroup::set_allocated_guide_group_ids(std::string* guide_group_ids) {
  if (guide_group_ids != nullptr) {
    
  } else {
    
  }
  guide_group_ids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guide_group_ids,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmSetGuideGroup.guide_group_ids)
}

// int32 guide_state = 3;
inline void ReqGmSetGuideGroup::clear_guide_state() {
  guide_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmSetGuideGroup::_internal_guide_state() const {
  return guide_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmSetGuideGroup::guide_state() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmSetGuideGroup.guide_state)
  return _internal_guide_state();
}
inline void ReqGmSetGuideGroup::_internal_set_guide_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  guide_state_ = value;
}
inline void ReqGmSetGuideGroup::set_guide_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_guide_state(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmSetGuideGroup.guide_state)
}

// -------------------------------------------------------------------

// ReqGmSendNotificationEvent

// int32 event_type = 1;
inline void ReqGmSendNotificationEvent::clear_event_type() {
  event_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmSendNotificationEvent::_internal_event_type() const {
  return event_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmSendNotificationEvent::event_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmSendNotificationEvent.event_type)
  return _internal_event_type();
}
inline void ReqGmSendNotificationEvent::_internal_set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  event_type_ = value;
}
inline void ReqGmSendNotificationEvent::set_event_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmSendNotificationEvent.event_type)
}

// -------------------------------------------------------------------

// ReqGmTriggerEvent

// bytes player_id = 1;
inline void ReqGmTriggerEvent::clear_player_id() {
  player_id_.ClearToEmpty();
}
inline const std::string& ReqGmTriggerEvent::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmTriggerEvent.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmTriggerEvent::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 player_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmTriggerEvent.player_id)
}
inline std::string* ReqGmTriggerEvent::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmTriggerEvent.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& ReqGmTriggerEvent::_internal_player_id() const {
  return player_id_.Get();
}
inline void ReqGmTriggerEvent::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmTriggerEvent::_internal_mutable_player_id() {
  
  return player_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmTriggerEvent::release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmTriggerEvent.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmTriggerEvent::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmTriggerEvent.player_id)
}

// int32 event_id = 2;
inline void ReqGmTriggerEvent::clear_event_id() {
  event_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmTriggerEvent::_internal_event_id() const {
  return event_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmTriggerEvent::event_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmTriggerEvent.event_id)
  return _internal_event_id();
}
inline void ReqGmTriggerEvent::_internal_set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  event_id_ = value;
}
inline void ReqGmTriggerEvent::set_event_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_event_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmTriggerEvent.event_id)
}

// bytes params = 3;
inline void ReqGmTriggerEvent::clear_params() {
  params_.ClearToEmpty();
}
inline const std::string& ReqGmTriggerEvent::params() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmTriggerEvent.params)
  return _internal_params();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmTriggerEvent::set_params(ArgT0&& arg0, ArgT... args) {
 
 params_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmTriggerEvent.params)
}
inline std::string* ReqGmTriggerEvent::mutable_params() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmTriggerEvent.params)
  return _internal_mutable_params();
}
inline const std::string& ReqGmTriggerEvent::_internal_params() const {
  return params_.Get();
}
inline void ReqGmTriggerEvent::_internal_set_params(const std::string& value) {
  
  params_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmTriggerEvent::_internal_mutable_params() {
  
  return params_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmTriggerEvent::release_params() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmTriggerEvent.params)
  return params_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmTriggerEvent::set_allocated_params(std::string* params) {
  if (params != nullptr) {
    
  } else {
    
  }
  params_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), params,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmTriggerEvent.params)
}

// -------------------------------------------------------------------

// ReqGmSetRecord

// bytes player_id = 1;
inline void ReqGmSetRecord::clear_player_id() {
  player_id_.ClearToEmpty();
}
inline const std::string& ReqGmSetRecord::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmSetRecord.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmSetRecord::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 player_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmSetRecord.player_id)
}
inline std::string* ReqGmSetRecord::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmSetRecord.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& ReqGmSetRecord::_internal_player_id() const {
  return player_id_.Get();
}
inline void ReqGmSetRecord::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmSetRecord::_internal_mutable_player_id() {
  
  return player_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmSetRecord::release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmSetRecord.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmSetRecord::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmSetRecord.player_id)
}

// int32 opt_type = 2;
inline void ReqGmSetRecord::clear_opt_type() {
  opt_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmSetRecord::_internal_opt_type() const {
  return opt_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmSetRecord::opt_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmSetRecord.opt_type)
  return _internal_opt_type();
}
inline void ReqGmSetRecord::_internal_set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opt_type_ = value;
}
inline void ReqGmSetRecord::set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opt_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmSetRecord.opt_type)
}

// bytes record_name = 3;
inline void ReqGmSetRecord::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ReqGmSetRecord::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmSetRecord.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmSetRecord::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmSetRecord.record_name)
}
inline std::string* ReqGmSetRecord::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmSetRecord.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& ReqGmSetRecord::_internal_record_name() const {
  return record_name_.Get();
}
inline void ReqGmSetRecord::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmSetRecord::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmSetRecord::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmSetRecord.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmSetRecord::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmSetRecord.record_name)
}

// bytes record_value = 4;
inline void ReqGmSetRecord::clear_record_value() {
  record_value_.ClearToEmpty();
}
inline const std::string& ReqGmSetRecord::record_value() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmSetRecord.record_value)
  return _internal_record_value();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmSetRecord::set_record_value(ArgT0&& arg0, ArgT... args) {
 
 record_value_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmSetRecord.record_value)
}
inline std::string* ReqGmSetRecord::mutable_record_value() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmSetRecord.record_value)
  return _internal_mutable_record_value();
}
inline const std::string& ReqGmSetRecord::_internal_record_value() const {
  return record_value_.Get();
}
inline void ReqGmSetRecord::_internal_set_record_value(const std::string& value) {
  
  record_value_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmSetRecord::_internal_mutable_record_value() {
  
  return record_value_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmSetRecord::release_record_value() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmSetRecord.record_value)
  return record_value_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmSetRecord::set_allocated_record_value(std::string* record_value) {
  if (record_value != nullptr) {
    
  } else {
    
  }
  record_value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_value,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmSetRecord.record_value)
}

// int32 record_row = 5;
inline void ReqGmSetRecord::clear_record_row() {
  record_row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmSetRecord::_internal_record_row() const {
  return record_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmSetRecord::record_row() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmSetRecord.record_row)
  return _internal_record_row();
}
inline void ReqGmSetRecord::_internal_set_record_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  record_row_ = value;
}
inline void ReqGmSetRecord::set_record_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_record_row(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmSetRecord.record_row)
}

// int32 record_col = 6;
inline void ReqGmSetRecord::clear_record_col() {
  record_col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmSetRecord::_internal_record_col() const {
  return record_col_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGmSetRecord::record_col() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmSetRecord.record_col)
  return _internal_record_col();
}
inline void ReqGmSetRecord::_internal_set_record_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  record_col_ = value;
}
inline void ReqGmSetRecord::set_record_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_record_col(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmSetRecord.record_col)
}

// -------------------------------------------------------------------

// ReqGmCmdDebugAccount

// bytes player_id = 1;
inline void ReqGmCmdDebugAccount::clear_player_id() {
  player_id_.ClearToEmpty();
}
inline const std::string& ReqGmCmdDebugAccount::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGmCmdDebugAccount.player_id)
  return _internal_player_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGmCmdDebugAccount::set_player_id(ArgT0&& arg0, ArgT... args) {
 
 player_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGmCmdDebugAccount.player_id)
}
inline std::string* ReqGmCmdDebugAccount::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGmCmdDebugAccount.player_id)
  return _internal_mutable_player_id();
}
inline const std::string& ReqGmCmdDebugAccount::_internal_player_id() const {
  return player_id_.Get();
}
inline void ReqGmCmdDebugAccount::_internal_set_player_id(const std::string& value) {
  
  player_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGmCmdDebugAccount::_internal_mutable_player_id() {
  
  return player_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGmCmdDebugAccount::release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGmCmdDebugAccount.player_id)
  return player_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGmCmdDebugAccount::set_allocated_player_id(std::string* player_id) {
  if (player_id != nullptr) {
    
  } else {
    
  }
  player_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), player_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGmCmdDebugAccount.player_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KWMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KWMsg::EGmGetPlayerDataType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EGmGetPlayerDataType>() {
  return ::KWMsg::EGmGetPlayerDataType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::EGmGetPlayerDataIDType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EGmGetPlayerDataIDType>() {
  return ::KWMsg::EGmGetPlayerDataIDType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::EAckGmGetPlayerDataRetType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::EAckGmGetPlayerDataRetType>() {
  return ::KWMsg::EAckGmGetPlayerDataRetType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kwmsgcmd_2eproto
