// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kwmsgbattle.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kwmsgbattle_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kwmsgbattle_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "kwmsgbase.pb.h"
#include "kwmsgdefine.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kwmsgbattle_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kwmsgbattle_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[47]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kwmsgbattle_2eproto;
namespace KWMsg {
class AckBTLAction;
struct AckBTLActionDefaultTypeInternal;
extern AckBTLActionDefaultTypeInternal _AckBTLAction_default_instance_;
class AckBTLEndInfo;
struct AckBTLEndInfoDefaultTypeInternal;
extern AckBTLEndInfoDefaultTypeInternal _AckBTLEndInfo_default_instance_;
class AckBTLInfo;
struct AckBTLInfoDefaultTypeInternal;
extern AckBTLInfoDefaultTypeInternal _AckBTLInfo_default_instance_;
class AckBTLPk;
struct AckBTLPkDefaultTypeInternal;
extern AckBTLPkDefaultTypeInternal _AckBTLPk_default_instance_;
class AckBTLPullMsg;
struct AckBTLPullMsgDefaultTypeInternal;
extern AckBTLPullMsgDefaultTypeInternal _AckBTLPullMsg_default_instance_;
class AckBTLPullMsg_BTLAckMsgWrapper;
struct AckBTLPullMsg_BTLAckMsgWrapperDefaultTypeInternal;
extern AckBTLPullMsg_BTLAckMsgWrapperDefaultTypeInternal _AckBTLPullMsg_BTLAckMsgWrapper_default_instance_;
class AckBTLResult;
struct AckBTLResultDefaultTypeInternal;
extern AckBTLResultDefaultTypeInternal _AckBTLResult_default_instance_;
class AckBTLSetPrioTarget;
struct AckBTLSetPrioTargetDefaultTypeInternal;
extern AckBTLSetPrioTargetDefaultTypeInternal _AckBTLSetPrioTarget_default_instance_;
class AckBTLToggleAutoMode;
struct AckBTLToggleAutoModeDefaultTypeInternal;
extern AckBTLToggleAutoModeDefaultTypeInternal _AckBTLToggleAutoMode_default_instance_;
class AckBTLUpdateEntityAutoMode;
struct AckBTLUpdateEntityAutoModeDefaultTypeInternal;
extern AckBTLUpdateEntityAutoModeDefaultTypeInternal _AckBTLUpdateEntityAutoMode_default_instance_;
class BTLAction;
struct BTLActionDefaultTypeInternal;
extern BTLActionDefaultTypeInternal _BTLAction_default_instance_;
class BTLActionQueue;
struct BTLActionQueueDefaultTypeInternal;
extern BTLActionQueueDefaultTypeInternal _BTLActionQueue_default_instance_;
class BTLActionQueueElement;
struct BTLActionQueueElementDefaultTypeInternal;
extern BTLActionQueueElementDefaultTypeInternal _BTLActionQueueElement_default_instance_;
class BTLAddBuffInfo;
struct BTLAddBuffInfoDefaultTypeInternal;
extern BTLAddBuffInfoDefaultTypeInternal _BTLAddBuffInfo_default_instance_;
class BTLBuffInfo;
struct BTLBuffInfoDefaultTypeInternal;
extern BTLBuffInfoDefaultTypeInternal _BTLBuffInfo_default_instance_;
class BTLChangedEntity;
struct BTLChangedEntityDefaultTypeInternal;
extern BTLChangedEntityDefaultTypeInternal _BTLChangedEntity_default_instance_;
class BTLDamageInfo;
struct BTLDamageInfoDefaultTypeInternal;
extern BTLDamageInfoDefaultTypeInternal _BTLDamageInfo_default_instance_;
class BTLEffect;
struct BTLEffectDefaultTypeInternal;
extern BTLEffectDefaultTypeInternal _BTLEffect_default_instance_;
class BTLEnergyInfo;
struct BTLEnergyInfoDefaultTypeInternal;
extern BTLEnergyInfoDefaultTypeInternal _BTLEnergyInfo_default_instance_;
class BTLEntity;
struct BTLEntityDefaultTypeInternal;
extern BTLEntityDefaultTypeInternal _BTLEntity_default_instance_;
class BTLEntityAutoMode;
struct BTLEntityAutoModeDefaultTypeInternal;
extern BTLEntityAutoModeDefaultTypeInternal _BTLEntityAutoMode_default_instance_;
class BTLEntitySkillState;
struct BTLEntitySkillStateDefaultTypeInternal;
extern BTLEntitySkillStateDefaultTypeInternal _BTLEntitySkillState_default_instance_;
class BTLEntityStateInTurn;
struct BTLEntityStateInTurnDefaultTypeInternal;
extern BTLEntityStateInTurnDefaultTypeInternal _BTLEntityStateInTurn_default_instance_;
class BTLHealInfo;
struct BTLHealInfoDefaultTypeInternal;
extern BTLHealInfoDefaultTypeInternal _BTLHealInfo_default_instance_;
class BTLInActionDetail;
struct BTLInActionDetailDefaultTypeInternal;
extern BTLInActionDetailDefaultTypeInternal _BTLInActionDetail_default_instance_;
class BTLInActionDetail_MagicHuesEntry_DoNotUse;
struct BTLInActionDetail_MagicHuesEntry_DoNotUseDefaultTypeInternal;
extern BTLInActionDetail_MagicHuesEntry_DoNotUseDefaultTypeInternal _BTLInActionDetail_MagicHuesEntry_DoNotUse_default_instance_;
class BTLInfo;
struct BTLInfoDefaultTypeInternal;
extern BTLInfoDefaultTypeInternal _BTLInfo_default_instance_;
class BTLInfo_MagicHuesEntry_DoNotUse;
struct BTLInfo_MagicHuesEntry_DoNotUseDefaultTypeInternal;
extern BTLInfo_MagicHuesEntry_DoNotUseDefaultTypeInternal _BTLInfo_MagicHuesEntry_DoNotUse_default_instance_;
class BTLManualOperation;
struct BTLManualOperationDefaultTypeInternal;
extern BTLManualOperationDefaultTypeInternal _BTLManualOperation_default_instance_;
class BTLOperation;
struct BTLOperationDefaultTypeInternal;
extern BTLOperationDefaultTypeInternal _BTLOperation_default_instance_;
class BTLPkElement;
struct BTLPkElementDefaultTypeInternal;
extern BTLPkElementDefaultTypeInternal _BTLPkElement_default_instance_;
class BTLPkInfo;
struct BTLPkInfoDefaultTypeInternal;
extern BTLPkInfoDefaultTypeInternal _BTLPkInfo_default_instance_;
class BTLPostPreActionDetail;
struct BTLPostPreActionDetailDefaultTypeInternal;
extern BTLPostPreActionDetailDefaultTypeInternal _BTLPostPreActionDetail_default_instance_;
class BTLRemoveBuffInfo;
struct BTLRemoveBuffInfoDefaultTypeInternal;
extern BTLRemoveBuffInfoDefaultTypeInternal _BTLRemoveBuffInfo_default_instance_;
class BTLResult;
struct BTLResultDefaultTypeInternal;
extern BTLResultDefaultTypeInternal _BTLResult_default_instance_;
class BTLRewardInfo;
struct BTLRewardInfoDefaultTypeInternal;
extern BTLRewardInfoDefaultTypeInternal _BTLRewardInfo_default_instance_;
class BTLSealChangeInfo;
struct BTLSealChangeInfoDefaultTypeInternal;
extern BTLSealChangeInfoDefaultTypeInternal _BTLSealChangeInfo_default_instance_;
class BTLSettings;
struct BTLSettingsDefaultTypeInternal;
extern BTLSettingsDefaultTypeInternal _BTLSettings_default_instance_;
class BTLShieldChangeInfo;
struct BTLShieldChangeInfoDefaultTypeInternal;
extern BTLShieldChangeInfoDefaultTypeInternal _BTLShieldChangeInfo_default_instance_;
class BTLStartDetail;
struct BTLStartDetailDefaultTypeInternal;
extern BTLStartDetailDefaultTypeInternal _BTLStartDetail_default_instance_;
class BTLStateChangeInfo;
struct BTLStateChangeInfoDefaultTypeInternal;
extern BTLStateChangeInfoDefaultTypeInternal _BTLStateChangeInfo_default_instance_;
class BTLSummonInfo;
struct BTLSummonInfoDefaultTypeInternal;
extern BTLSummonInfoDefaultTypeInternal _BTLSummonInfo_default_instance_;
class ReqBTLAction;
struct ReqBTLActionDefaultTypeInternal;
extern ReqBTLActionDefaultTypeInternal _ReqBTLAction_default_instance_;
class ReqBTLPullMsg;
struct ReqBTLPullMsgDefaultTypeInternal;
extern ReqBTLPullMsgDefaultTypeInternal _ReqBTLPullMsg_default_instance_;
class ReqBTLSetPrioTarget;
struct ReqBTLSetPrioTargetDefaultTypeInternal;
extern ReqBTLSetPrioTargetDefaultTypeInternal _ReqBTLSetPrioTarget_default_instance_;
class ReqBTLToggleAutoMode;
struct ReqBTLToggleAutoModeDefaultTypeInternal;
extern ReqBTLToggleAutoModeDefaultTypeInternal _ReqBTLToggleAutoMode_default_instance_;
class ReqBTLUpdateEntityAutoMode;
struct ReqBTLUpdateEntityAutoModeDefaultTypeInternal;
extern ReqBTLUpdateEntityAutoModeDefaultTypeInternal _ReqBTLUpdateEntityAutoMode_default_instance_;
}  // namespace KWMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::KWMsg::AckBTLAction* Arena::CreateMaybeMessage<::KWMsg::AckBTLAction>(Arena*);
template<> ::KWMsg::AckBTLEndInfo* Arena::CreateMaybeMessage<::KWMsg::AckBTLEndInfo>(Arena*);
template<> ::KWMsg::AckBTLInfo* Arena::CreateMaybeMessage<::KWMsg::AckBTLInfo>(Arena*);
template<> ::KWMsg::AckBTLPk* Arena::CreateMaybeMessage<::KWMsg::AckBTLPk>(Arena*);
template<> ::KWMsg::AckBTLPullMsg* Arena::CreateMaybeMessage<::KWMsg::AckBTLPullMsg>(Arena*);
template<> ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper* Arena::CreateMaybeMessage<::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper>(Arena*);
template<> ::KWMsg::AckBTLResult* Arena::CreateMaybeMessage<::KWMsg::AckBTLResult>(Arena*);
template<> ::KWMsg::AckBTLSetPrioTarget* Arena::CreateMaybeMessage<::KWMsg::AckBTLSetPrioTarget>(Arena*);
template<> ::KWMsg::AckBTLToggleAutoMode* Arena::CreateMaybeMessage<::KWMsg::AckBTLToggleAutoMode>(Arena*);
template<> ::KWMsg::AckBTLUpdateEntityAutoMode* Arena::CreateMaybeMessage<::KWMsg::AckBTLUpdateEntityAutoMode>(Arena*);
template<> ::KWMsg::BTLAction* Arena::CreateMaybeMessage<::KWMsg::BTLAction>(Arena*);
template<> ::KWMsg::BTLActionQueue* Arena::CreateMaybeMessage<::KWMsg::BTLActionQueue>(Arena*);
template<> ::KWMsg::BTLActionQueueElement* Arena::CreateMaybeMessage<::KWMsg::BTLActionQueueElement>(Arena*);
template<> ::KWMsg::BTLAddBuffInfo* Arena::CreateMaybeMessage<::KWMsg::BTLAddBuffInfo>(Arena*);
template<> ::KWMsg::BTLBuffInfo* Arena::CreateMaybeMessage<::KWMsg::BTLBuffInfo>(Arena*);
template<> ::KWMsg::BTLChangedEntity* Arena::CreateMaybeMessage<::KWMsg::BTLChangedEntity>(Arena*);
template<> ::KWMsg::BTLDamageInfo* Arena::CreateMaybeMessage<::KWMsg::BTLDamageInfo>(Arena*);
template<> ::KWMsg::BTLEffect* Arena::CreateMaybeMessage<::KWMsg::BTLEffect>(Arena*);
template<> ::KWMsg::BTLEnergyInfo* Arena::CreateMaybeMessage<::KWMsg::BTLEnergyInfo>(Arena*);
template<> ::KWMsg::BTLEntity* Arena::CreateMaybeMessage<::KWMsg::BTLEntity>(Arena*);
template<> ::KWMsg::BTLEntityAutoMode* Arena::CreateMaybeMessage<::KWMsg::BTLEntityAutoMode>(Arena*);
template<> ::KWMsg::BTLEntitySkillState* Arena::CreateMaybeMessage<::KWMsg::BTLEntitySkillState>(Arena*);
template<> ::KWMsg::BTLEntityStateInTurn* Arena::CreateMaybeMessage<::KWMsg::BTLEntityStateInTurn>(Arena*);
template<> ::KWMsg::BTLHealInfo* Arena::CreateMaybeMessage<::KWMsg::BTLHealInfo>(Arena*);
template<> ::KWMsg::BTLInActionDetail* Arena::CreateMaybeMessage<::KWMsg::BTLInActionDetail>(Arena*);
template<> ::KWMsg::BTLInActionDetail_MagicHuesEntry_DoNotUse* Arena::CreateMaybeMessage<::KWMsg::BTLInActionDetail_MagicHuesEntry_DoNotUse>(Arena*);
template<> ::KWMsg::BTLInfo* Arena::CreateMaybeMessage<::KWMsg::BTLInfo>(Arena*);
template<> ::KWMsg::BTLInfo_MagicHuesEntry_DoNotUse* Arena::CreateMaybeMessage<::KWMsg::BTLInfo_MagicHuesEntry_DoNotUse>(Arena*);
template<> ::KWMsg::BTLManualOperation* Arena::CreateMaybeMessage<::KWMsg::BTLManualOperation>(Arena*);
template<> ::KWMsg::BTLOperation* Arena::CreateMaybeMessage<::KWMsg::BTLOperation>(Arena*);
template<> ::KWMsg::BTLPkElement* Arena::CreateMaybeMessage<::KWMsg::BTLPkElement>(Arena*);
template<> ::KWMsg::BTLPkInfo* Arena::CreateMaybeMessage<::KWMsg::BTLPkInfo>(Arena*);
template<> ::KWMsg::BTLPostPreActionDetail* Arena::CreateMaybeMessage<::KWMsg::BTLPostPreActionDetail>(Arena*);
template<> ::KWMsg::BTLRemoveBuffInfo* Arena::CreateMaybeMessage<::KWMsg::BTLRemoveBuffInfo>(Arena*);
template<> ::KWMsg::BTLResult* Arena::CreateMaybeMessage<::KWMsg::BTLResult>(Arena*);
template<> ::KWMsg::BTLRewardInfo* Arena::CreateMaybeMessage<::KWMsg::BTLRewardInfo>(Arena*);
template<> ::KWMsg::BTLSealChangeInfo* Arena::CreateMaybeMessage<::KWMsg::BTLSealChangeInfo>(Arena*);
template<> ::KWMsg::BTLSettings* Arena::CreateMaybeMessage<::KWMsg::BTLSettings>(Arena*);
template<> ::KWMsg::BTLShieldChangeInfo* Arena::CreateMaybeMessage<::KWMsg::BTLShieldChangeInfo>(Arena*);
template<> ::KWMsg::BTLStartDetail* Arena::CreateMaybeMessage<::KWMsg::BTLStartDetail>(Arena*);
template<> ::KWMsg::BTLStateChangeInfo* Arena::CreateMaybeMessage<::KWMsg::BTLStateChangeInfo>(Arena*);
template<> ::KWMsg::BTLSummonInfo* Arena::CreateMaybeMessage<::KWMsg::BTLSummonInfo>(Arena*);
template<> ::KWMsg::ReqBTLAction* Arena::CreateMaybeMessage<::KWMsg::ReqBTLAction>(Arena*);
template<> ::KWMsg::ReqBTLPullMsg* Arena::CreateMaybeMessage<::KWMsg::ReqBTLPullMsg>(Arena*);
template<> ::KWMsg::ReqBTLSetPrioTarget* Arena::CreateMaybeMessage<::KWMsg::ReqBTLSetPrioTarget>(Arena*);
template<> ::KWMsg::ReqBTLToggleAutoMode* Arena::CreateMaybeMessage<::KWMsg::ReqBTLToggleAutoMode>(Arena*);
template<> ::KWMsg::ReqBTLUpdateEntityAutoMode* Arena::CreateMaybeMessage<::KWMsg::ReqBTLUpdateEntityAutoMode>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace KWMsg {

enum BTLStage : int {
  BS_NONE = 0,
  BS_START = 1,
  BS_ROLE_PRE_ACTION = 2,
  BS_ROLE_IN_ACTION = 3,
  BTLStage_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BTLStage_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BTLStage_IsValid(int value);
constexpr BTLStage BTLStage_MIN = BS_NONE;
constexpr BTLStage BTLStage_MAX = BS_ROLE_IN_ACTION;
constexpr int BTLStage_ARRAYSIZE = BTLStage_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BTLStage_descriptor();
template<typename T>
inline const std::string& BTLStage_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BTLStage>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BTLStage_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BTLStage_descriptor(), enum_t_value);
}
inline bool BTLStage_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BTLStage* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BTLStage>(
    BTLStage_descriptor(), name, value);
}
enum BTLQueueState : int {
  BQS_NOT_ACTION = 0,
  BQS_HAS_ACTION = 1,
  BQS_CHARGING = 2,
  BTLQueueState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BTLQueueState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BTLQueueState_IsValid(int value);
constexpr BTLQueueState BTLQueueState_MIN = BQS_NOT_ACTION;
constexpr BTLQueueState BTLQueueState_MAX = BQS_CHARGING;
constexpr int BTLQueueState_ARRAYSIZE = BTLQueueState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BTLQueueState_descriptor();
template<typename T>
inline const std::string& BTLQueueState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BTLQueueState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BTLQueueState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BTLQueueState_descriptor(), enum_t_value);
}
inline bool BTLQueueState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BTLQueueState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BTLQueueState>(
    BTLQueueState_descriptor(), name, value);
}
enum BTLSkillState : int {
  BSS_NORMAL = 0,
  BSS_SEALED = 1,
  BSS_INSUFFICIENT_COST = 2,
  BSS_CD = 3,
  BSS_NO_CANDIDATE_TARGET = 4,
  BTLSkillState_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BTLSkillState_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BTLSkillState_IsValid(int value);
constexpr BTLSkillState BTLSkillState_MIN = BSS_NORMAL;
constexpr BTLSkillState BTLSkillState_MAX = BSS_NO_CANDIDATE_TARGET;
constexpr int BTLSkillState_ARRAYSIZE = BTLSkillState_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BTLSkillState_descriptor();
template<typename T>
inline const std::string& BTLSkillState_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BTLSkillState>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BTLSkillState_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BTLSkillState_descriptor(), enum_t_value);
}
inline bool BTLSkillState_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BTLSkillState* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BTLSkillState>(
    BTLSkillState_descriptor(), name, value);
}
enum BTLEffectFlag : int {
  BT_NONE = 0,
  BF_THUMP = 1,
  BT_CRIT = 2,
  BT_MISS = 4,
  BT_SHIELD_ABOSORB = 8,
  BT_SHIELD_BREAK = 16,
  BTLEffectFlag_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BTLEffectFlag_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BTLEffectFlag_IsValid(int value);
constexpr BTLEffectFlag BTLEffectFlag_MIN = BT_NONE;
constexpr BTLEffectFlag BTLEffectFlag_MAX = BT_SHIELD_BREAK;
constexpr int BTLEffectFlag_ARRAYSIZE = BTLEffectFlag_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BTLEffectFlag_descriptor();
template<typename T>
inline const std::string& BTLEffectFlag_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BTLEffectFlag>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BTLEffectFlag_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BTLEffectFlag_descriptor(), enum_t_value);
}
inline bool BTLEffectFlag_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BTLEffectFlag* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BTLEffectFlag>(
    BTLEffectFlag_descriptor(), name, value);
}
enum BTLAutoMode : int {
  BTAM_INTELLIGENT = 0,
  BTAM_ULTIMATE_SKILL_FIRST = 1,
  BTAM_ADVANCED_SKILL_FIRST = 2,
  BTAM_NORMAL_ATTACK_FIRST = 3,
  BTLAutoMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  BTLAutoMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool BTLAutoMode_IsValid(int value);
constexpr BTLAutoMode BTLAutoMode_MIN = BTAM_INTELLIGENT;
constexpr BTLAutoMode BTLAutoMode_MAX = BTAM_NORMAL_ATTACK_FIRST;
constexpr int BTLAutoMode_ARRAYSIZE = BTLAutoMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* BTLAutoMode_descriptor();
template<typename T>
inline const std::string& BTLAutoMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, BTLAutoMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function BTLAutoMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    BTLAutoMode_descriptor(), enum_t_value);
}
inline bool BTLAutoMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, BTLAutoMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<BTLAutoMode>(
    BTLAutoMode_descriptor(), name, value);
}
// ===================================================================

class AckBTLInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBTLInfo) */ {
 public:
  inline AckBTLInfo() : AckBTLInfo(nullptr) {}
  ~AckBTLInfo() override;
  explicit constexpr AckBTLInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBTLInfo(const AckBTLInfo& from);
  AckBTLInfo(AckBTLInfo&& from) noexcept
    : AckBTLInfo() {
    *this = ::std::move(from);
  }

  inline AckBTLInfo& operator=(const AckBTLInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBTLInfo& operator=(AckBTLInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBTLInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBTLInfo* internal_default_instance() {
    return reinterpret_cast<const AckBTLInfo*>(
               &_AckBTLInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AckBTLInfo& a, AckBTLInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBTLInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBTLInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBTLInfo* New() const final {
    return new AckBTLInfo();
  }

  AckBTLInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBTLInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBTLInfo& from);
  void MergeFrom(const AckBTLInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBTLInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBTLInfo";
  }
  protected:
  explicit AckBTLInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleInfoFieldNumber = 2,
    kUniqueIdFieldNumber = 1,
  };
  // .KWMsg.BTLInfo battle_info = 2;
  bool has_battle_info() const;
  private:
  bool _internal_has_battle_info() const;
  public:
  void clear_battle_info();
  const ::KWMsg::BTLInfo& battle_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLInfo* release_battle_info();
  ::KWMsg::BTLInfo* mutable_battle_info();
  void set_allocated_battle_info(::KWMsg::BTLInfo* battle_info);
  private:
  const ::KWMsg::BTLInfo& _internal_battle_info() const;
  ::KWMsg::BTLInfo* _internal_mutable_battle_info();
  public:
  void unsafe_arena_set_allocated_battle_info(
      ::KWMsg::BTLInfo* battle_info);
  ::KWMsg::BTLInfo* unsafe_arena_release_battle_info();

  // int32 unique_id = 1;
  void clear_unique_id();
  ::PROTOBUF_NAMESPACE_ID::int32 unique_id() const;
  void set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unique_id() const;
  void _internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBTLInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::BTLInfo* battle_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 unique_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLInfo_MagicHuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BTLInfo_MagicHuesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BTLInfo_MagicHuesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  BTLInfo_MagicHuesEntry_DoNotUse();
  explicit constexpr BTLInfo_MagicHuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit BTLInfo_MagicHuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BTLInfo_MagicHuesEntry_DoNotUse& other);
  static const BTLInfo_MagicHuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BTLInfo_MagicHuesEntry_DoNotUse*>(&_BTLInfo_MagicHuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class BTLInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLInfo) */ {
 public:
  inline BTLInfo() : BTLInfo(nullptr) {}
  ~BTLInfo() override;
  explicit constexpr BTLInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLInfo(const BTLInfo& from);
  BTLInfo(BTLInfo&& from) noexcept
    : BTLInfo() {
    *this = ::std::move(from);
  }

  inline BTLInfo& operator=(const BTLInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLInfo& operator=(BTLInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLInfo* internal_default_instance() {
    return reinterpret_cast<const BTLInfo*>(
               &_BTLInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BTLInfo& a, BTLInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLInfo* New() const final {
    return new BTLInfo();
  }

  BTLInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLInfo& from);
  void MergeFrom(const BTLInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLInfo";
  }
  protected:
  explicit BTLInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 4,
    kMagicHuesFieldNumber = 5,
    kDestroyedEntityIdsFieldNumber = 6,
    kBattleIdFieldNumber = 1,
    kBattleMidFieldNumber = 2,
    kBattleSettingsFieldNumber = 3,
  };
  // repeated .KWMsg.BTLEntity entities = 4;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::KWMsg::BTLEntity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >*
      mutable_entities();
  private:
  const ::KWMsg::BTLEntity& _internal_entities(int index) const;
  ::KWMsg::BTLEntity* _internal_add_entities();
  public:
  const ::KWMsg::BTLEntity& entities(int index) const;
  ::KWMsg::BTLEntity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >&
      entities() const;

  // map<int32, int32> magic_hues = 5;
  int magic_hues_size() const;
  private:
  int _internal_magic_hues_size() const;
  public:
  void clear_magic_hues();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_magic_hues() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_magic_hues();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      magic_hues() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_magic_hues();

  // repeated .KWMsg.Ident destroyed_entity_ids = 6;
  int destroyed_entity_ids_size() const;
  private:
  int _internal_destroyed_entity_ids_size() const;
  public:
  void clear_destroyed_entity_ids();
  ::KWMsg::Ident* mutable_destroyed_entity_ids(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
      mutable_destroyed_entity_ids();
  private:
  const ::KWMsg::Ident& _internal_destroyed_entity_ids(int index) const;
  ::KWMsg::Ident* _internal_add_destroyed_entity_ids();
  public:
  const ::KWMsg::Ident& destroyed_entity_ids(int index) const;
  ::KWMsg::Ident* add_destroyed_entity_ids();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
      destroyed_entity_ids() const;

  // bytes battle_id = 1;
  void clear_battle_id();
  const std::string& battle_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_battle_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_battle_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_battle_id();
  void set_allocated_battle_id(std::string* battle_id);
  private:
  const std::string& _internal_battle_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_battle_id(const std::string& value);
  std::string* _internal_mutable_battle_id();
  public:

  // bytes battle_mid = 2;
  void clear_battle_mid();
  const std::string& battle_mid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_battle_mid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_battle_mid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_battle_mid();
  void set_allocated_battle_mid(std::string* battle_mid);
  private:
  const std::string& _internal_battle_mid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_battle_mid(const std::string& value);
  std::string* _internal_mutable_battle_mid();
  public:

  // .KWMsg.BTLSettings battle_settings = 3;
  bool has_battle_settings() const;
  private:
  bool _internal_has_battle_settings() const;
  public:
  void clear_battle_settings();
  const ::KWMsg::BTLSettings& battle_settings() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLSettings* release_battle_settings();
  ::KWMsg::BTLSettings* mutable_battle_settings();
  void set_allocated_battle_settings(::KWMsg::BTLSettings* battle_settings);
  private:
  const ::KWMsg::BTLSettings& _internal_battle_settings() const;
  ::KWMsg::BTLSettings* _internal_mutable_battle_settings();
  public:
  void unsafe_arena_set_allocated_battle_settings(
      ::KWMsg::BTLSettings* battle_settings);
  ::KWMsg::BTLSettings* unsafe_arena_release_battle_settings();

  // @@protoc_insertion_point(class_scope:KWMsg.BTLInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity > entities_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BTLInfo_MagicHuesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> magic_hues_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident > destroyed_entity_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_mid_;
  ::KWMsg::BTLSettings* battle_settings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLSettings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLSettings) */ {
 public:
  inline BTLSettings() : BTLSettings(nullptr) {}
  ~BTLSettings() override;
  explicit constexpr BTLSettings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLSettings(const BTLSettings& from);
  BTLSettings(BTLSettings&& from) noexcept
    : BTLSettings() {
    *this = ::std::move(from);
  }

  inline BTLSettings& operator=(const BTLSettings& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLSettings& operator=(BTLSettings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLSettings& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLSettings* internal_default_instance() {
    return reinterpret_cast<const BTLSettings*>(
               &_BTLSettings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(BTLSettings& a, BTLSettings& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLSettings* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLSettings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLSettings* New() const final {
    return new BTLSettings();
  }

  BTLSettings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLSettings>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLSettings& from);
  void MergeFrom(const BTLSettings& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLSettings* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLSettings";
  }
  protected:
  explicit BTLSettings(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnableAutoStateFieldNumber = 1,
    kEnableSpeedUpFieldNumber = 2,
    kDefaultAutoStateFieldNumber = 3,
    kDefaultSpeedFieldNumber = 4,
  };
  // int32 enable_auto_state = 1;
  void clear_enable_auto_state();
  ::PROTOBUF_NAMESPACE_ID::int32 enable_auto_state() const;
  void set_enable_auto_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enable_auto_state() const;
  void _internal_set_enable_auto_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 enable_speed_up = 2;
  void clear_enable_speed_up();
  ::PROTOBUF_NAMESPACE_ID::int32 enable_speed_up() const;
  void set_enable_speed_up(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enable_speed_up() const;
  void _internal_set_enable_speed_up(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 default_auto_state = 3;
  void clear_default_auto_state();
  ::PROTOBUF_NAMESPACE_ID::int32 default_auto_state() const;
  void set_default_auto_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_default_auto_state() const;
  void _internal_set_default_auto_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 default_speed = 4;
  void clear_default_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 default_speed() const;
  void set_default_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_default_speed() const;
  void _internal_set_default_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLSettings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 enable_auto_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 enable_speed_up_;
  ::PROTOBUF_NAMESPACE_ID::int32 default_auto_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 default_speed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLEntity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLEntity) */ {
 public:
  inline BTLEntity() : BTLEntity(nullptr) {}
  ~BTLEntity() override;
  explicit constexpr BTLEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLEntity(const BTLEntity& from);
  BTLEntity(BTLEntity&& from) noexcept
    : BTLEntity() {
    *this = ::std::move(from);
  }

  inline BTLEntity& operator=(const BTLEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLEntity& operator=(BTLEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLEntity* internal_default_instance() {
    return reinterpret_cast<const BTLEntity*>(
               &_BTLEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(BTLEntity& a, BTLEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLEntity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLEntity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLEntity* New() const final {
    return new BTLEntity();
  }

  BTLEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLEntity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLEntity& from);
  void MergeFrom(const BTLEntity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLEntity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLEntity";
  }
  protected:
  explicit BTLEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kPropertyFieldNumber = 2,
    kRecordFieldNumber = 3,
  };
  // .KWMsg.Ident entity_id = 1;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const ::KWMsg::Ident& entity_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_entity_id();
  ::KWMsg::Ident* mutable_entity_id();
  void set_allocated_entity_id(::KWMsg::Ident* entity_id);
  private:
  const ::KWMsg::Ident& _internal_entity_id() const;
  ::KWMsg::Ident* _internal_mutable_entity_id();
  public:
  void unsafe_arena_set_allocated_entity_id(
      ::KWMsg::Ident* entity_id);
  ::KWMsg::Ident* unsafe_arena_release_entity_id();

  // .KWMsg.ObjectPropertyList property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const ::KWMsg::ObjectPropertyList& property() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::ObjectPropertyList* release_property();
  ::KWMsg::ObjectPropertyList* mutable_property();
  void set_allocated_property(::KWMsg::ObjectPropertyList* property);
  private:
  const ::KWMsg::ObjectPropertyList& _internal_property() const;
  ::KWMsg::ObjectPropertyList* _internal_mutable_property();
  public:
  void unsafe_arena_set_allocated_property(
      ::KWMsg::ObjectPropertyList* property);
  ::KWMsg::ObjectPropertyList* unsafe_arena_release_property();

  // .KWMsg.ObjectRecordList record = 3;
  bool has_record() const;
  private:
  bool _internal_has_record() const;
  public:
  void clear_record();
  const ::KWMsg::ObjectRecordList& record() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::ObjectRecordList* release_record();
  ::KWMsg::ObjectRecordList* mutable_record();
  void set_allocated_record(::KWMsg::ObjectRecordList* record);
  private:
  const ::KWMsg::ObjectRecordList& _internal_record() const;
  ::KWMsg::ObjectRecordList* _internal_mutable_record();
  public:
  void unsafe_arena_set_allocated_record(
      ::KWMsg::ObjectRecordList* record);
  ::KWMsg::ObjectRecordList* unsafe_arena_release_record();

  // @@protoc_insertion_point(class_scope:KWMsg.BTLEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* entity_id_;
  ::KWMsg::ObjectPropertyList* property_;
  ::KWMsg::ObjectRecordList* record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class AckBTLPk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBTLPk) */ {
 public:
  inline AckBTLPk() : AckBTLPk(nullptr) {}
  ~AckBTLPk() override;
  explicit constexpr AckBTLPk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBTLPk(const AckBTLPk& from);
  AckBTLPk(AckBTLPk&& from) noexcept
    : AckBTLPk() {
    *this = ::std::move(from);
  }

  inline AckBTLPk& operator=(const AckBTLPk& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBTLPk& operator=(AckBTLPk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBTLPk& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBTLPk* internal_default_instance() {
    return reinterpret_cast<const AckBTLPk*>(
               &_AckBTLPk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AckBTLPk& a, AckBTLPk& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBTLPk* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBTLPk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBTLPk* New() const final {
    return new AckBTLPk();
  }

  AckBTLPk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBTLPk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBTLPk& from);
  void MergeFrom(const AckBTLPk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBTLPk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBTLPk";
  }
  protected:
  explicit AckBTLPk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPkFieldNumber = 2,
    kUniqueIdFieldNumber = 1,
  };
  // .KWMsg.BTLPkInfo pk = 2;
  bool has_pk() const;
  private:
  bool _internal_has_pk() const;
  public:
  void clear_pk();
  const ::KWMsg::BTLPkInfo& pk() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLPkInfo* release_pk();
  ::KWMsg::BTLPkInfo* mutable_pk();
  void set_allocated_pk(::KWMsg::BTLPkInfo* pk);
  private:
  const ::KWMsg::BTLPkInfo& _internal_pk() const;
  ::KWMsg::BTLPkInfo* _internal_mutable_pk();
  public:
  void unsafe_arena_set_allocated_pk(
      ::KWMsg::BTLPkInfo* pk);
  ::KWMsg::BTLPkInfo* unsafe_arena_release_pk();

  // int32 unique_id = 1;
  void clear_unique_id();
  ::PROTOBUF_NAMESPACE_ID::int32 unique_id() const;
  void set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unique_id() const;
  void _internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBTLPk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::BTLPkInfo* pk_;
  ::PROTOBUF_NAMESPACE_ID::int32 unique_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLEnergyInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLEnergyInfo) */ {
 public:
  inline BTLEnergyInfo() : BTLEnergyInfo(nullptr) {}
  ~BTLEnergyInfo() override;
  explicit constexpr BTLEnergyInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLEnergyInfo(const BTLEnergyInfo& from);
  BTLEnergyInfo(BTLEnergyInfo&& from) noexcept
    : BTLEnergyInfo() {
    *this = ::std::move(from);
  }

  inline BTLEnergyInfo& operator=(const BTLEnergyInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLEnergyInfo& operator=(BTLEnergyInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLEnergyInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLEnergyInfo* internal_default_instance() {
    return reinterpret_cast<const BTLEnergyInfo*>(
               &_BTLEnergyInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BTLEnergyInfo& a, BTLEnergyInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLEnergyInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLEnergyInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLEnergyInfo* New() const final {
    return new BTLEnergyInfo();
  }

  BTLEnergyInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLEnergyInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLEnergyInfo& from);
  void MergeFrom(const BTLEnergyInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLEnergyInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLEnergyInfo";
  }
  protected:
  explicit BTLEnergyInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTeamIdFieldNumber = 1,
    kEnergyFieldNumber = 2,
    kCristalFieldNumber = 3,
  };
  // .KWMsg.Ident team_id = 1;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  const ::KWMsg::Ident& team_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_team_id();
  ::KWMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::KWMsg::Ident* team_id);
  private:
  const ::KWMsg::Ident& _internal_team_id() const;
  ::KWMsg::Ident* _internal_mutable_team_id();
  public:
  void unsafe_arena_set_allocated_team_id(
      ::KWMsg::Ident* team_id);
  ::KWMsg::Ident* unsafe_arena_release_team_id();

  // int32 energy = 2;
  void clear_energy();
  ::PROTOBUF_NAMESPACE_ID::int32 energy() const;
  void set_energy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_energy() const;
  void _internal_set_energy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cristal = 3;
  void clear_cristal();
  ::PROTOBUF_NAMESPACE_ID::int32 cristal() const;
  void set_cristal(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cristal() const;
  void _internal_set_cristal(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLEnergyInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* team_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 energy_;
  ::PROTOBUF_NAMESPACE_ID::int32 cristal_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLPkInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLPkInfo) */ {
 public:
  inline BTLPkInfo() : BTLPkInfo(nullptr) {}
  ~BTLPkInfo() override;
  explicit constexpr BTLPkInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLPkInfo(const BTLPkInfo& from);
  BTLPkInfo(BTLPkInfo&& from) noexcept
    : BTLPkInfo() {
    *this = ::std::move(from);
  }

  inline BTLPkInfo& operator=(const BTLPkInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLPkInfo& operator=(BTLPkInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLPkInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLPkInfo* internal_default_instance() {
    return reinterpret_cast<const BTLPkInfo*>(
               &_BTLPkInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(BTLPkInfo& a, BTLPkInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLPkInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLPkInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLPkInfo* New() const final {
    return new BTLPkInfo();
  }

  BTLPkInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLPkInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLPkInfo& from);
  void MergeFrom(const BTLPkInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLPkInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLPkInfo";
  }
  protected:
  explicit BTLPkInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
    kEntitiesFieldNumber = 2,
    kEnergyListFieldNumber = 3,
  };
  // repeated .KWMsg.BTLPkElement elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::KWMsg::BTLPkElement* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLPkElement >*
      mutable_elements();
  private:
  const ::KWMsg::BTLPkElement& _internal_elements(int index) const;
  ::KWMsg::BTLPkElement* _internal_add_elements();
  public:
  const ::KWMsg::BTLPkElement& elements(int index) const;
  ::KWMsg::BTLPkElement* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLPkElement >&
      elements() const;

  // repeated .KWMsg.BTLEntity entities = 2;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::KWMsg::BTLEntity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >*
      mutable_entities();
  private:
  const ::KWMsg::BTLEntity& _internal_entities(int index) const;
  ::KWMsg::BTLEntity* _internal_add_entities();
  public:
  const ::KWMsg::BTLEntity& entities(int index) const;
  ::KWMsg::BTLEntity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >&
      entities() const;

  // repeated .KWMsg.BTLEnergyInfo energy_list = 3;
  int energy_list_size() const;
  private:
  int _internal_energy_list_size() const;
  public:
  void clear_energy_list();
  ::KWMsg::BTLEnergyInfo* mutable_energy_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEnergyInfo >*
      mutable_energy_list();
  private:
  const ::KWMsg::BTLEnergyInfo& _internal_energy_list(int index) const;
  ::KWMsg::BTLEnergyInfo* _internal_add_energy_list();
  public:
  const ::KWMsg::BTLEnergyInfo& energy_list(int index) const;
  ::KWMsg::BTLEnergyInfo* add_energy_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEnergyInfo >&
      energy_list() const;

  // @@protoc_insertion_point(class_scope:KWMsg.BTLPkInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLPkElement > elements_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity > entities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEnergyInfo > energy_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLPkElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLPkElement) */ {
 public:
  inline BTLPkElement() : BTLPkElement(nullptr) {}
  ~BTLPkElement() override;
  explicit constexpr BTLPkElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLPkElement(const BTLPkElement& from);
  BTLPkElement(BTLPkElement&& from) noexcept
    : BTLPkElement() {
    *this = ::std::move(from);
  }

  inline BTLPkElement& operator=(const BTLPkElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLPkElement& operator=(BTLPkElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLPkElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLPkElement* internal_default_instance() {
    return reinterpret_cast<const BTLPkElement*>(
               &_BTLPkElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(BTLPkElement& a, BTLPkElement& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLPkElement* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLPkElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLPkElement* New() const final {
    return new BTLPkElement();
  }

  BTLPkElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLPkElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLPkElement& from);
  void MergeFrom(const BTLPkElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLPkElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLPkElement";
  }
  protected:
  explicit BTLPkElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 4,
    kEntityIdFieldNumber = 1,
    kTeamIdFieldNumber = 3,
    kFightFieldNumber = 2,
    kRewardTypeFieldNumber = 5,
    kRewardCountFieldNumber = 6,
  };
  // bytes name = 4;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .KWMsg.Ident entity_id = 1;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const ::KWMsg::Ident& entity_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_entity_id();
  ::KWMsg::Ident* mutable_entity_id();
  void set_allocated_entity_id(::KWMsg::Ident* entity_id);
  private:
  const ::KWMsg::Ident& _internal_entity_id() const;
  ::KWMsg::Ident* _internal_mutable_entity_id();
  public:
  void unsafe_arena_set_allocated_entity_id(
      ::KWMsg::Ident* entity_id);
  ::KWMsg::Ident* unsafe_arena_release_entity_id();

  // .KWMsg.Ident team_id = 3;
  bool has_team_id() const;
  private:
  bool _internal_has_team_id() const;
  public:
  void clear_team_id();
  const ::KWMsg::Ident& team_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_team_id();
  ::KWMsg::Ident* mutable_team_id();
  void set_allocated_team_id(::KWMsg::Ident* team_id);
  private:
  const ::KWMsg::Ident& _internal_team_id() const;
  ::KWMsg::Ident* _internal_mutable_team_id();
  public:
  void unsafe_arena_set_allocated_team_id(
      ::KWMsg::Ident* team_id);
  ::KWMsg::Ident* unsafe_arena_release_team_id();

  // int32 fight = 2;
  void clear_fight();
  ::PROTOBUF_NAMESPACE_ID::int32 fight() const;
  void set_fight(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fight() const;
  void _internal_set_fight(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reward_type = 5;
  void clear_reward_type();
  ::PROTOBUF_NAMESPACE_ID::int32 reward_type() const;
  void set_reward_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward_type() const;
  void _internal_set_reward_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reward_count = 6;
  void clear_reward_count();
  ::PROTOBUF_NAMESPACE_ID::int32 reward_count() const;
  void set_reward_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward_count() const;
  void _internal_set_reward_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLPkElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::KWMsg::Ident* entity_id_;
  ::KWMsg::Ident* team_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 fight_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class ReqBTLAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBTLAction) */ {
 public:
  inline ReqBTLAction() : ReqBTLAction(nullptr) {}
  ~ReqBTLAction() override;
  explicit constexpr ReqBTLAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBTLAction(const ReqBTLAction& from);
  ReqBTLAction(ReqBTLAction&& from) noexcept
    : ReqBTLAction() {
    *this = ::std::move(from);
  }

  inline ReqBTLAction& operator=(const ReqBTLAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBTLAction& operator=(ReqBTLAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBTLAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBTLAction* internal_default_instance() {
    return reinterpret_cast<const ReqBTLAction*>(
               &_ReqBTLAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReqBTLAction& a, ReqBTLAction& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBTLAction* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBTLAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBTLAction* New() const final {
    return new ReqBTLAction();
  }

  ReqBTLAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBTLAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBTLAction& from);
  void MergeFrom(const ReqBTLAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBTLAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBTLAction";
  }
  protected:
  explicit ReqBTLAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpFieldNumber = 1,
  };
  // .KWMsg.BTLOperation op = 1;
  bool has_op() const;
  private:
  bool _internal_has_op() const;
  public:
  void clear_op();
  const ::KWMsg::BTLOperation& op() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLOperation* release_op();
  ::KWMsg::BTLOperation* mutable_op();
  void set_allocated_op(::KWMsg::BTLOperation* op);
  private:
  const ::KWMsg::BTLOperation& _internal_op() const;
  ::KWMsg::BTLOperation* _internal_mutable_op();
  public:
  void unsafe_arena_set_allocated_op(
      ::KWMsg::BTLOperation* op);
  ::KWMsg::BTLOperation* unsafe_arena_release_op();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBTLAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::BTLOperation* op_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLOperation) */ {
 public:
  inline BTLOperation() : BTLOperation(nullptr) {}
  ~BTLOperation() override;
  explicit constexpr BTLOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLOperation(const BTLOperation& from);
  BTLOperation(BTLOperation&& from) noexcept
    : BTLOperation() {
    *this = ::std::move(from);
  }

  inline BTLOperation& operator=(const BTLOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLOperation& operator=(BTLOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLOperation& default_instance() {
    return *internal_default_instance();
  }
  enum OperationCase {
    kAutoOp = 2,
    kManualOp = 3,
    kSkipOp = 4,
    OPERATION_NOT_SET = 0,
  };

  static inline const BTLOperation* internal_default_instance() {
    return reinterpret_cast<const BTLOperation*>(
               &_BTLOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(BTLOperation& a, BTLOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLOperation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLOperation* New() const final {
    return new BTLOperation();
  }

  BTLOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLOperation& from);
  void MergeFrom(const BTLOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLOperation";
  }
  protected:
  explicit BTLOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kAutoOpFieldNumber = 2,
    kManualOpFieldNumber = 3,
    kSkipOpFieldNumber = 4,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 auto_op = 2;
  bool has_auto_op() const;
  private:
  bool _internal_has_auto_op() const;
  public:
  void clear_auto_op();
  ::PROTOBUF_NAMESPACE_ID::int32 auto_op() const;
  void set_auto_op(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_auto_op() const;
  void _internal_set_auto_op(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.BTLManualOperation manual_op = 3;
  bool has_manual_op() const;
  private:
  bool _internal_has_manual_op() const;
  public:
  void clear_manual_op();
  const ::KWMsg::BTLManualOperation& manual_op() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLManualOperation* release_manual_op();
  ::KWMsg::BTLManualOperation* mutable_manual_op();
  void set_allocated_manual_op(::KWMsg::BTLManualOperation* manual_op);
  private:
  const ::KWMsg::BTLManualOperation& _internal_manual_op() const;
  ::KWMsg::BTLManualOperation* _internal_mutable_manual_op();
  public:
  void unsafe_arena_set_allocated_manual_op(
      ::KWMsg::BTLManualOperation* manual_op);
  ::KWMsg::BTLManualOperation* unsafe_arena_release_manual_op();

  // int32 skip_op = 4;
  bool has_skip_op() const;
  private:
  bool _internal_has_skip_op() const;
  public:
  void clear_skip_op();
  ::PROTOBUF_NAMESPACE_ID::int32 skip_op() const;
  void set_skip_op(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_skip_op() const;
  void _internal_set_skip_op(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  void clear_operation();
  OperationCase operation_case() const;
  // @@protoc_insertion_point(class_scope:KWMsg.BTLOperation)
 private:
  class _Internal;
  void set_has_auto_op();
  void set_has_manual_op();
  void set_has_skip_op();

  inline bool has_operation() const;
  inline void clear_has_operation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  union OperationUnion {
    constexpr OperationUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::PROTOBUF_NAMESPACE_ID::int32 auto_op_;
    ::KWMsg::BTLManualOperation* manual_op_;
    ::PROTOBUF_NAMESPACE_ID::int32 skip_op_;
  } operation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLManualOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLManualOperation) */ {
 public:
  inline BTLManualOperation() : BTLManualOperation(nullptr) {}
  ~BTLManualOperation() override;
  explicit constexpr BTLManualOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLManualOperation(const BTLManualOperation& from);
  BTLManualOperation(BTLManualOperation&& from) noexcept
    : BTLManualOperation() {
    *this = ::std::move(from);
  }

  inline BTLManualOperation& operator=(const BTLManualOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLManualOperation& operator=(BTLManualOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLManualOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLManualOperation* internal_default_instance() {
    return reinterpret_cast<const BTLManualOperation*>(
               &_BTLManualOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(BTLManualOperation& a, BTLManualOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLManualOperation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLManualOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLManualOperation* New() const final {
    return new BTLManualOperation();
  }

  BTLManualOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLManualOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLManualOperation& from);
  void MergeFrom(const BTLManualOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLManualOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLManualOperation";
  }
  protected:
  explicit BTLManualOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillMidFieldNumber = 1,
    kCasterIdFieldNumber = 2,
    kSelectedTargetIdFieldNumber = 3,
  };
  // bytes skill_mid = 1;
  void clear_skill_mid();
  const std::string& skill_mid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skill_mid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skill_mid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_skill_mid();
  void set_allocated_skill_mid(std::string* skill_mid);
  private:
  const std::string& _internal_skill_mid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skill_mid(const std::string& value);
  std::string* _internal_mutable_skill_mid();
  public:

  // .KWMsg.Ident caster_id = 2;
  bool has_caster_id() const;
  private:
  bool _internal_has_caster_id() const;
  public:
  void clear_caster_id();
  const ::KWMsg::Ident& caster_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_caster_id();
  ::KWMsg::Ident* mutable_caster_id();
  void set_allocated_caster_id(::KWMsg::Ident* caster_id);
  private:
  const ::KWMsg::Ident& _internal_caster_id() const;
  ::KWMsg::Ident* _internal_mutable_caster_id();
  public:
  void unsafe_arena_set_allocated_caster_id(
      ::KWMsg::Ident* caster_id);
  ::KWMsg::Ident* unsafe_arena_release_caster_id();

  // .KWMsg.Ident selected_target_id = 3;
  bool has_selected_target_id() const;
  private:
  bool _internal_has_selected_target_id() const;
  public:
  void clear_selected_target_id();
  const ::KWMsg::Ident& selected_target_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_selected_target_id();
  ::KWMsg::Ident* mutable_selected_target_id();
  void set_allocated_selected_target_id(::KWMsg::Ident* selected_target_id);
  private:
  const ::KWMsg::Ident& _internal_selected_target_id() const;
  ::KWMsg::Ident* _internal_mutable_selected_target_id();
  public:
  void unsafe_arena_set_allocated_selected_target_id(
      ::KWMsg::Ident* selected_target_id);
  ::KWMsg::Ident* unsafe_arena_release_selected_target_id();

  // @@protoc_insertion_point(class_scope:KWMsg.BTLManualOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_mid_;
  ::KWMsg::Ident* caster_id_;
  ::KWMsg::Ident* selected_target_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class AckBTLAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBTLAction) */ {
 public:
  inline AckBTLAction() : AckBTLAction(nullptr) {}
  ~AckBTLAction() override;
  explicit constexpr AckBTLAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBTLAction(const AckBTLAction& from);
  AckBTLAction(AckBTLAction&& from) noexcept
    : AckBTLAction() {
    *this = ::std::move(from);
  }

  inline AckBTLAction& operator=(const AckBTLAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBTLAction& operator=(AckBTLAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBTLAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBTLAction* internal_default_instance() {
    return reinterpret_cast<const AckBTLAction*>(
               &_AckBTLAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(AckBTLAction& a, AckBTLAction& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBTLAction* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBTLAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBTLAction* New() const final {
    return new AckBTLAction();
  }

  AckBTLAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBTLAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBTLAction& from);
  void MergeFrom(const AckBTLAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBTLAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBTLAction";
  }
  protected:
  explicit AckBTLAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionFieldNumber = 2,
    kUniqueIdFieldNumber = 1,
  };
  // .KWMsg.BTLAction action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::KWMsg::BTLAction& action() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLAction* release_action();
  ::KWMsg::BTLAction* mutable_action();
  void set_allocated_action(::KWMsg::BTLAction* action);
  private:
  const ::KWMsg::BTLAction& _internal_action() const;
  ::KWMsg::BTLAction* _internal_mutable_action();
  public:
  void unsafe_arena_set_allocated_action(
      ::KWMsg::BTLAction* action);
  ::KWMsg::BTLAction* unsafe_arena_release_action();

  // int32 unique_id = 1;
  void clear_unique_id();
  ::PROTOBUF_NAMESPACE_ID::int32 unique_id() const;
  void set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unique_id() const;
  void _internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBTLAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::BTLAction* action_;
  ::PROTOBUF_NAMESPACE_ID::int32 unique_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLAction) */ {
 public:
  inline BTLAction() : BTLAction(nullptr) {}
  ~BTLAction() override;
  explicit constexpr BTLAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLAction(const BTLAction& from);
  BTLAction(BTLAction&& from) noexcept
    : BTLAction() {
    *this = ::std::move(from);
  }

  inline BTLAction& operator=(const BTLAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLAction& operator=(BTLAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLAction& default_instance() {
    return *internal_default_instance();
  }
  enum ActionDetailCase {
    kStartAction = 4,
    kInAction = 5,
    kPostPreAction = 6,
    ACTION_DETAIL_NOT_SET = 0,
  };

  static inline const BTLAction* internal_default_instance() {
    return reinterpret_cast<const BTLAction*>(
               &_BTLAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(BTLAction& a, BTLAction& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLAction* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLAction* New() const final {
    return new BTLAction();
  }

  BTLAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLAction& from);
  void MergeFrom(const BTLAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLAction";
  }
  protected:
  explicit BTLAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kActionQueueFieldNumber = 3,
    kStageFieldNumber = 1,
    kRoundNumberFieldNumber = 2,
    kStartActionFieldNumber = 4,
    kInActionFieldNumber = 5,
    kPostPreActionFieldNumber = 6,
  };
  // .KWMsg.BTLActionQueue action_queue = 3;
  bool has_action_queue() const;
  private:
  bool _internal_has_action_queue() const;
  public:
  void clear_action_queue();
  const ::KWMsg::BTLActionQueue& action_queue() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLActionQueue* release_action_queue();
  ::KWMsg::BTLActionQueue* mutable_action_queue();
  void set_allocated_action_queue(::KWMsg::BTLActionQueue* action_queue);
  private:
  const ::KWMsg::BTLActionQueue& _internal_action_queue() const;
  ::KWMsg::BTLActionQueue* _internal_mutable_action_queue();
  public:
  void unsafe_arena_set_allocated_action_queue(
      ::KWMsg::BTLActionQueue* action_queue);
  ::KWMsg::BTLActionQueue* unsafe_arena_release_action_queue();

  // .KWMsg.BTLStage stage = 1;
  void clear_stage();
  ::KWMsg::BTLStage stage() const;
  void set_stage(::KWMsg::BTLStage value);
  private:
  ::KWMsg::BTLStage _internal_stage() const;
  void _internal_set_stage(::KWMsg::BTLStage value);
  public:

  // int32 round_number = 2;
  void clear_round_number();
  ::PROTOBUF_NAMESPACE_ID::int32 round_number() const;
  void set_round_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_round_number() const;
  void _internal_set_round_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.BTLStartDetail start_action = 4;
  bool has_start_action() const;
  private:
  bool _internal_has_start_action() const;
  public:
  void clear_start_action();
  const ::KWMsg::BTLStartDetail& start_action() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLStartDetail* release_start_action();
  ::KWMsg::BTLStartDetail* mutable_start_action();
  void set_allocated_start_action(::KWMsg::BTLStartDetail* start_action);
  private:
  const ::KWMsg::BTLStartDetail& _internal_start_action() const;
  ::KWMsg::BTLStartDetail* _internal_mutable_start_action();
  public:
  void unsafe_arena_set_allocated_start_action(
      ::KWMsg::BTLStartDetail* start_action);
  ::KWMsg::BTLStartDetail* unsafe_arena_release_start_action();

  // .KWMsg.BTLInActionDetail in_action = 5;
  bool has_in_action() const;
  private:
  bool _internal_has_in_action() const;
  public:
  void clear_in_action();
  const ::KWMsg::BTLInActionDetail& in_action() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLInActionDetail* release_in_action();
  ::KWMsg::BTLInActionDetail* mutable_in_action();
  void set_allocated_in_action(::KWMsg::BTLInActionDetail* in_action);
  private:
  const ::KWMsg::BTLInActionDetail& _internal_in_action() const;
  ::KWMsg::BTLInActionDetail* _internal_mutable_in_action();
  public:
  void unsafe_arena_set_allocated_in_action(
      ::KWMsg::BTLInActionDetail* in_action);
  ::KWMsg::BTLInActionDetail* unsafe_arena_release_in_action();

  // .KWMsg.BTLPostPreActionDetail post_pre_action = 6;
  bool has_post_pre_action() const;
  private:
  bool _internal_has_post_pre_action() const;
  public:
  void clear_post_pre_action();
  const ::KWMsg::BTLPostPreActionDetail& post_pre_action() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLPostPreActionDetail* release_post_pre_action();
  ::KWMsg::BTLPostPreActionDetail* mutable_post_pre_action();
  void set_allocated_post_pre_action(::KWMsg::BTLPostPreActionDetail* post_pre_action);
  private:
  const ::KWMsg::BTLPostPreActionDetail& _internal_post_pre_action() const;
  ::KWMsg::BTLPostPreActionDetail* _internal_mutable_post_pre_action();
  public:
  void unsafe_arena_set_allocated_post_pre_action(
      ::KWMsg::BTLPostPreActionDetail* post_pre_action);
  ::KWMsg::BTLPostPreActionDetail* unsafe_arena_release_post_pre_action();

  void clear_action_detail();
  ActionDetailCase action_detail_case() const;
  // @@protoc_insertion_point(class_scope:KWMsg.BTLAction)
 private:
  class _Internal;
  void set_has_start_action();
  void set_has_in_action();
  void set_has_post_pre_action();

  inline bool has_action_detail() const;
  inline void clear_has_action_detail();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::BTLActionQueue* action_queue_;
  int stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 round_number_;
  union ActionDetailUnion {
    constexpr ActionDetailUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::KWMsg::BTLStartDetail* start_action_;
    ::KWMsg::BTLInActionDetail* in_action_;
    ::KWMsg::BTLPostPreActionDetail* post_pre_action_;
  } action_detail_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLActionQueue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLActionQueue) */ {
 public:
  inline BTLActionQueue() : BTLActionQueue(nullptr) {}
  ~BTLActionQueue() override;
  explicit constexpr BTLActionQueue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLActionQueue(const BTLActionQueue& from);
  BTLActionQueue(BTLActionQueue&& from) noexcept
    : BTLActionQueue() {
    *this = ::std::move(from);
  }

  inline BTLActionQueue& operator=(const BTLActionQueue& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLActionQueue& operator=(BTLActionQueue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLActionQueue& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLActionQueue* internal_default_instance() {
    return reinterpret_cast<const BTLActionQueue*>(
               &_BTLActionQueue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(BTLActionQueue& a, BTLActionQueue& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLActionQueue* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLActionQueue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLActionQueue* New() const final {
    return new BTLActionQueue();
  }

  BTLActionQueue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLActionQueue>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLActionQueue& from);
  void MergeFrom(const BTLActionQueue& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLActionQueue* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLActionQueue";
  }
  protected:
  explicit BTLActionQueue(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .KWMsg.BTLActionQueueElement elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::KWMsg::BTLActionQueueElement* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLActionQueueElement >*
      mutable_elements();
  private:
  const ::KWMsg::BTLActionQueueElement& _internal_elements(int index) const;
  ::KWMsg::BTLActionQueueElement* _internal_add_elements();
  public:
  const ::KWMsg::BTLActionQueueElement& elements(int index) const;
  ::KWMsg::BTLActionQueueElement* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLActionQueueElement >&
      elements() const;

  // @@protoc_insertion_point(class_scope:KWMsg.BTLActionQueue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLActionQueueElement > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLActionQueueElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLActionQueueElement) */ {
 public:
  inline BTLActionQueueElement() : BTLActionQueueElement(nullptr) {}
  ~BTLActionQueueElement() override;
  explicit constexpr BTLActionQueueElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLActionQueueElement(const BTLActionQueueElement& from);
  BTLActionQueueElement(BTLActionQueueElement&& from) noexcept
    : BTLActionQueueElement() {
    *this = ::std::move(from);
  }

  inline BTLActionQueueElement& operator=(const BTLActionQueueElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLActionQueueElement& operator=(BTLActionQueueElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLActionQueueElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLActionQueueElement* internal_default_instance() {
    return reinterpret_cast<const BTLActionQueueElement*>(
               &_BTLActionQueueElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(BTLActionQueueElement& a, BTLActionQueueElement& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLActionQueueElement* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLActionQueueElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLActionQueueElement* New() const final {
    return new BTLActionQueueElement();
  }

  BTLActionQueueElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLActionQueueElement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLActionQueueElement& from);
  void MergeFrom(const BTLActionQueueElement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLActionQueueElement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLActionQueueElement";
  }
  protected:
  explicit BTLActionQueueElement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kQueueStateFieldNumber = 2,
    kSeqFieldNumber = 3,
    kFlagFieldNumber = 4,
  };
  // .KWMsg.Ident entity_id = 1;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const ::KWMsg::Ident& entity_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_entity_id();
  ::KWMsg::Ident* mutable_entity_id();
  void set_allocated_entity_id(::KWMsg::Ident* entity_id);
  private:
  const ::KWMsg::Ident& _internal_entity_id() const;
  ::KWMsg::Ident* _internal_mutable_entity_id();
  public:
  void unsafe_arena_set_allocated_entity_id(
      ::KWMsg::Ident* entity_id);
  ::KWMsg::Ident* unsafe_arena_release_entity_id();

  // .KWMsg.BTLQueueState queue_state = 2;
  void clear_queue_state();
  ::KWMsg::BTLQueueState queue_state() const;
  void set_queue_state(::KWMsg::BTLQueueState value);
  private:
  ::KWMsg::BTLQueueState _internal_queue_state() const;
  void _internal_set_queue_state(::KWMsg::BTLQueueState value);
  public:

  // int32 seq = 3;
  void clear_seq();
  ::PROTOBUF_NAMESPACE_ID::int32 seq() const;
  void set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seq() const;
  void _internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flag = 4;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLActionQueueElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* entity_id_;
  int queue_state_;
  ::PROTOBUF_NAMESPACE_ID::int32 seq_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLStartDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLStartDetail) */ {
 public:
  inline BTLStartDetail() : BTLStartDetail(nullptr) {}
  ~BTLStartDetail() override;
  explicit constexpr BTLStartDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLStartDetail(const BTLStartDetail& from);
  BTLStartDetail(BTLStartDetail&& from) noexcept
    : BTLStartDetail() {
    *this = ::std::move(from);
  }

  inline BTLStartDetail& operator=(const BTLStartDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLStartDetail& operator=(BTLStartDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLStartDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLStartDetail* internal_default_instance() {
    return reinterpret_cast<const BTLStartDetail*>(
               &_BTLStartDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(BTLStartDetail& a, BTLStartDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLStartDetail* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLStartDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLStartDetail* New() const final {
    return new BTLStartDetail();
  }

  BTLStartDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLStartDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLStartDetail& from);
  void MergeFrom(const BTLStartDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLStartDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLStartDetail";
  }
  protected:
  explicit BTLStartDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectsFieldNumber = 1,
  };
  // repeated .KWMsg.BTLEffect effects = 1;
  int effects_size() const;
  private:
  int _internal_effects_size() const;
  public:
  void clear_effects();
  ::KWMsg::BTLEffect* mutable_effects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect >*
      mutable_effects();
  private:
  const ::KWMsg::BTLEffect& _internal_effects(int index) const;
  ::KWMsg::BTLEffect* _internal_add_effects();
  public:
  const ::KWMsg::BTLEffect& effects(int index) const;
  ::KWMsg::BTLEffect* add_effects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect >&
      effects() const;

  // @@protoc_insertion_point(class_scope:KWMsg.BTLStartDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect > effects_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLInActionDetail_MagicHuesEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BTLInActionDetail_MagicHuesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<BTLInActionDetail_MagicHuesEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  BTLInActionDetail_MagicHuesEntry_DoNotUse();
  explicit constexpr BTLInActionDetail_MagicHuesEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit BTLInActionDetail_MagicHuesEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const BTLInActionDetail_MagicHuesEntry_DoNotUse& other);
  static const BTLInActionDetail_MagicHuesEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const BTLInActionDetail_MagicHuesEntry_DoNotUse*>(&_BTLInActionDetail_MagicHuesEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class BTLInActionDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLInActionDetail) */ {
 public:
  inline BTLInActionDetail() : BTLInActionDetail(nullptr) {}
  ~BTLInActionDetail() override;
  explicit constexpr BTLInActionDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLInActionDetail(const BTLInActionDetail& from);
  BTLInActionDetail(BTLInActionDetail&& from) noexcept
    : BTLInActionDetail() {
    *this = ::std::move(from);
  }

  inline BTLInActionDetail& operator=(const BTLInActionDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLInActionDetail& operator=(BTLInActionDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLInActionDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLInActionDetail* internal_default_instance() {
    return reinterpret_cast<const BTLInActionDetail*>(
               &_BTLInActionDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(BTLInActionDetail& a, BTLInActionDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLInActionDetail* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLInActionDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLInActionDetail* New() const final {
    return new BTLInActionDetail();
  }

  BTLInActionDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLInActionDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLInActionDetail& from);
  void MergeFrom(const BTLInActionDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLInActionDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLInActionDetail";
  }
  protected:
  explicit BTLInActionDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kEffectsFieldNumber = 2,
    kMagicHuesFieldNumber = 3,
    kEnergyListFieldNumber = 4,
    kEntityStateInTurnFieldNumber = 1,
  };
  // repeated .KWMsg.BTLEffect effects = 2;
  int effects_size() const;
  private:
  int _internal_effects_size() const;
  public:
  void clear_effects();
  ::KWMsg::BTLEffect* mutable_effects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect >*
      mutable_effects();
  private:
  const ::KWMsg::BTLEffect& _internal_effects(int index) const;
  ::KWMsg::BTLEffect* _internal_add_effects();
  public:
  const ::KWMsg::BTLEffect& effects(int index) const;
  ::KWMsg::BTLEffect* add_effects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect >&
      effects() const;

  // map<int32, int32> magic_hues = 3;
  int magic_hues_size() const;
  private:
  int _internal_magic_hues_size() const;
  public:
  void clear_magic_hues();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_magic_hues() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_magic_hues();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
      magic_hues() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_magic_hues();

  // repeated .KWMsg.BTLEnergyInfo energy_list = 4;
  int energy_list_size() const;
  private:
  int _internal_energy_list_size() const;
  public:
  void clear_energy_list();
  ::KWMsg::BTLEnergyInfo* mutable_energy_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEnergyInfo >*
      mutable_energy_list();
  private:
  const ::KWMsg::BTLEnergyInfo& _internal_energy_list(int index) const;
  ::KWMsg::BTLEnergyInfo* _internal_add_energy_list();
  public:
  const ::KWMsg::BTLEnergyInfo& energy_list(int index) const;
  ::KWMsg::BTLEnergyInfo* add_energy_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEnergyInfo >&
      energy_list() const;

  // .KWMsg.BTLEntityStateInTurn entity_state_in_turn = 1;
  bool has_entity_state_in_turn() const;
  private:
  bool _internal_has_entity_state_in_turn() const;
  public:
  void clear_entity_state_in_turn();
  const ::KWMsg::BTLEntityStateInTurn& entity_state_in_turn() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLEntityStateInTurn* release_entity_state_in_turn();
  ::KWMsg::BTLEntityStateInTurn* mutable_entity_state_in_turn();
  void set_allocated_entity_state_in_turn(::KWMsg::BTLEntityStateInTurn* entity_state_in_turn);
  private:
  const ::KWMsg::BTLEntityStateInTurn& _internal_entity_state_in_turn() const;
  ::KWMsg::BTLEntityStateInTurn* _internal_mutable_entity_state_in_turn();
  public:
  void unsafe_arena_set_allocated_entity_state_in_turn(
      ::KWMsg::BTLEntityStateInTurn* entity_state_in_turn);
  ::KWMsg::BTLEntityStateInTurn* unsafe_arena_release_entity_state_in_turn();

  // @@protoc_insertion_point(class_scope:KWMsg.BTLInActionDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect > effects_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      BTLInActionDetail_MagicHuesEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> magic_hues_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEnergyInfo > energy_list_;
  ::KWMsg::BTLEntityStateInTurn* entity_state_in_turn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLPostPreActionDetail final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLPostPreActionDetail) */ {
 public:
  inline BTLPostPreActionDetail() : BTLPostPreActionDetail(nullptr) {}
  ~BTLPostPreActionDetail() override;
  explicit constexpr BTLPostPreActionDetail(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLPostPreActionDetail(const BTLPostPreActionDetail& from);
  BTLPostPreActionDetail(BTLPostPreActionDetail&& from) noexcept
    : BTLPostPreActionDetail() {
    *this = ::std::move(from);
  }

  inline BTLPostPreActionDetail& operator=(const BTLPostPreActionDetail& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLPostPreActionDetail& operator=(BTLPostPreActionDetail&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLPostPreActionDetail& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLPostPreActionDetail* internal_default_instance() {
    return reinterpret_cast<const BTLPostPreActionDetail*>(
               &_BTLPostPreActionDetail_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(BTLPostPreActionDetail& a, BTLPostPreActionDetail& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLPostPreActionDetail* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLPostPreActionDetail* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLPostPreActionDetail* New() const final {
    return new BTLPostPreActionDetail();
  }

  BTLPostPreActionDetail* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLPostPreActionDetail>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLPostPreActionDetail& from);
  void MergeFrom(const BTLPostPreActionDetail& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLPostPreActionDetail* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLPostPreActionDetail";
  }
  protected:
  explicit BTLPostPreActionDetail(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNewEntitiesFieldNumber = 2,
    kEffectsFieldNumber = 3,
    kEntityStateInTurnFieldNumber = 1,
  };
  // repeated .KWMsg.BTLEntity new_entities = 2;
  int new_entities_size() const;
  private:
  int _internal_new_entities_size() const;
  public:
  void clear_new_entities();
  ::KWMsg::BTLEntity* mutable_new_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >*
      mutable_new_entities();
  private:
  const ::KWMsg::BTLEntity& _internal_new_entities(int index) const;
  ::KWMsg::BTLEntity* _internal_add_new_entities();
  public:
  const ::KWMsg::BTLEntity& new_entities(int index) const;
  ::KWMsg::BTLEntity* add_new_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >&
      new_entities() const;

  // repeated .KWMsg.BTLEffect effects = 3;
  int effects_size() const;
  private:
  int _internal_effects_size() const;
  public:
  void clear_effects();
  ::KWMsg::BTLEffect* mutable_effects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect >*
      mutable_effects();
  private:
  const ::KWMsg::BTLEffect& _internal_effects(int index) const;
  ::KWMsg::BTLEffect* _internal_add_effects();
  public:
  const ::KWMsg::BTLEffect& effects(int index) const;
  ::KWMsg::BTLEffect* add_effects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect >&
      effects() const;

  // .KWMsg.BTLEntityStateInTurn entity_state_in_turn = 1;
  bool has_entity_state_in_turn() const;
  private:
  bool _internal_has_entity_state_in_turn() const;
  public:
  void clear_entity_state_in_turn();
  const ::KWMsg::BTLEntityStateInTurn& entity_state_in_turn() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLEntityStateInTurn* release_entity_state_in_turn();
  ::KWMsg::BTLEntityStateInTurn* mutable_entity_state_in_turn();
  void set_allocated_entity_state_in_turn(::KWMsg::BTLEntityStateInTurn* entity_state_in_turn);
  private:
  const ::KWMsg::BTLEntityStateInTurn& _internal_entity_state_in_turn() const;
  ::KWMsg::BTLEntityStateInTurn* _internal_mutable_entity_state_in_turn();
  public:
  void unsafe_arena_set_allocated_entity_state_in_turn(
      ::KWMsg::BTLEntityStateInTurn* entity_state_in_turn);
  ::KWMsg::BTLEntityStateInTurn* unsafe_arena_release_entity_state_in_turn();

  // @@protoc_insertion_point(class_scope:KWMsg.BTLPostPreActionDetail)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity > new_entities_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect > effects_;
  ::KWMsg::BTLEntityStateInTurn* entity_state_in_turn_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLEntityStateInTurn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLEntityStateInTurn) */ {
 public:
  inline BTLEntityStateInTurn() : BTLEntityStateInTurn(nullptr) {}
  ~BTLEntityStateInTurn() override;
  explicit constexpr BTLEntityStateInTurn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLEntityStateInTurn(const BTLEntityStateInTurn& from);
  BTLEntityStateInTurn(BTLEntityStateInTurn&& from) noexcept
    : BTLEntityStateInTurn() {
    *this = ::std::move(from);
  }

  inline BTLEntityStateInTurn& operator=(const BTLEntityStateInTurn& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLEntityStateInTurn& operator=(BTLEntityStateInTurn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLEntityStateInTurn& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLEntityStateInTurn* internal_default_instance() {
    return reinterpret_cast<const BTLEntityStateInTurn*>(
               &_BTLEntityStateInTurn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(BTLEntityStateInTurn& a, BTLEntityStateInTurn& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLEntityStateInTurn* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLEntityStateInTurn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLEntityStateInTurn* New() const final {
    return new BTLEntityStateInTurn();
  }

  BTLEntityStateInTurn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLEntityStateInTurn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLEntityStateInTurn& from);
  void MergeFrom(const BTLEntityStateInTurn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLEntityStateInTurn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLEntityStateInTurn";
  }
  protected:
  explicit BTLEntityStateInTurn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillStatesFieldNumber = 3,
    kEntityIdFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // repeated .KWMsg.BTLEntitySkillState skill_states = 3;
  int skill_states_size() const;
  private:
  int _internal_skill_states_size() const;
  public:
  void clear_skill_states();
  ::KWMsg::BTLEntitySkillState* mutable_skill_states(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntitySkillState >*
      mutable_skill_states();
  private:
  const ::KWMsg::BTLEntitySkillState& _internal_skill_states(int index) const;
  ::KWMsg::BTLEntitySkillState* _internal_add_skill_states();
  public:
  const ::KWMsg::BTLEntitySkillState& skill_states(int index) const;
  ::KWMsg::BTLEntitySkillState* add_skill_states();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntitySkillState >&
      skill_states() const;

  // .KWMsg.Ident entity_id = 2;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const ::KWMsg::Ident& entity_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_entity_id();
  ::KWMsg::Ident* mutable_entity_id();
  void set_allocated_entity_id(::KWMsg::Ident* entity_id);
  private:
  const ::KWMsg::Ident& _internal_entity_id() const;
  ::KWMsg::Ident* _internal_mutable_entity_id();
  public:
  void unsafe_arena_set_allocated_entity_id(
      ::KWMsg::Ident* entity_id);
  ::KWMsg::Ident* unsafe_arena_release_entity_id();

  // .KWMsg.EGameEventCode code = 1;
  void clear_code();
  ::KWMsg::EGameEventCode code() const;
  void set_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_code() const;
  void _internal_set_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLEntityStateInTurn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntitySkillState > skill_states_;
  ::KWMsg::Ident* entity_id_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLEntitySkillState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLEntitySkillState) */ {
 public:
  inline BTLEntitySkillState() : BTLEntitySkillState(nullptr) {}
  ~BTLEntitySkillState() override;
  explicit constexpr BTLEntitySkillState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLEntitySkillState(const BTLEntitySkillState& from);
  BTLEntitySkillState(BTLEntitySkillState&& from) noexcept
    : BTLEntitySkillState() {
    *this = ::std::move(from);
  }

  inline BTLEntitySkillState& operator=(const BTLEntitySkillState& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLEntitySkillState& operator=(BTLEntitySkillState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLEntitySkillState& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLEntitySkillState* internal_default_instance() {
    return reinterpret_cast<const BTLEntitySkillState*>(
               &_BTLEntitySkillState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(BTLEntitySkillState& a, BTLEntitySkillState& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLEntitySkillState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLEntitySkillState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLEntitySkillState* New() const final {
    return new BTLEntitySkillState();
  }

  BTLEntitySkillState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLEntitySkillState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLEntitySkillState& from);
  void MergeFrom(const BTLEntitySkillState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLEntitySkillState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLEntitySkillState";
  }
  protected:
  explicit BTLEntitySkillState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCandidateTargetsFieldNumber = 5,
    kSkillMidFieldNumber = 1,
    kCurCdFieldNumber = 2,
    kCostFieldNumber = 3,
    kSkillStateFieldNumber = 4,
  };
  // repeated .KWMsg.Ident candidate_targets = 5;
  int candidate_targets_size() const;
  private:
  int _internal_candidate_targets_size() const;
  public:
  void clear_candidate_targets();
  ::KWMsg::Ident* mutable_candidate_targets(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
      mutable_candidate_targets();
  private:
  const ::KWMsg::Ident& _internal_candidate_targets(int index) const;
  ::KWMsg::Ident* _internal_add_candidate_targets();
  public:
  const ::KWMsg::Ident& candidate_targets(int index) const;
  ::KWMsg::Ident* add_candidate_targets();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
      candidate_targets() const;

  // bytes skill_mid = 1;
  void clear_skill_mid();
  const std::string& skill_mid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_skill_mid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_skill_mid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_skill_mid();
  void set_allocated_skill_mid(std::string* skill_mid);
  private:
  const std::string& _internal_skill_mid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_skill_mid(const std::string& value);
  std::string* _internal_mutable_skill_mid();
  public:

  // int32 cur_cd = 2;
  void clear_cur_cd();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_cd() const;
  void set_cur_cd(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_cd() const;
  void _internal_set_cur_cd(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cost = 3;
  void clear_cost();
  ::PROTOBUF_NAMESPACE_ID::int32 cost() const;
  void set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cost() const;
  void _internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.BTLSkillState skill_state = 4;
  void clear_skill_state();
  ::KWMsg::BTLSkillState skill_state() const;
  void set_skill_state(::KWMsg::BTLSkillState value);
  private:
  ::KWMsg::BTLSkillState _internal_skill_state() const;
  void _internal_set_skill_state(::KWMsg::BTLSkillState value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLEntitySkillState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident > candidate_targets_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr skill_mid_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_cd_;
  ::PROTOBUF_NAMESPACE_ID::int32 cost_;
  int skill_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLEffect final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLEffect) */ {
 public:
  inline BTLEffect() : BTLEffect(nullptr) {}
  ~BTLEffect() override;
  explicit constexpr BTLEffect(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLEffect(const BTLEffect& from);
  BTLEffect(BTLEffect&& from) noexcept
    : BTLEffect() {
    *this = ::std::move(from);
  }

  inline BTLEffect& operator=(const BTLEffect& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLEffect& operator=(BTLEffect&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLEffect& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kDamage = 6,
    kHeal = 7,
    kSummon = 8,
    kBuff = 9,
    DATA_NOT_SET = 0,
  };

  static inline const BTLEffect* internal_default_instance() {
    return reinterpret_cast<const BTLEffect*>(
               &_BTLEffect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(BTLEffect& a, BTLEffect& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLEffect* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLEffect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLEffect* New() const final {
    return new BTLEffect();
  }

  BTLEffect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLEffect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLEffect& from);
  void MergeFrom(const BTLEffect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLEffect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLEffect";
  }
  protected:
  explicit BTLEffect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 5,
    kMidFieldNumber = 1,
    kCasterIdFieldNumber = 3,
    kTargetIdFieldNumber = 4,
    kTypeFieldNumber = 2,
    kDamageFieldNumber = 6,
    kHealFieldNumber = 7,
    kSummonFieldNumber = 8,
    kBuffFieldNumber = 9,
  };
  // repeated .KWMsg.BTLEntity entities = 5;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::KWMsg::BTLEntity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >*
      mutable_entities();
  private:
  const ::KWMsg::BTLEntity& _internal_entities(int index) const;
  ::KWMsg::BTLEntity* _internal_add_entities();
  public:
  const ::KWMsg::BTLEntity& entities(int index) const;
  ::KWMsg::BTLEntity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >&
      entities() const;

  // bytes mid = 1;
  void clear_mid();
  const std::string& mid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mid();
  void set_allocated_mid(std::string* mid);
  private:
  const std::string& _internal_mid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mid(const std::string& value);
  std::string* _internal_mutable_mid();
  public:

  // .KWMsg.Ident caster_id = 3;
  bool has_caster_id() const;
  private:
  bool _internal_has_caster_id() const;
  public:
  void clear_caster_id();
  const ::KWMsg::Ident& caster_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_caster_id();
  ::KWMsg::Ident* mutable_caster_id();
  void set_allocated_caster_id(::KWMsg::Ident* caster_id);
  private:
  const ::KWMsg::Ident& _internal_caster_id() const;
  ::KWMsg::Ident* _internal_mutable_caster_id();
  public:
  void unsafe_arena_set_allocated_caster_id(
      ::KWMsg::Ident* caster_id);
  ::KWMsg::Ident* unsafe_arena_release_caster_id();

  // .KWMsg.Ident target_id = 4;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::KWMsg::Ident& target_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_target_id();
  ::KWMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::KWMsg::Ident* target_id);
  private:
  const ::KWMsg::Ident& _internal_target_id() const;
  ::KWMsg::Ident* _internal_mutable_target_id();
  public:
  void unsafe_arena_set_allocated_target_id(
      ::KWMsg::Ident* target_id);
  ::KWMsg::Ident* unsafe_arena_release_target_id();

  // int32 type = 2;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.BTLDamageInfo damage = 6;
  bool has_damage() const;
  private:
  bool _internal_has_damage() const;
  public:
  void clear_damage();
  const ::KWMsg::BTLDamageInfo& damage() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLDamageInfo* release_damage();
  ::KWMsg::BTLDamageInfo* mutable_damage();
  void set_allocated_damage(::KWMsg::BTLDamageInfo* damage);
  private:
  const ::KWMsg::BTLDamageInfo& _internal_damage() const;
  ::KWMsg::BTLDamageInfo* _internal_mutable_damage();
  public:
  void unsafe_arena_set_allocated_damage(
      ::KWMsg::BTLDamageInfo* damage);
  ::KWMsg::BTLDamageInfo* unsafe_arena_release_damage();

  // .KWMsg.BTLHealInfo heal = 7;
  bool has_heal() const;
  private:
  bool _internal_has_heal() const;
  public:
  void clear_heal();
  const ::KWMsg::BTLHealInfo& heal() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLHealInfo* release_heal();
  ::KWMsg::BTLHealInfo* mutable_heal();
  void set_allocated_heal(::KWMsg::BTLHealInfo* heal);
  private:
  const ::KWMsg::BTLHealInfo& _internal_heal() const;
  ::KWMsg::BTLHealInfo* _internal_mutable_heal();
  public:
  void unsafe_arena_set_allocated_heal(
      ::KWMsg::BTLHealInfo* heal);
  ::KWMsg::BTLHealInfo* unsafe_arena_release_heal();

  // .KWMsg.BTLSummonInfo summon = 8;
  bool has_summon() const;
  private:
  bool _internal_has_summon() const;
  public:
  void clear_summon();
  const ::KWMsg::BTLSummonInfo& summon() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLSummonInfo* release_summon();
  ::KWMsg::BTLSummonInfo* mutable_summon();
  void set_allocated_summon(::KWMsg::BTLSummonInfo* summon);
  private:
  const ::KWMsg::BTLSummonInfo& _internal_summon() const;
  ::KWMsg::BTLSummonInfo* _internal_mutable_summon();
  public:
  void unsafe_arena_set_allocated_summon(
      ::KWMsg::BTLSummonInfo* summon);
  ::KWMsg::BTLSummonInfo* unsafe_arena_release_summon();

  // .KWMsg.BTLBuffInfo buff = 9;
  bool has_buff() const;
  private:
  bool _internal_has_buff() const;
  public:
  void clear_buff();
  const ::KWMsg::BTLBuffInfo& buff() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLBuffInfo* release_buff();
  ::KWMsg::BTLBuffInfo* mutable_buff();
  void set_allocated_buff(::KWMsg::BTLBuffInfo* buff);
  private:
  const ::KWMsg::BTLBuffInfo& _internal_buff() const;
  ::KWMsg::BTLBuffInfo* _internal_mutable_buff();
  public:
  void unsafe_arena_set_allocated_buff(
      ::KWMsg::BTLBuffInfo* buff);
  ::KWMsg::BTLBuffInfo* unsafe_arena_release_buff();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:KWMsg.BTLEffect)
 private:
  class _Internal;
  void set_has_damage();
  void set_has_heal();
  void set_has_summon();
  void set_has_buff();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity > entities_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mid_;
  ::KWMsg::Ident* caster_id_;
  ::KWMsg::Ident* target_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::KWMsg::BTLDamageInfo* damage_;
    ::KWMsg::BTLHealInfo* heal_;
    ::KWMsg::BTLSummonInfo* summon_;
    ::KWMsg::BTLBuffInfo* buff_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLDamageInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLDamageInfo) */ {
 public:
  inline BTLDamageInfo() : BTLDamageInfo(nullptr) {}
  ~BTLDamageInfo() override;
  explicit constexpr BTLDamageInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLDamageInfo(const BTLDamageInfo& from);
  BTLDamageInfo(BTLDamageInfo&& from) noexcept
    : BTLDamageInfo() {
    *this = ::std::move(from);
  }

  inline BTLDamageInfo& operator=(const BTLDamageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLDamageInfo& operator=(BTLDamageInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLDamageInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLDamageInfo* internal_default_instance() {
    return reinterpret_cast<const BTLDamageInfo*>(
               &_BTLDamageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(BTLDamageInfo& a, BTLDamageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLDamageInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLDamageInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLDamageInfo* New() const final {
    return new BTLDamageInfo();
  }

  BTLDamageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLDamageInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLDamageInfo& from);
  void MergeFrom(const BTLDamageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLDamageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLDamageInfo";
  }
  protected:
  explicit BTLDamageInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShieldChangeFieldNumber = 4,
    kDisplayValFieldNumber = 1,
    kHpChangeFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // .KWMsg.BTLShieldChangeInfo shield_change = 4;
  bool has_shield_change() const;
  private:
  bool _internal_has_shield_change() const;
  public:
  void clear_shield_change();
  const ::KWMsg::BTLShieldChangeInfo& shield_change() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLShieldChangeInfo* release_shield_change();
  ::KWMsg::BTLShieldChangeInfo* mutable_shield_change();
  void set_allocated_shield_change(::KWMsg::BTLShieldChangeInfo* shield_change);
  private:
  const ::KWMsg::BTLShieldChangeInfo& _internal_shield_change() const;
  ::KWMsg::BTLShieldChangeInfo* _internal_mutable_shield_change();
  public:
  void unsafe_arena_set_allocated_shield_change(
      ::KWMsg::BTLShieldChangeInfo* shield_change);
  ::KWMsg::BTLShieldChangeInfo* unsafe_arena_release_shield_change();

  // int32 display_val = 1;
  void clear_display_val();
  ::PROTOBUF_NAMESPACE_ID::int32 display_val() const;
  void set_display_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_display_val() const;
  void _internal_set_display_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hp_change = 2;
  void clear_hp_change();
  ::PROTOBUF_NAMESPACE_ID::int32 hp_change() const;
  void set_hp_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp_change() const;
  void _internal_set_hp_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLDamageInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::BTLShieldChangeInfo* shield_change_;
  ::PROTOBUF_NAMESPACE_ID::int32 display_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_change_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLHealInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLHealInfo) */ {
 public:
  inline BTLHealInfo() : BTLHealInfo(nullptr) {}
  ~BTLHealInfo() override;
  explicit constexpr BTLHealInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLHealInfo(const BTLHealInfo& from);
  BTLHealInfo(BTLHealInfo&& from) noexcept
    : BTLHealInfo() {
    *this = ::std::move(from);
  }

  inline BTLHealInfo& operator=(const BTLHealInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLHealInfo& operator=(BTLHealInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLHealInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLHealInfo* internal_default_instance() {
    return reinterpret_cast<const BTLHealInfo*>(
               &_BTLHealInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(BTLHealInfo& a, BTLHealInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLHealInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLHealInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLHealInfo* New() const final {
    return new BTLHealInfo();
  }

  BTLHealInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLHealInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLHealInfo& from);
  void MergeFrom(const BTLHealInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLHealInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLHealInfo";
  }
  protected:
  explicit BTLHealInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDisplayValFieldNumber = 1,
    kHpChangeFieldNumber = 2,
    kFlagsFieldNumber = 3,
  };
  // int32 display_val = 1;
  void clear_display_val();
  ::PROTOBUF_NAMESPACE_ID::int32 display_val() const;
  void set_display_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_display_val() const;
  void _internal_set_display_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hp_change = 2;
  void clear_hp_change();
  ::PROTOBUF_NAMESPACE_ID::int32 hp_change() const;
  void set_hp_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hp_change() const;
  void _internal_set_hp_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 flags = 3;
  void clear_flags();
  ::PROTOBUF_NAMESPACE_ID::int32 flags() const;
  void set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flags() const;
  void _internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLHealInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 display_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 hp_change_;
  ::PROTOBUF_NAMESPACE_ID::int32 flags_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLSummonInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLSummonInfo) */ {
 public:
  inline BTLSummonInfo() : BTLSummonInfo(nullptr) {}
  ~BTLSummonInfo() override;
  explicit constexpr BTLSummonInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLSummonInfo(const BTLSummonInfo& from);
  BTLSummonInfo(BTLSummonInfo&& from) noexcept
    : BTLSummonInfo() {
    *this = ::std::move(from);
  }

  inline BTLSummonInfo& operator=(const BTLSummonInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLSummonInfo& operator=(BTLSummonInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLSummonInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLSummonInfo* internal_default_instance() {
    return reinterpret_cast<const BTLSummonInfo*>(
               &_BTLSummonInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(BTLSummonInfo& a, BTLSummonInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLSummonInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLSummonInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLSummonInfo* New() const final {
    return new BTLSummonInfo();
  }

  BTLSummonInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLSummonInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLSummonInfo& from);
  void MergeFrom(const BTLSummonInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLSummonInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLSummonInfo";
  }
  protected:
  explicit BTLSummonInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 1,
  };
  // repeated .KWMsg.BTLEntity entities = 1;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::KWMsg::BTLEntity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >*
      mutable_entities();
  private:
  const ::KWMsg::BTLEntity& _internal_entities(int index) const;
  ::KWMsg::BTLEntity* _internal_add_entities();
  public:
  const ::KWMsg::BTLEntity& entities(int index) const;
  ::KWMsg::BTLEntity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >&
      entities() const;

  // @@protoc_insertion_point(class_scope:KWMsg.BTLSummonInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity > entities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLBuffInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLBuffInfo) */ {
 public:
  inline BTLBuffInfo() : BTLBuffInfo(nullptr) {}
  ~BTLBuffInfo() override;
  explicit constexpr BTLBuffInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLBuffInfo(const BTLBuffInfo& from);
  BTLBuffInfo(BTLBuffInfo&& from) noexcept
    : BTLBuffInfo() {
    *this = ::std::move(from);
  }

  inline BTLBuffInfo& operator=(const BTLBuffInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLBuffInfo& operator=(BTLBuffInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLBuffInfo& default_instance() {
    return *internal_default_instance();
  }
  enum DataCase {
    kAddBuff = 1,
    kRemoveBuff = 2,
    kShieldChange = 3,
    kSealChange = 4,
    kStateChange = 5,
    DATA_NOT_SET = 0,
  };

  static inline const BTLBuffInfo* internal_default_instance() {
    return reinterpret_cast<const BTLBuffInfo*>(
               &_BTLBuffInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(BTLBuffInfo& a, BTLBuffInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLBuffInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLBuffInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLBuffInfo* New() const final {
    return new BTLBuffInfo();
  }

  BTLBuffInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLBuffInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLBuffInfo& from);
  void MergeFrom(const BTLBuffInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLBuffInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLBuffInfo";
  }
  protected:
  explicit BTLBuffInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAddBuffFieldNumber = 1,
    kRemoveBuffFieldNumber = 2,
    kShieldChangeFieldNumber = 3,
    kSealChangeFieldNumber = 4,
    kStateChangeFieldNumber = 5,
  };
  // .KWMsg.BTLAddBuffInfo add_buff = 1;
  bool has_add_buff() const;
  private:
  bool _internal_has_add_buff() const;
  public:
  void clear_add_buff();
  const ::KWMsg::BTLAddBuffInfo& add_buff() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLAddBuffInfo* release_add_buff();
  ::KWMsg::BTLAddBuffInfo* mutable_add_buff();
  void set_allocated_add_buff(::KWMsg::BTLAddBuffInfo* add_buff);
  private:
  const ::KWMsg::BTLAddBuffInfo& _internal_add_buff() const;
  ::KWMsg::BTLAddBuffInfo* _internal_mutable_add_buff();
  public:
  void unsafe_arena_set_allocated_add_buff(
      ::KWMsg::BTLAddBuffInfo* add_buff);
  ::KWMsg::BTLAddBuffInfo* unsafe_arena_release_add_buff();

  // .KWMsg.BTLRemoveBuffInfo remove_buff = 2;
  bool has_remove_buff() const;
  private:
  bool _internal_has_remove_buff() const;
  public:
  void clear_remove_buff();
  const ::KWMsg::BTLRemoveBuffInfo& remove_buff() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLRemoveBuffInfo* release_remove_buff();
  ::KWMsg::BTLRemoveBuffInfo* mutable_remove_buff();
  void set_allocated_remove_buff(::KWMsg::BTLRemoveBuffInfo* remove_buff);
  private:
  const ::KWMsg::BTLRemoveBuffInfo& _internal_remove_buff() const;
  ::KWMsg::BTLRemoveBuffInfo* _internal_mutable_remove_buff();
  public:
  void unsafe_arena_set_allocated_remove_buff(
      ::KWMsg::BTLRemoveBuffInfo* remove_buff);
  ::KWMsg::BTLRemoveBuffInfo* unsafe_arena_release_remove_buff();

  // .KWMsg.BTLShieldChangeInfo shield_change = 3;
  bool has_shield_change() const;
  private:
  bool _internal_has_shield_change() const;
  public:
  void clear_shield_change();
  const ::KWMsg::BTLShieldChangeInfo& shield_change() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLShieldChangeInfo* release_shield_change();
  ::KWMsg::BTLShieldChangeInfo* mutable_shield_change();
  void set_allocated_shield_change(::KWMsg::BTLShieldChangeInfo* shield_change);
  private:
  const ::KWMsg::BTLShieldChangeInfo& _internal_shield_change() const;
  ::KWMsg::BTLShieldChangeInfo* _internal_mutable_shield_change();
  public:
  void unsafe_arena_set_allocated_shield_change(
      ::KWMsg::BTLShieldChangeInfo* shield_change);
  ::KWMsg::BTLShieldChangeInfo* unsafe_arena_release_shield_change();

  // .KWMsg.BTLSealChangeInfo seal_change = 4;
  bool has_seal_change() const;
  private:
  bool _internal_has_seal_change() const;
  public:
  void clear_seal_change();
  const ::KWMsg::BTLSealChangeInfo& seal_change() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLSealChangeInfo* release_seal_change();
  ::KWMsg::BTLSealChangeInfo* mutable_seal_change();
  void set_allocated_seal_change(::KWMsg::BTLSealChangeInfo* seal_change);
  private:
  const ::KWMsg::BTLSealChangeInfo& _internal_seal_change() const;
  ::KWMsg::BTLSealChangeInfo* _internal_mutable_seal_change();
  public:
  void unsafe_arena_set_allocated_seal_change(
      ::KWMsg::BTLSealChangeInfo* seal_change);
  ::KWMsg::BTLSealChangeInfo* unsafe_arena_release_seal_change();

  // .KWMsg.BTLStateChangeInfo state_change = 5;
  bool has_state_change() const;
  private:
  bool _internal_has_state_change() const;
  public:
  void clear_state_change();
  const ::KWMsg::BTLStateChangeInfo& state_change() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLStateChangeInfo* release_state_change();
  ::KWMsg::BTLStateChangeInfo* mutable_state_change();
  void set_allocated_state_change(::KWMsg::BTLStateChangeInfo* state_change);
  private:
  const ::KWMsg::BTLStateChangeInfo& _internal_state_change() const;
  ::KWMsg::BTLStateChangeInfo* _internal_mutable_state_change();
  public:
  void unsafe_arena_set_allocated_state_change(
      ::KWMsg::BTLStateChangeInfo* state_change);
  ::KWMsg::BTLStateChangeInfo* unsafe_arena_release_state_change();

  void clear_data();
  DataCase data_case() const;
  // @@protoc_insertion_point(class_scope:KWMsg.BTLBuffInfo)
 private:
  class _Internal;
  void set_has_add_buff();
  void set_has_remove_buff();
  void set_has_shield_change();
  void set_has_seal_change();
  void set_has_state_change();

  inline bool has_data() const;
  inline void clear_has_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  union DataUnion {
    constexpr DataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::KWMsg::BTLAddBuffInfo* add_buff_;
    ::KWMsg::BTLRemoveBuffInfo* remove_buff_;
    ::KWMsg::BTLShieldChangeInfo* shield_change_;
    ::KWMsg::BTLSealChangeInfo* seal_change_;
    ::KWMsg::BTLStateChangeInfo* state_change_;
  } data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLAddBuffInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLAddBuffInfo) */ {
 public:
  inline BTLAddBuffInfo() : BTLAddBuffInfo(nullptr) {}
  ~BTLAddBuffInfo() override;
  explicit constexpr BTLAddBuffInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLAddBuffInfo(const BTLAddBuffInfo& from);
  BTLAddBuffInfo(BTLAddBuffInfo&& from) noexcept
    : BTLAddBuffInfo() {
    *this = ::std::move(from);
  }

  inline BTLAddBuffInfo& operator=(const BTLAddBuffInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLAddBuffInfo& operator=(BTLAddBuffInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLAddBuffInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLAddBuffInfo* internal_default_instance() {
    return reinterpret_cast<const BTLAddBuffInfo*>(
               &_BTLAddBuffInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(BTLAddBuffInfo& a, BTLAddBuffInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLAddBuffInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLAddBuffInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLAddBuffInfo* New() const final {
    return new BTLAddBuffInfo();
  }

  BTLAddBuffInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLAddBuffInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLAddBuffInfo& from);
  void MergeFrom(const BTLAddBuffInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLAddBuffInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLAddBuffInfo";
  }
  protected:
  explicit BTLAddBuffInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffIdFieldNumber = 1,
  };
  // bytes buff_id = 1;
  void clear_buff_id();
  const std::string& buff_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buff_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buff_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_buff_id();
  void set_allocated_buff_id(std::string* buff_id);
  private:
  const std::string& _internal_buff_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buff_id(const std::string& value);
  std::string* _internal_mutable_buff_id();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLAddBuffInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buff_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLRemoveBuffInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLRemoveBuffInfo) */ {
 public:
  inline BTLRemoveBuffInfo() : BTLRemoveBuffInfo(nullptr) {}
  ~BTLRemoveBuffInfo() override;
  explicit constexpr BTLRemoveBuffInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLRemoveBuffInfo(const BTLRemoveBuffInfo& from);
  BTLRemoveBuffInfo(BTLRemoveBuffInfo&& from) noexcept
    : BTLRemoveBuffInfo() {
    *this = ::std::move(from);
  }

  inline BTLRemoveBuffInfo& operator=(const BTLRemoveBuffInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLRemoveBuffInfo& operator=(BTLRemoveBuffInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLRemoveBuffInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLRemoveBuffInfo* internal_default_instance() {
    return reinterpret_cast<const BTLRemoveBuffInfo*>(
               &_BTLRemoveBuffInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(BTLRemoveBuffInfo& a, BTLRemoveBuffInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLRemoveBuffInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLRemoveBuffInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLRemoveBuffInfo* New() const final {
    return new BTLRemoveBuffInfo();
  }

  BTLRemoveBuffInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLRemoveBuffInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLRemoveBuffInfo& from);
  void MergeFrom(const BTLRemoveBuffInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLRemoveBuffInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLRemoveBuffInfo";
  }
  protected:
  explicit BTLRemoveBuffInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffIdFieldNumber = 1,
  };
  // repeated bytes buff_id = 1;
  int buff_id_size() const;
  private:
  int _internal_buff_id_size() const;
  public:
  void clear_buff_id();
  const std::string& buff_id(int index) const;
  std::string* mutable_buff_id(int index);
  void set_buff_id(int index, const std::string& value);
  void set_buff_id(int index, std::string&& value);
  void set_buff_id(int index, const char* value);
  void set_buff_id(int index, const void* value, size_t size);
  std::string* add_buff_id();
  void add_buff_id(const std::string& value);
  void add_buff_id(std::string&& value);
  void add_buff_id(const char* value);
  void add_buff_id(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& buff_id() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_buff_id();
  private:
  const std::string& _internal_buff_id(int index) const;
  std::string* _internal_add_buff_id();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLRemoveBuffInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> buff_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLShieldChangeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLShieldChangeInfo) */ {
 public:
  inline BTLShieldChangeInfo() : BTLShieldChangeInfo(nullptr) {}
  ~BTLShieldChangeInfo() override;
  explicit constexpr BTLShieldChangeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLShieldChangeInfo(const BTLShieldChangeInfo& from);
  BTLShieldChangeInfo(BTLShieldChangeInfo&& from) noexcept
    : BTLShieldChangeInfo() {
    *this = ::std::move(from);
  }

  inline BTLShieldChangeInfo& operator=(const BTLShieldChangeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLShieldChangeInfo& operator=(BTLShieldChangeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLShieldChangeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLShieldChangeInfo* internal_default_instance() {
    return reinterpret_cast<const BTLShieldChangeInfo*>(
               &_BTLShieldChangeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(BTLShieldChangeInfo& a, BTLShieldChangeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLShieldChangeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLShieldChangeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLShieldChangeInfo* New() const final {
    return new BTLShieldChangeInfo();
  }

  BTLShieldChangeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLShieldChangeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLShieldChangeInfo& from);
  void MergeFrom(const BTLShieldChangeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLShieldChangeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLShieldChangeInfo";
  }
  protected:
  explicit BTLShieldChangeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffIdFieldNumber = 1,
    kShieldChangeFieldNumber = 2,
    kChangeModeFieldNumber = 3,
  };
  // bytes buff_id = 1;
  void clear_buff_id();
  const std::string& buff_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buff_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buff_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_buff_id();
  void set_allocated_buff_id(std::string* buff_id);
  private:
  const std::string& _internal_buff_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buff_id(const std::string& value);
  std::string* _internal_mutable_buff_id();
  public:

  // int32 shield_change = 2;
  void clear_shield_change();
  ::PROTOBUF_NAMESPACE_ID::int32 shield_change() const;
  void set_shield_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shield_change() const;
  void _internal_set_shield_change(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 change_mode = 3;
  void clear_change_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 change_mode() const;
  void set_change_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_change_mode() const;
  void _internal_set_change_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLShieldChangeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buff_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 shield_change_;
  ::PROTOBUF_NAMESPACE_ID::int32 change_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLSealChangeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLSealChangeInfo) */ {
 public:
  inline BTLSealChangeInfo() : BTLSealChangeInfo(nullptr) {}
  ~BTLSealChangeInfo() override;
  explicit constexpr BTLSealChangeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLSealChangeInfo(const BTLSealChangeInfo& from);
  BTLSealChangeInfo(BTLSealChangeInfo&& from) noexcept
    : BTLSealChangeInfo() {
    *this = ::std::move(from);
  }

  inline BTLSealChangeInfo& operator=(const BTLSealChangeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLSealChangeInfo& operator=(BTLSealChangeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLSealChangeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLSealChangeInfo* internal_default_instance() {
    return reinterpret_cast<const BTLSealChangeInfo*>(
               &_BTLSealChangeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(BTLSealChangeInfo& a, BTLSealChangeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLSealChangeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLSealChangeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLSealChangeInfo* New() const final {
    return new BTLSealChangeInfo();
  }

  BTLSealChangeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLSealChangeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLSealChangeInfo& from);
  void MergeFrom(const BTLSealChangeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLSealChangeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLSealChangeInfo";
  }
  protected:
  explicit BTLSealChangeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSkillsFieldNumber = 1,
    kSealModeFieldNumber = 2,
  };
  // repeated bytes skills = 1;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  const std::string& skills(int index) const;
  std::string* mutable_skills(int index);
  void set_skills(int index, const std::string& value);
  void set_skills(int index, std::string&& value);
  void set_skills(int index, const char* value);
  void set_skills(int index, const void* value, size_t size);
  std::string* add_skills();
  void add_skills(const std::string& value);
  void add_skills(std::string&& value);
  void add_skills(const char* value);
  void add_skills(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& skills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_skills();
  private:
  const std::string& _internal_skills(int index) const;
  std::string* _internal_add_skills();
  public:

  // int32 seal_mode = 2;
  void clear_seal_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 seal_mode() const;
  void set_seal_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_seal_mode() const;
  void _internal_set_seal_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLSealChangeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> skills_;
  ::PROTOBUF_NAMESPACE_ID::int32 seal_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLStateChangeInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLStateChangeInfo) */ {
 public:
  inline BTLStateChangeInfo() : BTLStateChangeInfo(nullptr) {}
  ~BTLStateChangeInfo() override;
  explicit constexpr BTLStateChangeInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLStateChangeInfo(const BTLStateChangeInfo& from);
  BTLStateChangeInfo(BTLStateChangeInfo&& from) noexcept
    : BTLStateChangeInfo() {
    *this = ::std::move(from);
  }

  inline BTLStateChangeInfo& operator=(const BTLStateChangeInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLStateChangeInfo& operator=(BTLStateChangeInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLStateChangeInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLStateChangeInfo* internal_default_instance() {
    return reinterpret_cast<const BTLStateChangeInfo*>(
               &_BTLStateChangeInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(BTLStateChangeInfo& a, BTLStateChangeInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLStateChangeInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLStateChangeInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLStateChangeInfo* New() const final {
    return new BTLStateChangeInfo();
  }

  BTLStateChangeInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLStateChangeInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLStateChangeInfo& from);
  void MergeFrom(const BTLStateChangeInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLStateChangeInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLStateChangeInfo";
  }
  protected:
  explicit BTLStateChangeInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuffIdFieldNumber = 1,
    kStateFieldNumber = 2,
    kChangeModeFieldNumber = 3,
  };
  // bytes buff_id = 1;
  void clear_buff_id();
  const std::string& buff_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_buff_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_buff_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_buff_id();
  void set_allocated_buff_id(std::string* buff_id);
  private:
  const std::string& _internal_buff_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_buff_id(const std::string& value);
  std::string* _internal_mutable_buff_id();
  public:

  // int32 state = 2;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 change_mode = 3;
  void clear_change_mode();
  ::PROTOBUF_NAMESPACE_ID::int32 change_mode() const;
  void set_change_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_change_mode() const;
  void _internal_set_change_mode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLStateChangeInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr buff_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  ::PROTOBUF_NAMESPACE_ID::int32 change_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLChangedEntity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLChangedEntity) */ {
 public:
  inline BTLChangedEntity() : BTLChangedEntity(nullptr) {}
  ~BTLChangedEntity() override;
  explicit constexpr BTLChangedEntity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLChangedEntity(const BTLChangedEntity& from);
  BTLChangedEntity(BTLChangedEntity&& from) noexcept
    : BTLChangedEntity() {
    *this = ::std::move(from);
  }

  inline BTLChangedEntity& operator=(const BTLChangedEntity& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLChangedEntity& operator=(BTLChangedEntity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLChangedEntity& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLChangedEntity* internal_default_instance() {
    return reinterpret_cast<const BTLChangedEntity*>(
               &_BTLChangedEntity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(BTLChangedEntity& a, BTLChangedEntity& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLChangedEntity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLChangedEntity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLChangedEntity* New() const final {
    return new BTLChangedEntity();
  }

  BTLChangedEntity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLChangedEntity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLChangedEntity& from);
  void MergeFrom(const BTLChangedEntity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLChangedEntity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLChangedEntity";
  }
  protected:
  explicit BTLChangedEntity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntitiesFieldNumber = 1,
  };
  // repeated .KWMsg.BTLEntity entities = 1;
  int entities_size() const;
  private:
  int _internal_entities_size() const;
  public:
  void clear_entities();
  ::KWMsg::BTLEntity* mutable_entities(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >*
      mutable_entities();
  private:
  const ::KWMsg::BTLEntity& _internal_entities(int index) const;
  ::KWMsg::BTLEntity* _internal_add_entities();
  public:
  const ::KWMsg::BTLEntity& entities(int index) const;
  ::KWMsg::BTLEntity* add_entities();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >&
      entities() const;

  // @@protoc_insertion_point(class_scope:KWMsg.BTLChangedEntity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity > entities_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class ReqBTLPullMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBTLPullMsg) */ {
 public:
  inline ReqBTLPullMsg() : ReqBTLPullMsg(nullptr) {}
  ~ReqBTLPullMsg() override;
  explicit constexpr ReqBTLPullMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBTLPullMsg(const ReqBTLPullMsg& from);
  ReqBTLPullMsg(ReqBTLPullMsg&& from) noexcept
    : ReqBTLPullMsg() {
    *this = ::std::move(from);
  }

  inline ReqBTLPullMsg& operator=(const ReqBTLPullMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBTLPullMsg& operator=(ReqBTLPullMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBTLPullMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBTLPullMsg* internal_default_instance() {
    return reinterpret_cast<const ReqBTLPullMsg*>(
               &_ReqBTLPullMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(ReqBTLPullMsg& a, ReqBTLPullMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBTLPullMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBTLPullMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBTLPullMsg* New() const final {
    return new ReqBTLPullMsg();
  }

  ReqBTLPullMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBTLPullMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBTLPullMsg& from);
  void MergeFrom(const ReqBTLPullMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBTLPullMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBTLPullMsg";
  }
  protected:
  explicit ReqBTLPullMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kUniqueIdFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 unique_id = 2;
  void clear_unique_id();
  ::PROTOBUF_NAMESPACE_ID::int32 unique_id() const;
  void set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unique_id() const;
  void _internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBTLPullMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 unique_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class AckBTLPullMsg_BTLAckMsgWrapper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper) */ {
 public:
  inline AckBTLPullMsg_BTLAckMsgWrapper() : AckBTLPullMsg_BTLAckMsgWrapper(nullptr) {}
  ~AckBTLPullMsg_BTLAckMsgWrapper() override;
  explicit constexpr AckBTLPullMsg_BTLAckMsgWrapper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBTLPullMsg_BTLAckMsgWrapper(const AckBTLPullMsg_BTLAckMsgWrapper& from);
  AckBTLPullMsg_BTLAckMsgWrapper(AckBTLPullMsg_BTLAckMsgWrapper&& from) noexcept
    : AckBTLPullMsg_BTLAckMsgWrapper() {
    *this = ::std::move(from);
  }

  inline AckBTLPullMsg_BTLAckMsgWrapper& operator=(const AckBTLPullMsg_BTLAckMsgWrapper& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBTLPullMsg_BTLAckMsgWrapper& operator=(AckBTLPullMsg_BTLAckMsgWrapper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBTLPullMsg_BTLAckMsgWrapper& default_instance() {
    return *internal_default_instance();
  }
  enum MsgDataCase {
    kInfo = 2,
    kPk = 3,
    kAction = 4,
    MSG_DATA_NOT_SET = 0,
  };

  static inline const AckBTLPullMsg_BTLAckMsgWrapper* internal_default_instance() {
    return reinterpret_cast<const AckBTLPullMsg_BTLAckMsgWrapper*>(
               &_AckBTLPullMsg_BTLAckMsgWrapper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(AckBTLPullMsg_BTLAckMsgWrapper& a, AckBTLPullMsg_BTLAckMsgWrapper& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBTLPullMsg_BTLAckMsgWrapper* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBTLPullMsg_BTLAckMsgWrapper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBTLPullMsg_BTLAckMsgWrapper* New() const final {
    return new AckBTLPullMsg_BTLAckMsgWrapper();
  }

  AckBTLPullMsg_BTLAckMsgWrapper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBTLPullMsg_BTLAckMsgWrapper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBTLPullMsg_BTLAckMsgWrapper& from);
  void MergeFrom(const AckBTLPullMsg_BTLAckMsgWrapper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBTLPullMsg_BTLAckMsgWrapper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBTLPullMsg.BTLAckMsgWrapper";
  }
  protected:
  explicit AckBTLPullMsg_BTLAckMsgWrapper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgTypeFieldNumber = 1,
    kInfoFieldNumber = 2,
    kPkFieldNumber = 3,
    kActionFieldNumber = 4,
  };
  // int32 msg_type = 1;
  void clear_msg_type();
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type() const;
  void set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msg_type() const;
  void _internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.AckBTLInfo info = 2;
  bool has_info() const;
  private:
  bool _internal_has_info() const;
  public:
  void clear_info();
  const ::KWMsg::AckBTLInfo& info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::AckBTLInfo* release_info();
  ::KWMsg::AckBTLInfo* mutable_info();
  void set_allocated_info(::KWMsg::AckBTLInfo* info);
  private:
  const ::KWMsg::AckBTLInfo& _internal_info() const;
  ::KWMsg::AckBTLInfo* _internal_mutable_info();
  public:
  void unsafe_arena_set_allocated_info(
      ::KWMsg::AckBTLInfo* info);
  ::KWMsg::AckBTLInfo* unsafe_arena_release_info();

  // .KWMsg.AckBTLPk pk = 3;
  bool has_pk() const;
  private:
  bool _internal_has_pk() const;
  public:
  void clear_pk();
  const ::KWMsg::AckBTLPk& pk() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::AckBTLPk* release_pk();
  ::KWMsg::AckBTLPk* mutable_pk();
  void set_allocated_pk(::KWMsg::AckBTLPk* pk);
  private:
  const ::KWMsg::AckBTLPk& _internal_pk() const;
  ::KWMsg::AckBTLPk* _internal_mutable_pk();
  public:
  void unsafe_arena_set_allocated_pk(
      ::KWMsg::AckBTLPk* pk);
  ::KWMsg::AckBTLPk* unsafe_arena_release_pk();

  // .KWMsg.AckBTLAction action = 4;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  const ::KWMsg::AckBTLAction& action() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::AckBTLAction* release_action();
  ::KWMsg::AckBTLAction* mutable_action();
  void set_allocated_action(::KWMsg::AckBTLAction* action);
  private:
  const ::KWMsg::AckBTLAction& _internal_action() const;
  ::KWMsg::AckBTLAction* _internal_mutable_action();
  public:
  void unsafe_arena_set_allocated_action(
      ::KWMsg::AckBTLAction* action);
  ::KWMsg::AckBTLAction* unsafe_arena_release_action();

  void clear_msg_data();
  MsgDataCase msg_data_case() const;
  // @@protoc_insertion_point(class_scope:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper)
 private:
  class _Internal;
  void set_has_info();
  void set_has_pk();
  void set_has_action();

  inline bool has_msg_data() const;
  inline void clear_has_msg_data();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 msg_type_;
  union MsgDataUnion {
    constexpr MsgDataUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::KWMsg::AckBTLInfo* info_;
    ::KWMsg::AckBTLPk* pk_;
    ::KWMsg::AckBTLAction* action_;
  } msg_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class AckBTLPullMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBTLPullMsg) */ {
 public:
  inline AckBTLPullMsg() : AckBTLPullMsg(nullptr) {}
  ~AckBTLPullMsg() override;
  explicit constexpr AckBTLPullMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBTLPullMsg(const AckBTLPullMsg& from);
  AckBTLPullMsg(AckBTLPullMsg&& from) noexcept
    : AckBTLPullMsg() {
    *this = ::std::move(from);
  }

  inline AckBTLPullMsg& operator=(const AckBTLPullMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBTLPullMsg& operator=(AckBTLPullMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBTLPullMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBTLPullMsg* internal_default_instance() {
    return reinterpret_cast<const AckBTLPullMsg*>(
               &_AckBTLPullMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(AckBTLPullMsg& a, AckBTLPullMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBTLPullMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBTLPullMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBTLPullMsg* New() const final {
    return new AckBTLPullMsg();
  }

  AckBTLPullMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBTLPullMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBTLPullMsg& from);
  void MergeFrom(const AckBTLPullMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBTLPullMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBTLPullMsg";
  }
  protected:
  explicit AckBTLPullMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef AckBTLPullMsg_BTLAckMsgWrapper BTLAckMsgWrapper;

  // accessors -------------------------------------------------------

  enum : int {
    kBattleAckMsgsFieldNumber = 1,
  };
  // repeated .KWMsg.AckBTLPullMsg.BTLAckMsgWrapper battle_ack_msgs = 1;
  int battle_ack_msgs_size() const;
  private:
  int _internal_battle_ack_msgs_size() const;
  public:
  void clear_battle_ack_msgs();
  ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper* mutable_battle_ack_msgs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper >*
      mutable_battle_ack_msgs();
  private:
  const ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper& _internal_battle_ack_msgs(int index) const;
  ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper* _internal_add_battle_ack_msgs();
  public:
  const ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper& battle_ack_msgs(int index) const;
  ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper* add_battle_ack_msgs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper >&
      battle_ack_msgs() const;

  // @@protoc_insertion_point(class_scope:KWMsg.AckBTLPullMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper > battle_ack_msgs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class ReqBTLToggleAutoMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBTLToggleAutoMode) */ {
 public:
  inline ReqBTLToggleAutoMode() : ReqBTLToggleAutoMode(nullptr) {}
  ~ReqBTLToggleAutoMode() override;
  explicit constexpr ReqBTLToggleAutoMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBTLToggleAutoMode(const ReqBTLToggleAutoMode& from);
  ReqBTLToggleAutoMode(ReqBTLToggleAutoMode&& from) noexcept
    : ReqBTLToggleAutoMode() {
    *this = ::std::move(from);
  }

  inline ReqBTLToggleAutoMode& operator=(const ReqBTLToggleAutoMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBTLToggleAutoMode& operator=(ReqBTLToggleAutoMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBTLToggleAutoMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBTLToggleAutoMode* internal_default_instance() {
    return reinterpret_cast<const ReqBTLToggleAutoMode*>(
               &_ReqBTLToggleAutoMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ReqBTLToggleAutoMode& a, ReqBTLToggleAutoMode& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBTLToggleAutoMode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBTLToggleAutoMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBTLToggleAutoMode* New() const final {
    return new ReqBTLToggleAutoMode();
  }

  ReqBTLToggleAutoMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBTLToggleAutoMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBTLToggleAutoMode& from);
  void MergeFrom(const ReqBTLToggleAutoMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBTLToggleAutoMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBTLToggleAutoMode";
  }
  protected:
  explicit ReqBTLToggleAutoMode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kToggleFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 toggle = 2;
  void clear_toggle();
  ::PROTOBUF_NAMESPACE_ID::int32 toggle() const;
  void set_toggle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toggle() const;
  void _internal_set_toggle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBTLToggleAutoMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 toggle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class AckBTLToggleAutoMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBTLToggleAutoMode) */ {
 public:
  inline AckBTLToggleAutoMode() : AckBTLToggleAutoMode(nullptr) {}
  ~AckBTLToggleAutoMode() override;
  explicit constexpr AckBTLToggleAutoMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBTLToggleAutoMode(const AckBTLToggleAutoMode& from);
  AckBTLToggleAutoMode(AckBTLToggleAutoMode&& from) noexcept
    : AckBTLToggleAutoMode() {
    *this = ::std::move(from);
  }

  inline AckBTLToggleAutoMode& operator=(const AckBTLToggleAutoMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBTLToggleAutoMode& operator=(AckBTLToggleAutoMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBTLToggleAutoMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBTLToggleAutoMode* internal_default_instance() {
    return reinterpret_cast<const AckBTLToggleAutoMode*>(
               &_AckBTLToggleAutoMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(AckBTLToggleAutoMode& a, AckBTLToggleAutoMode& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBTLToggleAutoMode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBTLToggleAutoMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBTLToggleAutoMode* New() const final {
    return new AckBTLToggleAutoMode();
  }

  AckBTLToggleAutoMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBTLToggleAutoMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBTLToggleAutoMode& from);
  void MergeFrom(const AckBTLToggleAutoMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBTLToggleAutoMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBTLToggleAutoMode";
  }
  protected:
  explicit AckBTLToggleAutoMode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAutoModesFieldNumber = 3,
    kCodeFieldNumber = 1,
    kToggleFieldNumber = 2,
  };
  // repeated .KWMsg.BTLEntityAutoMode auto_modes = 3;
  int auto_modes_size() const;
  private:
  int _internal_auto_modes_size() const;
  public:
  void clear_auto_modes();
  ::KWMsg::BTLEntityAutoMode* mutable_auto_modes(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntityAutoMode >*
      mutable_auto_modes();
  private:
  const ::KWMsg::BTLEntityAutoMode& _internal_auto_modes(int index) const;
  ::KWMsg::BTLEntityAutoMode* _internal_add_auto_modes();
  public:
  const ::KWMsg::BTLEntityAutoMode& auto_modes(int index) const;
  ::KWMsg::BTLEntityAutoMode* add_auto_modes();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntityAutoMode >&
      auto_modes() const;

  // .KWMsg.EGameEventCode code = 1;
  void clear_code();
  ::KWMsg::EGameEventCode code() const;
  void set_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_code() const;
  void _internal_set_code(::KWMsg::EGameEventCode value);
  public:

  // int32 toggle = 2;
  void clear_toggle();
  ::PROTOBUF_NAMESPACE_ID::int32 toggle() const;
  void set_toggle(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toggle() const;
  void _internal_set_toggle(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBTLToggleAutoMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntityAutoMode > auto_modes_;
  int code_;
  ::PROTOBUF_NAMESPACE_ID::int32 toggle_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLEntityAutoMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLEntityAutoMode) */ {
 public:
  inline BTLEntityAutoMode() : BTLEntityAutoMode(nullptr) {}
  ~BTLEntityAutoMode() override;
  explicit constexpr BTLEntityAutoMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLEntityAutoMode(const BTLEntityAutoMode& from);
  BTLEntityAutoMode(BTLEntityAutoMode&& from) noexcept
    : BTLEntityAutoMode() {
    *this = ::std::move(from);
  }

  inline BTLEntityAutoMode& operator=(const BTLEntityAutoMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLEntityAutoMode& operator=(BTLEntityAutoMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLEntityAutoMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLEntityAutoMode* internal_default_instance() {
    return reinterpret_cast<const BTLEntityAutoMode*>(
               &_BTLEntityAutoMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(BTLEntityAutoMode& a, BTLEntityAutoMode& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLEntityAutoMode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLEntityAutoMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLEntityAutoMode* New() const final {
    return new BTLEntityAutoMode();
  }

  BTLEntityAutoMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLEntityAutoMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLEntityAutoMode& from);
  void MergeFrom(const BTLEntityAutoMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLEntityAutoMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLEntityAutoMode";
  }
  protected:
  explicit BTLEntityAutoMode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntityIdFieldNumber = 1,
    kAutoModeFieldNumber = 2,
  };
  // .KWMsg.Ident entity_id = 1;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const ::KWMsg::Ident& entity_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_entity_id();
  ::KWMsg::Ident* mutable_entity_id();
  void set_allocated_entity_id(::KWMsg::Ident* entity_id);
  private:
  const ::KWMsg::Ident& _internal_entity_id() const;
  ::KWMsg::Ident* _internal_mutable_entity_id();
  public:
  void unsafe_arena_set_allocated_entity_id(
      ::KWMsg::Ident* entity_id);
  ::KWMsg::Ident* unsafe_arena_release_entity_id();

  // .KWMsg.BTLAutoMode auto_mode = 2;
  void clear_auto_mode();
  ::KWMsg::BTLAutoMode auto_mode() const;
  void set_auto_mode(::KWMsg::BTLAutoMode value);
  private:
  ::KWMsg::BTLAutoMode _internal_auto_mode() const;
  void _internal_set_auto_mode(::KWMsg::BTLAutoMode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLEntityAutoMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* entity_id_;
  int auto_mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class ReqBTLUpdateEntityAutoMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBTLUpdateEntityAutoMode) */ {
 public:
  inline ReqBTLUpdateEntityAutoMode() : ReqBTLUpdateEntityAutoMode(nullptr) {}
  ~ReqBTLUpdateEntityAutoMode() override;
  explicit constexpr ReqBTLUpdateEntityAutoMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBTLUpdateEntityAutoMode(const ReqBTLUpdateEntityAutoMode& from);
  ReqBTLUpdateEntityAutoMode(ReqBTLUpdateEntityAutoMode&& from) noexcept
    : ReqBTLUpdateEntityAutoMode() {
    *this = ::std::move(from);
  }

  inline ReqBTLUpdateEntityAutoMode& operator=(const ReqBTLUpdateEntityAutoMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBTLUpdateEntityAutoMode& operator=(ReqBTLUpdateEntityAutoMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBTLUpdateEntityAutoMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBTLUpdateEntityAutoMode* internal_default_instance() {
    return reinterpret_cast<const ReqBTLUpdateEntityAutoMode*>(
               &_ReqBTLUpdateEntityAutoMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ReqBTLUpdateEntityAutoMode& a, ReqBTLUpdateEntityAutoMode& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBTLUpdateEntityAutoMode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBTLUpdateEntityAutoMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBTLUpdateEntityAutoMode* New() const final {
    return new ReqBTLUpdateEntityAutoMode();
  }

  ReqBTLUpdateEntityAutoMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBTLUpdateEntityAutoMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBTLUpdateEntityAutoMode& from);
  void MergeFrom(const ReqBTLUpdateEntityAutoMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBTLUpdateEntityAutoMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBTLUpdateEntityAutoMode";
  }
  protected:
  explicit ReqBTLUpdateEntityAutoMode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kModeFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.BTLEntityAutoMode mode = 2;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  const ::KWMsg::BTLEntityAutoMode& mode() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLEntityAutoMode* release_mode();
  ::KWMsg::BTLEntityAutoMode* mutable_mode();
  void set_allocated_mode(::KWMsg::BTLEntityAutoMode* mode);
  private:
  const ::KWMsg::BTLEntityAutoMode& _internal_mode() const;
  ::KWMsg::BTLEntityAutoMode* _internal_mutable_mode();
  public:
  void unsafe_arena_set_allocated_mode(
      ::KWMsg::BTLEntityAutoMode* mode);
  ::KWMsg::BTLEntityAutoMode* unsafe_arena_release_mode();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBTLUpdateEntityAutoMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::BTLEntityAutoMode* mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class AckBTLUpdateEntityAutoMode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBTLUpdateEntityAutoMode) */ {
 public:
  inline AckBTLUpdateEntityAutoMode() : AckBTLUpdateEntityAutoMode(nullptr) {}
  ~AckBTLUpdateEntityAutoMode() override;
  explicit constexpr AckBTLUpdateEntityAutoMode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBTLUpdateEntityAutoMode(const AckBTLUpdateEntityAutoMode& from);
  AckBTLUpdateEntityAutoMode(AckBTLUpdateEntityAutoMode&& from) noexcept
    : AckBTLUpdateEntityAutoMode() {
    *this = ::std::move(from);
  }

  inline AckBTLUpdateEntityAutoMode& operator=(const AckBTLUpdateEntityAutoMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBTLUpdateEntityAutoMode& operator=(AckBTLUpdateEntityAutoMode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBTLUpdateEntityAutoMode& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBTLUpdateEntityAutoMode* internal_default_instance() {
    return reinterpret_cast<const AckBTLUpdateEntityAutoMode*>(
               &_AckBTLUpdateEntityAutoMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(AckBTLUpdateEntityAutoMode& a, AckBTLUpdateEntityAutoMode& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBTLUpdateEntityAutoMode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBTLUpdateEntityAutoMode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBTLUpdateEntityAutoMode* New() const final {
    return new AckBTLUpdateEntityAutoMode();
  }

  AckBTLUpdateEntityAutoMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBTLUpdateEntityAutoMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBTLUpdateEntityAutoMode& from);
  void MergeFrom(const AckBTLUpdateEntityAutoMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBTLUpdateEntityAutoMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBTLUpdateEntityAutoMode";
  }
  protected:
  explicit AckBTLUpdateEntityAutoMode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModeFieldNumber = 2,
    kCodeFieldNumber = 1,
  };
  // .KWMsg.BTLEntityAutoMode mode = 2;
  bool has_mode() const;
  private:
  bool _internal_has_mode() const;
  public:
  void clear_mode();
  const ::KWMsg::BTLEntityAutoMode& mode() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLEntityAutoMode* release_mode();
  ::KWMsg::BTLEntityAutoMode* mutable_mode();
  void set_allocated_mode(::KWMsg::BTLEntityAutoMode* mode);
  private:
  const ::KWMsg::BTLEntityAutoMode& _internal_mode() const;
  ::KWMsg::BTLEntityAutoMode* _internal_mutable_mode();
  public:
  void unsafe_arena_set_allocated_mode(
      ::KWMsg::BTLEntityAutoMode* mode);
  ::KWMsg::BTLEntityAutoMode* unsafe_arena_release_mode();

  // .KWMsg.EGameEventCode code = 1;
  void clear_code();
  ::KWMsg::EGameEventCode code() const;
  void set_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_code() const;
  void _internal_set_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBTLUpdateEntityAutoMode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::BTLEntityAutoMode* mode_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class ReqBTLSetPrioTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBTLSetPrioTarget) */ {
 public:
  inline ReqBTLSetPrioTarget() : ReqBTLSetPrioTarget(nullptr) {}
  ~ReqBTLSetPrioTarget() override;
  explicit constexpr ReqBTLSetPrioTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBTLSetPrioTarget(const ReqBTLSetPrioTarget& from);
  ReqBTLSetPrioTarget(ReqBTLSetPrioTarget&& from) noexcept
    : ReqBTLSetPrioTarget() {
    *this = ::std::move(from);
  }

  inline ReqBTLSetPrioTarget& operator=(const ReqBTLSetPrioTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBTLSetPrioTarget& operator=(ReqBTLSetPrioTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBTLSetPrioTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBTLSetPrioTarget* internal_default_instance() {
    return reinterpret_cast<const ReqBTLSetPrioTarget*>(
               &_ReqBTLSetPrioTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ReqBTLSetPrioTarget& a, ReqBTLSetPrioTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBTLSetPrioTarget* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBTLSetPrioTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBTLSetPrioTarget* New() const final {
    return new ReqBTLSetPrioTarget();
  }

  ReqBTLSetPrioTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBTLSetPrioTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBTLSetPrioTarget& from);
  void MergeFrom(const ReqBTLSetPrioTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBTLSetPrioTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBTLSetPrioTarget";
  }
  protected:
  explicit ReqBTLSetPrioTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kEntityIdFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident entity_id = 2;
  bool has_entity_id() const;
  private:
  bool _internal_has_entity_id() const;
  public:
  void clear_entity_id();
  const ::KWMsg::Ident& entity_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_entity_id();
  ::KWMsg::Ident* mutable_entity_id();
  void set_allocated_entity_id(::KWMsg::Ident* entity_id);
  private:
  const ::KWMsg::Ident& _internal_entity_id() const;
  ::KWMsg::Ident* _internal_mutable_entity_id();
  public:
  void unsafe_arena_set_allocated_entity_id(
      ::KWMsg::Ident* entity_id);
  ::KWMsg::Ident* unsafe_arena_release_entity_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBTLSetPrioTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* entity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class AckBTLSetPrioTarget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBTLSetPrioTarget) */ {
 public:
  inline AckBTLSetPrioTarget() : AckBTLSetPrioTarget(nullptr) {}
  ~AckBTLSetPrioTarget() override;
  explicit constexpr AckBTLSetPrioTarget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBTLSetPrioTarget(const AckBTLSetPrioTarget& from);
  AckBTLSetPrioTarget(AckBTLSetPrioTarget&& from) noexcept
    : AckBTLSetPrioTarget() {
    *this = ::std::move(from);
  }

  inline AckBTLSetPrioTarget& operator=(const AckBTLSetPrioTarget& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBTLSetPrioTarget& operator=(AckBTLSetPrioTarget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBTLSetPrioTarget& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBTLSetPrioTarget* internal_default_instance() {
    return reinterpret_cast<const AckBTLSetPrioTarget*>(
               &_AckBTLSetPrioTarget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(AckBTLSetPrioTarget& a, AckBTLSetPrioTarget& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBTLSetPrioTarget* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBTLSetPrioTarget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBTLSetPrioTarget* New() const final {
    return new AckBTLSetPrioTarget();
  }

  AckBTLSetPrioTarget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBTLSetPrioTarget>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBTLSetPrioTarget& from);
  void MergeFrom(const AckBTLSetPrioTarget& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBTLSetPrioTarget* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBTLSetPrioTarget";
  }
  protected:
  explicit AckBTLSetPrioTarget(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPrioOppositeTargetFieldNumber = 2,
    kPrioTeammateTargetFieldNumber = 3,
    kCodeFieldNumber = 1,
  };
  // .KWMsg.Ident prio_opposite_target = 2;
  bool has_prio_opposite_target() const;
  private:
  bool _internal_has_prio_opposite_target() const;
  public:
  void clear_prio_opposite_target();
  const ::KWMsg::Ident& prio_opposite_target() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_prio_opposite_target();
  ::KWMsg::Ident* mutable_prio_opposite_target();
  void set_allocated_prio_opposite_target(::KWMsg::Ident* prio_opposite_target);
  private:
  const ::KWMsg::Ident& _internal_prio_opposite_target() const;
  ::KWMsg::Ident* _internal_mutable_prio_opposite_target();
  public:
  void unsafe_arena_set_allocated_prio_opposite_target(
      ::KWMsg::Ident* prio_opposite_target);
  ::KWMsg::Ident* unsafe_arena_release_prio_opposite_target();

  // .KWMsg.Ident prio_teammate_target = 3;
  bool has_prio_teammate_target() const;
  private:
  bool _internal_has_prio_teammate_target() const;
  public:
  void clear_prio_teammate_target();
  const ::KWMsg::Ident& prio_teammate_target() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_prio_teammate_target();
  ::KWMsg::Ident* mutable_prio_teammate_target();
  void set_allocated_prio_teammate_target(::KWMsg::Ident* prio_teammate_target);
  private:
  const ::KWMsg::Ident& _internal_prio_teammate_target() const;
  ::KWMsg::Ident* _internal_mutable_prio_teammate_target();
  public:
  void unsafe_arena_set_allocated_prio_teammate_target(
      ::KWMsg::Ident* prio_teammate_target);
  ::KWMsg::Ident* unsafe_arena_release_prio_teammate_target();

  // .KWMsg.EGameEventCode code = 1;
  void clear_code();
  ::KWMsg::EGameEventCode code() const;
  void set_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_code() const;
  void _internal_set_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBTLSetPrioTarget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* prio_opposite_target_;
  ::KWMsg::Ident* prio_teammate_target_;
  int code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLRewardInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLRewardInfo) */ {
 public:
  inline BTLRewardInfo() : BTLRewardInfo(nullptr) {}
  ~BTLRewardInfo() override;
  explicit constexpr BTLRewardInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLRewardInfo(const BTLRewardInfo& from);
  BTLRewardInfo(BTLRewardInfo&& from) noexcept
    : BTLRewardInfo() {
    *this = ::std::move(from);
  }

  inline BTLRewardInfo& operator=(const BTLRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLRewardInfo& operator=(BTLRewardInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLRewardInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLRewardInfo* internal_default_instance() {
    return reinterpret_cast<const BTLRewardInfo*>(
               &_BTLRewardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(BTLRewardInfo& a, BTLRewardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLRewardInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLRewardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLRewardInfo* New() const final {
    return new BTLRewardInfo();
  }

  BTLRewardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLRewardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLRewardInfo& from);
  void MergeFrom(const BTLRewardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLRewardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLRewardInfo";
  }
  protected:
  explicit BTLRewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardIdFieldNumber = 1,
    kRewardCountFieldNumber = 2,
  };
  // bytes reward_id = 1;
  void clear_reward_id();
  const std::string& reward_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reward_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reward_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_reward_id();
  void set_allocated_reward_id(std::string* reward_id);
  private:
  const std::string& _internal_reward_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_id(const std::string& value);
  std::string* _internal_mutable_reward_id();
  public:

  // int32 reward_count = 2;
  void clear_reward_count();
  ::PROTOBUF_NAMESPACE_ID::int32 reward_count() const;
  void set_reward_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward_count() const;
  void _internal_set_reward_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BTLRewardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class AckBTLEndInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBTLEndInfo) */ {
 public:
  inline AckBTLEndInfo() : AckBTLEndInfo(nullptr) {}
  ~AckBTLEndInfo() override;
  explicit constexpr AckBTLEndInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBTLEndInfo(const AckBTLEndInfo& from);
  AckBTLEndInfo(AckBTLEndInfo&& from) noexcept
    : AckBTLEndInfo() {
    *this = ::std::move(from);
  }

  inline AckBTLEndInfo& operator=(const AckBTLEndInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBTLEndInfo& operator=(AckBTLEndInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBTLEndInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBTLEndInfo* internal_default_instance() {
    return reinterpret_cast<const AckBTLEndInfo*>(
               &_AckBTLEndInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(AckBTLEndInfo& a, AckBTLEndInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBTLEndInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBTLEndInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBTLEndInfo* New() const final {
    return new AckBTLEndInfo();
  }

  AckBTLEndInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBTLEndInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBTLEndInfo& from);
  void MergeFrom(const AckBTLEndInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBTLEndInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBTLEndInfo";
  }
  protected:
  explicit AckBTLEndInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 7,
    kPlayerIdFieldNumber = 1,
    kVictoryEntityIdFieldNumber = 3,
    kIsVictoryFieldNumber = 2,
    kAddPlayerExpFieldNumber = 4,
    kAddWitchExpFieldNumber = 5,
    kStarStateFieldNumber = 6,
  };
  // repeated .KWMsg.BTLRewardInfo reward_list = 7;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::KWMsg::BTLRewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLRewardInfo >*
      mutable_reward_list();
  private:
  const ::KWMsg::BTLRewardInfo& _internal_reward_list(int index) const;
  ::KWMsg::BTLRewardInfo* _internal_add_reward_list();
  public:
  const ::KWMsg::BTLRewardInfo& reward_list(int index) const;
  ::KWMsg::BTLRewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLRewardInfo >&
      reward_list() const;

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident victory_entity_id = 3;
  bool has_victory_entity_id() const;
  private:
  bool _internal_has_victory_entity_id() const;
  public:
  void clear_victory_entity_id();
  const ::KWMsg::Ident& victory_entity_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_victory_entity_id();
  ::KWMsg::Ident* mutable_victory_entity_id();
  void set_allocated_victory_entity_id(::KWMsg::Ident* victory_entity_id);
  private:
  const ::KWMsg::Ident& _internal_victory_entity_id() const;
  ::KWMsg::Ident* _internal_mutable_victory_entity_id();
  public:
  void unsafe_arena_set_allocated_victory_entity_id(
      ::KWMsg::Ident* victory_entity_id);
  ::KWMsg::Ident* unsafe_arena_release_victory_entity_id();

  // int32 is_victory = 2;
  void clear_is_victory();
  ::PROTOBUF_NAMESPACE_ID::int32 is_victory() const;
  void set_is_victory(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_victory() const;
  void _internal_set_is_victory(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 add_player_exp = 4;
  void clear_add_player_exp();
  ::PROTOBUF_NAMESPACE_ID::int32 add_player_exp() const;
  void set_add_player_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_add_player_exp() const;
  void _internal_set_add_player_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 add_witch_exp = 5;
  void clear_add_witch_exp();
  ::PROTOBUF_NAMESPACE_ID::int32 add_witch_exp() const;
  void set_add_witch_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_add_witch_exp() const;
  void _internal_set_add_witch_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 star_state = 6;
  void clear_star_state();
  ::PROTOBUF_NAMESPACE_ID::int32 star_state() const;
  void set_star_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_star_state() const;
  void _internal_set_star_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBTLEndInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLRewardInfo > reward_list_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* victory_entity_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_victory_;
  ::PROTOBUF_NAMESPACE_ID::int32 add_player_exp_;
  ::PROTOBUF_NAMESPACE_ID::int32 add_witch_exp_;
  ::PROTOBUF_NAMESPACE_ID::int32 star_state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class AckBTLResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBTLResult) */ {
 public:
  inline AckBTLResult() : AckBTLResult(nullptr) {}
  ~AckBTLResult() override;
  explicit constexpr AckBTLResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBTLResult(const AckBTLResult& from);
  AckBTLResult(AckBTLResult&& from) noexcept
    : AckBTLResult() {
    *this = ::std::move(from);
  }

  inline AckBTLResult& operator=(const AckBTLResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBTLResult& operator=(AckBTLResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBTLResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBTLResult* internal_default_instance() {
    return reinterpret_cast<const AckBTLResult*>(
               &_AckBTLResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(AckBTLResult& a, AckBTLResult& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBTLResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBTLResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBTLResult* New() const final {
    return new AckBTLResult();
  }

  AckBTLResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBTLResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBTLResult& from);
  void MergeFrom(const AckBTLResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBTLResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBTLResult";
  }
  protected:
  explicit AckBTLResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kUniqueIdFieldNumber = 1,
  };
  // .KWMsg.BTLResult result = 2;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::KWMsg::BTLResult& result() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BTLResult* release_result();
  ::KWMsg::BTLResult* mutable_result();
  void set_allocated_result(::KWMsg::BTLResult* result);
  private:
  const ::KWMsg::BTLResult& _internal_result() const;
  ::KWMsg::BTLResult* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::KWMsg::BTLResult* result);
  ::KWMsg::BTLResult* unsafe_arena_release_result();

  // int32 unique_id = 1;
  void clear_unique_id();
  ::PROTOBUF_NAMESPACE_ID::int32 unique_id() const;
  void set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_unique_id() const;
  void _internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBTLResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::BTLResult* result_;
  ::PROTOBUF_NAMESPACE_ID::int32 unique_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// -------------------------------------------------------------------

class BTLResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BTLResult) */ {
 public:
  inline BTLResult() : BTLResult(nullptr) {}
  ~BTLResult() override;
  explicit constexpr BTLResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BTLResult(const BTLResult& from);
  BTLResult(BTLResult&& from) noexcept
    : BTLResult() {
    *this = ::std::move(from);
  }

  inline BTLResult& operator=(const BTLResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline BTLResult& operator=(BTLResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BTLResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const BTLResult* internal_default_instance() {
    return reinterpret_cast<const BTLResult*>(
               &_BTLResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(BTLResult& a, BTLResult& b) {
    a.Swap(&b);
  }
  inline void Swap(BTLResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BTLResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BTLResult* New() const final {
    return new BTLResult();
  }

  BTLResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BTLResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BTLResult& from);
  void MergeFrom(const BTLResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BTLResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BTLResult";
  }
  protected:
  explicit BTLResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWonPlayersFieldNumber = 2,
    kLostPlayersFieldNumber = 3,
    kVictoryEntityIdFieldNumber = 1,
  };
  // repeated .KWMsg.Ident won_players = 2;
  int won_players_size() const;
  private:
  int _internal_won_players_size() const;
  public:
  void clear_won_players();
  ::KWMsg::Ident* mutable_won_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
      mutable_won_players();
  private:
  const ::KWMsg::Ident& _internal_won_players(int index) const;
  ::KWMsg::Ident* _internal_add_won_players();
  public:
  const ::KWMsg::Ident& won_players(int index) const;
  ::KWMsg::Ident* add_won_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
      won_players() const;

  // repeated .KWMsg.Ident lost_players = 3;
  int lost_players_size() const;
  private:
  int _internal_lost_players_size() const;
  public:
  void clear_lost_players();
  ::KWMsg::Ident* mutable_lost_players(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
      mutable_lost_players();
  private:
  const ::KWMsg::Ident& _internal_lost_players(int index) const;
  ::KWMsg::Ident* _internal_add_lost_players();
  public:
  const ::KWMsg::Ident& lost_players(int index) const;
  ::KWMsg::Ident* add_lost_players();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
      lost_players() const;

  // .KWMsg.Ident victory_entity_id = 1;
  bool has_victory_entity_id() const;
  private:
  bool _internal_has_victory_entity_id() const;
  public:
  void clear_victory_entity_id();
  const ::KWMsg::Ident& victory_entity_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_victory_entity_id();
  ::KWMsg::Ident* mutable_victory_entity_id();
  void set_allocated_victory_entity_id(::KWMsg::Ident* victory_entity_id);
  private:
  const ::KWMsg::Ident& _internal_victory_entity_id() const;
  ::KWMsg::Ident* _internal_mutable_victory_entity_id();
  public:
  void unsafe_arena_set_allocated_victory_entity_id(
      ::KWMsg::Ident* victory_entity_id);
  ::KWMsg::Ident* unsafe_arena_release_victory_entity_id();

  // @@protoc_insertion_point(class_scope:KWMsg.BTLResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident > won_players_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident > lost_players_;
  ::KWMsg::Ident* victory_entity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbattle_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AckBTLInfo

// int32 unique_id = 1;
inline void AckBTLInfo::clear_unique_id() {
  unique_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLInfo::_internal_unique_id() const {
  return unique_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLInfo::unique_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLInfo.unique_id)
  return _internal_unique_id();
}
inline void AckBTLInfo::_internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unique_id_ = value;
}
inline void AckBTLInfo::set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unique_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBTLInfo.unique_id)
}

// .KWMsg.BTLInfo battle_info = 2;
inline bool AckBTLInfo::_internal_has_battle_info() const {
  return this != internal_default_instance() && battle_info_ != nullptr;
}
inline bool AckBTLInfo::has_battle_info() const {
  return _internal_has_battle_info();
}
inline void AckBTLInfo::clear_battle_info() {
  if (GetArenaForAllocation() == nullptr && battle_info_ != nullptr) {
    delete battle_info_;
  }
  battle_info_ = nullptr;
}
inline const ::KWMsg::BTLInfo& AckBTLInfo::_internal_battle_info() const {
  const ::KWMsg::BTLInfo* p = battle_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BTLInfo&>(
      ::KWMsg::_BTLInfo_default_instance_);
}
inline const ::KWMsg::BTLInfo& AckBTLInfo::battle_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLInfo.battle_info)
  return _internal_battle_info();
}
inline void AckBTLInfo::unsafe_arena_set_allocated_battle_info(
    ::KWMsg::BTLInfo* battle_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battle_info_);
  }
  battle_info_ = battle_info;
  if (battle_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBTLInfo.battle_info)
}
inline ::KWMsg::BTLInfo* AckBTLInfo::release_battle_info() {
  
  ::KWMsg::BTLInfo* temp = battle_info_;
  battle_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BTLInfo* AckBTLInfo::unsafe_arena_release_battle_info() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBTLInfo.battle_info)
  
  ::KWMsg::BTLInfo* temp = battle_info_;
  battle_info_ = nullptr;
  return temp;
}
inline ::KWMsg::BTLInfo* AckBTLInfo::_internal_mutable_battle_info() {
  
  if (battle_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BTLInfo>(GetArenaForAllocation());
    battle_info_ = p;
  }
  return battle_info_;
}
inline ::KWMsg::BTLInfo* AckBTLInfo::mutable_battle_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLInfo.battle_info)
  return _internal_mutable_battle_info();
}
inline void AckBTLInfo::set_allocated_battle_info(::KWMsg::BTLInfo* battle_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete battle_info_;
  }
  if (battle_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLInfo>::GetOwningArena(battle_info);
    if (message_arena != submessage_arena) {
      battle_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battle_info, submessage_arena);
    }
    
  } else {
    
  }
  battle_info_ = battle_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBTLInfo.battle_info)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BTLInfo

// bytes battle_id = 1;
inline void BTLInfo::clear_battle_id() {
  battle_id_.ClearToEmpty();
}
inline const std::string& BTLInfo::battle_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLInfo.battle_id)
  return _internal_battle_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BTLInfo::set_battle_id(ArgT0&& arg0, ArgT... args) {
 
 battle_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BTLInfo.battle_id)
}
inline std::string* BTLInfo::mutable_battle_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLInfo.battle_id)
  return _internal_mutable_battle_id();
}
inline const std::string& BTLInfo::_internal_battle_id() const {
  return battle_id_.Get();
}
inline void BTLInfo::_internal_set_battle_id(const std::string& value) {
  
  battle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BTLInfo::_internal_mutable_battle_id() {
  
  return battle_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BTLInfo::release_battle_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLInfo.battle_id)
  return battle_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BTLInfo::set_allocated_battle_id(std::string* battle_id) {
  if (battle_id != nullptr) {
    
  } else {
    
  }
  battle_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLInfo.battle_id)
}

// bytes battle_mid = 2;
inline void BTLInfo::clear_battle_mid() {
  battle_mid_.ClearToEmpty();
}
inline const std::string& BTLInfo::battle_mid() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLInfo.battle_mid)
  return _internal_battle_mid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BTLInfo::set_battle_mid(ArgT0&& arg0, ArgT... args) {
 
 battle_mid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BTLInfo.battle_mid)
}
inline std::string* BTLInfo::mutable_battle_mid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLInfo.battle_mid)
  return _internal_mutable_battle_mid();
}
inline const std::string& BTLInfo::_internal_battle_mid() const {
  return battle_mid_.Get();
}
inline void BTLInfo::_internal_set_battle_mid(const std::string& value) {
  
  battle_mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BTLInfo::_internal_mutable_battle_mid() {
  
  return battle_mid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BTLInfo::release_battle_mid() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLInfo.battle_mid)
  return battle_mid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BTLInfo::set_allocated_battle_mid(std::string* battle_mid) {
  if (battle_mid != nullptr) {
    
  } else {
    
  }
  battle_mid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_mid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLInfo.battle_mid)
}

// .KWMsg.BTLSettings battle_settings = 3;
inline bool BTLInfo::_internal_has_battle_settings() const {
  return this != internal_default_instance() && battle_settings_ != nullptr;
}
inline bool BTLInfo::has_battle_settings() const {
  return _internal_has_battle_settings();
}
inline void BTLInfo::clear_battle_settings() {
  if (GetArenaForAllocation() == nullptr && battle_settings_ != nullptr) {
    delete battle_settings_;
  }
  battle_settings_ = nullptr;
}
inline const ::KWMsg::BTLSettings& BTLInfo::_internal_battle_settings() const {
  const ::KWMsg::BTLSettings* p = battle_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BTLSettings&>(
      ::KWMsg::_BTLSettings_default_instance_);
}
inline const ::KWMsg::BTLSettings& BTLInfo::battle_settings() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLInfo.battle_settings)
  return _internal_battle_settings();
}
inline void BTLInfo::unsafe_arena_set_allocated_battle_settings(
    ::KWMsg::BTLSettings* battle_settings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(battle_settings_);
  }
  battle_settings_ = battle_settings;
  if (battle_settings) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLInfo.battle_settings)
}
inline ::KWMsg::BTLSettings* BTLInfo::release_battle_settings() {
  
  ::KWMsg::BTLSettings* temp = battle_settings_;
  battle_settings_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BTLSettings* BTLInfo::unsafe_arena_release_battle_settings() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLInfo.battle_settings)
  
  ::KWMsg::BTLSettings* temp = battle_settings_;
  battle_settings_ = nullptr;
  return temp;
}
inline ::KWMsg::BTLSettings* BTLInfo::_internal_mutable_battle_settings() {
  
  if (battle_settings_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BTLSettings>(GetArenaForAllocation());
    battle_settings_ = p;
  }
  return battle_settings_;
}
inline ::KWMsg::BTLSettings* BTLInfo::mutable_battle_settings() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLInfo.battle_settings)
  return _internal_mutable_battle_settings();
}
inline void BTLInfo::set_allocated_battle_settings(::KWMsg::BTLSettings* battle_settings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete battle_settings_;
  }
  if (battle_settings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLSettings>::GetOwningArena(battle_settings);
    if (message_arena != submessage_arena) {
      battle_settings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, battle_settings, submessage_arena);
    }
    
  } else {
    
  }
  battle_settings_ = battle_settings;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLInfo.battle_settings)
}

// repeated .KWMsg.BTLEntity entities = 4;
inline int BTLInfo::_internal_entities_size() const {
  return entities_.size();
}
inline int BTLInfo::entities_size() const {
  return _internal_entities_size();
}
inline void BTLInfo::clear_entities() {
  entities_.Clear();
}
inline ::KWMsg::BTLEntity* BTLInfo::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLInfo.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >*
BTLInfo::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLInfo.entities)
  return &entities_;
}
inline const ::KWMsg::BTLEntity& BTLInfo::_internal_entities(int index) const {
  return entities_.Get(index);
}
inline const ::KWMsg::BTLEntity& BTLInfo::entities(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLInfo.entities)
  return _internal_entities(index);
}
inline ::KWMsg::BTLEntity* BTLInfo::_internal_add_entities() {
  return entities_.Add();
}
inline ::KWMsg::BTLEntity* BTLInfo::add_entities() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLInfo.entities)
  return _internal_add_entities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >&
BTLInfo::entities() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLInfo.entities)
  return entities_;
}

// map<int32, int32> magic_hues = 5;
inline int BTLInfo::_internal_magic_hues_size() const {
  return magic_hues_.size();
}
inline int BTLInfo::magic_hues_size() const {
  return _internal_magic_hues_size();
}
inline void BTLInfo::clear_magic_hues() {
  magic_hues_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
BTLInfo::_internal_magic_hues() const {
  return magic_hues_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
BTLInfo::magic_hues() const {
  // @@protoc_insertion_point(field_map:KWMsg.BTLInfo.magic_hues)
  return _internal_magic_hues();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
BTLInfo::_internal_mutable_magic_hues() {
  return magic_hues_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
BTLInfo::mutable_magic_hues() {
  // @@protoc_insertion_point(field_mutable_map:KWMsg.BTLInfo.magic_hues)
  return _internal_mutable_magic_hues();
}

// repeated .KWMsg.Ident destroyed_entity_ids = 6;
inline int BTLInfo::_internal_destroyed_entity_ids_size() const {
  return destroyed_entity_ids_.size();
}
inline int BTLInfo::destroyed_entity_ids_size() const {
  return _internal_destroyed_entity_ids_size();
}
inline ::KWMsg::Ident* BTLInfo::mutable_destroyed_entity_ids(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLInfo.destroyed_entity_ids)
  return destroyed_entity_ids_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
BTLInfo::mutable_destroyed_entity_ids() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLInfo.destroyed_entity_ids)
  return &destroyed_entity_ids_;
}
inline const ::KWMsg::Ident& BTLInfo::_internal_destroyed_entity_ids(int index) const {
  return destroyed_entity_ids_.Get(index);
}
inline const ::KWMsg::Ident& BTLInfo::destroyed_entity_ids(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLInfo.destroyed_entity_ids)
  return _internal_destroyed_entity_ids(index);
}
inline ::KWMsg::Ident* BTLInfo::_internal_add_destroyed_entity_ids() {
  return destroyed_entity_ids_.Add();
}
inline ::KWMsg::Ident* BTLInfo::add_destroyed_entity_ids() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLInfo.destroyed_entity_ids)
  return _internal_add_destroyed_entity_ids();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
BTLInfo::destroyed_entity_ids() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLInfo.destroyed_entity_ids)
  return destroyed_entity_ids_;
}

// -------------------------------------------------------------------

// BTLSettings

// int32 enable_auto_state = 1;
inline void BTLSettings::clear_enable_auto_state() {
  enable_auto_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLSettings::_internal_enable_auto_state() const {
  return enable_auto_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLSettings::enable_auto_state() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLSettings.enable_auto_state)
  return _internal_enable_auto_state();
}
inline void BTLSettings::_internal_set_enable_auto_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enable_auto_state_ = value;
}
inline void BTLSettings::set_enable_auto_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enable_auto_state(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLSettings.enable_auto_state)
}

// int32 enable_speed_up = 2;
inline void BTLSettings::clear_enable_speed_up() {
  enable_speed_up_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLSettings::_internal_enable_speed_up() const {
  return enable_speed_up_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLSettings::enable_speed_up() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLSettings.enable_speed_up)
  return _internal_enable_speed_up();
}
inline void BTLSettings::_internal_set_enable_speed_up(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enable_speed_up_ = value;
}
inline void BTLSettings::set_enable_speed_up(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enable_speed_up(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLSettings.enable_speed_up)
}

// int32 default_auto_state = 3;
inline void BTLSettings::clear_default_auto_state() {
  default_auto_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLSettings::_internal_default_auto_state() const {
  return default_auto_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLSettings::default_auto_state() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLSettings.default_auto_state)
  return _internal_default_auto_state();
}
inline void BTLSettings::_internal_set_default_auto_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  default_auto_state_ = value;
}
inline void BTLSettings::set_default_auto_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_default_auto_state(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLSettings.default_auto_state)
}

// int32 default_speed = 4;
inline void BTLSettings::clear_default_speed() {
  default_speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLSettings::_internal_default_speed() const {
  return default_speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLSettings::default_speed() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLSettings.default_speed)
  return _internal_default_speed();
}
inline void BTLSettings::_internal_set_default_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  default_speed_ = value;
}
inline void BTLSettings::set_default_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_default_speed(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLSettings.default_speed)
}

// -------------------------------------------------------------------

// BTLEntity

// .KWMsg.Ident entity_id = 1;
inline bool BTLEntity::_internal_has_entity_id() const {
  return this != internal_default_instance() && entity_id_ != nullptr;
}
inline bool BTLEntity::has_entity_id() const {
  return _internal_has_entity_id();
}
inline const ::KWMsg::Ident& BTLEntity::_internal_entity_id() const {
  const ::KWMsg::Ident* p = entity_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BTLEntity::entity_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEntity.entity_id)
  return _internal_entity_id();
}
inline void BTLEntity::unsafe_arena_set_allocated_entity_id(
    ::KWMsg::Ident* entity_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  entity_id_ = entity_id;
  if (entity_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLEntity.entity_id)
}
inline ::KWMsg::Ident* BTLEntity::release_entity_id() {
  
  ::KWMsg::Ident* temp = entity_id_;
  entity_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BTLEntity::unsafe_arena_release_entity_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLEntity.entity_id)
  
  ::KWMsg::Ident* temp = entity_id_;
  entity_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BTLEntity::_internal_mutable_entity_id() {
  
  if (entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    entity_id_ = p;
  }
  return entity_id_;
}
inline ::KWMsg::Ident* BTLEntity::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEntity.entity_id)
  return _internal_mutable_entity_id();
}
inline void BTLEntity::set_allocated_entity_id(::KWMsg::Ident* entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id));
    if (message_arena != submessage_arena) {
      entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    
  } else {
    
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEntity.entity_id)
}

// .KWMsg.ObjectPropertyList property = 2;
inline bool BTLEntity::_internal_has_property() const {
  return this != internal_default_instance() && property_ != nullptr;
}
inline bool BTLEntity::has_property() const {
  return _internal_has_property();
}
inline const ::KWMsg::ObjectPropertyList& BTLEntity::_internal_property() const {
  const ::KWMsg::ObjectPropertyList* p = property_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::ObjectPropertyList&>(
      ::KWMsg::_ObjectPropertyList_default_instance_);
}
inline const ::KWMsg::ObjectPropertyList& BTLEntity::property() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEntity.property)
  return _internal_property();
}
inline void BTLEntity::unsafe_arena_set_allocated_property(
    ::KWMsg::ObjectPropertyList* property) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  property_ = property;
  if (property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLEntity.property)
}
inline ::KWMsg::ObjectPropertyList* BTLEntity::release_property() {
  
  ::KWMsg::ObjectPropertyList* temp = property_;
  property_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::ObjectPropertyList* BTLEntity::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLEntity.property)
  
  ::KWMsg::ObjectPropertyList* temp = property_;
  property_ = nullptr;
  return temp;
}
inline ::KWMsg::ObjectPropertyList* BTLEntity::_internal_mutable_property() {
  
  if (property_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::ObjectPropertyList>(GetArenaForAllocation());
    property_ = p;
  }
  return property_;
}
inline ::KWMsg::ObjectPropertyList* BTLEntity::mutable_property() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEntity.property)
  return _internal_mutable_property();
}
inline void BTLEntity::set_allocated_property(::KWMsg::ObjectPropertyList* property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  if (property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property));
    if (message_arena != submessage_arena) {
      property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEntity.property)
}

// .KWMsg.ObjectRecordList record = 3;
inline bool BTLEntity::_internal_has_record() const {
  return this != internal_default_instance() && record_ != nullptr;
}
inline bool BTLEntity::has_record() const {
  return _internal_has_record();
}
inline const ::KWMsg::ObjectRecordList& BTLEntity::_internal_record() const {
  const ::KWMsg::ObjectRecordList* p = record_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::ObjectRecordList&>(
      ::KWMsg::_ObjectRecordList_default_instance_);
}
inline const ::KWMsg::ObjectRecordList& BTLEntity::record() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEntity.record)
  return _internal_record();
}
inline void BTLEntity::unsafe_arena_set_allocated_record(
    ::KWMsg::ObjectRecordList* record) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_);
  }
  record_ = record;
  if (record) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLEntity.record)
}
inline ::KWMsg::ObjectRecordList* BTLEntity::release_record() {
  
  ::KWMsg::ObjectRecordList* temp = record_;
  record_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::ObjectRecordList* BTLEntity::unsafe_arena_release_record() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLEntity.record)
  
  ::KWMsg::ObjectRecordList* temp = record_;
  record_ = nullptr;
  return temp;
}
inline ::KWMsg::ObjectRecordList* BTLEntity::_internal_mutable_record() {
  
  if (record_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::ObjectRecordList>(GetArenaForAllocation());
    record_ = p;
  }
  return record_;
}
inline ::KWMsg::ObjectRecordList* BTLEntity::mutable_record() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEntity.record)
  return _internal_mutable_record();
}
inline void BTLEntity::set_allocated_record(::KWMsg::ObjectRecordList* record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_);
  }
  if (record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record));
    if (message_arena != submessage_arena) {
      record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record, submessage_arena);
    }
    
  } else {
    
  }
  record_ = record;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEntity.record)
}

// -------------------------------------------------------------------

// AckBTLPk

// int32 unique_id = 1;
inline void AckBTLPk::clear_unique_id() {
  unique_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLPk::_internal_unique_id() const {
  return unique_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLPk::unique_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLPk.unique_id)
  return _internal_unique_id();
}
inline void AckBTLPk::_internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unique_id_ = value;
}
inline void AckBTLPk::set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unique_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBTLPk.unique_id)
}

// .KWMsg.BTLPkInfo pk = 2;
inline bool AckBTLPk::_internal_has_pk() const {
  return this != internal_default_instance() && pk_ != nullptr;
}
inline bool AckBTLPk::has_pk() const {
  return _internal_has_pk();
}
inline void AckBTLPk::clear_pk() {
  if (GetArenaForAllocation() == nullptr && pk_ != nullptr) {
    delete pk_;
  }
  pk_ = nullptr;
}
inline const ::KWMsg::BTLPkInfo& AckBTLPk::_internal_pk() const {
  const ::KWMsg::BTLPkInfo* p = pk_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BTLPkInfo&>(
      ::KWMsg::_BTLPkInfo_default_instance_);
}
inline const ::KWMsg::BTLPkInfo& AckBTLPk::pk() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLPk.pk)
  return _internal_pk();
}
inline void AckBTLPk::unsafe_arena_set_allocated_pk(
    ::KWMsg::BTLPkInfo* pk) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pk_);
  }
  pk_ = pk;
  if (pk) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBTLPk.pk)
}
inline ::KWMsg::BTLPkInfo* AckBTLPk::release_pk() {
  
  ::KWMsg::BTLPkInfo* temp = pk_;
  pk_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BTLPkInfo* AckBTLPk::unsafe_arena_release_pk() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBTLPk.pk)
  
  ::KWMsg::BTLPkInfo* temp = pk_;
  pk_ = nullptr;
  return temp;
}
inline ::KWMsg::BTLPkInfo* AckBTLPk::_internal_mutable_pk() {
  
  if (pk_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BTLPkInfo>(GetArenaForAllocation());
    pk_ = p;
  }
  return pk_;
}
inline ::KWMsg::BTLPkInfo* AckBTLPk::mutable_pk() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLPk.pk)
  return _internal_mutable_pk();
}
inline void AckBTLPk::set_allocated_pk(::KWMsg::BTLPkInfo* pk) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete pk_;
  }
  if (pk) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLPkInfo>::GetOwningArena(pk);
    if (message_arena != submessage_arena) {
      pk = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pk, submessage_arena);
    }
    
  } else {
    
  }
  pk_ = pk;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBTLPk.pk)
}

// -------------------------------------------------------------------

// BTLEnergyInfo

// .KWMsg.Ident team_id = 1;
inline bool BTLEnergyInfo::_internal_has_team_id() const {
  return this != internal_default_instance() && team_id_ != nullptr;
}
inline bool BTLEnergyInfo::has_team_id() const {
  return _internal_has_team_id();
}
inline const ::KWMsg::Ident& BTLEnergyInfo::_internal_team_id() const {
  const ::KWMsg::Ident* p = team_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BTLEnergyInfo::team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEnergyInfo.team_id)
  return _internal_team_id();
}
inline void BTLEnergyInfo::unsafe_arena_set_allocated_team_id(
    ::KWMsg::Ident* team_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(team_id_);
  }
  team_id_ = team_id;
  if (team_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLEnergyInfo.team_id)
}
inline ::KWMsg::Ident* BTLEnergyInfo::release_team_id() {
  
  ::KWMsg::Ident* temp = team_id_;
  team_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BTLEnergyInfo::unsafe_arena_release_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLEnergyInfo.team_id)
  
  ::KWMsg::Ident* temp = team_id_;
  team_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BTLEnergyInfo::_internal_mutable_team_id() {
  
  if (team_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    team_id_ = p;
  }
  return team_id_;
}
inline ::KWMsg::Ident* BTLEnergyInfo::mutable_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEnergyInfo.team_id)
  return _internal_mutable_team_id();
}
inline void BTLEnergyInfo::set_allocated_team_id(::KWMsg::Ident* team_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(team_id));
    if (message_arena != submessage_arena) {
      team_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEnergyInfo.team_id)
}

// int32 energy = 2;
inline void BTLEnergyInfo::clear_energy() {
  energy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLEnergyInfo::_internal_energy() const {
  return energy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLEnergyInfo::energy() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEnergyInfo.energy)
  return _internal_energy();
}
inline void BTLEnergyInfo::_internal_set_energy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  energy_ = value;
}
inline void BTLEnergyInfo::set_energy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_energy(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLEnergyInfo.energy)
}

// int32 cristal = 3;
inline void BTLEnergyInfo::clear_cristal() {
  cristal_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLEnergyInfo::_internal_cristal() const {
  return cristal_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLEnergyInfo::cristal() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEnergyInfo.cristal)
  return _internal_cristal();
}
inline void BTLEnergyInfo::_internal_set_cristal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cristal_ = value;
}
inline void BTLEnergyInfo::set_cristal(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cristal(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLEnergyInfo.cristal)
}

// -------------------------------------------------------------------

// BTLPkInfo

// repeated .KWMsg.BTLPkElement elements = 1;
inline int BTLPkInfo::_internal_elements_size() const {
  return elements_.size();
}
inline int BTLPkInfo::elements_size() const {
  return _internal_elements_size();
}
inline void BTLPkInfo::clear_elements() {
  elements_.Clear();
}
inline ::KWMsg::BTLPkElement* BTLPkInfo::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLPkInfo.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLPkElement >*
BTLPkInfo::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLPkInfo.elements)
  return &elements_;
}
inline const ::KWMsg::BTLPkElement& BTLPkInfo::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::KWMsg::BTLPkElement& BTLPkInfo::elements(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLPkInfo.elements)
  return _internal_elements(index);
}
inline ::KWMsg::BTLPkElement* BTLPkInfo::_internal_add_elements() {
  return elements_.Add();
}
inline ::KWMsg::BTLPkElement* BTLPkInfo::add_elements() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLPkInfo.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLPkElement >&
BTLPkInfo::elements() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLPkInfo.elements)
  return elements_;
}

// repeated .KWMsg.BTLEntity entities = 2;
inline int BTLPkInfo::_internal_entities_size() const {
  return entities_.size();
}
inline int BTLPkInfo::entities_size() const {
  return _internal_entities_size();
}
inline void BTLPkInfo::clear_entities() {
  entities_.Clear();
}
inline ::KWMsg::BTLEntity* BTLPkInfo::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLPkInfo.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >*
BTLPkInfo::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLPkInfo.entities)
  return &entities_;
}
inline const ::KWMsg::BTLEntity& BTLPkInfo::_internal_entities(int index) const {
  return entities_.Get(index);
}
inline const ::KWMsg::BTLEntity& BTLPkInfo::entities(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLPkInfo.entities)
  return _internal_entities(index);
}
inline ::KWMsg::BTLEntity* BTLPkInfo::_internal_add_entities() {
  return entities_.Add();
}
inline ::KWMsg::BTLEntity* BTLPkInfo::add_entities() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLPkInfo.entities)
  return _internal_add_entities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >&
BTLPkInfo::entities() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLPkInfo.entities)
  return entities_;
}

// repeated .KWMsg.BTLEnergyInfo energy_list = 3;
inline int BTLPkInfo::_internal_energy_list_size() const {
  return energy_list_.size();
}
inline int BTLPkInfo::energy_list_size() const {
  return _internal_energy_list_size();
}
inline void BTLPkInfo::clear_energy_list() {
  energy_list_.Clear();
}
inline ::KWMsg::BTLEnergyInfo* BTLPkInfo::mutable_energy_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLPkInfo.energy_list)
  return energy_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEnergyInfo >*
BTLPkInfo::mutable_energy_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLPkInfo.energy_list)
  return &energy_list_;
}
inline const ::KWMsg::BTLEnergyInfo& BTLPkInfo::_internal_energy_list(int index) const {
  return energy_list_.Get(index);
}
inline const ::KWMsg::BTLEnergyInfo& BTLPkInfo::energy_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLPkInfo.energy_list)
  return _internal_energy_list(index);
}
inline ::KWMsg::BTLEnergyInfo* BTLPkInfo::_internal_add_energy_list() {
  return energy_list_.Add();
}
inline ::KWMsg::BTLEnergyInfo* BTLPkInfo::add_energy_list() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLPkInfo.energy_list)
  return _internal_add_energy_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEnergyInfo >&
BTLPkInfo::energy_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLPkInfo.energy_list)
  return energy_list_;
}

// -------------------------------------------------------------------

// BTLPkElement

// .KWMsg.Ident entity_id = 1;
inline bool BTLPkElement::_internal_has_entity_id() const {
  return this != internal_default_instance() && entity_id_ != nullptr;
}
inline bool BTLPkElement::has_entity_id() const {
  return _internal_has_entity_id();
}
inline const ::KWMsg::Ident& BTLPkElement::_internal_entity_id() const {
  const ::KWMsg::Ident* p = entity_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BTLPkElement::entity_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLPkElement.entity_id)
  return _internal_entity_id();
}
inline void BTLPkElement::unsafe_arena_set_allocated_entity_id(
    ::KWMsg::Ident* entity_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  entity_id_ = entity_id;
  if (entity_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLPkElement.entity_id)
}
inline ::KWMsg::Ident* BTLPkElement::release_entity_id() {
  
  ::KWMsg::Ident* temp = entity_id_;
  entity_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BTLPkElement::unsafe_arena_release_entity_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLPkElement.entity_id)
  
  ::KWMsg::Ident* temp = entity_id_;
  entity_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BTLPkElement::_internal_mutable_entity_id() {
  
  if (entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    entity_id_ = p;
  }
  return entity_id_;
}
inline ::KWMsg::Ident* BTLPkElement::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLPkElement.entity_id)
  return _internal_mutable_entity_id();
}
inline void BTLPkElement::set_allocated_entity_id(::KWMsg::Ident* entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id));
    if (message_arena != submessage_arena) {
      entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    
  } else {
    
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLPkElement.entity_id)
}

// int32 fight = 2;
inline void BTLPkElement::clear_fight() {
  fight_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLPkElement::_internal_fight() const {
  return fight_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLPkElement::fight() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLPkElement.fight)
  return _internal_fight();
}
inline void BTLPkElement::_internal_set_fight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fight_ = value;
}
inline void BTLPkElement::set_fight(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fight(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLPkElement.fight)
}

// .KWMsg.Ident team_id = 3;
inline bool BTLPkElement::_internal_has_team_id() const {
  return this != internal_default_instance() && team_id_ != nullptr;
}
inline bool BTLPkElement::has_team_id() const {
  return _internal_has_team_id();
}
inline const ::KWMsg::Ident& BTLPkElement::_internal_team_id() const {
  const ::KWMsg::Ident* p = team_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BTLPkElement::team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLPkElement.team_id)
  return _internal_team_id();
}
inline void BTLPkElement::unsafe_arena_set_allocated_team_id(
    ::KWMsg::Ident* team_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(team_id_);
  }
  team_id_ = team_id;
  if (team_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLPkElement.team_id)
}
inline ::KWMsg::Ident* BTLPkElement::release_team_id() {
  
  ::KWMsg::Ident* temp = team_id_;
  team_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BTLPkElement::unsafe_arena_release_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLPkElement.team_id)
  
  ::KWMsg::Ident* temp = team_id_;
  team_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BTLPkElement::_internal_mutable_team_id() {
  
  if (team_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    team_id_ = p;
  }
  return team_id_;
}
inline ::KWMsg::Ident* BTLPkElement::mutable_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLPkElement.team_id)
  return _internal_mutable_team_id();
}
inline void BTLPkElement::set_allocated_team_id(::KWMsg::Ident* team_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(team_id_);
  }
  if (team_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(team_id));
    if (message_arena != submessage_arena) {
      team_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, team_id, submessage_arena);
    }
    
  } else {
    
  }
  team_id_ = team_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLPkElement.team_id)
}

// bytes name = 4;
inline void BTLPkElement::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& BTLPkElement::name() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLPkElement.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BTLPkElement::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BTLPkElement.name)
}
inline std::string* BTLPkElement::mutable_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLPkElement.name)
  return _internal_mutable_name();
}
inline const std::string& BTLPkElement::_internal_name() const {
  return name_.Get();
}
inline void BTLPkElement::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BTLPkElement::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BTLPkElement::release_name() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLPkElement.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BTLPkElement::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLPkElement.name)
}

// int32 reward_type = 5;
inline void BTLPkElement::clear_reward_type() {
  reward_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLPkElement::_internal_reward_type() const {
  return reward_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLPkElement::reward_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLPkElement.reward_type)
  return _internal_reward_type();
}
inline void BTLPkElement::_internal_set_reward_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_type_ = value;
}
inline void BTLPkElement::set_reward_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLPkElement.reward_type)
}

// int32 reward_count = 6;
inline void BTLPkElement::clear_reward_count() {
  reward_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLPkElement::_internal_reward_count() const {
  return reward_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLPkElement::reward_count() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLPkElement.reward_count)
  return _internal_reward_count();
}
inline void BTLPkElement::_internal_set_reward_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_count_ = value;
}
inline void BTLPkElement::set_reward_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLPkElement.reward_count)
}

// -------------------------------------------------------------------

// ReqBTLAction

// .KWMsg.BTLOperation op = 1;
inline bool ReqBTLAction::_internal_has_op() const {
  return this != internal_default_instance() && op_ != nullptr;
}
inline bool ReqBTLAction::has_op() const {
  return _internal_has_op();
}
inline void ReqBTLAction::clear_op() {
  if (GetArenaForAllocation() == nullptr && op_ != nullptr) {
    delete op_;
  }
  op_ = nullptr;
}
inline const ::KWMsg::BTLOperation& ReqBTLAction::_internal_op() const {
  const ::KWMsg::BTLOperation* p = op_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BTLOperation&>(
      ::KWMsg::_BTLOperation_default_instance_);
}
inline const ::KWMsg::BTLOperation& ReqBTLAction::op() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBTLAction.op)
  return _internal_op();
}
inline void ReqBTLAction::unsafe_arena_set_allocated_op(
    ::KWMsg::BTLOperation* op) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(op_);
  }
  op_ = op;
  if (op) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBTLAction.op)
}
inline ::KWMsg::BTLOperation* ReqBTLAction::release_op() {
  
  ::KWMsg::BTLOperation* temp = op_;
  op_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BTLOperation* ReqBTLAction::unsafe_arena_release_op() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBTLAction.op)
  
  ::KWMsg::BTLOperation* temp = op_;
  op_ = nullptr;
  return temp;
}
inline ::KWMsg::BTLOperation* ReqBTLAction::_internal_mutable_op() {
  
  if (op_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BTLOperation>(GetArenaForAllocation());
    op_ = p;
  }
  return op_;
}
inline ::KWMsg::BTLOperation* ReqBTLAction::mutable_op() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBTLAction.op)
  return _internal_mutable_op();
}
inline void ReqBTLAction::set_allocated_op(::KWMsg::BTLOperation* op) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete op_;
  }
  if (op) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLOperation>::GetOwningArena(op);
    if (message_arena != submessage_arena) {
      op = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, op, submessage_arena);
    }
    
  } else {
    
  }
  op_ = op;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBTLAction.op)
}

// -------------------------------------------------------------------

// BTLOperation

// .KWMsg.Ident player_id = 1;
inline bool BTLOperation::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool BTLOperation::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& BTLOperation::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BTLOperation::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLOperation.player_id)
  return _internal_player_id();
}
inline void BTLOperation::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLOperation.player_id)
}
inline ::KWMsg::Ident* BTLOperation::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BTLOperation::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLOperation.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BTLOperation::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* BTLOperation::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLOperation.player_id)
  return _internal_mutable_player_id();
}
inline void BTLOperation::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLOperation.player_id)
}

// int32 auto_op = 2;
inline bool BTLOperation::_internal_has_auto_op() const {
  return operation_case() == kAutoOp;
}
inline bool BTLOperation::has_auto_op() const {
  return _internal_has_auto_op();
}
inline void BTLOperation::set_has_auto_op() {
  _oneof_case_[0] = kAutoOp;
}
inline void BTLOperation::clear_auto_op() {
  if (_internal_has_auto_op()) {
    operation_.auto_op_ = 0;
    clear_has_operation();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLOperation::_internal_auto_op() const {
  if (_internal_has_auto_op()) {
    return operation_.auto_op_;
  }
  return 0;
}
inline void BTLOperation::_internal_set_auto_op(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_auto_op()) {
    clear_operation();
    set_has_auto_op();
  }
  operation_.auto_op_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLOperation::auto_op() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLOperation.auto_op)
  return _internal_auto_op();
}
inline void BTLOperation::set_auto_op(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_auto_op(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLOperation.auto_op)
}

// .KWMsg.BTLManualOperation manual_op = 3;
inline bool BTLOperation::_internal_has_manual_op() const {
  return operation_case() == kManualOp;
}
inline bool BTLOperation::has_manual_op() const {
  return _internal_has_manual_op();
}
inline void BTLOperation::set_has_manual_op() {
  _oneof_case_[0] = kManualOp;
}
inline void BTLOperation::clear_manual_op() {
  if (_internal_has_manual_op()) {
    if (GetArenaForAllocation() == nullptr) {
      delete operation_.manual_op_;
    }
    clear_has_operation();
  }
}
inline ::KWMsg::BTLManualOperation* BTLOperation::release_manual_op() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLOperation.manual_op)
  if (_internal_has_manual_op()) {
    clear_has_operation();
      ::KWMsg::BTLManualOperation* temp = operation_.manual_op_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    operation_.manual_op_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::BTLManualOperation& BTLOperation::_internal_manual_op() const {
  return _internal_has_manual_op()
      ? *operation_.manual_op_
      : reinterpret_cast< ::KWMsg::BTLManualOperation&>(::KWMsg::_BTLManualOperation_default_instance_);
}
inline const ::KWMsg::BTLManualOperation& BTLOperation::manual_op() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLOperation.manual_op)
  return _internal_manual_op();
}
inline ::KWMsg::BTLManualOperation* BTLOperation::unsafe_arena_release_manual_op() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BTLOperation.manual_op)
  if (_internal_has_manual_op()) {
    clear_has_operation();
    ::KWMsg::BTLManualOperation* temp = operation_.manual_op_;
    operation_.manual_op_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTLOperation::unsafe_arena_set_allocated_manual_op(::KWMsg::BTLManualOperation* manual_op) {
  clear_operation();
  if (manual_op) {
    set_has_manual_op();
    operation_.manual_op_ = manual_op;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLOperation.manual_op)
}
inline ::KWMsg::BTLManualOperation* BTLOperation::_internal_mutable_manual_op() {
  if (!_internal_has_manual_op()) {
    clear_operation();
    set_has_manual_op();
    operation_.manual_op_ = CreateMaybeMessage< ::KWMsg::BTLManualOperation >(GetArenaForAllocation());
  }
  return operation_.manual_op_;
}
inline ::KWMsg::BTLManualOperation* BTLOperation::mutable_manual_op() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLOperation.manual_op)
  return _internal_mutable_manual_op();
}

// int32 skip_op = 4;
inline bool BTLOperation::_internal_has_skip_op() const {
  return operation_case() == kSkipOp;
}
inline bool BTLOperation::has_skip_op() const {
  return _internal_has_skip_op();
}
inline void BTLOperation::set_has_skip_op() {
  _oneof_case_[0] = kSkipOp;
}
inline void BTLOperation::clear_skip_op() {
  if (_internal_has_skip_op()) {
    operation_.skip_op_ = 0;
    clear_has_operation();
  }
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLOperation::_internal_skip_op() const {
  if (_internal_has_skip_op()) {
    return operation_.skip_op_;
  }
  return 0;
}
inline void BTLOperation::_internal_set_skip_op(::PROTOBUF_NAMESPACE_ID::int32 value) {
  if (!_internal_has_skip_op()) {
    clear_operation();
    set_has_skip_op();
  }
  operation_.skip_op_ = value;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLOperation::skip_op() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLOperation.skip_op)
  return _internal_skip_op();
}
inline void BTLOperation::set_skip_op(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_skip_op(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLOperation.skip_op)
}

inline bool BTLOperation::has_operation() const {
  return operation_case() != OPERATION_NOT_SET;
}
inline void BTLOperation::clear_has_operation() {
  _oneof_case_[0] = OPERATION_NOT_SET;
}
inline BTLOperation::OperationCase BTLOperation::operation_case() const {
  return BTLOperation::OperationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BTLManualOperation

// bytes skill_mid = 1;
inline void BTLManualOperation::clear_skill_mid() {
  skill_mid_.ClearToEmpty();
}
inline const std::string& BTLManualOperation::skill_mid() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLManualOperation.skill_mid)
  return _internal_skill_mid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BTLManualOperation::set_skill_mid(ArgT0&& arg0, ArgT... args) {
 
 skill_mid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BTLManualOperation.skill_mid)
}
inline std::string* BTLManualOperation::mutable_skill_mid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLManualOperation.skill_mid)
  return _internal_mutable_skill_mid();
}
inline const std::string& BTLManualOperation::_internal_skill_mid() const {
  return skill_mid_.Get();
}
inline void BTLManualOperation::_internal_set_skill_mid(const std::string& value) {
  
  skill_mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BTLManualOperation::_internal_mutable_skill_mid() {
  
  return skill_mid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BTLManualOperation::release_skill_mid() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLManualOperation.skill_mid)
  return skill_mid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BTLManualOperation::set_allocated_skill_mid(std::string* skill_mid) {
  if (skill_mid != nullptr) {
    
  } else {
    
  }
  skill_mid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill_mid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLManualOperation.skill_mid)
}

// .KWMsg.Ident caster_id = 2;
inline bool BTLManualOperation::_internal_has_caster_id() const {
  return this != internal_default_instance() && caster_id_ != nullptr;
}
inline bool BTLManualOperation::has_caster_id() const {
  return _internal_has_caster_id();
}
inline const ::KWMsg::Ident& BTLManualOperation::_internal_caster_id() const {
  const ::KWMsg::Ident* p = caster_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BTLManualOperation::caster_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLManualOperation.caster_id)
  return _internal_caster_id();
}
inline void BTLManualOperation::unsafe_arena_set_allocated_caster_id(
    ::KWMsg::Ident* caster_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caster_id_);
  }
  caster_id_ = caster_id;
  if (caster_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLManualOperation.caster_id)
}
inline ::KWMsg::Ident* BTLManualOperation::release_caster_id() {
  
  ::KWMsg::Ident* temp = caster_id_;
  caster_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BTLManualOperation::unsafe_arena_release_caster_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLManualOperation.caster_id)
  
  ::KWMsg::Ident* temp = caster_id_;
  caster_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BTLManualOperation::_internal_mutable_caster_id() {
  
  if (caster_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    caster_id_ = p;
  }
  return caster_id_;
}
inline ::KWMsg::Ident* BTLManualOperation::mutable_caster_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLManualOperation.caster_id)
  return _internal_mutable_caster_id();
}
inline void BTLManualOperation::set_allocated_caster_id(::KWMsg::Ident* caster_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(caster_id_);
  }
  if (caster_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caster_id));
    if (message_arena != submessage_arena) {
      caster_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caster_id, submessage_arena);
    }
    
  } else {
    
  }
  caster_id_ = caster_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLManualOperation.caster_id)
}

// .KWMsg.Ident selected_target_id = 3;
inline bool BTLManualOperation::_internal_has_selected_target_id() const {
  return this != internal_default_instance() && selected_target_id_ != nullptr;
}
inline bool BTLManualOperation::has_selected_target_id() const {
  return _internal_has_selected_target_id();
}
inline const ::KWMsg::Ident& BTLManualOperation::_internal_selected_target_id() const {
  const ::KWMsg::Ident* p = selected_target_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BTLManualOperation::selected_target_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLManualOperation.selected_target_id)
  return _internal_selected_target_id();
}
inline void BTLManualOperation::unsafe_arena_set_allocated_selected_target_id(
    ::KWMsg::Ident* selected_target_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_target_id_);
  }
  selected_target_id_ = selected_target_id;
  if (selected_target_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLManualOperation.selected_target_id)
}
inline ::KWMsg::Ident* BTLManualOperation::release_selected_target_id() {
  
  ::KWMsg::Ident* temp = selected_target_id_;
  selected_target_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BTLManualOperation::unsafe_arena_release_selected_target_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLManualOperation.selected_target_id)
  
  ::KWMsg::Ident* temp = selected_target_id_;
  selected_target_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BTLManualOperation::_internal_mutable_selected_target_id() {
  
  if (selected_target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    selected_target_id_ = p;
  }
  return selected_target_id_;
}
inline ::KWMsg::Ident* BTLManualOperation::mutable_selected_target_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLManualOperation.selected_target_id)
  return _internal_mutable_selected_target_id();
}
inline void BTLManualOperation::set_allocated_selected_target_id(::KWMsg::Ident* selected_target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_target_id_);
  }
  if (selected_target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(selected_target_id));
    if (message_arena != submessage_arena) {
      selected_target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, selected_target_id, submessage_arena);
    }
    
  } else {
    
  }
  selected_target_id_ = selected_target_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLManualOperation.selected_target_id)
}

// -------------------------------------------------------------------

// AckBTLAction

// int32 unique_id = 1;
inline void AckBTLAction::clear_unique_id() {
  unique_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLAction::_internal_unique_id() const {
  return unique_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLAction::unique_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLAction.unique_id)
  return _internal_unique_id();
}
inline void AckBTLAction::_internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unique_id_ = value;
}
inline void AckBTLAction::set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unique_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBTLAction.unique_id)
}

// .KWMsg.BTLAction action = 2;
inline bool AckBTLAction::_internal_has_action() const {
  return this != internal_default_instance() && action_ != nullptr;
}
inline bool AckBTLAction::has_action() const {
  return _internal_has_action();
}
inline void AckBTLAction::clear_action() {
  if (GetArenaForAllocation() == nullptr && action_ != nullptr) {
    delete action_;
  }
  action_ = nullptr;
}
inline const ::KWMsg::BTLAction& AckBTLAction::_internal_action() const {
  const ::KWMsg::BTLAction* p = action_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BTLAction&>(
      ::KWMsg::_BTLAction_default_instance_);
}
inline const ::KWMsg::BTLAction& AckBTLAction::action() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLAction.action)
  return _internal_action();
}
inline void AckBTLAction::unsafe_arena_set_allocated_action(
    ::KWMsg::BTLAction* action) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_);
  }
  action_ = action;
  if (action) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBTLAction.action)
}
inline ::KWMsg::BTLAction* AckBTLAction::release_action() {
  
  ::KWMsg::BTLAction* temp = action_;
  action_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BTLAction* AckBTLAction::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBTLAction.action)
  
  ::KWMsg::BTLAction* temp = action_;
  action_ = nullptr;
  return temp;
}
inline ::KWMsg::BTLAction* AckBTLAction::_internal_mutable_action() {
  
  if (action_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BTLAction>(GetArenaForAllocation());
    action_ = p;
  }
  return action_;
}
inline ::KWMsg::BTLAction* AckBTLAction::mutable_action() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLAction.action)
  return _internal_mutable_action();
}
inline void AckBTLAction::set_allocated_action(::KWMsg::BTLAction* action) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_;
  }
  if (action) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLAction>::GetOwningArena(action);
    if (message_arena != submessage_arena) {
      action = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action, submessage_arena);
    }
    
  } else {
    
  }
  action_ = action;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBTLAction.action)
}

// -------------------------------------------------------------------

// BTLAction

// .KWMsg.BTLStage stage = 1;
inline void BTLAction::clear_stage() {
  stage_ = 0;
}
inline ::KWMsg::BTLStage BTLAction::_internal_stage() const {
  return static_cast< ::KWMsg::BTLStage >(stage_);
}
inline ::KWMsg::BTLStage BTLAction::stage() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLAction.stage)
  return _internal_stage();
}
inline void BTLAction::_internal_set_stage(::KWMsg::BTLStage value) {
  
  stage_ = value;
}
inline void BTLAction::set_stage(::KWMsg::BTLStage value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLAction.stage)
}

// int32 round_number = 2;
inline void BTLAction::clear_round_number() {
  round_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLAction::_internal_round_number() const {
  return round_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLAction::round_number() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLAction.round_number)
  return _internal_round_number();
}
inline void BTLAction::_internal_set_round_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  round_number_ = value;
}
inline void BTLAction::set_round_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_round_number(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLAction.round_number)
}

// .KWMsg.BTLActionQueue action_queue = 3;
inline bool BTLAction::_internal_has_action_queue() const {
  return this != internal_default_instance() && action_queue_ != nullptr;
}
inline bool BTLAction::has_action_queue() const {
  return _internal_has_action_queue();
}
inline void BTLAction::clear_action_queue() {
  if (GetArenaForAllocation() == nullptr && action_queue_ != nullptr) {
    delete action_queue_;
  }
  action_queue_ = nullptr;
}
inline const ::KWMsg::BTLActionQueue& BTLAction::_internal_action_queue() const {
  const ::KWMsg::BTLActionQueue* p = action_queue_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BTLActionQueue&>(
      ::KWMsg::_BTLActionQueue_default_instance_);
}
inline const ::KWMsg::BTLActionQueue& BTLAction::action_queue() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLAction.action_queue)
  return _internal_action_queue();
}
inline void BTLAction::unsafe_arena_set_allocated_action_queue(
    ::KWMsg::BTLActionQueue* action_queue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(action_queue_);
  }
  action_queue_ = action_queue;
  if (action_queue) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLAction.action_queue)
}
inline ::KWMsg::BTLActionQueue* BTLAction::release_action_queue() {
  
  ::KWMsg::BTLActionQueue* temp = action_queue_;
  action_queue_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BTLActionQueue* BTLAction::unsafe_arena_release_action_queue() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLAction.action_queue)
  
  ::KWMsg::BTLActionQueue* temp = action_queue_;
  action_queue_ = nullptr;
  return temp;
}
inline ::KWMsg::BTLActionQueue* BTLAction::_internal_mutable_action_queue() {
  
  if (action_queue_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BTLActionQueue>(GetArenaForAllocation());
    action_queue_ = p;
  }
  return action_queue_;
}
inline ::KWMsg::BTLActionQueue* BTLAction::mutable_action_queue() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLAction.action_queue)
  return _internal_mutable_action_queue();
}
inline void BTLAction::set_allocated_action_queue(::KWMsg::BTLActionQueue* action_queue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete action_queue_;
  }
  if (action_queue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLActionQueue>::GetOwningArena(action_queue);
    if (message_arena != submessage_arena) {
      action_queue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, action_queue, submessage_arena);
    }
    
  } else {
    
  }
  action_queue_ = action_queue;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLAction.action_queue)
}

// .KWMsg.BTLStartDetail start_action = 4;
inline bool BTLAction::_internal_has_start_action() const {
  return action_detail_case() == kStartAction;
}
inline bool BTLAction::has_start_action() const {
  return _internal_has_start_action();
}
inline void BTLAction::set_has_start_action() {
  _oneof_case_[0] = kStartAction;
}
inline void BTLAction::clear_start_action() {
  if (_internal_has_start_action()) {
    if (GetArenaForAllocation() == nullptr) {
      delete action_detail_.start_action_;
    }
    clear_has_action_detail();
  }
}
inline ::KWMsg::BTLStartDetail* BTLAction::release_start_action() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLAction.start_action)
  if (_internal_has_start_action()) {
    clear_has_action_detail();
      ::KWMsg::BTLStartDetail* temp = action_detail_.start_action_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_detail_.start_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::BTLStartDetail& BTLAction::_internal_start_action() const {
  return _internal_has_start_action()
      ? *action_detail_.start_action_
      : reinterpret_cast< ::KWMsg::BTLStartDetail&>(::KWMsg::_BTLStartDetail_default_instance_);
}
inline const ::KWMsg::BTLStartDetail& BTLAction::start_action() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLAction.start_action)
  return _internal_start_action();
}
inline ::KWMsg::BTLStartDetail* BTLAction::unsafe_arena_release_start_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BTLAction.start_action)
  if (_internal_has_start_action()) {
    clear_has_action_detail();
    ::KWMsg::BTLStartDetail* temp = action_detail_.start_action_;
    action_detail_.start_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTLAction::unsafe_arena_set_allocated_start_action(::KWMsg::BTLStartDetail* start_action) {
  clear_action_detail();
  if (start_action) {
    set_has_start_action();
    action_detail_.start_action_ = start_action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLAction.start_action)
}
inline ::KWMsg::BTLStartDetail* BTLAction::_internal_mutable_start_action() {
  if (!_internal_has_start_action()) {
    clear_action_detail();
    set_has_start_action();
    action_detail_.start_action_ = CreateMaybeMessage< ::KWMsg::BTLStartDetail >(GetArenaForAllocation());
  }
  return action_detail_.start_action_;
}
inline ::KWMsg::BTLStartDetail* BTLAction::mutable_start_action() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLAction.start_action)
  return _internal_mutable_start_action();
}

// .KWMsg.BTLInActionDetail in_action = 5;
inline bool BTLAction::_internal_has_in_action() const {
  return action_detail_case() == kInAction;
}
inline bool BTLAction::has_in_action() const {
  return _internal_has_in_action();
}
inline void BTLAction::set_has_in_action() {
  _oneof_case_[0] = kInAction;
}
inline void BTLAction::clear_in_action() {
  if (_internal_has_in_action()) {
    if (GetArenaForAllocation() == nullptr) {
      delete action_detail_.in_action_;
    }
    clear_has_action_detail();
  }
}
inline ::KWMsg::BTLInActionDetail* BTLAction::release_in_action() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLAction.in_action)
  if (_internal_has_in_action()) {
    clear_has_action_detail();
      ::KWMsg::BTLInActionDetail* temp = action_detail_.in_action_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_detail_.in_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::BTLInActionDetail& BTLAction::_internal_in_action() const {
  return _internal_has_in_action()
      ? *action_detail_.in_action_
      : reinterpret_cast< ::KWMsg::BTLInActionDetail&>(::KWMsg::_BTLInActionDetail_default_instance_);
}
inline const ::KWMsg::BTLInActionDetail& BTLAction::in_action() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLAction.in_action)
  return _internal_in_action();
}
inline ::KWMsg::BTLInActionDetail* BTLAction::unsafe_arena_release_in_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BTLAction.in_action)
  if (_internal_has_in_action()) {
    clear_has_action_detail();
    ::KWMsg::BTLInActionDetail* temp = action_detail_.in_action_;
    action_detail_.in_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTLAction::unsafe_arena_set_allocated_in_action(::KWMsg::BTLInActionDetail* in_action) {
  clear_action_detail();
  if (in_action) {
    set_has_in_action();
    action_detail_.in_action_ = in_action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLAction.in_action)
}
inline ::KWMsg::BTLInActionDetail* BTLAction::_internal_mutable_in_action() {
  if (!_internal_has_in_action()) {
    clear_action_detail();
    set_has_in_action();
    action_detail_.in_action_ = CreateMaybeMessage< ::KWMsg::BTLInActionDetail >(GetArenaForAllocation());
  }
  return action_detail_.in_action_;
}
inline ::KWMsg::BTLInActionDetail* BTLAction::mutable_in_action() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLAction.in_action)
  return _internal_mutable_in_action();
}

// .KWMsg.BTLPostPreActionDetail post_pre_action = 6;
inline bool BTLAction::_internal_has_post_pre_action() const {
  return action_detail_case() == kPostPreAction;
}
inline bool BTLAction::has_post_pre_action() const {
  return _internal_has_post_pre_action();
}
inline void BTLAction::set_has_post_pre_action() {
  _oneof_case_[0] = kPostPreAction;
}
inline void BTLAction::clear_post_pre_action() {
  if (_internal_has_post_pre_action()) {
    if (GetArenaForAllocation() == nullptr) {
      delete action_detail_.post_pre_action_;
    }
    clear_has_action_detail();
  }
}
inline ::KWMsg::BTLPostPreActionDetail* BTLAction::release_post_pre_action() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLAction.post_pre_action)
  if (_internal_has_post_pre_action()) {
    clear_has_action_detail();
      ::KWMsg::BTLPostPreActionDetail* temp = action_detail_.post_pre_action_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    action_detail_.post_pre_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::BTLPostPreActionDetail& BTLAction::_internal_post_pre_action() const {
  return _internal_has_post_pre_action()
      ? *action_detail_.post_pre_action_
      : reinterpret_cast< ::KWMsg::BTLPostPreActionDetail&>(::KWMsg::_BTLPostPreActionDetail_default_instance_);
}
inline const ::KWMsg::BTLPostPreActionDetail& BTLAction::post_pre_action() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLAction.post_pre_action)
  return _internal_post_pre_action();
}
inline ::KWMsg::BTLPostPreActionDetail* BTLAction::unsafe_arena_release_post_pre_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BTLAction.post_pre_action)
  if (_internal_has_post_pre_action()) {
    clear_has_action_detail();
    ::KWMsg::BTLPostPreActionDetail* temp = action_detail_.post_pre_action_;
    action_detail_.post_pre_action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTLAction::unsafe_arena_set_allocated_post_pre_action(::KWMsg::BTLPostPreActionDetail* post_pre_action) {
  clear_action_detail();
  if (post_pre_action) {
    set_has_post_pre_action();
    action_detail_.post_pre_action_ = post_pre_action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLAction.post_pre_action)
}
inline ::KWMsg::BTLPostPreActionDetail* BTLAction::_internal_mutable_post_pre_action() {
  if (!_internal_has_post_pre_action()) {
    clear_action_detail();
    set_has_post_pre_action();
    action_detail_.post_pre_action_ = CreateMaybeMessage< ::KWMsg::BTLPostPreActionDetail >(GetArenaForAllocation());
  }
  return action_detail_.post_pre_action_;
}
inline ::KWMsg::BTLPostPreActionDetail* BTLAction::mutable_post_pre_action() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLAction.post_pre_action)
  return _internal_mutable_post_pre_action();
}

inline bool BTLAction::has_action_detail() const {
  return action_detail_case() != ACTION_DETAIL_NOT_SET;
}
inline void BTLAction::clear_has_action_detail() {
  _oneof_case_[0] = ACTION_DETAIL_NOT_SET;
}
inline BTLAction::ActionDetailCase BTLAction::action_detail_case() const {
  return BTLAction::ActionDetailCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BTLActionQueue

// repeated .KWMsg.BTLActionQueueElement elements = 1;
inline int BTLActionQueue::_internal_elements_size() const {
  return elements_.size();
}
inline int BTLActionQueue::elements_size() const {
  return _internal_elements_size();
}
inline void BTLActionQueue::clear_elements() {
  elements_.Clear();
}
inline ::KWMsg::BTLActionQueueElement* BTLActionQueue::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLActionQueue.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLActionQueueElement >*
BTLActionQueue::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLActionQueue.elements)
  return &elements_;
}
inline const ::KWMsg::BTLActionQueueElement& BTLActionQueue::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::KWMsg::BTLActionQueueElement& BTLActionQueue::elements(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLActionQueue.elements)
  return _internal_elements(index);
}
inline ::KWMsg::BTLActionQueueElement* BTLActionQueue::_internal_add_elements() {
  return elements_.Add();
}
inline ::KWMsg::BTLActionQueueElement* BTLActionQueue::add_elements() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLActionQueue.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLActionQueueElement >&
BTLActionQueue::elements() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLActionQueue.elements)
  return elements_;
}

// -------------------------------------------------------------------

// BTLActionQueueElement

// .KWMsg.Ident entity_id = 1;
inline bool BTLActionQueueElement::_internal_has_entity_id() const {
  return this != internal_default_instance() && entity_id_ != nullptr;
}
inline bool BTLActionQueueElement::has_entity_id() const {
  return _internal_has_entity_id();
}
inline const ::KWMsg::Ident& BTLActionQueueElement::_internal_entity_id() const {
  const ::KWMsg::Ident* p = entity_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BTLActionQueueElement::entity_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLActionQueueElement.entity_id)
  return _internal_entity_id();
}
inline void BTLActionQueueElement::unsafe_arena_set_allocated_entity_id(
    ::KWMsg::Ident* entity_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  entity_id_ = entity_id;
  if (entity_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLActionQueueElement.entity_id)
}
inline ::KWMsg::Ident* BTLActionQueueElement::release_entity_id() {
  
  ::KWMsg::Ident* temp = entity_id_;
  entity_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BTLActionQueueElement::unsafe_arena_release_entity_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLActionQueueElement.entity_id)
  
  ::KWMsg::Ident* temp = entity_id_;
  entity_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BTLActionQueueElement::_internal_mutable_entity_id() {
  
  if (entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    entity_id_ = p;
  }
  return entity_id_;
}
inline ::KWMsg::Ident* BTLActionQueueElement::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLActionQueueElement.entity_id)
  return _internal_mutable_entity_id();
}
inline void BTLActionQueueElement::set_allocated_entity_id(::KWMsg::Ident* entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id));
    if (message_arena != submessage_arena) {
      entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    
  } else {
    
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLActionQueueElement.entity_id)
}

// .KWMsg.BTLQueueState queue_state = 2;
inline void BTLActionQueueElement::clear_queue_state() {
  queue_state_ = 0;
}
inline ::KWMsg::BTLQueueState BTLActionQueueElement::_internal_queue_state() const {
  return static_cast< ::KWMsg::BTLQueueState >(queue_state_);
}
inline ::KWMsg::BTLQueueState BTLActionQueueElement::queue_state() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLActionQueueElement.queue_state)
  return _internal_queue_state();
}
inline void BTLActionQueueElement::_internal_set_queue_state(::KWMsg::BTLQueueState value) {
  
  queue_state_ = value;
}
inline void BTLActionQueueElement::set_queue_state(::KWMsg::BTLQueueState value) {
  _internal_set_queue_state(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLActionQueueElement.queue_state)
}

// int32 seq = 3;
inline void BTLActionQueueElement::clear_seq() {
  seq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLActionQueueElement::_internal_seq() const {
  return seq_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLActionQueueElement::seq() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLActionQueueElement.seq)
  return _internal_seq();
}
inline void BTLActionQueueElement::_internal_set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seq_ = value;
}
inline void BTLActionQueueElement::set_seq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seq(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLActionQueueElement.seq)
}

// int32 flag = 4;
inline void BTLActionQueueElement::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLActionQueueElement::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLActionQueueElement::flag() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLActionQueueElement.flag)
  return _internal_flag();
}
inline void BTLActionQueueElement::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void BTLActionQueueElement::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLActionQueueElement.flag)
}

// -------------------------------------------------------------------

// BTLStartDetail

// repeated .KWMsg.BTLEffect effects = 1;
inline int BTLStartDetail::_internal_effects_size() const {
  return effects_.size();
}
inline int BTLStartDetail::effects_size() const {
  return _internal_effects_size();
}
inline void BTLStartDetail::clear_effects() {
  effects_.Clear();
}
inline ::KWMsg::BTLEffect* BTLStartDetail::mutable_effects(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLStartDetail.effects)
  return effects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect >*
BTLStartDetail::mutable_effects() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLStartDetail.effects)
  return &effects_;
}
inline const ::KWMsg::BTLEffect& BTLStartDetail::_internal_effects(int index) const {
  return effects_.Get(index);
}
inline const ::KWMsg::BTLEffect& BTLStartDetail::effects(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLStartDetail.effects)
  return _internal_effects(index);
}
inline ::KWMsg::BTLEffect* BTLStartDetail::_internal_add_effects() {
  return effects_.Add();
}
inline ::KWMsg::BTLEffect* BTLStartDetail::add_effects() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLStartDetail.effects)
  return _internal_add_effects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect >&
BTLStartDetail::effects() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLStartDetail.effects)
  return effects_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// BTLInActionDetail

// .KWMsg.BTLEntityStateInTurn entity_state_in_turn = 1;
inline bool BTLInActionDetail::_internal_has_entity_state_in_turn() const {
  return this != internal_default_instance() && entity_state_in_turn_ != nullptr;
}
inline bool BTLInActionDetail::has_entity_state_in_turn() const {
  return _internal_has_entity_state_in_turn();
}
inline void BTLInActionDetail::clear_entity_state_in_turn() {
  if (GetArenaForAllocation() == nullptr && entity_state_in_turn_ != nullptr) {
    delete entity_state_in_turn_;
  }
  entity_state_in_turn_ = nullptr;
}
inline const ::KWMsg::BTLEntityStateInTurn& BTLInActionDetail::_internal_entity_state_in_turn() const {
  const ::KWMsg::BTLEntityStateInTurn* p = entity_state_in_turn_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BTLEntityStateInTurn&>(
      ::KWMsg::_BTLEntityStateInTurn_default_instance_);
}
inline const ::KWMsg::BTLEntityStateInTurn& BTLInActionDetail::entity_state_in_turn() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLInActionDetail.entity_state_in_turn)
  return _internal_entity_state_in_turn();
}
inline void BTLInActionDetail::unsafe_arena_set_allocated_entity_state_in_turn(
    ::KWMsg::BTLEntityStateInTurn* entity_state_in_turn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_state_in_turn_);
  }
  entity_state_in_turn_ = entity_state_in_turn;
  if (entity_state_in_turn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLInActionDetail.entity_state_in_turn)
}
inline ::KWMsg::BTLEntityStateInTurn* BTLInActionDetail::release_entity_state_in_turn() {
  
  ::KWMsg::BTLEntityStateInTurn* temp = entity_state_in_turn_;
  entity_state_in_turn_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BTLEntityStateInTurn* BTLInActionDetail::unsafe_arena_release_entity_state_in_turn() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLInActionDetail.entity_state_in_turn)
  
  ::KWMsg::BTLEntityStateInTurn* temp = entity_state_in_turn_;
  entity_state_in_turn_ = nullptr;
  return temp;
}
inline ::KWMsg::BTLEntityStateInTurn* BTLInActionDetail::_internal_mutable_entity_state_in_turn() {
  
  if (entity_state_in_turn_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BTLEntityStateInTurn>(GetArenaForAllocation());
    entity_state_in_turn_ = p;
  }
  return entity_state_in_turn_;
}
inline ::KWMsg::BTLEntityStateInTurn* BTLInActionDetail::mutable_entity_state_in_turn() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLInActionDetail.entity_state_in_turn)
  return _internal_mutable_entity_state_in_turn();
}
inline void BTLInActionDetail::set_allocated_entity_state_in_turn(::KWMsg::BTLEntityStateInTurn* entity_state_in_turn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete entity_state_in_turn_;
  }
  if (entity_state_in_turn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLEntityStateInTurn>::GetOwningArena(entity_state_in_turn);
    if (message_arena != submessage_arena) {
      entity_state_in_turn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_state_in_turn, submessage_arena);
    }
    
  } else {
    
  }
  entity_state_in_turn_ = entity_state_in_turn;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLInActionDetail.entity_state_in_turn)
}

// repeated .KWMsg.BTLEffect effects = 2;
inline int BTLInActionDetail::_internal_effects_size() const {
  return effects_.size();
}
inline int BTLInActionDetail::effects_size() const {
  return _internal_effects_size();
}
inline void BTLInActionDetail::clear_effects() {
  effects_.Clear();
}
inline ::KWMsg::BTLEffect* BTLInActionDetail::mutable_effects(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLInActionDetail.effects)
  return effects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect >*
BTLInActionDetail::mutable_effects() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLInActionDetail.effects)
  return &effects_;
}
inline const ::KWMsg::BTLEffect& BTLInActionDetail::_internal_effects(int index) const {
  return effects_.Get(index);
}
inline const ::KWMsg::BTLEffect& BTLInActionDetail::effects(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLInActionDetail.effects)
  return _internal_effects(index);
}
inline ::KWMsg::BTLEffect* BTLInActionDetail::_internal_add_effects() {
  return effects_.Add();
}
inline ::KWMsg::BTLEffect* BTLInActionDetail::add_effects() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLInActionDetail.effects)
  return _internal_add_effects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect >&
BTLInActionDetail::effects() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLInActionDetail.effects)
  return effects_;
}

// map<int32, int32> magic_hues = 3;
inline int BTLInActionDetail::_internal_magic_hues_size() const {
  return magic_hues_.size();
}
inline int BTLInActionDetail::magic_hues_size() const {
  return _internal_magic_hues_size();
}
inline void BTLInActionDetail::clear_magic_hues() {
  magic_hues_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
BTLInActionDetail::_internal_magic_hues() const {
  return magic_hues_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >&
BTLInActionDetail::magic_hues() const {
  // @@protoc_insertion_point(field_map:KWMsg.BTLInActionDetail.magic_hues)
  return _internal_magic_hues();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
BTLInActionDetail::_internal_mutable_magic_hues() {
  return magic_hues_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int32 >*
BTLInActionDetail::mutable_magic_hues() {
  // @@protoc_insertion_point(field_mutable_map:KWMsg.BTLInActionDetail.magic_hues)
  return _internal_mutable_magic_hues();
}

// repeated .KWMsg.BTLEnergyInfo energy_list = 4;
inline int BTLInActionDetail::_internal_energy_list_size() const {
  return energy_list_.size();
}
inline int BTLInActionDetail::energy_list_size() const {
  return _internal_energy_list_size();
}
inline void BTLInActionDetail::clear_energy_list() {
  energy_list_.Clear();
}
inline ::KWMsg::BTLEnergyInfo* BTLInActionDetail::mutable_energy_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLInActionDetail.energy_list)
  return energy_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEnergyInfo >*
BTLInActionDetail::mutable_energy_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLInActionDetail.energy_list)
  return &energy_list_;
}
inline const ::KWMsg::BTLEnergyInfo& BTLInActionDetail::_internal_energy_list(int index) const {
  return energy_list_.Get(index);
}
inline const ::KWMsg::BTLEnergyInfo& BTLInActionDetail::energy_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLInActionDetail.energy_list)
  return _internal_energy_list(index);
}
inline ::KWMsg::BTLEnergyInfo* BTLInActionDetail::_internal_add_energy_list() {
  return energy_list_.Add();
}
inline ::KWMsg::BTLEnergyInfo* BTLInActionDetail::add_energy_list() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLInActionDetail.energy_list)
  return _internal_add_energy_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEnergyInfo >&
BTLInActionDetail::energy_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLInActionDetail.energy_list)
  return energy_list_;
}

// -------------------------------------------------------------------

// BTLPostPreActionDetail

// .KWMsg.BTLEntityStateInTurn entity_state_in_turn = 1;
inline bool BTLPostPreActionDetail::_internal_has_entity_state_in_turn() const {
  return this != internal_default_instance() && entity_state_in_turn_ != nullptr;
}
inline bool BTLPostPreActionDetail::has_entity_state_in_turn() const {
  return _internal_has_entity_state_in_turn();
}
inline void BTLPostPreActionDetail::clear_entity_state_in_turn() {
  if (GetArenaForAllocation() == nullptr && entity_state_in_turn_ != nullptr) {
    delete entity_state_in_turn_;
  }
  entity_state_in_turn_ = nullptr;
}
inline const ::KWMsg::BTLEntityStateInTurn& BTLPostPreActionDetail::_internal_entity_state_in_turn() const {
  const ::KWMsg::BTLEntityStateInTurn* p = entity_state_in_turn_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BTLEntityStateInTurn&>(
      ::KWMsg::_BTLEntityStateInTurn_default_instance_);
}
inline const ::KWMsg::BTLEntityStateInTurn& BTLPostPreActionDetail::entity_state_in_turn() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLPostPreActionDetail.entity_state_in_turn)
  return _internal_entity_state_in_turn();
}
inline void BTLPostPreActionDetail::unsafe_arena_set_allocated_entity_state_in_turn(
    ::KWMsg::BTLEntityStateInTurn* entity_state_in_turn) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_state_in_turn_);
  }
  entity_state_in_turn_ = entity_state_in_turn;
  if (entity_state_in_turn) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLPostPreActionDetail.entity_state_in_turn)
}
inline ::KWMsg::BTLEntityStateInTurn* BTLPostPreActionDetail::release_entity_state_in_turn() {
  
  ::KWMsg::BTLEntityStateInTurn* temp = entity_state_in_turn_;
  entity_state_in_turn_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BTLEntityStateInTurn* BTLPostPreActionDetail::unsafe_arena_release_entity_state_in_turn() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLPostPreActionDetail.entity_state_in_turn)
  
  ::KWMsg::BTLEntityStateInTurn* temp = entity_state_in_turn_;
  entity_state_in_turn_ = nullptr;
  return temp;
}
inline ::KWMsg::BTLEntityStateInTurn* BTLPostPreActionDetail::_internal_mutable_entity_state_in_turn() {
  
  if (entity_state_in_turn_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BTLEntityStateInTurn>(GetArenaForAllocation());
    entity_state_in_turn_ = p;
  }
  return entity_state_in_turn_;
}
inline ::KWMsg::BTLEntityStateInTurn* BTLPostPreActionDetail::mutable_entity_state_in_turn() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLPostPreActionDetail.entity_state_in_turn)
  return _internal_mutable_entity_state_in_turn();
}
inline void BTLPostPreActionDetail::set_allocated_entity_state_in_turn(::KWMsg::BTLEntityStateInTurn* entity_state_in_turn) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete entity_state_in_turn_;
  }
  if (entity_state_in_turn) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLEntityStateInTurn>::GetOwningArena(entity_state_in_turn);
    if (message_arena != submessage_arena) {
      entity_state_in_turn = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_state_in_turn, submessage_arena);
    }
    
  } else {
    
  }
  entity_state_in_turn_ = entity_state_in_turn;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLPostPreActionDetail.entity_state_in_turn)
}

// repeated .KWMsg.BTLEntity new_entities = 2;
inline int BTLPostPreActionDetail::_internal_new_entities_size() const {
  return new_entities_.size();
}
inline int BTLPostPreActionDetail::new_entities_size() const {
  return _internal_new_entities_size();
}
inline void BTLPostPreActionDetail::clear_new_entities() {
  new_entities_.Clear();
}
inline ::KWMsg::BTLEntity* BTLPostPreActionDetail::mutable_new_entities(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLPostPreActionDetail.new_entities)
  return new_entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >*
BTLPostPreActionDetail::mutable_new_entities() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLPostPreActionDetail.new_entities)
  return &new_entities_;
}
inline const ::KWMsg::BTLEntity& BTLPostPreActionDetail::_internal_new_entities(int index) const {
  return new_entities_.Get(index);
}
inline const ::KWMsg::BTLEntity& BTLPostPreActionDetail::new_entities(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLPostPreActionDetail.new_entities)
  return _internal_new_entities(index);
}
inline ::KWMsg::BTLEntity* BTLPostPreActionDetail::_internal_add_new_entities() {
  return new_entities_.Add();
}
inline ::KWMsg::BTLEntity* BTLPostPreActionDetail::add_new_entities() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLPostPreActionDetail.new_entities)
  return _internal_add_new_entities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >&
BTLPostPreActionDetail::new_entities() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLPostPreActionDetail.new_entities)
  return new_entities_;
}

// repeated .KWMsg.BTLEffect effects = 3;
inline int BTLPostPreActionDetail::_internal_effects_size() const {
  return effects_.size();
}
inline int BTLPostPreActionDetail::effects_size() const {
  return _internal_effects_size();
}
inline void BTLPostPreActionDetail::clear_effects() {
  effects_.Clear();
}
inline ::KWMsg::BTLEffect* BTLPostPreActionDetail::mutable_effects(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLPostPreActionDetail.effects)
  return effects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect >*
BTLPostPreActionDetail::mutable_effects() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLPostPreActionDetail.effects)
  return &effects_;
}
inline const ::KWMsg::BTLEffect& BTLPostPreActionDetail::_internal_effects(int index) const {
  return effects_.Get(index);
}
inline const ::KWMsg::BTLEffect& BTLPostPreActionDetail::effects(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLPostPreActionDetail.effects)
  return _internal_effects(index);
}
inline ::KWMsg::BTLEffect* BTLPostPreActionDetail::_internal_add_effects() {
  return effects_.Add();
}
inline ::KWMsg::BTLEffect* BTLPostPreActionDetail::add_effects() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLPostPreActionDetail.effects)
  return _internal_add_effects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEffect >&
BTLPostPreActionDetail::effects() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLPostPreActionDetail.effects)
  return effects_;
}

// -------------------------------------------------------------------

// BTLEntityStateInTurn

// .KWMsg.EGameEventCode code = 1;
inline void BTLEntityStateInTurn::clear_code() {
  code_ = 0;
}
inline ::KWMsg::EGameEventCode BTLEntityStateInTurn::_internal_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(code_);
}
inline ::KWMsg::EGameEventCode BTLEntityStateInTurn::code() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEntityStateInTurn.code)
  return _internal_code();
}
inline void BTLEntityStateInTurn::_internal_set_code(::KWMsg::EGameEventCode value) {
  
  code_ = value;
}
inline void BTLEntityStateInTurn::set_code(::KWMsg::EGameEventCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLEntityStateInTurn.code)
}

// .KWMsg.Ident entity_id = 2;
inline bool BTLEntityStateInTurn::_internal_has_entity_id() const {
  return this != internal_default_instance() && entity_id_ != nullptr;
}
inline bool BTLEntityStateInTurn::has_entity_id() const {
  return _internal_has_entity_id();
}
inline const ::KWMsg::Ident& BTLEntityStateInTurn::_internal_entity_id() const {
  const ::KWMsg::Ident* p = entity_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BTLEntityStateInTurn::entity_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEntityStateInTurn.entity_id)
  return _internal_entity_id();
}
inline void BTLEntityStateInTurn::unsafe_arena_set_allocated_entity_id(
    ::KWMsg::Ident* entity_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  entity_id_ = entity_id;
  if (entity_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLEntityStateInTurn.entity_id)
}
inline ::KWMsg::Ident* BTLEntityStateInTurn::release_entity_id() {
  
  ::KWMsg::Ident* temp = entity_id_;
  entity_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BTLEntityStateInTurn::unsafe_arena_release_entity_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLEntityStateInTurn.entity_id)
  
  ::KWMsg::Ident* temp = entity_id_;
  entity_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BTLEntityStateInTurn::_internal_mutable_entity_id() {
  
  if (entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    entity_id_ = p;
  }
  return entity_id_;
}
inline ::KWMsg::Ident* BTLEntityStateInTurn::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEntityStateInTurn.entity_id)
  return _internal_mutable_entity_id();
}
inline void BTLEntityStateInTurn::set_allocated_entity_id(::KWMsg::Ident* entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id));
    if (message_arena != submessage_arena) {
      entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    
  } else {
    
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEntityStateInTurn.entity_id)
}

// repeated .KWMsg.BTLEntitySkillState skill_states = 3;
inline int BTLEntityStateInTurn::_internal_skill_states_size() const {
  return skill_states_.size();
}
inline int BTLEntityStateInTurn::skill_states_size() const {
  return _internal_skill_states_size();
}
inline void BTLEntityStateInTurn::clear_skill_states() {
  skill_states_.Clear();
}
inline ::KWMsg::BTLEntitySkillState* BTLEntityStateInTurn::mutable_skill_states(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEntityStateInTurn.skill_states)
  return skill_states_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntitySkillState >*
BTLEntityStateInTurn::mutable_skill_states() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLEntityStateInTurn.skill_states)
  return &skill_states_;
}
inline const ::KWMsg::BTLEntitySkillState& BTLEntityStateInTurn::_internal_skill_states(int index) const {
  return skill_states_.Get(index);
}
inline const ::KWMsg::BTLEntitySkillState& BTLEntityStateInTurn::skill_states(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEntityStateInTurn.skill_states)
  return _internal_skill_states(index);
}
inline ::KWMsg::BTLEntitySkillState* BTLEntityStateInTurn::_internal_add_skill_states() {
  return skill_states_.Add();
}
inline ::KWMsg::BTLEntitySkillState* BTLEntityStateInTurn::add_skill_states() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLEntityStateInTurn.skill_states)
  return _internal_add_skill_states();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntitySkillState >&
BTLEntityStateInTurn::skill_states() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLEntityStateInTurn.skill_states)
  return skill_states_;
}

// -------------------------------------------------------------------

// BTLEntitySkillState

// bytes skill_mid = 1;
inline void BTLEntitySkillState::clear_skill_mid() {
  skill_mid_.ClearToEmpty();
}
inline const std::string& BTLEntitySkillState::skill_mid() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEntitySkillState.skill_mid)
  return _internal_skill_mid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BTLEntitySkillState::set_skill_mid(ArgT0&& arg0, ArgT... args) {
 
 skill_mid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BTLEntitySkillState.skill_mid)
}
inline std::string* BTLEntitySkillState::mutable_skill_mid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEntitySkillState.skill_mid)
  return _internal_mutable_skill_mid();
}
inline const std::string& BTLEntitySkillState::_internal_skill_mid() const {
  return skill_mid_.Get();
}
inline void BTLEntitySkillState::_internal_set_skill_mid(const std::string& value) {
  
  skill_mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BTLEntitySkillState::_internal_mutable_skill_mid() {
  
  return skill_mid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BTLEntitySkillState::release_skill_mid() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLEntitySkillState.skill_mid)
  return skill_mid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BTLEntitySkillState::set_allocated_skill_mid(std::string* skill_mid) {
  if (skill_mid != nullptr) {
    
  } else {
    
  }
  skill_mid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), skill_mid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEntitySkillState.skill_mid)
}

// int32 cur_cd = 2;
inline void BTLEntitySkillState::clear_cur_cd() {
  cur_cd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLEntitySkillState::_internal_cur_cd() const {
  return cur_cd_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLEntitySkillState::cur_cd() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEntitySkillState.cur_cd)
  return _internal_cur_cd();
}
inline void BTLEntitySkillState::_internal_set_cur_cd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_cd_ = value;
}
inline void BTLEntitySkillState::set_cur_cd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_cd(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLEntitySkillState.cur_cd)
}

// int32 cost = 3;
inline void BTLEntitySkillState::clear_cost() {
  cost_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLEntitySkillState::_internal_cost() const {
  return cost_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLEntitySkillState::cost() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEntitySkillState.cost)
  return _internal_cost();
}
inline void BTLEntitySkillState::_internal_set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cost_ = value;
}
inline void BTLEntitySkillState::set_cost(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cost(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLEntitySkillState.cost)
}

// .KWMsg.BTLSkillState skill_state = 4;
inline void BTLEntitySkillState::clear_skill_state() {
  skill_state_ = 0;
}
inline ::KWMsg::BTLSkillState BTLEntitySkillState::_internal_skill_state() const {
  return static_cast< ::KWMsg::BTLSkillState >(skill_state_);
}
inline ::KWMsg::BTLSkillState BTLEntitySkillState::skill_state() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEntitySkillState.skill_state)
  return _internal_skill_state();
}
inline void BTLEntitySkillState::_internal_set_skill_state(::KWMsg::BTLSkillState value) {
  
  skill_state_ = value;
}
inline void BTLEntitySkillState::set_skill_state(::KWMsg::BTLSkillState value) {
  _internal_set_skill_state(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLEntitySkillState.skill_state)
}

// repeated .KWMsg.Ident candidate_targets = 5;
inline int BTLEntitySkillState::_internal_candidate_targets_size() const {
  return candidate_targets_.size();
}
inline int BTLEntitySkillState::candidate_targets_size() const {
  return _internal_candidate_targets_size();
}
inline ::KWMsg::Ident* BTLEntitySkillState::mutable_candidate_targets(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEntitySkillState.candidate_targets)
  return candidate_targets_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
BTLEntitySkillState::mutable_candidate_targets() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLEntitySkillState.candidate_targets)
  return &candidate_targets_;
}
inline const ::KWMsg::Ident& BTLEntitySkillState::_internal_candidate_targets(int index) const {
  return candidate_targets_.Get(index);
}
inline const ::KWMsg::Ident& BTLEntitySkillState::candidate_targets(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEntitySkillState.candidate_targets)
  return _internal_candidate_targets(index);
}
inline ::KWMsg::Ident* BTLEntitySkillState::_internal_add_candidate_targets() {
  return candidate_targets_.Add();
}
inline ::KWMsg::Ident* BTLEntitySkillState::add_candidate_targets() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLEntitySkillState.candidate_targets)
  return _internal_add_candidate_targets();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
BTLEntitySkillState::candidate_targets() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLEntitySkillState.candidate_targets)
  return candidate_targets_;
}

// -------------------------------------------------------------------

// BTLEffect

// bytes mid = 1;
inline void BTLEffect::clear_mid() {
  mid_.ClearToEmpty();
}
inline const std::string& BTLEffect::mid() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEffect.mid)
  return _internal_mid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BTLEffect::set_mid(ArgT0&& arg0, ArgT... args) {
 
 mid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BTLEffect.mid)
}
inline std::string* BTLEffect::mutable_mid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEffect.mid)
  return _internal_mutable_mid();
}
inline const std::string& BTLEffect::_internal_mid() const {
  return mid_.Get();
}
inline void BTLEffect::_internal_set_mid(const std::string& value) {
  
  mid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BTLEffect::_internal_mutable_mid() {
  
  return mid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BTLEffect::release_mid() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLEffect.mid)
  return mid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BTLEffect::set_allocated_mid(std::string* mid) {
  if (mid != nullptr) {
    
  } else {
    
  }
  mid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEffect.mid)
}

// int32 type = 2;
inline void BTLEffect::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLEffect::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLEffect::type() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEffect.type)
  return _internal_type();
}
inline void BTLEffect::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
}
inline void BTLEffect::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLEffect.type)
}

// .KWMsg.Ident caster_id = 3;
inline bool BTLEffect::_internal_has_caster_id() const {
  return this != internal_default_instance() && caster_id_ != nullptr;
}
inline bool BTLEffect::has_caster_id() const {
  return _internal_has_caster_id();
}
inline const ::KWMsg::Ident& BTLEffect::_internal_caster_id() const {
  const ::KWMsg::Ident* p = caster_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BTLEffect::caster_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEffect.caster_id)
  return _internal_caster_id();
}
inline void BTLEffect::unsafe_arena_set_allocated_caster_id(
    ::KWMsg::Ident* caster_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caster_id_);
  }
  caster_id_ = caster_id;
  if (caster_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLEffect.caster_id)
}
inline ::KWMsg::Ident* BTLEffect::release_caster_id() {
  
  ::KWMsg::Ident* temp = caster_id_;
  caster_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BTLEffect::unsafe_arena_release_caster_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLEffect.caster_id)
  
  ::KWMsg::Ident* temp = caster_id_;
  caster_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BTLEffect::_internal_mutable_caster_id() {
  
  if (caster_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    caster_id_ = p;
  }
  return caster_id_;
}
inline ::KWMsg::Ident* BTLEffect::mutable_caster_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEffect.caster_id)
  return _internal_mutable_caster_id();
}
inline void BTLEffect::set_allocated_caster_id(::KWMsg::Ident* caster_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(caster_id_);
  }
  if (caster_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(caster_id));
    if (message_arena != submessage_arena) {
      caster_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, caster_id, submessage_arena);
    }
    
  } else {
    
  }
  caster_id_ = caster_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEffect.caster_id)
}

// .KWMsg.Ident target_id = 4;
inline bool BTLEffect::_internal_has_target_id() const {
  return this != internal_default_instance() && target_id_ != nullptr;
}
inline bool BTLEffect::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::KWMsg::Ident& BTLEffect::_internal_target_id() const {
  const ::KWMsg::Ident* p = target_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BTLEffect::target_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEffect.target_id)
  return _internal_target_id();
}
inline void BTLEffect::unsafe_arena_set_allocated_target_id(
    ::KWMsg::Ident* target_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  target_id_ = target_id;
  if (target_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLEffect.target_id)
}
inline ::KWMsg::Ident* BTLEffect::release_target_id() {
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BTLEffect::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLEffect.target_id)
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BTLEffect::_internal_mutable_target_id() {
  
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    target_id_ = p;
  }
  return target_id_;
}
inline ::KWMsg::Ident* BTLEffect::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEffect.target_id)
  return _internal_mutable_target_id();
}
inline void BTLEffect::set_allocated_target_id(::KWMsg::Ident* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id));
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEffect.target_id)
}

// repeated .KWMsg.BTLEntity entities = 5;
inline int BTLEffect::_internal_entities_size() const {
  return entities_.size();
}
inline int BTLEffect::entities_size() const {
  return _internal_entities_size();
}
inline void BTLEffect::clear_entities() {
  entities_.Clear();
}
inline ::KWMsg::BTLEntity* BTLEffect::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEffect.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >*
BTLEffect::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLEffect.entities)
  return &entities_;
}
inline const ::KWMsg::BTLEntity& BTLEffect::_internal_entities(int index) const {
  return entities_.Get(index);
}
inline const ::KWMsg::BTLEntity& BTLEffect::entities(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEffect.entities)
  return _internal_entities(index);
}
inline ::KWMsg::BTLEntity* BTLEffect::_internal_add_entities() {
  return entities_.Add();
}
inline ::KWMsg::BTLEntity* BTLEffect::add_entities() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLEffect.entities)
  return _internal_add_entities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >&
BTLEffect::entities() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLEffect.entities)
  return entities_;
}

// .KWMsg.BTLDamageInfo damage = 6;
inline bool BTLEffect::_internal_has_damage() const {
  return data_case() == kDamage;
}
inline bool BTLEffect::has_damage() const {
  return _internal_has_damage();
}
inline void BTLEffect::set_has_damage() {
  _oneof_case_[0] = kDamage;
}
inline void BTLEffect::clear_damage() {
  if (_internal_has_damage()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.damage_;
    }
    clear_has_data();
  }
}
inline ::KWMsg::BTLDamageInfo* BTLEffect::release_damage() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLEffect.damage)
  if (_internal_has_damage()) {
    clear_has_data();
      ::KWMsg::BTLDamageInfo* temp = data_.damage_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.damage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::BTLDamageInfo& BTLEffect::_internal_damage() const {
  return _internal_has_damage()
      ? *data_.damage_
      : reinterpret_cast< ::KWMsg::BTLDamageInfo&>(::KWMsg::_BTLDamageInfo_default_instance_);
}
inline const ::KWMsg::BTLDamageInfo& BTLEffect::damage() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEffect.damage)
  return _internal_damage();
}
inline ::KWMsg::BTLDamageInfo* BTLEffect::unsafe_arena_release_damage() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BTLEffect.damage)
  if (_internal_has_damage()) {
    clear_has_data();
    ::KWMsg::BTLDamageInfo* temp = data_.damage_;
    data_.damage_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTLEffect::unsafe_arena_set_allocated_damage(::KWMsg::BTLDamageInfo* damage) {
  clear_data();
  if (damage) {
    set_has_damage();
    data_.damage_ = damage;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLEffect.damage)
}
inline ::KWMsg::BTLDamageInfo* BTLEffect::_internal_mutable_damage() {
  if (!_internal_has_damage()) {
    clear_data();
    set_has_damage();
    data_.damage_ = CreateMaybeMessage< ::KWMsg::BTLDamageInfo >(GetArenaForAllocation());
  }
  return data_.damage_;
}
inline ::KWMsg::BTLDamageInfo* BTLEffect::mutable_damage() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEffect.damage)
  return _internal_mutable_damage();
}

// .KWMsg.BTLHealInfo heal = 7;
inline bool BTLEffect::_internal_has_heal() const {
  return data_case() == kHeal;
}
inline bool BTLEffect::has_heal() const {
  return _internal_has_heal();
}
inline void BTLEffect::set_has_heal() {
  _oneof_case_[0] = kHeal;
}
inline void BTLEffect::clear_heal() {
  if (_internal_has_heal()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.heal_;
    }
    clear_has_data();
  }
}
inline ::KWMsg::BTLHealInfo* BTLEffect::release_heal() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLEffect.heal)
  if (_internal_has_heal()) {
    clear_has_data();
      ::KWMsg::BTLHealInfo* temp = data_.heal_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.heal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::BTLHealInfo& BTLEffect::_internal_heal() const {
  return _internal_has_heal()
      ? *data_.heal_
      : reinterpret_cast< ::KWMsg::BTLHealInfo&>(::KWMsg::_BTLHealInfo_default_instance_);
}
inline const ::KWMsg::BTLHealInfo& BTLEffect::heal() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEffect.heal)
  return _internal_heal();
}
inline ::KWMsg::BTLHealInfo* BTLEffect::unsafe_arena_release_heal() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BTLEffect.heal)
  if (_internal_has_heal()) {
    clear_has_data();
    ::KWMsg::BTLHealInfo* temp = data_.heal_;
    data_.heal_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTLEffect::unsafe_arena_set_allocated_heal(::KWMsg::BTLHealInfo* heal) {
  clear_data();
  if (heal) {
    set_has_heal();
    data_.heal_ = heal;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLEffect.heal)
}
inline ::KWMsg::BTLHealInfo* BTLEffect::_internal_mutable_heal() {
  if (!_internal_has_heal()) {
    clear_data();
    set_has_heal();
    data_.heal_ = CreateMaybeMessage< ::KWMsg::BTLHealInfo >(GetArenaForAllocation());
  }
  return data_.heal_;
}
inline ::KWMsg::BTLHealInfo* BTLEffect::mutable_heal() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEffect.heal)
  return _internal_mutable_heal();
}

// .KWMsg.BTLSummonInfo summon = 8;
inline bool BTLEffect::_internal_has_summon() const {
  return data_case() == kSummon;
}
inline bool BTLEffect::has_summon() const {
  return _internal_has_summon();
}
inline void BTLEffect::set_has_summon() {
  _oneof_case_[0] = kSummon;
}
inline void BTLEffect::clear_summon() {
  if (_internal_has_summon()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.summon_;
    }
    clear_has_data();
  }
}
inline ::KWMsg::BTLSummonInfo* BTLEffect::release_summon() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLEffect.summon)
  if (_internal_has_summon()) {
    clear_has_data();
      ::KWMsg::BTLSummonInfo* temp = data_.summon_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.summon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::BTLSummonInfo& BTLEffect::_internal_summon() const {
  return _internal_has_summon()
      ? *data_.summon_
      : reinterpret_cast< ::KWMsg::BTLSummonInfo&>(::KWMsg::_BTLSummonInfo_default_instance_);
}
inline const ::KWMsg::BTLSummonInfo& BTLEffect::summon() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEffect.summon)
  return _internal_summon();
}
inline ::KWMsg::BTLSummonInfo* BTLEffect::unsafe_arena_release_summon() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BTLEffect.summon)
  if (_internal_has_summon()) {
    clear_has_data();
    ::KWMsg::BTLSummonInfo* temp = data_.summon_;
    data_.summon_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTLEffect::unsafe_arena_set_allocated_summon(::KWMsg::BTLSummonInfo* summon) {
  clear_data();
  if (summon) {
    set_has_summon();
    data_.summon_ = summon;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLEffect.summon)
}
inline ::KWMsg::BTLSummonInfo* BTLEffect::_internal_mutable_summon() {
  if (!_internal_has_summon()) {
    clear_data();
    set_has_summon();
    data_.summon_ = CreateMaybeMessage< ::KWMsg::BTLSummonInfo >(GetArenaForAllocation());
  }
  return data_.summon_;
}
inline ::KWMsg::BTLSummonInfo* BTLEffect::mutable_summon() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEffect.summon)
  return _internal_mutable_summon();
}

// .KWMsg.BTLBuffInfo buff = 9;
inline bool BTLEffect::_internal_has_buff() const {
  return data_case() == kBuff;
}
inline bool BTLEffect::has_buff() const {
  return _internal_has_buff();
}
inline void BTLEffect::set_has_buff() {
  _oneof_case_[0] = kBuff;
}
inline void BTLEffect::clear_buff() {
  if (_internal_has_buff()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.buff_;
    }
    clear_has_data();
  }
}
inline ::KWMsg::BTLBuffInfo* BTLEffect::release_buff() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLEffect.buff)
  if (_internal_has_buff()) {
    clear_has_data();
      ::KWMsg::BTLBuffInfo* temp = data_.buff_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.buff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::BTLBuffInfo& BTLEffect::_internal_buff() const {
  return _internal_has_buff()
      ? *data_.buff_
      : reinterpret_cast< ::KWMsg::BTLBuffInfo&>(::KWMsg::_BTLBuffInfo_default_instance_);
}
inline const ::KWMsg::BTLBuffInfo& BTLEffect::buff() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEffect.buff)
  return _internal_buff();
}
inline ::KWMsg::BTLBuffInfo* BTLEffect::unsafe_arena_release_buff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BTLEffect.buff)
  if (_internal_has_buff()) {
    clear_has_data();
    ::KWMsg::BTLBuffInfo* temp = data_.buff_;
    data_.buff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTLEffect::unsafe_arena_set_allocated_buff(::KWMsg::BTLBuffInfo* buff) {
  clear_data();
  if (buff) {
    set_has_buff();
    data_.buff_ = buff;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLEffect.buff)
}
inline ::KWMsg::BTLBuffInfo* BTLEffect::_internal_mutable_buff() {
  if (!_internal_has_buff()) {
    clear_data();
    set_has_buff();
    data_.buff_ = CreateMaybeMessage< ::KWMsg::BTLBuffInfo >(GetArenaForAllocation());
  }
  return data_.buff_;
}
inline ::KWMsg::BTLBuffInfo* BTLEffect::mutable_buff() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEffect.buff)
  return _internal_mutable_buff();
}

inline bool BTLEffect::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void BTLEffect::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline BTLEffect::DataCase BTLEffect::data_case() const {
  return BTLEffect::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BTLDamageInfo

// int32 display_val = 1;
inline void BTLDamageInfo::clear_display_val() {
  display_val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLDamageInfo::_internal_display_val() const {
  return display_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLDamageInfo::display_val() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLDamageInfo.display_val)
  return _internal_display_val();
}
inline void BTLDamageInfo::_internal_set_display_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  display_val_ = value;
}
inline void BTLDamageInfo::set_display_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_display_val(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLDamageInfo.display_val)
}

// int32 hp_change = 2;
inline void BTLDamageInfo::clear_hp_change() {
  hp_change_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLDamageInfo::_internal_hp_change() const {
  return hp_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLDamageInfo::hp_change() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLDamageInfo.hp_change)
  return _internal_hp_change();
}
inline void BTLDamageInfo::_internal_set_hp_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_change_ = value;
}
inline void BTLDamageInfo::set_hp_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp_change(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLDamageInfo.hp_change)
}

// int32 flags = 3;
inline void BTLDamageInfo::clear_flags() {
  flags_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLDamageInfo::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLDamageInfo::flags() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLDamageInfo.flags)
  return _internal_flags();
}
inline void BTLDamageInfo::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flags_ = value;
}
inline void BTLDamageInfo::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLDamageInfo.flags)
}

// .KWMsg.BTLShieldChangeInfo shield_change = 4;
inline bool BTLDamageInfo::_internal_has_shield_change() const {
  return this != internal_default_instance() && shield_change_ != nullptr;
}
inline bool BTLDamageInfo::has_shield_change() const {
  return _internal_has_shield_change();
}
inline void BTLDamageInfo::clear_shield_change() {
  if (GetArenaForAllocation() == nullptr && shield_change_ != nullptr) {
    delete shield_change_;
  }
  shield_change_ = nullptr;
}
inline const ::KWMsg::BTLShieldChangeInfo& BTLDamageInfo::_internal_shield_change() const {
  const ::KWMsg::BTLShieldChangeInfo* p = shield_change_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BTLShieldChangeInfo&>(
      ::KWMsg::_BTLShieldChangeInfo_default_instance_);
}
inline const ::KWMsg::BTLShieldChangeInfo& BTLDamageInfo::shield_change() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLDamageInfo.shield_change)
  return _internal_shield_change();
}
inline void BTLDamageInfo::unsafe_arena_set_allocated_shield_change(
    ::KWMsg::BTLShieldChangeInfo* shield_change) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(shield_change_);
  }
  shield_change_ = shield_change;
  if (shield_change) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLDamageInfo.shield_change)
}
inline ::KWMsg::BTLShieldChangeInfo* BTLDamageInfo::release_shield_change() {
  
  ::KWMsg::BTLShieldChangeInfo* temp = shield_change_;
  shield_change_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BTLShieldChangeInfo* BTLDamageInfo::unsafe_arena_release_shield_change() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLDamageInfo.shield_change)
  
  ::KWMsg::BTLShieldChangeInfo* temp = shield_change_;
  shield_change_ = nullptr;
  return temp;
}
inline ::KWMsg::BTLShieldChangeInfo* BTLDamageInfo::_internal_mutable_shield_change() {
  
  if (shield_change_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BTLShieldChangeInfo>(GetArenaForAllocation());
    shield_change_ = p;
  }
  return shield_change_;
}
inline ::KWMsg::BTLShieldChangeInfo* BTLDamageInfo::mutable_shield_change() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLDamageInfo.shield_change)
  return _internal_mutable_shield_change();
}
inline void BTLDamageInfo::set_allocated_shield_change(::KWMsg::BTLShieldChangeInfo* shield_change) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete shield_change_;
  }
  if (shield_change) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLShieldChangeInfo>::GetOwningArena(shield_change);
    if (message_arena != submessage_arena) {
      shield_change = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shield_change, submessage_arena);
    }
    
  } else {
    
  }
  shield_change_ = shield_change;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLDamageInfo.shield_change)
}

// -------------------------------------------------------------------

// BTLHealInfo

// int32 display_val = 1;
inline void BTLHealInfo::clear_display_val() {
  display_val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLHealInfo::_internal_display_val() const {
  return display_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLHealInfo::display_val() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLHealInfo.display_val)
  return _internal_display_val();
}
inline void BTLHealInfo::_internal_set_display_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  display_val_ = value;
}
inline void BTLHealInfo::set_display_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_display_val(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLHealInfo.display_val)
}

// int32 hp_change = 2;
inline void BTLHealInfo::clear_hp_change() {
  hp_change_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLHealInfo::_internal_hp_change() const {
  return hp_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLHealInfo::hp_change() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLHealInfo.hp_change)
  return _internal_hp_change();
}
inline void BTLHealInfo::_internal_set_hp_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hp_change_ = value;
}
inline void BTLHealInfo::set_hp_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hp_change(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLHealInfo.hp_change)
}

// int32 flags = 3;
inline void BTLHealInfo::clear_flags() {
  flags_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLHealInfo::_internal_flags() const {
  return flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLHealInfo::flags() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLHealInfo.flags)
  return _internal_flags();
}
inline void BTLHealInfo::_internal_set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flags_ = value;
}
inline void BTLHealInfo::set_flags(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flags(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLHealInfo.flags)
}

// -------------------------------------------------------------------

// BTLSummonInfo

// repeated .KWMsg.BTLEntity entities = 1;
inline int BTLSummonInfo::_internal_entities_size() const {
  return entities_.size();
}
inline int BTLSummonInfo::entities_size() const {
  return _internal_entities_size();
}
inline void BTLSummonInfo::clear_entities() {
  entities_.Clear();
}
inline ::KWMsg::BTLEntity* BTLSummonInfo::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLSummonInfo.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >*
BTLSummonInfo::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLSummonInfo.entities)
  return &entities_;
}
inline const ::KWMsg::BTLEntity& BTLSummonInfo::_internal_entities(int index) const {
  return entities_.Get(index);
}
inline const ::KWMsg::BTLEntity& BTLSummonInfo::entities(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLSummonInfo.entities)
  return _internal_entities(index);
}
inline ::KWMsg::BTLEntity* BTLSummonInfo::_internal_add_entities() {
  return entities_.Add();
}
inline ::KWMsg::BTLEntity* BTLSummonInfo::add_entities() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLSummonInfo.entities)
  return _internal_add_entities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >&
BTLSummonInfo::entities() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLSummonInfo.entities)
  return entities_;
}

// -------------------------------------------------------------------

// BTLBuffInfo

// .KWMsg.BTLAddBuffInfo add_buff = 1;
inline bool BTLBuffInfo::_internal_has_add_buff() const {
  return data_case() == kAddBuff;
}
inline bool BTLBuffInfo::has_add_buff() const {
  return _internal_has_add_buff();
}
inline void BTLBuffInfo::set_has_add_buff() {
  _oneof_case_[0] = kAddBuff;
}
inline void BTLBuffInfo::clear_add_buff() {
  if (_internal_has_add_buff()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.add_buff_;
    }
    clear_has_data();
  }
}
inline ::KWMsg::BTLAddBuffInfo* BTLBuffInfo::release_add_buff() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLBuffInfo.add_buff)
  if (_internal_has_add_buff()) {
    clear_has_data();
      ::KWMsg::BTLAddBuffInfo* temp = data_.add_buff_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.add_buff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::BTLAddBuffInfo& BTLBuffInfo::_internal_add_buff() const {
  return _internal_has_add_buff()
      ? *data_.add_buff_
      : reinterpret_cast< ::KWMsg::BTLAddBuffInfo&>(::KWMsg::_BTLAddBuffInfo_default_instance_);
}
inline const ::KWMsg::BTLAddBuffInfo& BTLBuffInfo::add_buff() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLBuffInfo.add_buff)
  return _internal_add_buff();
}
inline ::KWMsg::BTLAddBuffInfo* BTLBuffInfo::unsafe_arena_release_add_buff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BTLBuffInfo.add_buff)
  if (_internal_has_add_buff()) {
    clear_has_data();
    ::KWMsg::BTLAddBuffInfo* temp = data_.add_buff_;
    data_.add_buff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTLBuffInfo::unsafe_arena_set_allocated_add_buff(::KWMsg::BTLAddBuffInfo* add_buff) {
  clear_data();
  if (add_buff) {
    set_has_add_buff();
    data_.add_buff_ = add_buff;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLBuffInfo.add_buff)
}
inline ::KWMsg::BTLAddBuffInfo* BTLBuffInfo::_internal_mutable_add_buff() {
  if (!_internal_has_add_buff()) {
    clear_data();
    set_has_add_buff();
    data_.add_buff_ = CreateMaybeMessage< ::KWMsg::BTLAddBuffInfo >(GetArenaForAllocation());
  }
  return data_.add_buff_;
}
inline ::KWMsg::BTLAddBuffInfo* BTLBuffInfo::mutable_add_buff() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLBuffInfo.add_buff)
  return _internal_mutable_add_buff();
}

// .KWMsg.BTLRemoveBuffInfo remove_buff = 2;
inline bool BTLBuffInfo::_internal_has_remove_buff() const {
  return data_case() == kRemoveBuff;
}
inline bool BTLBuffInfo::has_remove_buff() const {
  return _internal_has_remove_buff();
}
inline void BTLBuffInfo::set_has_remove_buff() {
  _oneof_case_[0] = kRemoveBuff;
}
inline void BTLBuffInfo::clear_remove_buff() {
  if (_internal_has_remove_buff()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.remove_buff_;
    }
    clear_has_data();
  }
}
inline ::KWMsg::BTLRemoveBuffInfo* BTLBuffInfo::release_remove_buff() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLBuffInfo.remove_buff)
  if (_internal_has_remove_buff()) {
    clear_has_data();
      ::KWMsg::BTLRemoveBuffInfo* temp = data_.remove_buff_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.remove_buff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::BTLRemoveBuffInfo& BTLBuffInfo::_internal_remove_buff() const {
  return _internal_has_remove_buff()
      ? *data_.remove_buff_
      : reinterpret_cast< ::KWMsg::BTLRemoveBuffInfo&>(::KWMsg::_BTLRemoveBuffInfo_default_instance_);
}
inline const ::KWMsg::BTLRemoveBuffInfo& BTLBuffInfo::remove_buff() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLBuffInfo.remove_buff)
  return _internal_remove_buff();
}
inline ::KWMsg::BTLRemoveBuffInfo* BTLBuffInfo::unsafe_arena_release_remove_buff() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BTLBuffInfo.remove_buff)
  if (_internal_has_remove_buff()) {
    clear_has_data();
    ::KWMsg::BTLRemoveBuffInfo* temp = data_.remove_buff_;
    data_.remove_buff_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTLBuffInfo::unsafe_arena_set_allocated_remove_buff(::KWMsg::BTLRemoveBuffInfo* remove_buff) {
  clear_data();
  if (remove_buff) {
    set_has_remove_buff();
    data_.remove_buff_ = remove_buff;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLBuffInfo.remove_buff)
}
inline ::KWMsg::BTLRemoveBuffInfo* BTLBuffInfo::_internal_mutable_remove_buff() {
  if (!_internal_has_remove_buff()) {
    clear_data();
    set_has_remove_buff();
    data_.remove_buff_ = CreateMaybeMessage< ::KWMsg::BTLRemoveBuffInfo >(GetArenaForAllocation());
  }
  return data_.remove_buff_;
}
inline ::KWMsg::BTLRemoveBuffInfo* BTLBuffInfo::mutable_remove_buff() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLBuffInfo.remove_buff)
  return _internal_mutable_remove_buff();
}

// .KWMsg.BTLShieldChangeInfo shield_change = 3;
inline bool BTLBuffInfo::_internal_has_shield_change() const {
  return data_case() == kShieldChange;
}
inline bool BTLBuffInfo::has_shield_change() const {
  return _internal_has_shield_change();
}
inline void BTLBuffInfo::set_has_shield_change() {
  _oneof_case_[0] = kShieldChange;
}
inline void BTLBuffInfo::clear_shield_change() {
  if (_internal_has_shield_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.shield_change_;
    }
    clear_has_data();
  }
}
inline ::KWMsg::BTLShieldChangeInfo* BTLBuffInfo::release_shield_change() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLBuffInfo.shield_change)
  if (_internal_has_shield_change()) {
    clear_has_data();
      ::KWMsg::BTLShieldChangeInfo* temp = data_.shield_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.shield_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::BTLShieldChangeInfo& BTLBuffInfo::_internal_shield_change() const {
  return _internal_has_shield_change()
      ? *data_.shield_change_
      : reinterpret_cast< ::KWMsg::BTLShieldChangeInfo&>(::KWMsg::_BTLShieldChangeInfo_default_instance_);
}
inline const ::KWMsg::BTLShieldChangeInfo& BTLBuffInfo::shield_change() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLBuffInfo.shield_change)
  return _internal_shield_change();
}
inline ::KWMsg::BTLShieldChangeInfo* BTLBuffInfo::unsafe_arena_release_shield_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BTLBuffInfo.shield_change)
  if (_internal_has_shield_change()) {
    clear_has_data();
    ::KWMsg::BTLShieldChangeInfo* temp = data_.shield_change_;
    data_.shield_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTLBuffInfo::unsafe_arena_set_allocated_shield_change(::KWMsg::BTLShieldChangeInfo* shield_change) {
  clear_data();
  if (shield_change) {
    set_has_shield_change();
    data_.shield_change_ = shield_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLBuffInfo.shield_change)
}
inline ::KWMsg::BTLShieldChangeInfo* BTLBuffInfo::_internal_mutable_shield_change() {
  if (!_internal_has_shield_change()) {
    clear_data();
    set_has_shield_change();
    data_.shield_change_ = CreateMaybeMessage< ::KWMsg::BTLShieldChangeInfo >(GetArenaForAllocation());
  }
  return data_.shield_change_;
}
inline ::KWMsg::BTLShieldChangeInfo* BTLBuffInfo::mutable_shield_change() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLBuffInfo.shield_change)
  return _internal_mutable_shield_change();
}

// .KWMsg.BTLSealChangeInfo seal_change = 4;
inline bool BTLBuffInfo::_internal_has_seal_change() const {
  return data_case() == kSealChange;
}
inline bool BTLBuffInfo::has_seal_change() const {
  return _internal_has_seal_change();
}
inline void BTLBuffInfo::set_has_seal_change() {
  _oneof_case_[0] = kSealChange;
}
inline void BTLBuffInfo::clear_seal_change() {
  if (_internal_has_seal_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.seal_change_;
    }
    clear_has_data();
  }
}
inline ::KWMsg::BTLSealChangeInfo* BTLBuffInfo::release_seal_change() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLBuffInfo.seal_change)
  if (_internal_has_seal_change()) {
    clear_has_data();
      ::KWMsg::BTLSealChangeInfo* temp = data_.seal_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.seal_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::BTLSealChangeInfo& BTLBuffInfo::_internal_seal_change() const {
  return _internal_has_seal_change()
      ? *data_.seal_change_
      : reinterpret_cast< ::KWMsg::BTLSealChangeInfo&>(::KWMsg::_BTLSealChangeInfo_default_instance_);
}
inline const ::KWMsg::BTLSealChangeInfo& BTLBuffInfo::seal_change() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLBuffInfo.seal_change)
  return _internal_seal_change();
}
inline ::KWMsg::BTLSealChangeInfo* BTLBuffInfo::unsafe_arena_release_seal_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BTLBuffInfo.seal_change)
  if (_internal_has_seal_change()) {
    clear_has_data();
    ::KWMsg::BTLSealChangeInfo* temp = data_.seal_change_;
    data_.seal_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTLBuffInfo::unsafe_arena_set_allocated_seal_change(::KWMsg::BTLSealChangeInfo* seal_change) {
  clear_data();
  if (seal_change) {
    set_has_seal_change();
    data_.seal_change_ = seal_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLBuffInfo.seal_change)
}
inline ::KWMsg::BTLSealChangeInfo* BTLBuffInfo::_internal_mutable_seal_change() {
  if (!_internal_has_seal_change()) {
    clear_data();
    set_has_seal_change();
    data_.seal_change_ = CreateMaybeMessage< ::KWMsg::BTLSealChangeInfo >(GetArenaForAllocation());
  }
  return data_.seal_change_;
}
inline ::KWMsg::BTLSealChangeInfo* BTLBuffInfo::mutable_seal_change() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLBuffInfo.seal_change)
  return _internal_mutable_seal_change();
}

// .KWMsg.BTLStateChangeInfo state_change = 5;
inline bool BTLBuffInfo::_internal_has_state_change() const {
  return data_case() == kStateChange;
}
inline bool BTLBuffInfo::has_state_change() const {
  return _internal_has_state_change();
}
inline void BTLBuffInfo::set_has_state_change() {
  _oneof_case_[0] = kStateChange;
}
inline void BTLBuffInfo::clear_state_change() {
  if (_internal_has_state_change()) {
    if (GetArenaForAllocation() == nullptr) {
      delete data_.state_change_;
    }
    clear_has_data();
  }
}
inline ::KWMsg::BTLStateChangeInfo* BTLBuffInfo::release_state_change() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLBuffInfo.state_change)
  if (_internal_has_state_change()) {
    clear_has_data();
      ::KWMsg::BTLStateChangeInfo* temp = data_.state_change_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    data_.state_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::BTLStateChangeInfo& BTLBuffInfo::_internal_state_change() const {
  return _internal_has_state_change()
      ? *data_.state_change_
      : reinterpret_cast< ::KWMsg::BTLStateChangeInfo&>(::KWMsg::_BTLStateChangeInfo_default_instance_);
}
inline const ::KWMsg::BTLStateChangeInfo& BTLBuffInfo::state_change() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLBuffInfo.state_change)
  return _internal_state_change();
}
inline ::KWMsg::BTLStateChangeInfo* BTLBuffInfo::unsafe_arena_release_state_change() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BTLBuffInfo.state_change)
  if (_internal_has_state_change()) {
    clear_has_data();
    ::KWMsg::BTLStateChangeInfo* temp = data_.state_change_;
    data_.state_change_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BTLBuffInfo::unsafe_arena_set_allocated_state_change(::KWMsg::BTLStateChangeInfo* state_change) {
  clear_data();
  if (state_change) {
    set_has_state_change();
    data_.state_change_ = state_change;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLBuffInfo.state_change)
}
inline ::KWMsg::BTLStateChangeInfo* BTLBuffInfo::_internal_mutable_state_change() {
  if (!_internal_has_state_change()) {
    clear_data();
    set_has_state_change();
    data_.state_change_ = CreateMaybeMessage< ::KWMsg::BTLStateChangeInfo >(GetArenaForAllocation());
  }
  return data_.state_change_;
}
inline ::KWMsg::BTLStateChangeInfo* BTLBuffInfo::mutable_state_change() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLBuffInfo.state_change)
  return _internal_mutable_state_change();
}

inline bool BTLBuffInfo::has_data() const {
  return data_case() != DATA_NOT_SET;
}
inline void BTLBuffInfo::clear_has_data() {
  _oneof_case_[0] = DATA_NOT_SET;
}
inline BTLBuffInfo::DataCase BTLBuffInfo::data_case() const {
  return BTLBuffInfo::DataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BTLAddBuffInfo

// bytes buff_id = 1;
inline void BTLAddBuffInfo::clear_buff_id() {
  buff_id_.ClearToEmpty();
}
inline const std::string& BTLAddBuffInfo::buff_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLAddBuffInfo.buff_id)
  return _internal_buff_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BTLAddBuffInfo::set_buff_id(ArgT0&& arg0, ArgT... args) {
 
 buff_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BTLAddBuffInfo.buff_id)
}
inline std::string* BTLAddBuffInfo::mutable_buff_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLAddBuffInfo.buff_id)
  return _internal_mutable_buff_id();
}
inline const std::string& BTLAddBuffInfo::_internal_buff_id() const {
  return buff_id_.Get();
}
inline void BTLAddBuffInfo::_internal_set_buff_id(const std::string& value) {
  
  buff_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BTLAddBuffInfo::_internal_mutable_buff_id() {
  
  return buff_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BTLAddBuffInfo::release_buff_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLAddBuffInfo.buff_id)
  return buff_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BTLAddBuffInfo::set_allocated_buff_id(std::string* buff_id) {
  if (buff_id != nullptr) {
    
  } else {
    
  }
  buff_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buff_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLAddBuffInfo.buff_id)
}

// -------------------------------------------------------------------

// BTLRemoveBuffInfo

// repeated bytes buff_id = 1;
inline int BTLRemoveBuffInfo::_internal_buff_id_size() const {
  return buff_id_.size();
}
inline int BTLRemoveBuffInfo::buff_id_size() const {
  return _internal_buff_id_size();
}
inline void BTLRemoveBuffInfo::clear_buff_id() {
  buff_id_.Clear();
}
inline std::string* BTLRemoveBuffInfo::add_buff_id() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.BTLRemoveBuffInfo.buff_id)
  return _internal_add_buff_id();
}
inline const std::string& BTLRemoveBuffInfo::_internal_buff_id(int index) const {
  return buff_id_.Get(index);
}
inline const std::string& BTLRemoveBuffInfo::buff_id(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLRemoveBuffInfo.buff_id)
  return _internal_buff_id(index);
}
inline std::string* BTLRemoveBuffInfo::mutable_buff_id(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLRemoveBuffInfo.buff_id)
  return buff_id_.Mutable(index);
}
inline void BTLRemoveBuffInfo::set_buff_id(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.BTLRemoveBuffInfo.buff_id)
  buff_id_.Mutable(index)->assign(value);
}
inline void BTLRemoveBuffInfo::set_buff_id(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.BTLRemoveBuffInfo.buff_id)
  buff_id_.Mutable(index)->assign(std::move(value));
}
inline void BTLRemoveBuffInfo::set_buff_id(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  buff_id_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.BTLRemoveBuffInfo.buff_id)
}
inline void BTLRemoveBuffInfo::set_buff_id(int index, const void* value, size_t size) {
  buff_id_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.BTLRemoveBuffInfo.buff_id)
}
inline std::string* BTLRemoveBuffInfo::_internal_add_buff_id() {
  return buff_id_.Add();
}
inline void BTLRemoveBuffInfo::add_buff_id(const std::string& value) {
  buff_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.BTLRemoveBuffInfo.buff_id)
}
inline void BTLRemoveBuffInfo::add_buff_id(std::string&& value) {
  buff_id_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.BTLRemoveBuffInfo.buff_id)
}
inline void BTLRemoveBuffInfo::add_buff_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  buff_id_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.BTLRemoveBuffInfo.buff_id)
}
inline void BTLRemoveBuffInfo::add_buff_id(const void* value, size_t size) {
  buff_id_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.BTLRemoveBuffInfo.buff_id)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BTLRemoveBuffInfo::buff_id() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLRemoveBuffInfo.buff_id)
  return buff_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BTLRemoveBuffInfo::mutable_buff_id() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLRemoveBuffInfo.buff_id)
  return &buff_id_;
}

// -------------------------------------------------------------------

// BTLShieldChangeInfo

// bytes buff_id = 1;
inline void BTLShieldChangeInfo::clear_buff_id() {
  buff_id_.ClearToEmpty();
}
inline const std::string& BTLShieldChangeInfo::buff_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLShieldChangeInfo.buff_id)
  return _internal_buff_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BTLShieldChangeInfo::set_buff_id(ArgT0&& arg0, ArgT... args) {
 
 buff_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BTLShieldChangeInfo.buff_id)
}
inline std::string* BTLShieldChangeInfo::mutable_buff_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLShieldChangeInfo.buff_id)
  return _internal_mutable_buff_id();
}
inline const std::string& BTLShieldChangeInfo::_internal_buff_id() const {
  return buff_id_.Get();
}
inline void BTLShieldChangeInfo::_internal_set_buff_id(const std::string& value) {
  
  buff_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BTLShieldChangeInfo::_internal_mutable_buff_id() {
  
  return buff_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BTLShieldChangeInfo::release_buff_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLShieldChangeInfo.buff_id)
  return buff_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BTLShieldChangeInfo::set_allocated_buff_id(std::string* buff_id) {
  if (buff_id != nullptr) {
    
  } else {
    
  }
  buff_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buff_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLShieldChangeInfo.buff_id)
}

// int32 shield_change = 2;
inline void BTLShieldChangeInfo::clear_shield_change() {
  shield_change_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLShieldChangeInfo::_internal_shield_change() const {
  return shield_change_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLShieldChangeInfo::shield_change() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLShieldChangeInfo.shield_change)
  return _internal_shield_change();
}
inline void BTLShieldChangeInfo::_internal_set_shield_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  shield_change_ = value;
}
inline void BTLShieldChangeInfo::set_shield_change(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shield_change(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLShieldChangeInfo.shield_change)
}

// int32 change_mode = 3;
inline void BTLShieldChangeInfo::clear_change_mode() {
  change_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLShieldChangeInfo::_internal_change_mode() const {
  return change_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLShieldChangeInfo::change_mode() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLShieldChangeInfo.change_mode)
  return _internal_change_mode();
}
inline void BTLShieldChangeInfo::_internal_set_change_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  change_mode_ = value;
}
inline void BTLShieldChangeInfo::set_change_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_change_mode(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLShieldChangeInfo.change_mode)
}

// -------------------------------------------------------------------

// BTLSealChangeInfo

// repeated bytes skills = 1;
inline int BTLSealChangeInfo::_internal_skills_size() const {
  return skills_.size();
}
inline int BTLSealChangeInfo::skills_size() const {
  return _internal_skills_size();
}
inline void BTLSealChangeInfo::clear_skills() {
  skills_.Clear();
}
inline std::string* BTLSealChangeInfo::add_skills() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.BTLSealChangeInfo.skills)
  return _internal_add_skills();
}
inline const std::string& BTLSealChangeInfo::_internal_skills(int index) const {
  return skills_.Get(index);
}
inline const std::string& BTLSealChangeInfo::skills(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLSealChangeInfo.skills)
  return _internal_skills(index);
}
inline std::string* BTLSealChangeInfo::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLSealChangeInfo.skills)
  return skills_.Mutable(index);
}
inline void BTLSealChangeInfo::set_skills(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.BTLSealChangeInfo.skills)
  skills_.Mutable(index)->assign(value);
}
inline void BTLSealChangeInfo::set_skills(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.BTLSealChangeInfo.skills)
  skills_.Mutable(index)->assign(std::move(value));
}
inline void BTLSealChangeInfo::set_skills(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  skills_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.BTLSealChangeInfo.skills)
}
inline void BTLSealChangeInfo::set_skills(int index, const void* value, size_t size) {
  skills_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.BTLSealChangeInfo.skills)
}
inline std::string* BTLSealChangeInfo::_internal_add_skills() {
  return skills_.Add();
}
inline void BTLSealChangeInfo::add_skills(const std::string& value) {
  skills_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.BTLSealChangeInfo.skills)
}
inline void BTLSealChangeInfo::add_skills(std::string&& value) {
  skills_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.BTLSealChangeInfo.skills)
}
inline void BTLSealChangeInfo::add_skills(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  skills_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.BTLSealChangeInfo.skills)
}
inline void BTLSealChangeInfo::add_skills(const void* value, size_t size) {
  skills_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.BTLSealChangeInfo.skills)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BTLSealChangeInfo::skills() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLSealChangeInfo.skills)
  return skills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BTLSealChangeInfo::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLSealChangeInfo.skills)
  return &skills_;
}

// int32 seal_mode = 2;
inline void BTLSealChangeInfo::clear_seal_mode() {
  seal_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLSealChangeInfo::_internal_seal_mode() const {
  return seal_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLSealChangeInfo::seal_mode() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLSealChangeInfo.seal_mode)
  return _internal_seal_mode();
}
inline void BTLSealChangeInfo::_internal_set_seal_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  seal_mode_ = value;
}
inline void BTLSealChangeInfo::set_seal_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_seal_mode(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLSealChangeInfo.seal_mode)
}

// -------------------------------------------------------------------

// BTLStateChangeInfo

// bytes buff_id = 1;
inline void BTLStateChangeInfo::clear_buff_id() {
  buff_id_.ClearToEmpty();
}
inline const std::string& BTLStateChangeInfo::buff_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLStateChangeInfo.buff_id)
  return _internal_buff_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BTLStateChangeInfo::set_buff_id(ArgT0&& arg0, ArgT... args) {
 
 buff_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BTLStateChangeInfo.buff_id)
}
inline std::string* BTLStateChangeInfo::mutable_buff_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLStateChangeInfo.buff_id)
  return _internal_mutable_buff_id();
}
inline const std::string& BTLStateChangeInfo::_internal_buff_id() const {
  return buff_id_.Get();
}
inline void BTLStateChangeInfo::_internal_set_buff_id(const std::string& value) {
  
  buff_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BTLStateChangeInfo::_internal_mutable_buff_id() {
  
  return buff_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BTLStateChangeInfo::release_buff_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLStateChangeInfo.buff_id)
  return buff_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BTLStateChangeInfo::set_allocated_buff_id(std::string* buff_id) {
  if (buff_id != nullptr) {
    
  } else {
    
  }
  buff_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), buff_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLStateChangeInfo.buff_id)
}

// int32 state = 2;
inline void BTLStateChangeInfo::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLStateChangeInfo::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLStateChangeInfo::state() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLStateChangeInfo.state)
  return _internal_state();
}
inline void BTLStateChangeInfo::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void BTLStateChangeInfo::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLStateChangeInfo.state)
}

// int32 change_mode = 3;
inline void BTLStateChangeInfo::clear_change_mode() {
  change_mode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLStateChangeInfo::_internal_change_mode() const {
  return change_mode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLStateChangeInfo::change_mode() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLStateChangeInfo.change_mode)
  return _internal_change_mode();
}
inline void BTLStateChangeInfo::_internal_set_change_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  change_mode_ = value;
}
inline void BTLStateChangeInfo::set_change_mode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_change_mode(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLStateChangeInfo.change_mode)
}

// -------------------------------------------------------------------

// BTLChangedEntity

// repeated .KWMsg.BTLEntity entities = 1;
inline int BTLChangedEntity::_internal_entities_size() const {
  return entities_.size();
}
inline int BTLChangedEntity::entities_size() const {
  return _internal_entities_size();
}
inline void BTLChangedEntity::clear_entities() {
  entities_.Clear();
}
inline ::KWMsg::BTLEntity* BTLChangedEntity::mutable_entities(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLChangedEntity.entities)
  return entities_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >*
BTLChangedEntity::mutable_entities() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLChangedEntity.entities)
  return &entities_;
}
inline const ::KWMsg::BTLEntity& BTLChangedEntity::_internal_entities(int index) const {
  return entities_.Get(index);
}
inline const ::KWMsg::BTLEntity& BTLChangedEntity::entities(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLChangedEntity.entities)
  return _internal_entities(index);
}
inline ::KWMsg::BTLEntity* BTLChangedEntity::_internal_add_entities() {
  return entities_.Add();
}
inline ::KWMsg::BTLEntity* BTLChangedEntity::add_entities() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLChangedEntity.entities)
  return _internal_add_entities();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntity >&
BTLChangedEntity::entities() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLChangedEntity.entities)
  return entities_;
}

// -------------------------------------------------------------------

// ReqBTLPullMsg

// .KWMsg.Ident player_id = 1;
inline bool ReqBTLPullMsg::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBTLPullMsg::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBTLPullMsg::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBTLPullMsg::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBTLPullMsg.player_id)
  return _internal_player_id();
}
inline void ReqBTLPullMsg::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBTLPullMsg.player_id)
}
inline ::KWMsg::Ident* ReqBTLPullMsg::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBTLPullMsg::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBTLPullMsg.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBTLPullMsg::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBTLPullMsg::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBTLPullMsg.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBTLPullMsg::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBTLPullMsg.player_id)
}

// int32 unique_id = 2;
inline void ReqBTLPullMsg::clear_unique_id() {
  unique_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqBTLPullMsg::_internal_unique_id() const {
  return unique_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqBTLPullMsg::unique_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBTLPullMsg.unique_id)
  return _internal_unique_id();
}
inline void ReqBTLPullMsg::_internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unique_id_ = value;
}
inline void ReqBTLPullMsg::set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unique_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqBTLPullMsg.unique_id)
}

// -------------------------------------------------------------------

// AckBTLPullMsg_BTLAckMsgWrapper

// int32 msg_type = 1;
inline void AckBTLPullMsg_BTLAckMsgWrapper::clear_msg_type() {
  msg_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLPullMsg_BTLAckMsgWrapper::_internal_msg_type() const {
  return msg_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLPullMsg_BTLAckMsgWrapper::msg_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.msg_type)
  return _internal_msg_type();
}
inline void AckBTLPullMsg_BTLAckMsgWrapper::_internal_set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  msg_type_ = value;
}
inline void AckBTLPullMsg_BTLAckMsgWrapper::set_msg_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msg_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.msg_type)
}

// .KWMsg.AckBTLInfo info = 2;
inline bool AckBTLPullMsg_BTLAckMsgWrapper::_internal_has_info() const {
  return msg_data_case() == kInfo;
}
inline bool AckBTLPullMsg_BTLAckMsgWrapper::has_info() const {
  return _internal_has_info();
}
inline void AckBTLPullMsg_BTLAckMsgWrapper::set_has_info() {
  _oneof_case_[0] = kInfo;
}
inline void AckBTLPullMsg_BTLAckMsgWrapper::clear_info() {
  if (_internal_has_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete msg_data_.info_;
    }
    clear_has_msg_data();
  }
}
inline ::KWMsg::AckBTLInfo* AckBTLPullMsg_BTLAckMsgWrapper::release_info() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.info)
  if (_internal_has_info()) {
    clear_has_msg_data();
      ::KWMsg::AckBTLInfo* temp = msg_data_.info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_data_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::AckBTLInfo& AckBTLPullMsg_BTLAckMsgWrapper::_internal_info() const {
  return _internal_has_info()
      ? *msg_data_.info_
      : reinterpret_cast< ::KWMsg::AckBTLInfo&>(::KWMsg::_AckBTLInfo_default_instance_);
}
inline const ::KWMsg::AckBTLInfo& AckBTLPullMsg_BTLAckMsgWrapper::info() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.info)
  return _internal_info();
}
inline ::KWMsg::AckBTLInfo* AckBTLPullMsg_BTLAckMsgWrapper::unsafe_arena_release_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.info)
  if (_internal_has_info()) {
    clear_has_msg_data();
    ::KWMsg::AckBTLInfo* temp = msg_data_.info_;
    msg_data_.info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AckBTLPullMsg_BTLAckMsgWrapper::unsafe_arena_set_allocated_info(::KWMsg::AckBTLInfo* info) {
  clear_msg_data();
  if (info) {
    set_has_info();
    msg_data_.info_ = info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.info)
}
inline ::KWMsg::AckBTLInfo* AckBTLPullMsg_BTLAckMsgWrapper::_internal_mutable_info() {
  if (!_internal_has_info()) {
    clear_msg_data();
    set_has_info();
    msg_data_.info_ = CreateMaybeMessage< ::KWMsg::AckBTLInfo >(GetArenaForAllocation());
  }
  return msg_data_.info_;
}
inline ::KWMsg::AckBTLInfo* AckBTLPullMsg_BTLAckMsgWrapper::mutable_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.info)
  return _internal_mutable_info();
}

// .KWMsg.AckBTLPk pk = 3;
inline bool AckBTLPullMsg_BTLAckMsgWrapper::_internal_has_pk() const {
  return msg_data_case() == kPk;
}
inline bool AckBTLPullMsg_BTLAckMsgWrapper::has_pk() const {
  return _internal_has_pk();
}
inline void AckBTLPullMsg_BTLAckMsgWrapper::set_has_pk() {
  _oneof_case_[0] = kPk;
}
inline void AckBTLPullMsg_BTLAckMsgWrapper::clear_pk() {
  if (_internal_has_pk()) {
    if (GetArenaForAllocation() == nullptr) {
      delete msg_data_.pk_;
    }
    clear_has_msg_data();
  }
}
inline ::KWMsg::AckBTLPk* AckBTLPullMsg_BTLAckMsgWrapper::release_pk() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.pk)
  if (_internal_has_pk()) {
    clear_has_msg_data();
      ::KWMsg::AckBTLPk* temp = msg_data_.pk_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_data_.pk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::AckBTLPk& AckBTLPullMsg_BTLAckMsgWrapper::_internal_pk() const {
  return _internal_has_pk()
      ? *msg_data_.pk_
      : reinterpret_cast< ::KWMsg::AckBTLPk&>(::KWMsg::_AckBTLPk_default_instance_);
}
inline const ::KWMsg::AckBTLPk& AckBTLPullMsg_BTLAckMsgWrapper::pk() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.pk)
  return _internal_pk();
}
inline ::KWMsg::AckBTLPk* AckBTLPullMsg_BTLAckMsgWrapper::unsafe_arena_release_pk() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.pk)
  if (_internal_has_pk()) {
    clear_has_msg_data();
    ::KWMsg::AckBTLPk* temp = msg_data_.pk_;
    msg_data_.pk_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AckBTLPullMsg_BTLAckMsgWrapper::unsafe_arena_set_allocated_pk(::KWMsg::AckBTLPk* pk) {
  clear_msg_data();
  if (pk) {
    set_has_pk();
    msg_data_.pk_ = pk;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.pk)
}
inline ::KWMsg::AckBTLPk* AckBTLPullMsg_BTLAckMsgWrapper::_internal_mutable_pk() {
  if (!_internal_has_pk()) {
    clear_msg_data();
    set_has_pk();
    msg_data_.pk_ = CreateMaybeMessage< ::KWMsg::AckBTLPk >(GetArenaForAllocation());
  }
  return msg_data_.pk_;
}
inline ::KWMsg::AckBTLPk* AckBTLPullMsg_BTLAckMsgWrapper::mutable_pk() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.pk)
  return _internal_mutable_pk();
}

// .KWMsg.AckBTLAction action = 4;
inline bool AckBTLPullMsg_BTLAckMsgWrapper::_internal_has_action() const {
  return msg_data_case() == kAction;
}
inline bool AckBTLPullMsg_BTLAckMsgWrapper::has_action() const {
  return _internal_has_action();
}
inline void AckBTLPullMsg_BTLAckMsgWrapper::set_has_action() {
  _oneof_case_[0] = kAction;
}
inline void AckBTLPullMsg_BTLAckMsgWrapper::clear_action() {
  if (_internal_has_action()) {
    if (GetArenaForAllocation() == nullptr) {
      delete msg_data_.action_;
    }
    clear_has_msg_data();
  }
}
inline ::KWMsg::AckBTLAction* AckBTLPullMsg_BTLAckMsgWrapper::release_action() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.action)
  if (_internal_has_action()) {
    clear_has_msg_data();
      ::KWMsg::AckBTLAction* temp = msg_data_.action_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    msg_data_.action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::AckBTLAction& AckBTLPullMsg_BTLAckMsgWrapper::_internal_action() const {
  return _internal_has_action()
      ? *msg_data_.action_
      : reinterpret_cast< ::KWMsg::AckBTLAction&>(::KWMsg::_AckBTLAction_default_instance_);
}
inline const ::KWMsg::AckBTLAction& AckBTLPullMsg_BTLAckMsgWrapper::action() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.action)
  return _internal_action();
}
inline ::KWMsg::AckBTLAction* AckBTLPullMsg_BTLAckMsgWrapper::unsafe_arena_release_action() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.action)
  if (_internal_has_action()) {
    clear_has_msg_data();
    ::KWMsg::AckBTLAction* temp = msg_data_.action_;
    msg_data_.action_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AckBTLPullMsg_BTLAckMsgWrapper::unsafe_arena_set_allocated_action(::KWMsg::AckBTLAction* action) {
  clear_msg_data();
  if (action) {
    set_has_action();
    msg_data_.action_ = action;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.action)
}
inline ::KWMsg::AckBTLAction* AckBTLPullMsg_BTLAckMsgWrapper::_internal_mutable_action() {
  if (!_internal_has_action()) {
    clear_msg_data();
    set_has_action();
    msg_data_.action_ = CreateMaybeMessage< ::KWMsg::AckBTLAction >(GetArenaForAllocation());
  }
  return msg_data_.action_;
}
inline ::KWMsg::AckBTLAction* AckBTLPullMsg_BTLAckMsgWrapper::mutable_action() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLPullMsg.BTLAckMsgWrapper.action)
  return _internal_mutable_action();
}

inline bool AckBTLPullMsg_BTLAckMsgWrapper::has_msg_data() const {
  return msg_data_case() != MSG_DATA_NOT_SET;
}
inline void AckBTLPullMsg_BTLAckMsgWrapper::clear_has_msg_data() {
  _oneof_case_[0] = MSG_DATA_NOT_SET;
}
inline AckBTLPullMsg_BTLAckMsgWrapper::MsgDataCase AckBTLPullMsg_BTLAckMsgWrapper::msg_data_case() const {
  return AckBTLPullMsg_BTLAckMsgWrapper::MsgDataCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// AckBTLPullMsg

// repeated .KWMsg.AckBTLPullMsg.BTLAckMsgWrapper battle_ack_msgs = 1;
inline int AckBTLPullMsg::_internal_battle_ack_msgs_size() const {
  return battle_ack_msgs_.size();
}
inline int AckBTLPullMsg::battle_ack_msgs_size() const {
  return _internal_battle_ack_msgs_size();
}
inline void AckBTLPullMsg::clear_battle_ack_msgs() {
  battle_ack_msgs_.Clear();
}
inline ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper* AckBTLPullMsg::mutable_battle_ack_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLPullMsg.battle_ack_msgs)
  return battle_ack_msgs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper >*
AckBTLPullMsg::mutable_battle_ack_msgs() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckBTLPullMsg.battle_ack_msgs)
  return &battle_ack_msgs_;
}
inline const ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper& AckBTLPullMsg::_internal_battle_ack_msgs(int index) const {
  return battle_ack_msgs_.Get(index);
}
inline const ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper& AckBTLPullMsg::battle_ack_msgs(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLPullMsg.battle_ack_msgs)
  return _internal_battle_ack_msgs(index);
}
inline ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper* AckBTLPullMsg::_internal_add_battle_ack_msgs() {
  return battle_ack_msgs_.Add();
}
inline ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper* AckBTLPullMsg::add_battle_ack_msgs() {
  // @@protoc_insertion_point(field_add:KWMsg.AckBTLPullMsg.battle_ack_msgs)
  return _internal_add_battle_ack_msgs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AckBTLPullMsg_BTLAckMsgWrapper >&
AckBTLPullMsg::battle_ack_msgs() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckBTLPullMsg.battle_ack_msgs)
  return battle_ack_msgs_;
}

// -------------------------------------------------------------------

// ReqBTLToggleAutoMode

// .KWMsg.Ident player_id = 1;
inline bool ReqBTLToggleAutoMode::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBTLToggleAutoMode::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBTLToggleAutoMode::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBTLToggleAutoMode::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBTLToggleAutoMode.player_id)
  return _internal_player_id();
}
inline void ReqBTLToggleAutoMode::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBTLToggleAutoMode.player_id)
}
inline ::KWMsg::Ident* ReqBTLToggleAutoMode::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBTLToggleAutoMode::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBTLToggleAutoMode.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBTLToggleAutoMode::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBTLToggleAutoMode::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBTLToggleAutoMode.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBTLToggleAutoMode::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBTLToggleAutoMode.player_id)
}

// int32 toggle = 2;
inline void ReqBTLToggleAutoMode::clear_toggle() {
  toggle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqBTLToggleAutoMode::_internal_toggle() const {
  return toggle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqBTLToggleAutoMode::toggle() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBTLToggleAutoMode.toggle)
  return _internal_toggle();
}
inline void ReqBTLToggleAutoMode::_internal_set_toggle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  toggle_ = value;
}
inline void ReqBTLToggleAutoMode::set_toggle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_toggle(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqBTLToggleAutoMode.toggle)
}

// -------------------------------------------------------------------

// AckBTLToggleAutoMode

// .KWMsg.EGameEventCode code = 1;
inline void AckBTLToggleAutoMode::clear_code() {
  code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBTLToggleAutoMode::_internal_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(code_);
}
inline ::KWMsg::EGameEventCode AckBTLToggleAutoMode::code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLToggleAutoMode.code)
  return _internal_code();
}
inline void AckBTLToggleAutoMode::_internal_set_code(::KWMsg::EGameEventCode value) {
  
  code_ = value;
}
inline void AckBTLToggleAutoMode::set_code(::KWMsg::EGameEventCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBTLToggleAutoMode.code)
}

// int32 toggle = 2;
inline void AckBTLToggleAutoMode::clear_toggle() {
  toggle_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLToggleAutoMode::_internal_toggle() const {
  return toggle_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLToggleAutoMode::toggle() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLToggleAutoMode.toggle)
  return _internal_toggle();
}
inline void AckBTLToggleAutoMode::_internal_set_toggle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  toggle_ = value;
}
inline void AckBTLToggleAutoMode::set_toggle(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_toggle(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBTLToggleAutoMode.toggle)
}

// repeated .KWMsg.BTLEntityAutoMode auto_modes = 3;
inline int AckBTLToggleAutoMode::_internal_auto_modes_size() const {
  return auto_modes_.size();
}
inline int AckBTLToggleAutoMode::auto_modes_size() const {
  return _internal_auto_modes_size();
}
inline void AckBTLToggleAutoMode::clear_auto_modes() {
  auto_modes_.Clear();
}
inline ::KWMsg::BTLEntityAutoMode* AckBTLToggleAutoMode::mutable_auto_modes(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLToggleAutoMode.auto_modes)
  return auto_modes_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntityAutoMode >*
AckBTLToggleAutoMode::mutable_auto_modes() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckBTLToggleAutoMode.auto_modes)
  return &auto_modes_;
}
inline const ::KWMsg::BTLEntityAutoMode& AckBTLToggleAutoMode::_internal_auto_modes(int index) const {
  return auto_modes_.Get(index);
}
inline const ::KWMsg::BTLEntityAutoMode& AckBTLToggleAutoMode::auto_modes(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLToggleAutoMode.auto_modes)
  return _internal_auto_modes(index);
}
inline ::KWMsg::BTLEntityAutoMode* AckBTLToggleAutoMode::_internal_add_auto_modes() {
  return auto_modes_.Add();
}
inline ::KWMsg::BTLEntityAutoMode* AckBTLToggleAutoMode::add_auto_modes() {
  // @@protoc_insertion_point(field_add:KWMsg.AckBTLToggleAutoMode.auto_modes)
  return _internal_add_auto_modes();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLEntityAutoMode >&
AckBTLToggleAutoMode::auto_modes() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckBTLToggleAutoMode.auto_modes)
  return auto_modes_;
}

// -------------------------------------------------------------------

// BTLEntityAutoMode

// .KWMsg.Ident entity_id = 1;
inline bool BTLEntityAutoMode::_internal_has_entity_id() const {
  return this != internal_default_instance() && entity_id_ != nullptr;
}
inline bool BTLEntityAutoMode::has_entity_id() const {
  return _internal_has_entity_id();
}
inline const ::KWMsg::Ident& BTLEntityAutoMode::_internal_entity_id() const {
  const ::KWMsg::Ident* p = entity_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BTLEntityAutoMode::entity_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEntityAutoMode.entity_id)
  return _internal_entity_id();
}
inline void BTLEntityAutoMode::unsafe_arena_set_allocated_entity_id(
    ::KWMsg::Ident* entity_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  entity_id_ = entity_id;
  if (entity_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLEntityAutoMode.entity_id)
}
inline ::KWMsg::Ident* BTLEntityAutoMode::release_entity_id() {
  
  ::KWMsg::Ident* temp = entity_id_;
  entity_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BTLEntityAutoMode::unsafe_arena_release_entity_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLEntityAutoMode.entity_id)
  
  ::KWMsg::Ident* temp = entity_id_;
  entity_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BTLEntityAutoMode::_internal_mutable_entity_id() {
  
  if (entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    entity_id_ = p;
  }
  return entity_id_;
}
inline ::KWMsg::Ident* BTLEntityAutoMode::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLEntityAutoMode.entity_id)
  return _internal_mutable_entity_id();
}
inline void BTLEntityAutoMode::set_allocated_entity_id(::KWMsg::Ident* entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id));
    if (message_arena != submessage_arena) {
      entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    
  } else {
    
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLEntityAutoMode.entity_id)
}

// .KWMsg.BTLAutoMode auto_mode = 2;
inline void BTLEntityAutoMode::clear_auto_mode() {
  auto_mode_ = 0;
}
inline ::KWMsg::BTLAutoMode BTLEntityAutoMode::_internal_auto_mode() const {
  return static_cast< ::KWMsg::BTLAutoMode >(auto_mode_);
}
inline ::KWMsg::BTLAutoMode BTLEntityAutoMode::auto_mode() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLEntityAutoMode.auto_mode)
  return _internal_auto_mode();
}
inline void BTLEntityAutoMode::_internal_set_auto_mode(::KWMsg::BTLAutoMode value) {
  
  auto_mode_ = value;
}
inline void BTLEntityAutoMode::set_auto_mode(::KWMsg::BTLAutoMode value) {
  _internal_set_auto_mode(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLEntityAutoMode.auto_mode)
}

// -------------------------------------------------------------------

// ReqBTLUpdateEntityAutoMode

// .KWMsg.Ident player_id = 1;
inline bool ReqBTLUpdateEntityAutoMode::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBTLUpdateEntityAutoMode::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBTLUpdateEntityAutoMode::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBTLUpdateEntityAutoMode::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBTLUpdateEntityAutoMode.player_id)
  return _internal_player_id();
}
inline void ReqBTLUpdateEntityAutoMode::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBTLUpdateEntityAutoMode.player_id)
}
inline ::KWMsg::Ident* ReqBTLUpdateEntityAutoMode::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBTLUpdateEntityAutoMode::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBTLUpdateEntityAutoMode.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBTLUpdateEntityAutoMode::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBTLUpdateEntityAutoMode::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBTLUpdateEntityAutoMode.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBTLUpdateEntityAutoMode::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBTLUpdateEntityAutoMode.player_id)
}

// .KWMsg.BTLEntityAutoMode mode = 2;
inline bool ReqBTLUpdateEntityAutoMode::_internal_has_mode() const {
  return this != internal_default_instance() && mode_ != nullptr;
}
inline bool ReqBTLUpdateEntityAutoMode::has_mode() const {
  return _internal_has_mode();
}
inline void ReqBTLUpdateEntityAutoMode::clear_mode() {
  if (GetArenaForAllocation() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
}
inline const ::KWMsg::BTLEntityAutoMode& ReqBTLUpdateEntityAutoMode::_internal_mode() const {
  const ::KWMsg::BTLEntityAutoMode* p = mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BTLEntityAutoMode&>(
      ::KWMsg::_BTLEntityAutoMode_default_instance_);
}
inline const ::KWMsg::BTLEntityAutoMode& ReqBTLUpdateEntityAutoMode::mode() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBTLUpdateEntityAutoMode.mode)
  return _internal_mode();
}
inline void ReqBTLUpdateEntityAutoMode::unsafe_arena_set_allocated_mode(
    ::KWMsg::BTLEntityAutoMode* mode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_);
  }
  mode_ = mode;
  if (mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBTLUpdateEntityAutoMode.mode)
}
inline ::KWMsg::BTLEntityAutoMode* ReqBTLUpdateEntityAutoMode::release_mode() {
  
  ::KWMsg::BTLEntityAutoMode* temp = mode_;
  mode_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BTLEntityAutoMode* ReqBTLUpdateEntityAutoMode::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBTLUpdateEntityAutoMode.mode)
  
  ::KWMsg::BTLEntityAutoMode* temp = mode_;
  mode_ = nullptr;
  return temp;
}
inline ::KWMsg::BTLEntityAutoMode* ReqBTLUpdateEntityAutoMode::_internal_mutable_mode() {
  
  if (mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BTLEntityAutoMode>(GetArenaForAllocation());
    mode_ = p;
  }
  return mode_;
}
inline ::KWMsg::BTLEntityAutoMode* ReqBTLUpdateEntityAutoMode::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBTLUpdateEntityAutoMode.mode)
  return _internal_mutable_mode();
}
inline void ReqBTLUpdateEntityAutoMode::set_allocated_mode(::KWMsg::BTLEntityAutoMode* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mode_;
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLEntityAutoMode>::GetOwningArena(mode);
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    
  } else {
    
  }
  mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBTLUpdateEntityAutoMode.mode)
}

// -------------------------------------------------------------------

// AckBTLUpdateEntityAutoMode

// .KWMsg.EGameEventCode code = 1;
inline void AckBTLUpdateEntityAutoMode::clear_code() {
  code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBTLUpdateEntityAutoMode::_internal_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(code_);
}
inline ::KWMsg::EGameEventCode AckBTLUpdateEntityAutoMode::code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLUpdateEntityAutoMode.code)
  return _internal_code();
}
inline void AckBTLUpdateEntityAutoMode::_internal_set_code(::KWMsg::EGameEventCode value) {
  
  code_ = value;
}
inline void AckBTLUpdateEntityAutoMode::set_code(::KWMsg::EGameEventCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBTLUpdateEntityAutoMode.code)
}

// .KWMsg.BTLEntityAutoMode mode = 2;
inline bool AckBTLUpdateEntityAutoMode::_internal_has_mode() const {
  return this != internal_default_instance() && mode_ != nullptr;
}
inline bool AckBTLUpdateEntityAutoMode::has_mode() const {
  return _internal_has_mode();
}
inline void AckBTLUpdateEntityAutoMode::clear_mode() {
  if (GetArenaForAllocation() == nullptr && mode_ != nullptr) {
    delete mode_;
  }
  mode_ = nullptr;
}
inline const ::KWMsg::BTLEntityAutoMode& AckBTLUpdateEntityAutoMode::_internal_mode() const {
  const ::KWMsg::BTLEntityAutoMode* p = mode_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BTLEntityAutoMode&>(
      ::KWMsg::_BTLEntityAutoMode_default_instance_);
}
inline const ::KWMsg::BTLEntityAutoMode& AckBTLUpdateEntityAutoMode::mode() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLUpdateEntityAutoMode.mode)
  return _internal_mode();
}
inline void AckBTLUpdateEntityAutoMode::unsafe_arena_set_allocated_mode(
    ::KWMsg::BTLEntityAutoMode* mode) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mode_);
  }
  mode_ = mode;
  if (mode) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBTLUpdateEntityAutoMode.mode)
}
inline ::KWMsg::BTLEntityAutoMode* AckBTLUpdateEntityAutoMode::release_mode() {
  
  ::KWMsg::BTLEntityAutoMode* temp = mode_;
  mode_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BTLEntityAutoMode* AckBTLUpdateEntityAutoMode::unsafe_arena_release_mode() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBTLUpdateEntityAutoMode.mode)
  
  ::KWMsg::BTLEntityAutoMode* temp = mode_;
  mode_ = nullptr;
  return temp;
}
inline ::KWMsg::BTLEntityAutoMode* AckBTLUpdateEntityAutoMode::_internal_mutable_mode() {
  
  if (mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BTLEntityAutoMode>(GetArenaForAllocation());
    mode_ = p;
  }
  return mode_;
}
inline ::KWMsg::BTLEntityAutoMode* AckBTLUpdateEntityAutoMode::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLUpdateEntityAutoMode.mode)
  return _internal_mutable_mode();
}
inline void AckBTLUpdateEntityAutoMode::set_allocated_mode(::KWMsg::BTLEntityAutoMode* mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mode_;
  }
  if (mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLEntityAutoMode>::GetOwningArena(mode);
    if (message_arena != submessage_arena) {
      mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mode, submessage_arena);
    }
    
  } else {
    
  }
  mode_ = mode;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBTLUpdateEntityAutoMode.mode)
}

// -------------------------------------------------------------------

// ReqBTLSetPrioTarget

// .KWMsg.Ident player_id = 1;
inline bool ReqBTLSetPrioTarget::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBTLSetPrioTarget::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBTLSetPrioTarget::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBTLSetPrioTarget::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBTLSetPrioTarget.player_id)
  return _internal_player_id();
}
inline void ReqBTLSetPrioTarget::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBTLSetPrioTarget.player_id)
}
inline ::KWMsg::Ident* ReqBTLSetPrioTarget::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBTLSetPrioTarget::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBTLSetPrioTarget.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBTLSetPrioTarget::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBTLSetPrioTarget::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBTLSetPrioTarget.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBTLSetPrioTarget::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBTLSetPrioTarget.player_id)
}

// .KWMsg.Ident entity_id = 2;
inline bool ReqBTLSetPrioTarget::_internal_has_entity_id() const {
  return this != internal_default_instance() && entity_id_ != nullptr;
}
inline bool ReqBTLSetPrioTarget::has_entity_id() const {
  return _internal_has_entity_id();
}
inline const ::KWMsg::Ident& ReqBTLSetPrioTarget::_internal_entity_id() const {
  const ::KWMsg::Ident* p = entity_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBTLSetPrioTarget::entity_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBTLSetPrioTarget.entity_id)
  return _internal_entity_id();
}
inline void ReqBTLSetPrioTarget::unsafe_arena_set_allocated_entity_id(
    ::KWMsg::Ident* entity_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  entity_id_ = entity_id;
  if (entity_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBTLSetPrioTarget.entity_id)
}
inline ::KWMsg::Ident* ReqBTLSetPrioTarget::release_entity_id() {
  
  ::KWMsg::Ident* temp = entity_id_;
  entity_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBTLSetPrioTarget::unsafe_arena_release_entity_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBTLSetPrioTarget.entity_id)
  
  ::KWMsg::Ident* temp = entity_id_;
  entity_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBTLSetPrioTarget::_internal_mutable_entity_id() {
  
  if (entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    entity_id_ = p;
  }
  return entity_id_;
}
inline ::KWMsg::Ident* ReqBTLSetPrioTarget::mutable_entity_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBTLSetPrioTarget.entity_id)
  return _internal_mutable_entity_id();
}
inline void ReqBTLSetPrioTarget::set_allocated_entity_id(::KWMsg::Ident* entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id_);
  }
  if (entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(entity_id));
    if (message_arena != submessage_arena) {
      entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entity_id, submessage_arena);
    }
    
  } else {
    
  }
  entity_id_ = entity_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBTLSetPrioTarget.entity_id)
}

// -------------------------------------------------------------------

// AckBTLSetPrioTarget

// .KWMsg.EGameEventCode code = 1;
inline void AckBTLSetPrioTarget::clear_code() {
  code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBTLSetPrioTarget::_internal_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(code_);
}
inline ::KWMsg::EGameEventCode AckBTLSetPrioTarget::code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLSetPrioTarget.code)
  return _internal_code();
}
inline void AckBTLSetPrioTarget::_internal_set_code(::KWMsg::EGameEventCode value) {
  
  code_ = value;
}
inline void AckBTLSetPrioTarget::set_code(::KWMsg::EGameEventCode value) {
  _internal_set_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBTLSetPrioTarget.code)
}

// .KWMsg.Ident prio_opposite_target = 2;
inline bool AckBTLSetPrioTarget::_internal_has_prio_opposite_target() const {
  return this != internal_default_instance() && prio_opposite_target_ != nullptr;
}
inline bool AckBTLSetPrioTarget::has_prio_opposite_target() const {
  return _internal_has_prio_opposite_target();
}
inline const ::KWMsg::Ident& AckBTLSetPrioTarget::_internal_prio_opposite_target() const {
  const ::KWMsg::Ident* p = prio_opposite_target_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckBTLSetPrioTarget::prio_opposite_target() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLSetPrioTarget.prio_opposite_target)
  return _internal_prio_opposite_target();
}
inline void AckBTLSetPrioTarget::unsafe_arena_set_allocated_prio_opposite_target(
    ::KWMsg::Ident* prio_opposite_target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prio_opposite_target_);
  }
  prio_opposite_target_ = prio_opposite_target;
  if (prio_opposite_target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBTLSetPrioTarget.prio_opposite_target)
}
inline ::KWMsg::Ident* AckBTLSetPrioTarget::release_prio_opposite_target() {
  
  ::KWMsg::Ident* temp = prio_opposite_target_;
  prio_opposite_target_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckBTLSetPrioTarget::unsafe_arena_release_prio_opposite_target() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBTLSetPrioTarget.prio_opposite_target)
  
  ::KWMsg::Ident* temp = prio_opposite_target_;
  prio_opposite_target_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckBTLSetPrioTarget::_internal_mutable_prio_opposite_target() {
  
  if (prio_opposite_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    prio_opposite_target_ = p;
  }
  return prio_opposite_target_;
}
inline ::KWMsg::Ident* AckBTLSetPrioTarget::mutable_prio_opposite_target() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLSetPrioTarget.prio_opposite_target)
  return _internal_mutable_prio_opposite_target();
}
inline void AckBTLSetPrioTarget::set_allocated_prio_opposite_target(::KWMsg::Ident* prio_opposite_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(prio_opposite_target_);
  }
  if (prio_opposite_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prio_opposite_target));
    if (message_arena != submessage_arena) {
      prio_opposite_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prio_opposite_target, submessage_arena);
    }
    
  } else {
    
  }
  prio_opposite_target_ = prio_opposite_target;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBTLSetPrioTarget.prio_opposite_target)
}

// .KWMsg.Ident prio_teammate_target = 3;
inline bool AckBTLSetPrioTarget::_internal_has_prio_teammate_target() const {
  return this != internal_default_instance() && prio_teammate_target_ != nullptr;
}
inline bool AckBTLSetPrioTarget::has_prio_teammate_target() const {
  return _internal_has_prio_teammate_target();
}
inline const ::KWMsg::Ident& AckBTLSetPrioTarget::_internal_prio_teammate_target() const {
  const ::KWMsg::Ident* p = prio_teammate_target_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckBTLSetPrioTarget::prio_teammate_target() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLSetPrioTarget.prio_teammate_target)
  return _internal_prio_teammate_target();
}
inline void AckBTLSetPrioTarget::unsafe_arena_set_allocated_prio_teammate_target(
    ::KWMsg::Ident* prio_teammate_target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prio_teammate_target_);
  }
  prio_teammate_target_ = prio_teammate_target;
  if (prio_teammate_target) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBTLSetPrioTarget.prio_teammate_target)
}
inline ::KWMsg::Ident* AckBTLSetPrioTarget::release_prio_teammate_target() {
  
  ::KWMsg::Ident* temp = prio_teammate_target_;
  prio_teammate_target_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckBTLSetPrioTarget::unsafe_arena_release_prio_teammate_target() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBTLSetPrioTarget.prio_teammate_target)
  
  ::KWMsg::Ident* temp = prio_teammate_target_;
  prio_teammate_target_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckBTLSetPrioTarget::_internal_mutable_prio_teammate_target() {
  
  if (prio_teammate_target_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    prio_teammate_target_ = p;
  }
  return prio_teammate_target_;
}
inline ::KWMsg::Ident* AckBTLSetPrioTarget::mutable_prio_teammate_target() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLSetPrioTarget.prio_teammate_target)
  return _internal_mutable_prio_teammate_target();
}
inline void AckBTLSetPrioTarget::set_allocated_prio_teammate_target(::KWMsg::Ident* prio_teammate_target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(prio_teammate_target_);
  }
  if (prio_teammate_target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prio_teammate_target));
    if (message_arena != submessage_arena) {
      prio_teammate_target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prio_teammate_target, submessage_arena);
    }
    
  } else {
    
  }
  prio_teammate_target_ = prio_teammate_target;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBTLSetPrioTarget.prio_teammate_target)
}

// -------------------------------------------------------------------

// BTLRewardInfo

// bytes reward_id = 1;
inline void BTLRewardInfo::clear_reward_id() {
  reward_id_.ClearToEmpty();
}
inline const std::string& BTLRewardInfo::reward_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLRewardInfo.reward_id)
  return _internal_reward_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BTLRewardInfo::set_reward_id(ArgT0&& arg0, ArgT... args) {
 
 reward_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BTLRewardInfo.reward_id)
}
inline std::string* BTLRewardInfo::mutable_reward_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLRewardInfo.reward_id)
  return _internal_mutable_reward_id();
}
inline const std::string& BTLRewardInfo::_internal_reward_id() const {
  return reward_id_.Get();
}
inline void BTLRewardInfo::_internal_set_reward_id(const std::string& value) {
  
  reward_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BTLRewardInfo::_internal_mutable_reward_id() {
  
  return reward_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BTLRewardInfo::release_reward_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLRewardInfo.reward_id)
  return reward_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BTLRewardInfo::set_allocated_reward_id(std::string* reward_id) {
  if (reward_id != nullptr) {
    
  } else {
    
  }
  reward_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLRewardInfo.reward_id)
}

// int32 reward_count = 2;
inline void BTLRewardInfo::clear_reward_count() {
  reward_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLRewardInfo::_internal_reward_count() const {
  return reward_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BTLRewardInfo::reward_count() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLRewardInfo.reward_count)
  return _internal_reward_count();
}
inline void BTLRewardInfo::_internal_set_reward_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_count_ = value;
}
inline void BTLRewardInfo::set_reward_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.BTLRewardInfo.reward_count)
}

// -------------------------------------------------------------------

// AckBTLEndInfo

// .KWMsg.Ident player_id = 1;
inline bool AckBTLEndInfo::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckBTLEndInfo::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckBTLEndInfo::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckBTLEndInfo::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLEndInfo.player_id)
  return _internal_player_id();
}
inline void AckBTLEndInfo::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBTLEndInfo.player_id)
}
inline ::KWMsg::Ident* AckBTLEndInfo::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckBTLEndInfo::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBTLEndInfo.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckBTLEndInfo::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckBTLEndInfo::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLEndInfo.player_id)
  return _internal_mutable_player_id();
}
inline void AckBTLEndInfo::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBTLEndInfo.player_id)
}

// int32 is_victory = 2;
inline void AckBTLEndInfo::clear_is_victory() {
  is_victory_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLEndInfo::_internal_is_victory() const {
  return is_victory_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLEndInfo::is_victory() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLEndInfo.is_victory)
  return _internal_is_victory();
}
inline void AckBTLEndInfo::_internal_set_is_victory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_victory_ = value;
}
inline void AckBTLEndInfo::set_is_victory(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_victory(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBTLEndInfo.is_victory)
}

// .KWMsg.Ident victory_entity_id = 3;
inline bool AckBTLEndInfo::_internal_has_victory_entity_id() const {
  return this != internal_default_instance() && victory_entity_id_ != nullptr;
}
inline bool AckBTLEndInfo::has_victory_entity_id() const {
  return _internal_has_victory_entity_id();
}
inline const ::KWMsg::Ident& AckBTLEndInfo::_internal_victory_entity_id() const {
  const ::KWMsg::Ident* p = victory_entity_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckBTLEndInfo::victory_entity_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLEndInfo.victory_entity_id)
  return _internal_victory_entity_id();
}
inline void AckBTLEndInfo::unsafe_arena_set_allocated_victory_entity_id(
    ::KWMsg::Ident* victory_entity_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(victory_entity_id_);
  }
  victory_entity_id_ = victory_entity_id;
  if (victory_entity_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBTLEndInfo.victory_entity_id)
}
inline ::KWMsg::Ident* AckBTLEndInfo::release_victory_entity_id() {
  
  ::KWMsg::Ident* temp = victory_entity_id_;
  victory_entity_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckBTLEndInfo::unsafe_arena_release_victory_entity_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBTLEndInfo.victory_entity_id)
  
  ::KWMsg::Ident* temp = victory_entity_id_;
  victory_entity_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckBTLEndInfo::_internal_mutable_victory_entity_id() {
  
  if (victory_entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    victory_entity_id_ = p;
  }
  return victory_entity_id_;
}
inline ::KWMsg::Ident* AckBTLEndInfo::mutable_victory_entity_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLEndInfo.victory_entity_id)
  return _internal_mutable_victory_entity_id();
}
inline void AckBTLEndInfo::set_allocated_victory_entity_id(::KWMsg::Ident* victory_entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(victory_entity_id_);
  }
  if (victory_entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(victory_entity_id));
    if (message_arena != submessage_arena) {
      victory_entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, victory_entity_id, submessage_arena);
    }
    
  } else {
    
  }
  victory_entity_id_ = victory_entity_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBTLEndInfo.victory_entity_id)
}

// int32 add_player_exp = 4;
inline void AckBTLEndInfo::clear_add_player_exp() {
  add_player_exp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLEndInfo::_internal_add_player_exp() const {
  return add_player_exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLEndInfo::add_player_exp() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLEndInfo.add_player_exp)
  return _internal_add_player_exp();
}
inline void AckBTLEndInfo::_internal_set_add_player_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  add_player_exp_ = value;
}
inline void AckBTLEndInfo::set_add_player_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_add_player_exp(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBTLEndInfo.add_player_exp)
}

// int32 add_witch_exp = 5;
inline void AckBTLEndInfo::clear_add_witch_exp() {
  add_witch_exp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLEndInfo::_internal_add_witch_exp() const {
  return add_witch_exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLEndInfo::add_witch_exp() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLEndInfo.add_witch_exp)
  return _internal_add_witch_exp();
}
inline void AckBTLEndInfo::_internal_set_add_witch_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  add_witch_exp_ = value;
}
inline void AckBTLEndInfo::set_add_witch_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_add_witch_exp(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBTLEndInfo.add_witch_exp)
}

// int32 star_state = 6;
inline void AckBTLEndInfo::clear_star_state() {
  star_state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLEndInfo::_internal_star_state() const {
  return star_state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLEndInfo::star_state() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLEndInfo.star_state)
  return _internal_star_state();
}
inline void AckBTLEndInfo::_internal_set_star_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  star_state_ = value;
}
inline void AckBTLEndInfo::set_star_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_star_state(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBTLEndInfo.star_state)
}

// repeated .KWMsg.BTLRewardInfo reward_list = 7;
inline int AckBTLEndInfo::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int AckBTLEndInfo::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void AckBTLEndInfo::clear_reward_list() {
  reward_list_.Clear();
}
inline ::KWMsg::BTLRewardInfo* AckBTLEndInfo::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLEndInfo.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLRewardInfo >*
AckBTLEndInfo::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckBTLEndInfo.reward_list)
  return &reward_list_;
}
inline const ::KWMsg::BTLRewardInfo& AckBTLEndInfo::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::KWMsg::BTLRewardInfo& AckBTLEndInfo::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLEndInfo.reward_list)
  return _internal_reward_list(index);
}
inline ::KWMsg::BTLRewardInfo* AckBTLEndInfo::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::KWMsg::BTLRewardInfo* AckBTLEndInfo::add_reward_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckBTLEndInfo.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BTLRewardInfo >&
AckBTLEndInfo::reward_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckBTLEndInfo.reward_list)
  return reward_list_;
}

// -------------------------------------------------------------------

// AckBTLResult

// int32 unique_id = 1;
inline void AckBTLResult::clear_unique_id() {
  unique_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLResult::_internal_unique_id() const {
  return unique_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBTLResult::unique_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLResult.unique_id)
  return _internal_unique_id();
}
inline void AckBTLResult::_internal_set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  unique_id_ = value;
}
inline void AckBTLResult::set_unique_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_unique_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBTLResult.unique_id)
}

// .KWMsg.BTLResult result = 2;
inline bool AckBTLResult::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool AckBTLResult::has_result() const {
  return _internal_has_result();
}
inline void AckBTLResult::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::KWMsg::BTLResult& AckBTLResult::_internal_result() const {
  const ::KWMsg::BTLResult* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BTLResult&>(
      ::KWMsg::_BTLResult_default_instance_);
}
inline const ::KWMsg::BTLResult& AckBTLResult::result() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBTLResult.result)
  return _internal_result();
}
inline void AckBTLResult::unsafe_arena_set_allocated_result(
    ::KWMsg::BTLResult* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBTLResult.result)
}
inline ::KWMsg::BTLResult* AckBTLResult::release_result() {
  
  ::KWMsg::BTLResult* temp = result_;
  result_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BTLResult* AckBTLResult::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBTLResult.result)
  
  ::KWMsg::BTLResult* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::KWMsg::BTLResult* AckBTLResult::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BTLResult>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::KWMsg::BTLResult* AckBTLResult::mutable_result() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBTLResult.result)
  return _internal_mutable_result();
}
inline void AckBTLResult::set_allocated_result(::KWMsg::BTLResult* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BTLResult>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBTLResult.result)
}

// -------------------------------------------------------------------

// BTLResult

// .KWMsg.Ident victory_entity_id = 1;
inline bool BTLResult::_internal_has_victory_entity_id() const {
  return this != internal_default_instance() && victory_entity_id_ != nullptr;
}
inline bool BTLResult::has_victory_entity_id() const {
  return _internal_has_victory_entity_id();
}
inline const ::KWMsg::Ident& BTLResult::_internal_victory_entity_id() const {
  const ::KWMsg::Ident* p = victory_entity_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BTLResult::victory_entity_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLResult.victory_entity_id)
  return _internal_victory_entity_id();
}
inline void BTLResult::unsafe_arena_set_allocated_victory_entity_id(
    ::KWMsg::Ident* victory_entity_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(victory_entity_id_);
  }
  victory_entity_id_ = victory_entity_id;
  if (victory_entity_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BTLResult.victory_entity_id)
}
inline ::KWMsg::Ident* BTLResult::release_victory_entity_id() {
  
  ::KWMsg::Ident* temp = victory_entity_id_;
  victory_entity_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BTLResult::unsafe_arena_release_victory_entity_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BTLResult.victory_entity_id)
  
  ::KWMsg::Ident* temp = victory_entity_id_;
  victory_entity_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BTLResult::_internal_mutable_victory_entity_id() {
  
  if (victory_entity_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    victory_entity_id_ = p;
  }
  return victory_entity_id_;
}
inline ::KWMsg::Ident* BTLResult::mutable_victory_entity_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLResult.victory_entity_id)
  return _internal_mutable_victory_entity_id();
}
inline void BTLResult::set_allocated_victory_entity_id(::KWMsg::Ident* victory_entity_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(victory_entity_id_);
  }
  if (victory_entity_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(victory_entity_id));
    if (message_arena != submessage_arena) {
      victory_entity_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, victory_entity_id, submessage_arena);
    }
    
  } else {
    
  }
  victory_entity_id_ = victory_entity_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BTLResult.victory_entity_id)
}

// repeated .KWMsg.Ident won_players = 2;
inline int BTLResult::_internal_won_players_size() const {
  return won_players_.size();
}
inline int BTLResult::won_players_size() const {
  return _internal_won_players_size();
}
inline ::KWMsg::Ident* BTLResult::mutable_won_players(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLResult.won_players)
  return won_players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
BTLResult::mutable_won_players() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLResult.won_players)
  return &won_players_;
}
inline const ::KWMsg::Ident& BTLResult::_internal_won_players(int index) const {
  return won_players_.Get(index);
}
inline const ::KWMsg::Ident& BTLResult::won_players(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLResult.won_players)
  return _internal_won_players(index);
}
inline ::KWMsg::Ident* BTLResult::_internal_add_won_players() {
  return won_players_.Add();
}
inline ::KWMsg::Ident* BTLResult::add_won_players() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLResult.won_players)
  return _internal_add_won_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
BTLResult::won_players() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLResult.won_players)
  return won_players_;
}

// repeated .KWMsg.Ident lost_players = 3;
inline int BTLResult::_internal_lost_players_size() const {
  return lost_players_.size();
}
inline int BTLResult::lost_players_size() const {
  return _internal_lost_players_size();
}
inline ::KWMsg::Ident* BTLResult::mutable_lost_players(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BTLResult.lost_players)
  return lost_players_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
BTLResult::mutable_lost_players() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BTLResult.lost_players)
  return &lost_players_;
}
inline const ::KWMsg::Ident& BTLResult::_internal_lost_players(int index) const {
  return lost_players_.Get(index);
}
inline const ::KWMsg::Ident& BTLResult::lost_players(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BTLResult.lost_players)
  return _internal_lost_players(index);
}
inline ::KWMsg::Ident* BTLResult::_internal_add_lost_players() {
  return lost_players_.Add();
}
inline ::KWMsg::Ident* BTLResult::add_lost_players() {
  // @@protoc_insertion_point(field_add:KWMsg.BTLResult.lost_players)
  return _internal_add_lost_players();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
BTLResult::lost_players() const {
  // @@protoc_insertion_point(field_list:KWMsg.BTLResult.lost_players)
  return lost_players_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KWMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KWMsg::BTLStage> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::BTLStage>() {
  return ::KWMsg::BTLStage_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::BTLQueueState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::BTLQueueState>() {
  return ::KWMsg::BTLQueueState_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::BTLSkillState> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::BTLSkillState>() {
  return ::KWMsg::BTLSkillState_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::BTLEffectFlag> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::BTLEffectFlag>() {
  return ::KWMsg::BTLEffectFlag_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::BTLAutoMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::BTLAutoMode>() {
  return ::KWMsg::BTLAutoMode_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kwmsgbattle_2eproto
