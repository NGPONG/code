// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kwmsgshare.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kwmsgshare_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kwmsgshare_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "kwmsgdefine.pb.h"
#include "kwmsgbase.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kwmsgshare_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kwmsgshare_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[27]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kwmsgshare_2eproto;
namespace KWMsg {
class AckCollectWitch;
struct AckCollectWitchDefaultTypeInternal;
extern AckCollectWitchDefaultTypeInternal _AckCollectWitch_default_instance_;
class AckCreateKcpObject;
struct AckCreateKcpObjectDefaultTypeInternal;
extern AckCreateKcpObjectDefaultTypeInternal _AckCreateKcpObject_default_instance_;
class AckEstablishKcpConnection;
struct AckEstablishKcpConnectionDefaultTypeInternal;
extern AckEstablishKcpConnectionDefaultTypeInternal _AckEstablishKcpConnection_default_instance_;
class AckInitMainRoleName;
struct AckInitMainRoleNameDefaultTypeInternal;
extern AckInitMainRoleNameDefaultTypeInternal _AckInitMainRoleName_default_instance_;
class AckPlayerDataFinished;
struct AckPlayerDataFinishedDefaultTypeInternal;
extern AckPlayerDataFinishedDefaultTypeInternal _AckPlayerDataFinished_default_instance_;
class AckPlayerEntryList;
struct AckPlayerEntryListDefaultTypeInternal;
extern AckPlayerEntryListDefaultTypeInternal _AckPlayerEntryList_default_instance_;
class AckPlayerLeaveList;
struct AckPlayerLeaveListDefaultTypeInternal;
extern AckPlayerLeaveListDefaultTypeInternal _AckPlayerLeaveList_default_instance_;
class AckPushClientIntoQueueUp;
struct AckPushClientIntoQueueUpDefaultTypeInternal;
extern AckPushClientIntoQueueUpDefaultTypeInternal _AckPushClientIntoQueueUp_default_instance_;
class AckQueueUpGetCurWorldSuitProxy;
struct AckQueueUpGetCurWorldSuitProxyDefaultTypeInternal;
extern AckQueueUpGetCurWorldSuitProxyDefaultTypeInternal _AckQueueUpGetCurWorldSuitProxy_default_instance_;
class AckSwapScene;
struct AckSwapSceneDefaultTypeInternal;
extern AckSwapSceneDefaultTypeInternal _AckSwapScene_default_instance_;
class AckTestBattle;
struct AckTestBattleDefaultTypeInternal;
extern AckTestBattleDefaultTypeInternal _AckTestBattle_default_instance_;
class PlayerEntryInfo;
struct PlayerEntryInfoDefaultTypeInternal;
extern PlayerEntryInfoDefaultTypeInternal _PlayerEntryInfo_default_instance_;
class PosSyncUnit;
struct PosSyncUnitDefaultTypeInternal;
extern PosSyncUnitDefaultTypeInternal _PosSyncUnit_default_instance_;
class ReqAckHeartBeat;
struct ReqAckHeartBeatDefaultTypeInternal;
extern ReqAckHeartBeatDefaultTypeInternal _ReqAckHeartBeat_default_instance_;
class ReqAckLagTest;
struct ReqAckLagTestDefaultTypeInternal;
extern ReqAckLagTestDefaultTypeInternal _ReqAckLagTest_default_instance_;
class ReqAckPlayerChat;
struct ReqAckPlayerChatDefaultTypeInternal;
extern ReqAckPlayerChatDefaultTypeInternal _ReqAckPlayerChat_default_instance_;
class ReqAckPlayerPosSync;
struct ReqAckPlayerPosSyncDefaultTypeInternal;
extern ReqAckPlayerPosSyncDefaultTypeInternal _ReqAckPlayerPosSync_default_instance_;
class ReqCollectWitch;
struct ReqCollectWitchDefaultTypeInternal;
extern ReqCollectWitchDefaultTypeInternal _ReqCollectWitch_default_instance_;
class ReqCreateKcpObject;
struct ReqCreateKcpObjectDefaultTypeInternal;
extern ReqCreateKcpObjectDefaultTypeInternal _ReqCreateKcpObject_default_instance_;
class ReqEstablishKcpConnection;
struct ReqEstablishKcpConnectionDefaultTypeInternal;
extern ReqEstablishKcpConnectionDefaultTypeInternal _ReqEstablishKcpConnection_default_instance_;
class ReqInitMainRoleName;
struct ReqInitMainRoleNameDefaultTypeInternal;
extern ReqInitMainRoleNameDefaultTypeInternal _ReqInitMainRoleName_default_instance_;
class ReqLeaveGameServer;
struct ReqLeaveGameServerDefaultTypeInternal;
extern ReqLeaveGameServerDefaultTypeInternal _ReqLeaveGameServer_default_instance_;
class ReqQueueUpGetCurWorldSuitProxy;
struct ReqQueueUpGetCurWorldSuitProxyDefaultTypeInternal;
extern ReqQueueUpGetCurWorldSuitProxyDefaultTypeInternal _ReqQueueUpGetCurWorldSuitProxy_default_instance_;
class ReqSwapScene;
struct ReqSwapSceneDefaultTypeInternal;
extern ReqSwapSceneDefaultTypeInternal _ReqSwapScene_default_instance_;
class ReqTestBattle;
struct ReqTestBattleDefaultTypeInternal;
extern ReqTestBattleDefaultTypeInternal _ReqTestBattle_default_instance_;
class ReqTryPushClientIntoQueueUp;
struct ReqTryPushClientIntoQueueUpDefaultTypeInternal;
extern ReqTryPushClientIntoQueueUpDefaultTypeInternal _ReqTryPushClientIntoQueueUp_default_instance_;
class ReqUpdatePlayerLastHeartbeatTS;
struct ReqUpdatePlayerLastHeartbeatTSDefaultTypeInternal;
extern ReqUpdatePlayerLastHeartbeatTSDefaultTypeInternal _ReqUpdatePlayerLastHeartbeatTS_default_instance_;
}  // namespace KWMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::KWMsg::AckCollectWitch* Arena::CreateMaybeMessage<::KWMsg::AckCollectWitch>(Arena*);
template<> ::KWMsg::AckCreateKcpObject* Arena::CreateMaybeMessage<::KWMsg::AckCreateKcpObject>(Arena*);
template<> ::KWMsg::AckEstablishKcpConnection* Arena::CreateMaybeMessage<::KWMsg::AckEstablishKcpConnection>(Arena*);
template<> ::KWMsg::AckInitMainRoleName* Arena::CreateMaybeMessage<::KWMsg::AckInitMainRoleName>(Arena*);
template<> ::KWMsg::AckPlayerDataFinished* Arena::CreateMaybeMessage<::KWMsg::AckPlayerDataFinished>(Arena*);
template<> ::KWMsg::AckPlayerEntryList* Arena::CreateMaybeMessage<::KWMsg::AckPlayerEntryList>(Arena*);
template<> ::KWMsg::AckPlayerLeaveList* Arena::CreateMaybeMessage<::KWMsg::AckPlayerLeaveList>(Arena*);
template<> ::KWMsg::AckPushClientIntoQueueUp* Arena::CreateMaybeMessage<::KWMsg::AckPushClientIntoQueueUp>(Arena*);
template<> ::KWMsg::AckQueueUpGetCurWorldSuitProxy* Arena::CreateMaybeMessage<::KWMsg::AckQueueUpGetCurWorldSuitProxy>(Arena*);
template<> ::KWMsg::AckSwapScene* Arena::CreateMaybeMessage<::KWMsg::AckSwapScene>(Arena*);
template<> ::KWMsg::AckTestBattle* Arena::CreateMaybeMessage<::KWMsg::AckTestBattle>(Arena*);
template<> ::KWMsg::PlayerEntryInfo* Arena::CreateMaybeMessage<::KWMsg::PlayerEntryInfo>(Arena*);
template<> ::KWMsg::PosSyncUnit* Arena::CreateMaybeMessage<::KWMsg::PosSyncUnit>(Arena*);
template<> ::KWMsg::ReqAckHeartBeat* Arena::CreateMaybeMessage<::KWMsg::ReqAckHeartBeat>(Arena*);
template<> ::KWMsg::ReqAckLagTest* Arena::CreateMaybeMessage<::KWMsg::ReqAckLagTest>(Arena*);
template<> ::KWMsg::ReqAckPlayerChat* Arena::CreateMaybeMessage<::KWMsg::ReqAckPlayerChat>(Arena*);
template<> ::KWMsg::ReqAckPlayerPosSync* Arena::CreateMaybeMessage<::KWMsg::ReqAckPlayerPosSync>(Arena*);
template<> ::KWMsg::ReqCollectWitch* Arena::CreateMaybeMessage<::KWMsg::ReqCollectWitch>(Arena*);
template<> ::KWMsg::ReqCreateKcpObject* Arena::CreateMaybeMessage<::KWMsg::ReqCreateKcpObject>(Arena*);
template<> ::KWMsg::ReqEstablishKcpConnection* Arena::CreateMaybeMessage<::KWMsg::ReqEstablishKcpConnection>(Arena*);
template<> ::KWMsg::ReqInitMainRoleName* Arena::CreateMaybeMessage<::KWMsg::ReqInitMainRoleName>(Arena*);
template<> ::KWMsg::ReqLeaveGameServer* Arena::CreateMaybeMessage<::KWMsg::ReqLeaveGameServer>(Arena*);
template<> ::KWMsg::ReqQueueUpGetCurWorldSuitProxy* Arena::CreateMaybeMessage<::KWMsg::ReqQueueUpGetCurWorldSuitProxy>(Arena*);
template<> ::KWMsg::ReqSwapScene* Arena::CreateMaybeMessage<::KWMsg::ReqSwapScene>(Arena*);
template<> ::KWMsg::ReqTestBattle* Arena::CreateMaybeMessage<::KWMsg::ReqTestBattle>(Arena*);
template<> ::KWMsg::ReqTryPushClientIntoQueueUp* Arena::CreateMaybeMessage<::KWMsg::ReqTryPushClientIntoQueueUp>(Arena*);
template<> ::KWMsg::ReqUpdatePlayerLastHeartbeatTS* Arena::CreateMaybeMessage<::KWMsg::ReqUpdatePlayerLastHeartbeatTS>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace KWMsg {

enum PosSyncUnit_EMoveType : int {
  PosSyncUnit_EMoveType_EMT_WALK = 0,
  PosSyncUnit_EMoveType_EET_SPEEDY = 1,
  PosSyncUnit_EMoveType_EET_TELEPORT = 2,
  PosSyncUnit_EMoveType_PosSyncUnit_EMoveType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PosSyncUnit_EMoveType_PosSyncUnit_EMoveType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PosSyncUnit_EMoveType_IsValid(int value);
constexpr PosSyncUnit_EMoveType PosSyncUnit_EMoveType_EMoveType_MIN = PosSyncUnit_EMoveType_EMT_WALK;
constexpr PosSyncUnit_EMoveType PosSyncUnit_EMoveType_EMoveType_MAX = PosSyncUnit_EMoveType_EET_TELEPORT;
constexpr int PosSyncUnit_EMoveType_EMoveType_ARRAYSIZE = PosSyncUnit_EMoveType_EMoveType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PosSyncUnit_EMoveType_descriptor();
template<typename T>
inline const std::string& PosSyncUnit_EMoveType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PosSyncUnit_EMoveType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PosSyncUnit_EMoveType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PosSyncUnit_EMoveType_descriptor(), enum_t_value);
}
inline bool PosSyncUnit_EMoveType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PosSyncUnit_EMoveType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PosSyncUnit_EMoveType>(
    PosSyncUnit_EMoveType_descriptor(), name, value);
}
enum ReqAckPlayerChat_EGameChatChannel : int {
  ReqAckPlayerChat_EGameChatChannel_EGCC_GLOBAL = 0,
  ReqAckPlayerChat_EGameChatChannel_EGCC_GUILD = 1,
  ReqAckPlayerChat_EGameChatChannel_EGCC_ROOM = 2,
  ReqAckPlayerChat_EGameChatChannel_EGCC_TEAM = 3,
  ReqAckPlayerChat_EGameChatChannel_ReqAckPlayerChat_EGameChatChannel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReqAckPlayerChat_EGameChatChannel_ReqAckPlayerChat_EGameChatChannel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReqAckPlayerChat_EGameChatChannel_IsValid(int value);
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MIN = ReqAckPlayerChat_EGameChatChannel_EGCC_GLOBAL;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MAX = ReqAckPlayerChat_EGameChatChannel_EGCC_TEAM;
constexpr int ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_ARRAYSIZE = ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatChannel_descriptor();
template<typename T>
inline const std::string& ReqAckPlayerChat_EGameChatChannel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReqAckPlayerChat_EGameChatChannel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReqAckPlayerChat_EGameChatChannel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReqAckPlayerChat_EGameChatChannel_descriptor(), enum_t_value);
}
inline bool ReqAckPlayerChat_EGameChatChannel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReqAckPlayerChat_EGameChatChannel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReqAckPlayerChat_EGameChatChannel>(
    ReqAckPlayerChat_EGameChatChannel_descriptor(), name, value);
}
enum ReqAckPlayerChat_EGameChatType : int {
  ReqAckPlayerChat_EGameChatType_EGCT_TEXT = 0,
  ReqAckPlayerChat_EGameChatType_EGCT_VOICE = 1,
  ReqAckPlayerChat_EGameChatType_EGCT_EMOJI = 2,
  ReqAckPlayerChat_EGameChatType_ReqAckPlayerChat_EGameChatType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReqAckPlayerChat_EGameChatType_ReqAckPlayerChat_EGameChatType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReqAckPlayerChat_EGameChatType_IsValid(int value);
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MIN = ReqAckPlayerChat_EGameChatType_EGCT_TEXT;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MAX = ReqAckPlayerChat_EGameChatType_EGCT_EMOJI;
constexpr int ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE = ReqAckPlayerChat_EGameChatType_EGameChatType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor();
template<typename T>
inline const std::string& ReqAckPlayerChat_EGameChatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReqAckPlayerChat_EGameChatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReqAckPlayerChat_EGameChatType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReqAckPlayerChat_EGameChatType_descriptor(), enum_t_value);
}
inline bool ReqAckPlayerChat_EGameChatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReqAckPlayerChat_EGameChatType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReqAckPlayerChat_EGameChatType>(
    ReqAckPlayerChat_EGameChatType_descriptor(), name, value);
}
// ===================================================================

class ReqAckLagTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAckLagTest) */ {
 public:
  inline ReqAckLagTest() : ReqAckLagTest(nullptr) {}
  ~ReqAckLagTest() override;
  explicit constexpr ReqAckLagTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckLagTest(const ReqAckLagTest& from);
  ReqAckLagTest(ReqAckLagTest&& from) noexcept
    : ReqAckLagTest() {
    *this = ::std::move(from);
  }

  inline ReqAckLagTest& operator=(const ReqAckLagTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckLagTest& operator=(ReqAckLagTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckLagTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckLagTest* internal_default_instance() {
    return reinterpret_cast<const ReqAckLagTest*>(
               &_ReqAckLagTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ReqAckLagTest& a, ReqAckLagTest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckLagTest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckLagTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckLagTest* New() const final {
    return new ReqAckLagTest();
  }

  ReqAckLagTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckLagTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckLagTest& from);
  void MergeFrom(const ReqAckLagTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckLagTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAckLagTest";
  }
  protected:
  explicit ReqAckLagTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAckLagTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckHeartBeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAckHeartBeat) */ {
 public:
  inline ReqAckHeartBeat() : ReqAckHeartBeat(nullptr) {}
  ~ReqAckHeartBeat() override;
  explicit constexpr ReqAckHeartBeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckHeartBeat(const ReqAckHeartBeat& from);
  ReqAckHeartBeat(ReqAckHeartBeat&& from) noexcept
    : ReqAckHeartBeat() {
    *this = ::std::move(from);
  }

  inline ReqAckHeartBeat& operator=(const ReqAckHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckHeartBeat& operator=(ReqAckHeartBeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckHeartBeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckHeartBeat* internal_default_instance() {
    return reinterpret_cast<const ReqAckHeartBeat*>(
               &_ReqAckHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ReqAckHeartBeat& a, ReqAckHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckHeartBeat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckHeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckHeartBeat* New() const final {
    return new ReqAckHeartBeat();
  }

  ReqAckHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckHeartBeat& from);
  void MergeFrom(const ReqAckHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAckHeartBeat";
  }
  protected:
  explicit ReqAckHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAckHeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqLeaveGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqLeaveGameServer) */ {
 public:
  inline ReqLeaveGameServer() : ReqLeaveGameServer(nullptr) {}
  ~ReqLeaveGameServer() override;
  explicit constexpr ReqLeaveGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqLeaveGameServer(const ReqLeaveGameServer& from);
  ReqLeaveGameServer(ReqLeaveGameServer&& from) noexcept
    : ReqLeaveGameServer() {
    *this = ::std::move(from);
  }

  inline ReqLeaveGameServer& operator=(const ReqLeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLeaveGameServer& operator=(ReqLeaveGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqLeaveGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqLeaveGameServer* internal_default_instance() {
    return reinterpret_cast<const ReqLeaveGameServer*>(
               &_ReqLeaveGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ReqLeaveGameServer& a, ReqLeaveGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqLeaveGameServer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqLeaveGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqLeaveGameServer* New() const final {
    return new ReqLeaveGameServer();
  }

  ReqLeaveGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqLeaveGameServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqLeaveGameServer& from);
  void MergeFrom(const ReqLeaveGameServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLeaveGameServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqLeaveGameServer";
  }
  protected:
  explicit ReqLeaveGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqLeaveGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class PlayerEntryInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PlayerEntryInfo) */ {
 public:
  inline PlayerEntryInfo() : PlayerEntryInfo(nullptr) {}
  ~PlayerEntryInfo() override;
  explicit constexpr PlayerEntryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerEntryInfo(const PlayerEntryInfo& from);
  PlayerEntryInfo(PlayerEntryInfo&& from) noexcept
    : PlayerEntryInfo() {
    *this = ::std::move(from);
  }

  inline PlayerEntryInfo& operator=(const PlayerEntryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerEntryInfo& operator=(PlayerEntryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerEntryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerEntryInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerEntryInfo*>(
               &_PlayerEntryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PlayerEntryInfo& a, PlayerEntryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerEntryInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerEntryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerEntryInfo* New() const final {
    return new PlayerEntryInfo();
  }

  PlayerEntryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerEntryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerEntryInfo& from);
  void MergeFrom(const PlayerEntryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerEntryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PlayerEntryInfo";
  }
  protected:
  explicit PlayerEntryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigIdFieldNumber = 3,
    kClassIdFieldNumber = 5,
    kObjectGuidFieldNumber = 1,
    kPosFieldNumber = 2,
    kSceneIdFieldNumber = 4,
  };
  // bytes config_id = 3;
  void clear_config_id();
  const std::string& config_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_config_id();
  void set_allocated_config_id(std::string* config_id);
  private:
  const std::string& _internal_config_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_id(const std::string& value);
  std::string* _internal_mutable_config_id();
  public:

  // bytes class_id = 5;
  void clear_class_id();
  const std::string& class_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_class_id();
  void set_allocated_class_id(std::string* class_id);
  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(const std::string& value);
  std::string* _internal_mutable_class_id();
  public:

  // .KWMsg.Ident object_guid = 1;
  bool has_object_guid() const;
  private:
  bool _internal_has_object_guid() const;
  public:
  void clear_object_guid();
  const ::KWMsg::Ident& object_guid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_object_guid();
  ::KWMsg::Ident* mutable_object_guid();
  void set_allocated_object_guid(::KWMsg::Ident* object_guid);
  private:
  const ::KWMsg::Ident& _internal_object_guid() const;
  ::KWMsg::Ident* _internal_mutable_object_guid();
  public:
  void unsafe_arena_set_allocated_object_guid(
      ::KWMsg::Ident* object_guid);
  ::KWMsg::Ident* unsafe_arena_release_object_guid();

  // .KWMsg.Vector3 pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::KWMsg::Vector3& pos() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Vector3* release_pos();
  ::KWMsg::Vector3* mutable_pos();
  void set_allocated_pos(::KWMsg::Vector3* pos);
  private:
  const ::KWMsg::Vector3& _internal_pos() const;
  ::KWMsg::Vector3* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::KWMsg::Vector3* pos);
  ::KWMsg::Vector3* unsafe_arena_release_pos();

  // int32 scene_id = 4;
  void clear_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id() const;
  void set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_id() const;
  void _internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.PlayerEntryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_id_;
  ::KWMsg::Ident* object_guid_;
  ::KWMsg::Vector3* pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckPlayerEntryList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckPlayerEntryList) */ {
 public:
  inline AckPlayerEntryList() : AckPlayerEntryList(nullptr) {}
  ~AckPlayerEntryList() override;
  explicit constexpr AckPlayerEntryList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckPlayerEntryList(const AckPlayerEntryList& from);
  AckPlayerEntryList(AckPlayerEntryList&& from) noexcept
    : AckPlayerEntryList() {
    *this = ::std::move(from);
  }

  inline AckPlayerEntryList& operator=(const AckPlayerEntryList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckPlayerEntryList& operator=(AckPlayerEntryList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckPlayerEntryList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckPlayerEntryList* internal_default_instance() {
    return reinterpret_cast<const AckPlayerEntryList*>(
               &_AckPlayerEntryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AckPlayerEntryList& a, AckPlayerEntryList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckPlayerEntryList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckPlayerEntryList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckPlayerEntryList* New() const final {
    return new AckPlayerEntryList();
  }

  AckPlayerEntryList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckPlayerEntryList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckPlayerEntryList& from);
  void MergeFrom(const AckPlayerEntryList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPlayerEntryList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckPlayerEntryList";
  }
  protected:
  explicit AckPlayerEntryList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectListFieldNumber = 1,
  };
  // repeated .KWMsg.PlayerEntryInfo object_list = 1;
  int object_list_size() const;
  private:
  int _internal_object_list_size() const;
  public:
  void clear_object_list();
  ::KWMsg::PlayerEntryInfo* mutable_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerEntryInfo >*
      mutable_object_list();
  private:
  const ::KWMsg::PlayerEntryInfo& _internal_object_list(int index) const;
  ::KWMsg::PlayerEntryInfo* _internal_add_object_list();
  public:
  const ::KWMsg::PlayerEntryInfo& object_list(int index) const;
  ::KWMsg::PlayerEntryInfo* add_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerEntryInfo >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:KWMsg.AckPlayerEntryList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerEntryInfo > object_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckPlayerLeaveList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckPlayerLeaveList) */ {
 public:
  inline AckPlayerLeaveList() : AckPlayerLeaveList(nullptr) {}
  ~AckPlayerLeaveList() override;
  explicit constexpr AckPlayerLeaveList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckPlayerLeaveList(const AckPlayerLeaveList& from);
  AckPlayerLeaveList(AckPlayerLeaveList&& from) noexcept
    : AckPlayerLeaveList() {
    *this = ::std::move(from);
  }

  inline AckPlayerLeaveList& operator=(const AckPlayerLeaveList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckPlayerLeaveList& operator=(AckPlayerLeaveList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckPlayerLeaveList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckPlayerLeaveList* internal_default_instance() {
    return reinterpret_cast<const AckPlayerLeaveList*>(
               &_AckPlayerLeaveList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AckPlayerLeaveList& a, AckPlayerLeaveList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckPlayerLeaveList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckPlayerLeaveList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckPlayerLeaveList* New() const final {
    return new AckPlayerLeaveList();
  }

  AckPlayerLeaveList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckPlayerLeaveList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckPlayerLeaveList& from);
  void MergeFrom(const AckPlayerLeaveList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPlayerLeaveList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckPlayerLeaveList";
  }
  protected:
  explicit AckPlayerLeaveList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectListFieldNumber = 1,
  };
  // repeated .KWMsg.Ident object_list = 1;
  int object_list_size() const;
  private:
  int _internal_object_list_size() const;
  public:
  void clear_object_list();
  ::KWMsg::Ident* mutable_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
      mutable_object_list();
  private:
  const ::KWMsg::Ident& _internal_object_list(int index) const;
  ::KWMsg::Ident* _internal_add_object_list();
  public:
  const ::KWMsg::Ident& object_list(int index) const;
  ::KWMsg::Ident* add_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:KWMsg.AckPlayerLeaveList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident > object_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckPlayerDataFinished final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckPlayerDataFinished) */ {
 public:
  inline AckPlayerDataFinished() : AckPlayerDataFinished(nullptr) {}
  ~AckPlayerDataFinished() override;
  explicit constexpr AckPlayerDataFinished(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckPlayerDataFinished(const AckPlayerDataFinished& from);
  AckPlayerDataFinished(AckPlayerDataFinished&& from) noexcept
    : AckPlayerDataFinished() {
    *this = ::std::move(from);
  }

  inline AckPlayerDataFinished& operator=(const AckPlayerDataFinished& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckPlayerDataFinished& operator=(AckPlayerDataFinished&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckPlayerDataFinished& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckPlayerDataFinished* internal_default_instance() {
    return reinterpret_cast<const AckPlayerDataFinished*>(
               &_AckPlayerDataFinished_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AckPlayerDataFinished& a, AckPlayerDataFinished& b) {
    a.Swap(&b);
  }
  inline void Swap(AckPlayerDataFinished* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckPlayerDataFinished* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckPlayerDataFinished* New() const final {
    return new AckPlayerDataFinished();
  }

  AckPlayerDataFinished* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckPlayerDataFinished>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckPlayerDataFinished& from);
  void MergeFrom(const AckPlayerDataFinished& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPlayerDataFinished* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckPlayerDataFinished";
  }
  protected:
  explicit AckPlayerDataFinished(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectListFieldNumber = 1,
  };
  // repeated .KWMsg.Ident object_list = 1;
  int object_list_size() const;
  private:
  int _internal_object_list_size() const;
  public:
  void clear_object_list();
  ::KWMsg::Ident* mutable_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
      mutable_object_list();
  private:
  const ::KWMsg::Ident& _internal_object_list(int index) const;
  ::KWMsg::Ident* _internal_add_object_list();
  public:
  const ::KWMsg::Ident& object_list(int index) const;
  ::KWMsg::Ident* add_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:KWMsg.AckPlayerDataFinished)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident > object_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class PosSyncUnit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PosSyncUnit) */ {
 public:
  inline PosSyncUnit() : PosSyncUnit(nullptr) {}
  ~PosSyncUnit() override;
  explicit constexpr PosSyncUnit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PosSyncUnit(const PosSyncUnit& from);
  PosSyncUnit(PosSyncUnit&& from) noexcept
    : PosSyncUnit() {
    *this = ::std::move(from);
  }

  inline PosSyncUnit& operator=(const PosSyncUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosSyncUnit& operator=(PosSyncUnit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PosSyncUnit& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosSyncUnit* internal_default_instance() {
    return reinterpret_cast<const PosSyncUnit*>(
               &_PosSyncUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PosSyncUnit& a, PosSyncUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(PosSyncUnit* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosSyncUnit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PosSyncUnit* New() const final {
    return new PosSyncUnit();
  }

  PosSyncUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosSyncUnit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosSyncUnit& from);
  void MergeFrom(const PosSyncUnit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosSyncUnit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PosSyncUnit";
  }
  protected:
  explicit PosSyncUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PosSyncUnit_EMoveType EMoveType;
  static constexpr EMoveType EMT_WALK =
    PosSyncUnit_EMoveType_EMT_WALK;
  static constexpr EMoveType EET_SPEEDY =
    PosSyncUnit_EMoveType_EET_SPEEDY;
  static constexpr EMoveType EET_TELEPORT =
    PosSyncUnit_EMoveType_EET_TELEPORT;
  static inline bool EMoveType_IsValid(int value) {
    return PosSyncUnit_EMoveType_IsValid(value);
  }
  static constexpr EMoveType EMoveType_MIN =
    PosSyncUnit_EMoveType_EMoveType_MIN;
  static constexpr EMoveType EMoveType_MAX =
    PosSyncUnit_EMoveType_EMoveType_MAX;
  static constexpr int EMoveType_ARRAYSIZE =
    PosSyncUnit_EMoveType_EMoveType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EMoveType_descriptor() {
    return PosSyncUnit_EMoveType_descriptor();
  }
  template<typename T>
  static inline const std::string& EMoveType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EMoveType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EMoveType_Name.");
    return PosSyncUnit_EMoveType_Name(enum_t_value);
  }
  static inline bool EMoveType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EMoveType* value) {
    return PosSyncUnit_EMoveType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPosFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kStatusFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Vector3 pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::KWMsg::Vector3& pos() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Vector3* release_pos();
  ::KWMsg::Vector3* mutable_pos();
  void set_allocated_pos(::KWMsg::Vector3* pos);
  private:
  const ::KWMsg::Vector3& _internal_pos() const;
  ::KWMsg::Vector3* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::KWMsg::Vector3* pos);
  ::KWMsg::Vector3* unsafe_arena_release_pos();

  // .KWMsg.Vector3 orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::KWMsg::Vector3& orientation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Vector3* release_orientation();
  ::KWMsg::Vector3* mutable_orientation();
  void set_allocated_orientation(::KWMsg::Vector3* orientation);
  private:
  const ::KWMsg::Vector3& _internal_orientation() const;
  ::KWMsg::Vector3* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::KWMsg::Vector3* orientation);
  ::KWMsg::Vector3* unsafe_arena_release_orientation();

  // int32 status = 4;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.PosSyncUnit.EMoveType type = 5;
  void clear_type();
  ::KWMsg::PosSyncUnit_EMoveType type() const;
  void set_type(::KWMsg::PosSyncUnit_EMoveType value);
  private:
  ::KWMsg::PosSyncUnit_EMoveType _internal_type() const;
  void _internal_set_type(::KWMsg::PosSyncUnit_EMoveType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.PosSyncUnit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Vector3* pos_;
  ::KWMsg::Vector3* orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckPlayerPosSync final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAckPlayerPosSync) */ {
 public:
  inline ReqAckPlayerPosSync() : ReqAckPlayerPosSync(nullptr) {}
  ~ReqAckPlayerPosSync() override;
  explicit constexpr ReqAckPlayerPosSync(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckPlayerPosSync(const ReqAckPlayerPosSync& from);
  ReqAckPlayerPosSync(ReqAckPlayerPosSync&& from) noexcept
    : ReqAckPlayerPosSync() {
    *this = ::std::move(from);
  }

  inline ReqAckPlayerPosSync& operator=(const ReqAckPlayerPosSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckPlayerPosSync& operator=(ReqAckPlayerPosSync&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckPlayerPosSync& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckPlayerPosSync* internal_default_instance() {
    return reinterpret_cast<const ReqAckPlayerPosSync*>(
               &_ReqAckPlayerPosSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReqAckPlayerPosSync& a, ReqAckPlayerPosSync& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckPlayerPosSync* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckPlayerPosSync* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckPlayerPosSync* New() const final {
    return new ReqAckPlayerPosSync();
  }

  ReqAckPlayerPosSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckPlayerPosSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckPlayerPosSync& from);
  void MergeFrom(const ReqAckPlayerPosSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckPlayerPosSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAckPlayerPosSync";
  }
  protected:
  explicit ReqAckPlayerPosSync(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncUnitFieldNumber = 2,
    kSequenceFieldNumber = 1,
  };
  // .KWMsg.PosSyncUnit sync_unit = 2;
  bool has_sync_unit() const;
  private:
  bool _internal_has_sync_unit() const;
  public:
  void clear_sync_unit();
  const ::KWMsg::PosSyncUnit& sync_unit() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::PosSyncUnit* release_sync_unit();
  ::KWMsg::PosSyncUnit* mutable_sync_unit();
  void set_allocated_sync_unit(::KWMsg::PosSyncUnit* sync_unit);
  private:
  const ::KWMsg::PosSyncUnit& _internal_sync_unit() const;
  ::KWMsg::PosSyncUnit* _internal_mutable_sync_unit();
  public:
  void unsafe_arena_set_allocated_sync_unit(
      ::KWMsg::PosSyncUnit* sync_unit);
  ::KWMsg::PosSyncUnit* unsafe_arena_release_sync_unit();

  // int32 sequence = 1;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAckPlayerPosSync)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::PosSyncUnit* sync_unit_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSwapScene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSwapScene) */ {
 public:
  inline ReqSwapScene() : ReqSwapScene(nullptr) {}
  ~ReqSwapScene() override;
  explicit constexpr ReqSwapScene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSwapScene(const ReqSwapScene& from);
  ReqSwapScene(ReqSwapScene&& from) noexcept
    : ReqSwapScene() {
    *this = ::std::move(from);
  }

  inline ReqSwapScene& operator=(const ReqSwapScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSwapScene& operator=(ReqSwapScene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSwapScene& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSwapScene* internal_default_instance() {
    return reinterpret_cast<const ReqSwapScene*>(
               &_ReqSwapScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReqSwapScene& a, ReqSwapScene& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSwapScene* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSwapScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSwapScene* New() const final {
    return new ReqSwapScene();
  }

  ReqSwapScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSwapScene>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSwapScene& from);
  void MergeFrom(const ReqSwapScene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSwapScene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSwapScene";
  }
  protected:
  explicit ReqSwapScene(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kSceneIdFieldNumber = 2,
  };
  // bytes args = 3;
  void clear_args();
  const std::string& args() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_args(ArgT0&& arg0, ArgT... args);
  std::string* mutable_args();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 scene_id = 2;
  void clear_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id() const;
  void set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_id() const;
  void _internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSwapScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSwapScene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSwapScene) */ {
 public:
  inline AckSwapScene() : AckSwapScene(nullptr) {}
  ~AckSwapScene() override;
  explicit constexpr AckSwapScene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSwapScene(const AckSwapScene& from);
  AckSwapScene(AckSwapScene&& from) noexcept
    : AckSwapScene() {
    *this = ::std::move(from);
  }

  inline AckSwapScene& operator=(const AckSwapScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSwapScene& operator=(AckSwapScene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSwapScene& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSwapScene* internal_default_instance() {
    return reinterpret_cast<const AckSwapScene*>(
               &_AckSwapScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AckSwapScene& a, AckSwapScene& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSwapScene* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSwapScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSwapScene* New() const final {
    return new AckSwapScene();
  }

  AckSwapScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSwapScene>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSwapScene& from);
  void MergeFrom(const AckSwapScene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSwapScene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSwapScene";
  }
  protected:
  explicit AckSwapScene(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 3,
    kEventCodeFieldNumber = 1,
    kSceneIdFieldNumber = 2,
  };
  // bytes args = 3;
  void clear_args();
  const std::string& args() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_args(ArgT0&& arg0, ArgT... args);
  std::string* mutable_args();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 scene_id = 2;
  void clear_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id() const;
  void set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_id() const;
  void _internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSwapScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckPlayerChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAckPlayerChat) */ {
 public:
  inline ReqAckPlayerChat() : ReqAckPlayerChat(nullptr) {}
  ~ReqAckPlayerChat() override;
  explicit constexpr ReqAckPlayerChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckPlayerChat(const ReqAckPlayerChat& from);
  ReqAckPlayerChat(ReqAckPlayerChat&& from) noexcept
    : ReqAckPlayerChat() {
    *this = ::std::move(from);
  }

  inline ReqAckPlayerChat& operator=(const ReqAckPlayerChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckPlayerChat& operator=(ReqAckPlayerChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckPlayerChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckPlayerChat* internal_default_instance() {
    return reinterpret_cast<const ReqAckPlayerChat*>(
               &_ReqAckPlayerChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReqAckPlayerChat& a, ReqAckPlayerChat& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckPlayerChat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckPlayerChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckPlayerChat* New() const final {
    return new ReqAckPlayerChat();
  }

  ReqAckPlayerChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckPlayerChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckPlayerChat& from);
  void MergeFrom(const ReqAckPlayerChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckPlayerChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAckPlayerChat";
  }
  protected:
  explicit ReqAckPlayerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqAckPlayerChat_EGameChatChannel EGameChatChannel;
  static constexpr EGameChatChannel EGCC_GLOBAL =
    ReqAckPlayerChat_EGameChatChannel_EGCC_GLOBAL;
  static constexpr EGameChatChannel EGCC_GUILD =
    ReqAckPlayerChat_EGameChatChannel_EGCC_GUILD;
  static constexpr EGameChatChannel EGCC_ROOM =
    ReqAckPlayerChat_EGameChatChannel_EGCC_ROOM;
  static constexpr EGameChatChannel EGCC_TEAM =
    ReqAckPlayerChat_EGameChatChannel_EGCC_TEAM;
  static inline bool EGameChatChannel_IsValid(int value) {
    return ReqAckPlayerChat_EGameChatChannel_IsValid(value);
  }
  static constexpr EGameChatChannel EGameChatChannel_MIN =
    ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MIN;
  static constexpr EGameChatChannel EGameChatChannel_MAX =
    ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MAX;
  static constexpr int EGameChatChannel_ARRAYSIZE =
    ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EGameChatChannel_descriptor() {
    return ReqAckPlayerChat_EGameChatChannel_descriptor();
  }
  template<typename T>
  static inline const std::string& EGameChatChannel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EGameChatChannel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EGameChatChannel_Name.");
    return ReqAckPlayerChat_EGameChatChannel_Name(enum_t_value);
  }
  static inline bool EGameChatChannel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EGameChatChannel* value) {
    return ReqAckPlayerChat_EGameChatChannel_Parse(name, value);
  }

  typedef ReqAckPlayerChat_EGameChatType EGameChatType;
  static constexpr EGameChatType EGCT_TEXT =
    ReqAckPlayerChat_EGameChatType_EGCT_TEXT;
  static constexpr EGameChatType EGCT_VOICE =
    ReqAckPlayerChat_EGameChatType_EGCT_VOICE;
  static constexpr EGameChatType EGCT_EMOJI =
    ReqAckPlayerChat_EGameChatType_EGCT_EMOJI;
  static inline bool EGameChatType_IsValid(int value) {
    return ReqAckPlayerChat_EGameChatType_IsValid(value);
  }
  static constexpr EGameChatType EGameChatType_MIN =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MIN;
  static constexpr EGameChatType EGameChatType_MAX =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MAX;
  static constexpr int EGameChatType_ARRAYSIZE =
    ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EGameChatType_descriptor() {
    return ReqAckPlayerChat_EGameChatType_descriptor();
  }
  template<typename T>
  static inline const std::string& EGameChatType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EGameChatType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EGameChatType_Name.");
    return ReqAckPlayerChat_EGameChatType_Name(enum_t_value);
  }
  static inline bool EGameChatType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EGameChatType* value) {
    return ReqAckPlayerChat_EGameChatType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kAvatarFieldNumber = 3,
    kAvatarFrameFieldNumber = 4,
    kChatInfoFieldNumber = 7,
    kPlayerIdFieldNumber = 1,
    kChatChannelFieldNumber = 5,
    kChatTypeFieldNumber = 6,
  };
  // bytes nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // bytes avatar = 3;
  void clear_avatar();
  const std::string& avatar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // bytes avatar_frame = 4;
  void clear_avatar_frame();
  const std::string& avatar_frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_frame();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_avatar_frame();
  void set_allocated_avatar_frame(std::string* avatar_frame);
  private:
  const std::string& _internal_avatar_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_frame(const std::string& value);
  std::string* _internal_mutable_avatar_frame();
  public:

  // bytes chat_info = 7;
  void clear_chat_info();
  const std::string& chat_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_info();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_info();
  void set_allocated_chat_info(std::string* chat_info);
  private:
  const std::string& _internal_chat_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_info(const std::string& value);
  std::string* _internal_mutable_chat_info();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 5;
  void clear_chat_channel();
  ::KWMsg::ReqAckPlayerChat_EGameChatChannel chat_channel() const;
  void set_chat_channel(::KWMsg::ReqAckPlayerChat_EGameChatChannel value);
  private:
  ::KWMsg::ReqAckPlayerChat_EGameChatChannel _internal_chat_channel() const;
  void _internal_set_chat_channel(::KWMsg::ReqAckPlayerChat_EGameChatChannel value);
  public:

  // .KWMsg.ReqAckPlayerChat.EGameChatType chat_type = 6;
  void clear_chat_type();
  ::KWMsg::ReqAckPlayerChat_EGameChatType chat_type() const;
  void set_chat_type(::KWMsg::ReqAckPlayerChat_EGameChatType value);
  private:
  ::KWMsg::ReqAckPlayerChat_EGameChatType _internal_chat_type() const;
  void _internal_set_chat_type(::KWMsg::ReqAckPlayerChat_EGameChatType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAckPlayerChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_info_;
  ::KWMsg::Ident* player_id_;
  int chat_channel_;
  int chat_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCreateKcpObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCreateKcpObject) */ {
 public:
  inline ReqCreateKcpObject() : ReqCreateKcpObject(nullptr) {}
  ~ReqCreateKcpObject() override;
  explicit constexpr ReqCreateKcpObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCreateKcpObject(const ReqCreateKcpObject& from);
  ReqCreateKcpObject(ReqCreateKcpObject&& from) noexcept
    : ReqCreateKcpObject() {
    *this = ::std::move(from);
  }

  inline ReqCreateKcpObject& operator=(const ReqCreateKcpObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCreateKcpObject& operator=(ReqCreateKcpObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCreateKcpObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCreateKcpObject* internal_default_instance() {
    return reinterpret_cast<const ReqCreateKcpObject*>(
               &_ReqCreateKcpObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(ReqCreateKcpObject& a, ReqCreateKcpObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCreateKcpObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCreateKcpObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCreateKcpObject* New() const final {
    return new ReqCreateKcpObject();
  }

  ReqCreateKcpObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCreateKcpObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCreateKcpObject& from);
  void MergeFrom(const ReqCreateKcpObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCreateKcpObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCreateKcpObject";
  }
  protected:
  explicit ReqCreateKcpObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCreateKcpObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCreateKcpObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCreateKcpObject) */ {
 public:
  inline AckCreateKcpObject() : AckCreateKcpObject(nullptr) {}
  ~AckCreateKcpObject() override;
  explicit constexpr AckCreateKcpObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCreateKcpObject(const AckCreateKcpObject& from);
  AckCreateKcpObject(AckCreateKcpObject&& from) noexcept
    : AckCreateKcpObject() {
    *this = ::std::move(from);
  }

  inline AckCreateKcpObject& operator=(const AckCreateKcpObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCreateKcpObject& operator=(AckCreateKcpObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCreateKcpObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCreateKcpObject* internal_default_instance() {
    return reinterpret_cast<const AckCreateKcpObject*>(
               &_AckCreateKcpObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AckCreateKcpObject& a, AckCreateKcpObject& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCreateKcpObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCreateKcpObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCreateKcpObject* New() const final {
    return new AckCreateKcpObject();
  }

  AckCreateKcpObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCreateKcpObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCreateKcpObject& from);
  void MergeFrom(const AckCreateKcpObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCreateKcpObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCreateKcpObject";
  }
  protected:
  explicit AckCreateKcpObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIpFieldNumber = 2,
    kEventCodeFieldNumber = 1,
    kServerPortFieldNumber = 3,
    kConvFieldNumber = 4,
  };
  // bytes server_ip = 2;
  void clear_server_ip();
  const std::string& server_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_server_ip();
  void set_allocated_server_ip(std::string* server_ip);
  private:
  const std::string& _internal_server_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_ip(const std::string& value);
  std::string* _internal_mutable_server_ip();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 server_port = 3;
  void clear_server_port();
  ::PROTOBUF_NAMESPACE_ID::int32 server_port() const;
  void set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_port() const;
  void _internal_set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 conv = 4;
  void clear_conv();
  ::PROTOBUF_NAMESPACE_ID::uint32 conv() const;
  void set_conv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_conv() const;
  void _internal_set_conv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCreateKcpObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_ip_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 conv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqEstablishKcpConnection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqEstablishKcpConnection) */ {
 public:
  inline ReqEstablishKcpConnection() : ReqEstablishKcpConnection(nullptr) {}
  ~ReqEstablishKcpConnection() override;
  explicit constexpr ReqEstablishKcpConnection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqEstablishKcpConnection(const ReqEstablishKcpConnection& from);
  ReqEstablishKcpConnection(ReqEstablishKcpConnection&& from) noexcept
    : ReqEstablishKcpConnection() {
    *this = ::std::move(from);
  }

  inline ReqEstablishKcpConnection& operator=(const ReqEstablishKcpConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqEstablishKcpConnection& operator=(ReqEstablishKcpConnection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqEstablishKcpConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqEstablishKcpConnection* internal_default_instance() {
    return reinterpret_cast<const ReqEstablishKcpConnection*>(
               &_ReqEstablishKcpConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ReqEstablishKcpConnection& a, ReqEstablishKcpConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqEstablishKcpConnection* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqEstablishKcpConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqEstablishKcpConnection* New() const final {
    return new ReqEstablishKcpConnection();
  }

  ReqEstablishKcpConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqEstablishKcpConnection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqEstablishKcpConnection& from);
  void MergeFrom(const ReqEstablishKcpConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqEstablishKcpConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqEstablishKcpConnection";
  }
  protected:
  explicit ReqEstablishKcpConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqEstablishKcpConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckEstablishKcpConnection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckEstablishKcpConnection) */ {
 public:
  inline AckEstablishKcpConnection() : AckEstablishKcpConnection(nullptr) {}
  ~AckEstablishKcpConnection() override;
  explicit constexpr AckEstablishKcpConnection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckEstablishKcpConnection(const AckEstablishKcpConnection& from);
  AckEstablishKcpConnection(AckEstablishKcpConnection&& from) noexcept
    : AckEstablishKcpConnection() {
    *this = ::std::move(from);
  }

  inline AckEstablishKcpConnection& operator=(const AckEstablishKcpConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckEstablishKcpConnection& operator=(AckEstablishKcpConnection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckEstablishKcpConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckEstablishKcpConnection* internal_default_instance() {
    return reinterpret_cast<const AckEstablishKcpConnection*>(
               &_AckEstablishKcpConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AckEstablishKcpConnection& a, AckEstablishKcpConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(AckEstablishKcpConnection* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckEstablishKcpConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckEstablishKcpConnection* New() const final {
    return new AckEstablishKcpConnection();
  }

  AckEstablishKcpConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckEstablishKcpConnection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckEstablishKcpConnection& from);
  void MergeFrom(const AckEstablishKcpConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckEstablishKcpConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckEstablishKcpConnection";
  }
  protected:
  explicit AckEstablishKcpConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckEstablishKcpConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqTryPushClientIntoQueueUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqTryPushClientIntoQueueUp) */ {
 public:
  inline ReqTryPushClientIntoQueueUp() : ReqTryPushClientIntoQueueUp(nullptr) {}
  ~ReqTryPushClientIntoQueueUp() override;
  explicit constexpr ReqTryPushClientIntoQueueUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqTryPushClientIntoQueueUp(const ReqTryPushClientIntoQueueUp& from);
  ReqTryPushClientIntoQueueUp(ReqTryPushClientIntoQueueUp&& from) noexcept
    : ReqTryPushClientIntoQueueUp() {
    *this = ::std::move(from);
  }

  inline ReqTryPushClientIntoQueueUp& operator=(const ReqTryPushClientIntoQueueUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTryPushClientIntoQueueUp& operator=(ReqTryPushClientIntoQueueUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqTryPushClientIntoQueueUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqTryPushClientIntoQueueUp* internal_default_instance() {
    return reinterpret_cast<const ReqTryPushClientIntoQueueUp*>(
               &_ReqTryPushClientIntoQueueUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ReqTryPushClientIntoQueueUp& a, ReqTryPushClientIntoQueueUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqTryPushClientIntoQueueUp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTryPushClientIntoQueueUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqTryPushClientIntoQueueUp* New() const final {
    return new ReqTryPushClientIntoQueueUp();
  }

  ReqTryPushClientIntoQueueUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqTryPushClientIntoQueueUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqTryPushClientIntoQueueUp& from);
  void MergeFrom(const ReqTryPushClientIntoQueueUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTryPushClientIntoQueueUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqTryPushClientIntoQueueUp";
  }
  protected:
  explicit ReqTryPushClientIntoQueueUp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kSenderFieldNumber = 4,
    kWorldIdFieldNumber = 2,
    kLoginIdFieldNumber = 3,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // .KWMsg.Ident sender = 4;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::KWMsg::Ident& sender() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_sender();
  ::KWMsg::Ident* mutable_sender();
  void set_allocated_sender(::KWMsg::Ident* sender);
  private:
  const ::KWMsg::Ident& _internal_sender() const;
  ::KWMsg::Ident* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::KWMsg::Ident* sender);
  ::KWMsg::Ident* unsafe_arena_release_sender();

  // int32 world_id = 2;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 login_id = 3;
  void clear_login_id();
  ::PROTOBUF_NAMESPACE_ID::int32 login_id() const;
  void set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_login_id() const;
  void _internal_set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqTryPushClientIntoQueueUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::KWMsg::Ident* sender_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 login_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckPushClientIntoQueueUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckPushClientIntoQueueUp) */ {
 public:
  inline AckPushClientIntoQueueUp() : AckPushClientIntoQueueUp(nullptr) {}
  ~AckPushClientIntoQueueUp() override;
  explicit constexpr AckPushClientIntoQueueUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckPushClientIntoQueueUp(const AckPushClientIntoQueueUp& from);
  AckPushClientIntoQueueUp(AckPushClientIntoQueueUp&& from) noexcept
    : AckPushClientIntoQueueUp() {
    *this = ::std::move(from);
  }

  inline AckPushClientIntoQueueUp& operator=(const AckPushClientIntoQueueUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckPushClientIntoQueueUp& operator=(AckPushClientIntoQueueUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckPushClientIntoQueueUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckPushClientIntoQueueUp* internal_default_instance() {
    return reinterpret_cast<const AckPushClientIntoQueueUp*>(
               &_AckPushClientIntoQueueUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(AckPushClientIntoQueueUp& a, AckPushClientIntoQueueUp& b) {
    a.Swap(&b);
  }
  inline void Swap(AckPushClientIntoQueueUp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckPushClientIntoQueueUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckPushClientIntoQueueUp* New() const final {
    return new AckPushClientIntoQueueUp();
  }

  AckPushClientIntoQueueUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckPushClientIntoQueueUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckPushClientIntoQueueUp& from);
  void MergeFrom(const AckPushClientIntoQueueUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPushClientIntoQueueUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckPushClientIntoQueueUp";
  }
  protected:
  explicit AckPushClientIntoQueueUp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 2,
    kAccountFieldNumber = 3,
    kSenderFieldNumber = 6,
    kEventCodeFieldNumber = 1,
    kWorldIdFieldNumber = 4,
    kLoginIdFieldNumber = 5,
  };
  // bytes ticket = 2;
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // bytes account = 3;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // .KWMsg.Ident sender = 6;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::KWMsg::Ident& sender() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_sender();
  ::KWMsg::Ident* mutable_sender();
  void set_allocated_sender(::KWMsg::Ident* sender);
  private:
  const ::KWMsg::Ident& _internal_sender() const;
  ::KWMsg::Ident* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::KWMsg::Ident* sender);
  ::KWMsg::Ident* unsafe_arena_release_sender();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 world_id = 4;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 login_id = 5;
  void clear_login_id();
  ::PROTOBUF_NAMESPACE_ID::int32 login_id() const;
  void set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_login_id() const;
  void _internal_set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckPushClientIntoQueueUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::KWMsg::Ident* sender_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 login_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqQueueUpGetCurWorldSuitProxy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqQueueUpGetCurWorldSuitProxy) */ {
 public:
  inline ReqQueueUpGetCurWorldSuitProxy() : ReqQueueUpGetCurWorldSuitProxy(nullptr) {}
  ~ReqQueueUpGetCurWorldSuitProxy() override;
  explicit constexpr ReqQueueUpGetCurWorldSuitProxy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqQueueUpGetCurWorldSuitProxy(const ReqQueueUpGetCurWorldSuitProxy& from);
  ReqQueueUpGetCurWorldSuitProxy(ReqQueueUpGetCurWorldSuitProxy&& from) noexcept
    : ReqQueueUpGetCurWorldSuitProxy() {
    *this = ::std::move(from);
  }

  inline ReqQueueUpGetCurWorldSuitProxy& operator=(const ReqQueueUpGetCurWorldSuitProxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqQueueUpGetCurWorldSuitProxy& operator=(ReqQueueUpGetCurWorldSuitProxy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqQueueUpGetCurWorldSuitProxy& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqQueueUpGetCurWorldSuitProxy* internal_default_instance() {
    return reinterpret_cast<const ReqQueueUpGetCurWorldSuitProxy*>(
               &_ReqQueueUpGetCurWorldSuitProxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReqQueueUpGetCurWorldSuitProxy& a, ReqQueueUpGetCurWorldSuitProxy& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqQueueUpGetCurWorldSuitProxy* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqQueueUpGetCurWorldSuitProxy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqQueueUpGetCurWorldSuitProxy* New() const final {
    return new ReqQueueUpGetCurWorldSuitProxy();
  }

  ReqQueueUpGetCurWorldSuitProxy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqQueueUpGetCurWorldSuitProxy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqQueueUpGetCurWorldSuitProxy& from);
  void MergeFrom(const ReqQueueUpGetCurWorldSuitProxy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqQueueUpGetCurWorldSuitProxy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqQueueUpGetCurWorldSuitProxy";
  }
  protected:
  explicit ReqQueueUpGetCurWorldSuitProxy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
    kTranspondIdFieldNumber = 2,
  };
  // bytes ticket = 1;
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // .KWMsg.Ident transpond_id = 2;
  bool has_transpond_id() const;
  private:
  bool _internal_has_transpond_id() const;
  public:
  void clear_transpond_id();
  const ::KWMsg::Ident& transpond_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_transpond_id();
  ::KWMsg::Ident* mutable_transpond_id();
  void set_allocated_transpond_id(::KWMsg::Ident* transpond_id);
  private:
  const ::KWMsg::Ident& _internal_transpond_id() const;
  ::KWMsg::Ident* _internal_mutable_transpond_id();
  public:
  void unsafe_arena_set_allocated_transpond_id(
      ::KWMsg::Ident* transpond_id);
  ::KWMsg::Ident* unsafe_arena_release_transpond_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::KWMsg::Ident* transpond_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckQueueUpGetCurWorldSuitProxy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckQueueUpGetCurWorldSuitProxy) */ {
 public:
  inline AckQueueUpGetCurWorldSuitProxy() : AckQueueUpGetCurWorldSuitProxy(nullptr) {}
  ~AckQueueUpGetCurWorldSuitProxy() override;
  explicit constexpr AckQueueUpGetCurWorldSuitProxy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckQueueUpGetCurWorldSuitProxy(const AckQueueUpGetCurWorldSuitProxy& from);
  AckQueueUpGetCurWorldSuitProxy(AckQueueUpGetCurWorldSuitProxy&& from) noexcept
    : AckQueueUpGetCurWorldSuitProxy() {
    *this = ::std::move(from);
  }

  inline AckQueueUpGetCurWorldSuitProxy& operator=(const AckQueueUpGetCurWorldSuitProxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckQueueUpGetCurWorldSuitProxy& operator=(AckQueueUpGetCurWorldSuitProxy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckQueueUpGetCurWorldSuitProxy& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckQueueUpGetCurWorldSuitProxy* internal_default_instance() {
    return reinterpret_cast<const AckQueueUpGetCurWorldSuitProxy*>(
               &_AckQueueUpGetCurWorldSuitProxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AckQueueUpGetCurWorldSuitProxy& a, AckQueueUpGetCurWorldSuitProxy& b) {
    a.Swap(&b);
  }
  inline void Swap(AckQueueUpGetCurWorldSuitProxy* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckQueueUpGetCurWorldSuitProxy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckQueueUpGetCurWorldSuitProxy* New() const final {
    return new AckQueueUpGetCurWorldSuitProxy();
  }

  AckQueueUpGetCurWorldSuitProxy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckQueueUpGetCurWorldSuitProxy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckQueueUpGetCurWorldSuitProxy& from);
  void MergeFrom(const AckQueueUpGetCurWorldSuitProxy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckQueueUpGetCurWorldSuitProxy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckQueueUpGetCurWorldSuitProxy";
  }
  protected:
  explicit AckQueueUpGetCurWorldSuitProxy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
    kWorldIpFieldNumber = 3,
    kTranspondIdFieldNumber = 2,
    kWorldPortFieldNumber = 4,
  };
  // bytes ticket = 1;
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // bytes world_ip = 3;
  void clear_world_ip();
  const std::string& world_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_world_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_world_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_world_ip();
  void set_allocated_world_ip(std::string* world_ip);
  private:
  const std::string& _internal_world_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_world_ip(const std::string& value);
  std::string* _internal_mutable_world_ip();
  public:

  // .KWMsg.Ident transpond_id = 2;
  bool has_transpond_id() const;
  private:
  bool _internal_has_transpond_id() const;
  public:
  void clear_transpond_id();
  const ::KWMsg::Ident& transpond_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_transpond_id();
  ::KWMsg::Ident* mutable_transpond_id();
  void set_allocated_transpond_id(::KWMsg::Ident* transpond_id);
  private:
  const ::KWMsg::Ident& _internal_transpond_id() const;
  ::KWMsg::Ident* _internal_mutable_transpond_id();
  public:
  void unsafe_arena_set_allocated_transpond_id(
      ::KWMsg::Ident* transpond_id);
  ::KWMsg::Ident* unsafe_arena_release_transpond_id();

  // int32 world_port = 4;
  void clear_world_port();
  ::PROTOBUF_NAMESPACE_ID::int32 world_port() const;
  void set_world_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_port() const;
  void _internal_set_world_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckQueueUpGetCurWorldSuitProxy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr world_ip_;
  ::KWMsg::Ident* transpond_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqUpdatePlayerLastHeartbeatTS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUpdatePlayerLastHeartbeatTS) */ {
 public:
  inline ReqUpdatePlayerLastHeartbeatTS() : ReqUpdatePlayerLastHeartbeatTS(nullptr) {}
  ~ReqUpdatePlayerLastHeartbeatTS() override;
  explicit constexpr ReqUpdatePlayerLastHeartbeatTS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUpdatePlayerLastHeartbeatTS(const ReqUpdatePlayerLastHeartbeatTS& from);
  ReqUpdatePlayerLastHeartbeatTS(ReqUpdatePlayerLastHeartbeatTS&& from) noexcept
    : ReqUpdatePlayerLastHeartbeatTS() {
    *this = ::std::move(from);
  }

  inline ReqUpdatePlayerLastHeartbeatTS& operator=(const ReqUpdatePlayerLastHeartbeatTS& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUpdatePlayerLastHeartbeatTS& operator=(ReqUpdatePlayerLastHeartbeatTS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUpdatePlayerLastHeartbeatTS& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUpdatePlayerLastHeartbeatTS* internal_default_instance() {
    return reinterpret_cast<const ReqUpdatePlayerLastHeartbeatTS*>(
               &_ReqUpdatePlayerLastHeartbeatTS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ReqUpdatePlayerLastHeartbeatTS& a, ReqUpdatePlayerLastHeartbeatTS& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUpdatePlayerLastHeartbeatTS* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUpdatePlayerLastHeartbeatTS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUpdatePlayerLastHeartbeatTS* New() const final {
    return new ReqUpdatePlayerLastHeartbeatTS();
  }

  ReqUpdatePlayerLastHeartbeatTS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUpdatePlayerLastHeartbeatTS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUpdatePlayerLastHeartbeatTS& from);
  void MergeFrom(const ReqUpdatePlayerLastHeartbeatTS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUpdatePlayerLastHeartbeatTS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUpdatePlayerLastHeartbeatTS";
  }
  protected:
  explicit ReqUpdatePlayerLastHeartbeatTS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kTsFieldNumber = 2,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // int64 ts = 2;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqTestBattle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqTestBattle) */ {
 public:
  inline ReqTestBattle() : ReqTestBattle(nullptr) {}
  ~ReqTestBattle() override;
  explicit constexpr ReqTestBattle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqTestBattle(const ReqTestBattle& from);
  ReqTestBattle(ReqTestBattle&& from) noexcept
    : ReqTestBattle() {
    *this = ::std::move(from);
  }

  inline ReqTestBattle& operator=(const ReqTestBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTestBattle& operator=(ReqTestBattle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqTestBattle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqTestBattle* internal_default_instance() {
    return reinterpret_cast<const ReqTestBattle*>(
               &_ReqTestBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ReqTestBattle& a, ReqTestBattle& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqTestBattle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTestBattle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqTestBattle* New() const final {
    return new ReqTestBattle();
  }

  ReqTestBattle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqTestBattle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqTestBattle& from);
  void MergeFrom(const ReqTestBattle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTestBattle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqTestBattle";
  }
  protected:
  explicit ReqTestBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleListFieldNumber = 2,
    kTeamIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // bytes battle_list = 2;
  void clear_battle_list();
  const std::string& battle_list() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_battle_list(ArgT0&& arg0, ArgT... args);
  std::string* mutable_battle_list();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_battle_list();
  void set_allocated_battle_list(std::string* battle_list);
  private:
  const std::string& _internal_battle_list() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_battle_list(const std::string& value);
  std::string* _internal_mutable_battle_list();
  public:

  // bytes team_id = 3;
  void clear_team_id();
  const std::string& team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_team_id();
  void set_allocated_team_id(std::string* team_id);
  private:
  const std::string& _internal_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_id(const std::string& value);
  std::string* _internal_mutable_team_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqTestBattle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckTestBattle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckTestBattle) */ {
 public:
  inline AckTestBattle() : AckTestBattle(nullptr) {}
  ~AckTestBattle() override;
  explicit constexpr AckTestBattle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckTestBattle(const AckTestBattle& from);
  AckTestBattle(AckTestBattle&& from) noexcept
    : AckTestBattle() {
    *this = ::std::move(from);
  }

  inline AckTestBattle& operator=(const AckTestBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckTestBattle& operator=(AckTestBattle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckTestBattle& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckTestBattle* internal_default_instance() {
    return reinterpret_cast<const AckTestBattle*>(
               &_AckTestBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(AckTestBattle& a, AckTestBattle& b) {
    a.Swap(&b);
  }
  inline void Swap(AckTestBattle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckTestBattle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckTestBattle* New() const final {
    return new AckTestBattle();
  }

  AckTestBattle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckTestBattle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckTestBattle& from);
  void MergeFrom(const AckTestBattle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckTestBattle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckTestBattle";
  }
  protected:
  explicit AckTestBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleListFieldNumber = 2,
    kTeamIdFieldNumber = 3,
    kEventCodeFieldNumber = 1,
  };
  // bytes battle_list = 2;
  void clear_battle_list();
  const std::string& battle_list() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_battle_list(ArgT0&& arg0, ArgT... args);
  std::string* mutable_battle_list();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_battle_list();
  void set_allocated_battle_list(std::string* battle_list);
  private:
  const std::string& _internal_battle_list() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_battle_list(const std::string& value);
  std::string* _internal_mutable_battle_list();
  public:

  // bytes team_id = 3;
  void clear_team_id();
  const std::string& team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_team_id();
  void set_allocated_team_id(std::string* team_id);
  private:
  const std::string& _internal_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_id(const std::string& value);
  std::string* _internal_mutable_team_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckTestBattle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCollectWitch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCollectWitch) */ {
 public:
  inline ReqCollectWitch() : ReqCollectWitch(nullptr) {}
  ~ReqCollectWitch() override;
  explicit constexpr ReqCollectWitch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCollectWitch(const ReqCollectWitch& from);
  ReqCollectWitch(ReqCollectWitch&& from) noexcept
    : ReqCollectWitch() {
    *this = ::std::move(from);
  }

  inline ReqCollectWitch& operator=(const ReqCollectWitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCollectWitch& operator=(ReqCollectWitch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCollectWitch& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCollectWitch* internal_default_instance() {
    return reinterpret_cast<const ReqCollectWitch*>(
               &_ReqCollectWitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ReqCollectWitch& a, ReqCollectWitch& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCollectWitch* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCollectWitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCollectWitch* New() const final {
    return new ReqCollectWitch();
  }

  ReqCollectWitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCollectWitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCollectWitch& from);
  void MergeFrom(const ReqCollectWitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCollectWitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCollectWitch";
  }
  protected:
  explicit ReqCollectWitch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes witch_id = 2;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCollectWitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCollectWitch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCollectWitch) */ {
 public:
  inline AckCollectWitch() : AckCollectWitch(nullptr) {}
  ~AckCollectWitch() override;
  explicit constexpr AckCollectWitch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCollectWitch(const AckCollectWitch& from);
  AckCollectWitch(AckCollectWitch&& from) noexcept
    : AckCollectWitch() {
    *this = ::std::move(from);
  }

  inline AckCollectWitch& operator=(const AckCollectWitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCollectWitch& operator=(AckCollectWitch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCollectWitch& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCollectWitch* internal_default_instance() {
    return reinterpret_cast<const AckCollectWitch*>(
               &_AckCollectWitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(AckCollectWitch& a, AckCollectWitch& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCollectWitch* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCollectWitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCollectWitch* New() const final {
    return new AckCollectWitch();
  }

  AckCollectWitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCollectWitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCollectWitch& from);
  void MergeFrom(const AckCollectWitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCollectWitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCollectWitch";
  }
  protected:
  explicit AckCollectWitch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
    kIsCollectFieldNumber = 3,
  };
  // bytes witch_id = 2;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 is_collect = 3;
  void clear_is_collect();
  ::PROTOBUF_NAMESPACE_ID::int32 is_collect() const;
  void set_is_collect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_collect() const;
  void _internal_set_is_collect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCollectWitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_collect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqInitMainRoleName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqInitMainRoleName) */ {
 public:
  inline ReqInitMainRoleName() : ReqInitMainRoleName(nullptr) {}
  ~ReqInitMainRoleName() override;
  explicit constexpr ReqInitMainRoleName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqInitMainRoleName(const ReqInitMainRoleName& from);
  ReqInitMainRoleName(ReqInitMainRoleName&& from) noexcept
    : ReqInitMainRoleName() {
    *this = ::std::move(from);
  }

  inline ReqInitMainRoleName& operator=(const ReqInitMainRoleName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqInitMainRoleName& operator=(ReqInitMainRoleName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqInitMainRoleName& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqInitMainRoleName* internal_default_instance() {
    return reinterpret_cast<const ReqInitMainRoleName*>(
               &_ReqInitMainRoleName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ReqInitMainRoleName& a, ReqInitMainRoleName& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqInitMainRoleName* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqInitMainRoleName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqInitMainRoleName* New() const final {
    return new ReqInitMainRoleName();
  }

  ReqInitMainRoleName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqInitMainRoleName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqInitMainRoleName& from);
  void MergeFrom(const ReqInitMainRoleName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqInitMainRoleName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqInitMainRoleName";
  }
  protected:
  explicit ReqInitMainRoleName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kIsRandomNameFieldNumber = 3,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 is_random_name = 3;
  void clear_is_random_name();
  ::PROTOBUF_NAMESPACE_ID::int32 is_random_name() const;
  void set_is_random_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_random_name() const;
  void _internal_set_is_random_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqInitMainRoleName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_random_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckInitMainRoleName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckInitMainRoleName) */ {
 public:
  inline AckInitMainRoleName() : AckInitMainRoleName(nullptr) {}
  ~AckInitMainRoleName() override;
  explicit constexpr AckInitMainRoleName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckInitMainRoleName(const AckInitMainRoleName& from);
  AckInitMainRoleName(AckInitMainRoleName&& from) noexcept
    : AckInitMainRoleName() {
    *this = ::std::move(from);
  }

  inline AckInitMainRoleName& operator=(const AckInitMainRoleName& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckInitMainRoleName& operator=(AckInitMainRoleName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckInitMainRoleName& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckInitMainRoleName* internal_default_instance() {
    return reinterpret_cast<const AckInitMainRoleName*>(
               &_AckInitMainRoleName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(AckInitMainRoleName& a, AckInitMainRoleName& b) {
    a.Swap(&b);
  }
  inline void Swap(AckInitMainRoleName* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckInitMainRoleName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckInitMainRoleName* New() const final {
    return new AckInitMainRoleName();
  }

  AckInitMainRoleName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckInitMainRoleName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckInitMainRoleName& from);
  void MergeFrom(const AckInitMainRoleName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckInitMainRoleName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckInitMainRoleName";
  }
  protected:
  explicit AckInitMainRoleName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckInitMainRoleName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ReqAckLagTest

// -------------------------------------------------------------------

// ReqAckHeartBeat

// -------------------------------------------------------------------

// ReqLeaveGameServer

// .KWMsg.Ident player_id = 1;
inline bool ReqLeaveGameServer::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqLeaveGameServer::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqLeaveGameServer::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqLeaveGameServer::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLeaveGameServer.player_id)
  return _internal_player_id();
}
inline void ReqLeaveGameServer::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqLeaveGameServer.player_id)
}
inline ::KWMsg::Ident* ReqLeaveGameServer::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqLeaveGameServer::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqLeaveGameServer.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqLeaveGameServer::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqLeaveGameServer::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqLeaveGameServer.player_id)
  return _internal_mutable_player_id();
}
inline void ReqLeaveGameServer::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqLeaveGameServer.player_id)
}

// -------------------------------------------------------------------

// PlayerEntryInfo

// .KWMsg.Ident object_guid = 1;
inline bool PlayerEntryInfo::_internal_has_object_guid() const {
  return this != internal_default_instance() && object_guid_ != nullptr;
}
inline bool PlayerEntryInfo::has_object_guid() const {
  return _internal_has_object_guid();
}
inline const ::KWMsg::Ident& PlayerEntryInfo::_internal_object_guid() const {
  const ::KWMsg::Ident* p = object_guid_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& PlayerEntryInfo::object_guid() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerEntryInfo.object_guid)
  return _internal_object_guid();
}
inline void PlayerEntryInfo::unsafe_arena_set_allocated_object_guid(
    ::KWMsg::Ident* object_guid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_guid_);
  }
  object_guid_ = object_guid;
  if (object_guid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PlayerEntryInfo.object_guid)
}
inline ::KWMsg::Ident* PlayerEntryInfo::release_object_guid() {
  
  ::KWMsg::Ident* temp = object_guid_;
  object_guid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* PlayerEntryInfo::unsafe_arena_release_object_guid() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerEntryInfo.object_guid)
  
  ::KWMsg::Ident* temp = object_guid_;
  object_guid_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* PlayerEntryInfo::_internal_mutable_object_guid() {
  
  if (object_guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    object_guid_ = p;
  }
  return object_guid_;
}
inline ::KWMsg::Ident* PlayerEntryInfo::mutable_object_guid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerEntryInfo.object_guid)
  return _internal_mutable_object_guid();
}
inline void PlayerEntryInfo::set_allocated_object_guid(::KWMsg::Ident* object_guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_guid_);
  }
  if (object_guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_guid));
    if (message_arena != submessage_arena) {
      object_guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_guid, submessage_arena);
    }
    
  } else {
    
  }
  object_guid_ = object_guid;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerEntryInfo.object_guid)
}

// .KWMsg.Vector3 pos = 2;
inline bool PlayerEntryInfo::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool PlayerEntryInfo::has_pos() const {
  return _internal_has_pos();
}
inline const ::KWMsg::Vector3& PlayerEntryInfo::_internal_pos() const {
  const ::KWMsg::Vector3* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Vector3&>(
      ::KWMsg::_Vector3_default_instance_);
}
inline const ::KWMsg::Vector3& PlayerEntryInfo::pos() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerEntryInfo.pos)
  return _internal_pos();
}
inline void PlayerEntryInfo::unsafe_arena_set_allocated_pos(
    ::KWMsg::Vector3* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PlayerEntryInfo.pos)
}
inline ::KWMsg::Vector3* PlayerEntryInfo::release_pos() {
  
  ::KWMsg::Vector3* temp = pos_;
  pos_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Vector3* PlayerEntryInfo::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerEntryInfo.pos)
  
  ::KWMsg::Vector3* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::KWMsg::Vector3* PlayerEntryInfo::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Vector3>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::KWMsg::Vector3* PlayerEntryInfo::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerEntryInfo.pos)
  return _internal_mutable_pos();
}
inline void PlayerEntryInfo::set_allocated_pos(::KWMsg::Vector3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerEntryInfo.pos)
}

// bytes config_id = 3;
inline void PlayerEntryInfo::clear_config_id() {
  config_id_.ClearToEmpty();
}
inline const std::string& PlayerEntryInfo::config_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerEntryInfo.config_id)
  return _internal_config_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerEntryInfo::set_config_id(ArgT0&& arg0, ArgT... args) {
 
 config_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerEntryInfo.config_id)
}
inline std::string* PlayerEntryInfo::mutable_config_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerEntryInfo.config_id)
  return _internal_mutable_config_id();
}
inline const std::string& PlayerEntryInfo::_internal_config_id() const {
  return config_id_.Get();
}
inline void PlayerEntryInfo::_internal_set_config_id(const std::string& value) {
  
  config_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerEntryInfo::_internal_mutable_config_id() {
  
  return config_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerEntryInfo::release_config_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerEntryInfo.config_id)
  return config_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerEntryInfo::set_allocated_config_id(std::string* config_id) {
  if (config_id != nullptr) {
    
  } else {
    
  }
  config_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerEntryInfo.config_id)
}

// int32 scene_id = 4;
inline void PlayerEntryInfo::clear_scene_id() {
  scene_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerEntryInfo::_internal_scene_id() const {
  return scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerEntryInfo::scene_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerEntryInfo.scene_id)
  return _internal_scene_id();
}
inline void PlayerEntryInfo::_internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_id_ = value;
}
inline void PlayerEntryInfo::set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerEntryInfo.scene_id)
}

// bytes class_id = 5;
inline void PlayerEntryInfo::clear_class_id() {
  class_id_.ClearToEmpty();
}
inline const std::string& PlayerEntryInfo::class_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerEntryInfo.class_id)
  return _internal_class_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerEntryInfo::set_class_id(ArgT0&& arg0, ArgT... args) {
 
 class_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerEntryInfo.class_id)
}
inline std::string* PlayerEntryInfo::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerEntryInfo.class_id)
  return _internal_mutable_class_id();
}
inline const std::string& PlayerEntryInfo::_internal_class_id() const {
  return class_id_.Get();
}
inline void PlayerEntryInfo::_internal_set_class_id(const std::string& value) {
  
  class_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerEntryInfo::_internal_mutable_class_id() {
  
  return class_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerEntryInfo::release_class_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerEntryInfo.class_id)
  return class_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerEntryInfo::set_allocated_class_id(std::string* class_id) {
  if (class_id != nullptr) {
    
  } else {
    
  }
  class_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerEntryInfo.class_id)
}

// -------------------------------------------------------------------

// AckPlayerEntryList

// repeated .KWMsg.PlayerEntryInfo object_list = 1;
inline int AckPlayerEntryList::_internal_object_list_size() const {
  return object_list_.size();
}
inline int AckPlayerEntryList::object_list_size() const {
  return _internal_object_list_size();
}
inline void AckPlayerEntryList::clear_object_list() {
  object_list_.Clear();
}
inline ::KWMsg::PlayerEntryInfo* AckPlayerEntryList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckPlayerEntryList.object_list)
  return object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerEntryInfo >*
AckPlayerEntryList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckPlayerEntryList.object_list)
  return &object_list_;
}
inline const ::KWMsg::PlayerEntryInfo& AckPlayerEntryList::_internal_object_list(int index) const {
  return object_list_.Get(index);
}
inline const ::KWMsg::PlayerEntryInfo& AckPlayerEntryList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPlayerEntryList.object_list)
  return _internal_object_list(index);
}
inline ::KWMsg::PlayerEntryInfo* AckPlayerEntryList::_internal_add_object_list() {
  return object_list_.Add();
}
inline ::KWMsg::PlayerEntryInfo* AckPlayerEntryList::add_object_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckPlayerEntryList.object_list)
  return _internal_add_object_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerEntryInfo >&
AckPlayerEntryList::object_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckPlayerEntryList.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// AckPlayerLeaveList

// repeated .KWMsg.Ident object_list = 1;
inline int AckPlayerLeaveList::_internal_object_list_size() const {
  return object_list_.size();
}
inline int AckPlayerLeaveList::object_list_size() const {
  return _internal_object_list_size();
}
inline ::KWMsg::Ident* AckPlayerLeaveList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckPlayerLeaveList.object_list)
  return object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
AckPlayerLeaveList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckPlayerLeaveList.object_list)
  return &object_list_;
}
inline const ::KWMsg::Ident& AckPlayerLeaveList::_internal_object_list(int index) const {
  return object_list_.Get(index);
}
inline const ::KWMsg::Ident& AckPlayerLeaveList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPlayerLeaveList.object_list)
  return _internal_object_list(index);
}
inline ::KWMsg::Ident* AckPlayerLeaveList::_internal_add_object_list() {
  return object_list_.Add();
}
inline ::KWMsg::Ident* AckPlayerLeaveList::add_object_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckPlayerLeaveList.object_list)
  return _internal_add_object_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
AckPlayerLeaveList::object_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckPlayerLeaveList.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// AckPlayerDataFinished

// repeated .KWMsg.Ident object_list = 1;
inline int AckPlayerDataFinished::_internal_object_list_size() const {
  return object_list_.size();
}
inline int AckPlayerDataFinished::object_list_size() const {
  return _internal_object_list_size();
}
inline ::KWMsg::Ident* AckPlayerDataFinished::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckPlayerDataFinished.object_list)
  return object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
AckPlayerDataFinished::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckPlayerDataFinished.object_list)
  return &object_list_;
}
inline const ::KWMsg::Ident& AckPlayerDataFinished::_internal_object_list(int index) const {
  return object_list_.Get(index);
}
inline const ::KWMsg::Ident& AckPlayerDataFinished::object_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPlayerDataFinished.object_list)
  return _internal_object_list(index);
}
inline ::KWMsg::Ident* AckPlayerDataFinished::_internal_add_object_list() {
  return object_list_.Add();
}
inline ::KWMsg::Ident* AckPlayerDataFinished::add_object_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckPlayerDataFinished.object_list)
  return _internal_add_object_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
AckPlayerDataFinished::object_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckPlayerDataFinished.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// PosSyncUnit

// .KWMsg.Ident player_id = 1;
inline bool PosSyncUnit::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool PosSyncUnit::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& PosSyncUnit::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& PosSyncUnit::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PosSyncUnit.player_id)
  return _internal_player_id();
}
inline void PosSyncUnit::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PosSyncUnit.player_id)
}
inline ::KWMsg::Ident* PosSyncUnit::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* PosSyncUnit::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PosSyncUnit.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* PosSyncUnit::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* PosSyncUnit::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PosSyncUnit.player_id)
  return _internal_mutable_player_id();
}
inline void PosSyncUnit::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PosSyncUnit.player_id)
}

// .KWMsg.Vector3 pos = 2;
inline bool PosSyncUnit::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool PosSyncUnit::has_pos() const {
  return _internal_has_pos();
}
inline const ::KWMsg::Vector3& PosSyncUnit::_internal_pos() const {
  const ::KWMsg::Vector3* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Vector3&>(
      ::KWMsg::_Vector3_default_instance_);
}
inline const ::KWMsg::Vector3& PosSyncUnit::pos() const {
  // @@protoc_insertion_point(field_get:KWMsg.PosSyncUnit.pos)
  return _internal_pos();
}
inline void PosSyncUnit::unsafe_arena_set_allocated_pos(
    ::KWMsg::Vector3* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PosSyncUnit.pos)
}
inline ::KWMsg::Vector3* PosSyncUnit::release_pos() {
  
  ::KWMsg::Vector3* temp = pos_;
  pos_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Vector3* PosSyncUnit::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:KWMsg.PosSyncUnit.pos)
  
  ::KWMsg::Vector3* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::KWMsg::Vector3* PosSyncUnit::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Vector3>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::KWMsg::Vector3* PosSyncUnit::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PosSyncUnit.pos)
  return _internal_mutable_pos();
}
inline void PosSyncUnit::set_allocated_pos(::KWMsg::Vector3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PosSyncUnit.pos)
}

// .KWMsg.Vector3 orientation = 3;
inline bool PosSyncUnit::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool PosSyncUnit::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::KWMsg::Vector3& PosSyncUnit::_internal_orientation() const {
  const ::KWMsg::Vector3* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Vector3&>(
      ::KWMsg::_Vector3_default_instance_);
}
inline const ::KWMsg::Vector3& PosSyncUnit::orientation() const {
  // @@protoc_insertion_point(field_get:KWMsg.PosSyncUnit.orientation)
  return _internal_orientation();
}
inline void PosSyncUnit::unsafe_arena_set_allocated_orientation(
    ::KWMsg::Vector3* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PosSyncUnit.orientation)
}
inline ::KWMsg::Vector3* PosSyncUnit::release_orientation() {
  
  ::KWMsg::Vector3* temp = orientation_;
  orientation_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Vector3* PosSyncUnit::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:KWMsg.PosSyncUnit.orientation)
  
  ::KWMsg::Vector3* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::KWMsg::Vector3* PosSyncUnit::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Vector3>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::KWMsg::Vector3* PosSyncUnit::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PosSyncUnit.orientation)
  return _internal_mutable_orientation();
}
inline void PosSyncUnit::set_allocated_orientation(::KWMsg::Vector3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PosSyncUnit.orientation)
}

// int32 status = 4;
inline void PosSyncUnit::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PosSyncUnit::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PosSyncUnit::status() const {
  // @@protoc_insertion_point(field_get:KWMsg.PosSyncUnit.status)
  return _internal_status();
}
inline void PosSyncUnit::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void PosSyncUnit::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:KWMsg.PosSyncUnit.status)
}

// .KWMsg.PosSyncUnit.EMoveType type = 5;
inline void PosSyncUnit::clear_type() {
  type_ = 0;
}
inline ::KWMsg::PosSyncUnit_EMoveType PosSyncUnit::_internal_type() const {
  return static_cast< ::KWMsg::PosSyncUnit_EMoveType >(type_);
}
inline ::KWMsg::PosSyncUnit_EMoveType PosSyncUnit::type() const {
  // @@protoc_insertion_point(field_get:KWMsg.PosSyncUnit.type)
  return _internal_type();
}
inline void PosSyncUnit::_internal_set_type(::KWMsg::PosSyncUnit_EMoveType value) {
  
  type_ = value;
}
inline void PosSyncUnit::set_type(::KWMsg::PosSyncUnit_EMoveType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.PosSyncUnit.type)
}

// -------------------------------------------------------------------

// ReqAckPlayerPosSync

// int32 sequence = 1;
inline void ReqAckPlayerPosSync::clear_sequence() {
  sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckPlayerPosSync::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckPlayerPosSync::sequence() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerPosSync.sequence)
  return _internal_sequence();
}
inline void ReqAckPlayerPosSync::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_ = value;
}
inline void ReqAckPlayerPosSync::set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckPlayerPosSync.sequence)
}

// .KWMsg.PosSyncUnit sync_unit = 2;
inline bool ReqAckPlayerPosSync::_internal_has_sync_unit() const {
  return this != internal_default_instance() && sync_unit_ != nullptr;
}
inline bool ReqAckPlayerPosSync::has_sync_unit() const {
  return _internal_has_sync_unit();
}
inline void ReqAckPlayerPosSync::clear_sync_unit() {
  if (GetArenaForAllocation() == nullptr && sync_unit_ != nullptr) {
    delete sync_unit_;
  }
  sync_unit_ = nullptr;
}
inline const ::KWMsg::PosSyncUnit& ReqAckPlayerPosSync::_internal_sync_unit() const {
  const ::KWMsg::PosSyncUnit* p = sync_unit_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::PosSyncUnit&>(
      ::KWMsg::_PosSyncUnit_default_instance_);
}
inline const ::KWMsg::PosSyncUnit& ReqAckPlayerPosSync::sync_unit() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerPosSync.sync_unit)
  return _internal_sync_unit();
}
inline void ReqAckPlayerPosSync::unsafe_arena_set_allocated_sync_unit(
    ::KWMsg::PosSyncUnit* sync_unit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_unit_);
  }
  sync_unit_ = sync_unit;
  if (sync_unit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqAckPlayerPosSync.sync_unit)
}
inline ::KWMsg::PosSyncUnit* ReqAckPlayerPosSync::release_sync_unit() {
  
  ::KWMsg::PosSyncUnit* temp = sync_unit_;
  sync_unit_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::PosSyncUnit* ReqAckPlayerPosSync::unsafe_arena_release_sync_unit() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckPlayerPosSync.sync_unit)
  
  ::KWMsg::PosSyncUnit* temp = sync_unit_;
  sync_unit_ = nullptr;
  return temp;
}
inline ::KWMsg::PosSyncUnit* ReqAckPlayerPosSync::_internal_mutable_sync_unit() {
  
  if (sync_unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::PosSyncUnit>(GetArenaForAllocation());
    sync_unit_ = p;
  }
  return sync_unit_;
}
inline ::KWMsg::PosSyncUnit* ReqAckPlayerPosSync::mutable_sync_unit() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckPlayerPosSync.sync_unit)
  return _internal_mutable_sync_unit();
}
inline void ReqAckPlayerPosSync::set_allocated_sync_unit(::KWMsg::PosSyncUnit* sync_unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sync_unit_;
  }
  if (sync_unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::PosSyncUnit>::GetOwningArena(sync_unit);
    if (message_arena != submessage_arena) {
      sync_unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_unit, submessage_arena);
    }
    
  } else {
    
  }
  sync_unit_ = sync_unit;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckPlayerPosSync.sync_unit)
}

// -------------------------------------------------------------------

// ReqSwapScene

// .KWMsg.Ident player_id = 1;
inline bool ReqSwapScene::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqSwapScene::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqSwapScene::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqSwapScene::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSwapScene.player_id)
  return _internal_player_id();
}
inline void ReqSwapScene::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqSwapScene.player_id)
}
inline ::KWMsg::Ident* ReqSwapScene::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqSwapScene::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSwapScene.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqSwapScene::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqSwapScene::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSwapScene.player_id)
  return _internal_mutable_player_id();
}
inline void ReqSwapScene::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSwapScene.player_id)
}

// int32 scene_id = 2;
inline void ReqSwapScene::clear_scene_id() {
  scene_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSwapScene::_internal_scene_id() const {
  return scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSwapScene::scene_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSwapScene.scene_id)
  return _internal_scene_id();
}
inline void ReqSwapScene::_internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_id_ = value;
}
inline void ReqSwapScene::set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqSwapScene.scene_id)
}

// bytes args = 3;
inline void ReqSwapScene::clear_args() {
  args_.ClearToEmpty();
}
inline const std::string& ReqSwapScene::args() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSwapScene.args)
  return _internal_args();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSwapScene::set_args(ArgT0&& arg0, ArgT... args) {
 
 args_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSwapScene.args)
}
inline std::string* ReqSwapScene::mutable_args() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSwapScene.args)
  return _internal_mutable_args();
}
inline const std::string& ReqSwapScene::_internal_args() const {
  return args_.Get();
}
inline void ReqSwapScene::_internal_set_args(const std::string& value) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSwapScene::_internal_mutable_args() {
  
  return args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSwapScene::release_args() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSwapScene.args)
  return args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSwapScene::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSwapScene.args)
}

// -------------------------------------------------------------------

// AckSwapScene

// .KWMsg.EGameEventCode event_code = 1;
inline void AckSwapScene::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckSwapScene::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckSwapScene::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSwapScene.event_code)
  return _internal_event_code();
}
inline void AckSwapScene::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckSwapScene::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSwapScene.event_code)
}

// int32 scene_id = 2;
inline void AckSwapScene::clear_scene_id() {
  scene_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckSwapScene::_internal_scene_id() const {
  return scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckSwapScene::scene_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSwapScene.scene_id)
  return _internal_scene_id();
}
inline void AckSwapScene::_internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_id_ = value;
}
inline void AckSwapScene::set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSwapScene.scene_id)
}

// bytes args = 3;
inline void AckSwapScene::clear_args() {
  args_.ClearToEmpty();
}
inline const std::string& AckSwapScene::args() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSwapScene.args)
  return _internal_args();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckSwapScene::set_args(ArgT0&& arg0, ArgT... args) {
 
 args_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckSwapScene.args)
}
inline std::string* AckSwapScene::mutable_args() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSwapScene.args)
  return _internal_mutable_args();
}
inline const std::string& AckSwapScene::_internal_args() const {
  return args_.Get();
}
inline void AckSwapScene::_internal_set_args(const std::string& value) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckSwapScene::_internal_mutable_args() {
  
  return args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckSwapScene::release_args() {
  // @@protoc_insertion_point(field_release:KWMsg.AckSwapScene.args)
  return args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckSwapScene::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckSwapScene.args)
}

// -------------------------------------------------------------------

// ReqAckPlayerChat

// .KWMsg.Ident player_id = 1;
inline bool ReqAckPlayerChat::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqAckPlayerChat::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqAckPlayerChat::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqAckPlayerChat::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerChat.player_id)
  return _internal_player_id();
}
inline void ReqAckPlayerChat::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqAckPlayerChat.player_id)
}
inline ::KWMsg::Ident* ReqAckPlayerChat::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqAckPlayerChat::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckPlayerChat.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqAckPlayerChat::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqAckPlayerChat::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckPlayerChat.player_id)
  return _internal_mutable_player_id();
}
inline void ReqAckPlayerChat::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckPlayerChat.player_id)
}

// bytes nickname = 2;
inline void ReqAckPlayerChat::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& ReqAckPlayerChat::nickname() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerChat.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAckPlayerChat::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckPlayerChat.nickname)
}
inline std::string* ReqAckPlayerChat::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckPlayerChat.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& ReqAckPlayerChat::_internal_nickname() const {
  return nickname_.Get();
}
inline void ReqAckPlayerChat::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::release_nickname() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckPlayerChat.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqAckPlayerChat::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckPlayerChat.nickname)
}

// bytes avatar = 3;
inline void ReqAckPlayerChat::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& ReqAckPlayerChat::avatar() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerChat.avatar)
  return _internal_avatar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAckPlayerChat::set_avatar(ArgT0&& arg0, ArgT... args) {
 
 avatar_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckPlayerChat.avatar)
}
inline std::string* ReqAckPlayerChat::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckPlayerChat.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& ReqAckPlayerChat::_internal_avatar() const {
  return avatar_.Get();
}
inline void ReqAckPlayerChat::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::release_avatar() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckPlayerChat.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqAckPlayerChat::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckPlayerChat.avatar)
}

// bytes avatar_frame = 4;
inline void ReqAckPlayerChat::clear_avatar_frame() {
  avatar_frame_.ClearToEmpty();
}
inline const std::string& ReqAckPlayerChat::avatar_frame() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerChat.avatar_frame)
  return _internal_avatar_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAckPlayerChat::set_avatar_frame(ArgT0&& arg0, ArgT... args) {
 
 avatar_frame_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckPlayerChat.avatar_frame)
}
inline std::string* ReqAckPlayerChat::mutable_avatar_frame() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckPlayerChat.avatar_frame)
  return _internal_mutable_avatar_frame();
}
inline const std::string& ReqAckPlayerChat::_internal_avatar_frame() const {
  return avatar_frame_.Get();
}
inline void ReqAckPlayerChat::_internal_set_avatar_frame(const std::string& value) {
  
  avatar_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::_internal_mutable_avatar_frame() {
  
  return avatar_frame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::release_avatar_frame() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckPlayerChat.avatar_frame)
  return avatar_frame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqAckPlayerChat::set_allocated_avatar_frame(std::string* avatar_frame) {
  if (avatar_frame != nullptr) {
    
  } else {
    
  }
  avatar_frame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_frame,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckPlayerChat.avatar_frame)
}

// .KWMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 5;
inline void ReqAckPlayerChat::clear_chat_channel() {
  chat_channel_ = 0;
}
inline ::KWMsg::ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::_internal_chat_channel() const {
  return static_cast< ::KWMsg::ReqAckPlayerChat_EGameChatChannel >(chat_channel_);
}
inline ::KWMsg::ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::chat_channel() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerChat.chat_channel)
  return _internal_chat_channel();
}
inline void ReqAckPlayerChat::_internal_set_chat_channel(::KWMsg::ReqAckPlayerChat_EGameChatChannel value) {
  
  chat_channel_ = value;
}
inline void ReqAckPlayerChat::set_chat_channel(::KWMsg::ReqAckPlayerChat_EGameChatChannel value) {
  _internal_set_chat_channel(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckPlayerChat.chat_channel)
}

// .KWMsg.ReqAckPlayerChat.EGameChatType chat_type = 6;
inline void ReqAckPlayerChat::clear_chat_type() {
  chat_type_ = 0;
}
inline ::KWMsg::ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::_internal_chat_type() const {
  return static_cast< ::KWMsg::ReqAckPlayerChat_EGameChatType >(chat_type_);
}
inline ::KWMsg::ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::chat_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerChat.chat_type)
  return _internal_chat_type();
}
inline void ReqAckPlayerChat::_internal_set_chat_type(::KWMsg::ReqAckPlayerChat_EGameChatType value) {
  
  chat_type_ = value;
}
inline void ReqAckPlayerChat::set_chat_type(::KWMsg::ReqAckPlayerChat_EGameChatType value) {
  _internal_set_chat_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckPlayerChat.chat_type)
}

// bytes chat_info = 7;
inline void ReqAckPlayerChat::clear_chat_info() {
  chat_info_.ClearToEmpty();
}
inline const std::string& ReqAckPlayerChat::chat_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerChat.chat_info)
  return _internal_chat_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAckPlayerChat::set_chat_info(ArgT0&& arg0, ArgT... args) {
 
 chat_info_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckPlayerChat.chat_info)
}
inline std::string* ReqAckPlayerChat::mutable_chat_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckPlayerChat.chat_info)
  return _internal_mutable_chat_info();
}
inline const std::string& ReqAckPlayerChat::_internal_chat_info() const {
  return chat_info_.Get();
}
inline void ReqAckPlayerChat::_internal_set_chat_info(const std::string& value) {
  
  chat_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::_internal_mutable_chat_info() {
  
  return chat_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::release_chat_info() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckPlayerChat.chat_info)
  return chat_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqAckPlayerChat::set_allocated_chat_info(std::string* chat_info) {
  if (chat_info != nullptr) {
    
  } else {
    
  }
  chat_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_info,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckPlayerChat.chat_info)
}

// -------------------------------------------------------------------

// ReqCreateKcpObject

// .KWMsg.Ident player_id = 1;
inline bool ReqCreateKcpObject::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCreateKcpObject::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCreateKcpObject::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCreateKcpObject::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateKcpObject.player_id)
  return _internal_player_id();
}
inline void ReqCreateKcpObject::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCreateKcpObject.player_id)
}
inline ::KWMsg::Ident* ReqCreateKcpObject::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCreateKcpObject::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCreateKcpObject.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCreateKcpObject::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCreateKcpObject::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCreateKcpObject.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCreateKcpObject::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCreateKcpObject.player_id)
}

// -------------------------------------------------------------------

// AckCreateKcpObject

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCreateKcpObject::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCreateKcpObject::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCreateKcpObject::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateKcpObject.event_code)
  return _internal_event_code();
}
inline void AckCreateKcpObject::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCreateKcpObject::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateKcpObject.event_code)
}

// bytes server_ip = 2;
inline void AckCreateKcpObject::clear_server_ip() {
  server_ip_.ClearToEmpty();
}
inline const std::string& AckCreateKcpObject::server_ip() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateKcpObject.server_ip)
  return _internal_server_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCreateKcpObject::set_server_ip(ArgT0&& arg0, ArgT... args) {
 
 server_ip_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateKcpObject.server_ip)
}
inline std::string* AckCreateKcpObject::mutable_server_ip() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCreateKcpObject.server_ip)
  return _internal_mutable_server_ip();
}
inline const std::string& AckCreateKcpObject::_internal_server_ip() const {
  return server_ip_.Get();
}
inline void AckCreateKcpObject::_internal_set_server_ip(const std::string& value) {
  
  server_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCreateKcpObject::_internal_mutable_server_ip() {
  
  return server_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCreateKcpObject::release_server_ip() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCreateKcpObject.server_ip)
  return server_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCreateKcpObject::set_allocated_server_ip(std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  server_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCreateKcpObject.server_ip)
}

// int32 server_port = 3;
inline void AckCreateKcpObject::clear_server_port() {
  server_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCreateKcpObject::_internal_server_port() const {
  return server_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCreateKcpObject::server_port() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateKcpObject.server_port)
  return _internal_server_port();
}
inline void AckCreateKcpObject::_internal_set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_port_ = value;
}
inline void AckCreateKcpObject::set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateKcpObject.server_port)
}

// uint32 conv = 4;
inline void AckCreateKcpObject::clear_conv() {
  conv_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AckCreateKcpObject::_internal_conv() const {
  return conv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AckCreateKcpObject::conv() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateKcpObject.conv)
  return _internal_conv();
}
inline void AckCreateKcpObject::_internal_set_conv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  conv_ = value;
}
inline void AckCreateKcpObject::set_conv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_conv(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateKcpObject.conv)
}

// -------------------------------------------------------------------

// ReqEstablishKcpConnection

// .KWMsg.Ident player_id = 1;
inline bool ReqEstablishKcpConnection::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqEstablishKcpConnection::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqEstablishKcpConnection::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqEstablishKcpConnection::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqEstablishKcpConnection.player_id)
  return _internal_player_id();
}
inline void ReqEstablishKcpConnection::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqEstablishKcpConnection.player_id)
}
inline ::KWMsg::Ident* ReqEstablishKcpConnection::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqEstablishKcpConnection::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqEstablishKcpConnection.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqEstablishKcpConnection::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqEstablishKcpConnection::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqEstablishKcpConnection.player_id)
  return _internal_mutable_player_id();
}
inline void ReqEstablishKcpConnection::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqEstablishKcpConnection.player_id)
}

// -------------------------------------------------------------------

// AckEstablishKcpConnection

// .KWMsg.EGameEventCode event_code = 1;
inline void AckEstablishKcpConnection::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckEstablishKcpConnection::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckEstablishKcpConnection::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckEstablishKcpConnection.event_code)
  return _internal_event_code();
}
inline void AckEstablishKcpConnection::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckEstablishKcpConnection::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckEstablishKcpConnection.event_code)
}

// -------------------------------------------------------------------

// ReqTryPushClientIntoQueueUp

// bytes account = 1;
inline void ReqTryPushClientIntoQueueUp::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqTryPushClientIntoQueueUp::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTryPushClientIntoQueueUp.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqTryPushClientIntoQueueUp::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqTryPushClientIntoQueueUp.account)
}
inline std::string* ReqTryPushClientIntoQueueUp::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTryPushClientIntoQueueUp.account)
  return _internal_mutable_account();
}
inline const std::string& ReqTryPushClientIntoQueueUp::_internal_account() const {
  return account_.Get();
}
inline void ReqTryPushClientIntoQueueUp::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqTryPushClientIntoQueueUp::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqTryPushClientIntoQueueUp::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTryPushClientIntoQueueUp.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqTryPushClientIntoQueueUp::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTryPushClientIntoQueueUp.account)
}

// int32 world_id = 2;
inline void ReqTryPushClientIntoQueueUp::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTryPushClientIntoQueueUp::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTryPushClientIntoQueueUp::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTryPushClientIntoQueueUp.world_id)
  return _internal_world_id();
}
inline void ReqTryPushClientIntoQueueUp::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void ReqTryPushClientIntoQueueUp::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqTryPushClientIntoQueueUp.world_id)
}

// int32 login_id = 3;
inline void ReqTryPushClientIntoQueueUp::clear_login_id() {
  login_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTryPushClientIntoQueueUp::_internal_login_id() const {
  return login_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTryPushClientIntoQueueUp::login_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTryPushClientIntoQueueUp.login_id)
  return _internal_login_id();
}
inline void ReqTryPushClientIntoQueueUp::_internal_set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  login_id_ = value;
}
inline void ReqTryPushClientIntoQueueUp::set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_login_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqTryPushClientIntoQueueUp.login_id)
}

// .KWMsg.Ident sender = 4;
inline bool ReqTryPushClientIntoQueueUp::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool ReqTryPushClientIntoQueueUp::has_sender() const {
  return _internal_has_sender();
}
inline const ::KWMsg::Ident& ReqTryPushClientIntoQueueUp::_internal_sender() const {
  const ::KWMsg::Ident* p = sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqTryPushClientIntoQueueUp::sender() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTryPushClientIntoQueueUp.sender)
  return _internal_sender();
}
inline void ReqTryPushClientIntoQueueUp::unsafe_arena_set_allocated_sender(
    ::KWMsg::Ident* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqTryPushClientIntoQueueUp.sender)
}
inline ::KWMsg::Ident* ReqTryPushClientIntoQueueUp::release_sender() {
  
  ::KWMsg::Ident* temp = sender_;
  sender_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqTryPushClientIntoQueueUp::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTryPushClientIntoQueueUp.sender)
  
  ::KWMsg::Ident* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqTryPushClientIntoQueueUp::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    sender_ = p;
  }
  return sender_;
}
inline ::KWMsg::Ident* ReqTryPushClientIntoQueueUp::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTryPushClientIntoQueueUp.sender)
  return _internal_mutable_sender();
}
inline void ReqTryPushClientIntoQueueUp::set_allocated_sender(::KWMsg::Ident* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender));
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTryPushClientIntoQueueUp.sender)
}

// -------------------------------------------------------------------

// AckPushClientIntoQueueUp

// .KWMsg.EGameEventCode event_code = 1;
inline void AckPushClientIntoQueueUp::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckPushClientIntoQueueUp::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckPushClientIntoQueueUp::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPushClientIntoQueueUp.event_code)
  return _internal_event_code();
}
inline void AckPushClientIntoQueueUp::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckPushClientIntoQueueUp::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckPushClientIntoQueueUp.event_code)
}

// bytes ticket = 2;
inline void AckPushClientIntoQueueUp::clear_ticket() {
  ticket_.ClearToEmpty();
}
inline const std::string& AckPushClientIntoQueueUp::ticket() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPushClientIntoQueueUp.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckPushClientIntoQueueUp::set_ticket(ArgT0&& arg0, ArgT... args) {
 
 ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckPushClientIntoQueueUp.ticket)
}
inline std::string* AckPushClientIntoQueueUp::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckPushClientIntoQueueUp.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& AckPushClientIntoQueueUp::_internal_ticket() const {
  return ticket_.Get();
}
inline void AckPushClientIntoQueueUp::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckPushClientIntoQueueUp::_internal_mutable_ticket() {
  
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckPushClientIntoQueueUp::release_ticket() {
  // @@protoc_insertion_point(field_release:KWMsg.AckPushClientIntoQueueUp.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckPushClientIntoQueueUp::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckPushClientIntoQueueUp.ticket)
}

// bytes account = 3;
inline void AckPushClientIntoQueueUp::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& AckPushClientIntoQueueUp::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPushClientIntoQueueUp.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckPushClientIntoQueueUp::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckPushClientIntoQueueUp.account)
}
inline std::string* AckPushClientIntoQueueUp::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckPushClientIntoQueueUp.account)
  return _internal_mutable_account();
}
inline const std::string& AckPushClientIntoQueueUp::_internal_account() const {
  return account_.Get();
}
inline void AckPushClientIntoQueueUp::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckPushClientIntoQueueUp::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckPushClientIntoQueueUp::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.AckPushClientIntoQueueUp.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckPushClientIntoQueueUp::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckPushClientIntoQueueUp.account)
}

// int32 world_id = 4;
inline void AckPushClientIntoQueueUp::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckPushClientIntoQueueUp::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckPushClientIntoQueueUp::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPushClientIntoQueueUp.world_id)
  return _internal_world_id();
}
inline void AckPushClientIntoQueueUp::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void AckPushClientIntoQueueUp::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckPushClientIntoQueueUp.world_id)
}

// int32 login_id = 5;
inline void AckPushClientIntoQueueUp::clear_login_id() {
  login_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckPushClientIntoQueueUp::_internal_login_id() const {
  return login_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckPushClientIntoQueueUp::login_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPushClientIntoQueueUp.login_id)
  return _internal_login_id();
}
inline void AckPushClientIntoQueueUp::_internal_set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  login_id_ = value;
}
inline void AckPushClientIntoQueueUp::set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_login_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckPushClientIntoQueueUp.login_id)
}

// .KWMsg.Ident sender = 6;
inline bool AckPushClientIntoQueueUp::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool AckPushClientIntoQueueUp::has_sender() const {
  return _internal_has_sender();
}
inline const ::KWMsg::Ident& AckPushClientIntoQueueUp::_internal_sender() const {
  const ::KWMsg::Ident* p = sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckPushClientIntoQueueUp::sender() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPushClientIntoQueueUp.sender)
  return _internal_sender();
}
inline void AckPushClientIntoQueueUp::unsafe_arena_set_allocated_sender(
    ::KWMsg::Ident* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckPushClientIntoQueueUp.sender)
}
inline ::KWMsg::Ident* AckPushClientIntoQueueUp::release_sender() {
  
  ::KWMsg::Ident* temp = sender_;
  sender_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckPushClientIntoQueueUp::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:KWMsg.AckPushClientIntoQueueUp.sender)
  
  ::KWMsg::Ident* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckPushClientIntoQueueUp::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    sender_ = p;
  }
  return sender_;
}
inline ::KWMsg::Ident* AckPushClientIntoQueueUp::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckPushClientIntoQueueUp.sender)
  return _internal_mutable_sender();
}
inline void AckPushClientIntoQueueUp::set_allocated_sender(::KWMsg::Ident* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender));
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckPushClientIntoQueueUp.sender)
}

// -------------------------------------------------------------------

// ReqQueueUpGetCurWorldSuitProxy

// bytes ticket = 1;
inline void ReqQueueUpGetCurWorldSuitProxy::clear_ticket() {
  ticket_.ClearToEmpty();
}
inline const std::string& ReqQueueUpGetCurWorldSuitProxy::ticket() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqQueueUpGetCurWorldSuitProxy.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqQueueUpGetCurWorldSuitProxy::set_ticket(ArgT0&& arg0, ArgT... args) {
 
 ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqQueueUpGetCurWorldSuitProxy.ticket)
}
inline std::string* ReqQueueUpGetCurWorldSuitProxy::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqQueueUpGetCurWorldSuitProxy.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& ReqQueueUpGetCurWorldSuitProxy::_internal_ticket() const {
  return ticket_.Get();
}
inline void ReqQueueUpGetCurWorldSuitProxy::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqQueueUpGetCurWorldSuitProxy::_internal_mutable_ticket() {
  
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqQueueUpGetCurWorldSuitProxy::release_ticket() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqQueueUpGetCurWorldSuitProxy.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqQueueUpGetCurWorldSuitProxy::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqQueueUpGetCurWorldSuitProxy.ticket)
}

// .KWMsg.Ident transpond_id = 2;
inline bool ReqQueueUpGetCurWorldSuitProxy::_internal_has_transpond_id() const {
  return this != internal_default_instance() && transpond_id_ != nullptr;
}
inline bool ReqQueueUpGetCurWorldSuitProxy::has_transpond_id() const {
  return _internal_has_transpond_id();
}
inline const ::KWMsg::Ident& ReqQueueUpGetCurWorldSuitProxy::_internal_transpond_id() const {
  const ::KWMsg::Ident* p = transpond_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqQueueUpGetCurWorldSuitProxy::transpond_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqQueueUpGetCurWorldSuitProxy.transpond_id)
  return _internal_transpond_id();
}
inline void ReqQueueUpGetCurWorldSuitProxy::unsafe_arena_set_allocated_transpond_id(
    ::KWMsg::Ident* transpond_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpond_id_);
  }
  transpond_id_ = transpond_id;
  if (transpond_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqQueueUpGetCurWorldSuitProxy.transpond_id)
}
inline ::KWMsg::Ident* ReqQueueUpGetCurWorldSuitProxy::release_transpond_id() {
  
  ::KWMsg::Ident* temp = transpond_id_;
  transpond_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqQueueUpGetCurWorldSuitProxy::unsafe_arena_release_transpond_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqQueueUpGetCurWorldSuitProxy.transpond_id)
  
  ::KWMsg::Ident* temp = transpond_id_;
  transpond_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqQueueUpGetCurWorldSuitProxy::_internal_mutable_transpond_id() {
  
  if (transpond_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    transpond_id_ = p;
  }
  return transpond_id_;
}
inline ::KWMsg::Ident* ReqQueueUpGetCurWorldSuitProxy::mutable_transpond_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqQueueUpGetCurWorldSuitProxy.transpond_id)
  return _internal_mutable_transpond_id();
}
inline void ReqQueueUpGetCurWorldSuitProxy::set_allocated_transpond_id(::KWMsg::Ident* transpond_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpond_id_);
  }
  if (transpond_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpond_id));
    if (message_arena != submessage_arena) {
      transpond_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transpond_id, submessage_arena);
    }
    
  } else {
    
  }
  transpond_id_ = transpond_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqQueueUpGetCurWorldSuitProxy.transpond_id)
}

// -------------------------------------------------------------------

// AckQueueUpGetCurWorldSuitProxy

// bytes ticket = 1;
inline void AckQueueUpGetCurWorldSuitProxy::clear_ticket() {
  ticket_.ClearToEmpty();
}
inline const std::string& AckQueueUpGetCurWorldSuitProxy::ticket() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQueueUpGetCurWorldSuitProxy.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckQueueUpGetCurWorldSuitProxy::set_ticket(ArgT0&& arg0, ArgT... args) {
 
 ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckQueueUpGetCurWorldSuitProxy.ticket)
}
inline std::string* AckQueueUpGetCurWorldSuitProxy::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckQueueUpGetCurWorldSuitProxy.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& AckQueueUpGetCurWorldSuitProxy::_internal_ticket() const {
  return ticket_.Get();
}
inline void AckQueueUpGetCurWorldSuitProxy::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckQueueUpGetCurWorldSuitProxy::_internal_mutable_ticket() {
  
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckQueueUpGetCurWorldSuitProxy::release_ticket() {
  // @@protoc_insertion_point(field_release:KWMsg.AckQueueUpGetCurWorldSuitProxy.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckQueueUpGetCurWorldSuitProxy::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckQueueUpGetCurWorldSuitProxy.ticket)
}

// .KWMsg.Ident transpond_id = 2;
inline bool AckQueueUpGetCurWorldSuitProxy::_internal_has_transpond_id() const {
  return this != internal_default_instance() && transpond_id_ != nullptr;
}
inline bool AckQueueUpGetCurWorldSuitProxy::has_transpond_id() const {
  return _internal_has_transpond_id();
}
inline const ::KWMsg::Ident& AckQueueUpGetCurWorldSuitProxy::_internal_transpond_id() const {
  const ::KWMsg::Ident* p = transpond_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckQueueUpGetCurWorldSuitProxy::transpond_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQueueUpGetCurWorldSuitProxy.transpond_id)
  return _internal_transpond_id();
}
inline void AckQueueUpGetCurWorldSuitProxy::unsafe_arena_set_allocated_transpond_id(
    ::KWMsg::Ident* transpond_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpond_id_);
  }
  transpond_id_ = transpond_id;
  if (transpond_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckQueueUpGetCurWorldSuitProxy.transpond_id)
}
inline ::KWMsg::Ident* AckQueueUpGetCurWorldSuitProxy::release_transpond_id() {
  
  ::KWMsg::Ident* temp = transpond_id_;
  transpond_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckQueueUpGetCurWorldSuitProxy::unsafe_arena_release_transpond_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckQueueUpGetCurWorldSuitProxy.transpond_id)
  
  ::KWMsg::Ident* temp = transpond_id_;
  transpond_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckQueueUpGetCurWorldSuitProxy::_internal_mutable_transpond_id() {
  
  if (transpond_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    transpond_id_ = p;
  }
  return transpond_id_;
}
inline ::KWMsg::Ident* AckQueueUpGetCurWorldSuitProxy::mutable_transpond_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckQueueUpGetCurWorldSuitProxy.transpond_id)
  return _internal_mutable_transpond_id();
}
inline void AckQueueUpGetCurWorldSuitProxy::set_allocated_transpond_id(::KWMsg::Ident* transpond_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpond_id_);
  }
  if (transpond_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpond_id));
    if (message_arena != submessage_arena) {
      transpond_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transpond_id, submessage_arena);
    }
    
  } else {
    
  }
  transpond_id_ = transpond_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckQueueUpGetCurWorldSuitProxy.transpond_id)
}

// bytes world_ip = 3;
inline void AckQueueUpGetCurWorldSuitProxy::clear_world_ip() {
  world_ip_.ClearToEmpty();
}
inline const std::string& AckQueueUpGetCurWorldSuitProxy::world_ip() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQueueUpGetCurWorldSuitProxy.world_ip)
  return _internal_world_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckQueueUpGetCurWorldSuitProxy::set_world_ip(ArgT0&& arg0, ArgT... args) {
 
 world_ip_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckQueueUpGetCurWorldSuitProxy.world_ip)
}
inline std::string* AckQueueUpGetCurWorldSuitProxy::mutable_world_ip() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckQueueUpGetCurWorldSuitProxy.world_ip)
  return _internal_mutable_world_ip();
}
inline const std::string& AckQueueUpGetCurWorldSuitProxy::_internal_world_ip() const {
  return world_ip_.Get();
}
inline void AckQueueUpGetCurWorldSuitProxy::_internal_set_world_ip(const std::string& value) {
  
  world_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckQueueUpGetCurWorldSuitProxy::_internal_mutable_world_ip() {
  
  return world_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckQueueUpGetCurWorldSuitProxy::release_world_ip() {
  // @@protoc_insertion_point(field_release:KWMsg.AckQueueUpGetCurWorldSuitProxy.world_ip)
  return world_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckQueueUpGetCurWorldSuitProxy::set_allocated_world_ip(std::string* world_ip) {
  if (world_ip != nullptr) {
    
  } else {
    
  }
  world_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), world_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckQueueUpGetCurWorldSuitProxy.world_ip)
}

// int32 world_port = 4;
inline void AckQueueUpGetCurWorldSuitProxy::clear_world_port() {
  world_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckQueueUpGetCurWorldSuitProxy::_internal_world_port() const {
  return world_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckQueueUpGetCurWorldSuitProxy::world_port() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQueueUpGetCurWorldSuitProxy.world_port)
  return _internal_world_port();
}
inline void AckQueueUpGetCurWorldSuitProxy::_internal_set_world_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_port_ = value;
}
inline void AckQueueUpGetCurWorldSuitProxy::set_world_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_port(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckQueueUpGetCurWorldSuitProxy.world_port)
}

// -------------------------------------------------------------------

// ReqUpdatePlayerLastHeartbeatTS

// bytes account = 1;
inline void ReqUpdatePlayerLastHeartbeatTS::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqUpdatePlayerLastHeartbeatTS::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdatePlayerLastHeartbeatTS.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUpdatePlayerLastHeartbeatTS::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdatePlayerLastHeartbeatTS.account)
}
inline std::string* ReqUpdatePlayerLastHeartbeatTS::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdatePlayerLastHeartbeatTS.account)
  return _internal_mutable_account();
}
inline const std::string& ReqUpdatePlayerLastHeartbeatTS::_internal_account() const {
  return account_.Get();
}
inline void ReqUpdatePlayerLastHeartbeatTS::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUpdatePlayerLastHeartbeatTS::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUpdatePlayerLastHeartbeatTS::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdatePlayerLastHeartbeatTS.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUpdatePlayerLastHeartbeatTS::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdatePlayerLastHeartbeatTS.account)
}

// int64 ts = 2;
inline void ReqUpdatePlayerLastHeartbeatTS::clear_ts() {
  ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqUpdatePlayerLastHeartbeatTS::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqUpdatePlayerLastHeartbeatTS::ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdatePlayerLastHeartbeatTS.ts)
  return _internal_ts();
}
inline void ReqUpdatePlayerLastHeartbeatTS::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void ReqUpdatePlayerLastHeartbeatTS::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdatePlayerLastHeartbeatTS.ts)
}

// -------------------------------------------------------------------

// ReqTestBattle

// .KWMsg.Ident player_id = 1;
inline bool ReqTestBattle::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqTestBattle::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqTestBattle::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqTestBattle::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTestBattle.player_id)
  return _internal_player_id();
}
inline void ReqTestBattle::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqTestBattle.player_id)
}
inline ::KWMsg::Ident* ReqTestBattle::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqTestBattle::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTestBattle.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqTestBattle::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqTestBattle::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTestBattle.player_id)
  return _internal_mutable_player_id();
}
inline void ReqTestBattle::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTestBattle.player_id)
}

// bytes battle_list = 2;
inline void ReqTestBattle::clear_battle_list() {
  battle_list_.ClearToEmpty();
}
inline const std::string& ReqTestBattle::battle_list() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTestBattle.battle_list)
  return _internal_battle_list();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqTestBattle::set_battle_list(ArgT0&& arg0, ArgT... args) {
 
 battle_list_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqTestBattle.battle_list)
}
inline std::string* ReqTestBattle::mutable_battle_list() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTestBattle.battle_list)
  return _internal_mutable_battle_list();
}
inline const std::string& ReqTestBattle::_internal_battle_list() const {
  return battle_list_.Get();
}
inline void ReqTestBattle::_internal_set_battle_list(const std::string& value) {
  
  battle_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqTestBattle::_internal_mutable_battle_list() {
  
  return battle_list_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqTestBattle::release_battle_list() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTestBattle.battle_list)
  return battle_list_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqTestBattle::set_allocated_battle_list(std::string* battle_list) {
  if (battle_list != nullptr) {
    
  } else {
    
  }
  battle_list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_list,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTestBattle.battle_list)
}

// bytes team_id = 3;
inline void ReqTestBattle::clear_team_id() {
  team_id_.ClearToEmpty();
}
inline const std::string& ReqTestBattle::team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTestBattle.team_id)
  return _internal_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqTestBattle::set_team_id(ArgT0&& arg0, ArgT... args) {
 
 team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqTestBattle.team_id)
}
inline std::string* ReqTestBattle::mutable_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTestBattle.team_id)
  return _internal_mutable_team_id();
}
inline const std::string& ReqTestBattle::_internal_team_id() const {
  return team_id_.Get();
}
inline void ReqTestBattle::_internal_set_team_id(const std::string& value) {
  
  team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqTestBattle::_internal_mutable_team_id() {
  
  return team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqTestBattle::release_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTestBattle.team_id)
  return team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqTestBattle::set_allocated_team_id(std::string* team_id) {
  if (team_id != nullptr) {
    
  } else {
    
  }
  team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTestBattle.team_id)
}

// -------------------------------------------------------------------

// AckTestBattle

// .KWMsg.EGameEventCode event_code = 1;
inline void AckTestBattle::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckTestBattle::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckTestBattle::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTestBattle.event_code)
  return _internal_event_code();
}
inline void AckTestBattle::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckTestBattle::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckTestBattle.event_code)
}

// bytes battle_list = 2;
inline void AckTestBattle::clear_battle_list() {
  battle_list_.ClearToEmpty();
}
inline const std::string& AckTestBattle::battle_list() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTestBattle.battle_list)
  return _internal_battle_list();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckTestBattle::set_battle_list(ArgT0&& arg0, ArgT... args) {
 
 battle_list_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckTestBattle.battle_list)
}
inline std::string* AckTestBattle::mutable_battle_list() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckTestBattle.battle_list)
  return _internal_mutable_battle_list();
}
inline const std::string& AckTestBattle::_internal_battle_list() const {
  return battle_list_.Get();
}
inline void AckTestBattle::_internal_set_battle_list(const std::string& value) {
  
  battle_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckTestBattle::_internal_mutable_battle_list() {
  
  return battle_list_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckTestBattle::release_battle_list() {
  // @@protoc_insertion_point(field_release:KWMsg.AckTestBattle.battle_list)
  return battle_list_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckTestBattle::set_allocated_battle_list(std::string* battle_list) {
  if (battle_list != nullptr) {
    
  } else {
    
  }
  battle_list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_list,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckTestBattle.battle_list)
}

// bytes team_id = 3;
inline void AckTestBattle::clear_team_id() {
  team_id_.ClearToEmpty();
}
inline const std::string& AckTestBattle::team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTestBattle.team_id)
  return _internal_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckTestBattle::set_team_id(ArgT0&& arg0, ArgT... args) {
 
 team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckTestBattle.team_id)
}
inline std::string* AckTestBattle::mutable_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckTestBattle.team_id)
  return _internal_mutable_team_id();
}
inline const std::string& AckTestBattle::_internal_team_id() const {
  return team_id_.Get();
}
inline void AckTestBattle::_internal_set_team_id(const std::string& value) {
  
  team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckTestBattle::_internal_mutable_team_id() {
  
  return team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckTestBattle::release_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckTestBattle.team_id)
  return team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckTestBattle::set_allocated_team_id(std::string* team_id) {
  if (team_id != nullptr) {
    
  } else {
    
  }
  team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckTestBattle.team_id)
}

// -------------------------------------------------------------------

// ReqCollectWitch

// .KWMsg.Ident player_id = 1;
inline bool ReqCollectWitch::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCollectWitch::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCollectWitch::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCollectWitch::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollectWitch.player_id)
  return _internal_player_id();
}
inline void ReqCollectWitch::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCollectWitch.player_id)
}
inline ::KWMsg::Ident* ReqCollectWitch::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCollectWitch::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollectWitch.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCollectWitch::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCollectWitch::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollectWitch.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCollectWitch::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollectWitch.player_id)
}

// bytes witch_id = 2;
inline void ReqCollectWitch::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqCollectWitch::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollectWitch.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCollectWitch::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCollectWitch.witch_id)
}
inline std::string* ReqCollectWitch::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollectWitch.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqCollectWitch::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqCollectWitch::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCollectWitch::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCollectWitch::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollectWitch.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCollectWitch::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollectWitch.witch_id)
}

// -------------------------------------------------------------------

// AckCollectWitch

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCollectWitch::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCollectWitch::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCollectWitch::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollectWitch.event_code)
  return _internal_event_code();
}
inline void AckCollectWitch::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCollectWitch::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCollectWitch.event_code)
}

// bytes witch_id = 2;
inline void AckCollectWitch::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& AckCollectWitch::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollectWitch.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCollectWitch::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCollectWitch.witch_id)
}
inline std::string* AckCollectWitch::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCollectWitch.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& AckCollectWitch::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void AckCollectWitch::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCollectWitch::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCollectWitch::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCollectWitch.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCollectWitch::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCollectWitch.witch_id)
}

// int32 is_collect = 3;
inline void AckCollectWitch::clear_is_collect() {
  is_collect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCollectWitch::_internal_is_collect() const {
  return is_collect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCollectWitch::is_collect() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollectWitch.is_collect)
  return _internal_is_collect();
}
inline void AckCollectWitch::_internal_set_is_collect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_collect_ = value;
}
inline void AckCollectWitch::set_is_collect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_collect(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCollectWitch.is_collect)
}

// -------------------------------------------------------------------

// ReqInitMainRoleName

// .KWMsg.Ident player_id = 1;
inline bool ReqInitMainRoleName::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqInitMainRoleName::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqInitMainRoleName::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqInitMainRoleName::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqInitMainRoleName.player_id)
  return _internal_player_id();
}
inline void ReqInitMainRoleName::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqInitMainRoleName.player_id)
}
inline ::KWMsg::Ident* ReqInitMainRoleName::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqInitMainRoleName::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqInitMainRoleName.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqInitMainRoleName::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqInitMainRoleName::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqInitMainRoleName.player_id)
  return _internal_mutable_player_id();
}
inline void ReqInitMainRoleName::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqInitMainRoleName.player_id)
}

// bytes name = 2;
inline void ReqInitMainRoleName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ReqInitMainRoleName::name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqInitMainRoleName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqInitMainRoleName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqInitMainRoleName.name)
}
inline std::string* ReqInitMainRoleName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqInitMainRoleName.name)
  return _internal_mutable_name();
}
inline const std::string& ReqInitMainRoleName::_internal_name() const {
  return name_.Get();
}
inline void ReqInitMainRoleName::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqInitMainRoleName::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqInitMainRoleName::release_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqInitMainRoleName.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqInitMainRoleName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqInitMainRoleName.name)
}

// int32 is_random_name = 3;
inline void ReqInitMainRoleName::clear_is_random_name() {
  is_random_name_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqInitMainRoleName::_internal_is_random_name() const {
  return is_random_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqInitMainRoleName::is_random_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqInitMainRoleName.is_random_name)
  return _internal_is_random_name();
}
inline void ReqInitMainRoleName::_internal_set_is_random_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_random_name_ = value;
}
inline void ReqInitMainRoleName::set_is_random_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_random_name(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqInitMainRoleName.is_random_name)
}

// -------------------------------------------------------------------

// AckInitMainRoleName

// .KWMsg.EGameEventCode event_code = 1;
inline void AckInitMainRoleName::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckInitMainRoleName::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckInitMainRoleName::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckInitMainRoleName.event_code)
  return _internal_event_code();
}
inline void AckInitMainRoleName::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckInitMainRoleName::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckInitMainRoleName.event_code)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KWMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KWMsg::PosSyncUnit_EMoveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::PosSyncUnit_EMoveType>() {
  return ::KWMsg::PosSyncUnit_EMoveType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::ReqAckPlayerChat_EGameChatChannel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::ReqAckPlayerChat_EGameChatChannel>() {
  return ::KWMsg::ReqAckPlayerChat_EGameChatChannel_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::ReqAckPlayerChat_EGameChatType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::ReqAckPlayerChat_EGameChatType>() {
  return ::KWMsg::ReqAckPlayerChat_EGameChatType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kwmsgshare_2eproto
