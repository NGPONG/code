// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kwmsgbase.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kwmsgbase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kwmsgbase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kwmsgbase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kwmsgbase_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[39]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kwmsgbase_2eproto;
namespace KWMsg {
class DeviceInfo;
struct DeviceInfoDefaultTypeInternal;
extern DeviceInfoDefaultTypeInternal _DeviceInfo_default_instance_;
class Ident;
struct IdentDefaultTypeInternal;
extern IdentDefaultTypeInternal _Ident_default_instance_;
class MsgBase;
struct MsgBaseDefaultTypeInternal;
extern MsgBaseDefaultTypeInternal _MsgBase_default_instance_;
class MultiObjectPropertyList;
struct MultiObjectPropertyListDefaultTypeInternal;
extern MultiObjectPropertyListDefaultTypeInternal _MultiObjectPropertyList_default_instance_;
class MultiObjectRecordList;
struct MultiObjectRecordListDefaultTypeInternal;
extern MultiObjectRecordListDefaultTypeInternal _MultiObjectRecordList_default_instance_;
class ObjectPropertyFloat;
struct ObjectPropertyFloatDefaultTypeInternal;
extern ObjectPropertyFloatDefaultTypeInternal _ObjectPropertyFloat_default_instance_;
class ObjectPropertyInt;
struct ObjectPropertyIntDefaultTypeInternal;
extern ObjectPropertyIntDefaultTypeInternal _ObjectPropertyInt_default_instance_;
class ObjectPropertyList;
struct ObjectPropertyListDefaultTypeInternal;
extern ObjectPropertyListDefaultTypeInternal _ObjectPropertyList_default_instance_;
class ObjectPropertyObject;
struct ObjectPropertyObjectDefaultTypeInternal;
extern ObjectPropertyObjectDefaultTypeInternal _ObjectPropertyObject_default_instance_;
class ObjectPropertyString;
struct ObjectPropertyStringDefaultTypeInternal;
extern ObjectPropertyStringDefaultTypeInternal _ObjectPropertyString_default_instance_;
class ObjectPropertyVector2;
struct ObjectPropertyVector2DefaultTypeInternal;
extern ObjectPropertyVector2DefaultTypeInternal _ObjectPropertyVector2_default_instance_;
class ObjectPropertyVector3;
struct ObjectPropertyVector3DefaultTypeInternal;
extern ObjectPropertyVector3DefaultTypeInternal _ObjectPropertyVector3_default_instance_;
class ObjectRecordAddRow;
struct ObjectRecordAddRowDefaultTypeInternal;
extern ObjectRecordAddRowDefaultTypeInternal _ObjectRecordAddRow_default_instance_;
class ObjectRecordBase;
struct ObjectRecordBaseDefaultTypeInternal;
extern ObjectRecordBaseDefaultTypeInternal _ObjectRecordBase_default_instance_;
class ObjectRecordFloat;
struct ObjectRecordFloatDefaultTypeInternal;
extern ObjectRecordFloatDefaultTypeInternal _ObjectRecordFloat_default_instance_;
class ObjectRecordInt;
struct ObjectRecordIntDefaultTypeInternal;
extern ObjectRecordIntDefaultTypeInternal _ObjectRecordInt_default_instance_;
class ObjectRecordList;
struct ObjectRecordListDefaultTypeInternal;
extern ObjectRecordListDefaultTypeInternal _ObjectRecordList_default_instance_;
class ObjectRecordObject;
struct ObjectRecordObjectDefaultTypeInternal;
extern ObjectRecordObjectDefaultTypeInternal _ObjectRecordObject_default_instance_;
class ObjectRecordPagination;
struct ObjectRecordPaginationDefaultTypeInternal;
extern ObjectRecordPaginationDefaultTypeInternal _ObjectRecordPagination_default_instance_;
class ObjectRecordRemove;
struct ObjectRecordRemoveDefaultTypeInternal;
extern ObjectRecordRemoveDefaultTypeInternal _ObjectRecordRemove_default_instance_;
class ObjectRecordString;
struct ObjectRecordStringDefaultTypeInternal;
extern ObjectRecordStringDefaultTypeInternal _ObjectRecordString_default_instance_;
class ObjectRecordSwap;
struct ObjectRecordSwapDefaultTypeInternal;
extern ObjectRecordSwapDefaultTypeInternal _ObjectRecordSwap_default_instance_;
class ObjectRecordVector2;
struct ObjectRecordVector2DefaultTypeInternal;
extern ObjectRecordVector2DefaultTypeInternal _ObjectRecordVector2_default_instance_;
class ObjectRecordVector3;
struct ObjectRecordVector3DefaultTypeInternal;
extern ObjectRecordVector3DefaultTypeInternal _ObjectRecordVector3_default_instance_;
class PropertyFloat;
struct PropertyFloatDefaultTypeInternal;
extern PropertyFloatDefaultTypeInternal _PropertyFloat_default_instance_;
class PropertyInt;
struct PropertyIntDefaultTypeInternal;
extern PropertyIntDefaultTypeInternal _PropertyInt_default_instance_;
class PropertyObject;
struct PropertyObjectDefaultTypeInternal;
extern PropertyObjectDefaultTypeInternal _PropertyObject_default_instance_;
class PropertyString;
struct PropertyStringDefaultTypeInternal;
extern PropertyStringDefaultTypeInternal _PropertyString_default_instance_;
class PropertyVector2;
struct PropertyVector2DefaultTypeInternal;
extern PropertyVector2DefaultTypeInternal _PropertyVector2_default_instance_;
class PropertyVector3;
struct PropertyVector3DefaultTypeInternal;
extern PropertyVector3DefaultTypeInternal _PropertyVector3_default_instance_;
class RecordAddRowStruct;
struct RecordAddRowStructDefaultTypeInternal;
extern RecordAddRowStructDefaultTypeInternal _RecordAddRowStruct_default_instance_;
class RecordFloat;
struct RecordFloatDefaultTypeInternal;
extern RecordFloatDefaultTypeInternal _RecordFloat_default_instance_;
class RecordInt;
struct RecordIntDefaultTypeInternal;
extern RecordIntDefaultTypeInternal _RecordInt_default_instance_;
class RecordObject;
struct RecordObjectDefaultTypeInternal;
extern RecordObjectDefaultTypeInternal _RecordObject_default_instance_;
class RecordString;
struct RecordStringDefaultTypeInternal;
extern RecordStringDefaultTypeInternal _RecordString_default_instance_;
class RecordVector2;
struct RecordVector2DefaultTypeInternal;
extern RecordVector2DefaultTypeInternal _RecordVector2_default_instance_;
class RecordVector3;
struct RecordVector3DefaultTypeInternal;
extern RecordVector3DefaultTypeInternal _RecordVector3_default_instance_;
class Vector2;
struct Vector2DefaultTypeInternal;
extern Vector2DefaultTypeInternal _Vector2_default_instance_;
class Vector3;
struct Vector3DefaultTypeInternal;
extern Vector3DefaultTypeInternal _Vector3_default_instance_;
}  // namespace KWMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::KWMsg::DeviceInfo* Arena::CreateMaybeMessage<::KWMsg::DeviceInfo>(Arena*);
template<> ::KWMsg::Ident* Arena::CreateMaybeMessage<::KWMsg::Ident>(Arena*);
template<> ::KWMsg::MsgBase* Arena::CreateMaybeMessage<::KWMsg::MsgBase>(Arena*);
template<> ::KWMsg::MultiObjectPropertyList* Arena::CreateMaybeMessage<::KWMsg::MultiObjectPropertyList>(Arena*);
template<> ::KWMsg::MultiObjectRecordList* Arena::CreateMaybeMessage<::KWMsg::MultiObjectRecordList>(Arena*);
template<> ::KWMsg::ObjectPropertyFloat* Arena::CreateMaybeMessage<::KWMsg::ObjectPropertyFloat>(Arena*);
template<> ::KWMsg::ObjectPropertyInt* Arena::CreateMaybeMessage<::KWMsg::ObjectPropertyInt>(Arena*);
template<> ::KWMsg::ObjectPropertyList* Arena::CreateMaybeMessage<::KWMsg::ObjectPropertyList>(Arena*);
template<> ::KWMsg::ObjectPropertyObject* Arena::CreateMaybeMessage<::KWMsg::ObjectPropertyObject>(Arena*);
template<> ::KWMsg::ObjectPropertyString* Arena::CreateMaybeMessage<::KWMsg::ObjectPropertyString>(Arena*);
template<> ::KWMsg::ObjectPropertyVector2* Arena::CreateMaybeMessage<::KWMsg::ObjectPropertyVector2>(Arena*);
template<> ::KWMsg::ObjectPropertyVector3* Arena::CreateMaybeMessage<::KWMsg::ObjectPropertyVector3>(Arena*);
template<> ::KWMsg::ObjectRecordAddRow* Arena::CreateMaybeMessage<::KWMsg::ObjectRecordAddRow>(Arena*);
template<> ::KWMsg::ObjectRecordBase* Arena::CreateMaybeMessage<::KWMsg::ObjectRecordBase>(Arena*);
template<> ::KWMsg::ObjectRecordFloat* Arena::CreateMaybeMessage<::KWMsg::ObjectRecordFloat>(Arena*);
template<> ::KWMsg::ObjectRecordInt* Arena::CreateMaybeMessage<::KWMsg::ObjectRecordInt>(Arena*);
template<> ::KWMsg::ObjectRecordList* Arena::CreateMaybeMessage<::KWMsg::ObjectRecordList>(Arena*);
template<> ::KWMsg::ObjectRecordObject* Arena::CreateMaybeMessage<::KWMsg::ObjectRecordObject>(Arena*);
template<> ::KWMsg::ObjectRecordPagination* Arena::CreateMaybeMessage<::KWMsg::ObjectRecordPagination>(Arena*);
template<> ::KWMsg::ObjectRecordRemove* Arena::CreateMaybeMessage<::KWMsg::ObjectRecordRemove>(Arena*);
template<> ::KWMsg::ObjectRecordString* Arena::CreateMaybeMessage<::KWMsg::ObjectRecordString>(Arena*);
template<> ::KWMsg::ObjectRecordSwap* Arena::CreateMaybeMessage<::KWMsg::ObjectRecordSwap>(Arena*);
template<> ::KWMsg::ObjectRecordVector2* Arena::CreateMaybeMessage<::KWMsg::ObjectRecordVector2>(Arena*);
template<> ::KWMsg::ObjectRecordVector3* Arena::CreateMaybeMessage<::KWMsg::ObjectRecordVector3>(Arena*);
template<> ::KWMsg::PropertyFloat* Arena::CreateMaybeMessage<::KWMsg::PropertyFloat>(Arena*);
template<> ::KWMsg::PropertyInt* Arena::CreateMaybeMessage<::KWMsg::PropertyInt>(Arena*);
template<> ::KWMsg::PropertyObject* Arena::CreateMaybeMessage<::KWMsg::PropertyObject>(Arena*);
template<> ::KWMsg::PropertyString* Arena::CreateMaybeMessage<::KWMsg::PropertyString>(Arena*);
template<> ::KWMsg::PropertyVector2* Arena::CreateMaybeMessage<::KWMsg::PropertyVector2>(Arena*);
template<> ::KWMsg::PropertyVector3* Arena::CreateMaybeMessage<::KWMsg::PropertyVector3>(Arena*);
template<> ::KWMsg::RecordAddRowStruct* Arena::CreateMaybeMessage<::KWMsg::RecordAddRowStruct>(Arena*);
template<> ::KWMsg::RecordFloat* Arena::CreateMaybeMessage<::KWMsg::RecordFloat>(Arena*);
template<> ::KWMsg::RecordInt* Arena::CreateMaybeMessage<::KWMsg::RecordInt>(Arena*);
template<> ::KWMsg::RecordObject* Arena::CreateMaybeMessage<::KWMsg::RecordObject>(Arena*);
template<> ::KWMsg::RecordString* Arena::CreateMaybeMessage<::KWMsg::RecordString>(Arena*);
template<> ::KWMsg::RecordVector2* Arena::CreateMaybeMessage<::KWMsg::RecordVector2>(Arena*);
template<> ::KWMsg::RecordVector3* Arena::CreateMaybeMessage<::KWMsg::RecordVector3>(Arena*);
template<> ::KWMsg::Vector2* Arena::CreateMaybeMessage<::KWMsg::Vector2>(Arena*);
template<> ::KWMsg::Vector3* Arena::CreateMaybeMessage<::KWMsg::Vector3>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace KWMsg {

enum ObjectRecordPagination_ERetRecordType : int {
  ObjectRecordPagination_ERetRecordType_ERRT_OPEN_SUCC = 0,
  ObjectRecordPagination_ERetRecordType_ERRT_OPEN_ERR_REQTYPE = 1,
  ObjectRecordPagination_ERetRecordType_ERRT_OPEN_ERR_RECORDNAME = 2,
  ObjectRecordPagination_ERetRecordType_ERRT_OPEN_ERR_CURSOR = 3,
  ObjectRecordPagination_ERetRecordType_ERRT_OPEN_ERR_COUNT = 4,
  ObjectRecordPagination_ERetRecordType_ERRT_END = 5,
  ObjectRecordPagination_ERetRecordType_ObjectRecordPagination_ERetRecordType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ObjectRecordPagination_ERetRecordType_ObjectRecordPagination_ERetRecordType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ObjectRecordPagination_ERetRecordType_IsValid(int value);
constexpr ObjectRecordPagination_ERetRecordType ObjectRecordPagination_ERetRecordType_ERetRecordType_MIN = ObjectRecordPagination_ERetRecordType_ERRT_OPEN_SUCC;
constexpr ObjectRecordPagination_ERetRecordType ObjectRecordPagination_ERetRecordType_ERetRecordType_MAX = ObjectRecordPagination_ERetRecordType_ERRT_END;
constexpr int ObjectRecordPagination_ERetRecordType_ERetRecordType_ARRAYSIZE = ObjectRecordPagination_ERetRecordType_ERetRecordType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ObjectRecordPagination_ERetRecordType_descriptor();
template<typename T>
inline const std::string& ObjectRecordPagination_ERetRecordType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ObjectRecordPagination_ERetRecordType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ObjectRecordPagination_ERetRecordType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ObjectRecordPagination_ERetRecordType_descriptor(), enum_t_value);
}
inline bool ObjectRecordPagination_ERetRecordType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ObjectRecordPagination_ERetRecordType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ObjectRecordPagination_ERetRecordType>(
    ObjectRecordPagination_ERetRecordType_descriptor(), name, value);
}
// ===================================================================

class Ident final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.Ident) */ {
 public:
  inline Ident() : Ident(nullptr) {}
  ~Ident() override;
  explicit constexpr Ident(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Ident(const Ident& from);
  Ident(Ident&& from) noexcept
    : Ident() {
    *this = ::std::move(from);
  }

  inline Ident& operator=(const Ident& from) {
    CopyFrom(from);
    return *this;
  }
  inline Ident& operator=(Ident&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Ident& default_instance() {
    return *internal_default_instance();
  }
  static inline const Ident* internal_default_instance() {
    return reinterpret_cast<const Ident*>(
               &_Ident_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Ident& a, Ident& b) {
    a.Swap(&b);
  }
  inline void Swap(Ident* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Ident* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Ident* New() const final {
    return new Ident();
  }

  Ident* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Ident>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Ident& from);
  void MergeFrom(const Ident& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Ident* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.Ident";
  }
  protected:
  explicit Ident(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSvridFieldNumber = 1,
    kIndexFieldNumber = 2,
  };
  // int64 svrid = 1;
  void clear_svrid();
  ::PROTOBUF_NAMESPACE_ID::int64 svrid() const;
  void set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_svrid() const;
  void _internal_set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 index = 2;
  void clear_index();
  ::PROTOBUF_NAMESPACE_ID::int64 index() const;
  void set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_index() const;
  void _internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.Ident)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int64 svrid_;
  ::PROTOBUF_NAMESPACE_ID::int64 index_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class Vector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.Vector2) */ {
 public:
  inline Vector2() : Vector2(nullptr) {}
  ~Vector2() override;
  explicit constexpr Vector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector2(const Vector2& from);
  Vector2(Vector2&& from) noexcept
    : Vector2() {
    *this = ::std::move(from);
  }

  inline Vector2& operator=(const Vector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2& operator=(Vector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector2* internal_default_instance() {
    return reinterpret_cast<const Vector2*>(
               &_Vector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector2& a, Vector2& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector2* New() const final {
    return new Vector2();
  }

  Vector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector2& from);
  void MergeFrom(const Vector2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.Vector2";
  }
  protected:
  explicit Vector2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.Vector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class Vector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.Vector3) */ {
 public:
  inline Vector3() : Vector3(nullptr) {}
  ~Vector3() override;
  explicit constexpr Vector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Vector3(const Vector3& from);
  Vector3(Vector3&& from) noexcept
    : Vector3() {
    *this = ::std::move(from);
  }

  inline Vector3& operator=(const Vector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3& operator=(Vector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Vector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const Vector3* internal_default_instance() {
    return reinterpret_cast<const Vector3*>(
               &_Vector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Vector3& a, Vector3& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3* New() const final {
    return new Vector3();
  }

  Vector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3& from);
  void MergeFrom(const Vector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.Vector3";
  }
  protected:
  explicit Vector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.Vector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class PropertyInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PropertyInt) */ {
 public:
  inline PropertyInt() : PropertyInt(nullptr) {}
  ~PropertyInt() override;
  explicit constexpr PropertyInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyInt(const PropertyInt& from);
  PropertyInt(PropertyInt&& from) noexcept
    : PropertyInt() {
    *this = ::std::move(from);
  }

  inline PropertyInt& operator=(const PropertyInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyInt& operator=(PropertyInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyInt* internal_default_instance() {
    return reinterpret_cast<const PropertyInt*>(
               &_PropertyInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(PropertyInt& a, PropertyInt& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyInt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyInt* New() const final {
    return new PropertyInt();
  }

  PropertyInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyInt& from);
  void MergeFrom(const PropertyInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PropertyInt";
  }
  protected:
  explicit PropertyInt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes property_name = 1;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // int64 data = 2;
  void clear_data();
  ::PROTOBUF_NAMESPACE_ID::int64 data() const;
  void set_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_data() const;
  void _internal_set_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.PropertyInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class PropertyFloat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PropertyFloat) */ {
 public:
  inline PropertyFloat() : PropertyFloat(nullptr) {}
  ~PropertyFloat() override;
  explicit constexpr PropertyFloat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyFloat(const PropertyFloat& from);
  PropertyFloat(PropertyFloat&& from) noexcept
    : PropertyFloat() {
    *this = ::std::move(from);
  }

  inline PropertyFloat& operator=(const PropertyFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyFloat& operator=(PropertyFloat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyFloat& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyFloat* internal_default_instance() {
    return reinterpret_cast<const PropertyFloat*>(
               &_PropertyFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PropertyFloat& a, PropertyFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyFloat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyFloat* New() const final {
    return new PropertyFloat();
  }

  PropertyFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyFloat& from);
  void MergeFrom(const PropertyFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PropertyFloat";
  }
  protected:
  explicit PropertyFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes property_name = 1;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // float data = 2;
  void clear_data();
  float data() const;
  void set_data(float value);
  private:
  float _internal_data() const;
  void _internal_set_data(float value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.PropertyFloat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  float data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class PropertyString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PropertyString) */ {
 public:
  inline PropertyString() : PropertyString(nullptr) {}
  ~PropertyString() override;
  explicit constexpr PropertyString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyString(const PropertyString& from);
  PropertyString(PropertyString&& from) noexcept
    : PropertyString() {
    *this = ::std::move(from);
  }

  inline PropertyString& operator=(const PropertyString& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyString& operator=(PropertyString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyString& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyString* internal_default_instance() {
    return reinterpret_cast<const PropertyString*>(
               &_PropertyString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(PropertyString& a, PropertyString& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyString* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyString* New() const final {
    return new PropertyString();
  }

  PropertyString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyString& from);
  void MergeFrom(const PropertyString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PropertyString";
  }
  protected:
  explicit PropertyString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes property_name = 1;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.PropertyString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class PropertyObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PropertyObject) */ {
 public:
  inline PropertyObject() : PropertyObject(nullptr) {}
  ~PropertyObject() override;
  explicit constexpr PropertyObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyObject(const PropertyObject& from);
  PropertyObject(PropertyObject&& from) noexcept
    : PropertyObject() {
    *this = ::std::move(from);
  }

  inline PropertyObject& operator=(const PropertyObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyObject& operator=(PropertyObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyObject* internal_default_instance() {
    return reinterpret_cast<const PropertyObject*>(
               &_PropertyObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PropertyObject& a, PropertyObject& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyObject* New() const final {
    return new PropertyObject();
  }

  PropertyObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyObject& from);
  void MergeFrom(const PropertyObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PropertyObject";
  }
  protected:
  explicit PropertyObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes property_name = 1;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // .KWMsg.Ident data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::KWMsg::Ident& data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_data();
  ::KWMsg::Ident* mutable_data();
  void set_allocated_data(::KWMsg::Ident* data);
  private:
  const ::KWMsg::Ident& _internal_data() const;
  ::KWMsg::Ident* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::KWMsg::Ident* data);
  ::KWMsg::Ident* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:KWMsg.PropertyObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::KWMsg::Ident* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class PropertyVector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PropertyVector2) */ {
 public:
  inline PropertyVector2() : PropertyVector2(nullptr) {}
  ~PropertyVector2() override;
  explicit constexpr PropertyVector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyVector2(const PropertyVector2& from);
  PropertyVector2(PropertyVector2&& from) noexcept
    : PropertyVector2() {
    *this = ::std::move(from);
  }

  inline PropertyVector2& operator=(const PropertyVector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyVector2& operator=(PropertyVector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyVector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyVector2* internal_default_instance() {
    return reinterpret_cast<const PropertyVector2*>(
               &_PropertyVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(PropertyVector2& a, PropertyVector2& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyVector2* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyVector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyVector2* New() const final {
    return new PropertyVector2();
  }

  PropertyVector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyVector2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyVector2& from);
  void MergeFrom(const PropertyVector2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyVector2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PropertyVector2";
  }
  protected:
  explicit PropertyVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes property_name = 1;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // .KWMsg.Vector2 data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::KWMsg::Vector2& data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Vector2* release_data();
  ::KWMsg::Vector2* mutable_data();
  void set_allocated_data(::KWMsg::Vector2* data);
  private:
  const ::KWMsg::Vector2& _internal_data() const;
  ::KWMsg::Vector2* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::KWMsg::Vector2* data);
  ::KWMsg::Vector2* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:KWMsg.PropertyVector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::KWMsg::Vector2* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class PropertyVector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PropertyVector3) */ {
 public:
  inline PropertyVector3() : PropertyVector3(nullptr) {}
  ~PropertyVector3() override;
  explicit constexpr PropertyVector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PropertyVector3(const PropertyVector3& from);
  PropertyVector3(PropertyVector3&& from) noexcept
    : PropertyVector3() {
    *this = ::std::move(from);
  }

  inline PropertyVector3& operator=(const PropertyVector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline PropertyVector3& operator=(PropertyVector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PropertyVector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const PropertyVector3* internal_default_instance() {
    return reinterpret_cast<const PropertyVector3*>(
               &_PropertyVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(PropertyVector3& a, PropertyVector3& b) {
    a.Swap(&b);
  }
  inline void Swap(PropertyVector3* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PropertyVector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PropertyVector3* New() const final {
    return new PropertyVector3();
  }

  PropertyVector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PropertyVector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PropertyVector3& from);
  void MergeFrom(const PropertyVector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PropertyVector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PropertyVector3";
  }
  protected:
  explicit PropertyVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyNameFieldNumber = 1,
    kDataFieldNumber = 2,
  };
  // bytes property_name = 1;
  void clear_property_name();
  const std::string& property_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_property_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_property_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_property_name();
  void set_allocated_property_name(std::string* property_name);
  private:
  const std::string& _internal_property_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_property_name(const std::string& value);
  std::string* _internal_mutable_property_name();
  public:

  // .KWMsg.Vector3 data = 2;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::KWMsg::Vector3& data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Vector3* release_data();
  ::KWMsg::Vector3* mutable_data();
  void set_allocated_data(::KWMsg::Vector3* data);
  private:
  const ::KWMsg::Vector3& _internal_data() const;
  ::KWMsg::Vector3* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::KWMsg::Vector3* data);
  ::KWMsg::Vector3* unsafe_arena_release_data();

  // @@protoc_insertion_point(class_scope:KWMsg.PropertyVector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr property_name_;
  ::KWMsg::Vector3* data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class RecordInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.RecordInt) */ {
 public:
  inline RecordInt() : RecordInt(nullptr) {}
  ~RecordInt() override;
  explicit constexpr RecordInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordInt(const RecordInt& from);
  RecordInt(RecordInt&& from) noexcept
    : RecordInt() {
    *this = ::std::move(from);
  }

  inline RecordInt& operator=(const RecordInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordInt& operator=(RecordInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordInt* internal_default_instance() {
    return reinterpret_cast<const RecordInt*>(
               &_RecordInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(RecordInt& a, RecordInt& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordInt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordInt* New() const final {
    return new RecordInt();
  }

  RecordInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordInt& from);
  void MergeFrom(const RecordInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.RecordInt";
  }
  protected:
  explicit RecordInt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // int32 row = 1;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 col = 2;
  void clear_col();
  ::PROTOBUF_NAMESPACE_ID::int32 col() const;
  void set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_col() const;
  void _internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 data = 3;
  void clear_data();
  ::PROTOBUF_NAMESPACE_ID::int64 data() const;
  void set_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_data() const;
  void _internal_set_data(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.RecordInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_;
  ::PROTOBUF_NAMESPACE_ID::int64 data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class RecordFloat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.RecordFloat) */ {
 public:
  inline RecordFloat() : RecordFloat(nullptr) {}
  ~RecordFloat() override;
  explicit constexpr RecordFloat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordFloat(const RecordFloat& from);
  RecordFloat(RecordFloat&& from) noexcept
    : RecordFloat() {
    *this = ::std::move(from);
  }

  inline RecordFloat& operator=(const RecordFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordFloat& operator=(RecordFloat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordFloat& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordFloat* internal_default_instance() {
    return reinterpret_cast<const RecordFloat*>(
               &_RecordFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(RecordFloat& a, RecordFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordFloat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordFloat* New() const final {
    return new RecordFloat();
  }

  RecordFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordFloat& from);
  void MergeFrom(const RecordFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.RecordFloat";
  }
  protected:
  explicit RecordFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
    kDataFieldNumber = 3,
  };
  // int32 row = 1;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 col = 2;
  void clear_col();
  ::PROTOBUF_NAMESPACE_ID::int32 col() const;
  void set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_col() const;
  void _internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float data = 3;
  void clear_data();
  float data() const;
  void set_data(float value);
  private:
  float _internal_data() const;
  void _internal_set_data(float value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.RecordFloat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_;
  float data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class RecordString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.RecordString) */ {
 public:
  inline RecordString() : RecordString(nullptr) {}
  ~RecordString() override;
  explicit constexpr RecordString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordString(const RecordString& from);
  RecordString(RecordString&& from) noexcept
    : RecordString() {
    *this = ::std::move(from);
  }

  inline RecordString& operator=(const RecordString& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordString& operator=(RecordString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordString& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordString* internal_default_instance() {
    return reinterpret_cast<const RecordString*>(
               &_RecordString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(RecordString& a, RecordString& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordString* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordString* New() const final {
    return new RecordString();
  }

  RecordString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordString& from);
  void MergeFrom(const RecordString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.RecordString";
  }
  protected:
  explicit RecordString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
  };
  // bytes data = 3;
  void clear_data();
  const std::string& data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // int32 row = 1;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 col = 2;
  void clear_col();
  ::PROTOBUF_NAMESPACE_ID::int32 col() const;
  void set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_col() const;
  void _internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.RecordString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class RecordObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.RecordObject) */ {
 public:
  inline RecordObject() : RecordObject(nullptr) {}
  ~RecordObject() override;
  explicit constexpr RecordObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordObject(const RecordObject& from);
  RecordObject(RecordObject&& from) noexcept
    : RecordObject() {
    *this = ::std::move(from);
  }

  inline RecordObject& operator=(const RecordObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordObject& operator=(RecordObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordObject* internal_default_instance() {
    return reinterpret_cast<const RecordObject*>(
               &_RecordObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(RecordObject& a, RecordObject& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordObject* New() const final {
    return new RecordObject();
  }

  RecordObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordObject& from);
  void MergeFrom(const RecordObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.RecordObject";
  }
  protected:
  explicit RecordObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
  };
  // .KWMsg.Ident data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::KWMsg::Ident& data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_data();
  ::KWMsg::Ident* mutable_data();
  void set_allocated_data(::KWMsg::Ident* data);
  private:
  const ::KWMsg::Ident& _internal_data() const;
  ::KWMsg::Ident* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::KWMsg::Ident* data);
  ::KWMsg::Ident* unsafe_arena_release_data();

  // int32 row = 1;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 col = 2;
  void clear_col();
  ::PROTOBUF_NAMESPACE_ID::int32 col() const;
  void set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_col() const;
  void _internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.RecordObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class RecordVector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.RecordVector2) */ {
 public:
  inline RecordVector2() : RecordVector2(nullptr) {}
  ~RecordVector2() override;
  explicit constexpr RecordVector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordVector2(const RecordVector2& from);
  RecordVector2(RecordVector2&& from) noexcept
    : RecordVector2() {
    *this = ::std::move(from);
  }

  inline RecordVector2& operator=(const RecordVector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordVector2& operator=(RecordVector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordVector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordVector2* internal_default_instance() {
    return reinterpret_cast<const RecordVector2*>(
               &_RecordVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(RecordVector2& a, RecordVector2& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordVector2* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordVector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordVector2* New() const final {
    return new RecordVector2();
  }

  RecordVector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordVector2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordVector2& from);
  void MergeFrom(const RecordVector2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordVector2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.RecordVector2";
  }
  protected:
  explicit RecordVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
  };
  // .KWMsg.Vector2 data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::KWMsg::Vector2& data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Vector2* release_data();
  ::KWMsg::Vector2* mutable_data();
  void set_allocated_data(::KWMsg::Vector2* data);
  private:
  const ::KWMsg::Vector2& _internal_data() const;
  ::KWMsg::Vector2* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::KWMsg::Vector2* data);
  ::KWMsg::Vector2* unsafe_arena_release_data();

  // int32 row = 1;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 col = 2;
  void clear_col();
  ::PROTOBUF_NAMESPACE_ID::int32 col() const;
  void set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_col() const;
  void _internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.RecordVector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Vector2* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class RecordVector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.RecordVector3) */ {
 public:
  inline RecordVector3() : RecordVector3(nullptr) {}
  ~RecordVector3() override;
  explicit constexpr RecordVector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordVector3(const RecordVector3& from);
  RecordVector3(RecordVector3&& from) noexcept
    : RecordVector3() {
    *this = ::std::move(from);
  }

  inline RecordVector3& operator=(const RecordVector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordVector3& operator=(RecordVector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordVector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordVector3* internal_default_instance() {
    return reinterpret_cast<const RecordVector3*>(
               &_RecordVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(RecordVector3& a, RecordVector3& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordVector3* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordVector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordVector3* New() const final {
    return new RecordVector3();
  }

  RecordVector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordVector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordVector3& from);
  void MergeFrom(const RecordVector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordVector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.RecordVector3";
  }
  protected:
  explicit RecordVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kRowFieldNumber = 1,
    kColFieldNumber = 2,
  };
  // .KWMsg.Vector3 data = 3;
  bool has_data() const;
  private:
  bool _internal_has_data() const;
  public:
  void clear_data();
  const ::KWMsg::Vector3& data() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Vector3* release_data();
  ::KWMsg::Vector3* mutable_data();
  void set_allocated_data(::KWMsg::Vector3* data);
  private:
  const ::KWMsg::Vector3& _internal_data() const;
  ::KWMsg::Vector3* _internal_mutable_data();
  public:
  void unsafe_arena_set_allocated_data(
      ::KWMsg::Vector3* data);
  ::KWMsg::Vector3* unsafe_arena_release_data();

  // int32 row = 1;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 col = 2;
  void clear_col();
  ::PROTOBUF_NAMESPACE_ID::int32 col() const;
  void set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_col() const;
  void _internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.RecordVector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Vector3* data_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  ::PROTOBUF_NAMESPACE_ID::int32 col_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class RecordAddRowStruct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.RecordAddRowStruct) */ {
 public:
  inline RecordAddRowStruct() : RecordAddRowStruct(nullptr) {}
  ~RecordAddRowStruct() override;
  explicit constexpr RecordAddRowStruct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecordAddRowStruct(const RecordAddRowStruct& from);
  RecordAddRowStruct(RecordAddRowStruct&& from) noexcept
    : RecordAddRowStruct() {
    *this = ::std::move(from);
  }

  inline RecordAddRowStruct& operator=(const RecordAddRowStruct& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecordAddRowStruct& operator=(RecordAddRowStruct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecordAddRowStruct& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecordAddRowStruct* internal_default_instance() {
    return reinterpret_cast<const RecordAddRowStruct*>(
               &_RecordAddRowStruct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(RecordAddRowStruct& a, RecordAddRowStruct& b) {
    a.Swap(&b);
  }
  inline void Swap(RecordAddRowStruct* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecordAddRowStruct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecordAddRowStruct* New() const final {
    return new RecordAddRowStruct();
  }

  RecordAddRowStruct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecordAddRowStruct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecordAddRowStruct& from);
  void MergeFrom(const RecordAddRowStruct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecordAddRowStruct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.RecordAddRowStruct";
  }
  protected:
  explicit RecordAddRowStruct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIntListFieldNumber = 2,
    kRecordFloatListFieldNumber = 3,
    kRecordStringListFieldNumber = 4,
    kRecordObjectListFieldNumber = 5,
    kRecordVector2ListFieldNumber = 6,
    kRecordVector3ListFieldNumber = 7,
    kRowFieldNumber = 1,
  };
  // repeated .KWMsg.RecordInt record_int_list = 2;
  int record_int_list_size() const;
  private:
  int _internal_record_int_list_size() const;
  public:
  void clear_record_int_list();
  ::KWMsg::RecordInt* mutable_record_int_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt >*
      mutable_record_int_list();
  private:
  const ::KWMsg::RecordInt& _internal_record_int_list(int index) const;
  ::KWMsg::RecordInt* _internal_add_record_int_list();
  public:
  const ::KWMsg::RecordInt& record_int_list(int index) const;
  ::KWMsg::RecordInt* add_record_int_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt >&
      record_int_list() const;

  // repeated .KWMsg.RecordFloat record_float_list = 3;
  int record_float_list_size() const;
  private:
  int _internal_record_float_list_size() const;
  public:
  void clear_record_float_list();
  ::KWMsg::RecordFloat* mutable_record_float_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat >*
      mutable_record_float_list();
  private:
  const ::KWMsg::RecordFloat& _internal_record_float_list(int index) const;
  ::KWMsg::RecordFloat* _internal_add_record_float_list();
  public:
  const ::KWMsg::RecordFloat& record_float_list(int index) const;
  ::KWMsg::RecordFloat* add_record_float_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat >&
      record_float_list() const;

  // repeated .KWMsg.RecordString record_string_list = 4;
  int record_string_list_size() const;
  private:
  int _internal_record_string_list_size() const;
  public:
  void clear_record_string_list();
  ::KWMsg::RecordString* mutable_record_string_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString >*
      mutable_record_string_list();
  private:
  const ::KWMsg::RecordString& _internal_record_string_list(int index) const;
  ::KWMsg::RecordString* _internal_add_record_string_list();
  public:
  const ::KWMsg::RecordString& record_string_list(int index) const;
  ::KWMsg::RecordString* add_record_string_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString >&
      record_string_list() const;

  // repeated .KWMsg.RecordObject record_object_list = 5;
  int record_object_list_size() const;
  private:
  int _internal_record_object_list_size() const;
  public:
  void clear_record_object_list();
  ::KWMsg::RecordObject* mutable_record_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject >*
      mutable_record_object_list();
  private:
  const ::KWMsg::RecordObject& _internal_record_object_list(int index) const;
  ::KWMsg::RecordObject* _internal_add_record_object_list();
  public:
  const ::KWMsg::RecordObject& record_object_list(int index) const;
  ::KWMsg::RecordObject* add_record_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject >&
      record_object_list() const;

  // repeated .KWMsg.RecordVector2 record_vector2_list = 6;
  int record_vector2_list_size() const;
  private:
  int _internal_record_vector2_list_size() const;
  public:
  void clear_record_vector2_list();
  ::KWMsg::RecordVector2* mutable_record_vector2_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 >*
      mutable_record_vector2_list();
  private:
  const ::KWMsg::RecordVector2& _internal_record_vector2_list(int index) const;
  ::KWMsg::RecordVector2* _internal_add_record_vector2_list();
  public:
  const ::KWMsg::RecordVector2& record_vector2_list(int index) const;
  ::KWMsg::RecordVector2* add_record_vector2_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 >&
      record_vector2_list() const;

  // repeated .KWMsg.RecordVector3 record_vector3_list = 7;
  int record_vector3_list_size() const;
  private:
  int _internal_record_vector3_list_size() const;
  public:
  void clear_record_vector3_list();
  ::KWMsg::RecordVector3* mutable_record_vector3_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 >*
      mutable_record_vector3_list();
  private:
  const ::KWMsg::RecordVector3& _internal_record_vector3_list(int index) const;
  ::KWMsg::RecordVector3* _internal_add_record_vector3_list();
  public:
  const ::KWMsg::RecordVector3& record_vector3_list(int index) const;
  ::KWMsg::RecordVector3* add_record_vector3_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 >&
      record_vector3_list() const;

  // int32 row = 1;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.RecordAddRowStruct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt > record_int_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat > record_float_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString > record_string_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject > record_object_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 > record_vector2_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 > record_vector3_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectRecordBase) */ {
 public:
  inline ObjectRecordBase() : ObjectRecordBase(nullptr) {}
  ~ObjectRecordBase() override;
  explicit constexpr ObjectRecordBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordBase(const ObjectRecordBase& from);
  ObjectRecordBase(ObjectRecordBase&& from) noexcept
    : ObjectRecordBase() {
    *this = ::std::move(from);
  }

  inline ObjectRecordBase& operator=(const ObjectRecordBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordBase& operator=(ObjectRecordBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordBase* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordBase*>(
               &_ObjectRecordBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ObjectRecordBase& a, ObjectRecordBase& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordBase* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordBase* New() const final {
    return new ObjectRecordBase();
  }

  ObjectRecordBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectRecordBase& from);
  void MergeFrom(const ObjectRecordBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectRecordBase";
  }
  protected:
  explicit ObjectRecordBase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowStructFieldNumber = 2,
    kRecordNameFieldNumber = 1,
  };
  // repeated .KWMsg.RecordAddRowStruct row_struct = 2;
  int row_struct_size() const;
  private:
  int _internal_row_struct_size() const;
  public:
  void clear_row_struct();
  ::KWMsg::RecordAddRowStruct* mutable_row_struct(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordAddRowStruct >*
      mutable_row_struct();
  private:
  const ::KWMsg::RecordAddRowStruct& _internal_row_struct(int index) const;
  ::KWMsg::RecordAddRowStruct* _internal_add_row_struct();
  public:
  const ::KWMsg::RecordAddRowStruct& row_struct(int index) const;
  ::KWMsg::RecordAddRowStruct* add_row_struct();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordAddRowStruct >&
      row_struct() const;

  // bytes record_name = 1;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectRecordBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordAddRowStruct > row_struct_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectPropertyInt) */ {
 public:
  inline ObjectPropertyInt() : ObjectPropertyInt(nullptr) {}
  ~ObjectPropertyInt() override;
  explicit constexpr ObjectPropertyInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyInt(const ObjectPropertyInt& from);
  ObjectPropertyInt(ObjectPropertyInt&& from) noexcept
    : ObjectPropertyInt() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyInt& operator=(const ObjectPropertyInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyInt& operator=(ObjectPropertyInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyInt* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyInt*>(
               &_ObjectPropertyInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ObjectPropertyInt& a, ObjectPropertyInt& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyInt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyInt* New() const final {
    return new ObjectPropertyInt();
  }

  ObjectPropertyInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectPropertyInt& from);
  void MergeFrom(const ObjectPropertyInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectPropertyInt";
  }
  protected:
  explicit ObjectPropertyInt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.PropertyInt property_list = 2;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::KWMsg::PropertyInt* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyInt >*
      mutable_property_list();
  private:
  const ::KWMsg::PropertyInt& _internal_property_list(int index) const;
  ::KWMsg::PropertyInt* _internal_add_property_list();
  public:
  const ::KWMsg::PropertyInt& property_list(int index) const;
  ::KWMsg::PropertyInt* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyInt >&
      property_list() const;

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectPropertyInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyInt > property_list_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyFloat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectPropertyFloat) */ {
 public:
  inline ObjectPropertyFloat() : ObjectPropertyFloat(nullptr) {}
  ~ObjectPropertyFloat() override;
  explicit constexpr ObjectPropertyFloat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyFloat(const ObjectPropertyFloat& from);
  ObjectPropertyFloat(ObjectPropertyFloat&& from) noexcept
    : ObjectPropertyFloat() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyFloat& operator=(const ObjectPropertyFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyFloat& operator=(ObjectPropertyFloat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyFloat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyFloat* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyFloat*>(
               &_ObjectPropertyFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ObjectPropertyFloat& a, ObjectPropertyFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyFloat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyFloat* New() const final {
    return new ObjectPropertyFloat();
  }

  ObjectPropertyFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectPropertyFloat& from);
  void MergeFrom(const ObjectPropertyFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectPropertyFloat";
  }
  protected:
  explicit ObjectPropertyFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.PropertyFloat property_list = 2;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::KWMsg::PropertyFloat* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyFloat >*
      mutable_property_list();
  private:
  const ::KWMsg::PropertyFloat& _internal_property_list(int index) const;
  ::KWMsg::PropertyFloat* _internal_add_property_list();
  public:
  const ::KWMsg::PropertyFloat& property_list(int index) const;
  ::KWMsg::PropertyFloat* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyFloat >&
      property_list() const;

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectPropertyFloat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyFloat > property_list_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectPropertyString) */ {
 public:
  inline ObjectPropertyString() : ObjectPropertyString(nullptr) {}
  ~ObjectPropertyString() override;
  explicit constexpr ObjectPropertyString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyString(const ObjectPropertyString& from);
  ObjectPropertyString(ObjectPropertyString&& from) noexcept
    : ObjectPropertyString() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyString& operator=(const ObjectPropertyString& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyString& operator=(ObjectPropertyString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyString& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyString* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyString*>(
               &_ObjectPropertyString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ObjectPropertyString& a, ObjectPropertyString& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyString* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyString* New() const final {
    return new ObjectPropertyString();
  }

  ObjectPropertyString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectPropertyString& from);
  void MergeFrom(const ObjectPropertyString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectPropertyString";
  }
  protected:
  explicit ObjectPropertyString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.PropertyString property_list = 2;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::KWMsg::PropertyString* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyString >*
      mutable_property_list();
  private:
  const ::KWMsg::PropertyString& _internal_property_list(int index) const;
  ::KWMsg::PropertyString* _internal_add_property_list();
  public:
  const ::KWMsg::PropertyString& property_list(int index) const;
  ::KWMsg::PropertyString* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyString >&
      property_list() const;

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectPropertyString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyString > property_list_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectPropertyObject) */ {
 public:
  inline ObjectPropertyObject() : ObjectPropertyObject(nullptr) {}
  ~ObjectPropertyObject() override;
  explicit constexpr ObjectPropertyObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyObject(const ObjectPropertyObject& from);
  ObjectPropertyObject(ObjectPropertyObject&& from) noexcept
    : ObjectPropertyObject() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyObject& operator=(const ObjectPropertyObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyObject& operator=(ObjectPropertyObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyObject* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyObject*>(
               &_ObjectPropertyObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(ObjectPropertyObject& a, ObjectPropertyObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyObject* New() const final {
    return new ObjectPropertyObject();
  }

  ObjectPropertyObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectPropertyObject& from);
  void MergeFrom(const ObjectPropertyObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectPropertyObject";
  }
  protected:
  explicit ObjectPropertyObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.PropertyObject property_list = 2;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::KWMsg::PropertyObject* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyObject >*
      mutable_property_list();
  private:
  const ::KWMsg::PropertyObject& _internal_property_list(int index) const;
  ::KWMsg::PropertyObject* _internal_add_property_list();
  public:
  const ::KWMsg::PropertyObject& property_list(int index) const;
  ::KWMsg::PropertyObject* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyObject >&
      property_list() const;

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectPropertyObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyObject > property_list_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyVector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectPropertyVector2) */ {
 public:
  inline ObjectPropertyVector2() : ObjectPropertyVector2(nullptr) {}
  ~ObjectPropertyVector2() override;
  explicit constexpr ObjectPropertyVector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyVector2(const ObjectPropertyVector2& from);
  ObjectPropertyVector2(ObjectPropertyVector2&& from) noexcept
    : ObjectPropertyVector2() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyVector2& operator=(const ObjectPropertyVector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyVector2& operator=(ObjectPropertyVector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyVector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyVector2* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyVector2*>(
               &_ObjectPropertyVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ObjectPropertyVector2& a, ObjectPropertyVector2& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyVector2* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyVector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyVector2* New() const final {
    return new ObjectPropertyVector2();
  }

  ObjectPropertyVector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyVector2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectPropertyVector2& from);
  void MergeFrom(const ObjectPropertyVector2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyVector2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectPropertyVector2";
  }
  protected:
  explicit ObjectPropertyVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.PropertyVector2 property_list = 2;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::KWMsg::PropertyVector2* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector2 >*
      mutable_property_list();
  private:
  const ::KWMsg::PropertyVector2& _internal_property_list(int index) const;
  ::KWMsg::PropertyVector2* _internal_add_property_list();
  public:
  const ::KWMsg::PropertyVector2& property_list(int index) const;
  ::KWMsg::PropertyVector2* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector2 >&
      property_list() const;

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectPropertyVector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector2 > property_list_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyVector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectPropertyVector3) */ {
 public:
  inline ObjectPropertyVector3() : ObjectPropertyVector3(nullptr) {}
  ~ObjectPropertyVector3() override;
  explicit constexpr ObjectPropertyVector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyVector3(const ObjectPropertyVector3& from);
  ObjectPropertyVector3(ObjectPropertyVector3&& from) noexcept
    : ObjectPropertyVector3() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyVector3& operator=(const ObjectPropertyVector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyVector3& operator=(ObjectPropertyVector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyVector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyVector3* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyVector3*>(
               &_ObjectPropertyVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ObjectPropertyVector3& a, ObjectPropertyVector3& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyVector3* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyVector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyVector3* New() const final {
    return new ObjectPropertyVector3();
  }

  ObjectPropertyVector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyVector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectPropertyVector3& from);
  void MergeFrom(const ObjectPropertyVector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyVector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectPropertyVector3";
  }
  protected:
  explicit ObjectPropertyVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.PropertyVector3 property_list = 2;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::KWMsg::PropertyVector3* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector3 >*
      mutable_property_list();
  private:
  const ::KWMsg::PropertyVector3& _internal_property_list(int index) const;
  ::KWMsg::PropertyVector3* _internal_add_property_list();
  public:
  const ::KWMsg::PropertyVector3& property_list(int index) const;
  ::KWMsg::PropertyVector3* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector3 >&
      property_list() const;

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectPropertyVector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector3 > property_list_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordInt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectRecordInt) */ {
 public:
  inline ObjectRecordInt() : ObjectRecordInt(nullptr) {}
  ~ObjectRecordInt() override;
  explicit constexpr ObjectRecordInt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordInt(const ObjectRecordInt& from);
  ObjectRecordInt(ObjectRecordInt&& from) noexcept
    : ObjectRecordInt() {
    *this = ::std::move(from);
  }

  inline ObjectRecordInt& operator=(const ObjectRecordInt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordInt& operator=(ObjectRecordInt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordInt& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordInt* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordInt*>(
               &_ObjectRecordInt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(ObjectRecordInt& a, ObjectRecordInt& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordInt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordInt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordInt* New() const final {
    return new ObjectRecordInt();
  }

  ObjectRecordInt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordInt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectRecordInt& from);
  void MergeFrom(const ObjectRecordInt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordInt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectRecordInt";
  }
  protected:
  explicit ObjectRecordInt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.RecordInt property_list = 3;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::KWMsg::RecordInt* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt >*
      mutable_property_list();
  private:
  const ::KWMsg::RecordInt& _internal_property_list(int index) const;
  ::KWMsg::RecordInt* _internal_add_property_list();
  public:
  const ::KWMsg::RecordInt& property_list(int index) const;
  ::KWMsg::RecordInt* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectRecordInt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt > property_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordFloat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectRecordFloat) */ {
 public:
  inline ObjectRecordFloat() : ObjectRecordFloat(nullptr) {}
  ~ObjectRecordFloat() override;
  explicit constexpr ObjectRecordFloat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordFloat(const ObjectRecordFloat& from);
  ObjectRecordFloat(ObjectRecordFloat&& from) noexcept
    : ObjectRecordFloat() {
    *this = ::std::move(from);
  }

  inline ObjectRecordFloat& operator=(const ObjectRecordFloat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordFloat& operator=(ObjectRecordFloat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordFloat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordFloat* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordFloat*>(
               &_ObjectRecordFloat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ObjectRecordFloat& a, ObjectRecordFloat& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordFloat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordFloat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordFloat* New() const final {
    return new ObjectRecordFloat();
  }

  ObjectRecordFloat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordFloat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectRecordFloat& from);
  void MergeFrom(const ObjectRecordFloat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordFloat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectRecordFloat";
  }
  protected:
  explicit ObjectRecordFloat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.RecordFloat property_list = 3;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::KWMsg::RecordFloat* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat >*
      mutable_property_list();
  private:
  const ::KWMsg::RecordFloat& _internal_property_list(int index) const;
  ::KWMsg::RecordFloat* _internal_add_property_list();
  public:
  const ::KWMsg::RecordFloat& property_list(int index) const;
  ::KWMsg::RecordFloat* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectRecordFloat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat > property_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordString final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectRecordString) */ {
 public:
  inline ObjectRecordString() : ObjectRecordString(nullptr) {}
  ~ObjectRecordString() override;
  explicit constexpr ObjectRecordString(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordString(const ObjectRecordString& from);
  ObjectRecordString(ObjectRecordString&& from) noexcept
    : ObjectRecordString() {
    *this = ::std::move(from);
  }

  inline ObjectRecordString& operator=(const ObjectRecordString& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordString& operator=(ObjectRecordString&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordString& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordString* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordString*>(
               &_ObjectRecordString_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(ObjectRecordString& a, ObjectRecordString& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordString* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordString* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordString* New() const final {
    return new ObjectRecordString();
  }

  ObjectRecordString* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordString>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectRecordString& from);
  void MergeFrom(const ObjectRecordString& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordString* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectRecordString";
  }
  protected:
  explicit ObjectRecordString(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.RecordString property_list = 3;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::KWMsg::RecordString* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString >*
      mutable_property_list();
  private:
  const ::KWMsg::RecordString& _internal_property_list(int index) const;
  ::KWMsg::RecordString* _internal_add_property_list();
  public:
  const ::KWMsg::RecordString& property_list(int index) const;
  ::KWMsg::RecordString* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectRecordString)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString > property_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectRecordObject) */ {
 public:
  inline ObjectRecordObject() : ObjectRecordObject(nullptr) {}
  ~ObjectRecordObject() override;
  explicit constexpr ObjectRecordObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordObject(const ObjectRecordObject& from);
  ObjectRecordObject(ObjectRecordObject&& from) noexcept
    : ObjectRecordObject() {
    *this = ::std::move(from);
  }

  inline ObjectRecordObject& operator=(const ObjectRecordObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordObject& operator=(ObjectRecordObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordObject* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordObject*>(
               &_ObjectRecordObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ObjectRecordObject& a, ObjectRecordObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordObject* New() const final {
    return new ObjectRecordObject();
  }

  ObjectRecordObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectRecordObject& from);
  void MergeFrom(const ObjectRecordObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectRecordObject";
  }
  protected:
  explicit ObjectRecordObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.RecordObject property_list = 3;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::KWMsg::RecordObject* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject >*
      mutable_property_list();
  private:
  const ::KWMsg::RecordObject& _internal_property_list(int index) const;
  ::KWMsg::RecordObject* _internal_add_property_list();
  public:
  const ::KWMsg::RecordObject& property_list(int index) const;
  ::KWMsg::RecordObject* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectRecordObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject > property_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordVector2 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectRecordVector2) */ {
 public:
  inline ObjectRecordVector2() : ObjectRecordVector2(nullptr) {}
  ~ObjectRecordVector2() override;
  explicit constexpr ObjectRecordVector2(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordVector2(const ObjectRecordVector2& from);
  ObjectRecordVector2(ObjectRecordVector2&& from) noexcept
    : ObjectRecordVector2() {
    *this = ::std::move(from);
  }

  inline ObjectRecordVector2& operator=(const ObjectRecordVector2& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordVector2& operator=(ObjectRecordVector2&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordVector2& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordVector2* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordVector2*>(
               &_ObjectRecordVector2_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(ObjectRecordVector2& a, ObjectRecordVector2& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordVector2* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordVector2* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordVector2* New() const final {
    return new ObjectRecordVector2();
  }

  ObjectRecordVector2* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordVector2>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectRecordVector2& from);
  void MergeFrom(const ObjectRecordVector2& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordVector2* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectRecordVector2";
  }
  protected:
  explicit ObjectRecordVector2(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.RecordVector2 property_list = 3;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::KWMsg::RecordVector2* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 >*
      mutable_property_list();
  private:
  const ::KWMsg::RecordVector2& _internal_property_list(int index) const;
  ::KWMsg::RecordVector2* _internal_add_property_list();
  public:
  const ::KWMsg::RecordVector2& property_list(int index) const;
  ::KWMsg::RecordVector2* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectRecordVector2)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 > property_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordVector3 final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectRecordVector3) */ {
 public:
  inline ObjectRecordVector3() : ObjectRecordVector3(nullptr) {}
  ~ObjectRecordVector3() override;
  explicit constexpr ObjectRecordVector3(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordVector3(const ObjectRecordVector3& from);
  ObjectRecordVector3(ObjectRecordVector3&& from) noexcept
    : ObjectRecordVector3() {
    *this = ::std::move(from);
  }

  inline ObjectRecordVector3& operator=(const ObjectRecordVector3& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordVector3& operator=(ObjectRecordVector3&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordVector3& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordVector3* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordVector3*>(
               &_ObjectRecordVector3_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ObjectRecordVector3& a, ObjectRecordVector3& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordVector3* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordVector3* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordVector3* New() const final {
    return new ObjectRecordVector3();
  }

  ObjectRecordVector3* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordVector3>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectRecordVector3& from);
  void MergeFrom(const ObjectRecordVector3& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordVector3* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectRecordVector3";
  }
  protected:
  explicit ObjectRecordVector3(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyListFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.RecordVector3 property_list = 3;
  int property_list_size() const;
  private:
  int _internal_property_list_size() const;
  public:
  void clear_property_list();
  ::KWMsg::RecordVector3* mutable_property_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 >*
      mutable_property_list();
  private:
  const ::KWMsg::RecordVector3& _internal_property_list(int index) const;
  ::KWMsg::RecordVector3* _internal_add_property_list();
  public:
  const ::KWMsg::RecordVector3& property_list(int index) const;
  ::KWMsg::RecordVector3* add_property_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 >&
      property_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectRecordVector3)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 > property_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordSwap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectRecordSwap) */ {
 public:
  inline ObjectRecordSwap() : ObjectRecordSwap(nullptr) {}
  ~ObjectRecordSwap() override;
  explicit constexpr ObjectRecordSwap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordSwap(const ObjectRecordSwap& from);
  ObjectRecordSwap(ObjectRecordSwap&& from) noexcept
    : ObjectRecordSwap() {
    *this = ::std::move(from);
  }

  inline ObjectRecordSwap& operator=(const ObjectRecordSwap& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordSwap& operator=(ObjectRecordSwap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordSwap& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordSwap* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordSwap*>(
               &_ObjectRecordSwap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(ObjectRecordSwap& a, ObjectRecordSwap& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordSwap* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordSwap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordSwap* New() const final {
    return new ObjectRecordSwap();
  }

  ObjectRecordSwap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordSwap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectRecordSwap& from);
  void MergeFrom(const ObjectRecordSwap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordSwap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectRecordSwap";
  }
  protected:
  explicit ObjectRecordSwap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kRowOriginFieldNumber = 3,
    kRowTargetFieldNumber = 4,
  };
  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 row_origin = 3;
  void clear_row_origin();
  ::PROTOBUF_NAMESPACE_ID::int32 row_origin() const;
  void set_row_origin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row_origin() const;
  void _internal_set_row_origin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 row_target = 4;
  void clear_row_target();
  ::PROTOBUF_NAMESPACE_ID::int32 row_target() const;
  void set_row_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row_target() const;
  void _internal_set_row_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectRecordSwap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_origin_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordAddRow final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectRecordAddRow) */ {
 public:
  inline ObjectRecordAddRow() : ObjectRecordAddRow(nullptr) {}
  ~ObjectRecordAddRow() override;
  explicit constexpr ObjectRecordAddRow(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordAddRow(const ObjectRecordAddRow& from);
  ObjectRecordAddRow(ObjectRecordAddRow&& from) noexcept
    : ObjectRecordAddRow() {
    *this = ::std::move(from);
  }

  inline ObjectRecordAddRow& operator=(const ObjectRecordAddRow& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordAddRow& operator=(ObjectRecordAddRow&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordAddRow& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordAddRow* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordAddRow*>(
               &_ObjectRecordAddRow_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ObjectRecordAddRow& a, ObjectRecordAddRow& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordAddRow* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordAddRow* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordAddRow* New() const final {
    return new ObjectRecordAddRow();
  }

  ObjectRecordAddRow* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordAddRow>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectRecordAddRow& from);
  void MergeFrom(const ObjectRecordAddRow& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordAddRow* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectRecordAddRow";
  }
  protected:
  explicit ObjectRecordAddRow(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRowDataFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.RecordAddRowStruct row_data = 3;
  int row_data_size() const;
  private:
  int _internal_row_data_size() const;
  public:
  void clear_row_data();
  ::KWMsg::RecordAddRowStruct* mutable_row_data(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordAddRowStruct >*
      mutable_row_data();
  private:
  const ::KWMsg::RecordAddRowStruct& _internal_row_data(int index) const;
  ::KWMsg::RecordAddRowStruct* _internal_add_row_data();
  public:
  const ::KWMsg::RecordAddRowStruct& row_data(int index) const;
  ::KWMsg::RecordAddRowStruct* add_row_data();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordAddRowStruct >&
      row_data() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectRecordAddRow)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordAddRowStruct > row_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordRemove final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectRecordRemove) */ {
 public:
  inline ObjectRecordRemove() : ObjectRecordRemove(nullptr) {}
  ~ObjectRecordRemove() override;
  explicit constexpr ObjectRecordRemove(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordRemove(const ObjectRecordRemove& from);
  ObjectRecordRemove(ObjectRecordRemove&& from) noexcept
    : ObjectRecordRemove() {
    *this = ::std::move(from);
  }

  inline ObjectRecordRemove& operator=(const ObjectRecordRemove& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordRemove& operator=(ObjectRecordRemove&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordRemove& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordRemove* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordRemove*>(
               &_ObjectRecordRemove_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(ObjectRecordRemove& a, ObjectRecordRemove& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordRemove* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordRemove* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordRemove* New() const final {
    return new ObjectRecordRemove();
  }

  ObjectRecordRemove* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordRemove>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectRecordRemove& from);
  void MergeFrom(const ObjectRecordRemove& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordRemove* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectRecordRemove";
  }
  protected:
  explicit ObjectRecordRemove(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRemoveRowFieldNumber = 3,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated int32 remove_row = 3;
  int remove_row_size() const;
  private:
  int _internal_remove_row_size() const;
  public:
  void clear_remove_row();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remove_row(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_remove_row() const;
  void _internal_add_remove_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_remove_row();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 remove_row(int index) const;
  void set_remove_row(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_remove_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      remove_row() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_remove_row();

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectRecordRemove)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > remove_row_;
  mutable std::atomic<int> _remove_row_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectPropertyList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectPropertyList) */ {
 public:
  inline ObjectPropertyList() : ObjectPropertyList(nullptr) {}
  ~ObjectPropertyList() override;
  explicit constexpr ObjectPropertyList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectPropertyList(const ObjectPropertyList& from);
  ObjectPropertyList(ObjectPropertyList&& from) noexcept
    : ObjectPropertyList() {
    *this = ::std::move(from);
  }

  inline ObjectPropertyList& operator=(const ObjectPropertyList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectPropertyList& operator=(ObjectPropertyList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectPropertyList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectPropertyList* internal_default_instance() {
    return reinterpret_cast<const ObjectPropertyList*>(
               &_ObjectPropertyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(ObjectPropertyList& a, ObjectPropertyList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectPropertyList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectPropertyList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectPropertyList* New() const final {
    return new ObjectPropertyList();
  }

  ObjectPropertyList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectPropertyList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectPropertyList& from);
  void MergeFrom(const ObjectPropertyList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectPropertyList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectPropertyList";
  }
  protected:
  explicit ObjectPropertyList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPropertyIntListFieldNumber = 2,
    kPropertyFloatListFieldNumber = 3,
    kPropertyStringListFieldNumber = 4,
    kPropertyObjectListFieldNumber = 5,
    kPropertyVector2ListFieldNumber = 6,
    kPropertyVector3ListFieldNumber = 7,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.PropertyInt property_int_list = 2;
  int property_int_list_size() const;
  private:
  int _internal_property_int_list_size() const;
  public:
  void clear_property_int_list();
  ::KWMsg::PropertyInt* mutable_property_int_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyInt >*
      mutable_property_int_list();
  private:
  const ::KWMsg::PropertyInt& _internal_property_int_list(int index) const;
  ::KWMsg::PropertyInt* _internal_add_property_int_list();
  public:
  const ::KWMsg::PropertyInt& property_int_list(int index) const;
  ::KWMsg::PropertyInt* add_property_int_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyInt >&
      property_int_list() const;

  // repeated .KWMsg.PropertyFloat property_float_list = 3;
  int property_float_list_size() const;
  private:
  int _internal_property_float_list_size() const;
  public:
  void clear_property_float_list();
  ::KWMsg::PropertyFloat* mutable_property_float_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyFloat >*
      mutable_property_float_list();
  private:
  const ::KWMsg::PropertyFloat& _internal_property_float_list(int index) const;
  ::KWMsg::PropertyFloat* _internal_add_property_float_list();
  public:
  const ::KWMsg::PropertyFloat& property_float_list(int index) const;
  ::KWMsg::PropertyFloat* add_property_float_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyFloat >&
      property_float_list() const;

  // repeated .KWMsg.PropertyString property_string_list = 4;
  int property_string_list_size() const;
  private:
  int _internal_property_string_list_size() const;
  public:
  void clear_property_string_list();
  ::KWMsg::PropertyString* mutable_property_string_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyString >*
      mutable_property_string_list();
  private:
  const ::KWMsg::PropertyString& _internal_property_string_list(int index) const;
  ::KWMsg::PropertyString* _internal_add_property_string_list();
  public:
  const ::KWMsg::PropertyString& property_string_list(int index) const;
  ::KWMsg::PropertyString* add_property_string_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyString >&
      property_string_list() const;

  // repeated .KWMsg.PropertyObject property_object_list = 5;
  int property_object_list_size() const;
  private:
  int _internal_property_object_list_size() const;
  public:
  void clear_property_object_list();
  ::KWMsg::PropertyObject* mutable_property_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyObject >*
      mutable_property_object_list();
  private:
  const ::KWMsg::PropertyObject& _internal_property_object_list(int index) const;
  ::KWMsg::PropertyObject* _internal_add_property_object_list();
  public:
  const ::KWMsg::PropertyObject& property_object_list(int index) const;
  ::KWMsg::PropertyObject* add_property_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyObject >&
      property_object_list() const;

  // repeated .KWMsg.PropertyVector2 property_vector2_list = 6;
  int property_vector2_list_size() const;
  private:
  int _internal_property_vector2_list_size() const;
  public:
  void clear_property_vector2_list();
  ::KWMsg::PropertyVector2* mutable_property_vector2_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector2 >*
      mutable_property_vector2_list();
  private:
  const ::KWMsg::PropertyVector2& _internal_property_vector2_list(int index) const;
  ::KWMsg::PropertyVector2* _internal_add_property_vector2_list();
  public:
  const ::KWMsg::PropertyVector2& property_vector2_list(int index) const;
  ::KWMsg::PropertyVector2* add_property_vector2_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector2 >&
      property_vector2_list() const;

  // repeated .KWMsg.PropertyVector3 property_vector3_list = 7;
  int property_vector3_list_size() const;
  private:
  int _internal_property_vector3_list_size() const;
  public:
  void clear_property_vector3_list();
  ::KWMsg::PropertyVector3* mutable_property_vector3_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector3 >*
      mutable_property_vector3_list();
  private:
  const ::KWMsg::PropertyVector3& _internal_property_vector3_list(int index) const;
  ::KWMsg::PropertyVector3* _internal_add_property_vector3_list();
  public:
  const ::KWMsg::PropertyVector3& property_vector3_list(int index) const;
  ::KWMsg::PropertyVector3* add_property_vector3_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector3 >&
      property_vector3_list() const;

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectPropertyList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyInt > property_int_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyFloat > property_float_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyString > property_string_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyObject > property_object_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector2 > property_vector2_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector3 > property_vector3_list_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class MultiObjectPropertyList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.MultiObjectPropertyList) */ {
 public:
  inline MultiObjectPropertyList() : MultiObjectPropertyList(nullptr) {}
  ~MultiObjectPropertyList() override;
  explicit constexpr MultiObjectPropertyList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiObjectPropertyList(const MultiObjectPropertyList& from);
  MultiObjectPropertyList(MultiObjectPropertyList&& from) noexcept
    : MultiObjectPropertyList() {
    *this = ::std::move(from);
  }

  inline MultiObjectPropertyList& operator=(const MultiObjectPropertyList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiObjectPropertyList& operator=(MultiObjectPropertyList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiObjectPropertyList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiObjectPropertyList* internal_default_instance() {
    return reinterpret_cast<const MultiObjectPropertyList*>(
               &_MultiObjectPropertyList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(MultiObjectPropertyList& a, MultiObjectPropertyList& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiObjectPropertyList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiObjectPropertyList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiObjectPropertyList* New() const final {
    return new MultiObjectPropertyList();
  }

  MultiObjectPropertyList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiObjectPropertyList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiObjectPropertyList& from);
  void MergeFrom(const MultiObjectPropertyList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiObjectPropertyList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.MultiObjectPropertyList";
  }
  protected:
  explicit MultiObjectPropertyList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiPlayerPropertyFieldNumber = 1,
  };
  // repeated .KWMsg.ObjectPropertyList multi_player_property = 1;
  int multi_player_property_size() const;
  private:
  int _internal_multi_player_property_size() const;
  public:
  void clear_multi_player_property();
  ::KWMsg::ObjectPropertyList* mutable_multi_player_property(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectPropertyList >*
      mutable_multi_player_property();
  private:
  const ::KWMsg::ObjectPropertyList& _internal_multi_player_property(int index) const;
  ::KWMsg::ObjectPropertyList* _internal_add_multi_player_property();
  public:
  const ::KWMsg::ObjectPropertyList& multi_player_property(int index) const;
  ::KWMsg::ObjectPropertyList* add_multi_player_property();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectPropertyList >&
      multi_player_property() const;

  // @@protoc_insertion_point(class_scope:KWMsg.MultiObjectPropertyList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectPropertyList > multi_player_property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectRecordList) */ {
 public:
  inline ObjectRecordList() : ObjectRecordList(nullptr) {}
  ~ObjectRecordList() override;
  explicit constexpr ObjectRecordList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordList(const ObjectRecordList& from);
  ObjectRecordList(ObjectRecordList&& from) noexcept
    : ObjectRecordList() {
    *this = ::std::move(from);
  }

  inline ObjectRecordList& operator=(const ObjectRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordList& operator=(ObjectRecordList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordList* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordList*>(
               &_ObjectRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(ObjectRecordList& a, ObjectRecordList& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordList* New() const final {
    return new ObjectRecordList();
  }

  ObjectRecordList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectRecordList& from);
  void MergeFrom(const ObjectRecordList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectRecordList";
  }
  protected:
  explicit ObjectRecordList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.ObjectRecordBase record_list = 2;
  int record_list_size() const;
  private:
  int _internal_record_list_size() const;
  public:
  void clear_record_list();
  ::KWMsg::ObjectRecordBase* mutable_record_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectRecordBase >*
      mutable_record_list();
  private:
  const ::KWMsg::ObjectRecordBase& _internal_record_list(int index) const;
  ::KWMsg::ObjectRecordBase* _internal_add_record_list();
  public:
  const ::KWMsg::ObjectRecordBase& record_list(int index) const;
  ::KWMsg::ObjectRecordBase* add_record_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectRecordBase >&
      record_list() const;

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectRecordList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectRecordBase > record_list_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class MultiObjectRecordList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.MultiObjectRecordList) */ {
 public:
  inline MultiObjectRecordList() : MultiObjectRecordList(nullptr) {}
  ~MultiObjectRecordList() override;
  explicit constexpr MultiObjectRecordList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MultiObjectRecordList(const MultiObjectRecordList& from);
  MultiObjectRecordList(MultiObjectRecordList&& from) noexcept
    : MultiObjectRecordList() {
    *this = ::std::move(from);
  }

  inline MultiObjectRecordList& operator=(const MultiObjectRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  inline MultiObjectRecordList& operator=(MultiObjectRecordList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MultiObjectRecordList& default_instance() {
    return *internal_default_instance();
  }
  static inline const MultiObjectRecordList* internal_default_instance() {
    return reinterpret_cast<const MultiObjectRecordList*>(
               &_MultiObjectRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(MultiObjectRecordList& a, MultiObjectRecordList& b) {
    a.Swap(&b);
  }
  inline void Swap(MultiObjectRecordList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MultiObjectRecordList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MultiObjectRecordList* New() const final {
    return new MultiObjectRecordList();
  }

  MultiObjectRecordList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MultiObjectRecordList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MultiObjectRecordList& from);
  void MergeFrom(const MultiObjectRecordList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MultiObjectRecordList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.MultiObjectRecordList";
  }
  protected:
  explicit MultiObjectRecordList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMultiPlayerRecordFieldNumber = 1,
  };
  // repeated .KWMsg.ObjectRecordList multi_player_record = 1;
  int multi_player_record_size() const;
  private:
  int _internal_multi_player_record_size() const;
  public:
  void clear_multi_player_record();
  ::KWMsg::ObjectRecordList* mutable_multi_player_record(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectRecordList >*
      mutable_multi_player_record();
  private:
  const ::KWMsg::ObjectRecordList& _internal_multi_player_record(int index) const;
  ::KWMsg::ObjectRecordList* _internal_add_multi_player_record();
  public:
  const ::KWMsg::ObjectRecordList& multi_player_record(int index) const;
  ::KWMsg::ObjectRecordList* add_multi_player_record();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectRecordList >&
      multi_player_record() const;

  // @@protoc_insertion_point(class_scope:KWMsg.MultiObjectRecordList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectRecordList > multi_player_record_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class ObjectRecordPagination final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ObjectRecordPagination) */ {
 public:
  inline ObjectRecordPagination() : ObjectRecordPagination(nullptr) {}
  ~ObjectRecordPagination() override;
  explicit constexpr ObjectRecordPagination(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ObjectRecordPagination(const ObjectRecordPagination& from);
  ObjectRecordPagination(ObjectRecordPagination&& from) noexcept
    : ObjectRecordPagination() {
    *this = ::std::move(from);
  }

  inline ObjectRecordPagination& operator=(const ObjectRecordPagination& from) {
    CopyFrom(from);
    return *this;
  }
  inline ObjectRecordPagination& operator=(ObjectRecordPagination&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ObjectRecordPagination& default_instance() {
    return *internal_default_instance();
  }
  static inline const ObjectRecordPagination* internal_default_instance() {
    return reinterpret_cast<const ObjectRecordPagination*>(
               &_ObjectRecordPagination_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(ObjectRecordPagination& a, ObjectRecordPagination& b) {
    a.Swap(&b);
  }
  inline void Swap(ObjectRecordPagination* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ObjectRecordPagination* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ObjectRecordPagination* New() const final {
    return new ObjectRecordPagination();
  }

  ObjectRecordPagination* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ObjectRecordPagination>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ObjectRecordPagination& from);
  void MergeFrom(const ObjectRecordPagination& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ObjectRecordPagination* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ObjectRecordPagination";
  }
  protected:
  explicit ObjectRecordPagination(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ObjectRecordPagination_ERetRecordType ERetRecordType;
  static constexpr ERetRecordType ERRT_OPEN_SUCC =
    ObjectRecordPagination_ERetRecordType_ERRT_OPEN_SUCC;
  static constexpr ERetRecordType ERRT_OPEN_ERR_REQTYPE =
    ObjectRecordPagination_ERetRecordType_ERRT_OPEN_ERR_REQTYPE;
  static constexpr ERetRecordType ERRT_OPEN_ERR_RECORDNAME =
    ObjectRecordPagination_ERetRecordType_ERRT_OPEN_ERR_RECORDNAME;
  static constexpr ERetRecordType ERRT_OPEN_ERR_CURSOR =
    ObjectRecordPagination_ERetRecordType_ERRT_OPEN_ERR_CURSOR;
  static constexpr ERetRecordType ERRT_OPEN_ERR_COUNT =
    ObjectRecordPagination_ERetRecordType_ERRT_OPEN_ERR_COUNT;
  static constexpr ERetRecordType ERRT_END =
    ObjectRecordPagination_ERetRecordType_ERRT_END;
  static inline bool ERetRecordType_IsValid(int value) {
    return ObjectRecordPagination_ERetRecordType_IsValid(value);
  }
  static constexpr ERetRecordType ERetRecordType_MIN =
    ObjectRecordPagination_ERetRecordType_ERetRecordType_MIN;
  static constexpr ERetRecordType ERetRecordType_MAX =
    ObjectRecordPagination_ERetRecordType_ERetRecordType_MAX;
  static constexpr int ERetRecordType_ARRAYSIZE =
    ObjectRecordPagination_ERetRecordType_ERetRecordType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  ERetRecordType_descriptor() {
    return ObjectRecordPagination_ERetRecordType_descriptor();
  }
  template<typename T>
  static inline const std::string& ERetRecordType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, ERetRecordType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function ERetRecordType_Name.");
    return ObjectRecordPagination_ERetRecordType_Name(enum_t_value);
  }
  static inline bool ERetRecordType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      ERetRecordType* value) {
    return ObjectRecordPagination_ERetRecordType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kRecordListFieldNumber = 7,
    kRetTypeFieldNumber = 2,
    kCursorPrevFieldNumber = 3,
    kCursorNextFieldNumber = 4,
    kIsEndFieldNumber = 5,
    kCountFieldNumber = 6,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.ObjectRecordBase record_list = 7;
  bool has_record_list() const;
  private:
  bool _internal_has_record_list() const;
  public:
  void clear_record_list();
  const ::KWMsg::ObjectRecordBase& record_list() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::ObjectRecordBase* release_record_list();
  ::KWMsg::ObjectRecordBase* mutable_record_list();
  void set_allocated_record_list(::KWMsg::ObjectRecordBase* record_list);
  private:
  const ::KWMsg::ObjectRecordBase& _internal_record_list() const;
  ::KWMsg::ObjectRecordBase* _internal_mutable_record_list();
  public:
  void unsafe_arena_set_allocated_record_list(
      ::KWMsg::ObjectRecordBase* record_list);
  ::KWMsg::ObjectRecordBase* unsafe_arena_release_record_list();

  // .KWMsg.ObjectRecordPagination.ERetRecordType ret_type = 2;
  void clear_ret_type();
  ::KWMsg::ObjectRecordPagination_ERetRecordType ret_type() const;
  void set_ret_type(::KWMsg::ObjectRecordPagination_ERetRecordType value);
  private:
  ::KWMsg::ObjectRecordPagination_ERetRecordType _internal_ret_type() const;
  void _internal_set_ret_type(::KWMsg::ObjectRecordPagination_ERetRecordType value);
  public:

  // int32 cursor_prev = 3;
  void clear_cursor_prev();
  ::PROTOBUF_NAMESPACE_ID::int32 cursor_prev() const;
  void set_cursor_prev(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cursor_prev() const;
  void _internal_set_cursor_prev(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 cursor_next = 4;
  void clear_cursor_next();
  ::PROTOBUF_NAMESPACE_ID::int32 cursor_next() const;
  void set_cursor_next(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cursor_next() const;
  void _internal_set_cursor_next(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool is_end = 5;
  void clear_is_end();
  bool is_end() const;
  void set_is_end(bool value);
  private:
  bool _internal_is_end() const;
  void _internal_set_is_end(bool value);
  public:

  // int32 count = 6;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ObjectRecordPagination)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::ObjectRecordBase* record_list_;
  int ret_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 cursor_prev_;
  ::PROTOBUF_NAMESPACE_ID::int32 cursor_next_;
  bool is_end_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class DeviceInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.DeviceInfo) */ {
 public:
  inline DeviceInfo() : DeviceInfo(nullptr) {}
  ~DeviceInfo() override;
  explicit constexpr DeviceInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DeviceInfo(const DeviceInfo& from);
  DeviceInfo(DeviceInfo&& from) noexcept
    : DeviceInfo() {
    *this = ::std::move(from);
  }

  inline DeviceInfo& operator=(const DeviceInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceInfo& operator=(DeviceInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DeviceInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DeviceInfo* internal_default_instance() {
    return reinterpret_cast<const DeviceInfo*>(
               &_DeviceInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(DeviceInfo& a, DeviceInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceInfo* New() const final {
    return new DeviceInfo();
  }

  DeviceInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceInfo& from);
  void MergeFrom(const DeviceInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.DeviceInfo";
  }
  protected:
  explicit DeviceInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlatformFieldNumber = 2,
    kMediaIdFieldNumber = 3,
    kMacFieldNumber = 4,
    kIpFieldNumber = 5,
    kDeviceModelFieldNumber = 6,
    kDeviceSysFieldNumber = 7,
    kIdfaFieldNumber = 9,
    kDeviceIdFieldNumber = 10,
    kOsFieldNumber = 1,
    kDeviceRamFieldNumber = 8,
  };
  // bytes platform = 2;
  void clear_platform();
  const std::string& platform() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_platform(ArgT0&& arg0, ArgT... args);
  std::string* mutable_platform();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_platform();
  void set_allocated_platform(std::string* platform);
  private:
  const std::string& _internal_platform() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_platform(const std::string& value);
  std::string* _internal_mutable_platform();
  public:

  // bytes media_id = 3;
  void clear_media_id();
  const std::string& media_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_media_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_media_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_media_id();
  void set_allocated_media_id(std::string* media_id);
  private:
  const std::string& _internal_media_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_media_id(const std::string& value);
  std::string* _internal_mutable_media_id();
  public:

  // bytes mac = 4;
  void clear_mac();
  const std::string& mac() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mac(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mac();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mac();
  void set_allocated_mac(std::string* mac);
  private:
  const std::string& _internal_mac() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mac(const std::string& value);
  std::string* _internal_mutable_mac();
  public:

  // bytes ip = 5;
  void clear_ip();
  const std::string& ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ip();
  void set_allocated_ip(std::string* ip);
  private:
  const std::string& _internal_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ip(const std::string& value);
  std::string* _internal_mutable_ip();
  public:

  // bytes device_model = 6;
  void clear_device_model();
  const std::string& device_model() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_model(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_model();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_device_model();
  void set_allocated_device_model(std::string* device_model);
  private:
  const std::string& _internal_device_model() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_model(const std::string& value);
  std::string* _internal_mutable_device_model();
  public:

  // bytes device_sys = 7;
  void clear_device_sys();
  const std::string& device_sys() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_sys(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_sys();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_device_sys();
  void set_allocated_device_sys(std::string* device_sys);
  private:
  const std::string& _internal_device_sys() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_sys(const std::string& value);
  std::string* _internal_mutable_device_sys();
  public:

  // bytes idfa = 9;
  void clear_idfa();
  const std::string& idfa() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_idfa(ArgT0&& arg0, ArgT... args);
  std::string* mutable_idfa();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_idfa();
  void set_allocated_idfa(std::string* idfa);
  private:
  const std::string& _internal_idfa() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_idfa(const std::string& value);
  std::string* _internal_mutable_idfa();
  public:

  // bytes device_id = 10;
  void clear_device_id();
  const std::string& device_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_device_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_device_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // int32 os = 1;
  void clear_os();
  ::PROTOBUF_NAMESPACE_ID::int32 os() const;
  void set_os(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_os() const;
  void _internal_set_os(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 device_ram = 8;
  void clear_device_ram();
  ::PROTOBUF_NAMESPACE_ID::int32 device_ram() const;
  void set_device_ram(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_device_ram() const;
  void _internal_set_device_ram(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.DeviceInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr platform_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr media_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mac_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_model_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_sys_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr idfa_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 os_;
  ::PROTOBUF_NAMESPACE_ID::int32 device_ram_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// -------------------------------------------------------------------

class MsgBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.MsgBase) */ {
 public:
  inline MsgBase() : MsgBase(nullptr) {}
  ~MsgBase() override;
  explicit constexpr MsgBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MsgBase(const MsgBase& from);
  MsgBase(MsgBase&& from) noexcept
    : MsgBase() {
    *this = ::std::move(from);
  }

  inline MsgBase& operator=(const MsgBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline MsgBase& operator=(MsgBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MsgBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const MsgBase* internal_default_instance() {
    return reinterpret_cast<const MsgBase*>(
               &_MsgBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(MsgBase& a, MsgBase& b) {
    a.Swap(&b);
  }
  inline void Swap(MsgBase* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MsgBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MsgBase* New() const final {
    return new MsgBase();
  }

  MsgBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MsgBase>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MsgBase& from);
  void MergeFrom(const MsgBase& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MsgBase* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.MsgBase";
  }
  protected:
  explicit MsgBase(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerClientListFieldNumber = 3,
    kMsgDataFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kHashIdentFieldNumber = 4,
  };
  // repeated .KWMsg.Ident player_client_list = 3;
  int player_client_list_size() const;
  private:
  int _internal_player_client_list_size() const;
  public:
  void clear_player_client_list();
  ::KWMsg::Ident* mutable_player_client_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
      mutable_player_client_list();
  private:
  const ::KWMsg::Ident& _internal_player_client_list(int index) const;
  ::KWMsg::Ident* _internal_add_player_client_list();
  public:
  const ::KWMsg::Ident& player_client_list(int index) const;
  ::KWMsg::Ident* add_player_client_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
      player_client_list() const;

  // bytes msg_data = 2;
  void clear_msg_data();
  const std::string& msg_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msg_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msg_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msg_data();
  void set_allocated_msg_data(std::string* msg_data);
  private:
  const std::string& _internal_msg_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msg_data(const std::string& value);
  std::string* _internal_mutable_msg_data();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident hash_ident = 4;
  bool has_hash_ident() const;
  private:
  bool _internal_has_hash_ident() const;
  public:
  void clear_hash_ident();
  const ::KWMsg::Ident& hash_ident() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_hash_ident();
  ::KWMsg::Ident* mutable_hash_ident();
  void set_allocated_hash_ident(::KWMsg::Ident* hash_ident);
  private:
  const ::KWMsg::Ident& _internal_hash_ident() const;
  ::KWMsg::Ident* _internal_mutable_hash_ident();
  public:
  void unsafe_arena_set_allocated_hash_ident(
      ::KWMsg::Ident* hash_ident);
  ::KWMsg::Ident* unsafe_arena_release_hash_ident();

  // @@protoc_insertion_point(class_scope:KWMsg.MsgBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident > player_client_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msg_data_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* hash_ident_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgbase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Ident

// int64 svrid = 1;
inline void Ident::clear_svrid() {
  svrid_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ident::_internal_svrid() const {
  return svrid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ident::svrid() const {
  // @@protoc_insertion_point(field_get:KWMsg.Ident.svrid)
  return _internal_svrid();
}
inline void Ident::_internal_set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  svrid_ = value;
}
inline void Ident::set_svrid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_svrid(value);
  // @@protoc_insertion_point(field_set:KWMsg.Ident.svrid)
}

// int64 index = 2;
inline void Ident::clear_index() {
  index_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ident::_internal_index() const {
  return index_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 Ident::index() const {
  // @@protoc_insertion_point(field_get:KWMsg.Ident.index)
  return _internal_index();
}
inline void Ident::_internal_set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  index_ = value;
}
inline void Ident::set_index(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_index(value);
  // @@protoc_insertion_point(field_set:KWMsg.Ident.index)
}

// -------------------------------------------------------------------

// Vector2

// float x = 1;
inline void Vector2::clear_x() {
  x_ = 0;
}
inline float Vector2::_internal_x() const {
  return x_;
}
inline float Vector2::x() const {
  // @@protoc_insertion_point(field_get:KWMsg.Vector2.x)
  return _internal_x();
}
inline void Vector2::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector2::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:KWMsg.Vector2.x)
}

// float y = 2;
inline void Vector2::clear_y() {
  y_ = 0;
}
inline float Vector2::_internal_y() const {
  return y_;
}
inline float Vector2::y() const {
  // @@protoc_insertion_point(field_get:KWMsg.Vector2.y)
  return _internal_y();
}
inline void Vector2::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector2::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:KWMsg.Vector2.y)
}

// -------------------------------------------------------------------

// Vector3

// float x = 1;
inline void Vector3::clear_x() {
  x_ = 0;
}
inline float Vector3::_internal_x() const {
  return x_;
}
inline float Vector3::x() const {
  // @@protoc_insertion_point(field_get:KWMsg.Vector3.x)
  return _internal_x();
}
inline void Vector3::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:KWMsg.Vector3.x)
}

// float y = 2;
inline void Vector3::clear_y() {
  y_ = 0;
}
inline float Vector3::_internal_y() const {
  return y_;
}
inline float Vector3::y() const {
  // @@protoc_insertion_point(field_get:KWMsg.Vector3.y)
  return _internal_y();
}
inline void Vector3::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:KWMsg.Vector3.y)
}

// float z = 3;
inline void Vector3::clear_z() {
  z_ = 0;
}
inline float Vector3::_internal_z() const {
  return z_;
}
inline float Vector3::z() const {
  // @@protoc_insertion_point(field_get:KWMsg.Vector3.z)
  return _internal_z();
}
inline void Vector3::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:KWMsg.Vector3.z)
}

// -------------------------------------------------------------------

// PropertyInt

// bytes property_name = 1;
inline void PropertyInt::clear_property_name() {
  property_name_.ClearToEmpty();
}
inline const std::string& PropertyInt::property_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.PropertyInt.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyInt::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 property_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PropertyInt.property_name)
}
inline std::string* PropertyInt::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PropertyInt.property_name)
  return _internal_mutable_property_name();
}
inline const std::string& PropertyInt::_internal_property_name() const {
  return property_name_.Get();
}
inline void PropertyInt::_internal_set_property_name(const std::string& value) {
  
  property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PropertyInt::_internal_mutable_property_name() {
  
  return property_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PropertyInt::release_property_name() {
  // @@protoc_insertion_point(field_release:KWMsg.PropertyInt.property_name)
  return property_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PropertyInt::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  property_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PropertyInt.property_name)
}

// int64 data = 2;
inline void PropertyInt::clear_data() {
  data_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PropertyInt::_internal_data() const {
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PropertyInt::data() const {
  // @@protoc_insertion_point(field_get:KWMsg.PropertyInt.data)
  return _internal_data();
}
inline void PropertyInt::_internal_set_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data_ = value;
}
inline void PropertyInt::set_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:KWMsg.PropertyInt.data)
}

// -------------------------------------------------------------------

// PropertyFloat

// bytes property_name = 1;
inline void PropertyFloat::clear_property_name() {
  property_name_.ClearToEmpty();
}
inline const std::string& PropertyFloat::property_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.PropertyFloat.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyFloat::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 property_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PropertyFloat.property_name)
}
inline std::string* PropertyFloat::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PropertyFloat.property_name)
  return _internal_mutable_property_name();
}
inline const std::string& PropertyFloat::_internal_property_name() const {
  return property_name_.Get();
}
inline void PropertyFloat::_internal_set_property_name(const std::string& value) {
  
  property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PropertyFloat::_internal_mutable_property_name() {
  
  return property_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PropertyFloat::release_property_name() {
  // @@protoc_insertion_point(field_release:KWMsg.PropertyFloat.property_name)
  return property_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PropertyFloat::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  property_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PropertyFloat.property_name)
}

// float data = 2;
inline void PropertyFloat::clear_data() {
  data_ = 0;
}
inline float PropertyFloat::_internal_data() const {
  return data_;
}
inline float PropertyFloat::data() const {
  // @@protoc_insertion_point(field_get:KWMsg.PropertyFloat.data)
  return _internal_data();
}
inline void PropertyFloat::_internal_set_data(float value) {
  
  data_ = value;
}
inline void PropertyFloat::set_data(float value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:KWMsg.PropertyFloat.data)
}

// -------------------------------------------------------------------

// PropertyString

// bytes property_name = 1;
inline void PropertyString::clear_property_name() {
  property_name_.ClearToEmpty();
}
inline const std::string& PropertyString::property_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.PropertyString.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyString::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 property_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PropertyString.property_name)
}
inline std::string* PropertyString::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PropertyString.property_name)
  return _internal_mutable_property_name();
}
inline const std::string& PropertyString::_internal_property_name() const {
  return property_name_.Get();
}
inline void PropertyString::_internal_set_property_name(const std::string& value) {
  
  property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PropertyString::_internal_mutable_property_name() {
  
  return property_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PropertyString::release_property_name() {
  // @@protoc_insertion_point(field_release:KWMsg.PropertyString.property_name)
  return property_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PropertyString::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  property_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PropertyString.property_name)
}

// bytes data = 2;
inline void PropertyString::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& PropertyString::data() const {
  // @@protoc_insertion_point(field_get:KWMsg.PropertyString.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyString::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PropertyString.data)
}
inline std::string* PropertyString::mutable_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PropertyString.data)
  return _internal_mutable_data();
}
inline const std::string& PropertyString::_internal_data() const {
  return data_.Get();
}
inline void PropertyString::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PropertyString::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PropertyString::release_data() {
  // @@protoc_insertion_point(field_release:KWMsg.PropertyString.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PropertyString::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PropertyString.data)
}

// -------------------------------------------------------------------

// PropertyObject

// bytes property_name = 1;
inline void PropertyObject::clear_property_name() {
  property_name_.ClearToEmpty();
}
inline const std::string& PropertyObject::property_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.PropertyObject.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyObject::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 property_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PropertyObject.property_name)
}
inline std::string* PropertyObject::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PropertyObject.property_name)
  return _internal_mutable_property_name();
}
inline const std::string& PropertyObject::_internal_property_name() const {
  return property_name_.Get();
}
inline void PropertyObject::_internal_set_property_name(const std::string& value) {
  
  property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PropertyObject::_internal_mutable_property_name() {
  
  return property_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PropertyObject::release_property_name() {
  // @@protoc_insertion_point(field_release:KWMsg.PropertyObject.property_name)
  return property_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PropertyObject::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  property_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PropertyObject.property_name)
}

// .KWMsg.Ident data = 2;
inline bool PropertyObject::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool PropertyObject::has_data() const {
  return _internal_has_data();
}
inline void PropertyObject::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::KWMsg::Ident& PropertyObject::_internal_data() const {
  const ::KWMsg::Ident* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& PropertyObject::data() const {
  // @@protoc_insertion_point(field_get:KWMsg.PropertyObject.data)
  return _internal_data();
}
inline void PropertyObject::unsafe_arena_set_allocated_data(
    ::KWMsg::Ident* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PropertyObject.data)
}
inline ::KWMsg::Ident* PropertyObject::release_data() {
  
  ::KWMsg::Ident* temp = data_;
  data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* PropertyObject::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:KWMsg.PropertyObject.data)
  
  ::KWMsg::Ident* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* PropertyObject::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::KWMsg::Ident* PropertyObject::mutable_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PropertyObject.data)
  return _internal_mutable_data();
}
inline void PropertyObject::set_allocated_data(::KWMsg::Ident* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PropertyObject.data)
}

// -------------------------------------------------------------------

// PropertyVector2

// bytes property_name = 1;
inline void PropertyVector2::clear_property_name() {
  property_name_.ClearToEmpty();
}
inline const std::string& PropertyVector2::property_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.PropertyVector2.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyVector2::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 property_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PropertyVector2.property_name)
}
inline std::string* PropertyVector2::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PropertyVector2.property_name)
  return _internal_mutable_property_name();
}
inline const std::string& PropertyVector2::_internal_property_name() const {
  return property_name_.Get();
}
inline void PropertyVector2::_internal_set_property_name(const std::string& value) {
  
  property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PropertyVector2::_internal_mutable_property_name() {
  
  return property_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PropertyVector2::release_property_name() {
  // @@protoc_insertion_point(field_release:KWMsg.PropertyVector2.property_name)
  return property_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PropertyVector2::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  property_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PropertyVector2.property_name)
}

// .KWMsg.Vector2 data = 2;
inline bool PropertyVector2::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool PropertyVector2::has_data() const {
  return _internal_has_data();
}
inline void PropertyVector2::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::KWMsg::Vector2& PropertyVector2::_internal_data() const {
  const ::KWMsg::Vector2* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Vector2&>(
      ::KWMsg::_Vector2_default_instance_);
}
inline const ::KWMsg::Vector2& PropertyVector2::data() const {
  // @@protoc_insertion_point(field_get:KWMsg.PropertyVector2.data)
  return _internal_data();
}
inline void PropertyVector2::unsafe_arena_set_allocated_data(
    ::KWMsg::Vector2* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PropertyVector2.data)
}
inline ::KWMsg::Vector2* PropertyVector2::release_data() {
  
  ::KWMsg::Vector2* temp = data_;
  data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Vector2* PropertyVector2::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:KWMsg.PropertyVector2.data)
  
  ::KWMsg::Vector2* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::KWMsg::Vector2* PropertyVector2::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Vector2>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::KWMsg::Vector2* PropertyVector2::mutable_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PropertyVector2.data)
  return _internal_mutable_data();
}
inline void PropertyVector2::set_allocated_data(::KWMsg::Vector2* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Vector2>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PropertyVector2.data)
}

// -------------------------------------------------------------------

// PropertyVector3

// bytes property_name = 1;
inline void PropertyVector3::clear_property_name() {
  property_name_.ClearToEmpty();
}
inline const std::string& PropertyVector3::property_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.PropertyVector3.property_name)
  return _internal_property_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PropertyVector3::set_property_name(ArgT0&& arg0, ArgT... args) {
 
 property_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PropertyVector3.property_name)
}
inline std::string* PropertyVector3::mutable_property_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PropertyVector3.property_name)
  return _internal_mutable_property_name();
}
inline const std::string& PropertyVector3::_internal_property_name() const {
  return property_name_.Get();
}
inline void PropertyVector3::_internal_set_property_name(const std::string& value) {
  
  property_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PropertyVector3::_internal_mutable_property_name() {
  
  return property_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PropertyVector3::release_property_name() {
  // @@protoc_insertion_point(field_release:KWMsg.PropertyVector3.property_name)
  return property_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PropertyVector3::set_allocated_property_name(std::string* property_name) {
  if (property_name != nullptr) {
    
  } else {
    
  }
  property_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), property_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PropertyVector3.property_name)
}

// .KWMsg.Vector3 data = 2;
inline bool PropertyVector3::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool PropertyVector3::has_data() const {
  return _internal_has_data();
}
inline void PropertyVector3::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::KWMsg::Vector3& PropertyVector3::_internal_data() const {
  const ::KWMsg::Vector3* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Vector3&>(
      ::KWMsg::_Vector3_default_instance_);
}
inline const ::KWMsg::Vector3& PropertyVector3::data() const {
  // @@protoc_insertion_point(field_get:KWMsg.PropertyVector3.data)
  return _internal_data();
}
inline void PropertyVector3::unsafe_arena_set_allocated_data(
    ::KWMsg::Vector3* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PropertyVector3.data)
}
inline ::KWMsg::Vector3* PropertyVector3::release_data() {
  
  ::KWMsg::Vector3* temp = data_;
  data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Vector3* PropertyVector3::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:KWMsg.PropertyVector3.data)
  
  ::KWMsg::Vector3* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::KWMsg::Vector3* PropertyVector3::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Vector3>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::KWMsg::Vector3* PropertyVector3::mutable_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PropertyVector3.data)
  return _internal_mutable_data();
}
inline void PropertyVector3::set_allocated_data(::KWMsg::Vector3* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Vector3>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PropertyVector3.data)
}

// -------------------------------------------------------------------

// RecordInt

// int32 row = 1;
inline void RecordInt::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordInt::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordInt::row() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordInt.row)
  return _internal_row();
}
inline void RecordInt::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
}
inline void RecordInt::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordInt.row)
}

// int32 col = 2;
inline void RecordInt::clear_col() {
  col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordInt::_internal_col() const {
  return col_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordInt::col() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordInt.col)
  return _internal_col();
}
inline void RecordInt::_internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_ = value;
}
inline void RecordInt::set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordInt.col)
}

// int64 data = 3;
inline void RecordInt::clear_data() {
  data_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RecordInt::_internal_data() const {
  return data_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RecordInt::data() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordInt.data)
  return _internal_data();
}
inline void RecordInt::_internal_set_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  data_ = value;
}
inline void RecordInt::set_data(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordInt.data)
}

// -------------------------------------------------------------------

// RecordFloat

// int32 row = 1;
inline void RecordFloat::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordFloat::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordFloat::row() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordFloat.row)
  return _internal_row();
}
inline void RecordFloat::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
}
inline void RecordFloat::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordFloat.row)
}

// int32 col = 2;
inline void RecordFloat::clear_col() {
  col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordFloat::_internal_col() const {
  return col_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordFloat::col() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordFloat.col)
  return _internal_col();
}
inline void RecordFloat::_internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_ = value;
}
inline void RecordFloat::set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordFloat.col)
}

// float data = 3;
inline void RecordFloat::clear_data() {
  data_ = 0;
}
inline float RecordFloat::_internal_data() const {
  return data_;
}
inline float RecordFloat::data() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordFloat.data)
  return _internal_data();
}
inline void RecordFloat::_internal_set_data(float value) {
  
  data_ = value;
}
inline void RecordFloat::set_data(float value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordFloat.data)
}

// -------------------------------------------------------------------

// RecordString

// int32 row = 1;
inline void RecordString::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordString::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordString::row() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordString.row)
  return _internal_row();
}
inline void RecordString::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
}
inline void RecordString::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordString.row)
}

// int32 col = 2;
inline void RecordString::clear_col() {
  col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordString::_internal_col() const {
  return col_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordString::col() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordString.col)
  return _internal_col();
}
inline void RecordString::_internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_ = value;
}
inline void RecordString::set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordString.col)
}

// bytes data = 3;
inline void RecordString::clear_data() {
  data_.ClearToEmpty();
}
inline const std::string& RecordString::data() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordString.data)
  return _internal_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RecordString::set_data(ArgT0&& arg0, ArgT... args) {
 
 data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.RecordString.data)
}
inline std::string* RecordString::mutable_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.RecordString.data)
  return _internal_mutable_data();
}
inline const std::string& RecordString::_internal_data() const {
  return data_.Get();
}
inline void RecordString::_internal_set_data(const std::string& value) {
  
  data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RecordString::_internal_mutable_data() {
  
  return data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RecordString::release_data() {
  // @@protoc_insertion_point(field_release:KWMsg.RecordString.data)
  return data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RecordString::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.RecordString.data)
}

// -------------------------------------------------------------------

// RecordObject

// int32 row = 1;
inline void RecordObject::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordObject::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordObject::row() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordObject.row)
  return _internal_row();
}
inline void RecordObject::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
}
inline void RecordObject::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordObject.row)
}

// int32 col = 2;
inline void RecordObject::clear_col() {
  col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordObject::_internal_col() const {
  return col_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordObject::col() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordObject.col)
  return _internal_col();
}
inline void RecordObject::_internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_ = value;
}
inline void RecordObject::set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordObject.col)
}

// .KWMsg.Ident data = 3;
inline bool RecordObject::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool RecordObject::has_data() const {
  return _internal_has_data();
}
inline void RecordObject::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::KWMsg::Ident& RecordObject::_internal_data() const {
  const ::KWMsg::Ident* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& RecordObject::data() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordObject.data)
  return _internal_data();
}
inline void RecordObject::unsafe_arena_set_allocated_data(
    ::KWMsg::Ident* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.RecordObject.data)
}
inline ::KWMsg::Ident* RecordObject::release_data() {
  
  ::KWMsg::Ident* temp = data_;
  data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* RecordObject::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:KWMsg.RecordObject.data)
  
  ::KWMsg::Ident* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* RecordObject::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::KWMsg::Ident* RecordObject::mutable_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.RecordObject.data)
  return _internal_mutable_data();
}
inline void RecordObject::set_allocated_data(::KWMsg::Ident* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.RecordObject.data)
}

// -------------------------------------------------------------------

// RecordVector2

// int32 row = 1;
inline void RecordVector2::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordVector2::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordVector2::row() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordVector2.row)
  return _internal_row();
}
inline void RecordVector2::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
}
inline void RecordVector2::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordVector2.row)
}

// int32 col = 2;
inline void RecordVector2::clear_col() {
  col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordVector2::_internal_col() const {
  return col_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordVector2::col() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordVector2.col)
  return _internal_col();
}
inline void RecordVector2::_internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_ = value;
}
inline void RecordVector2::set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordVector2.col)
}

// .KWMsg.Vector2 data = 3;
inline bool RecordVector2::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool RecordVector2::has_data() const {
  return _internal_has_data();
}
inline void RecordVector2::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::KWMsg::Vector2& RecordVector2::_internal_data() const {
  const ::KWMsg::Vector2* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Vector2&>(
      ::KWMsg::_Vector2_default_instance_);
}
inline const ::KWMsg::Vector2& RecordVector2::data() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordVector2.data)
  return _internal_data();
}
inline void RecordVector2::unsafe_arena_set_allocated_data(
    ::KWMsg::Vector2* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.RecordVector2.data)
}
inline ::KWMsg::Vector2* RecordVector2::release_data() {
  
  ::KWMsg::Vector2* temp = data_;
  data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Vector2* RecordVector2::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:KWMsg.RecordVector2.data)
  
  ::KWMsg::Vector2* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::KWMsg::Vector2* RecordVector2::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Vector2>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::KWMsg::Vector2* RecordVector2::mutable_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.RecordVector2.data)
  return _internal_mutable_data();
}
inline void RecordVector2::set_allocated_data(::KWMsg::Vector2* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Vector2>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.RecordVector2.data)
}

// -------------------------------------------------------------------

// RecordVector3

// int32 row = 1;
inline void RecordVector3::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordVector3::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordVector3::row() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordVector3.row)
  return _internal_row();
}
inline void RecordVector3::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
}
inline void RecordVector3::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordVector3.row)
}

// int32 col = 2;
inline void RecordVector3::clear_col() {
  col_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordVector3::_internal_col() const {
  return col_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordVector3::col() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordVector3.col)
  return _internal_col();
}
inline void RecordVector3::_internal_set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  col_ = value;
}
inline void RecordVector3::set_col(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_col(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordVector3.col)
}

// .KWMsg.Vector3 data = 3;
inline bool RecordVector3::_internal_has_data() const {
  return this != internal_default_instance() && data_ != nullptr;
}
inline bool RecordVector3::has_data() const {
  return _internal_has_data();
}
inline void RecordVector3::clear_data() {
  if (GetArenaForAllocation() == nullptr && data_ != nullptr) {
    delete data_;
  }
  data_ = nullptr;
}
inline const ::KWMsg::Vector3& RecordVector3::_internal_data() const {
  const ::KWMsg::Vector3* p = data_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Vector3&>(
      ::KWMsg::_Vector3_default_instance_);
}
inline const ::KWMsg::Vector3& RecordVector3::data() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordVector3.data)
  return _internal_data();
}
inline void RecordVector3::unsafe_arena_set_allocated_data(
    ::KWMsg::Vector3* data) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(data_);
  }
  data_ = data;
  if (data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.RecordVector3.data)
}
inline ::KWMsg::Vector3* RecordVector3::release_data() {
  
  ::KWMsg::Vector3* temp = data_;
  data_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Vector3* RecordVector3::unsafe_arena_release_data() {
  // @@protoc_insertion_point(field_release:KWMsg.RecordVector3.data)
  
  ::KWMsg::Vector3* temp = data_;
  data_ = nullptr;
  return temp;
}
inline ::KWMsg::Vector3* RecordVector3::_internal_mutable_data() {
  
  if (data_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Vector3>(GetArenaForAllocation());
    data_ = p;
  }
  return data_;
}
inline ::KWMsg::Vector3* RecordVector3::mutable_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.RecordVector3.data)
  return _internal_mutable_data();
}
inline void RecordVector3::set_allocated_data(::KWMsg::Vector3* data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete data_;
  }
  if (data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Vector3>::GetOwningArena(data);
    if (message_arena != submessage_arena) {
      data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, data, submessage_arena);
    }
    
  } else {
    
  }
  data_ = data;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.RecordVector3.data)
}

// -------------------------------------------------------------------

// RecordAddRowStruct

// int32 row = 1;
inline void RecordAddRowStruct::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordAddRowStruct::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RecordAddRowStruct::row() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordAddRowStruct.row)
  return _internal_row();
}
inline void RecordAddRowStruct::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
}
inline void RecordAddRowStruct::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecordAddRowStruct.row)
}

// repeated .KWMsg.RecordInt record_int_list = 2;
inline int RecordAddRowStruct::_internal_record_int_list_size() const {
  return record_int_list_.size();
}
inline int RecordAddRowStruct::record_int_list_size() const {
  return _internal_record_int_list_size();
}
inline void RecordAddRowStruct::clear_record_int_list() {
  record_int_list_.Clear();
}
inline ::KWMsg::RecordInt* RecordAddRowStruct::mutable_record_int_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.RecordAddRowStruct.record_int_list)
  return record_int_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt >*
RecordAddRowStruct::mutable_record_int_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.RecordAddRowStruct.record_int_list)
  return &record_int_list_;
}
inline const ::KWMsg::RecordInt& RecordAddRowStruct::_internal_record_int_list(int index) const {
  return record_int_list_.Get(index);
}
inline const ::KWMsg::RecordInt& RecordAddRowStruct::record_int_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordAddRowStruct.record_int_list)
  return _internal_record_int_list(index);
}
inline ::KWMsg::RecordInt* RecordAddRowStruct::_internal_add_record_int_list() {
  return record_int_list_.Add();
}
inline ::KWMsg::RecordInt* RecordAddRowStruct::add_record_int_list() {
  // @@protoc_insertion_point(field_add:KWMsg.RecordAddRowStruct.record_int_list)
  return _internal_add_record_int_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt >&
RecordAddRowStruct::record_int_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.RecordAddRowStruct.record_int_list)
  return record_int_list_;
}

// repeated .KWMsg.RecordFloat record_float_list = 3;
inline int RecordAddRowStruct::_internal_record_float_list_size() const {
  return record_float_list_.size();
}
inline int RecordAddRowStruct::record_float_list_size() const {
  return _internal_record_float_list_size();
}
inline void RecordAddRowStruct::clear_record_float_list() {
  record_float_list_.Clear();
}
inline ::KWMsg::RecordFloat* RecordAddRowStruct::mutable_record_float_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.RecordAddRowStruct.record_float_list)
  return record_float_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat >*
RecordAddRowStruct::mutable_record_float_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.RecordAddRowStruct.record_float_list)
  return &record_float_list_;
}
inline const ::KWMsg::RecordFloat& RecordAddRowStruct::_internal_record_float_list(int index) const {
  return record_float_list_.Get(index);
}
inline const ::KWMsg::RecordFloat& RecordAddRowStruct::record_float_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordAddRowStruct.record_float_list)
  return _internal_record_float_list(index);
}
inline ::KWMsg::RecordFloat* RecordAddRowStruct::_internal_add_record_float_list() {
  return record_float_list_.Add();
}
inline ::KWMsg::RecordFloat* RecordAddRowStruct::add_record_float_list() {
  // @@protoc_insertion_point(field_add:KWMsg.RecordAddRowStruct.record_float_list)
  return _internal_add_record_float_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat >&
RecordAddRowStruct::record_float_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.RecordAddRowStruct.record_float_list)
  return record_float_list_;
}

// repeated .KWMsg.RecordString record_string_list = 4;
inline int RecordAddRowStruct::_internal_record_string_list_size() const {
  return record_string_list_.size();
}
inline int RecordAddRowStruct::record_string_list_size() const {
  return _internal_record_string_list_size();
}
inline void RecordAddRowStruct::clear_record_string_list() {
  record_string_list_.Clear();
}
inline ::KWMsg::RecordString* RecordAddRowStruct::mutable_record_string_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.RecordAddRowStruct.record_string_list)
  return record_string_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString >*
RecordAddRowStruct::mutable_record_string_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.RecordAddRowStruct.record_string_list)
  return &record_string_list_;
}
inline const ::KWMsg::RecordString& RecordAddRowStruct::_internal_record_string_list(int index) const {
  return record_string_list_.Get(index);
}
inline const ::KWMsg::RecordString& RecordAddRowStruct::record_string_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordAddRowStruct.record_string_list)
  return _internal_record_string_list(index);
}
inline ::KWMsg::RecordString* RecordAddRowStruct::_internal_add_record_string_list() {
  return record_string_list_.Add();
}
inline ::KWMsg::RecordString* RecordAddRowStruct::add_record_string_list() {
  // @@protoc_insertion_point(field_add:KWMsg.RecordAddRowStruct.record_string_list)
  return _internal_add_record_string_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString >&
RecordAddRowStruct::record_string_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.RecordAddRowStruct.record_string_list)
  return record_string_list_;
}

// repeated .KWMsg.RecordObject record_object_list = 5;
inline int RecordAddRowStruct::_internal_record_object_list_size() const {
  return record_object_list_.size();
}
inline int RecordAddRowStruct::record_object_list_size() const {
  return _internal_record_object_list_size();
}
inline void RecordAddRowStruct::clear_record_object_list() {
  record_object_list_.Clear();
}
inline ::KWMsg::RecordObject* RecordAddRowStruct::mutable_record_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.RecordAddRowStruct.record_object_list)
  return record_object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject >*
RecordAddRowStruct::mutable_record_object_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.RecordAddRowStruct.record_object_list)
  return &record_object_list_;
}
inline const ::KWMsg::RecordObject& RecordAddRowStruct::_internal_record_object_list(int index) const {
  return record_object_list_.Get(index);
}
inline const ::KWMsg::RecordObject& RecordAddRowStruct::record_object_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordAddRowStruct.record_object_list)
  return _internal_record_object_list(index);
}
inline ::KWMsg::RecordObject* RecordAddRowStruct::_internal_add_record_object_list() {
  return record_object_list_.Add();
}
inline ::KWMsg::RecordObject* RecordAddRowStruct::add_record_object_list() {
  // @@protoc_insertion_point(field_add:KWMsg.RecordAddRowStruct.record_object_list)
  return _internal_add_record_object_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject >&
RecordAddRowStruct::record_object_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.RecordAddRowStruct.record_object_list)
  return record_object_list_;
}

// repeated .KWMsg.RecordVector2 record_vector2_list = 6;
inline int RecordAddRowStruct::_internal_record_vector2_list_size() const {
  return record_vector2_list_.size();
}
inline int RecordAddRowStruct::record_vector2_list_size() const {
  return _internal_record_vector2_list_size();
}
inline void RecordAddRowStruct::clear_record_vector2_list() {
  record_vector2_list_.Clear();
}
inline ::KWMsg::RecordVector2* RecordAddRowStruct::mutable_record_vector2_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.RecordAddRowStruct.record_vector2_list)
  return record_vector2_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 >*
RecordAddRowStruct::mutable_record_vector2_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.RecordAddRowStruct.record_vector2_list)
  return &record_vector2_list_;
}
inline const ::KWMsg::RecordVector2& RecordAddRowStruct::_internal_record_vector2_list(int index) const {
  return record_vector2_list_.Get(index);
}
inline const ::KWMsg::RecordVector2& RecordAddRowStruct::record_vector2_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordAddRowStruct.record_vector2_list)
  return _internal_record_vector2_list(index);
}
inline ::KWMsg::RecordVector2* RecordAddRowStruct::_internal_add_record_vector2_list() {
  return record_vector2_list_.Add();
}
inline ::KWMsg::RecordVector2* RecordAddRowStruct::add_record_vector2_list() {
  // @@protoc_insertion_point(field_add:KWMsg.RecordAddRowStruct.record_vector2_list)
  return _internal_add_record_vector2_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 >&
RecordAddRowStruct::record_vector2_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.RecordAddRowStruct.record_vector2_list)
  return record_vector2_list_;
}

// repeated .KWMsg.RecordVector3 record_vector3_list = 7;
inline int RecordAddRowStruct::_internal_record_vector3_list_size() const {
  return record_vector3_list_.size();
}
inline int RecordAddRowStruct::record_vector3_list_size() const {
  return _internal_record_vector3_list_size();
}
inline void RecordAddRowStruct::clear_record_vector3_list() {
  record_vector3_list_.Clear();
}
inline ::KWMsg::RecordVector3* RecordAddRowStruct::mutable_record_vector3_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.RecordAddRowStruct.record_vector3_list)
  return record_vector3_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 >*
RecordAddRowStruct::mutable_record_vector3_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.RecordAddRowStruct.record_vector3_list)
  return &record_vector3_list_;
}
inline const ::KWMsg::RecordVector3& RecordAddRowStruct::_internal_record_vector3_list(int index) const {
  return record_vector3_list_.Get(index);
}
inline const ::KWMsg::RecordVector3& RecordAddRowStruct::record_vector3_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.RecordAddRowStruct.record_vector3_list)
  return _internal_record_vector3_list(index);
}
inline ::KWMsg::RecordVector3* RecordAddRowStruct::_internal_add_record_vector3_list() {
  return record_vector3_list_.Add();
}
inline ::KWMsg::RecordVector3* RecordAddRowStruct::add_record_vector3_list() {
  // @@protoc_insertion_point(field_add:KWMsg.RecordAddRowStruct.record_vector3_list)
  return _internal_add_record_vector3_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 >&
RecordAddRowStruct::record_vector3_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.RecordAddRowStruct.record_vector3_list)
  return record_vector3_list_;
}

// -------------------------------------------------------------------

// ObjectRecordBase

// bytes record_name = 1;
inline void ObjectRecordBase::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordBase::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordBase.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordBase::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordBase.record_name)
}
inline std::string* ObjectRecordBase::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordBase.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& ObjectRecordBase::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordBase::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectRecordBase::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectRecordBase::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordBase.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectRecordBase::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordBase.record_name)
}

// repeated .KWMsg.RecordAddRowStruct row_struct = 2;
inline int ObjectRecordBase::_internal_row_struct_size() const {
  return row_struct_.size();
}
inline int ObjectRecordBase::row_struct_size() const {
  return _internal_row_struct_size();
}
inline void ObjectRecordBase::clear_row_struct() {
  row_struct_.Clear();
}
inline ::KWMsg::RecordAddRowStruct* ObjectRecordBase::mutable_row_struct(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordBase.row_struct)
  return row_struct_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordAddRowStruct >*
ObjectRecordBase::mutable_row_struct() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectRecordBase.row_struct)
  return &row_struct_;
}
inline const ::KWMsg::RecordAddRowStruct& ObjectRecordBase::_internal_row_struct(int index) const {
  return row_struct_.Get(index);
}
inline const ::KWMsg::RecordAddRowStruct& ObjectRecordBase::row_struct(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordBase.row_struct)
  return _internal_row_struct(index);
}
inline ::KWMsg::RecordAddRowStruct* ObjectRecordBase::_internal_add_row_struct() {
  return row_struct_.Add();
}
inline ::KWMsg::RecordAddRowStruct* ObjectRecordBase::add_row_struct() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectRecordBase.row_struct)
  return _internal_add_row_struct();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordAddRowStruct >&
ObjectRecordBase::row_struct() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectRecordBase.row_struct)
  return row_struct_;
}

// -------------------------------------------------------------------

// ObjectPropertyInt

// .KWMsg.Ident player_id = 1;
inline bool ObjectPropertyInt::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectPropertyInt::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectPropertyInt::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectPropertyInt::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectPropertyInt::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyInt.player_id)
  return _internal_player_id();
}
inline void ObjectPropertyInt::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectPropertyInt.player_id)
}
inline ::KWMsg::Ident* ObjectPropertyInt::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectPropertyInt::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectPropertyInt.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectPropertyInt::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectPropertyInt::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyInt.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectPropertyInt::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectPropertyInt.player_id)
}

// repeated .KWMsg.PropertyInt property_list = 2;
inline int ObjectPropertyInt::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectPropertyInt::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectPropertyInt::clear_property_list() {
  property_list_.Clear();
}
inline ::KWMsg::PropertyInt* ObjectPropertyInt::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyInt.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyInt >*
ObjectPropertyInt::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectPropertyInt.property_list)
  return &property_list_;
}
inline const ::KWMsg::PropertyInt& ObjectPropertyInt::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::KWMsg::PropertyInt& ObjectPropertyInt::property_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyInt.property_list)
  return _internal_property_list(index);
}
inline ::KWMsg::PropertyInt* ObjectPropertyInt::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::KWMsg::PropertyInt* ObjectPropertyInt::add_property_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectPropertyInt.property_list)
  return _internal_add_property_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyInt >&
ObjectPropertyInt::property_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectPropertyInt.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyFloat

// .KWMsg.Ident player_id = 1;
inline bool ObjectPropertyFloat::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectPropertyFloat::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectPropertyFloat::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectPropertyFloat::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectPropertyFloat::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyFloat.player_id)
  return _internal_player_id();
}
inline void ObjectPropertyFloat::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectPropertyFloat.player_id)
}
inline ::KWMsg::Ident* ObjectPropertyFloat::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectPropertyFloat::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectPropertyFloat.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectPropertyFloat::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectPropertyFloat::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyFloat.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectPropertyFloat::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectPropertyFloat.player_id)
}

// repeated .KWMsg.PropertyFloat property_list = 2;
inline int ObjectPropertyFloat::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectPropertyFloat::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectPropertyFloat::clear_property_list() {
  property_list_.Clear();
}
inline ::KWMsg::PropertyFloat* ObjectPropertyFloat::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyFloat.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyFloat >*
ObjectPropertyFloat::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectPropertyFloat.property_list)
  return &property_list_;
}
inline const ::KWMsg::PropertyFloat& ObjectPropertyFloat::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::KWMsg::PropertyFloat& ObjectPropertyFloat::property_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyFloat.property_list)
  return _internal_property_list(index);
}
inline ::KWMsg::PropertyFloat* ObjectPropertyFloat::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::KWMsg::PropertyFloat* ObjectPropertyFloat::add_property_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectPropertyFloat.property_list)
  return _internal_add_property_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyFloat >&
ObjectPropertyFloat::property_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectPropertyFloat.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyString

// .KWMsg.Ident player_id = 1;
inline bool ObjectPropertyString::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectPropertyString::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectPropertyString::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectPropertyString::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectPropertyString::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyString.player_id)
  return _internal_player_id();
}
inline void ObjectPropertyString::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectPropertyString.player_id)
}
inline ::KWMsg::Ident* ObjectPropertyString::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectPropertyString::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectPropertyString.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectPropertyString::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectPropertyString::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyString.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectPropertyString::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectPropertyString.player_id)
}

// repeated .KWMsg.PropertyString property_list = 2;
inline int ObjectPropertyString::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectPropertyString::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectPropertyString::clear_property_list() {
  property_list_.Clear();
}
inline ::KWMsg::PropertyString* ObjectPropertyString::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyString.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyString >*
ObjectPropertyString::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectPropertyString.property_list)
  return &property_list_;
}
inline const ::KWMsg::PropertyString& ObjectPropertyString::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::KWMsg::PropertyString& ObjectPropertyString::property_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyString.property_list)
  return _internal_property_list(index);
}
inline ::KWMsg::PropertyString* ObjectPropertyString::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::KWMsg::PropertyString* ObjectPropertyString::add_property_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectPropertyString.property_list)
  return _internal_add_property_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyString >&
ObjectPropertyString::property_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectPropertyString.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyObject

// .KWMsg.Ident player_id = 1;
inline bool ObjectPropertyObject::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectPropertyObject::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectPropertyObject::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectPropertyObject::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectPropertyObject::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyObject.player_id)
  return _internal_player_id();
}
inline void ObjectPropertyObject::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectPropertyObject.player_id)
}
inline ::KWMsg::Ident* ObjectPropertyObject::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectPropertyObject::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectPropertyObject.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectPropertyObject::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectPropertyObject::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyObject.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectPropertyObject::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectPropertyObject.player_id)
}

// repeated .KWMsg.PropertyObject property_list = 2;
inline int ObjectPropertyObject::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectPropertyObject::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectPropertyObject::clear_property_list() {
  property_list_.Clear();
}
inline ::KWMsg::PropertyObject* ObjectPropertyObject::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyObject.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyObject >*
ObjectPropertyObject::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectPropertyObject.property_list)
  return &property_list_;
}
inline const ::KWMsg::PropertyObject& ObjectPropertyObject::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::KWMsg::PropertyObject& ObjectPropertyObject::property_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyObject.property_list)
  return _internal_property_list(index);
}
inline ::KWMsg::PropertyObject* ObjectPropertyObject::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::KWMsg::PropertyObject* ObjectPropertyObject::add_property_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectPropertyObject.property_list)
  return _internal_add_property_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyObject >&
ObjectPropertyObject::property_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectPropertyObject.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyVector2

// .KWMsg.Ident player_id = 1;
inline bool ObjectPropertyVector2::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectPropertyVector2::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectPropertyVector2::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectPropertyVector2::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectPropertyVector2::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyVector2.player_id)
  return _internal_player_id();
}
inline void ObjectPropertyVector2::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectPropertyVector2.player_id)
}
inline ::KWMsg::Ident* ObjectPropertyVector2::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectPropertyVector2::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectPropertyVector2.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectPropertyVector2::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectPropertyVector2::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyVector2.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectPropertyVector2::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectPropertyVector2.player_id)
}

// repeated .KWMsg.PropertyVector2 property_list = 2;
inline int ObjectPropertyVector2::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectPropertyVector2::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectPropertyVector2::clear_property_list() {
  property_list_.Clear();
}
inline ::KWMsg::PropertyVector2* ObjectPropertyVector2::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyVector2.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector2 >*
ObjectPropertyVector2::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectPropertyVector2.property_list)
  return &property_list_;
}
inline const ::KWMsg::PropertyVector2& ObjectPropertyVector2::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::KWMsg::PropertyVector2& ObjectPropertyVector2::property_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyVector2.property_list)
  return _internal_property_list(index);
}
inline ::KWMsg::PropertyVector2* ObjectPropertyVector2::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::KWMsg::PropertyVector2* ObjectPropertyVector2::add_property_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectPropertyVector2.property_list)
  return _internal_add_property_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector2 >&
ObjectPropertyVector2::property_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectPropertyVector2.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectPropertyVector3

// .KWMsg.Ident player_id = 1;
inline bool ObjectPropertyVector3::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectPropertyVector3::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectPropertyVector3::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectPropertyVector3::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectPropertyVector3::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyVector3.player_id)
  return _internal_player_id();
}
inline void ObjectPropertyVector3::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectPropertyVector3.player_id)
}
inline ::KWMsg::Ident* ObjectPropertyVector3::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectPropertyVector3::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectPropertyVector3.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectPropertyVector3::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectPropertyVector3::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyVector3.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectPropertyVector3::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectPropertyVector3.player_id)
}

// repeated .KWMsg.PropertyVector3 property_list = 2;
inline int ObjectPropertyVector3::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectPropertyVector3::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectPropertyVector3::clear_property_list() {
  property_list_.Clear();
}
inline ::KWMsg::PropertyVector3* ObjectPropertyVector3::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyVector3.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector3 >*
ObjectPropertyVector3::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectPropertyVector3.property_list)
  return &property_list_;
}
inline const ::KWMsg::PropertyVector3& ObjectPropertyVector3::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::KWMsg::PropertyVector3& ObjectPropertyVector3::property_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyVector3.property_list)
  return _internal_property_list(index);
}
inline ::KWMsg::PropertyVector3* ObjectPropertyVector3::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::KWMsg::PropertyVector3* ObjectPropertyVector3::add_property_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectPropertyVector3.property_list)
  return _internal_add_property_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector3 >&
ObjectPropertyVector3::property_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectPropertyVector3.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordInt

// .KWMsg.Ident player_id = 1;
inline bool ObjectRecordInt::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordInt::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordInt::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectRecordInt::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectRecordInt::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordInt.player_id)
  return _internal_player_id();
}
inline void ObjectRecordInt::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectRecordInt.player_id)
}
inline ::KWMsg::Ident* ObjectRecordInt::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordInt::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordInt.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordInt::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectRecordInt::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordInt.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectRecordInt::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordInt.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordInt::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordInt::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordInt.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordInt::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordInt.record_name)
}
inline std::string* ObjectRecordInt::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordInt.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& ObjectRecordInt::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordInt::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectRecordInt::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectRecordInt::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordInt.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectRecordInt::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordInt.record_name)
}

// repeated .KWMsg.RecordInt property_list = 3;
inline int ObjectRecordInt::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectRecordInt::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectRecordInt::clear_property_list() {
  property_list_.Clear();
}
inline ::KWMsg::RecordInt* ObjectRecordInt::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordInt.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt >*
ObjectRecordInt::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectRecordInt.property_list)
  return &property_list_;
}
inline const ::KWMsg::RecordInt& ObjectRecordInt::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::KWMsg::RecordInt& ObjectRecordInt::property_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordInt.property_list)
  return _internal_property_list(index);
}
inline ::KWMsg::RecordInt* ObjectRecordInt::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::KWMsg::RecordInt* ObjectRecordInt::add_property_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectRecordInt.property_list)
  return _internal_add_property_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt >&
ObjectRecordInt::property_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectRecordInt.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordFloat

// .KWMsg.Ident player_id = 1;
inline bool ObjectRecordFloat::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordFloat::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordFloat::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectRecordFloat::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectRecordFloat::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordFloat.player_id)
  return _internal_player_id();
}
inline void ObjectRecordFloat::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectRecordFloat.player_id)
}
inline ::KWMsg::Ident* ObjectRecordFloat::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordFloat::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordFloat.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordFloat::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectRecordFloat::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordFloat.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectRecordFloat::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordFloat.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordFloat::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordFloat::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordFloat.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordFloat::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordFloat.record_name)
}
inline std::string* ObjectRecordFloat::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordFloat.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& ObjectRecordFloat::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordFloat::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectRecordFloat::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectRecordFloat::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordFloat.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectRecordFloat::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordFloat.record_name)
}

// repeated .KWMsg.RecordFloat property_list = 3;
inline int ObjectRecordFloat::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectRecordFloat::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectRecordFloat::clear_property_list() {
  property_list_.Clear();
}
inline ::KWMsg::RecordFloat* ObjectRecordFloat::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordFloat.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat >*
ObjectRecordFloat::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectRecordFloat.property_list)
  return &property_list_;
}
inline const ::KWMsg::RecordFloat& ObjectRecordFloat::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::KWMsg::RecordFloat& ObjectRecordFloat::property_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordFloat.property_list)
  return _internal_property_list(index);
}
inline ::KWMsg::RecordFloat* ObjectRecordFloat::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::KWMsg::RecordFloat* ObjectRecordFloat::add_property_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectRecordFloat.property_list)
  return _internal_add_property_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat >&
ObjectRecordFloat::property_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectRecordFloat.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordString

// .KWMsg.Ident player_id = 1;
inline bool ObjectRecordString::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordString::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordString::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectRecordString::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectRecordString::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordString.player_id)
  return _internal_player_id();
}
inline void ObjectRecordString::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectRecordString.player_id)
}
inline ::KWMsg::Ident* ObjectRecordString::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordString::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordString.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordString::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectRecordString::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordString.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectRecordString::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordString.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordString::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordString::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordString.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordString::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordString.record_name)
}
inline std::string* ObjectRecordString::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordString.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& ObjectRecordString::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordString::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectRecordString::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectRecordString::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordString.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectRecordString::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordString.record_name)
}

// repeated .KWMsg.RecordString property_list = 3;
inline int ObjectRecordString::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectRecordString::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectRecordString::clear_property_list() {
  property_list_.Clear();
}
inline ::KWMsg::RecordString* ObjectRecordString::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordString.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString >*
ObjectRecordString::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectRecordString.property_list)
  return &property_list_;
}
inline const ::KWMsg::RecordString& ObjectRecordString::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::KWMsg::RecordString& ObjectRecordString::property_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordString.property_list)
  return _internal_property_list(index);
}
inline ::KWMsg::RecordString* ObjectRecordString::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::KWMsg::RecordString* ObjectRecordString::add_property_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectRecordString.property_list)
  return _internal_add_property_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString >&
ObjectRecordString::property_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectRecordString.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordObject

// .KWMsg.Ident player_id = 1;
inline bool ObjectRecordObject::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordObject::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordObject::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectRecordObject::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectRecordObject::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordObject.player_id)
  return _internal_player_id();
}
inline void ObjectRecordObject::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectRecordObject.player_id)
}
inline ::KWMsg::Ident* ObjectRecordObject::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordObject::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordObject.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordObject::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectRecordObject::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordObject.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectRecordObject::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordObject.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordObject::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordObject::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordObject.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordObject::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordObject.record_name)
}
inline std::string* ObjectRecordObject::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordObject.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& ObjectRecordObject::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordObject::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectRecordObject::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectRecordObject::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordObject.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectRecordObject::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordObject.record_name)
}

// repeated .KWMsg.RecordObject property_list = 3;
inline int ObjectRecordObject::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectRecordObject::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectRecordObject::clear_property_list() {
  property_list_.Clear();
}
inline ::KWMsg::RecordObject* ObjectRecordObject::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordObject.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject >*
ObjectRecordObject::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectRecordObject.property_list)
  return &property_list_;
}
inline const ::KWMsg::RecordObject& ObjectRecordObject::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::KWMsg::RecordObject& ObjectRecordObject::property_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordObject.property_list)
  return _internal_property_list(index);
}
inline ::KWMsg::RecordObject* ObjectRecordObject::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::KWMsg::RecordObject* ObjectRecordObject::add_property_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectRecordObject.property_list)
  return _internal_add_property_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject >&
ObjectRecordObject::property_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectRecordObject.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordVector2

// .KWMsg.Ident player_id = 1;
inline bool ObjectRecordVector2::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordVector2::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordVector2::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectRecordVector2::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectRecordVector2::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordVector2.player_id)
  return _internal_player_id();
}
inline void ObjectRecordVector2::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectRecordVector2.player_id)
}
inline ::KWMsg::Ident* ObjectRecordVector2::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordVector2::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordVector2.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordVector2::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectRecordVector2::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordVector2.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectRecordVector2::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordVector2.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordVector2::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordVector2::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordVector2.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordVector2::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordVector2.record_name)
}
inline std::string* ObjectRecordVector2::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordVector2.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& ObjectRecordVector2::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordVector2::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectRecordVector2::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectRecordVector2::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordVector2.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectRecordVector2::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordVector2.record_name)
}

// repeated .KWMsg.RecordVector2 property_list = 3;
inline int ObjectRecordVector2::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectRecordVector2::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectRecordVector2::clear_property_list() {
  property_list_.Clear();
}
inline ::KWMsg::RecordVector2* ObjectRecordVector2::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordVector2.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 >*
ObjectRecordVector2::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectRecordVector2.property_list)
  return &property_list_;
}
inline const ::KWMsg::RecordVector2& ObjectRecordVector2::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::KWMsg::RecordVector2& ObjectRecordVector2::property_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordVector2.property_list)
  return _internal_property_list(index);
}
inline ::KWMsg::RecordVector2* ObjectRecordVector2::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::KWMsg::RecordVector2* ObjectRecordVector2::add_property_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectRecordVector2.property_list)
  return _internal_add_property_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 >&
ObjectRecordVector2::property_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectRecordVector2.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordVector3

// .KWMsg.Ident player_id = 1;
inline bool ObjectRecordVector3::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordVector3::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordVector3::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectRecordVector3::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectRecordVector3::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordVector3.player_id)
  return _internal_player_id();
}
inline void ObjectRecordVector3::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectRecordVector3.player_id)
}
inline ::KWMsg::Ident* ObjectRecordVector3::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordVector3::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordVector3.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordVector3::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectRecordVector3::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordVector3.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectRecordVector3::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordVector3.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordVector3::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordVector3::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordVector3.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordVector3::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordVector3.record_name)
}
inline std::string* ObjectRecordVector3::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordVector3.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& ObjectRecordVector3::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordVector3::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectRecordVector3::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectRecordVector3::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordVector3.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectRecordVector3::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordVector3.record_name)
}

// repeated .KWMsg.RecordVector3 property_list = 3;
inline int ObjectRecordVector3::_internal_property_list_size() const {
  return property_list_.size();
}
inline int ObjectRecordVector3::property_list_size() const {
  return _internal_property_list_size();
}
inline void ObjectRecordVector3::clear_property_list() {
  property_list_.Clear();
}
inline ::KWMsg::RecordVector3* ObjectRecordVector3::mutable_property_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordVector3.property_list)
  return property_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 >*
ObjectRecordVector3::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectRecordVector3.property_list)
  return &property_list_;
}
inline const ::KWMsg::RecordVector3& ObjectRecordVector3::_internal_property_list(int index) const {
  return property_list_.Get(index);
}
inline const ::KWMsg::RecordVector3& ObjectRecordVector3::property_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordVector3.property_list)
  return _internal_property_list(index);
}
inline ::KWMsg::RecordVector3* ObjectRecordVector3::_internal_add_property_list() {
  return property_list_.Add();
}
inline ::KWMsg::RecordVector3* ObjectRecordVector3::add_property_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectRecordVector3.property_list)
  return _internal_add_property_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 >&
ObjectRecordVector3::property_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectRecordVector3.property_list)
  return property_list_;
}

// -------------------------------------------------------------------

// ObjectRecordSwap

// .KWMsg.Ident player_id = 1;
inline bool ObjectRecordSwap::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordSwap::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordSwap::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectRecordSwap::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectRecordSwap::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordSwap.player_id)
  return _internal_player_id();
}
inline void ObjectRecordSwap::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectRecordSwap.player_id)
}
inline ::KWMsg::Ident* ObjectRecordSwap::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordSwap::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordSwap.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordSwap::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectRecordSwap::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordSwap.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectRecordSwap::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordSwap.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordSwap::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordSwap::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordSwap.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordSwap::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordSwap.record_name)
}
inline std::string* ObjectRecordSwap::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordSwap.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& ObjectRecordSwap::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordSwap::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectRecordSwap::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectRecordSwap::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordSwap.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectRecordSwap::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordSwap.record_name)
}

// int32 row_origin = 3;
inline void ObjectRecordSwap::clear_row_origin() {
  row_origin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectRecordSwap::_internal_row_origin() const {
  return row_origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectRecordSwap::row_origin() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordSwap.row_origin)
  return _internal_row_origin();
}
inline void ObjectRecordSwap::_internal_set_row_origin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_origin_ = value;
}
inline void ObjectRecordSwap::set_row_origin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row_origin(value);
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordSwap.row_origin)
}

// int32 row_target = 4;
inline void ObjectRecordSwap::clear_row_target() {
  row_target_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectRecordSwap::_internal_row_target() const {
  return row_target_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectRecordSwap::row_target() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordSwap.row_target)
  return _internal_row_target();
}
inline void ObjectRecordSwap::_internal_set_row_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_target_ = value;
}
inline void ObjectRecordSwap::set_row_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row_target(value);
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordSwap.row_target)
}

// -------------------------------------------------------------------

// ObjectRecordAddRow

// .KWMsg.Ident player_id = 1;
inline bool ObjectRecordAddRow::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordAddRow::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordAddRow::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectRecordAddRow::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectRecordAddRow::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordAddRow.player_id)
  return _internal_player_id();
}
inline void ObjectRecordAddRow::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectRecordAddRow.player_id)
}
inline ::KWMsg::Ident* ObjectRecordAddRow::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordAddRow::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordAddRow.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordAddRow::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectRecordAddRow::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordAddRow.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectRecordAddRow::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordAddRow.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordAddRow::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordAddRow::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordAddRow.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordAddRow::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordAddRow.record_name)
}
inline std::string* ObjectRecordAddRow::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordAddRow.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& ObjectRecordAddRow::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordAddRow::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectRecordAddRow::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectRecordAddRow::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordAddRow.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectRecordAddRow::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordAddRow.record_name)
}

// repeated .KWMsg.RecordAddRowStruct row_data = 3;
inline int ObjectRecordAddRow::_internal_row_data_size() const {
  return row_data_.size();
}
inline int ObjectRecordAddRow::row_data_size() const {
  return _internal_row_data_size();
}
inline void ObjectRecordAddRow::clear_row_data() {
  row_data_.Clear();
}
inline ::KWMsg::RecordAddRowStruct* ObjectRecordAddRow::mutable_row_data(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordAddRow.row_data)
  return row_data_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordAddRowStruct >*
ObjectRecordAddRow::mutable_row_data() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectRecordAddRow.row_data)
  return &row_data_;
}
inline const ::KWMsg::RecordAddRowStruct& ObjectRecordAddRow::_internal_row_data(int index) const {
  return row_data_.Get(index);
}
inline const ::KWMsg::RecordAddRowStruct& ObjectRecordAddRow::row_data(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordAddRow.row_data)
  return _internal_row_data(index);
}
inline ::KWMsg::RecordAddRowStruct* ObjectRecordAddRow::_internal_add_row_data() {
  return row_data_.Add();
}
inline ::KWMsg::RecordAddRowStruct* ObjectRecordAddRow::add_row_data() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectRecordAddRow.row_data)
  return _internal_add_row_data();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordAddRowStruct >&
ObjectRecordAddRow::row_data() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectRecordAddRow.row_data)
  return row_data_;
}

// -------------------------------------------------------------------

// ObjectRecordRemove

// .KWMsg.Ident player_id = 1;
inline bool ObjectRecordRemove::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordRemove::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordRemove::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectRecordRemove::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectRecordRemove::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordRemove.player_id)
  return _internal_player_id();
}
inline void ObjectRecordRemove::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectRecordRemove.player_id)
}
inline ::KWMsg::Ident* ObjectRecordRemove::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordRemove::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordRemove.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordRemove::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectRecordRemove::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordRemove.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectRecordRemove::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordRemove.player_id)
}

// bytes record_name = 2;
inline void ObjectRecordRemove::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& ObjectRecordRemove::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordRemove.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ObjectRecordRemove::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordRemove.record_name)
}
inline std::string* ObjectRecordRemove::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordRemove.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& ObjectRecordRemove::_internal_record_name() const {
  return record_name_.Get();
}
inline void ObjectRecordRemove::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ObjectRecordRemove::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ObjectRecordRemove::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordRemove.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ObjectRecordRemove::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordRemove.record_name)
}

// repeated int32 remove_row = 3;
inline int ObjectRecordRemove::_internal_remove_row_size() const {
  return remove_row_.size();
}
inline int ObjectRecordRemove::remove_row_size() const {
  return _internal_remove_row_size();
}
inline void ObjectRecordRemove::clear_remove_row() {
  remove_row_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectRecordRemove::_internal_remove_row(int index) const {
  return remove_row_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectRecordRemove::remove_row(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordRemove.remove_row)
  return _internal_remove_row(index);
}
inline void ObjectRecordRemove::set_remove_row(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  remove_row_.Set(index, value);
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordRemove.remove_row)
}
inline void ObjectRecordRemove::_internal_add_remove_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  remove_row_.Add(value);
}
inline void ObjectRecordRemove::add_remove_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_remove_row(value);
  // @@protoc_insertion_point(field_add:KWMsg.ObjectRecordRemove.remove_row)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ObjectRecordRemove::_internal_remove_row() const {
  return remove_row_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
ObjectRecordRemove::remove_row() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectRecordRemove.remove_row)
  return _internal_remove_row();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ObjectRecordRemove::_internal_mutable_remove_row() {
  return &remove_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
ObjectRecordRemove::mutable_remove_row() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectRecordRemove.remove_row)
  return _internal_mutable_remove_row();
}

// -------------------------------------------------------------------

// ObjectPropertyList

// .KWMsg.Ident player_id = 1;
inline bool ObjectPropertyList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectPropertyList::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectPropertyList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectPropertyList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectPropertyList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyList.player_id)
  return _internal_player_id();
}
inline void ObjectPropertyList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectPropertyList.player_id)
}
inline ::KWMsg::Ident* ObjectPropertyList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectPropertyList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectPropertyList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectPropertyList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectPropertyList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyList.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectPropertyList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectPropertyList.player_id)
}

// repeated .KWMsg.PropertyInt property_int_list = 2;
inline int ObjectPropertyList::_internal_property_int_list_size() const {
  return property_int_list_.size();
}
inline int ObjectPropertyList::property_int_list_size() const {
  return _internal_property_int_list_size();
}
inline void ObjectPropertyList::clear_property_int_list() {
  property_int_list_.Clear();
}
inline ::KWMsg::PropertyInt* ObjectPropertyList::mutable_property_int_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyList.property_int_list)
  return property_int_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyInt >*
ObjectPropertyList::mutable_property_int_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectPropertyList.property_int_list)
  return &property_int_list_;
}
inline const ::KWMsg::PropertyInt& ObjectPropertyList::_internal_property_int_list(int index) const {
  return property_int_list_.Get(index);
}
inline const ::KWMsg::PropertyInt& ObjectPropertyList::property_int_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyList.property_int_list)
  return _internal_property_int_list(index);
}
inline ::KWMsg::PropertyInt* ObjectPropertyList::_internal_add_property_int_list() {
  return property_int_list_.Add();
}
inline ::KWMsg::PropertyInt* ObjectPropertyList::add_property_int_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectPropertyList.property_int_list)
  return _internal_add_property_int_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyInt >&
ObjectPropertyList::property_int_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectPropertyList.property_int_list)
  return property_int_list_;
}

// repeated .KWMsg.PropertyFloat property_float_list = 3;
inline int ObjectPropertyList::_internal_property_float_list_size() const {
  return property_float_list_.size();
}
inline int ObjectPropertyList::property_float_list_size() const {
  return _internal_property_float_list_size();
}
inline void ObjectPropertyList::clear_property_float_list() {
  property_float_list_.Clear();
}
inline ::KWMsg::PropertyFloat* ObjectPropertyList::mutable_property_float_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyList.property_float_list)
  return property_float_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyFloat >*
ObjectPropertyList::mutable_property_float_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectPropertyList.property_float_list)
  return &property_float_list_;
}
inline const ::KWMsg::PropertyFloat& ObjectPropertyList::_internal_property_float_list(int index) const {
  return property_float_list_.Get(index);
}
inline const ::KWMsg::PropertyFloat& ObjectPropertyList::property_float_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyList.property_float_list)
  return _internal_property_float_list(index);
}
inline ::KWMsg::PropertyFloat* ObjectPropertyList::_internal_add_property_float_list() {
  return property_float_list_.Add();
}
inline ::KWMsg::PropertyFloat* ObjectPropertyList::add_property_float_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectPropertyList.property_float_list)
  return _internal_add_property_float_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyFloat >&
ObjectPropertyList::property_float_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectPropertyList.property_float_list)
  return property_float_list_;
}

// repeated .KWMsg.PropertyString property_string_list = 4;
inline int ObjectPropertyList::_internal_property_string_list_size() const {
  return property_string_list_.size();
}
inline int ObjectPropertyList::property_string_list_size() const {
  return _internal_property_string_list_size();
}
inline void ObjectPropertyList::clear_property_string_list() {
  property_string_list_.Clear();
}
inline ::KWMsg::PropertyString* ObjectPropertyList::mutable_property_string_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyList.property_string_list)
  return property_string_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyString >*
ObjectPropertyList::mutable_property_string_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectPropertyList.property_string_list)
  return &property_string_list_;
}
inline const ::KWMsg::PropertyString& ObjectPropertyList::_internal_property_string_list(int index) const {
  return property_string_list_.Get(index);
}
inline const ::KWMsg::PropertyString& ObjectPropertyList::property_string_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyList.property_string_list)
  return _internal_property_string_list(index);
}
inline ::KWMsg::PropertyString* ObjectPropertyList::_internal_add_property_string_list() {
  return property_string_list_.Add();
}
inline ::KWMsg::PropertyString* ObjectPropertyList::add_property_string_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectPropertyList.property_string_list)
  return _internal_add_property_string_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyString >&
ObjectPropertyList::property_string_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectPropertyList.property_string_list)
  return property_string_list_;
}

// repeated .KWMsg.PropertyObject property_object_list = 5;
inline int ObjectPropertyList::_internal_property_object_list_size() const {
  return property_object_list_.size();
}
inline int ObjectPropertyList::property_object_list_size() const {
  return _internal_property_object_list_size();
}
inline void ObjectPropertyList::clear_property_object_list() {
  property_object_list_.Clear();
}
inline ::KWMsg::PropertyObject* ObjectPropertyList::mutable_property_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyList.property_object_list)
  return property_object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyObject >*
ObjectPropertyList::mutable_property_object_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectPropertyList.property_object_list)
  return &property_object_list_;
}
inline const ::KWMsg::PropertyObject& ObjectPropertyList::_internal_property_object_list(int index) const {
  return property_object_list_.Get(index);
}
inline const ::KWMsg::PropertyObject& ObjectPropertyList::property_object_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyList.property_object_list)
  return _internal_property_object_list(index);
}
inline ::KWMsg::PropertyObject* ObjectPropertyList::_internal_add_property_object_list() {
  return property_object_list_.Add();
}
inline ::KWMsg::PropertyObject* ObjectPropertyList::add_property_object_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectPropertyList.property_object_list)
  return _internal_add_property_object_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyObject >&
ObjectPropertyList::property_object_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectPropertyList.property_object_list)
  return property_object_list_;
}

// repeated .KWMsg.PropertyVector2 property_vector2_list = 6;
inline int ObjectPropertyList::_internal_property_vector2_list_size() const {
  return property_vector2_list_.size();
}
inline int ObjectPropertyList::property_vector2_list_size() const {
  return _internal_property_vector2_list_size();
}
inline void ObjectPropertyList::clear_property_vector2_list() {
  property_vector2_list_.Clear();
}
inline ::KWMsg::PropertyVector2* ObjectPropertyList::mutable_property_vector2_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyList.property_vector2_list)
  return property_vector2_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector2 >*
ObjectPropertyList::mutable_property_vector2_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectPropertyList.property_vector2_list)
  return &property_vector2_list_;
}
inline const ::KWMsg::PropertyVector2& ObjectPropertyList::_internal_property_vector2_list(int index) const {
  return property_vector2_list_.Get(index);
}
inline const ::KWMsg::PropertyVector2& ObjectPropertyList::property_vector2_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyList.property_vector2_list)
  return _internal_property_vector2_list(index);
}
inline ::KWMsg::PropertyVector2* ObjectPropertyList::_internal_add_property_vector2_list() {
  return property_vector2_list_.Add();
}
inline ::KWMsg::PropertyVector2* ObjectPropertyList::add_property_vector2_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectPropertyList.property_vector2_list)
  return _internal_add_property_vector2_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector2 >&
ObjectPropertyList::property_vector2_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectPropertyList.property_vector2_list)
  return property_vector2_list_;
}

// repeated .KWMsg.PropertyVector3 property_vector3_list = 7;
inline int ObjectPropertyList::_internal_property_vector3_list_size() const {
  return property_vector3_list_.size();
}
inline int ObjectPropertyList::property_vector3_list_size() const {
  return _internal_property_vector3_list_size();
}
inline void ObjectPropertyList::clear_property_vector3_list() {
  property_vector3_list_.Clear();
}
inline ::KWMsg::PropertyVector3* ObjectPropertyList::mutable_property_vector3_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectPropertyList.property_vector3_list)
  return property_vector3_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector3 >*
ObjectPropertyList::mutable_property_vector3_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectPropertyList.property_vector3_list)
  return &property_vector3_list_;
}
inline const ::KWMsg::PropertyVector3& ObjectPropertyList::_internal_property_vector3_list(int index) const {
  return property_vector3_list_.Get(index);
}
inline const ::KWMsg::PropertyVector3& ObjectPropertyList::property_vector3_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectPropertyList.property_vector3_list)
  return _internal_property_vector3_list(index);
}
inline ::KWMsg::PropertyVector3* ObjectPropertyList::_internal_add_property_vector3_list() {
  return property_vector3_list_.Add();
}
inline ::KWMsg::PropertyVector3* ObjectPropertyList::add_property_vector3_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectPropertyList.property_vector3_list)
  return _internal_add_property_vector3_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PropertyVector3 >&
ObjectPropertyList::property_vector3_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectPropertyList.property_vector3_list)
  return property_vector3_list_;
}

// -------------------------------------------------------------------

// MultiObjectPropertyList

// repeated .KWMsg.ObjectPropertyList multi_player_property = 1;
inline int MultiObjectPropertyList::_internal_multi_player_property_size() const {
  return multi_player_property_.size();
}
inline int MultiObjectPropertyList::multi_player_property_size() const {
  return _internal_multi_player_property_size();
}
inline void MultiObjectPropertyList::clear_multi_player_property() {
  multi_player_property_.Clear();
}
inline ::KWMsg::ObjectPropertyList* MultiObjectPropertyList::mutable_multi_player_property(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.MultiObjectPropertyList.multi_player_property)
  return multi_player_property_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectPropertyList >*
MultiObjectPropertyList::mutable_multi_player_property() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.MultiObjectPropertyList.multi_player_property)
  return &multi_player_property_;
}
inline const ::KWMsg::ObjectPropertyList& MultiObjectPropertyList::_internal_multi_player_property(int index) const {
  return multi_player_property_.Get(index);
}
inline const ::KWMsg::ObjectPropertyList& MultiObjectPropertyList::multi_player_property(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.MultiObjectPropertyList.multi_player_property)
  return _internal_multi_player_property(index);
}
inline ::KWMsg::ObjectPropertyList* MultiObjectPropertyList::_internal_add_multi_player_property() {
  return multi_player_property_.Add();
}
inline ::KWMsg::ObjectPropertyList* MultiObjectPropertyList::add_multi_player_property() {
  // @@protoc_insertion_point(field_add:KWMsg.MultiObjectPropertyList.multi_player_property)
  return _internal_add_multi_player_property();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectPropertyList >&
MultiObjectPropertyList::multi_player_property() const {
  // @@protoc_insertion_point(field_list:KWMsg.MultiObjectPropertyList.multi_player_property)
  return multi_player_property_;
}

// -------------------------------------------------------------------

// ObjectRecordList

// .KWMsg.Ident player_id = 1;
inline bool ObjectRecordList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordList::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordList::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectRecordList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectRecordList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordList.player_id)
  return _internal_player_id();
}
inline void ObjectRecordList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectRecordList.player_id)
}
inline ::KWMsg::Ident* ObjectRecordList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectRecordList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordList.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectRecordList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordList.player_id)
}

// repeated .KWMsg.ObjectRecordBase record_list = 2;
inline int ObjectRecordList::_internal_record_list_size() const {
  return record_list_.size();
}
inline int ObjectRecordList::record_list_size() const {
  return _internal_record_list_size();
}
inline void ObjectRecordList::clear_record_list() {
  record_list_.Clear();
}
inline ::KWMsg::ObjectRecordBase* ObjectRecordList::mutable_record_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordList.record_list)
  return record_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectRecordBase >*
ObjectRecordList::mutable_record_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ObjectRecordList.record_list)
  return &record_list_;
}
inline const ::KWMsg::ObjectRecordBase& ObjectRecordList::_internal_record_list(int index) const {
  return record_list_.Get(index);
}
inline const ::KWMsg::ObjectRecordBase& ObjectRecordList::record_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordList.record_list)
  return _internal_record_list(index);
}
inline ::KWMsg::ObjectRecordBase* ObjectRecordList::_internal_add_record_list() {
  return record_list_.Add();
}
inline ::KWMsg::ObjectRecordBase* ObjectRecordList::add_record_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ObjectRecordList.record_list)
  return _internal_add_record_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectRecordBase >&
ObjectRecordList::record_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ObjectRecordList.record_list)
  return record_list_;
}

// -------------------------------------------------------------------

// MultiObjectRecordList

// repeated .KWMsg.ObjectRecordList multi_player_record = 1;
inline int MultiObjectRecordList::_internal_multi_player_record_size() const {
  return multi_player_record_.size();
}
inline int MultiObjectRecordList::multi_player_record_size() const {
  return _internal_multi_player_record_size();
}
inline void MultiObjectRecordList::clear_multi_player_record() {
  multi_player_record_.Clear();
}
inline ::KWMsg::ObjectRecordList* MultiObjectRecordList::mutable_multi_player_record(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.MultiObjectRecordList.multi_player_record)
  return multi_player_record_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectRecordList >*
MultiObjectRecordList::mutable_multi_player_record() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.MultiObjectRecordList.multi_player_record)
  return &multi_player_record_;
}
inline const ::KWMsg::ObjectRecordList& MultiObjectRecordList::_internal_multi_player_record(int index) const {
  return multi_player_record_.Get(index);
}
inline const ::KWMsg::ObjectRecordList& MultiObjectRecordList::multi_player_record(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.MultiObjectRecordList.multi_player_record)
  return _internal_multi_player_record(index);
}
inline ::KWMsg::ObjectRecordList* MultiObjectRecordList::_internal_add_multi_player_record() {
  return multi_player_record_.Add();
}
inline ::KWMsg::ObjectRecordList* MultiObjectRecordList::add_multi_player_record() {
  // @@protoc_insertion_point(field_add:KWMsg.MultiObjectRecordList.multi_player_record)
  return _internal_add_multi_player_record();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ObjectRecordList >&
MultiObjectRecordList::multi_player_record() const {
  // @@protoc_insertion_point(field_list:KWMsg.MultiObjectRecordList.multi_player_record)
  return multi_player_record_;
}

// -------------------------------------------------------------------

// ObjectRecordPagination

// .KWMsg.Ident player_id = 1;
inline bool ObjectRecordPagination::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ObjectRecordPagination::has_player_id() const {
  return _internal_has_player_id();
}
inline void ObjectRecordPagination::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& ObjectRecordPagination::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ObjectRecordPagination::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordPagination.player_id)
  return _internal_player_id();
}
inline void ObjectRecordPagination::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectRecordPagination.player_id)
}
inline ::KWMsg::Ident* ObjectRecordPagination::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordPagination::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordPagination.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ObjectRecordPagination::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ObjectRecordPagination::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordPagination.player_id)
  return _internal_mutable_player_id();
}
inline void ObjectRecordPagination::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordPagination.player_id)
}

// .KWMsg.ObjectRecordPagination.ERetRecordType ret_type = 2;
inline void ObjectRecordPagination::clear_ret_type() {
  ret_type_ = 0;
}
inline ::KWMsg::ObjectRecordPagination_ERetRecordType ObjectRecordPagination::_internal_ret_type() const {
  return static_cast< ::KWMsg::ObjectRecordPagination_ERetRecordType >(ret_type_);
}
inline ::KWMsg::ObjectRecordPagination_ERetRecordType ObjectRecordPagination::ret_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordPagination.ret_type)
  return _internal_ret_type();
}
inline void ObjectRecordPagination::_internal_set_ret_type(::KWMsg::ObjectRecordPagination_ERetRecordType value) {
  
  ret_type_ = value;
}
inline void ObjectRecordPagination::set_ret_type(::KWMsg::ObjectRecordPagination_ERetRecordType value) {
  _internal_set_ret_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordPagination.ret_type)
}

// int32 cursor_prev = 3;
inline void ObjectRecordPagination::clear_cursor_prev() {
  cursor_prev_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectRecordPagination::_internal_cursor_prev() const {
  return cursor_prev_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectRecordPagination::cursor_prev() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordPagination.cursor_prev)
  return _internal_cursor_prev();
}
inline void ObjectRecordPagination::_internal_set_cursor_prev(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cursor_prev_ = value;
}
inline void ObjectRecordPagination::set_cursor_prev(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cursor_prev(value);
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordPagination.cursor_prev)
}

// int32 cursor_next = 4;
inline void ObjectRecordPagination::clear_cursor_next() {
  cursor_next_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectRecordPagination::_internal_cursor_next() const {
  return cursor_next_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectRecordPagination::cursor_next() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordPagination.cursor_next)
  return _internal_cursor_next();
}
inline void ObjectRecordPagination::_internal_set_cursor_next(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cursor_next_ = value;
}
inline void ObjectRecordPagination::set_cursor_next(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cursor_next(value);
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordPagination.cursor_next)
}

// bool is_end = 5;
inline void ObjectRecordPagination::clear_is_end() {
  is_end_ = false;
}
inline bool ObjectRecordPagination::_internal_is_end() const {
  return is_end_;
}
inline bool ObjectRecordPagination::is_end() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordPagination.is_end)
  return _internal_is_end();
}
inline void ObjectRecordPagination::_internal_set_is_end(bool value) {
  
  is_end_ = value;
}
inline void ObjectRecordPagination::set_is_end(bool value) {
  _internal_set_is_end(value);
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordPagination.is_end)
}

// int32 count = 6;
inline void ObjectRecordPagination::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectRecordPagination::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ObjectRecordPagination::count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordPagination.count)
  return _internal_count();
}
inline void ObjectRecordPagination::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ObjectRecordPagination::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ObjectRecordPagination.count)
}

// .KWMsg.ObjectRecordBase record_list = 7;
inline bool ObjectRecordPagination::_internal_has_record_list() const {
  return this != internal_default_instance() && record_list_ != nullptr;
}
inline bool ObjectRecordPagination::has_record_list() const {
  return _internal_has_record_list();
}
inline void ObjectRecordPagination::clear_record_list() {
  if (GetArenaForAllocation() == nullptr && record_list_ != nullptr) {
    delete record_list_;
  }
  record_list_ = nullptr;
}
inline const ::KWMsg::ObjectRecordBase& ObjectRecordPagination::_internal_record_list() const {
  const ::KWMsg::ObjectRecordBase* p = record_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::ObjectRecordBase&>(
      ::KWMsg::_ObjectRecordBase_default_instance_);
}
inline const ::KWMsg::ObjectRecordBase& ObjectRecordPagination::record_list() const {
  // @@protoc_insertion_point(field_get:KWMsg.ObjectRecordPagination.record_list)
  return _internal_record_list();
}
inline void ObjectRecordPagination::unsafe_arena_set_allocated_record_list(
    ::KWMsg::ObjectRecordBase* record_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_list_);
  }
  record_list_ = record_list;
  if (record_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ObjectRecordPagination.record_list)
}
inline ::KWMsg::ObjectRecordBase* ObjectRecordPagination::release_record_list() {
  
  ::KWMsg::ObjectRecordBase* temp = record_list_;
  record_list_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::ObjectRecordBase* ObjectRecordPagination::unsafe_arena_release_record_list() {
  // @@protoc_insertion_point(field_release:KWMsg.ObjectRecordPagination.record_list)
  
  ::KWMsg::ObjectRecordBase* temp = record_list_;
  record_list_ = nullptr;
  return temp;
}
inline ::KWMsg::ObjectRecordBase* ObjectRecordPagination::_internal_mutable_record_list() {
  
  if (record_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::ObjectRecordBase>(GetArenaForAllocation());
    record_list_ = p;
  }
  return record_list_;
}
inline ::KWMsg::ObjectRecordBase* ObjectRecordPagination::mutable_record_list() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ObjectRecordPagination.record_list)
  return _internal_mutable_record_list();
}
inline void ObjectRecordPagination::set_allocated_record_list(::KWMsg::ObjectRecordBase* record_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete record_list_;
  }
  if (record_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::ObjectRecordBase>::GetOwningArena(record_list);
    if (message_arena != submessage_arena) {
      record_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_list, submessage_arena);
    }
    
  } else {
    
  }
  record_list_ = record_list;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ObjectRecordPagination.record_list)
}

// -------------------------------------------------------------------

// DeviceInfo

// int32 os = 1;
inline void DeviceInfo::clear_os() {
  os_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceInfo::_internal_os() const {
  return os_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceInfo::os() const {
  // @@protoc_insertion_point(field_get:KWMsg.DeviceInfo.os)
  return _internal_os();
}
inline void DeviceInfo::_internal_set_os(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  os_ = value;
}
inline void DeviceInfo::set_os(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:KWMsg.DeviceInfo.os)
}

// bytes platform = 2;
inline void DeviceInfo::clear_platform() {
  platform_.ClearToEmpty();
}
inline const std::string& DeviceInfo::platform() const {
  // @@protoc_insertion_point(field_get:KWMsg.DeviceInfo.platform)
  return _internal_platform();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_platform(ArgT0&& arg0, ArgT... args) {
 
 platform_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.DeviceInfo.platform)
}
inline std::string* DeviceInfo::mutable_platform() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DeviceInfo.platform)
  return _internal_mutable_platform();
}
inline const std::string& DeviceInfo::_internal_platform() const {
  return platform_.Get();
}
inline void DeviceInfo::_internal_set_platform(const std::string& value) {
  
  platform_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_platform() {
  
  return platform_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_platform() {
  // @@protoc_insertion_point(field_release:KWMsg.DeviceInfo.platform)
  return platform_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_platform(std::string* platform) {
  if (platform != nullptr) {
    
  } else {
    
  }
  platform_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), platform,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DeviceInfo.platform)
}

// bytes media_id = 3;
inline void DeviceInfo::clear_media_id() {
  media_id_.ClearToEmpty();
}
inline const std::string& DeviceInfo::media_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.DeviceInfo.media_id)
  return _internal_media_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_media_id(ArgT0&& arg0, ArgT... args) {
 
 media_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.DeviceInfo.media_id)
}
inline std::string* DeviceInfo::mutable_media_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DeviceInfo.media_id)
  return _internal_mutable_media_id();
}
inline const std::string& DeviceInfo::_internal_media_id() const {
  return media_id_.Get();
}
inline void DeviceInfo::_internal_set_media_id(const std::string& value) {
  
  media_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_media_id() {
  
  return media_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_media_id() {
  // @@protoc_insertion_point(field_release:KWMsg.DeviceInfo.media_id)
  return media_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_media_id(std::string* media_id) {
  if (media_id != nullptr) {
    
  } else {
    
  }
  media_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), media_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DeviceInfo.media_id)
}

// bytes mac = 4;
inline void DeviceInfo::clear_mac() {
  mac_.ClearToEmpty();
}
inline const std::string& DeviceInfo::mac() const {
  // @@protoc_insertion_point(field_get:KWMsg.DeviceInfo.mac)
  return _internal_mac();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_mac(ArgT0&& arg0, ArgT... args) {
 
 mac_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.DeviceInfo.mac)
}
inline std::string* DeviceInfo::mutable_mac() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DeviceInfo.mac)
  return _internal_mutable_mac();
}
inline const std::string& DeviceInfo::_internal_mac() const {
  return mac_.Get();
}
inline void DeviceInfo::_internal_set_mac(const std::string& value) {
  
  mac_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_mac() {
  
  return mac_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_mac() {
  // @@protoc_insertion_point(field_release:KWMsg.DeviceInfo.mac)
  return mac_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_mac(std::string* mac) {
  if (mac != nullptr) {
    
  } else {
    
  }
  mac_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mac,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DeviceInfo.mac)
}

// bytes ip = 5;
inline void DeviceInfo::clear_ip() {
  ip_.ClearToEmpty();
}
inline const std::string& DeviceInfo::ip() const {
  // @@protoc_insertion_point(field_get:KWMsg.DeviceInfo.ip)
  return _internal_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_ip(ArgT0&& arg0, ArgT... args) {
 
 ip_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.DeviceInfo.ip)
}
inline std::string* DeviceInfo::mutable_ip() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DeviceInfo.ip)
  return _internal_mutable_ip();
}
inline const std::string& DeviceInfo::_internal_ip() const {
  return ip_.Get();
}
inline void DeviceInfo::_internal_set_ip(const std::string& value) {
  
  ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_ip() {
  
  return ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_ip() {
  // @@protoc_insertion_point(field_release:KWMsg.DeviceInfo.ip)
  return ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_ip(std::string* ip) {
  if (ip != nullptr) {
    
  } else {
    
  }
  ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DeviceInfo.ip)
}

// bytes device_model = 6;
inline void DeviceInfo::clear_device_model() {
  device_model_.ClearToEmpty();
}
inline const std::string& DeviceInfo::device_model() const {
  // @@protoc_insertion_point(field_get:KWMsg.DeviceInfo.device_model)
  return _internal_device_model();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_device_model(ArgT0&& arg0, ArgT... args) {
 
 device_model_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.DeviceInfo.device_model)
}
inline std::string* DeviceInfo::mutable_device_model() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DeviceInfo.device_model)
  return _internal_mutable_device_model();
}
inline const std::string& DeviceInfo::_internal_device_model() const {
  return device_model_.Get();
}
inline void DeviceInfo::_internal_set_device_model(const std::string& value) {
  
  device_model_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_device_model() {
  
  return device_model_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_device_model() {
  // @@protoc_insertion_point(field_release:KWMsg.DeviceInfo.device_model)
  return device_model_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_device_model(std::string* device_model) {
  if (device_model != nullptr) {
    
  } else {
    
  }
  device_model_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_model,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DeviceInfo.device_model)
}

// bytes device_sys = 7;
inline void DeviceInfo::clear_device_sys() {
  device_sys_.ClearToEmpty();
}
inline const std::string& DeviceInfo::device_sys() const {
  // @@protoc_insertion_point(field_get:KWMsg.DeviceInfo.device_sys)
  return _internal_device_sys();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_device_sys(ArgT0&& arg0, ArgT... args) {
 
 device_sys_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.DeviceInfo.device_sys)
}
inline std::string* DeviceInfo::mutable_device_sys() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DeviceInfo.device_sys)
  return _internal_mutable_device_sys();
}
inline const std::string& DeviceInfo::_internal_device_sys() const {
  return device_sys_.Get();
}
inline void DeviceInfo::_internal_set_device_sys(const std::string& value) {
  
  device_sys_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_device_sys() {
  
  return device_sys_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_device_sys() {
  // @@protoc_insertion_point(field_release:KWMsg.DeviceInfo.device_sys)
  return device_sys_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_device_sys(std::string* device_sys) {
  if (device_sys != nullptr) {
    
  } else {
    
  }
  device_sys_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_sys,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DeviceInfo.device_sys)
}

// int32 device_ram = 8;
inline void DeviceInfo::clear_device_ram() {
  device_ram_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceInfo::_internal_device_ram() const {
  return device_ram_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DeviceInfo::device_ram() const {
  // @@protoc_insertion_point(field_get:KWMsg.DeviceInfo.device_ram)
  return _internal_device_ram();
}
inline void DeviceInfo::_internal_set_device_ram(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  device_ram_ = value;
}
inline void DeviceInfo::set_device_ram(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_device_ram(value);
  // @@protoc_insertion_point(field_set:KWMsg.DeviceInfo.device_ram)
}

// bytes idfa = 9;
inline void DeviceInfo::clear_idfa() {
  idfa_.ClearToEmpty();
}
inline const std::string& DeviceInfo::idfa() const {
  // @@protoc_insertion_point(field_get:KWMsg.DeviceInfo.idfa)
  return _internal_idfa();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_idfa(ArgT0&& arg0, ArgT... args) {
 
 idfa_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.DeviceInfo.idfa)
}
inline std::string* DeviceInfo::mutable_idfa() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DeviceInfo.idfa)
  return _internal_mutable_idfa();
}
inline const std::string& DeviceInfo::_internal_idfa() const {
  return idfa_.Get();
}
inline void DeviceInfo::_internal_set_idfa(const std::string& value) {
  
  idfa_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_idfa() {
  
  return idfa_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_idfa() {
  // @@protoc_insertion_point(field_release:KWMsg.DeviceInfo.idfa)
  return idfa_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_idfa(std::string* idfa) {
  if (idfa != nullptr) {
    
  } else {
    
  }
  idfa_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), idfa,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DeviceInfo.idfa)
}

// bytes device_id = 10;
inline void DeviceInfo::clear_device_id() {
  device_id_.ClearToEmpty();
}
inline const std::string& DeviceInfo::device_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.DeviceInfo.device_id)
  return _internal_device_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DeviceInfo::set_device_id(ArgT0&& arg0, ArgT... args) {
 
 device_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.DeviceInfo.device_id)
}
inline std::string* DeviceInfo::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DeviceInfo.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& DeviceInfo::_internal_device_id() const {
  return device_id_.Get();
}
inline void DeviceInfo::_internal_set_device_id(const std::string& value) {
  
  device_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DeviceInfo::_internal_mutable_device_id() {
  
  return device_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DeviceInfo::release_device_id() {
  // @@protoc_insertion_point(field_release:KWMsg.DeviceInfo.device_id)
  return device_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DeviceInfo::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DeviceInfo.device_id)
}

// -------------------------------------------------------------------

// MsgBase

// .KWMsg.Ident player_id = 1;
inline bool MsgBase::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool MsgBase::has_player_id() const {
  return _internal_has_player_id();
}
inline void MsgBase::clear_player_id() {
  if (GetArenaForAllocation() == nullptr && player_id_ != nullptr) {
    delete player_id_;
  }
  player_id_ = nullptr;
}
inline const ::KWMsg::Ident& MsgBase::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& MsgBase::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.MsgBase.player_id)
  return _internal_player_id();
}
inline void MsgBase::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.MsgBase.player_id)
}
inline ::KWMsg::Ident* MsgBase::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* MsgBase::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.MsgBase.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* MsgBase::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* MsgBase::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.MsgBase.player_id)
  return _internal_mutable_player_id();
}
inline void MsgBase::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_id_;
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(player_id);
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.MsgBase.player_id)
}

// bytes msg_data = 2;
inline void MsgBase::clear_msg_data() {
  msg_data_.ClearToEmpty();
}
inline const std::string& MsgBase::msg_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.MsgBase.msg_data)
  return _internal_msg_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MsgBase::set_msg_data(ArgT0&& arg0, ArgT... args) {
 
 msg_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.MsgBase.msg_data)
}
inline std::string* MsgBase::mutable_msg_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.MsgBase.msg_data)
  return _internal_mutable_msg_data();
}
inline const std::string& MsgBase::_internal_msg_data() const {
  return msg_data_.Get();
}
inline void MsgBase::_internal_set_msg_data(const std::string& value) {
  
  msg_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MsgBase::_internal_mutable_msg_data() {
  
  return msg_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MsgBase::release_msg_data() {
  // @@protoc_insertion_point(field_release:KWMsg.MsgBase.msg_data)
  return msg_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MsgBase::set_allocated_msg_data(std::string* msg_data) {
  if (msg_data != nullptr) {
    
  } else {
    
  }
  msg_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msg_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.MsgBase.msg_data)
}

// repeated .KWMsg.Ident player_client_list = 3;
inline int MsgBase::_internal_player_client_list_size() const {
  return player_client_list_.size();
}
inline int MsgBase::player_client_list_size() const {
  return _internal_player_client_list_size();
}
inline void MsgBase::clear_player_client_list() {
  player_client_list_.Clear();
}
inline ::KWMsg::Ident* MsgBase::mutable_player_client_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.MsgBase.player_client_list)
  return player_client_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
MsgBase::mutable_player_client_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.MsgBase.player_client_list)
  return &player_client_list_;
}
inline const ::KWMsg::Ident& MsgBase::_internal_player_client_list(int index) const {
  return player_client_list_.Get(index);
}
inline const ::KWMsg::Ident& MsgBase::player_client_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.MsgBase.player_client_list)
  return _internal_player_client_list(index);
}
inline ::KWMsg::Ident* MsgBase::_internal_add_player_client_list() {
  return player_client_list_.Add();
}
inline ::KWMsg::Ident* MsgBase::add_player_client_list() {
  // @@protoc_insertion_point(field_add:KWMsg.MsgBase.player_client_list)
  return _internal_add_player_client_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
MsgBase::player_client_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.MsgBase.player_client_list)
  return player_client_list_;
}

// .KWMsg.Ident hash_ident = 4;
inline bool MsgBase::_internal_has_hash_ident() const {
  return this != internal_default_instance() && hash_ident_ != nullptr;
}
inline bool MsgBase::has_hash_ident() const {
  return _internal_has_hash_ident();
}
inline void MsgBase::clear_hash_ident() {
  if (GetArenaForAllocation() == nullptr && hash_ident_ != nullptr) {
    delete hash_ident_;
  }
  hash_ident_ = nullptr;
}
inline const ::KWMsg::Ident& MsgBase::_internal_hash_ident() const {
  const ::KWMsg::Ident* p = hash_ident_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& MsgBase::hash_ident() const {
  // @@protoc_insertion_point(field_get:KWMsg.MsgBase.hash_ident)
  return _internal_hash_ident();
}
inline void MsgBase::unsafe_arena_set_allocated_hash_ident(
    ::KWMsg::Ident* hash_ident) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(hash_ident_);
  }
  hash_ident_ = hash_ident;
  if (hash_ident) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.MsgBase.hash_ident)
}
inline ::KWMsg::Ident* MsgBase::release_hash_ident() {
  
  ::KWMsg::Ident* temp = hash_ident_;
  hash_ident_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* MsgBase::unsafe_arena_release_hash_ident() {
  // @@protoc_insertion_point(field_release:KWMsg.MsgBase.hash_ident)
  
  ::KWMsg::Ident* temp = hash_ident_;
  hash_ident_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* MsgBase::_internal_mutable_hash_ident() {
  
  if (hash_ident_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    hash_ident_ = p;
  }
  return hash_ident_;
}
inline ::KWMsg::Ident* MsgBase::mutable_hash_ident() {
  // @@protoc_insertion_point(field_mutable:KWMsg.MsgBase.hash_ident)
  return _internal_mutable_hash_ident();
}
inline void MsgBase::set_allocated_hash_ident(::KWMsg::Ident* hash_ident) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete hash_ident_;
  }
  if (hash_ident) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::Ident>::GetOwningArena(hash_ident);
    if (message_arena != submessage_arena) {
      hash_ident = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, hash_ident, submessage_arena);
    }
    
  } else {
    
  }
  hash_ident_ = hash_ident;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.MsgBase.hash_ident)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KWMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KWMsg::ObjectRecordPagination_ERetRecordType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::ObjectRecordPagination_ERetRecordType>() {
  return ::KWMsg::ObjectRecordPagination_ERetRecordType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kwmsgbase_2eproto
