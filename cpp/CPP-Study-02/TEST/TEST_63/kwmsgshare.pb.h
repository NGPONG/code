// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: kwmsgshare.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_kwmsgshare_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_kwmsgshare_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "kwmsgdefine.pb.h"
#include "kwmsgbase.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_kwmsgshare_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_kwmsgshare_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[338]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_kwmsgshare_2eproto;
namespace KWMsg {
class AckActiveMissionOperation;
struct AckActiveMissionOperationDefaultTypeInternal;
extern AckActiveMissionOperationDefaultTypeInternal _AckActiveMissionOperation_default_instance_;
class AckAddChatGroupUser;
struct AckAddChatGroupUserDefaultTypeInternal;
extern AckAddChatGroupUserDefaultTypeInternal _AckAddChatGroupUser_default_instance_;
class AckAddFriend;
struct AckAddFriendDefaultTypeInternal;
extern AckAddFriendDefaultTypeInternal _AckAddFriend_default_instance_;
class AckAdjBotarenaDefensiveTeam;
struct AckAdjBotarenaDefensiveTeamDefaultTypeInternal;
extern AckAdjBotarenaDefensiveTeamDefaultTypeInternal _AckAdjBotarenaDefensiveTeam_default_instance_;
class AckAppliedCommunityList;
struct AckAppliedCommunityListDefaultTypeInternal;
extern AckAppliedCommunityListDefaultTypeInternal _AckAppliedCommunityList_default_instance_;
class AckAppliedFriendList;
struct AckAppliedFriendListDefaultTypeInternal;
extern AckAppliedFriendListDefaultTypeInternal _AckAppliedFriendList_default_instance_;
class AckAppliedPlayerList;
struct AckAppliedPlayerListDefaultTypeInternal;
extern AckAppliedPlayerListDefaultTypeInternal _AckAppliedPlayerList_default_instance_;
class AckApplyJoinCommunity;
struct AckApplyJoinCommunityDefaultTypeInternal;
extern AckApplyJoinCommunityDefaultTypeInternal _AckApplyJoinCommunity_default_instance_;
class AckBattleAdjWitchTeam;
struct AckBattleAdjWitchTeamDefaultTypeInternal;
extern AckBattleAdjWitchTeamDefaultTypeInternal _AckBattleAdjWitchTeam_default_instance_;
class AckBattleBuyWitchTeam;
struct AckBattleBuyWitchTeamDefaultTypeInternal;
extern AckBattleBuyWitchTeamDefaultTypeInternal _AckBattleBuyWitchTeam_default_instance_;
class AckBattleChangeWitchTeamName;
struct AckBattleChangeWitchTeamNameDefaultTypeInternal;
extern AckBattleChangeWitchTeamNameDefaultTypeInternal _AckBattleChangeWitchTeamName_default_instance_;
class AckBattlePreparedInfo;
struct AckBattlePreparedInfoDefaultTypeInternal;
extern AckBattlePreparedInfoDefaultTypeInternal _AckBattlePreparedInfo_default_instance_;
class AckBattleQuickConfigWitchTeam;
struct AckBattleQuickConfigWitchTeamDefaultTypeInternal;
extern AckBattleQuickConfigWitchTeamDefaultTypeInternal _AckBattleQuickConfigWitchTeam_default_instance_;
class AckBattleResetWitchTeam;
struct AckBattleResetWitchTeamDefaultTypeInternal;
extern AckBattleResetWitchTeamDefaultTypeInternal _AckBattleResetWitchTeam_default_instance_;
class AckBlacklist;
struct AckBlacklistDefaultTypeInternal;
extern AckBlacklistDefaultTypeInternal _AckBlacklist_default_instance_;
class AckBlacklistOpt;
struct AckBlacklistOptDefaultTypeInternal;
extern AckBlacklistOptDefaultTypeInternal _AckBlacklistOpt_default_instance_;
class AckBlackmartCommodityList;
struct AckBlackmartCommodityListDefaultTypeInternal;
extern AckBlackmartCommodityListDefaultTypeInternal _AckBlackmartCommodityList_default_instance_;
class AckBuyBlackmartCommodity;
struct AckBuyBlackmartCommodityDefaultTypeInternal;
extern AckBuyBlackmartCommodityDefaultTypeInternal _AckBuyBlackmartCommodity_default_instance_;
class AckBuyPower;
struct AckBuyPowerDefaultTypeInternal;
extern AckBuyPowerDefaultTypeInternal _AckBuyPower_default_instance_;
class AckBuyProduct;
struct AckBuyProductDefaultTypeInternal;
extern AckBuyProductDefaultTypeInternal _AckBuyProduct_default_instance_;
class AckBuyShabowToken;
struct AckBuyShabowTokenDefaultTypeInternal;
extern AckBuyShabowTokenDefaultTypeInternal _AckBuyShabowToken_default_instance_;
class AckCallbackRecharge;
struct AckCallbackRechargeDefaultTypeInternal;
extern AckCallbackRechargeDefaultTypeInternal _AckCallbackRecharge_default_instance_;
class AckCancelJoinCommunity;
struct AckCancelJoinCommunityDefaultTypeInternal;
extern AckCancelJoinCommunityDefaultTypeInternal _AckCancelJoinCommunity_default_instance_;
class AckChapterRewardTipOk;
struct AckChapterRewardTipOkDefaultTypeInternal;
extern AckChapterRewardTipOkDefaultTypeInternal _AckChapterRewardTipOk_default_instance_;
class AckCheckChatText;
struct AckCheckChatTextDefaultTypeInternal;
extern AckCheckChatTextDefaultTypeInternal _AckCheckChatText_default_instance_;
class AckClickBotarenaPromptForm;
struct AckClickBotarenaPromptFormDefaultTypeInternal;
extern AckClickBotarenaPromptFormDefaultTypeInternal _AckClickBotarenaPromptForm_default_instance_;
class AckCollectWitch;
struct AckCollectWitchDefaultTypeInternal;
extern AckCollectWitchDefaultTypeInternal _AckCollectWitch_default_instance_;
class AckCollegeAnswer;
struct AckCollegeAnswerDefaultTypeInternal;
extern AckCollegeAnswerDefaultTypeInternal _AckCollegeAnswer_default_instance_;
class AckCollegeDrama;
struct AckCollegeDramaDefaultTypeInternal;
extern AckCollegeDramaDefaultTypeInternal _AckCollegeDrama_default_instance_;
class AckCollegeExamExit;
struct AckCollegeExamExitDefaultTypeInternal;
extern AckCollegeExamExitDefaultTypeInternal _AckCollegeExamExit_default_instance_;
class AckCollegeReward;
struct AckCollegeRewardDefaultTypeInternal;
extern AckCollegeRewardDefaultTypeInternal _AckCollegeReward_default_instance_;
class AckCollegeStartExam;
struct AckCollegeStartExamDefaultTypeInternal;
extern AckCollegeStartExamDefaultTypeInternal _AckCollegeStartExam_default_instance_;
class AckCollegeTaskAction;
struct AckCollegeTaskActionDefaultTypeInternal;
extern AckCollegeTaskActionDefaultTypeInternal _AckCollegeTaskAction_default_instance_;
class AckCollegeTaskCountdown;
struct AckCollegeTaskCountdownDefaultTypeInternal;
extern AckCollegeTaskCountdownDefaultTypeInternal _AckCollegeTaskCountdown_default_instance_;
class AckCommunitySignIn;
struct AckCommunitySignInDefaultTypeInternal;
extern AckCommunitySignInDefaultTypeInternal _AckCommunitySignIn_default_instance_;
class AckCreateChatGroup;
struct AckCreateChatGroupDefaultTypeInternal;
extern AckCreateChatGroupDefaultTypeInternal _AckCreateChatGroup_default_instance_;
class AckCreateChatroom;
struct AckCreateChatroomDefaultTypeInternal;
extern AckCreateChatroomDefaultTypeInternal _AckCreateChatroom_default_instance_;
class AckCreateCommunity;
struct AckCreateCommunityDefaultTypeInternal;
extern AckCreateCommunityDefaultTypeInternal _AckCreateCommunity_default_instance_;
class AckCreateKcpObject;
struct AckCreateKcpObjectDefaultTypeInternal;
extern AckCreateKcpObjectDefaultTypeInternal _AckCreateKcpObject_default_instance_;
class AckCreateOrder;
struct AckCreateOrderDefaultTypeInternal;
extern AckCreateOrderDefaultTypeInternal _AckCreateOrder_default_instance_;
class AckDealWithAddFriend;
struct AckDealWithAddFriendDefaultTypeInternal;
extern AckDealWithAddFriendDefaultTypeInternal _AckDealWithAddFriend_default_instance_;
class AckDealWithJoinCommunity;
struct AckDealWithJoinCommunityDefaultTypeInternal;
extern AckDealWithJoinCommunityDefaultTypeInternal _AckDealWithJoinCommunity_default_instance_;
class AckDelFriend;
struct AckDelFriendDefaultTypeInternal;
extern AckDelFriendDefaultTypeInternal _AckDelFriend_default_instance_;
class AckDeleteAffair;
struct AckDeleteAffairDefaultTypeInternal;
extern AckDeleteAffairDefaultTypeInternal _AckDeleteAffair_default_instance_;
class AckDeleteChatGroup;
struct AckDeleteChatGroupDefaultTypeInternal;
extern AckDeleteChatGroupDefaultTypeInternal _AckDeleteChatGroup_default_instance_;
class AckDeleteChatGroupUser;
struct AckDeleteChatGroupUserDefaultTypeInternal;
extern AckDeleteChatGroupUserDefaultTypeInternal _AckDeleteChatGroupUser_default_instance_;
class AckDeleteReadedMails;
struct AckDeleteReadedMailsDefaultTypeInternal;
extern AckDeleteReadedMailsDefaultTypeInternal _AckDeleteReadedMails_default_instance_;
class AckDrawCard;
struct AckDrawCardDefaultTypeInternal;
extern AckDrawCardDefaultTypeInternal _AckDrawCard_default_instance_;
class AckEstablishKcpConnection;
struct AckEstablishKcpConnectionDefaultTypeInternal;
extern AckEstablishKcpConnectionDefaultTypeInternal _AckEstablishKcpConnection_default_instance_;
class AckExpandWitchPneumaBagSize;
struct AckExpandWitchPneumaBagSizeDefaultTypeInternal;
extern AckExpandWitchPneumaBagSizeDefaultTypeInternal _AckExpandWitchPneumaBagSize_default_instance_;
class AckExploreUpdateNodePostion;
struct AckExploreUpdateNodePostionDefaultTypeInternal;
extern AckExploreUpdateNodePostionDefaultTypeInternal _AckExploreUpdateNodePostion_default_instance_;
class AckFindPlayer;
struct AckFindPlayerDefaultTypeInternal;
extern AckFindPlayerDefaultTypeInternal _AckFindPlayer_default_instance_;
class AckFriendCollectOpt;
struct AckFriendCollectOptDefaultTypeInternal;
extern AckFriendCollectOptDefaultTypeInternal _AckFriendCollectOpt_default_instance_;
class AckFriendList;
struct AckFriendListDefaultTypeInternal;
extern AckFriendListDefaultTypeInternal _AckFriendList_default_instance_;
class AckGetActiveMissionReward;
struct AckGetActiveMissionRewardDefaultTypeInternal;
extern AckGetActiveMissionRewardDefaultTypeInternal _AckGetActiveMissionReward_default_instance_;
class AckGetAffairReward;
struct AckGetAffairRewardDefaultTypeInternal;
extern AckGetAffairRewardDefaultTypeInternal _AckGetAffairReward_default_instance_;
class AckGetAppointReward;
struct AckGetAppointRewardDefaultTypeInternal;
extern AckGetAppointRewardDefaultTypeInternal _AckGetAppointReward_default_instance_;
class AckGetBotArenaMainPageData;
struct AckGetBotArenaMainPageDataDefaultTypeInternal;
extern AckGetBotArenaMainPageDataDefaultTypeInternal _AckGetBotArenaMainPageData_default_instance_;
class AckGetBotArenaReplayList;
struct AckGetBotArenaReplayListDefaultTypeInternal;
extern AckGetBotArenaReplayListDefaultTypeInternal _AckGetBotArenaReplayList_default_instance_;
class AckGetExploreAreaProgressRewards;
struct AckGetExploreAreaProgressRewardsDefaultTypeInternal;
extern AckGetExploreAreaProgressRewardsDefaultTypeInternal _AckGetExploreAreaProgressRewards_default_instance_;
class AckGetExploreMapBranchlineRewards;
struct AckGetExploreMapBranchlineRewardsDefaultTypeInternal;
extern AckGetExploreMapBranchlineRewardsDefaultTypeInternal _AckGetExploreMapBranchlineRewards_default_instance_;
class AckGetExploreMapStarRewards;
struct AckGetExploreMapStarRewardsDefaultTypeInternal;
extern AckGetExploreMapStarRewardsDefaultTypeInternal _AckGetExploreMapStarRewards_default_instance_;
class AckGetOutOfMyCommunity;
struct AckGetOutOfMyCommunityDefaultTypeInternal;
extern AckGetOutOfMyCommunityDefaultTypeInternal _AckGetOutOfMyCommunity_default_instance_;
class AckGetPlayerBotArenaChallengeList;
struct AckGetPlayerBotArenaChallengeListDefaultTypeInternal;
extern AckGetPlayerBotArenaChallengeListDefaultTypeInternal _AckGetPlayerBotArenaChallengeList_default_instance_;
class AckGetPlayerHonorPointRanking;
struct AckGetPlayerHonorPointRankingDefaultTypeInternal;
extern AckGetPlayerHonorPointRankingDefaultTypeInternal _AckGetPlayerHonorPointRanking_default_instance_;
class AckGetPlayerStrategyPointRanking;
struct AckGetPlayerStrategyPointRankingDefaultTypeInternal;
extern AckGetPlayerStrategyPointRankingDefaultTypeInternal _AckGetPlayerStrategyPointRanking_default_instance_;
class AckGetPneumaIslandStarReward;
struct AckGetPneumaIslandStarRewardDefaultTypeInternal;
extern AckGetPneumaIslandStarRewardDefaultTypeInternal _AckGetPneumaIslandStarReward_default_instance_;
class AckGetShopProducts;
struct AckGetShopProductsDefaultTypeInternal;
extern AckGetShopProductsDefaultTypeInternal _AckGetShopProducts_default_instance_;
class AckHousekeeperFinishedSignin;
struct AckHousekeeperFinishedSigninDefaultTypeInternal;
extern AckHousekeeperFinishedSigninDefaultTypeInternal _AckHousekeeperFinishedSignin_default_instance_;
class AckHousekeeperInitSignin;
struct AckHousekeeperInitSigninDefaultTypeInternal;
extern AckHousekeeperInitSigninDefaultTypeInternal _AckHousekeeperInitSignin_default_instance_;
class AckInitPlayerName;
struct AckInitPlayerNameDefaultTypeInternal;
extern AckInitPlayerNameDefaultTypeInternal _AckInitPlayerName_default_instance_;
class AckModifyApprovedRules;
struct AckModifyApprovedRulesDefaultTypeInternal;
extern AckModifyApprovedRulesDefaultTypeInternal _AckModifyApprovedRules_default_instance_;
class AckModifyFlagAndIcon;
struct AckModifyFlagAndIconDefaultTypeInternal;
extern AckModifyFlagAndIconDefaultTypeInternal _AckModifyFlagAndIcon_default_instance_;
class AckModifyNameAndDeclaration;
struct AckModifyNameAndDeclarationDefaultTypeInternal;
extern AckModifyNameAndDeclarationDefaultTypeInternal _AckModifyNameAndDeclaration_default_instance_;
class AckPlayerDataFinished;
struct AckPlayerDataFinishedDefaultTypeInternal;
extern AckPlayerDataFinishedDefaultTypeInternal _AckPlayerDataFinished_default_instance_;
class AckPlayerEntryList;
struct AckPlayerEntryListDefaultTypeInternal;
extern AckPlayerEntryListDefaultTypeInternal _AckPlayerEntryList_default_instance_;
class AckPlayerLeaveList;
struct AckPlayerLeaveListDefaultTypeInternal;
extern AckPlayerLeaveListDefaultTypeInternal _AckPlayerLeaveList_default_instance_;
class AckPromotionOrDemotionManager;
struct AckPromotionOrDemotionManagerDefaultTypeInternal;
extern AckPromotionOrDemotionManagerDefaultTypeInternal _AckPromotionOrDemotionManager_default_instance_;
class AckPushClientIntoQueueUp;
struct AckPushClientIntoQueueUpDefaultTypeInternal;
extern AckPushClientIntoQueueUpDefaultTypeInternal _AckPushClientIntoQueueUp_default_instance_;
class AckQueryCommunity;
struct AckQueryCommunityDefaultTypeInternal;
extern AckQueryCommunityDefaultTypeInternal _AckQueryCommunity_default_instance_;
class AckQueueUpGetCurWorldSuitProxy;
struct AckQueueUpGetCurWorldSuitProxyDefaultTypeInternal;
extern AckQueueUpGetCurWorldSuitProxyDefaultTypeInternal _AckQueueUpGetCurWorldSuitProxy_default_instance_;
class AckQuickConfigBotarenaDefensiveTeam;
struct AckQuickConfigBotarenaDefensiveTeamDefaultTypeInternal;
extern AckQuickConfigBotarenaDefensiveTeamDefaultTypeInternal _AckQuickConfigBotarenaDefensiveTeam_default_instance_;
class AckQuickJoinCommunity;
struct AckQuickJoinCommunityDefaultTypeInternal;
extern AckQuickJoinCommunityDefaultTypeInternal _AckQuickJoinCommunity_default_instance_;
class AckQuitCommunity;
struct AckQuitCommunityDefaultTypeInternal;
extern AckQuitCommunityDefaultTypeInternal _AckQuitCommunity_default_instance_;
class AckReadMails;
struct AckReadMailsDefaultTypeInternal;
extern AckReadMailsDefaultTypeInternal _AckReadMails_default_instance_;
class AckRecommendedFriendList;
struct AckRecommendedFriendListDefaultTypeInternal;
extern AckRecommendedFriendListDefaultTypeInternal _AckRecommendedFriendList_default_instance_;
class AckRefreshBlackmartCommodityList;
struct AckRefreshBlackmartCommodityListDefaultTypeInternal;
extern AckRefreshBlackmartCommodityListDefaultTypeInternal _AckRefreshBlackmartCommodityList_default_instance_;
class AckRefreshPlayerBotArenaChallengeList;
struct AckRefreshPlayerBotArenaChallengeListDefaultTypeInternal;
extern AckRefreshPlayerBotArenaChallengeListDefaultTypeInternal _AckRefreshPlayerBotArenaChallengeList_default_instance_;
class AckRegisterChatSdkAccount;
struct AckRegisterChatSdkAccountDefaultTypeInternal;
extern AckRegisterChatSdkAccountDefaultTypeInternal _AckRegisterChatSdkAccount_default_instance_;
class AckReplayBotArenaBattle;
struct AckReplayBotArenaBattleDefaultTypeInternal;
extern AckReplayBotArenaBattleDefaultTypeInternal _AckReplayBotArenaBattle_default_instance_;
class AckReportChatPlayer;
struct AckReportChatPlayerDefaultTypeInternal;
extern AckReportChatPlayerDefaultTypeInternal _AckReportChatPlayer_default_instance_;
class AckResetBotarenaDefensiveTeam;
struct AckResetBotarenaDefensiveTeamDefaultTypeInternal;
extern AckResetBotarenaDefensiveTeamDefaultTypeInternal _AckResetBotarenaDefensiveTeam_default_instance_;
class AckSdkLoginInfoAndChatroom;
struct AckSdkLoginInfoAndChatroomDefaultTypeInternal;
extern AckSdkLoginInfoAndChatroomDefaultTypeInternal _AckSdkLoginInfoAndChatroom_default_instance_;
class AckSearchCommunity;
struct AckSearchCommunityDefaultTypeInternal;
extern AckSearchCommunityDefaultTypeInternal _AckSearchCommunity_default_instance_;
class AckSendChatroomMsg;
struct AckSendChatroomMsgDefaultTypeInternal;
extern AckSendChatroomMsgDefaultTypeInternal _AckSendChatroomMsg_default_instance_;
class AckSendGiftForWitch;
struct AckSendGiftForWitchDefaultTypeInternal;
extern AckSendGiftForWitchDefaultTypeInternal _AckSendGiftForWitch_default_instance_;
class AckSetHouseKeeper;
struct AckSetHouseKeeperDefaultTypeInternal;
extern AckSetHouseKeeperDefaultTypeInternal _AckSetHouseKeeper_default_instance_;
class AckSetHouseKeeperSkinId;
struct AckSetHouseKeeperSkinIdDefaultTypeInternal;
extern AckSetHouseKeeperSkinIdDefaultTypeInternal _AckSetHouseKeeperSkinId_default_instance_;
class AckSetSystemFunctionFlag;
struct AckSetSystemFunctionFlagDefaultTypeInternal;
extern AckSetSystemFunctionFlagDefaultTypeInternal _AckSetSystemFunctionFlag_default_instance_;
class AckSpecifiedCommunityPage;
struct AckSpecifiedCommunityPageDefaultTypeInternal;
extern AckSpecifiedCommunityPageDefaultTypeInternal _AckSpecifiedCommunityPage_default_instance_;
class AckStartAffair;
struct AckStartAffairDefaultTypeInternal;
extern AckStartAffairDefaultTypeInternal _AckStartAffair_default_instance_;
class AckStartAppoint;
struct AckStartAppointDefaultTypeInternal;
extern AckStartAppointDefaultTypeInternal _AckStartAppoint_default_instance_;
class AckSwapScene;
struct AckSwapSceneDefaultTypeInternal;
extern AckSwapSceneDefaultTypeInternal _AckSwapScene_default_instance_;
class AckSwapSceneNotify;
struct AckSwapSceneNotifyDefaultTypeInternal;
extern AckSwapSceneNotifyDefaultTypeInternal _AckSwapSceneNotify_default_instance_;
class AckSweepEndlessTower;
struct AckSweepEndlessTowerDefaultTypeInternal;
extern AckSweepEndlessTowerDefaultTypeInternal _AckSweepEndlessTower_default_instance_;
class AckSweepExploreThreeStarNode;
struct AckSweepExploreThreeStarNodeDefaultTypeInternal;
extern AckSweepExploreThreeStarNodeDefaultTypeInternal _AckSweepExploreThreeStarNode_default_instance_;
class AckSwitchAppointArea;
struct AckSwitchAppointAreaDefaultTypeInternal;
extern AckSwitchAppointAreaDefaultTypeInternal _AckSwitchAppointArea_default_instance_;
class AckSwitchChatBubble;
struct AckSwitchChatBubbleDefaultTypeInternal;
extern AckSwitchChatBubbleDefaultTypeInternal _AckSwitchChatBubble_default_instance_;
class AckTerminateAffair;
struct AckTerminateAffairDefaultTypeInternal;
extern AckTerminateAffairDefaultTypeInternal _AckTerminateAffair_default_instance_;
class AckTestBattle;
struct AckTestBattleDefaultTypeInternal;
extern AckTestBattleDefaultTypeInternal _AckTestBattle_default_instance_;
class AckTransferChatGroup;
struct AckTransferChatGroupDefaultTypeInternal;
extern AckTransferChatGroupDefaultTypeInternal _AckTransferChatGroup_default_instance_;
class AckUnlockChatBubble;
struct AckUnlockChatBubbleDefaultTypeInternal;
extern AckUnlockChatBubbleDefaultTypeInternal _AckUnlockChatBubble_default_instance_;
class AckUnlockChatMeme;
struct AckUnlockChatMemeDefaultTypeInternal;
extern AckUnlockChatMemeDefaultTypeInternal _AckUnlockChatMeme_default_instance_;
class AckUnlockChatMemeGroup;
struct AckUnlockChatMemeGroupDefaultTypeInternal;
extern AckUnlockChatMemeGroupDefaultTypeInternal _AckUnlockChatMemeGroup_default_instance_;
class AckUnlockWitchSkin;
struct AckUnlockWitchSkinDefaultTypeInternal;
extern AckUnlockWitchSkinDefaultTypeInternal _AckUnlockWitchSkin_default_instance_;
class AckUpdateChatroomAnnouncement;
struct AckUpdateChatroomAnnouncementDefaultTypeInternal;
extern AckUpdateChatroomAnnouncementDefaultTypeInternal _AckUpdateChatroomAnnouncement_default_instance_;
class AckUpdateModule;
struct AckUpdateModuleDefaultTypeInternal;
extern AckUpdateModuleDefaultTypeInternal _AckUpdateModule_default_instance_;
class AckUpdatePneumaAutoDecomposeState;
struct AckUpdatePneumaAutoDecomposeStateDefaultTypeInternal;
extern AckUpdatePneumaAutoDecomposeStateDefaultTypeInternal _AckUpdatePneumaAutoDecomposeState_default_instance_;
class AckUpdatePneumaDecomposeScheme;
struct AckUpdatePneumaDecomposeSchemeDefaultTypeInternal;
extern AckUpdatePneumaDecomposeSchemeDefaultTypeInternal _AckUpdatePneumaDecomposeScheme_default_instance_;
class AckUpdatePneumaIslandShowState;
struct AckUpdatePneumaIslandShowStateDefaultTypeInternal;
extern AckUpdatePneumaIslandShowStateDefaultTypeInternal _AckUpdatePneumaIslandShowState_default_instance_;
class AckUpgradeExploreGuiderFriendship;
struct AckUpgradeExploreGuiderFriendshipDefaultTypeInternal;
extern AckUpgradeExploreGuiderFriendshipDefaultTypeInternal _AckUpgradeExploreGuiderFriendship_default_instance_;
class AckUseMagicalMedicine;
struct AckUseMagicalMedicineDefaultTypeInternal;
extern AckUseMagicalMedicineDefaultTypeInternal _AckUseMagicalMedicine_default_instance_;
class AckWitchKnowledgeLevelUp;
struct AckWitchKnowledgeLevelUpDefaultTypeInternal;
extern AckWitchKnowledgeLevelUpDefaultTypeInternal _AckWitchKnowledgeLevelUp_default_instance_;
class AckWitchPneumaDecompose;
struct AckWitchPneumaDecomposeDefaultTypeInternal;
extern AckWitchPneumaDecomposeDefaultTypeInternal _AckWitchPneumaDecompose_default_instance_;
class AckWitchPneumaEnhance;
struct AckWitchPneumaEnhanceDefaultTypeInternal;
extern AckWitchPneumaEnhanceDefaultTypeInternal _AckWitchPneumaEnhance_default_instance_;
class AckWitchPneumaOpt;
struct AckWitchPneumaOptDefaultTypeInternal;
extern AckWitchPneumaOptDefaultTypeInternal _AckWitchPneumaOpt_default_instance_;
class AckWitchSkillLevelUp;
struct AckWitchSkillLevelUpDefaultTypeInternal;
extern AckWitchSkillLevelUpDefaultTypeInternal _AckWitchSkillLevelUp_default_instance_;
class AckWitchStarLevelUp;
struct AckWitchStarLevelUpDefaultTypeInternal;
extern AckWitchStarLevelUpDefaultTypeInternal _AckWitchStarLevelUp_default_instance_;
class AckWorldSendMailToPlayer;
struct AckWorldSendMailToPlayerDefaultTypeInternal;
extern AckWorldSendMailToPlayerDefaultTypeInternal _AckWorldSendMailToPlayer_default_instance_;
class AddCommunityActiveValAndExp;
struct AddCommunityActiveValAndExpDefaultTypeInternal;
extern AddCommunityActiveValAndExpDefaultTypeInternal _AddCommunityActiveValAndExp_default_instance_;
class AddPlayerReplayItem;
struct AddPlayerReplayItemDefaultTypeInternal;
extern AddPlayerReplayItemDefaultTypeInternal _AddPlayerReplayItem_default_instance_;
class AddPlayerShopReceipt;
struct AddPlayerShopReceiptDefaultTypeInternal;
extern AddPlayerShopReceiptDefaultTypeInternal _AddPlayerShopReceipt_default_instance_;
class AppliedCommunityInfo;
struct AppliedCommunityInfoDefaultTypeInternal;
extern AppliedCommunityInfoDefaultTypeInternal _AppliedCommunityInfo_default_instance_;
class AppliedFriendInfo;
struct AppliedFriendInfoDefaultTypeInternal;
extern AppliedFriendInfoDefaultTypeInternal _AppliedFriendInfo_default_instance_;
class AppliedPlayerInfo;
struct AppliedPlayerInfoDefaultTypeInternal;
extern AppliedPlayerInfoDefaultTypeInternal _AppliedPlayerInfo_default_instance_;
class BattleEntityInfo;
struct BattleEntityInfoDefaultTypeInternal;
extern BattleEntityInfoDefaultTypeInternal _BattleEntityInfo_default_instance_;
class BattleWitchInfo;
struct BattleWitchInfoDefaultTypeInternal;
extern BattleWitchInfoDefaultTypeInternal _BattleWitchInfo_default_instance_;
class BotArenaChallengeItem;
struct BotArenaChallengeItemDefaultTypeInternal;
extern BotArenaChallengeItemDefaultTypeInternal _BotArenaChallengeItem_default_instance_;
class BotArenaChallengeList;
struct BotArenaChallengeListDefaultTypeInternal;
extern BotArenaChallengeListDefaultTypeInternal _BotArenaChallengeList_default_instance_;
class BotArenaReplayItem;
struct BotArenaReplayItemDefaultTypeInternal;
extern BotArenaReplayItemDefaultTypeInternal _BotArenaReplayItem_default_instance_;
class BotArenaReplayList;
struct BotArenaReplayListDefaultTypeInternal;
extern BotArenaReplayListDefaultTypeInternal _BotArenaReplayList_default_instance_;
class CommonGetRewardInfo;
struct CommonGetRewardInfoDefaultTypeInternal;
extern CommonGetRewardInfoDefaultTypeInternal _CommonGetRewardInfo_default_instance_;
class CommonReward;
struct CommonRewardDefaultTypeInternal;
extern CommonRewardDefaultTypeInternal _CommonReward_default_instance_;
class CommunityInfo;
struct CommunityInfoDefaultTypeInternal;
extern CommunityInfoDefaultTypeInternal _CommunityInfo_default_instance_;
class CommunityMemberInfo;
struct CommunityMemberInfoDefaultTypeInternal;
extern CommunityMemberInfoDefaultTypeInternal _CommunityMemberInfo_default_instance_;
class DelBotArenaBattleReplayDatas;
struct DelBotArenaBattleReplayDatasDefaultTypeInternal;
extern DelBotArenaBattleReplayDatasDefaultTypeInternal _DelBotArenaBattleReplayDatas_default_instance_;
class DelPlayerReplayItem;
struct DelPlayerReplayItemDefaultTypeInternal;
extern DelPlayerReplayItemDefaultTypeInternal _DelPlayerReplayItem_default_instance_;
class DelPlayerShopReceipts;
struct DelPlayerShopReceiptsDefaultTypeInternal;
extern DelPlayerShopReceiptsDefaultTypeInternal _DelPlayerShopReceipts_default_instance_;
class DrawCardInfo;
struct DrawCardInfoDefaultTypeInternal;
extern DrawCardInfoDefaultTypeInternal _DrawCardInfo_default_instance_;
class ExamQuestion;
struct ExamQuestionDefaultTypeInternal;
extern ExamQuestionDefaultTypeInternal _ExamQuestion_default_instance_;
class FriendInfo;
struct FriendInfoDefaultTypeInternal;
extern FriendInfoDefaultTypeInternal _FriendInfo_default_instance_;
class GuildInfo;
struct GuildInfoDefaultTypeInternal;
extern GuildInfoDefaultTypeInternal _GuildInfo_default_instance_;
class HonorPointRankingItem;
struct HonorPointRankingItemDefaultTypeInternal;
extern HonorPointRankingItemDefaultTypeInternal _HonorPointRankingItem_default_instance_;
class LoadPlayerPropertiesCache;
struct LoadPlayerPropertiesCacheDefaultTypeInternal;
extern LoadPlayerPropertiesCacheDefaultTypeInternal _LoadPlayerPropertiesCache_default_instance_;
class LoadPlayerRecordsCache;
struct LoadPlayerRecordsCacheDefaultTypeInternal;
extern LoadPlayerRecordsCacheDefaultTypeInternal _LoadPlayerRecordsCache_default_instance_;
class MailInfo;
struct MailInfoDefaultTypeInternal;
extern MailInfoDefaultTypeInternal _MailInfo_default_instance_;
class MailInfos;
struct MailInfosDefaultTypeInternal;
extern MailInfosDefaultTypeInternal _MailInfos_default_instance_;
class NotifyApplyJoinCommunityResult;
struct NotifyApplyJoinCommunityResultDefaultTypeInternal;
extern NotifyApplyJoinCommunityResultDefaultTypeInternal _NotifyApplyJoinCommunityResult_default_instance_;
class NotifyPlayerGetFiredFromCommunity;
struct NotifyPlayerGetFiredFromCommunityDefaultTypeInternal;
extern NotifyPlayerGetFiredFromCommunityDefaultTypeInternal _NotifyPlayerGetFiredFromCommunity_default_instance_;
class PlayerBaseInfo;
struct PlayerBaseInfoDefaultTypeInternal;
extern PlayerBaseInfoDefaultTypeInternal _PlayerBaseInfo_default_instance_;
class PlayerEntryInfo;
struct PlayerEntryInfoDefaultTypeInternal;
extern PlayerEntryInfoDefaultTypeInternal _PlayerEntryInfo_default_instance_;
class PlayerInfo;
struct PlayerInfoDefaultTypeInternal;
extern PlayerInfoDefaultTypeInternal _PlayerInfo_default_instance_;
class PneumaDecomposeScheme;
struct PneumaDecomposeSchemeDefaultTypeInternal;
extern PneumaDecomposeSchemeDefaultTypeInternal _PneumaDecomposeScheme_default_instance_;
class PosSyncUnit;
struct PosSyncUnitDefaultTypeInternal;
extern PosSyncUnitDefaultTypeInternal _PosSyncUnit_default_instance_;
class ProductContent;
struct ProductContentDefaultTypeInternal;
extern ProductContentDefaultTypeInternal _ProductContent_default_instance_;
class ProductInfo;
struct ProductInfoDefaultTypeInternal;
extern ProductInfoDefaultTypeInternal _ProductInfo_default_instance_;
class ProductPrice;
struct ProductPriceDefaultTypeInternal;
extern ProductPriceDefaultTypeInternal _ProductPrice_default_instance_;
class RecommendedFriendInfo;
struct RecommendedFriendInfoDefaultTypeInternal;
extern RecommendedFriendInfoDefaultTypeInternal _RecommendedFriendInfo_default_instance_;
class ReqAckHeartBeat;
struct ReqAckHeartBeatDefaultTypeInternal;
extern ReqAckHeartBeatDefaultTypeInternal _ReqAckHeartBeat_default_instance_;
class ReqAckLagTest;
struct ReqAckLagTestDefaultTypeInternal;
extern ReqAckLagTestDefaultTypeInternal _ReqAckLagTest_default_instance_;
class ReqAckPlayerChat;
struct ReqAckPlayerChatDefaultTypeInternal;
extern ReqAckPlayerChatDefaultTypeInternal _ReqAckPlayerChat_default_instance_;
class ReqAckPlayerPosSync;
struct ReqAckPlayerPosSyncDefaultTypeInternal;
extern ReqAckPlayerPosSyncDefaultTypeInternal _ReqAckPlayerPosSync_default_instance_;
class ReqActiveMissionOperation;
struct ReqActiveMissionOperationDefaultTypeInternal;
extern ReqActiveMissionOperationDefaultTypeInternal _ReqActiveMissionOperation_default_instance_;
class ReqAddChatGroupUser;
struct ReqAddChatGroupUserDefaultTypeInternal;
extern ReqAddChatGroupUserDefaultTypeInternal _ReqAddChatGroupUser_default_instance_;
class ReqAddFriend;
struct ReqAddFriendDefaultTypeInternal;
extern ReqAddFriendDefaultTypeInternal _ReqAddFriend_default_instance_;
class ReqAdjBotarenaDefensiveTeam;
struct ReqAdjBotarenaDefensiveTeamDefaultTypeInternal;
extern ReqAdjBotarenaDefensiveTeamDefaultTypeInternal _ReqAdjBotarenaDefensiveTeam_default_instance_;
class ReqAppliedCommunityList;
struct ReqAppliedCommunityListDefaultTypeInternal;
extern ReqAppliedCommunityListDefaultTypeInternal _ReqAppliedCommunityList_default_instance_;
class ReqAppliedFriendList;
struct ReqAppliedFriendListDefaultTypeInternal;
extern ReqAppliedFriendListDefaultTypeInternal _ReqAppliedFriendList_default_instance_;
class ReqAppliedPlayerList;
struct ReqAppliedPlayerListDefaultTypeInternal;
extern ReqAppliedPlayerListDefaultTypeInternal _ReqAppliedPlayerList_default_instance_;
class ReqApplyJoinCommunity;
struct ReqApplyJoinCommunityDefaultTypeInternal;
extern ReqApplyJoinCommunityDefaultTypeInternal _ReqApplyJoinCommunity_default_instance_;
class ReqBattleAdjWitchTeam;
struct ReqBattleAdjWitchTeamDefaultTypeInternal;
extern ReqBattleAdjWitchTeamDefaultTypeInternal _ReqBattleAdjWitchTeam_default_instance_;
class ReqBattleBuyWitchTeam;
struct ReqBattleBuyWitchTeamDefaultTypeInternal;
extern ReqBattleBuyWitchTeamDefaultTypeInternal _ReqBattleBuyWitchTeam_default_instance_;
class ReqBattleChangeWitchTeamName;
struct ReqBattleChangeWitchTeamNameDefaultTypeInternal;
extern ReqBattleChangeWitchTeamNameDefaultTypeInternal _ReqBattleChangeWitchTeamName_default_instance_;
class ReqBattlePreparedInfo;
struct ReqBattlePreparedInfoDefaultTypeInternal;
extern ReqBattlePreparedInfoDefaultTypeInternal _ReqBattlePreparedInfo_default_instance_;
class ReqBattleQuickConfigWitchTeam;
struct ReqBattleQuickConfigWitchTeamDefaultTypeInternal;
extern ReqBattleQuickConfigWitchTeamDefaultTypeInternal _ReqBattleQuickConfigWitchTeam_default_instance_;
class ReqBattleResetWitchTeam;
struct ReqBattleResetWitchTeamDefaultTypeInternal;
extern ReqBattleResetWitchTeamDefaultTypeInternal _ReqBattleResetWitchTeam_default_instance_;
class ReqBlacklist;
struct ReqBlacklistDefaultTypeInternal;
extern ReqBlacklistDefaultTypeInternal _ReqBlacklist_default_instance_;
class ReqBlacklistOpt;
struct ReqBlacklistOptDefaultTypeInternal;
extern ReqBlacklistOptDefaultTypeInternal _ReqBlacklistOpt_default_instance_;
class ReqBlackmartCommodityList;
struct ReqBlackmartCommodityListDefaultTypeInternal;
extern ReqBlackmartCommodityListDefaultTypeInternal _ReqBlackmartCommodityList_default_instance_;
class ReqBuyBlackmartCommodity;
struct ReqBuyBlackmartCommodityDefaultTypeInternal;
extern ReqBuyBlackmartCommodityDefaultTypeInternal _ReqBuyBlackmartCommodity_default_instance_;
class ReqBuyPower;
struct ReqBuyPowerDefaultTypeInternal;
extern ReqBuyPowerDefaultTypeInternal _ReqBuyPower_default_instance_;
class ReqBuyProduct;
struct ReqBuyProductDefaultTypeInternal;
extern ReqBuyProductDefaultTypeInternal _ReqBuyProduct_default_instance_;
class ReqBuyShabowToken;
struct ReqBuyShabowTokenDefaultTypeInternal;
extern ReqBuyShabowTokenDefaultTypeInternal _ReqBuyShabowToken_default_instance_;
class ReqCallbackRecharge;
struct ReqCallbackRechargeDefaultTypeInternal;
extern ReqCallbackRechargeDefaultTypeInternal _ReqCallbackRecharge_default_instance_;
class ReqCancelJoinCommunity;
struct ReqCancelJoinCommunityDefaultTypeInternal;
extern ReqCancelJoinCommunityDefaultTypeInternal _ReqCancelJoinCommunity_default_instance_;
class ReqChapterRewardTipOk;
struct ReqChapterRewardTipOkDefaultTypeInternal;
extern ReqChapterRewardTipOkDefaultTypeInternal _ReqChapterRewardTipOk_default_instance_;
class ReqCheckChatText;
struct ReqCheckChatTextDefaultTypeInternal;
extern ReqCheckChatTextDefaultTypeInternal _ReqCheckChatText_default_instance_;
class ReqClickBotarenaPromptForm;
struct ReqClickBotarenaPromptFormDefaultTypeInternal;
extern ReqClickBotarenaPromptFormDefaultTypeInternal _ReqClickBotarenaPromptForm_default_instance_;
class ReqCollectWitch;
struct ReqCollectWitchDefaultTypeInternal;
extern ReqCollectWitchDefaultTypeInternal _ReqCollectWitch_default_instance_;
class ReqCollegeAnswer;
struct ReqCollegeAnswerDefaultTypeInternal;
extern ReqCollegeAnswerDefaultTypeInternal _ReqCollegeAnswer_default_instance_;
class ReqCollegeDrama;
struct ReqCollegeDramaDefaultTypeInternal;
extern ReqCollegeDramaDefaultTypeInternal _ReqCollegeDrama_default_instance_;
class ReqCollegeExamExit;
struct ReqCollegeExamExitDefaultTypeInternal;
extern ReqCollegeExamExitDefaultTypeInternal _ReqCollegeExamExit_default_instance_;
class ReqCollegeReward;
struct ReqCollegeRewardDefaultTypeInternal;
extern ReqCollegeRewardDefaultTypeInternal _ReqCollegeReward_default_instance_;
class ReqCollegeStartExam;
struct ReqCollegeStartExamDefaultTypeInternal;
extern ReqCollegeStartExamDefaultTypeInternal _ReqCollegeStartExam_default_instance_;
class ReqCollegeTaskAction;
struct ReqCollegeTaskActionDefaultTypeInternal;
extern ReqCollegeTaskActionDefaultTypeInternal _ReqCollegeTaskAction_default_instance_;
class ReqCollegeTaskCountdown;
struct ReqCollegeTaskCountdownDefaultTypeInternal;
extern ReqCollegeTaskCountdownDefaultTypeInternal _ReqCollegeTaskCountdown_default_instance_;
class ReqCommunitySignIn;
struct ReqCommunitySignInDefaultTypeInternal;
extern ReqCommunitySignInDefaultTypeInternal _ReqCommunitySignIn_default_instance_;
class ReqCreateChatGroup;
struct ReqCreateChatGroupDefaultTypeInternal;
extern ReqCreateChatGroupDefaultTypeInternal _ReqCreateChatGroup_default_instance_;
class ReqCreateChatroom;
struct ReqCreateChatroomDefaultTypeInternal;
extern ReqCreateChatroomDefaultTypeInternal _ReqCreateChatroom_default_instance_;
class ReqCreateCommunity;
struct ReqCreateCommunityDefaultTypeInternal;
extern ReqCreateCommunityDefaultTypeInternal _ReqCreateCommunity_default_instance_;
class ReqCreateKcpObject;
struct ReqCreateKcpObjectDefaultTypeInternal;
extern ReqCreateKcpObjectDefaultTypeInternal _ReqCreateKcpObject_default_instance_;
class ReqCreateOrder;
struct ReqCreateOrderDefaultTypeInternal;
extern ReqCreateOrderDefaultTypeInternal _ReqCreateOrder_default_instance_;
class ReqDealWithAddFriend;
struct ReqDealWithAddFriendDefaultTypeInternal;
extern ReqDealWithAddFriendDefaultTypeInternal _ReqDealWithAddFriend_default_instance_;
class ReqDealWithJoinCommunity;
struct ReqDealWithJoinCommunityDefaultTypeInternal;
extern ReqDealWithJoinCommunityDefaultTypeInternal _ReqDealWithJoinCommunity_default_instance_;
class ReqDelFriend;
struct ReqDelFriendDefaultTypeInternal;
extern ReqDelFriendDefaultTypeInternal _ReqDelFriend_default_instance_;
class ReqDeleteAffair;
struct ReqDeleteAffairDefaultTypeInternal;
extern ReqDeleteAffairDefaultTypeInternal _ReqDeleteAffair_default_instance_;
class ReqDeleteChatGroup;
struct ReqDeleteChatGroupDefaultTypeInternal;
extern ReqDeleteChatGroupDefaultTypeInternal _ReqDeleteChatGroup_default_instance_;
class ReqDeleteChatGroupUser;
struct ReqDeleteChatGroupUserDefaultTypeInternal;
extern ReqDeleteChatGroupUserDefaultTypeInternal _ReqDeleteChatGroupUser_default_instance_;
class ReqDeleteReadedMails;
struct ReqDeleteReadedMailsDefaultTypeInternal;
extern ReqDeleteReadedMailsDefaultTypeInternal _ReqDeleteReadedMails_default_instance_;
class ReqDrawCard;
struct ReqDrawCardDefaultTypeInternal;
extern ReqDrawCardDefaultTypeInternal _ReqDrawCard_default_instance_;
class ReqEstablishKcpConnection;
struct ReqEstablishKcpConnectionDefaultTypeInternal;
extern ReqEstablishKcpConnectionDefaultTypeInternal _ReqEstablishKcpConnection_default_instance_;
class ReqExpandWitchPneumaBagSize;
struct ReqExpandWitchPneumaBagSizeDefaultTypeInternal;
extern ReqExpandWitchPneumaBagSizeDefaultTypeInternal _ReqExpandWitchPneumaBagSize_default_instance_;
class ReqExploreUpdateNodePostion;
struct ReqExploreUpdateNodePostionDefaultTypeInternal;
extern ReqExploreUpdateNodePostionDefaultTypeInternal _ReqExploreUpdateNodePostion_default_instance_;
class ReqFindPlayer;
struct ReqFindPlayerDefaultTypeInternal;
extern ReqFindPlayerDefaultTypeInternal _ReqFindPlayer_default_instance_;
class ReqFriendCollectOpt;
struct ReqFriendCollectOptDefaultTypeInternal;
extern ReqFriendCollectOptDefaultTypeInternal _ReqFriendCollectOpt_default_instance_;
class ReqFriendList;
struct ReqFriendListDefaultTypeInternal;
extern ReqFriendListDefaultTypeInternal _ReqFriendList_default_instance_;
class ReqGetActiveMissionReward;
struct ReqGetActiveMissionRewardDefaultTypeInternal;
extern ReqGetActiveMissionRewardDefaultTypeInternal _ReqGetActiveMissionReward_default_instance_;
class ReqGetAffairReward;
struct ReqGetAffairRewardDefaultTypeInternal;
extern ReqGetAffairRewardDefaultTypeInternal _ReqGetAffairReward_default_instance_;
class ReqGetAppointReward;
struct ReqGetAppointRewardDefaultTypeInternal;
extern ReqGetAppointRewardDefaultTypeInternal _ReqGetAppointReward_default_instance_;
class ReqGetBotArenaMainPageData;
struct ReqGetBotArenaMainPageDataDefaultTypeInternal;
extern ReqGetBotArenaMainPageDataDefaultTypeInternal _ReqGetBotArenaMainPageData_default_instance_;
class ReqGetBotArenaReplayList;
struct ReqGetBotArenaReplayListDefaultTypeInternal;
extern ReqGetBotArenaReplayListDefaultTypeInternal _ReqGetBotArenaReplayList_default_instance_;
class ReqGetExploreAreaProgressRewards;
struct ReqGetExploreAreaProgressRewardsDefaultTypeInternal;
extern ReqGetExploreAreaProgressRewardsDefaultTypeInternal _ReqGetExploreAreaProgressRewards_default_instance_;
class ReqGetExploreMapBranchlineRewards;
struct ReqGetExploreMapBranchlineRewardsDefaultTypeInternal;
extern ReqGetExploreMapBranchlineRewardsDefaultTypeInternal _ReqGetExploreMapBranchlineRewards_default_instance_;
class ReqGetExploreMapStarRewards;
struct ReqGetExploreMapStarRewardsDefaultTypeInternal;
extern ReqGetExploreMapStarRewardsDefaultTypeInternal _ReqGetExploreMapStarRewards_default_instance_;
class ReqGetOutOfMyCommunity;
struct ReqGetOutOfMyCommunityDefaultTypeInternal;
extern ReqGetOutOfMyCommunityDefaultTypeInternal _ReqGetOutOfMyCommunity_default_instance_;
class ReqGetPlayerBotArenaChallengeList;
struct ReqGetPlayerBotArenaChallengeListDefaultTypeInternal;
extern ReqGetPlayerBotArenaChallengeListDefaultTypeInternal _ReqGetPlayerBotArenaChallengeList_default_instance_;
class ReqGetPlayerHonorPointRanking;
struct ReqGetPlayerHonorPointRankingDefaultTypeInternal;
extern ReqGetPlayerHonorPointRankingDefaultTypeInternal _ReqGetPlayerHonorPointRanking_default_instance_;
class ReqGetPlayerStrategyPointRanking;
struct ReqGetPlayerStrategyPointRankingDefaultTypeInternal;
extern ReqGetPlayerStrategyPointRankingDefaultTypeInternal _ReqGetPlayerStrategyPointRanking_default_instance_;
class ReqGetPneumaIslandStarReward;
struct ReqGetPneumaIslandStarRewardDefaultTypeInternal;
extern ReqGetPneumaIslandStarRewardDefaultTypeInternal _ReqGetPneumaIslandStarReward_default_instance_;
class ReqGetShopProducts;
struct ReqGetShopProductsDefaultTypeInternal;
extern ReqGetShopProductsDefaultTypeInternal _ReqGetShopProducts_default_instance_;
class ReqHousekeeperFinishedSignin;
struct ReqHousekeeperFinishedSigninDefaultTypeInternal;
extern ReqHousekeeperFinishedSigninDefaultTypeInternal _ReqHousekeeperFinishedSignin_default_instance_;
class ReqHousekeeperInitSignin;
struct ReqHousekeeperInitSigninDefaultTypeInternal;
extern ReqHousekeeperInitSigninDefaultTypeInternal _ReqHousekeeperInitSignin_default_instance_;
class ReqInitPlayerName;
struct ReqInitPlayerNameDefaultTypeInternal;
extern ReqInitPlayerNameDefaultTypeInternal _ReqInitPlayerName_default_instance_;
class ReqLeaveGameServer;
struct ReqLeaveGameServerDefaultTypeInternal;
extern ReqLeaveGameServerDefaultTypeInternal _ReqLeaveGameServer_default_instance_;
class ReqModifyApprovedRules;
struct ReqModifyApprovedRulesDefaultTypeInternal;
extern ReqModifyApprovedRulesDefaultTypeInternal _ReqModifyApprovedRules_default_instance_;
class ReqModifyFlagAndIcon;
struct ReqModifyFlagAndIconDefaultTypeInternal;
extern ReqModifyFlagAndIconDefaultTypeInternal _ReqModifyFlagAndIcon_default_instance_;
class ReqModifyNameAndDeclaration;
struct ReqModifyNameAndDeclarationDefaultTypeInternal;
extern ReqModifyNameAndDeclarationDefaultTypeInternal _ReqModifyNameAndDeclaration_default_instance_;
class ReqPromotionOrDemotionManager;
struct ReqPromotionOrDemotionManagerDefaultTypeInternal;
extern ReqPromotionOrDemotionManagerDefaultTypeInternal _ReqPromotionOrDemotionManager_default_instance_;
class ReqQueryCommunity;
struct ReqQueryCommunityDefaultTypeInternal;
extern ReqQueryCommunityDefaultTypeInternal _ReqQueryCommunity_default_instance_;
class ReqQueueUpGetCurWorldSuitProxy;
struct ReqQueueUpGetCurWorldSuitProxyDefaultTypeInternal;
extern ReqQueueUpGetCurWorldSuitProxyDefaultTypeInternal _ReqQueueUpGetCurWorldSuitProxy_default_instance_;
class ReqQuickConfigBotarenaDefensiveTeam;
struct ReqQuickConfigBotarenaDefensiveTeamDefaultTypeInternal;
extern ReqQuickConfigBotarenaDefensiveTeamDefaultTypeInternal _ReqQuickConfigBotarenaDefensiveTeam_default_instance_;
class ReqQuickJoinCommunity;
struct ReqQuickJoinCommunityDefaultTypeInternal;
extern ReqQuickJoinCommunityDefaultTypeInternal _ReqQuickJoinCommunity_default_instance_;
class ReqQuitCommunity;
struct ReqQuitCommunityDefaultTypeInternal;
extern ReqQuitCommunityDefaultTypeInternal _ReqQuitCommunity_default_instance_;
class ReqReadMails;
struct ReqReadMailsDefaultTypeInternal;
extern ReqReadMailsDefaultTypeInternal _ReqReadMails_default_instance_;
class ReqRecommendedFriendList;
struct ReqRecommendedFriendListDefaultTypeInternal;
extern ReqRecommendedFriendListDefaultTypeInternal _ReqRecommendedFriendList_default_instance_;
class ReqRefreshBlackmartCommodityList;
struct ReqRefreshBlackmartCommodityListDefaultTypeInternal;
extern ReqRefreshBlackmartCommodityListDefaultTypeInternal _ReqRefreshBlackmartCommodityList_default_instance_;
class ReqRefreshPlayerBotArenaChallengeList;
struct ReqRefreshPlayerBotArenaChallengeListDefaultTypeInternal;
extern ReqRefreshPlayerBotArenaChallengeListDefaultTypeInternal _ReqRefreshPlayerBotArenaChallengeList_default_instance_;
class ReqRegisterChatSdkAccount;
struct ReqRegisterChatSdkAccountDefaultTypeInternal;
extern ReqRegisterChatSdkAccountDefaultTypeInternal _ReqRegisterChatSdkAccount_default_instance_;
class ReqReplayBotArenaBattle;
struct ReqReplayBotArenaBattleDefaultTypeInternal;
extern ReqReplayBotArenaBattleDefaultTypeInternal _ReqReplayBotArenaBattle_default_instance_;
class ReqReportChatPlayer;
struct ReqReportChatPlayerDefaultTypeInternal;
extern ReqReportChatPlayerDefaultTypeInternal _ReqReportChatPlayer_default_instance_;
class ReqResetBotarenaDefensiveTeam;
struct ReqResetBotarenaDefensiveTeamDefaultTypeInternal;
extern ReqResetBotarenaDefensiveTeamDefaultTypeInternal _ReqResetBotarenaDefensiveTeam_default_instance_;
class ReqSdkLoginInfoAndChatroom;
struct ReqSdkLoginInfoAndChatroomDefaultTypeInternal;
extern ReqSdkLoginInfoAndChatroomDefaultTypeInternal _ReqSdkLoginInfoAndChatroom_default_instance_;
class ReqSearchCommunity;
struct ReqSearchCommunityDefaultTypeInternal;
extern ReqSearchCommunityDefaultTypeInternal _ReqSearchCommunity_default_instance_;
class ReqSendChatroomMsg;
struct ReqSendChatroomMsgDefaultTypeInternal;
extern ReqSendChatroomMsgDefaultTypeInternal _ReqSendChatroomMsg_default_instance_;
class ReqSendGiftForWitch;
struct ReqSendGiftForWitchDefaultTypeInternal;
extern ReqSendGiftForWitchDefaultTypeInternal _ReqSendGiftForWitch_default_instance_;
class ReqSetHouseKeeper;
struct ReqSetHouseKeeperDefaultTypeInternal;
extern ReqSetHouseKeeperDefaultTypeInternal _ReqSetHouseKeeper_default_instance_;
class ReqSetHouseKeeperSkinId;
struct ReqSetHouseKeeperSkinIdDefaultTypeInternal;
extern ReqSetHouseKeeperSkinIdDefaultTypeInternal _ReqSetHouseKeeperSkinId_default_instance_;
class ReqSetItem;
struct ReqSetItemDefaultTypeInternal;
extern ReqSetItemDefaultTypeInternal _ReqSetItem_default_instance_;
class ReqSetSystemFunctionFlag;
struct ReqSetSystemFunctionFlagDefaultTypeInternal;
extern ReqSetSystemFunctionFlagDefaultTypeInternal _ReqSetSystemFunctionFlag_default_instance_;
class ReqSpecifiedCommunityPage;
struct ReqSpecifiedCommunityPageDefaultTypeInternal;
extern ReqSpecifiedCommunityPageDefaultTypeInternal _ReqSpecifiedCommunityPage_default_instance_;
class ReqStartAffair;
struct ReqStartAffairDefaultTypeInternal;
extern ReqStartAffairDefaultTypeInternal _ReqStartAffair_default_instance_;
class ReqStartAppoint;
struct ReqStartAppointDefaultTypeInternal;
extern ReqStartAppointDefaultTypeInternal _ReqStartAppoint_default_instance_;
class ReqSwapScene;
struct ReqSwapSceneDefaultTypeInternal;
extern ReqSwapSceneDefaultTypeInternal _ReqSwapScene_default_instance_;
class ReqSweepEndlessTower;
struct ReqSweepEndlessTowerDefaultTypeInternal;
extern ReqSweepEndlessTowerDefaultTypeInternal _ReqSweepEndlessTower_default_instance_;
class ReqSweepExploreThreeStarNode;
struct ReqSweepExploreThreeStarNodeDefaultTypeInternal;
extern ReqSweepExploreThreeStarNodeDefaultTypeInternal _ReqSweepExploreThreeStarNode_default_instance_;
class ReqSwitchAppointArea;
struct ReqSwitchAppointAreaDefaultTypeInternal;
extern ReqSwitchAppointAreaDefaultTypeInternal _ReqSwitchAppointArea_default_instance_;
class ReqSwitchChatBubble;
struct ReqSwitchChatBubbleDefaultTypeInternal;
extern ReqSwitchChatBubbleDefaultTypeInternal _ReqSwitchChatBubble_default_instance_;
class ReqTerminateAffair;
struct ReqTerminateAffairDefaultTypeInternal;
extern ReqTerminateAffairDefaultTypeInternal _ReqTerminateAffair_default_instance_;
class ReqTestBattle;
struct ReqTestBattleDefaultTypeInternal;
extern ReqTestBattleDefaultTypeInternal _ReqTestBattle_default_instance_;
class ReqTestRecruitWitch;
struct ReqTestRecruitWitchDefaultTypeInternal;
extern ReqTestRecruitWitchDefaultTypeInternal _ReqTestRecruitWitch_default_instance_;
class ReqTestSetCollegeExamStatus;
struct ReqTestSetCollegeExamStatusDefaultTypeInternal;
extern ReqTestSetCollegeExamStatusDefaultTypeInternal _ReqTestSetCollegeExamStatus_default_instance_;
class ReqTestSetResource;
struct ReqTestSetResourceDefaultTypeInternal;
extern ReqTestSetResourceDefaultTypeInternal _ReqTestSetResource_default_instance_;
class ReqTransferChatGroup;
struct ReqTransferChatGroupDefaultTypeInternal;
extern ReqTransferChatGroupDefaultTypeInternal _ReqTransferChatGroup_default_instance_;
class ReqTryPushClientIntoQueueUp;
struct ReqTryPushClientIntoQueueUpDefaultTypeInternal;
extern ReqTryPushClientIntoQueueUpDefaultTypeInternal _ReqTryPushClientIntoQueueUp_default_instance_;
class ReqUnlockChatBubble;
struct ReqUnlockChatBubbleDefaultTypeInternal;
extern ReqUnlockChatBubbleDefaultTypeInternal _ReqUnlockChatBubble_default_instance_;
class ReqUnlockChatMeme;
struct ReqUnlockChatMemeDefaultTypeInternal;
extern ReqUnlockChatMemeDefaultTypeInternal _ReqUnlockChatMeme_default_instance_;
class ReqUnlockChatMemeGroup;
struct ReqUnlockChatMemeGroupDefaultTypeInternal;
extern ReqUnlockChatMemeGroupDefaultTypeInternal _ReqUnlockChatMemeGroup_default_instance_;
class ReqUnlockWitchSkin;
struct ReqUnlockWitchSkinDefaultTypeInternal;
extern ReqUnlockWitchSkinDefaultTypeInternal _ReqUnlockWitchSkin_default_instance_;
class ReqUpdateChatroomAnnouncement;
struct ReqUpdateChatroomAnnouncementDefaultTypeInternal;
extern ReqUpdateChatroomAnnouncementDefaultTypeInternal _ReqUpdateChatroomAnnouncement_default_instance_;
class ReqUpdateModule;
struct ReqUpdateModuleDefaultTypeInternal;
extern ReqUpdateModuleDefaultTypeInternal _ReqUpdateModule_default_instance_;
class ReqUpdatePlayerLastHeartbeatTS;
struct ReqUpdatePlayerLastHeartbeatTSDefaultTypeInternal;
extern ReqUpdatePlayerLastHeartbeatTSDefaultTypeInternal _ReqUpdatePlayerLastHeartbeatTS_default_instance_;
class ReqUpdatePneumaAutoDecomposeState;
struct ReqUpdatePneumaAutoDecomposeStateDefaultTypeInternal;
extern ReqUpdatePneumaAutoDecomposeStateDefaultTypeInternal _ReqUpdatePneumaAutoDecomposeState_default_instance_;
class ReqUpdatePneumaDecomposeScheme;
struct ReqUpdatePneumaDecomposeSchemeDefaultTypeInternal;
extern ReqUpdatePneumaDecomposeSchemeDefaultTypeInternal _ReqUpdatePneumaDecomposeScheme_default_instance_;
class ReqUpdatePneumaIslandShowState;
struct ReqUpdatePneumaIslandShowStateDefaultTypeInternal;
extern ReqUpdatePneumaIslandShowStateDefaultTypeInternal _ReqUpdatePneumaIslandShowState_default_instance_;
class ReqUpgradeExploreGuiderFriendship;
struct ReqUpgradeExploreGuiderFriendshipDefaultTypeInternal;
extern ReqUpgradeExploreGuiderFriendshipDefaultTypeInternal _ReqUpgradeExploreGuiderFriendship_default_instance_;
class ReqUseMagicalMedicine;
struct ReqUseMagicalMedicineDefaultTypeInternal;
extern ReqUseMagicalMedicineDefaultTypeInternal _ReqUseMagicalMedicine_default_instance_;
class ReqWitchKnowledgeLevelUp;
struct ReqWitchKnowledgeLevelUpDefaultTypeInternal;
extern ReqWitchKnowledgeLevelUpDefaultTypeInternal _ReqWitchKnowledgeLevelUp_default_instance_;
class ReqWitchPneumaDecompose;
struct ReqWitchPneumaDecomposeDefaultTypeInternal;
extern ReqWitchPneumaDecomposeDefaultTypeInternal _ReqWitchPneumaDecompose_default_instance_;
class ReqWitchPneumaEnhance;
struct ReqWitchPneumaEnhanceDefaultTypeInternal;
extern ReqWitchPneumaEnhanceDefaultTypeInternal _ReqWitchPneumaEnhance_default_instance_;
class ReqWitchPneumaOpt;
struct ReqWitchPneumaOptDefaultTypeInternal;
extern ReqWitchPneumaOptDefaultTypeInternal _ReqWitchPneumaOpt_default_instance_;
class ReqWitchSkillLevelUp;
struct ReqWitchSkillLevelUpDefaultTypeInternal;
extern ReqWitchSkillLevelUpDefaultTypeInternal _ReqWitchSkillLevelUp_default_instance_;
class ReqWitchStarLevelUp;
struct ReqWitchStarLevelUpDefaultTypeInternal;
extern ReqWitchStarLevelUpDefaultTypeInternal _ReqWitchStarLevelUp_default_instance_;
class ReqWorldSendMailToPlayer;
struct ReqWorldSendMailToPlayerDefaultTypeInternal;
extern ReqWorldSendMailToPlayerDefaultTypeInternal _ReqWorldSendMailToPlayer_default_instance_;
class RewardInfo;
struct RewardInfoDefaultTypeInternal;
extern RewardInfoDefaultTypeInternal _RewardInfo_default_instance_;
class RewardList;
struct RewardListDefaultTypeInternal;
extern RewardListDefaultTypeInternal _RewardList_default_instance_;
class SaveBotArenaBattleReplayDatas;
struct SaveBotArenaBattleReplayDatasDefaultTypeInternal;
extern SaveBotArenaBattleReplayDatasDefaultTypeInternal _SaveBotArenaBattleReplayDatas_default_instance_;
class SavePlayerChallengeList;
struct SavePlayerChallengeListDefaultTypeInternal;
extern SavePlayerChallengeListDefaultTypeInternal _SavePlayerChallengeList_default_instance_;
class SavePlayerHonorPointRanking;
struct SavePlayerHonorPointRankingDefaultTypeInternal;
extern SavePlayerHonorPointRankingDefaultTypeInternal _SavePlayerHonorPointRanking_default_instance_;
class SavePlayerStrategyPointRanking;
struct SavePlayerStrategyPointRankingDefaultTypeInternal;
extern SavePlayerStrategyPointRankingDefaultTypeInternal _SavePlayerStrategyPointRanking_default_instance_;
class ShopReceipt;
struct ShopReceiptDefaultTypeInternal;
extern ShopReceiptDefaultTypeInternal _ShopReceipt_default_instance_;
class StrategyPointRankingItem;
struct StrategyPointRankingItemDefaultTypeInternal;
extern StrategyPointRankingItemDefaultTypeInternal _StrategyPointRankingItem_default_instance_;
class SyncAddPreSendAllPlayersMails;
struct SyncAddPreSendAllPlayersMailsDefaultTypeInternal;
extern SyncAddPreSendAllPlayersMailsDefaultTypeInternal _SyncAddPreSendAllPlayersMails_default_instance_;
class SyncAddPreSendPlayerMails;
struct SyncAddPreSendPlayerMailsDefaultTypeInternal;
extern SyncAddPreSendPlayerMailsDefaultTypeInternal _SyncAddPreSendPlayerMails_default_instance_;
class SyncBlackmartCommodityUpdated;
struct SyncBlackmartCommodityUpdatedDefaultTypeInternal;
extern SyncBlackmartCommodityUpdatedDefaultTypeInternal _SyncBlackmartCommodityUpdated_default_instance_;
class SyncBotArenaBattleIsReady;
struct SyncBotArenaBattleIsReadyDefaultTypeInternal;
extern SyncBotArenaBattleIsReadyDefaultTypeInternal _SyncBotArenaBattleIsReady_default_instance_;
class SyncBotArenaBattleReplayDatas;
struct SyncBotArenaBattleReplayDatasDefaultTypeInternal;
extern SyncBotArenaBattleReplayDatasDefaultTypeInternal _SyncBotArenaBattleReplayDatas_default_instance_;
class SyncBotArenaBattleSettleData;
struct SyncBotArenaBattleSettleDataDefaultTypeInternal;
extern SyncBotArenaBattleSettleDataDefaultTypeInternal _SyncBotArenaBattleSettleData_default_instance_;
class SyncBotArenaStageSession;
struct SyncBotArenaStageSessionDefaultTypeInternal;
extern SyncBotArenaStageSessionDefaultTypeInternal _SyncBotArenaStageSession_default_instance_;
class SyncBotArenaState;
struct SyncBotArenaStateDefaultTypeInternal;
extern SyncBotArenaStateDefaultTypeInternal _SyncBotArenaState_default_instance_;
class SyncDefensivePlayerBattleReward;
struct SyncDefensivePlayerBattleRewardDefaultTypeInternal;
extern SyncDefensivePlayerBattleRewardDefaultTypeInternal _SyncDefensivePlayerBattleReward_default_instance_;
class SyncDelPreSendAllPlayersMails;
struct SyncDelPreSendAllPlayersMailsDefaultTypeInternal;
extern SyncDelPreSendAllPlayersMailsDefaultTypeInternal _SyncDelPreSendAllPlayersMails_default_instance_;
class SyncDelPreSendPlayerMails;
struct SyncDelPreSendPlayerMailsDefaultTypeInternal;
extern SyncDelPreSendPlayerMailsDefaultTypeInternal _SyncDelPreSendPlayerMails_default_instance_;
class SyncPlayerCommunityInfo;
struct SyncPlayerCommunityInfoDefaultTypeInternal;
extern SyncPlayerCommunityInfoDefaultTypeInternal _SyncPlayerCommunityInfo_default_instance_;
class SyncPlayerHonorPointChanged;
struct SyncPlayerHonorPointChangedDefaultTypeInternal;
extern SyncPlayerHonorPointChangedDefaultTypeInternal _SyncPlayerHonorPointChanged_default_instance_;
class SyncPlayerLevelRanking;
struct SyncPlayerLevelRankingDefaultTypeInternal;
extern SyncPlayerLevelRankingDefaultTypeInternal _SyncPlayerLevelRanking_default_instance_;
class SyncPlayerMailSessions;
struct SyncPlayerMailSessionsDefaultTypeInternal;
extern SyncPlayerMailSessionsDefaultTypeInternal _SyncPlayerMailSessions_default_instance_;
class SyncPlayerPropertiesCache;
struct SyncPlayerPropertiesCacheDefaultTypeInternal;
extern SyncPlayerPropertiesCacheDefaultTypeInternal _SyncPlayerPropertiesCache_default_instance_;
class SyncPlayerRecordsCacheAdd;
struct SyncPlayerRecordsCacheAddDefaultTypeInternal;
extern SyncPlayerRecordsCacheAddDefaultTypeInternal _SyncPlayerRecordsCacheAdd_default_instance_;
class SyncPlayerRecordsCacheDel;
struct SyncPlayerRecordsCacheDelDefaultTypeInternal;
extern SyncPlayerRecordsCacheDelDefaultTypeInternal _SyncPlayerRecordsCacheDel_default_instance_;
class SyncPlayerRecordsCacheSwap;
struct SyncPlayerRecordsCacheSwapDefaultTypeInternal;
extern SyncPlayerRecordsCacheSwapDefaultTypeInternal _SyncPlayerRecordsCacheSwap_default_instance_;
class SyncPlayerRecordsCacheUpdate;
struct SyncPlayerRecordsCacheUpdateDefaultTypeInternal;
extern SyncPlayerRecordsCacheUpdateDefaultTypeInternal _SyncPlayerRecordsCacheUpdate_default_instance_;
class SyncPlayerStrategyPointChanged;
struct SyncPlayerStrategyPointChangedDefaultTypeInternal;
extern SyncPlayerStrategyPointChangedDefaultTypeInternal _SyncPlayerStrategyPointChanged_default_instance_;
class SyncQueueUpUserCancelOperation;
struct SyncQueueUpUserCancelOperationDefaultTypeInternal;
extern SyncQueueUpUserCancelOperationDefaultTypeInternal _SyncQueueUpUserCancelOperation_default_instance_;
class SyncSystemFunctionUnlock;
struct SyncSystemFunctionUnlockDefaultTypeInternal;
extern SyncSystemFunctionUnlockDefaultTypeInternal _SyncSystemFunctionUnlock_default_instance_;
class UpdPlayerShopReceipt;
struct UpdPlayerShopReceiptDefaultTypeInternal;
extern UpdPlayerShopReceiptDefaultTypeInternal _UpdPlayerShopReceipt_default_instance_;
class UpdatePlayerChallengeItem;
struct UpdatePlayerChallengeItemDefaultTypeInternal;
extern UpdatePlayerChallengeItemDefaultTypeInternal _UpdatePlayerChallengeItem_default_instance_;
class UpdatePlayerReplayItem;
struct UpdatePlayerReplayItemDefaultTypeInternal;
extern UpdatePlayerReplayItemDefaultTypeInternal _UpdatePlayerReplayItem_default_instance_;
class WitchInfo;
struct WitchInfoDefaultTypeInternal;
extern WitchInfoDefaultTypeInternal _WitchInfo_default_instance_;
}  // namespace KWMsg
PROTOBUF_NAMESPACE_OPEN
template<> ::KWMsg::AckActiveMissionOperation* Arena::CreateMaybeMessage<::KWMsg::AckActiveMissionOperation>(Arena*);
template<> ::KWMsg::AckAddChatGroupUser* Arena::CreateMaybeMessage<::KWMsg::AckAddChatGroupUser>(Arena*);
template<> ::KWMsg::AckAddFriend* Arena::CreateMaybeMessage<::KWMsg::AckAddFriend>(Arena*);
template<> ::KWMsg::AckAdjBotarenaDefensiveTeam* Arena::CreateMaybeMessage<::KWMsg::AckAdjBotarenaDefensiveTeam>(Arena*);
template<> ::KWMsg::AckAppliedCommunityList* Arena::CreateMaybeMessage<::KWMsg::AckAppliedCommunityList>(Arena*);
template<> ::KWMsg::AckAppliedFriendList* Arena::CreateMaybeMessage<::KWMsg::AckAppliedFriendList>(Arena*);
template<> ::KWMsg::AckAppliedPlayerList* Arena::CreateMaybeMessage<::KWMsg::AckAppliedPlayerList>(Arena*);
template<> ::KWMsg::AckApplyJoinCommunity* Arena::CreateMaybeMessage<::KWMsg::AckApplyJoinCommunity>(Arena*);
template<> ::KWMsg::AckBattleAdjWitchTeam* Arena::CreateMaybeMessage<::KWMsg::AckBattleAdjWitchTeam>(Arena*);
template<> ::KWMsg::AckBattleBuyWitchTeam* Arena::CreateMaybeMessage<::KWMsg::AckBattleBuyWitchTeam>(Arena*);
template<> ::KWMsg::AckBattleChangeWitchTeamName* Arena::CreateMaybeMessage<::KWMsg::AckBattleChangeWitchTeamName>(Arena*);
template<> ::KWMsg::AckBattlePreparedInfo* Arena::CreateMaybeMessage<::KWMsg::AckBattlePreparedInfo>(Arena*);
template<> ::KWMsg::AckBattleQuickConfigWitchTeam* Arena::CreateMaybeMessage<::KWMsg::AckBattleQuickConfigWitchTeam>(Arena*);
template<> ::KWMsg::AckBattleResetWitchTeam* Arena::CreateMaybeMessage<::KWMsg::AckBattleResetWitchTeam>(Arena*);
template<> ::KWMsg::AckBlacklist* Arena::CreateMaybeMessage<::KWMsg::AckBlacklist>(Arena*);
template<> ::KWMsg::AckBlacklistOpt* Arena::CreateMaybeMessage<::KWMsg::AckBlacklistOpt>(Arena*);
template<> ::KWMsg::AckBlackmartCommodityList* Arena::CreateMaybeMessage<::KWMsg::AckBlackmartCommodityList>(Arena*);
template<> ::KWMsg::AckBuyBlackmartCommodity* Arena::CreateMaybeMessage<::KWMsg::AckBuyBlackmartCommodity>(Arena*);
template<> ::KWMsg::AckBuyPower* Arena::CreateMaybeMessage<::KWMsg::AckBuyPower>(Arena*);
template<> ::KWMsg::AckBuyProduct* Arena::CreateMaybeMessage<::KWMsg::AckBuyProduct>(Arena*);
template<> ::KWMsg::AckBuyShabowToken* Arena::CreateMaybeMessage<::KWMsg::AckBuyShabowToken>(Arena*);
template<> ::KWMsg::AckCallbackRecharge* Arena::CreateMaybeMessage<::KWMsg::AckCallbackRecharge>(Arena*);
template<> ::KWMsg::AckCancelJoinCommunity* Arena::CreateMaybeMessage<::KWMsg::AckCancelJoinCommunity>(Arena*);
template<> ::KWMsg::AckChapterRewardTipOk* Arena::CreateMaybeMessage<::KWMsg::AckChapterRewardTipOk>(Arena*);
template<> ::KWMsg::AckCheckChatText* Arena::CreateMaybeMessage<::KWMsg::AckCheckChatText>(Arena*);
template<> ::KWMsg::AckClickBotarenaPromptForm* Arena::CreateMaybeMessage<::KWMsg::AckClickBotarenaPromptForm>(Arena*);
template<> ::KWMsg::AckCollectWitch* Arena::CreateMaybeMessage<::KWMsg::AckCollectWitch>(Arena*);
template<> ::KWMsg::AckCollegeAnswer* Arena::CreateMaybeMessage<::KWMsg::AckCollegeAnswer>(Arena*);
template<> ::KWMsg::AckCollegeDrama* Arena::CreateMaybeMessage<::KWMsg::AckCollegeDrama>(Arena*);
template<> ::KWMsg::AckCollegeExamExit* Arena::CreateMaybeMessage<::KWMsg::AckCollegeExamExit>(Arena*);
template<> ::KWMsg::AckCollegeReward* Arena::CreateMaybeMessage<::KWMsg::AckCollegeReward>(Arena*);
template<> ::KWMsg::AckCollegeStartExam* Arena::CreateMaybeMessage<::KWMsg::AckCollegeStartExam>(Arena*);
template<> ::KWMsg::AckCollegeTaskAction* Arena::CreateMaybeMessage<::KWMsg::AckCollegeTaskAction>(Arena*);
template<> ::KWMsg::AckCollegeTaskCountdown* Arena::CreateMaybeMessage<::KWMsg::AckCollegeTaskCountdown>(Arena*);
template<> ::KWMsg::AckCommunitySignIn* Arena::CreateMaybeMessage<::KWMsg::AckCommunitySignIn>(Arena*);
template<> ::KWMsg::AckCreateChatGroup* Arena::CreateMaybeMessage<::KWMsg::AckCreateChatGroup>(Arena*);
template<> ::KWMsg::AckCreateChatroom* Arena::CreateMaybeMessage<::KWMsg::AckCreateChatroom>(Arena*);
template<> ::KWMsg::AckCreateCommunity* Arena::CreateMaybeMessage<::KWMsg::AckCreateCommunity>(Arena*);
template<> ::KWMsg::AckCreateKcpObject* Arena::CreateMaybeMessage<::KWMsg::AckCreateKcpObject>(Arena*);
template<> ::KWMsg::AckCreateOrder* Arena::CreateMaybeMessage<::KWMsg::AckCreateOrder>(Arena*);
template<> ::KWMsg::AckDealWithAddFriend* Arena::CreateMaybeMessage<::KWMsg::AckDealWithAddFriend>(Arena*);
template<> ::KWMsg::AckDealWithJoinCommunity* Arena::CreateMaybeMessage<::KWMsg::AckDealWithJoinCommunity>(Arena*);
template<> ::KWMsg::AckDelFriend* Arena::CreateMaybeMessage<::KWMsg::AckDelFriend>(Arena*);
template<> ::KWMsg::AckDeleteAffair* Arena::CreateMaybeMessage<::KWMsg::AckDeleteAffair>(Arena*);
template<> ::KWMsg::AckDeleteChatGroup* Arena::CreateMaybeMessage<::KWMsg::AckDeleteChatGroup>(Arena*);
template<> ::KWMsg::AckDeleteChatGroupUser* Arena::CreateMaybeMessage<::KWMsg::AckDeleteChatGroupUser>(Arena*);
template<> ::KWMsg::AckDeleteReadedMails* Arena::CreateMaybeMessage<::KWMsg::AckDeleteReadedMails>(Arena*);
template<> ::KWMsg::AckDrawCard* Arena::CreateMaybeMessage<::KWMsg::AckDrawCard>(Arena*);
template<> ::KWMsg::AckEstablishKcpConnection* Arena::CreateMaybeMessage<::KWMsg::AckEstablishKcpConnection>(Arena*);
template<> ::KWMsg::AckExpandWitchPneumaBagSize* Arena::CreateMaybeMessage<::KWMsg::AckExpandWitchPneumaBagSize>(Arena*);
template<> ::KWMsg::AckExploreUpdateNodePostion* Arena::CreateMaybeMessage<::KWMsg::AckExploreUpdateNodePostion>(Arena*);
template<> ::KWMsg::AckFindPlayer* Arena::CreateMaybeMessage<::KWMsg::AckFindPlayer>(Arena*);
template<> ::KWMsg::AckFriendCollectOpt* Arena::CreateMaybeMessage<::KWMsg::AckFriendCollectOpt>(Arena*);
template<> ::KWMsg::AckFriendList* Arena::CreateMaybeMessage<::KWMsg::AckFriendList>(Arena*);
template<> ::KWMsg::AckGetActiveMissionReward* Arena::CreateMaybeMessage<::KWMsg::AckGetActiveMissionReward>(Arena*);
template<> ::KWMsg::AckGetAffairReward* Arena::CreateMaybeMessage<::KWMsg::AckGetAffairReward>(Arena*);
template<> ::KWMsg::AckGetAppointReward* Arena::CreateMaybeMessage<::KWMsg::AckGetAppointReward>(Arena*);
template<> ::KWMsg::AckGetBotArenaMainPageData* Arena::CreateMaybeMessage<::KWMsg::AckGetBotArenaMainPageData>(Arena*);
template<> ::KWMsg::AckGetBotArenaReplayList* Arena::CreateMaybeMessage<::KWMsg::AckGetBotArenaReplayList>(Arena*);
template<> ::KWMsg::AckGetExploreAreaProgressRewards* Arena::CreateMaybeMessage<::KWMsg::AckGetExploreAreaProgressRewards>(Arena*);
template<> ::KWMsg::AckGetExploreMapBranchlineRewards* Arena::CreateMaybeMessage<::KWMsg::AckGetExploreMapBranchlineRewards>(Arena*);
template<> ::KWMsg::AckGetExploreMapStarRewards* Arena::CreateMaybeMessage<::KWMsg::AckGetExploreMapStarRewards>(Arena*);
template<> ::KWMsg::AckGetOutOfMyCommunity* Arena::CreateMaybeMessage<::KWMsg::AckGetOutOfMyCommunity>(Arena*);
template<> ::KWMsg::AckGetPlayerBotArenaChallengeList* Arena::CreateMaybeMessage<::KWMsg::AckGetPlayerBotArenaChallengeList>(Arena*);
template<> ::KWMsg::AckGetPlayerHonorPointRanking* Arena::CreateMaybeMessage<::KWMsg::AckGetPlayerHonorPointRanking>(Arena*);
template<> ::KWMsg::AckGetPlayerStrategyPointRanking* Arena::CreateMaybeMessage<::KWMsg::AckGetPlayerStrategyPointRanking>(Arena*);
template<> ::KWMsg::AckGetPneumaIslandStarReward* Arena::CreateMaybeMessage<::KWMsg::AckGetPneumaIslandStarReward>(Arena*);
template<> ::KWMsg::AckGetShopProducts* Arena::CreateMaybeMessage<::KWMsg::AckGetShopProducts>(Arena*);
template<> ::KWMsg::AckHousekeeperFinishedSignin* Arena::CreateMaybeMessage<::KWMsg::AckHousekeeperFinishedSignin>(Arena*);
template<> ::KWMsg::AckHousekeeperInitSignin* Arena::CreateMaybeMessage<::KWMsg::AckHousekeeperInitSignin>(Arena*);
template<> ::KWMsg::AckInitPlayerName* Arena::CreateMaybeMessage<::KWMsg::AckInitPlayerName>(Arena*);
template<> ::KWMsg::AckModifyApprovedRules* Arena::CreateMaybeMessage<::KWMsg::AckModifyApprovedRules>(Arena*);
template<> ::KWMsg::AckModifyFlagAndIcon* Arena::CreateMaybeMessage<::KWMsg::AckModifyFlagAndIcon>(Arena*);
template<> ::KWMsg::AckModifyNameAndDeclaration* Arena::CreateMaybeMessage<::KWMsg::AckModifyNameAndDeclaration>(Arena*);
template<> ::KWMsg::AckPlayerDataFinished* Arena::CreateMaybeMessage<::KWMsg::AckPlayerDataFinished>(Arena*);
template<> ::KWMsg::AckPlayerEntryList* Arena::CreateMaybeMessage<::KWMsg::AckPlayerEntryList>(Arena*);
template<> ::KWMsg::AckPlayerLeaveList* Arena::CreateMaybeMessage<::KWMsg::AckPlayerLeaveList>(Arena*);
template<> ::KWMsg::AckPromotionOrDemotionManager* Arena::CreateMaybeMessage<::KWMsg::AckPromotionOrDemotionManager>(Arena*);
template<> ::KWMsg::AckPushClientIntoQueueUp* Arena::CreateMaybeMessage<::KWMsg::AckPushClientIntoQueueUp>(Arena*);
template<> ::KWMsg::AckQueryCommunity* Arena::CreateMaybeMessage<::KWMsg::AckQueryCommunity>(Arena*);
template<> ::KWMsg::AckQueueUpGetCurWorldSuitProxy* Arena::CreateMaybeMessage<::KWMsg::AckQueueUpGetCurWorldSuitProxy>(Arena*);
template<> ::KWMsg::AckQuickConfigBotarenaDefensiveTeam* Arena::CreateMaybeMessage<::KWMsg::AckQuickConfigBotarenaDefensiveTeam>(Arena*);
template<> ::KWMsg::AckQuickJoinCommunity* Arena::CreateMaybeMessage<::KWMsg::AckQuickJoinCommunity>(Arena*);
template<> ::KWMsg::AckQuitCommunity* Arena::CreateMaybeMessage<::KWMsg::AckQuitCommunity>(Arena*);
template<> ::KWMsg::AckReadMails* Arena::CreateMaybeMessage<::KWMsg::AckReadMails>(Arena*);
template<> ::KWMsg::AckRecommendedFriendList* Arena::CreateMaybeMessage<::KWMsg::AckRecommendedFriendList>(Arena*);
template<> ::KWMsg::AckRefreshBlackmartCommodityList* Arena::CreateMaybeMessage<::KWMsg::AckRefreshBlackmartCommodityList>(Arena*);
template<> ::KWMsg::AckRefreshPlayerBotArenaChallengeList* Arena::CreateMaybeMessage<::KWMsg::AckRefreshPlayerBotArenaChallengeList>(Arena*);
template<> ::KWMsg::AckRegisterChatSdkAccount* Arena::CreateMaybeMessage<::KWMsg::AckRegisterChatSdkAccount>(Arena*);
template<> ::KWMsg::AckReplayBotArenaBattle* Arena::CreateMaybeMessage<::KWMsg::AckReplayBotArenaBattle>(Arena*);
template<> ::KWMsg::AckReportChatPlayer* Arena::CreateMaybeMessage<::KWMsg::AckReportChatPlayer>(Arena*);
template<> ::KWMsg::AckResetBotarenaDefensiveTeam* Arena::CreateMaybeMessage<::KWMsg::AckResetBotarenaDefensiveTeam>(Arena*);
template<> ::KWMsg::AckSdkLoginInfoAndChatroom* Arena::CreateMaybeMessage<::KWMsg::AckSdkLoginInfoAndChatroom>(Arena*);
template<> ::KWMsg::AckSearchCommunity* Arena::CreateMaybeMessage<::KWMsg::AckSearchCommunity>(Arena*);
template<> ::KWMsg::AckSendChatroomMsg* Arena::CreateMaybeMessage<::KWMsg::AckSendChatroomMsg>(Arena*);
template<> ::KWMsg::AckSendGiftForWitch* Arena::CreateMaybeMessage<::KWMsg::AckSendGiftForWitch>(Arena*);
template<> ::KWMsg::AckSetHouseKeeper* Arena::CreateMaybeMessage<::KWMsg::AckSetHouseKeeper>(Arena*);
template<> ::KWMsg::AckSetHouseKeeperSkinId* Arena::CreateMaybeMessage<::KWMsg::AckSetHouseKeeperSkinId>(Arena*);
template<> ::KWMsg::AckSetSystemFunctionFlag* Arena::CreateMaybeMessage<::KWMsg::AckSetSystemFunctionFlag>(Arena*);
template<> ::KWMsg::AckSpecifiedCommunityPage* Arena::CreateMaybeMessage<::KWMsg::AckSpecifiedCommunityPage>(Arena*);
template<> ::KWMsg::AckStartAffair* Arena::CreateMaybeMessage<::KWMsg::AckStartAffair>(Arena*);
template<> ::KWMsg::AckStartAppoint* Arena::CreateMaybeMessage<::KWMsg::AckStartAppoint>(Arena*);
template<> ::KWMsg::AckSwapScene* Arena::CreateMaybeMessage<::KWMsg::AckSwapScene>(Arena*);
template<> ::KWMsg::AckSwapSceneNotify* Arena::CreateMaybeMessage<::KWMsg::AckSwapSceneNotify>(Arena*);
template<> ::KWMsg::AckSweepEndlessTower* Arena::CreateMaybeMessage<::KWMsg::AckSweepEndlessTower>(Arena*);
template<> ::KWMsg::AckSweepExploreThreeStarNode* Arena::CreateMaybeMessage<::KWMsg::AckSweepExploreThreeStarNode>(Arena*);
template<> ::KWMsg::AckSwitchAppointArea* Arena::CreateMaybeMessage<::KWMsg::AckSwitchAppointArea>(Arena*);
template<> ::KWMsg::AckSwitchChatBubble* Arena::CreateMaybeMessage<::KWMsg::AckSwitchChatBubble>(Arena*);
template<> ::KWMsg::AckTerminateAffair* Arena::CreateMaybeMessage<::KWMsg::AckTerminateAffair>(Arena*);
template<> ::KWMsg::AckTestBattle* Arena::CreateMaybeMessage<::KWMsg::AckTestBattle>(Arena*);
template<> ::KWMsg::AckTransferChatGroup* Arena::CreateMaybeMessage<::KWMsg::AckTransferChatGroup>(Arena*);
template<> ::KWMsg::AckUnlockChatBubble* Arena::CreateMaybeMessage<::KWMsg::AckUnlockChatBubble>(Arena*);
template<> ::KWMsg::AckUnlockChatMeme* Arena::CreateMaybeMessage<::KWMsg::AckUnlockChatMeme>(Arena*);
template<> ::KWMsg::AckUnlockChatMemeGroup* Arena::CreateMaybeMessage<::KWMsg::AckUnlockChatMemeGroup>(Arena*);
template<> ::KWMsg::AckUnlockWitchSkin* Arena::CreateMaybeMessage<::KWMsg::AckUnlockWitchSkin>(Arena*);
template<> ::KWMsg::AckUpdateChatroomAnnouncement* Arena::CreateMaybeMessage<::KWMsg::AckUpdateChatroomAnnouncement>(Arena*);
template<> ::KWMsg::AckUpdateModule* Arena::CreateMaybeMessage<::KWMsg::AckUpdateModule>(Arena*);
template<> ::KWMsg::AckUpdatePneumaAutoDecomposeState* Arena::CreateMaybeMessage<::KWMsg::AckUpdatePneumaAutoDecomposeState>(Arena*);
template<> ::KWMsg::AckUpdatePneumaDecomposeScheme* Arena::CreateMaybeMessage<::KWMsg::AckUpdatePneumaDecomposeScheme>(Arena*);
template<> ::KWMsg::AckUpdatePneumaIslandShowState* Arena::CreateMaybeMessage<::KWMsg::AckUpdatePneumaIslandShowState>(Arena*);
template<> ::KWMsg::AckUpgradeExploreGuiderFriendship* Arena::CreateMaybeMessage<::KWMsg::AckUpgradeExploreGuiderFriendship>(Arena*);
template<> ::KWMsg::AckUseMagicalMedicine* Arena::CreateMaybeMessage<::KWMsg::AckUseMagicalMedicine>(Arena*);
template<> ::KWMsg::AckWitchKnowledgeLevelUp* Arena::CreateMaybeMessage<::KWMsg::AckWitchKnowledgeLevelUp>(Arena*);
template<> ::KWMsg::AckWitchPneumaDecompose* Arena::CreateMaybeMessage<::KWMsg::AckWitchPneumaDecompose>(Arena*);
template<> ::KWMsg::AckWitchPneumaEnhance* Arena::CreateMaybeMessage<::KWMsg::AckWitchPneumaEnhance>(Arena*);
template<> ::KWMsg::AckWitchPneumaOpt* Arena::CreateMaybeMessage<::KWMsg::AckWitchPneumaOpt>(Arena*);
template<> ::KWMsg::AckWitchSkillLevelUp* Arena::CreateMaybeMessage<::KWMsg::AckWitchSkillLevelUp>(Arena*);
template<> ::KWMsg::AckWitchStarLevelUp* Arena::CreateMaybeMessage<::KWMsg::AckWitchStarLevelUp>(Arena*);
template<> ::KWMsg::AckWorldSendMailToPlayer* Arena::CreateMaybeMessage<::KWMsg::AckWorldSendMailToPlayer>(Arena*);
template<> ::KWMsg::AddCommunityActiveValAndExp* Arena::CreateMaybeMessage<::KWMsg::AddCommunityActiveValAndExp>(Arena*);
template<> ::KWMsg::AddPlayerReplayItem* Arena::CreateMaybeMessage<::KWMsg::AddPlayerReplayItem>(Arena*);
template<> ::KWMsg::AddPlayerShopReceipt* Arena::CreateMaybeMessage<::KWMsg::AddPlayerShopReceipt>(Arena*);
template<> ::KWMsg::AppliedCommunityInfo* Arena::CreateMaybeMessage<::KWMsg::AppliedCommunityInfo>(Arena*);
template<> ::KWMsg::AppliedFriendInfo* Arena::CreateMaybeMessage<::KWMsg::AppliedFriendInfo>(Arena*);
template<> ::KWMsg::AppliedPlayerInfo* Arena::CreateMaybeMessage<::KWMsg::AppliedPlayerInfo>(Arena*);
template<> ::KWMsg::BattleEntityInfo* Arena::CreateMaybeMessage<::KWMsg::BattleEntityInfo>(Arena*);
template<> ::KWMsg::BattleWitchInfo* Arena::CreateMaybeMessage<::KWMsg::BattleWitchInfo>(Arena*);
template<> ::KWMsg::BotArenaChallengeItem* Arena::CreateMaybeMessage<::KWMsg::BotArenaChallengeItem>(Arena*);
template<> ::KWMsg::BotArenaChallengeList* Arena::CreateMaybeMessage<::KWMsg::BotArenaChallengeList>(Arena*);
template<> ::KWMsg::BotArenaReplayItem* Arena::CreateMaybeMessage<::KWMsg::BotArenaReplayItem>(Arena*);
template<> ::KWMsg::BotArenaReplayList* Arena::CreateMaybeMessage<::KWMsg::BotArenaReplayList>(Arena*);
template<> ::KWMsg::CommonGetRewardInfo* Arena::CreateMaybeMessage<::KWMsg::CommonGetRewardInfo>(Arena*);
template<> ::KWMsg::CommonReward* Arena::CreateMaybeMessage<::KWMsg::CommonReward>(Arena*);
template<> ::KWMsg::CommunityInfo* Arena::CreateMaybeMessage<::KWMsg::CommunityInfo>(Arena*);
template<> ::KWMsg::CommunityMemberInfo* Arena::CreateMaybeMessage<::KWMsg::CommunityMemberInfo>(Arena*);
template<> ::KWMsg::DelBotArenaBattleReplayDatas* Arena::CreateMaybeMessage<::KWMsg::DelBotArenaBattleReplayDatas>(Arena*);
template<> ::KWMsg::DelPlayerReplayItem* Arena::CreateMaybeMessage<::KWMsg::DelPlayerReplayItem>(Arena*);
template<> ::KWMsg::DelPlayerShopReceipts* Arena::CreateMaybeMessage<::KWMsg::DelPlayerShopReceipts>(Arena*);
template<> ::KWMsg::DrawCardInfo* Arena::CreateMaybeMessage<::KWMsg::DrawCardInfo>(Arena*);
template<> ::KWMsg::ExamQuestion* Arena::CreateMaybeMessage<::KWMsg::ExamQuestion>(Arena*);
template<> ::KWMsg::FriendInfo* Arena::CreateMaybeMessage<::KWMsg::FriendInfo>(Arena*);
template<> ::KWMsg::GuildInfo* Arena::CreateMaybeMessage<::KWMsg::GuildInfo>(Arena*);
template<> ::KWMsg::HonorPointRankingItem* Arena::CreateMaybeMessage<::KWMsg::HonorPointRankingItem>(Arena*);
template<> ::KWMsg::LoadPlayerPropertiesCache* Arena::CreateMaybeMessage<::KWMsg::LoadPlayerPropertiesCache>(Arena*);
template<> ::KWMsg::LoadPlayerRecordsCache* Arena::CreateMaybeMessage<::KWMsg::LoadPlayerRecordsCache>(Arena*);
template<> ::KWMsg::MailInfo* Arena::CreateMaybeMessage<::KWMsg::MailInfo>(Arena*);
template<> ::KWMsg::MailInfos* Arena::CreateMaybeMessage<::KWMsg::MailInfos>(Arena*);
template<> ::KWMsg::NotifyApplyJoinCommunityResult* Arena::CreateMaybeMessage<::KWMsg::NotifyApplyJoinCommunityResult>(Arena*);
template<> ::KWMsg::NotifyPlayerGetFiredFromCommunity* Arena::CreateMaybeMessage<::KWMsg::NotifyPlayerGetFiredFromCommunity>(Arena*);
template<> ::KWMsg::PlayerBaseInfo* Arena::CreateMaybeMessage<::KWMsg::PlayerBaseInfo>(Arena*);
template<> ::KWMsg::PlayerEntryInfo* Arena::CreateMaybeMessage<::KWMsg::PlayerEntryInfo>(Arena*);
template<> ::KWMsg::PlayerInfo* Arena::CreateMaybeMessage<::KWMsg::PlayerInfo>(Arena*);
template<> ::KWMsg::PneumaDecomposeScheme* Arena::CreateMaybeMessage<::KWMsg::PneumaDecomposeScheme>(Arena*);
template<> ::KWMsg::PosSyncUnit* Arena::CreateMaybeMessage<::KWMsg::PosSyncUnit>(Arena*);
template<> ::KWMsg::ProductContent* Arena::CreateMaybeMessage<::KWMsg::ProductContent>(Arena*);
template<> ::KWMsg::ProductInfo* Arena::CreateMaybeMessage<::KWMsg::ProductInfo>(Arena*);
template<> ::KWMsg::ProductPrice* Arena::CreateMaybeMessage<::KWMsg::ProductPrice>(Arena*);
template<> ::KWMsg::RecommendedFriendInfo* Arena::CreateMaybeMessage<::KWMsg::RecommendedFriendInfo>(Arena*);
template<> ::KWMsg::ReqAckHeartBeat* Arena::CreateMaybeMessage<::KWMsg::ReqAckHeartBeat>(Arena*);
template<> ::KWMsg::ReqAckLagTest* Arena::CreateMaybeMessage<::KWMsg::ReqAckLagTest>(Arena*);
template<> ::KWMsg::ReqAckPlayerChat* Arena::CreateMaybeMessage<::KWMsg::ReqAckPlayerChat>(Arena*);
template<> ::KWMsg::ReqAckPlayerPosSync* Arena::CreateMaybeMessage<::KWMsg::ReqAckPlayerPosSync>(Arena*);
template<> ::KWMsg::ReqActiveMissionOperation* Arena::CreateMaybeMessage<::KWMsg::ReqActiveMissionOperation>(Arena*);
template<> ::KWMsg::ReqAddChatGroupUser* Arena::CreateMaybeMessage<::KWMsg::ReqAddChatGroupUser>(Arena*);
template<> ::KWMsg::ReqAddFriend* Arena::CreateMaybeMessage<::KWMsg::ReqAddFriend>(Arena*);
template<> ::KWMsg::ReqAdjBotarenaDefensiveTeam* Arena::CreateMaybeMessage<::KWMsg::ReqAdjBotarenaDefensiveTeam>(Arena*);
template<> ::KWMsg::ReqAppliedCommunityList* Arena::CreateMaybeMessage<::KWMsg::ReqAppliedCommunityList>(Arena*);
template<> ::KWMsg::ReqAppliedFriendList* Arena::CreateMaybeMessage<::KWMsg::ReqAppliedFriendList>(Arena*);
template<> ::KWMsg::ReqAppliedPlayerList* Arena::CreateMaybeMessage<::KWMsg::ReqAppliedPlayerList>(Arena*);
template<> ::KWMsg::ReqApplyJoinCommunity* Arena::CreateMaybeMessage<::KWMsg::ReqApplyJoinCommunity>(Arena*);
template<> ::KWMsg::ReqBattleAdjWitchTeam* Arena::CreateMaybeMessage<::KWMsg::ReqBattleAdjWitchTeam>(Arena*);
template<> ::KWMsg::ReqBattleBuyWitchTeam* Arena::CreateMaybeMessage<::KWMsg::ReqBattleBuyWitchTeam>(Arena*);
template<> ::KWMsg::ReqBattleChangeWitchTeamName* Arena::CreateMaybeMessage<::KWMsg::ReqBattleChangeWitchTeamName>(Arena*);
template<> ::KWMsg::ReqBattlePreparedInfo* Arena::CreateMaybeMessage<::KWMsg::ReqBattlePreparedInfo>(Arena*);
template<> ::KWMsg::ReqBattleQuickConfigWitchTeam* Arena::CreateMaybeMessage<::KWMsg::ReqBattleQuickConfigWitchTeam>(Arena*);
template<> ::KWMsg::ReqBattleResetWitchTeam* Arena::CreateMaybeMessage<::KWMsg::ReqBattleResetWitchTeam>(Arena*);
template<> ::KWMsg::ReqBlacklist* Arena::CreateMaybeMessage<::KWMsg::ReqBlacklist>(Arena*);
template<> ::KWMsg::ReqBlacklistOpt* Arena::CreateMaybeMessage<::KWMsg::ReqBlacklistOpt>(Arena*);
template<> ::KWMsg::ReqBlackmartCommodityList* Arena::CreateMaybeMessage<::KWMsg::ReqBlackmartCommodityList>(Arena*);
template<> ::KWMsg::ReqBuyBlackmartCommodity* Arena::CreateMaybeMessage<::KWMsg::ReqBuyBlackmartCommodity>(Arena*);
template<> ::KWMsg::ReqBuyPower* Arena::CreateMaybeMessage<::KWMsg::ReqBuyPower>(Arena*);
template<> ::KWMsg::ReqBuyProduct* Arena::CreateMaybeMessage<::KWMsg::ReqBuyProduct>(Arena*);
template<> ::KWMsg::ReqBuyShabowToken* Arena::CreateMaybeMessage<::KWMsg::ReqBuyShabowToken>(Arena*);
template<> ::KWMsg::ReqCallbackRecharge* Arena::CreateMaybeMessage<::KWMsg::ReqCallbackRecharge>(Arena*);
template<> ::KWMsg::ReqCancelJoinCommunity* Arena::CreateMaybeMessage<::KWMsg::ReqCancelJoinCommunity>(Arena*);
template<> ::KWMsg::ReqChapterRewardTipOk* Arena::CreateMaybeMessage<::KWMsg::ReqChapterRewardTipOk>(Arena*);
template<> ::KWMsg::ReqCheckChatText* Arena::CreateMaybeMessage<::KWMsg::ReqCheckChatText>(Arena*);
template<> ::KWMsg::ReqClickBotarenaPromptForm* Arena::CreateMaybeMessage<::KWMsg::ReqClickBotarenaPromptForm>(Arena*);
template<> ::KWMsg::ReqCollectWitch* Arena::CreateMaybeMessage<::KWMsg::ReqCollectWitch>(Arena*);
template<> ::KWMsg::ReqCollegeAnswer* Arena::CreateMaybeMessage<::KWMsg::ReqCollegeAnswer>(Arena*);
template<> ::KWMsg::ReqCollegeDrama* Arena::CreateMaybeMessage<::KWMsg::ReqCollegeDrama>(Arena*);
template<> ::KWMsg::ReqCollegeExamExit* Arena::CreateMaybeMessage<::KWMsg::ReqCollegeExamExit>(Arena*);
template<> ::KWMsg::ReqCollegeReward* Arena::CreateMaybeMessage<::KWMsg::ReqCollegeReward>(Arena*);
template<> ::KWMsg::ReqCollegeStartExam* Arena::CreateMaybeMessage<::KWMsg::ReqCollegeStartExam>(Arena*);
template<> ::KWMsg::ReqCollegeTaskAction* Arena::CreateMaybeMessage<::KWMsg::ReqCollegeTaskAction>(Arena*);
template<> ::KWMsg::ReqCollegeTaskCountdown* Arena::CreateMaybeMessage<::KWMsg::ReqCollegeTaskCountdown>(Arena*);
template<> ::KWMsg::ReqCommunitySignIn* Arena::CreateMaybeMessage<::KWMsg::ReqCommunitySignIn>(Arena*);
template<> ::KWMsg::ReqCreateChatGroup* Arena::CreateMaybeMessage<::KWMsg::ReqCreateChatGroup>(Arena*);
template<> ::KWMsg::ReqCreateChatroom* Arena::CreateMaybeMessage<::KWMsg::ReqCreateChatroom>(Arena*);
template<> ::KWMsg::ReqCreateCommunity* Arena::CreateMaybeMessage<::KWMsg::ReqCreateCommunity>(Arena*);
template<> ::KWMsg::ReqCreateKcpObject* Arena::CreateMaybeMessage<::KWMsg::ReqCreateKcpObject>(Arena*);
template<> ::KWMsg::ReqCreateOrder* Arena::CreateMaybeMessage<::KWMsg::ReqCreateOrder>(Arena*);
template<> ::KWMsg::ReqDealWithAddFriend* Arena::CreateMaybeMessage<::KWMsg::ReqDealWithAddFriend>(Arena*);
template<> ::KWMsg::ReqDealWithJoinCommunity* Arena::CreateMaybeMessage<::KWMsg::ReqDealWithJoinCommunity>(Arena*);
template<> ::KWMsg::ReqDelFriend* Arena::CreateMaybeMessage<::KWMsg::ReqDelFriend>(Arena*);
template<> ::KWMsg::ReqDeleteAffair* Arena::CreateMaybeMessage<::KWMsg::ReqDeleteAffair>(Arena*);
template<> ::KWMsg::ReqDeleteChatGroup* Arena::CreateMaybeMessage<::KWMsg::ReqDeleteChatGroup>(Arena*);
template<> ::KWMsg::ReqDeleteChatGroupUser* Arena::CreateMaybeMessage<::KWMsg::ReqDeleteChatGroupUser>(Arena*);
template<> ::KWMsg::ReqDeleteReadedMails* Arena::CreateMaybeMessage<::KWMsg::ReqDeleteReadedMails>(Arena*);
template<> ::KWMsg::ReqDrawCard* Arena::CreateMaybeMessage<::KWMsg::ReqDrawCard>(Arena*);
template<> ::KWMsg::ReqEstablishKcpConnection* Arena::CreateMaybeMessage<::KWMsg::ReqEstablishKcpConnection>(Arena*);
template<> ::KWMsg::ReqExpandWitchPneumaBagSize* Arena::CreateMaybeMessage<::KWMsg::ReqExpandWitchPneumaBagSize>(Arena*);
template<> ::KWMsg::ReqExploreUpdateNodePostion* Arena::CreateMaybeMessage<::KWMsg::ReqExploreUpdateNodePostion>(Arena*);
template<> ::KWMsg::ReqFindPlayer* Arena::CreateMaybeMessage<::KWMsg::ReqFindPlayer>(Arena*);
template<> ::KWMsg::ReqFriendCollectOpt* Arena::CreateMaybeMessage<::KWMsg::ReqFriendCollectOpt>(Arena*);
template<> ::KWMsg::ReqFriendList* Arena::CreateMaybeMessage<::KWMsg::ReqFriendList>(Arena*);
template<> ::KWMsg::ReqGetActiveMissionReward* Arena::CreateMaybeMessage<::KWMsg::ReqGetActiveMissionReward>(Arena*);
template<> ::KWMsg::ReqGetAffairReward* Arena::CreateMaybeMessage<::KWMsg::ReqGetAffairReward>(Arena*);
template<> ::KWMsg::ReqGetAppointReward* Arena::CreateMaybeMessage<::KWMsg::ReqGetAppointReward>(Arena*);
template<> ::KWMsg::ReqGetBotArenaMainPageData* Arena::CreateMaybeMessage<::KWMsg::ReqGetBotArenaMainPageData>(Arena*);
template<> ::KWMsg::ReqGetBotArenaReplayList* Arena::CreateMaybeMessage<::KWMsg::ReqGetBotArenaReplayList>(Arena*);
template<> ::KWMsg::ReqGetExploreAreaProgressRewards* Arena::CreateMaybeMessage<::KWMsg::ReqGetExploreAreaProgressRewards>(Arena*);
template<> ::KWMsg::ReqGetExploreMapBranchlineRewards* Arena::CreateMaybeMessage<::KWMsg::ReqGetExploreMapBranchlineRewards>(Arena*);
template<> ::KWMsg::ReqGetExploreMapStarRewards* Arena::CreateMaybeMessage<::KWMsg::ReqGetExploreMapStarRewards>(Arena*);
template<> ::KWMsg::ReqGetOutOfMyCommunity* Arena::CreateMaybeMessage<::KWMsg::ReqGetOutOfMyCommunity>(Arena*);
template<> ::KWMsg::ReqGetPlayerBotArenaChallengeList* Arena::CreateMaybeMessage<::KWMsg::ReqGetPlayerBotArenaChallengeList>(Arena*);
template<> ::KWMsg::ReqGetPlayerHonorPointRanking* Arena::CreateMaybeMessage<::KWMsg::ReqGetPlayerHonorPointRanking>(Arena*);
template<> ::KWMsg::ReqGetPlayerStrategyPointRanking* Arena::CreateMaybeMessage<::KWMsg::ReqGetPlayerStrategyPointRanking>(Arena*);
template<> ::KWMsg::ReqGetPneumaIslandStarReward* Arena::CreateMaybeMessage<::KWMsg::ReqGetPneumaIslandStarReward>(Arena*);
template<> ::KWMsg::ReqGetShopProducts* Arena::CreateMaybeMessage<::KWMsg::ReqGetShopProducts>(Arena*);
template<> ::KWMsg::ReqHousekeeperFinishedSignin* Arena::CreateMaybeMessage<::KWMsg::ReqHousekeeperFinishedSignin>(Arena*);
template<> ::KWMsg::ReqHousekeeperInitSignin* Arena::CreateMaybeMessage<::KWMsg::ReqHousekeeperInitSignin>(Arena*);
template<> ::KWMsg::ReqInitPlayerName* Arena::CreateMaybeMessage<::KWMsg::ReqInitPlayerName>(Arena*);
template<> ::KWMsg::ReqLeaveGameServer* Arena::CreateMaybeMessage<::KWMsg::ReqLeaveGameServer>(Arena*);
template<> ::KWMsg::ReqModifyApprovedRules* Arena::CreateMaybeMessage<::KWMsg::ReqModifyApprovedRules>(Arena*);
template<> ::KWMsg::ReqModifyFlagAndIcon* Arena::CreateMaybeMessage<::KWMsg::ReqModifyFlagAndIcon>(Arena*);
template<> ::KWMsg::ReqModifyNameAndDeclaration* Arena::CreateMaybeMessage<::KWMsg::ReqModifyNameAndDeclaration>(Arena*);
template<> ::KWMsg::ReqPromotionOrDemotionManager* Arena::CreateMaybeMessage<::KWMsg::ReqPromotionOrDemotionManager>(Arena*);
template<> ::KWMsg::ReqQueryCommunity* Arena::CreateMaybeMessage<::KWMsg::ReqQueryCommunity>(Arena*);
template<> ::KWMsg::ReqQueueUpGetCurWorldSuitProxy* Arena::CreateMaybeMessage<::KWMsg::ReqQueueUpGetCurWorldSuitProxy>(Arena*);
template<> ::KWMsg::ReqQuickConfigBotarenaDefensiveTeam* Arena::CreateMaybeMessage<::KWMsg::ReqQuickConfigBotarenaDefensiveTeam>(Arena*);
template<> ::KWMsg::ReqQuickJoinCommunity* Arena::CreateMaybeMessage<::KWMsg::ReqQuickJoinCommunity>(Arena*);
template<> ::KWMsg::ReqQuitCommunity* Arena::CreateMaybeMessage<::KWMsg::ReqQuitCommunity>(Arena*);
template<> ::KWMsg::ReqReadMails* Arena::CreateMaybeMessage<::KWMsg::ReqReadMails>(Arena*);
template<> ::KWMsg::ReqRecommendedFriendList* Arena::CreateMaybeMessage<::KWMsg::ReqRecommendedFriendList>(Arena*);
template<> ::KWMsg::ReqRefreshBlackmartCommodityList* Arena::CreateMaybeMessage<::KWMsg::ReqRefreshBlackmartCommodityList>(Arena*);
template<> ::KWMsg::ReqRefreshPlayerBotArenaChallengeList* Arena::CreateMaybeMessage<::KWMsg::ReqRefreshPlayerBotArenaChallengeList>(Arena*);
template<> ::KWMsg::ReqRegisterChatSdkAccount* Arena::CreateMaybeMessage<::KWMsg::ReqRegisterChatSdkAccount>(Arena*);
template<> ::KWMsg::ReqReplayBotArenaBattle* Arena::CreateMaybeMessage<::KWMsg::ReqReplayBotArenaBattle>(Arena*);
template<> ::KWMsg::ReqReportChatPlayer* Arena::CreateMaybeMessage<::KWMsg::ReqReportChatPlayer>(Arena*);
template<> ::KWMsg::ReqResetBotarenaDefensiveTeam* Arena::CreateMaybeMessage<::KWMsg::ReqResetBotarenaDefensiveTeam>(Arena*);
template<> ::KWMsg::ReqSdkLoginInfoAndChatroom* Arena::CreateMaybeMessage<::KWMsg::ReqSdkLoginInfoAndChatroom>(Arena*);
template<> ::KWMsg::ReqSearchCommunity* Arena::CreateMaybeMessage<::KWMsg::ReqSearchCommunity>(Arena*);
template<> ::KWMsg::ReqSendChatroomMsg* Arena::CreateMaybeMessage<::KWMsg::ReqSendChatroomMsg>(Arena*);
template<> ::KWMsg::ReqSendGiftForWitch* Arena::CreateMaybeMessage<::KWMsg::ReqSendGiftForWitch>(Arena*);
template<> ::KWMsg::ReqSetHouseKeeper* Arena::CreateMaybeMessage<::KWMsg::ReqSetHouseKeeper>(Arena*);
template<> ::KWMsg::ReqSetHouseKeeperSkinId* Arena::CreateMaybeMessage<::KWMsg::ReqSetHouseKeeperSkinId>(Arena*);
template<> ::KWMsg::ReqSetItem* Arena::CreateMaybeMessage<::KWMsg::ReqSetItem>(Arena*);
template<> ::KWMsg::ReqSetSystemFunctionFlag* Arena::CreateMaybeMessage<::KWMsg::ReqSetSystemFunctionFlag>(Arena*);
template<> ::KWMsg::ReqSpecifiedCommunityPage* Arena::CreateMaybeMessage<::KWMsg::ReqSpecifiedCommunityPage>(Arena*);
template<> ::KWMsg::ReqStartAffair* Arena::CreateMaybeMessage<::KWMsg::ReqStartAffair>(Arena*);
template<> ::KWMsg::ReqStartAppoint* Arena::CreateMaybeMessage<::KWMsg::ReqStartAppoint>(Arena*);
template<> ::KWMsg::ReqSwapScene* Arena::CreateMaybeMessage<::KWMsg::ReqSwapScene>(Arena*);
template<> ::KWMsg::ReqSweepEndlessTower* Arena::CreateMaybeMessage<::KWMsg::ReqSweepEndlessTower>(Arena*);
template<> ::KWMsg::ReqSweepExploreThreeStarNode* Arena::CreateMaybeMessage<::KWMsg::ReqSweepExploreThreeStarNode>(Arena*);
template<> ::KWMsg::ReqSwitchAppointArea* Arena::CreateMaybeMessage<::KWMsg::ReqSwitchAppointArea>(Arena*);
template<> ::KWMsg::ReqSwitchChatBubble* Arena::CreateMaybeMessage<::KWMsg::ReqSwitchChatBubble>(Arena*);
template<> ::KWMsg::ReqTerminateAffair* Arena::CreateMaybeMessage<::KWMsg::ReqTerminateAffair>(Arena*);
template<> ::KWMsg::ReqTestBattle* Arena::CreateMaybeMessage<::KWMsg::ReqTestBattle>(Arena*);
template<> ::KWMsg::ReqTestRecruitWitch* Arena::CreateMaybeMessage<::KWMsg::ReqTestRecruitWitch>(Arena*);
template<> ::KWMsg::ReqTestSetCollegeExamStatus* Arena::CreateMaybeMessage<::KWMsg::ReqTestSetCollegeExamStatus>(Arena*);
template<> ::KWMsg::ReqTestSetResource* Arena::CreateMaybeMessage<::KWMsg::ReqTestSetResource>(Arena*);
template<> ::KWMsg::ReqTransferChatGroup* Arena::CreateMaybeMessage<::KWMsg::ReqTransferChatGroup>(Arena*);
template<> ::KWMsg::ReqTryPushClientIntoQueueUp* Arena::CreateMaybeMessage<::KWMsg::ReqTryPushClientIntoQueueUp>(Arena*);
template<> ::KWMsg::ReqUnlockChatBubble* Arena::CreateMaybeMessage<::KWMsg::ReqUnlockChatBubble>(Arena*);
template<> ::KWMsg::ReqUnlockChatMeme* Arena::CreateMaybeMessage<::KWMsg::ReqUnlockChatMeme>(Arena*);
template<> ::KWMsg::ReqUnlockChatMemeGroup* Arena::CreateMaybeMessage<::KWMsg::ReqUnlockChatMemeGroup>(Arena*);
template<> ::KWMsg::ReqUnlockWitchSkin* Arena::CreateMaybeMessage<::KWMsg::ReqUnlockWitchSkin>(Arena*);
template<> ::KWMsg::ReqUpdateChatroomAnnouncement* Arena::CreateMaybeMessage<::KWMsg::ReqUpdateChatroomAnnouncement>(Arena*);
template<> ::KWMsg::ReqUpdateModule* Arena::CreateMaybeMessage<::KWMsg::ReqUpdateModule>(Arena*);
template<> ::KWMsg::ReqUpdatePlayerLastHeartbeatTS* Arena::CreateMaybeMessage<::KWMsg::ReqUpdatePlayerLastHeartbeatTS>(Arena*);
template<> ::KWMsg::ReqUpdatePneumaAutoDecomposeState* Arena::CreateMaybeMessage<::KWMsg::ReqUpdatePneumaAutoDecomposeState>(Arena*);
template<> ::KWMsg::ReqUpdatePneumaDecomposeScheme* Arena::CreateMaybeMessage<::KWMsg::ReqUpdatePneumaDecomposeScheme>(Arena*);
template<> ::KWMsg::ReqUpdatePneumaIslandShowState* Arena::CreateMaybeMessage<::KWMsg::ReqUpdatePneumaIslandShowState>(Arena*);
template<> ::KWMsg::ReqUpgradeExploreGuiderFriendship* Arena::CreateMaybeMessage<::KWMsg::ReqUpgradeExploreGuiderFriendship>(Arena*);
template<> ::KWMsg::ReqUseMagicalMedicine* Arena::CreateMaybeMessage<::KWMsg::ReqUseMagicalMedicine>(Arena*);
template<> ::KWMsg::ReqWitchKnowledgeLevelUp* Arena::CreateMaybeMessage<::KWMsg::ReqWitchKnowledgeLevelUp>(Arena*);
template<> ::KWMsg::ReqWitchPneumaDecompose* Arena::CreateMaybeMessage<::KWMsg::ReqWitchPneumaDecompose>(Arena*);
template<> ::KWMsg::ReqWitchPneumaEnhance* Arena::CreateMaybeMessage<::KWMsg::ReqWitchPneumaEnhance>(Arena*);
template<> ::KWMsg::ReqWitchPneumaOpt* Arena::CreateMaybeMessage<::KWMsg::ReqWitchPneumaOpt>(Arena*);
template<> ::KWMsg::ReqWitchSkillLevelUp* Arena::CreateMaybeMessage<::KWMsg::ReqWitchSkillLevelUp>(Arena*);
template<> ::KWMsg::ReqWitchStarLevelUp* Arena::CreateMaybeMessage<::KWMsg::ReqWitchStarLevelUp>(Arena*);
template<> ::KWMsg::ReqWorldSendMailToPlayer* Arena::CreateMaybeMessage<::KWMsg::ReqWorldSendMailToPlayer>(Arena*);
template<> ::KWMsg::RewardInfo* Arena::CreateMaybeMessage<::KWMsg::RewardInfo>(Arena*);
template<> ::KWMsg::RewardList* Arena::CreateMaybeMessage<::KWMsg::RewardList>(Arena*);
template<> ::KWMsg::SaveBotArenaBattleReplayDatas* Arena::CreateMaybeMessage<::KWMsg::SaveBotArenaBattleReplayDatas>(Arena*);
template<> ::KWMsg::SavePlayerChallengeList* Arena::CreateMaybeMessage<::KWMsg::SavePlayerChallengeList>(Arena*);
template<> ::KWMsg::SavePlayerHonorPointRanking* Arena::CreateMaybeMessage<::KWMsg::SavePlayerHonorPointRanking>(Arena*);
template<> ::KWMsg::SavePlayerStrategyPointRanking* Arena::CreateMaybeMessage<::KWMsg::SavePlayerStrategyPointRanking>(Arena*);
template<> ::KWMsg::ShopReceipt* Arena::CreateMaybeMessage<::KWMsg::ShopReceipt>(Arena*);
template<> ::KWMsg::StrategyPointRankingItem* Arena::CreateMaybeMessage<::KWMsg::StrategyPointRankingItem>(Arena*);
template<> ::KWMsg::SyncAddPreSendAllPlayersMails* Arena::CreateMaybeMessage<::KWMsg::SyncAddPreSendAllPlayersMails>(Arena*);
template<> ::KWMsg::SyncAddPreSendPlayerMails* Arena::CreateMaybeMessage<::KWMsg::SyncAddPreSendPlayerMails>(Arena*);
template<> ::KWMsg::SyncBlackmartCommodityUpdated* Arena::CreateMaybeMessage<::KWMsg::SyncBlackmartCommodityUpdated>(Arena*);
template<> ::KWMsg::SyncBotArenaBattleIsReady* Arena::CreateMaybeMessage<::KWMsg::SyncBotArenaBattleIsReady>(Arena*);
template<> ::KWMsg::SyncBotArenaBattleReplayDatas* Arena::CreateMaybeMessage<::KWMsg::SyncBotArenaBattleReplayDatas>(Arena*);
template<> ::KWMsg::SyncBotArenaBattleSettleData* Arena::CreateMaybeMessage<::KWMsg::SyncBotArenaBattleSettleData>(Arena*);
template<> ::KWMsg::SyncBotArenaStageSession* Arena::CreateMaybeMessage<::KWMsg::SyncBotArenaStageSession>(Arena*);
template<> ::KWMsg::SyncBotArenaState* Arena::CreateMaybeMessage<::KWMsg::SyncBotArenaState>(Arena*);
template<> ::KWMsg::SyncDefensivePlayerBattleReward* Arena::CreateMaybeMessage<::KWMsg::SyncDefensivePlayerBattleReward>(Arena*);
template<> ::KWMsg::SyncDelPreSendAllPlayersMails* Arena::CreateMaybeMessage<::KWMsg::SyncDelPreSendAllPlayersMails>(Arena*);
template<> ::KWMsg::SyncDelPreSendPlayerMails* Arena::CreateMaybeMessage<::KWMsg::SyncDelPreSendPlayerMails>(Arena*);
template<> ::KWMsg::SyncPlayerCommunityInfo* Arena::CreateMaybeMessage<::KWMsg::SyncPlayerCommunityInfo>(Arena*);
template<> ::KWMsg::SyncPlayerHonorPointChanged* Arena::CreateMaybeMessage<::KWMsg::SyncPlayerHonorPointChanged>(Arena*);
template<> ::KWMsg::SyncPlayerLevelRanking* Arena::CreateMaybeMessage<::KWMsg::SyncPlayerLevelRanking>(Arena*);
template<> ::KWMsg::SyncPlayerMailSessions* Arena::CreateMaybeMessage<::KWMsg::SyncPlayerMailSessions>(Arena*);
template<> ::KWMsg::SyncPlayerPropertiesCache* Arena::CreateMaybeMessage<::KWMsg::SyncPlayerPropertiesCache>(Arena*);
template<> ::KWMsg::SyncPlayerRecordsCacheAdd* Arena::CreateMaybeMessage<::KWMsg::SyncPlayerRecordsCacheAdd>(Arena*);
template<> ::KWMsg::SyncPlayerRecordsCacheDel* Arena::CreateMaybeMessage<::KWMsg::SyncPlayerRecordsCacheDel>(Arena*);
template<> ::KWMsg::SyncPlayerRecordsCacheSwap* Arena::CreateMaybeMessage<::KWMsg::SyncPlayerRecordsCacheSwap>(Arena*);
template<> ::KWMsg::SyncPlayerRecordsCacheUpdate* Arena::CreateMaybeMessage<::KWMsg::SyncPlayerRecordsCacheUpdate>(Arena*);
template<> ::KWMsg::SyncPlayerStrategyPointChanged* Arena::CreateMaybeMessage<::KWMsg::SyncPlayerStrategyPointChanged>(Arena*);
template<> ::KWMsg::SyncQueueUpUserCancelOperation* Arena::CreateMaybeMessage<::KWMsg::SyncQueueUpUserCancelOperation>(Arena*);
template<> ::KWMsg::SyncSystemFunctionUnlock* Arena::CreateMaybeMessage<::KWMsg::SyncSystemFunctionUnlock>(Arena*);
template<> ::KWMsg::UpdPlayerShopReceipt* Arena::CreateMaybeMessage<::KWMsg::UpdPlayerShopReceipt>(Arena*);
template<> ::KWMsg::UpdatePlayerChallengeItem* Arena::CreateMaybeMessage<::KWMsg::UpdatePlayerChallengeItem>(Arena*);
template<> ::KWMsg::UpdatePlayerReplayItem* Arena::CreateMaybeMessage<::KWMsg::UpdatePlayerReplayItem>(Arena*);
template<> ::KWMsg::WitchInfo* Arena::CreateMaybeMessage<::KWMsg::WitchInfo>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace KWMsg {

enum PosSyncUnit_EMoveType : int {
  PosSyncUnit_EMoveType_EMT_WALK = 0,
  PosSyncUnit_EMoveType_EET_SPEEDY = 1,
  PosSyncUnit_EMoveType_EET_TELEPORT = 2,
  PosSyncUnit_EMoveType_PosSyncUnit_EMoveType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  PosSyncUnit_EMoveType_PosSyncUnit_EMoveType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool PosSyncUnit_EMoveType_IsValid(int value);
constexpr PosSyncUnit_EMoveType PosSyncUnit_EMoveType_EMoveType_MIN = PosSyncUnit_EMoveType_EMT_WALK;
constexpr PosSyncUnit_EMoveType PosSyncUnit_EMoveType_EMoveType_MAX = PosSyncUnit_EMoveType_EET_TELEPORT;
constexpr int PosSyncUnit_EMoveType_EMoveType_ARRAYSIZE = PosSyncUnit_EMoveType_EMoveType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PosSyncUnit_EMoveType_descriptor();
template<typename T>
inline const std::string& PosSyncUnit_EMoveType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, PosSyncUnit_EMoveType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function PosSyncUnit_EMoveType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    PosSyncUnit_EMoveType_descriptor(), enum_t_value);
}
inline bool PosSyncUnit_EMoveType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, PosSyncUnit_EMoveType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<PosSyncUnit_EMoveType>(
    PosSyncUnit_EMoveType_descriptor(), name, value);
}
enum ReqAckPlayerChat_EGameChatChannel : int {
  ReqAckPlayerChat_EGameChatChannel_EGCC_GLOBAL = 0,
  ReqAckPlayerChat_EGameChatChannel_EGCC_GUILD = 1,
  ReqAckPlayerChat_EGameChatChannel_EGCC_ROOM = 2,
  ReqAckPlayerChat_EGameChatChannel_EGCC_TEAM = 3,
  ReqAckPlayerChat_EGameChatChannel_ReqAckPlayerChat_EGameChatChannel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReqAckPlayerChat_EGameChatChannel_ReqAckPlayerChat_EGameChatChannel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReqAckPlayerChat_EGameChatChannel_IsValid(int value);
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MIN = ReqAckPlayerChat_EGameChatChannel_EGCC_GLOBAL;
constexpr ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MAX = ReqAckPlayerChat_EGameChatChannel_EGCC_TEAM;
constexpr int ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_ARRAYSIZE = ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatChannel_descriptor();
template<typename T>
inline const std::string& ReqAckPlayerChat_EGameChatChannel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReqAckPlayerChat_EGameChatChannel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReqAckPlayerChat_EGameChatChannel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReqAckPlayerChat_EGameChatChannel_descriptor(), enum_t_value);
}
inline bool ReqAckPlayerChat_EGameChatChannel_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReqAckPlayerChat_EGameChatChannel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReqAckPlayerChat_EGameChatChannel>(
    ReqAckPlayerChat_EGameChatChannel_descriptor(), name, value);
}
enum ReqAckPlayerChat_EGameChatType : int {
  ReqAckPlayerChat_EGameChatType_EGCT_TEXT = 0,
  ReqAckPlayerChat_EGameChatType_EGCT_VOICE = 1,
  ReqAckPlayerChat_EGameChatType_EGCT_EMOJI = 2,
  ReqAckPlayerChat_EGameChatType_ReqAckPlayerChat_EGameChatType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReqAckPlayerChat_EGameChatType_ReqAckPlayerChat_EGameChatType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReqAckPlayerChat_EGameChatType_IsValid(int value);
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MIN = ReqAckPlayerChat_EGameChatType_EGCT_TEXT;
constexpr ReqAckPlayerChat_EGameChatType ReqAckPlayerChat_EGameChatType_EGameChatType_MAX = ReqAckPlayerChat_EGameChatType_EGCT_EMOJI;
constexpr int ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE = ReqAckPlayerChat_EGameChatType_EGameChatType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqAckPlayerChat_EGameChatType_descriptor();
template<typename T>
inline const std::string& ReqAckPlayerChat_EGameChatType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReqAckPlayerChat_EGameChatType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReqAckPlayerChat_EGameChatType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReqAckPlayerChat_EGameChatType_descriptor(), enum_t_value);
}
inline bool ReqAckPlayerChat_EGameChatType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReqAckPlayerChat_EGameChatType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReqAckPlayerChat_EGameChatType>(
    ReqAckPlayerChat_EGameChatType_descriptor(), name, value);
}
enum ReqCollegeDrama_DramaType : int {
  ReqCollegeDrama_DramaType_ECD_SEMESTER_START = 0,
  ReqCollegeDrama_DramaType_ECD_INCLASS = 1,
  ReqCollegeDrama_DramaType_ECD_SEMESTER_END = 2,
  ReqCollegeDrama_DramaType_ReqCollegeDrama_DramaType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ReqCollegeDrama_DramaType_ReqCollegeDrama_DramaType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ReqCollegeDrama_DramaType_IsValid(int value);
constexpr ReqCollegeDrama_DramaType ReqCollegeDrama_DramaType_DramaType_MIN = ReqCollegeDrama_DramaType_ECD_SEMESTER_START;
constexpr ReqCollegeDrama_DramaType ReqCollegeDrama_DramaType_DramaType_MAX = ReqCollegeDrama_DramaType_ECD_SEMESTER_END;
constexpr int ReqCollegeDrama_DramaType_DramaType_ARRAYSIZE = ReqCollegeDrama_DramaType_DramaType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ReqCollegeDrama_DramaType_descriptor();
template<typename T>
inline const std::string& ReqCollegeDrama_DramaType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ReqCollegeDrama_DramaType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ReqCollegeDrama_DramaType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ReqCollegeDrama_DramaType_descriptor(), enum_t_value);
}
inline bool ReqCollegeDrama_DramaType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, ReqCollegeDrama_DramaType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ReqCollegeDrama_DramaType>(
    ReqCollegeDrama_DramaType_descriptor(), name, value);
}
enum CommonGetRewardInfo_EShowType : int {
  CommonGetRewardInfo_EShowType_EST_NONE = 0,
  CommonGetRewardInfo_EShowType_EST_DAILY_ACTIVE_MISSION_GEAR_REWARD = 1,
  CommonGetRewardInfo_EShowType_EST_WEEKLY_ACTIVE_MISSION_GEAR_REWARD = 2,
  CommonGetRewardInfo_EShowType_EST_ACTIVE_MISSION_REWARD = 3,
  CommonGetRewardInfo_EShowType_CommonGetRewardInfo_EShowType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  CommonGetRewardInfo_EShowType_CommonGetRewardInfo_EShowType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool CommonGetRewardInfo_EShowType_IsValid(int value);
constexpr CommonGetRewardInfo_EShowType CommonGetRewardInfo_EShowType_EShowType_MIN = CommonGetRewardInfo_EShowType_EST_NONE;
constexpr CommonGetRewardInfo_EShowType CommonGetRewardInfo_EShowType_EShowType_MAX = CommonGetRewardInfo_EShowType_EST_ACTIVE_MISSION_REWARD;
constexpr int CommonGetRewardInfo_EShowType_EShowType_ARRAYSIZE = CommonGetRewardInfo_EShowType_EShowType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CommonGetRewardInfo_EShowType_descriptor();
template<typename T>
inline const std::string& CommonGetRewardInfo_EShowType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CommonGetRewardInfo_EShowType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CommonGetRewardInfo_EShowType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CommonGetRewardInfo_EShowType_descriptor(), enum_t_value);
}
inline bool CommonGetRewardInfo_EShowType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, CommonGetRewardInfo_EShowType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CommonGetRewardInfo_EShowType>(
    CommonGetRewardInfo_EShowType_descriptor(), name, value);
}
// ===================================================================

class ProductPrice final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ProductPrice) */ {
 public:
  inline ProductPrice() : ProductPrice(nullptr) {}
  ~ProductPrice() override;
  explicit constexpr ProductPrice(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductPrice(const ProductPrice& from);
  ProductPrice(ProductPrice&& from) noexcept
    : ProductPrice() {
    *this = ::std::move(from);
  }

  inline ProductPrice& operator=(const ProductPrice& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductPrice& operator=(ProductPrice&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProductPrice& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductPrice* internal_default_instance() {
    return reinterpret_cast<const ProductPrice*>(
               &_ProductPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProductPrice& a, ProductPrice& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductPrice* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductPrice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProductPrice* New() const final {
    return new ProductPrice();
  }

  ProductPrice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProductPrice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProductPrice& from);
  void MergeFrom(const ProductPrice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductPrice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ProductPrice";
  }
  protected:
  explicit ProductPrice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // bytes res = 1;
  void clear_res();
  const std::string& res() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_res();
  void set_allocated_res(std::string* res);
  private:
  const std::string& _internal_res() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res(const std::string& value);
  std::string* _internal_mutable_res();
  public:

  // int64 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ProductPrice)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ProductContent final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ProductContent) */ {
 public:
  inline ProductContent() : ProductContent(nullptr) {}
  ~ProductContent() override;
  explicit constexpr ProductContent(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductContent(const ProductContent& from);
  ProductContent(ProductContent&& from) noexcept
    : ProductContent() {
    *this = ::std::move(from);
  }

  inline ProductContent& operator=(const ProductContent& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductContent& operator=(ProductContent&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProductContent& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductContent* internal_default_instance() {
    return reinterpret_cast<const ProductContent*>(
               &_ProductContent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProductContent& a, ProductContent& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductContent* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductContent* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProductContent* New() const final {
    return new ProductContent();
  }

  ProductContent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProductContent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProductContent& from);
  void MergeFrom(const ProductContent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductContent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ProductContent";
  }
  protected:
  explicit ProductContent(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // bytes reward_id = 1;
  void clear_reward_id();
  const std::string& reward_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reward_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reward_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_reward_id();
  void set_allocated_reward_id(std::string* reward_id);
  private:
  const std::string& _internal_reward_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_id(const std::string& value);
  std::string* _internal_mutable_reward_id();
  public:

  // int64 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ProductContent)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ProductInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ProductInfo) */ {
 public:
  inline ProductInfo() : ProductInfo(nullptr) {}
  ~ProductInfo() override;
  explicit constexpr ProductInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ProductInfo(const ProductInfo& from);
  ProductInfo(ProductInfo&& from) noexcept
    : ProductInfo() {
    *this = ::std::move(from);
  }

  inline ProductInfo& operator=(const ProductInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductInfo& operator=(ProductInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ProductInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ProductInfo* internal_default_instance() {
    return reinterpret_cast<const ProductInfo*>(
               &_ProductInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProductInfo& a, ProductInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProductInfo* New() const final {
    return new ProductInfo();
  }

  ProductInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProductInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProductInfo& from);
  void MergeFrom(const ProductInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ProductInfo";
  }
  protected:
  explicit ProductInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 1,
    kShopIdFieldNumber = 2,
    kShopGoodsIdFieldNumber = 3,
    kRefreshCronExprFieldNumber = 10,
    kContentFieldNumber = 5,
    kPriceFieldNumber = 6,
    kMaximumSellsFieldNumber = 7,
    kListingTypeFieldNumber = 4,
    kRefreshIntervalFieldNumber = 11,
    kRemainSellsFieldNumber = 8,
    kMaximunOnceBuysFieldNumber = 9,
    kIsPurchaseLimitFieldNumber = 12,
  };
  // bytes product_id = 1;
  void clear_product_id();
  const std::string& product_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // bytes shop_id = 2;
  void clear_shop_id();
  const std::string& shop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shop_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_shop_id();
  void set_allocated_shop_id(std::string* shop_id);
  private:
  const std::string& _internal_shop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shop_id(const std::string& value);
  std::string* _internal_mutable_shop_id();
  public:

  // bytes shop_goods_id = 3;
  void clear_shop_goods_id();
  const std::string& shop_goods_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shop_goods_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shop_goods_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_shop_goods_id();
  void set_allocated_shop_goods_id(std::string* shop_goods_id);
  private:
  const std::string& _internal_shop_goods_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shop_goods_id(const std::string& value);
  std::string* _internal_mutable_shop_goods_id();
  public:

  // bytes refresh_cron_expr = 10;
  void clear_refresh_cron_expr();
  const std::string& refresh_cron_expr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_refresh_cron_expr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_refresh_cron_expr();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_refresh_cron_expr();
  void set_allocated_refresh_cron_expr(std::string* refresh_cron_expr);
  private:
  const std::string& _internal_refresh_cron_expr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_refresh_cron_expr(const std::string& value);
  std::string* _internal_mutable_refresh_cron_expr();
  public:

  // .KWMsg.ProductContent content = 5;
  bool has_content() const;
  private:
  bool _internal_has_content() const;
  public:
  void clear_content();
  const ::KWMsg::ProductContent& content() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::ProductContent* release_content();
  ::KWMsg::ProductContent* mutable_content();
  void set_allocated_content(::KWMsg::ProductContent* content);
  private:
  const ::KWMsg::ProductContent& _internal_content() const;
  ::KWMsg::ProductContent* _internal_mutable_content();
  public:
  void unsafe_arena_set_allocated_content(
      ::KWMsg::ProductContent* content);
  ::KWMsg::ProductContent* unsafe_arena_release_content();

  // .KWMsg.ProductPrice price = 6;
  bool has_price() const;
  private:
  bool _internal_has_price() const;
  public:
  void clear_price();
  const ::KWMsg::ProductPrice& price() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::ProductPrice* release_price();
  ::KWMsg::ProductPrice* mutable_price();
  void set_allocated_price(::KWMsg::ProductPrice* price);
  private:
  const ::KWMsg::ProductPrice& _internal_price() const;
  ::KWMsg::ProductPrice* _internal_mutable_price();
  public:
  void unsafe_arena_set_allocated_price(
      ::KWMsg::ProductPrice* price);
  ::KWMsg::ProductPrice* unsafe_arena_release_price();

  // int64 maximum_sells = 7;
  void clear_maximum_sells();
  ::PROTOBUF_NAMESPACE_ID::int64 maximum_sells() const;
  void set_maximum_sells(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maximum_sells() const;
  void _internal_set_maximum_sells(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .KWMsg.ShopListingType listing_type = 4;
  void clear_listing_type();
  ::KWMsg::ShopListingType listing_type() const;
  void set_listing_type(::KWMsg::ShopListingType value);
  private:
  ::KWMsg::ShopListingType _internal_listing_type() const;
  void _internal_set_listing_type(::KWMsg::ShopListingType value);
  public:

  // int32 refresh_interval = 11;
  void clear_refresh_interval();
  ::PROTOBUF_NAMESPACE_ID::int32 refresh_interval() const;
  void set_refresh_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_refresh_interval() const;
  void _internal_set_refresh_interval(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 remain_sells = 8;
  void clear_remain_sells();
  ::PROTOBUF_NAMESPACE_ID::int64 remain_sells() const;
  void set_remain_sells(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_remain_sells() const;
  void _internal_set_remain_sells(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 maximun_once_buys = 9;
  void clear_maximun_once_buys();
  ::PROTOBUF_NAMESPACE_ID::int64 maximun_once_buys() const;
  void set_maximun_once_buys(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_maximun_once_buys() const;
  void _internal_set_maximun_once_buys(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // bool is_purchase_limit = 12;
  void clear_is_purchase_limit();
  bool is_purchase_limit() const;
  void set_is_purchase_limit(bool value);
  private:
  bool _internal_is_purchase_limit() const;
  void _internal_set_is_purchase_limit(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ProductInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shop_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shop_goods_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr refresh_cron_expr_;
  ::KWMsg::ProductContent* content_;
  ::KWMsg::ProductPrice* price_;
  ::PROTOBUF_NAMESPACE_ID::int64 maximum_sells_;
  int listing_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 refresh_interval_;
  ::PROTOBUF_NAMESPACE_ID::int64 remain_sells_;
  ::PROTOBUF_NAMESPACE_ID::int64 maximun_once_buys_;
  bool is_purchase_limit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class RewardInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.RewardInfo) */ {
 public:
  inline RewardInfo() : RewardInfo(nullptr) {}
  ~RewardInfo() override;
  explicit constexpr RewardInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RewardInfo(const RewardInfo& from);
  RewardInfo(RewardInfo&& from) noexcept
    : RewardInfo() {
    *this = ::std::move(from);
  }

  inline RewardInfo& operator=(const RewardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardInfo& operator=(RewardInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewardInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewardInfo* internal_default_instance() {
    return reinterpret_cast<const RewardInfo*>(
               &_RewardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RewardInfo& a, RewardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardInfo* New() const final {
    return new RewardInfo();
  }

  RewardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardInfo& from);
  void MergeFrom(const RewardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.RewardInfo";
  }
  protected:
  explicit RewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardIdFieldNumber = 1,
    kRewardCountFieldNumber = 2,
    kRewardFlagFieldNumber = 3,
  };
  // bytes reward_id = 1;
  void clear_reward_id();
  const std::string& reward_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reward_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reward_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_reward_id();
  void set_allocated_reward_id(std::string* reward_id);
  private:
  const std::string& _internal_reward_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_id(const std::string& value);
  std::string* _internal_mutable_reward_id();
  public:

  // int64 reward_count = 2;
  void clear_reward_count();
  ::PROTOBUF_NAMESPACE_ID::int64 reward_count() const;
  void set_reward_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_reward_count() const;
  void _internal_set_reward_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 reward_flag = 3;
  void clear_reward_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 reward_flag() const;
  void set_reward_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward_flag() const;
  void _internal_set_reward_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.RewardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 reward_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class WitchInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.WitchInfo) */ {
 public:
  inline WitchInfo() : WitchInfo(nullptr) {}
  ~WitchInfo() override;
  explicit constexpr WitchInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  WitchInfo(const WitchInfo& from);
  WitchInfo(WitchInfo&& from) noexcept
    : WitchInfo() {
    *this = ::std::move(from);
  }

  inline WitchInfo& operator=(const WitchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline WitchInfo& operator=(WitchInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const WitchInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const WitchInfo* internal_default_instance() {
    return reinterpret_cast<const WitchInfo*>(
               &_WitchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(WitchInfo& a, WitchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(WitchInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WitchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WitchInfo* New() const final {
    return new WitchInfo();
  }

  WitchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WitchInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WitchInfo& from);
  void MergeFrom(const WitchInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WitchInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.WitchInfo";
  }
  protected:
  explicit WitchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 1,
    kWitchRoleResIdFieldNumber = 5,
    kWitchGeneralskillidFieldNumber = 15,
    kWitchAdvancedskillidFieldNumber = 16,
    kWitchUniqueskillidFieldNumber = 17,
    kWitchVersedskillidFieldNumber = 18,
    kWitchAwakeningskillidFieldNumber = 19,
    kWitchExtraskillid1FieldNumber = 20,
    kWitchExtraskillid2FieldNumber = 21,
    kWitchLevelFieldNumber = 2,
    kWitchStarLevelFieldNumber = 3,
    kWitchTotalFcFieldNumber = 4,
    kWitchHpFieldNumber = 6,
    kWitchDefenceFieldNumber = 7,
    kWitchSpeedFieldNumber = 8,
    kWitchAttackminFieldNumber = 9,
    kWitchAttackmaxFieldNumber = 10,
    kWitchCritFieldNumber = 11,
    kWitchCritdmgFieldNumber = 12,
    kWitchHitFieldNumber = 13,
    kWitchResistFieldNumber = 14,
  };
  // bytes witch_id = 1;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // bytes witch_role_res_id = 5;
  void clear_witch_role_res_id();
  const std::string& witch_role_res_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_role_res_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_role_res_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_role_res_id();
  void set_allocated_witch_role_res_id(std::string* witch_role_res_id);
  private:
  const std::string& _internal_witch_role_res_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_role_res_id(const std::string& value);
  std::string* _internal_mutable_witch_role_res_id();
  public:

  // bytes witch_generalskillid = 15;
  void clear_witch_generalskillid();
  const std::string& witch_generalskillid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_generalskillid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_generalskillid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_generalskillid();
  void set_allocated_witch_generalskillid(std::string* witch_generalskillid);
  private:
  const std::string& _internal_witch_generalskillid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_generalskillid(const std::string& value);
  std::string* _internal_mutable_witch_generalskillid();
  public:

  // bytes witch_advancedskillid = 16;
  void clear_witch_advancedskillid();
  const std::string& witch_advancedskillid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_advancedskillid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_advancedskillid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_advancedskillid();
  void set_allocated_witch_advancedskillid(std::string* witch_advancedskillid);
  private:
  const std::string& _internal_witch_advancedskillid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_advancedskillid(const std::string& value);
  std::string* _internal_mutable_witch_advancedskillid();
  public:

  // bytes witch_uniqueskillid = 17;
  void clear_witch_uniqueskillid();
  const std::string& witch_uniqueskillid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_uniqueskillid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_uniqueskillid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_uniqueskillid();
  void set_allocated_witch_uniqueskillid(std::string* witch_uniqueskillid);
  private:
  const std::string& _internal_witch_uniqueskillid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_uniqueskillid(const std::string& value);
  std::string* _internal_mutable_witch_uniqueskillid();
  public:

  // bytes witch_versedskillid = 18;
  void clear_witch_versedskillid();
  const std::string& witch_versedskillid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_versedskillid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_versedskillid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_versedskillid();
  void set_allocated_witch_versedskillid(std::string* witch_versedskillid);
  private:
  const std::string& _internal_witch_versedskillid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_versedskillid(const std::string& value);
  std::string* _internal_mutable_witch_versedskillid();
  public:

  // bytes witch_awakeningskillid = 19;
  void clear_witch_awakeningskillid();
  const std::string& witch_awakeningskillid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_awakeningskillid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_awakeningskillid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_awakeningskillid();
  void set_allocated_witch_awakeningskillid(std::string* witch_awakeningskillid);
  private:
  const std::string& _internal_witch_awakeningskillid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_awakeningskillid(const std::string& value);
  std::string* _internal_mutable_witch_awakeningskillid();
  public:

  // bytes witch_extraskillid1 = 20;
  void clear_witch_extraskillid1();
  const std::string& witch_extraskillid1() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_extraskillid1(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_extraskillid1();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_extraskillid1();
  void set_allocated_witch_extraskillid1(std::string* witch_extraskillid1);
  private:
  const std::string& _internal_witch_extraskillid1() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_extraskillid1(const std::string& value);
  std::string* _internal_mutable_witch_extraskillid1();
  public:

  // bytes witch_extraskillid2 = 21;
  void clear_witch_extraskillid2();
  const std::string& witch_extraskillid2() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_extraskillid2(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_extraskillid2();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_extraskillid2();
  void set_allocated_witch_extraskillid2(std::string* witch_extraskillid2);
  private:
  const std::string& _internal_witch_extraskillid2() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_extraskillid2(const std::string& value);
  std::string* _internal_mutable_witch_extraskillid2();
  public:

  // int32 witch_level = 2;
  void clear_witch_level();
  ::PROTOBUF_NAMESPACE_ID::int32 witch_level() const;
  void set_witch_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witch_level() const;
  void _internal_set_witch_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witch_star_level = 3;
  void clear_witch_star_level();
  ::PROTOBUF_NAMESPACE_ID::int32 witch_star_level() const;
  void set_witch_star_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witch_star_level() const;
  void _internal_set_witch_star_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witch_total_fc = 4;
  void clear_witch_total_fc();
  ::PROTOBUF_NAMESPACE_ID::int32 witch_total_fc() const;
  void set_witch_total_fc(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witch_total_fc() const;
  void _internal_set_witch_total_fc(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witch_hp = 6;
  void clear_witch_hp();
  ::PROTOBUF_NAMESPACE_ID::int32 witch_hp() const;
  void set_witch_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witch_hp() const;
  void _internal_set_witch_hp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witch_defence = 7;
  void clear_witch_defence();
  ::PROTOBUF_NAMESPACE_ID::int32 witch_defence() const;
  void set_witch_defence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witch_defence() const;
  void _internal_set_witch_defence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witch_speed = 8;
  void clear_witch_speed();
  ::PROTOBUF_NAMESPACE_ID::int32 witch_speed() const;
  void set_witch_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witch_speed() const;
  void _internal_set_witch_speed(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witch_attackmin = 9;
  void clear_witch_attackmin();
  ::PROTOBUF_NAMESPACE_ID::int32 witch_attackmin() const;
  void set_witch_attackmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witch_attackmin() const;
  void _internal_set_witch_attackmin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witch_attackmax = 10;
  void clear_witch_attackmax();
  ::PROTOBUF_NAMESPACE_ID::int32 witch_attackmax() const;
  void set_witch_attackmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witch_attackmax() const;
  void _internal_set_witch_attackmax(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witch_crit = 11;
  void clear_witch_crit();
  ::PROTOBUF_NAMESPACE_ID::int32 witch_crit() const;
  void set_witch_crit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witch_crit() const;
  void _internal_set_witch_crit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witch_critdmg = 12;
  void clear_witch_critdmg();
  ::PROTOBUF_NAMESPACE_ID::int32 witch_critdmg() const;
  void set_witch_critdmg(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witch_critdmg() const;
  void _internal_set_witch_critdmg(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witch_hit = 13;
  void clear_witch_hit();
  ::PROTOBUF_NAMESPACE_ID::int32 witch_hit() const;
  void set_witch_hit(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witch_hit() const;
  void _internal_set_witch_hit(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 witch_resist = 14;
  void clear_witch_resist();
  ::PROTOBUF_NAMESPACE_ID::int32 witch_resist() const;
  void set_witch_resist(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_witch_resist() const;
  void _internal_set_witch_resist(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.WitchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_role_res_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_generalskillid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_advancedskillid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_uniqueskillid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_versedskillid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_awakeningskillid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_extraskillid1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_extraskillid2_;
  ::PROTOBUF_NAMESPACE_ID::int32 witch_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 witch_star_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 witch_total_fc_;
  ::PROTOBUF_NAMESPACE_ID::int32 witch_hp_;
  ::PROTOBUF_NAMESPACE_ID::int32 witch_defence_;
  ::PROTOBUF_NAMESPACE_ID::int32 witch_speed_;
  ::PROTOBUF_NAMESPACE_ID::int32 witch_attackmin_;
  ::PROTOBUF_NAMESPACE_ID::int32 witch_attackmax_;
  ::PROTOBUF_NAMESPACE_ID::int32 witch_crit_;
  ::PROTOBUF_NAMESPACE_ID::int32 witch_critdmg_;
  ::PROTOBUF_NAMESPACE_ID::int32 witch_hit_;
  ::PROTOBUF_NAMESPACE_ID::int32 witch_resist_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class GuildInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.GuildInfo) */ {
 public:
  inline GuildInfo() : GuildInfo(nullptr) {}
  ~GuildInfo() override;
  explicit constexpr GuildInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  GuildInfo(const GuildInfo& from);
  GuildInfo(GuildInfo&& from) noexcept
    : GuildInfo() {
    *this = ::std::move(from);
  }

  inline GuildInfo& operator=(const GuildInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline GuildInfo& operator=(GuildInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GuildInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const GuildInfo* internal_default_instance() {
    return reinterpret_cast<const GuildInfo*>(
               &_GuildInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(GuildInfo& a, GuildInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(GuildInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GuildInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GuildInfo* New() const final {
    return new GuildInfo();
  }

  GuildInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GuildInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GuildInfo& from);
  void MergeFrom(const GuildInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GuildInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.GuildInfo";
  }
  protected:
  explicit GuildInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGuildIdFieldNumber = 1,
    kGuildNameFieldNumber = 2,
  };
  // bytes guild_id = 1;
  void clear_guild_id();
  const std::string& guild_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guild_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guild_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_guild_id();
  void set_allocated_guild_id(std::string* guild_id);
  private:
  const std::string& _internal_guild_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guild_id(const std::string& value);
  std::string* _internal_mutable_guild_id();
  public:

  // bytes guild_name = 2;
  void clear_guild_name();
  const std::string& guild_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_guild_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_guild_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_guild_name();
  void set_allocated_guild_name(std::string* guild_name);
  private:
  const std::string& _internal_guild_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_guild_name(const std::string& value);
  std::string* _internal_mutable_guild_name();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.GuildInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr guild_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class PlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PlayerInfo) */ {
 public:
  inline PlayerInfo() : PlayerInfo(nullptr) {}
  ~PlayerInfo() override;
  explicit constexpr PlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerInfo(const PlayerInfo& from);
  PlayerInfo(PlayerInfo&& from) noexcept
    : PlayerInfo() {
    *this = ::std::move(from);
  }

  inline PlayerInfo& operator=(const PlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerInfo& operator=(PlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerInfo*>(
               &_PlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PlayerInfo& a, PlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerInfo* New() const final {
    return new PlayerInfo();
  }

  PlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerInfo& from);
  void MergeFrom(const PlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PlayerInfo";
  }
  protected:
  explicit PlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBotarenaDefensiveTeamFieldNumber = 13,
    kBotarenaAttackTeamFieldNumber = 14,
    kBotarenGradeFieldNumber = 8,
    kNickNameFieldNumber = 9,
    kAvatarUrlFieldNumber = 10,
    kAvatarFrameIdFieldNumber = 11,
    kPlayerIdFieldNumber = 1,
    kGuildInfoFieldNumber = 12,
    kLevelFieldNumber = 2,
    kBotarenaPreSeasonRankFieldNumber = 3,
    kHonorPointFieldNumber = 4,
    kStrategyPointFieldNumber = 5,
    kShabowTokenFieldNumber = 6,
    kShabowBadgeFieldNumber = 7,
  };
  // repeated .KWMsg.WitchInfo botarena_defensive_team = 13;
  int botarena_defensive_team_size() const;
  private:
  int _internal_botarena_defensive_team_size() const;
  public:
  void clear_botarena_defensive_team();
  ::KWMsg::WitchInfo* mutable_botarena_defensive_team(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::WitchInfo >*
      mutable_botarena_defensive_team();
  private:
  const ::KWMsg::WitchInfo& _internal_botarena_defensive_team(int index) const;
  ::KWMsg::WitchInfo* _internal_add_botarena_defensive_team();
  public:
  const ::KWMsg::WitchInfo& botarena_defensive_team(int index) const;
  ::KWMsg::WitchInfo* add_botarena_defensive_team();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::WitchInfo >&
      botarena_defensive_team() const;

  // repeated .KWMsg.WitchInfo botarena_attack_team = 14;
  int botarena_attack_team_size() const;
  private:
  int _internal_botarena_attack_team_size() const;
  public:
  void clear_botarena_attack_team();
  ::KWMsg::WitchInfo* mutable_botarena_attack_team(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::WitchInfo >*
      mutable_botarena_attack_team();
  private:
  const ::KWMsg::WitchInfo& _internal_botarena_attack_team(int index) const;
  ::KWMsg::WitchInfo* _internal_add_botarena_attack_team();
  public:
  const ::KWMsg::WitchInfo& botarena_attack_team(int index) const;
  ::KWMsg::WitchInfo* add_botarena_attack_team();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::WitchInfo >&
      botarena_attack_team() const;

  // bytes botaren_grade = 8;
  void clear_botaren_grade();
  const std::string& botaren_grade() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_botaren_grade(ArgT0&& arg0, ArgT... args);
  std::string* mutable_botaren_grade();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_botaren_grade();
  void set_allocated_botaren_grade(std::string* botaren_grade);
  private:
  const std::string& _internal_botaren_grade() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_botaren_grade(const std::string& value);
  std::string* _internal_mutable_botaren_grade();
  public:

  // bytes nick_name = 9;
  void clear_nick_name();
  const std::string& nick_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nick_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nick_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nick_name();
  void set_allocated_nick_name(std::string* nick_name);
  private:
  const std::string& _internal_nick_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nick_name(const std::string& value);
  std::string* _internal_mutable_nick_name();
  public:

  // bytes avatar_url = 10;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_url();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // bytes avatar_frame_id = 11;
  void clear_avatar_frame_id();
  const std::string& avatar_frame_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_frame_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_frame_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_avatar_frame_id();
  void set_allocated_avatar_frame_id(std::string* avatar_frame_id);
  private:
  const std::string& _internal_avatar_frame_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_frame_id(const std::string& value);
  std::string* _internal_mutable_avatar_frame_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.GuildInfo guild_info = 12;
  bool has_guild_info() const;
  private:
  bool _internal_has_guild_info() const;
  public:
  void clear_guild_info();
  const ::KWMsg::GuildInfo& guild_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::GuildInfo* release_guild_info();
  ::KWMsg::GuildInfo* mutable_guild_info();
  void set_allocated_guild_info(::KWMsg::GuildInfo* guild_info);
  private:
  const ::KWMsg::GuildInfo& _internal_guild_info() const;
  ::KWMsg::GuildInfo* _internal_mutable_guild_info();
  public:
  void unsafe_arena_set_allocated_guild_info(
      ::KWMsg::GuildInfo* guild_info);
  ::KWMsg::GuildInfo* unsafe_arena_release_guild_info();

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 botarena_pre_season_rank = 3;
  void clear_botarena_pre_season_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 botarena_pre_season_rank() const;
  void set_botarena_pre_season_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_botarena_pre_season_rank() const;
  void _internal_set_botarena_pre_season_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 honor_point = 4;
  void clear_honor_point();
  ::PROTOBUF_NAMESPACE_ID::int64 honor_point() const;
  void set_honor_point(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_honor_point() const;
  void _internal_set_honor_point(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 strategy_point = 5;
  void clear_strategy_point();
  ::PROTOBUF_NAMESPACE_ID::int64 strategy_point() const;
  void set_strategy_point(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_strategy_point() const;
  void _internal_set_strategy_point(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 shabow_token = 6;
  void clear_shabow_token();
  ::PROTOBUF_NAMESPACE_ID::int64 shabow_token() const;
  void set_shabow_token(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_shabow_token() const;
  void _internal_set_shabow_token(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 shabow_badge = 7;
  void clear_shabow_badge();
  ::PROTOBUF_NAMESPACE_ID::int64 shabow_badge() const;
  void set_shabow_badge(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_shabow_badge() const;
  void _internal_set_shabow_badge(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.PlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::WitchInfo > botarena_defensive_team_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::WitchInfo > botarena_attack_team_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr botaren_grade_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nick_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_frame_id_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::GuildInfo* guild_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 botarena_pre_season_rank_;
  ::PROTOBUF_NAMESPACE_ID::int64 honor_point_;
  ::PROTOBUF_NAMESPACE_ID::int64 strategy_point_;
  ::PROTOBUF_NAMESPACE_ID::int64 shabow_token_;
  ::PROTOBUF_NAMESPACE_ID::int64 shabow_badge_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class DrawCardInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.DrawCardInfo) */ {
 public:
  inline DrawCardInfo() : DrawCardInfo(nullptr) {}
  ~DrawCardInfo() override;
  explicit constexpr DrawCardInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DrawCardInfo(const DrawCardInfo& from);
  DrawCardInfo(DrawCardInfo&& from) noexcept
    : DrawCardInfo() {
    *this = ::std::move(from);
  }

  inline DrawCardInfo& operator=(const DrawCardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DrawCardInfo& operator=(DrawCardInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DrawCardInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const DrawCardInfo* internal_default_instance() {
    return reinterpret_cast<const DrawCardInfo*>(
               &_DrawCardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DrawCardInfo& a, DrawCardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DrawCardInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DrawCardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DrawCardInfo* New() const final {
    return new DrawCardInfo();
  }

  DrawCardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DrawCardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DrawCardInfo& from);
  void MergeFrom(const DrawCardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DrawCardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.DrawCardInfo";
  }
  protected:
  explicit DrawCardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 1,
    kIsDebrisFieldNumber = 2,
  };
  // bytes witch_id = 1;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // int32 is_debris = 2;
  void clear_is_debris();
  ::PROTOBUF_NAMESPACE_ID::int32 is_debris() const;
  void set_is_debris(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_debris() const;
  void _internal_set_is_debris(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.DrawCardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_debris_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class RewardList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.RewardList) */ {
 public:
  inline RewardList() : RewardList(nullptr) {}
  ~RewardList() override;
  explicit constexpr RewardList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RewardList(const RewardList& from);
  RewardList(RewardList&& from) noexcept
    : RewardList() {
    *this = ::std::move(from);
  }

  inline RewardList& operator=(const RewardList& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardList& operator=(RewardList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RewardList& default_instance() {
    return *internal_default_instance();
  }
  static inline const RewardList* internal_default_instance() {
    return reinterpret_cast<const RewardList*>(
               &_RewardList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RewardList& a, RewardList& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RewardList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardList* New() const final {
    return new RewardList();
  }

  RewardList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardList& from);
  void MergeFrom(const RewardList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.RewardList";
  }
  protected:
  explicit RewardList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .KWMsg.RewardInfo list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::KWMsg::RewardInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_list();
  private:
  const ::KWMsg::RewardInfo& _internal_list(int index) const;
  ::KWMsg::RewardInfo* _internal_add_list();
  public:
  const ::KWMsg::RewardInfo& list(int index) const;
  ::KWMsg::RewardInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      list() const;

  // @@protoc_insertion_point(class_scope:KWMsg.RewardList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckLagTest final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAckLagTest) */ {
 public:
  inline ReqAckLagTest() : ReqAckLagTest(nullptr) {}
  ~ReqAckLagTest() override;
  explicit constexpr ReqAckLagTest(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckLagTest(const ReqAckLagTest& from);
  ReqAckLagTest(ReqAckLagTest&& from) noexcept
    : ReqAckLagTest() {
    *this = ::std::move(from);
  }

  inline ReqAckLagTest& operator=(const ReqAckLagTest& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckLagTest& operator=(ReqAckLagTest&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckLagTest& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckLagTest* internal_default_instance() {
    return reinterpret_cast<const ReqAckLagTest*>(
               &_ReqAckLagTest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(ReqAckLagTest& a, ReqAckLagTest& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckLagTest* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckLagTest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckLagTest* New() const final {
    return new ReqAckLagTest();
  }

  ReqAckLagTest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckLagTest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckLagTest& from);
  void MergeFrom(const ReqAckLagTest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckLagTest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAckLagTest";
  }
  protected:
  explicit ReqAckLagTest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAckLagTest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckHeartBeat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAckHeartBeat) */ {
 public:
  inline ReqAckHeartBeat() : ReqAckHeartBeat(nullptr) {}
  ~ReqAckHeartBeat() override;
  explicit constexpr ReqAckHeartBeat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckHeartBeat(const ReqAckHeartBeat& from);
  ReqAckHeartBeat(ReqAckHeartBeat&& from) noexcept
    : ReqAckHeartBeat() {
    *this = ::std::move(from);
  }

  inline ReqAckHeartBeat& operator=(const ReqAckHeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckHeartBeat& operator=(ReqAckHeartBeat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckHeartBeat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckHeartBeat* internal_default_instance() {
    return reinterpret_cast<const ReqAckHeartBeat*>(
               &_ReqAckHeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ReqAckHeartBeat& a, ReqAckHeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckHeartBeat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckHeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckHeartBeat* New() const final {
    return new ReqAckHeartBeat();
  }

  ReqAckHeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckHeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckHeartBeat& from);
  void MergeFrom(const ReqAckHeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckHeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAckHeartBeat";
  }
  protected:
  explicit ReqAckHeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAckHeartBeat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqLeaveGameServer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqLeaveGameServer) */ {
 public:
  inline ReqLeaveGameServer() : ReqLeaveGameServer(nullptr) {}
  ~ReqLeaveGameServer() override;
  explicit constexpr ReqLeaveGameServer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqLeaveGameServer(const ReqLeaveGameServer& from);
  ReqLeaveGameServer(ReqLeaveGameServer&& from) noexcept
    : ReqLeaveGameServer() {
    *this = ::std::move(from);
  }

  inline ReqLeaveGameServer& operator=(const ReqLeaveGameServer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqLeaveGameServer& operator=(ReqLeaveGameServer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqLeaveGameServer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqLeaveGameServer* internal_default_instance() {
    return reinterpret_cast<const ReqLeaveGameServer*>(
               &_ReqLeaveGameServer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ReqLeaveGameServer& a, ReqLeaveGameServer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqLeaveGameServer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqLeaveGameServer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqLeaveGameServer* New() const final {
    return new ReqLeaveGameServer();
  }

  ReqLeaveGameServer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqLeaveGameServer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqLeaveGameServer& from);
  void MergeFrom(const ReqLeaveGameServer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqLeaveGameServer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqLeaveGameServer";
  }
  protected:
  explicit ReqLeaveGameServer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqLeaveGameServer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class PlayerEntryInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PlayerEntryInfo) */ {
 public:
  inline PlayerEntryInfo() : PlayerEntryInfo(nullptr) {}
  ~PlayerEntryInfo() override;
  explicit constexpr PlayerEntryInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerEntryInfo(const PlayerEntryInfo& from);
  PlayerEntryInfo(PlayerEntryInfo&& from) noexcept
    : PlayerEntryInfo() {
    *this = ::std::move(from);
  }

  inline PlayerEntryInfo& operator=(const PlayerEntryInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerEntryInfo& operator=(PlayerEntryInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerEntryInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerEntryInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerEntryInfo*>(
               &_PlayerEntryInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(PlayerEntryInfo& a, PlayerEntryInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerEntryInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerEntryInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerEntryInfo* New() const final {
    return new PlayerEntryInfo();
  }

  PlayerEntryInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerEntryInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerEntryInfo& from);
  void MergeFrom(const PlayerEntryInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerEntryInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PlayerEntryInfo";
  }
  protected:
  explicit PlayerEntryInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConfigIdFieldNumber = 3,
    kClassIdFieldNumber = 5,
    kObjectGuidFieldNumber = 1,
    kPosFieldNumber = 2,
    kSceneIdFieldNumber = 4,
  };
  // bytes config_id = 3;
  void clear_config_id();
  const std::string& config_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_config_id();
  void set_allocated_config_id(std::string* config_id);
  private:
  const std::string& _internal_config_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_id(const std::string& value);
  std::string* _internal_mutable_config_id();
  public:

  // bytes class_id = 5;
  void clear_class_id();
  const std::string& class_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_class_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_class_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_class_id();
  void set_allocated_class_id(std::string* class_id);
  private:
  const std::string& _internal_class_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_class_id(const std::string& value);
  std::string* _internal_mutable_class_id();
  public:

  // .KWMsg.Ident object_guid = 1;
  bool has_object_guid() const;
  private:
  bool _internal_has_object_guid() const;
  public:
  void clear_object_guid();
  const ::KWMsg::Ident& object_guid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_object_guid();
  ::KWMsg::Ident* mutable_object_guid();
  void set_allocated_object_guid(::KWMsg::Ident* object_guid);
  private:
  const ::KWMsg::Ident& _internal_object_guid() const;
  ::KWMsg::Ident* _internal_mutable_object_guid();
  public:
  void unsafe_arena_set_allocated_object_guid(
      ::KWMsg::Ident* object_guid);
  ::KWMsg::Ident* unsafe_arena_release_object_guid();

  // .KWMsg.Vector3 pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::KWMsg::Vector3& pos() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Vector3* release_pos();
  ::KWMsg::Vector3* mutable_pos();
  void set_allocated_pos(::KWMsg::Vector3* pos);
  private:
  const ::KWMsg::Vector3& _internal_pos() const;
  ::KWMsg::Vector3* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::KWMsg::Vector3* pos);
  ::KWMsg::Vector3* unsafe_arena_release_pos();

  // int32 scene_id = 4;
  void clear_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id() const;
  void set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_id() const;
  void _internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.PlayerEntryInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr class_id_;
  ::KWMsg::Ident* object_guid_;
  ::KWMsg::Vector3* pos_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckPlayerEntryList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckPlayerEntryList) */ {
 public:
  inline AckPlayerEntryList() : AckPlayerEntryList(nullptr) {}
  ~AckPlayerEntryList() override;
  explicit constexpr AckPlayerEntryList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckPlayerEntryList(const AckPlayerEntryList& from);
  AckPlayerEntryList(AckPlayerEntryList&& from) noexcept
    : AckPlayerEntryList() {
    *this = ::std::move(from);
  }

  inline AckPlayerEntryList& operator=(const AckPlayerEntryList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckPlayerEntryList& operator=(AckPlayerEntryList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckPlayerEntryList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckPlayerEntryList* internal_default_instance() {
    return reinterpret_cast<const AckPlayerEntryList*>(
               &_AckPlayerEntryList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(AckPlayerEntryList& a, AckPlayerEntryList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckPlayerEntryList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckPlayerEntryList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckPlayerEntryList* New() const final {
    return new AckPlayerEntryList();
  }

  AckPlayerEntryList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckPlayerEntryList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckPlayerEntryList& from);
  void MergeFrom(const AckPlayerEntryList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPlayerEntryList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckPlayerEntryList";
  }
  protected:
  explicit AckPlayerEntryList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectListFieldNumber = 1,
  };
  // repeated .KWMsg.PlayerEntryInfo object_list = 1;
  int object_list_size() const;
  private:
  int _internal_object_list_size() const;
  public:
  void clear_object_list();
  ::KWMsg::PlayerEntryInfo* mutable_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerEntryInfo >*
      mutable_object_list();
  private:
  const ::KWMsg::PlayerEntryInfo& _internal_object_list(int index) const;
  ::KWMsg::PlayerEntryInfo* _internal_add_object_list();
  public:
  const ::KWMsg::PlayerEntryInfo& object_list(int index) const;
  ::KWMsg::PlayerEntryInfo* add_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerEntryInfo >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:KWMsg.AckPlayerEntryList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerEntryInfo > object_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckPlayerLeaveList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckPlayerLeaveList) */ {
 public:
  inline AckPlayerLeaveList() : AckPlayerLeaveList(nullptr) {}
  ~AckPlayerLeaveList() override;
  explicit constexpr AckPlayerLeaveList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckPlayerLeaveList(const AckPlayerLeaveList& from);
  AckPlayerLeaveList(AckPlayerLeaveList&& from) noexcept
    : AckPlayerLeaveList() {
    *this = ::std::move(from);
  }

  inline AckPlayerLeaveList& operator=(const AckPlayerLeaveList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckPlayerLeaveList& operator=(AckPlayerLeaveList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckPlayerLeaveList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckPlayerLeaveList* internal_default_instance() {
    return reinterpret_cast<const AckPlayerLeaveList*>(
               &_AckPlayerLeaveList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(AckPlayerLeaveList& a, AckPlayerLeaveList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckPlayerLeaveList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckPlayerLeaveList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckPlayerLeaveList* New() const final {
    return new AckPlayerLeaveList();
  }

  AckPlayerLeaveList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckPlayerLeaveList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckPlayerLeaveList& from);
  void MergeFrom(const AckPlayerLeaveList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPlayerLeaveList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckPlayerLeaveList";
  }
  protected:
  explicit AckPlayerLeaveList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectListFieldNumber = 1,
  };
  // repeated .KWMsg.Ident object_list = 1;
  int object_list_size() const;
  private:
  int _internal_object_list_size() const;
  public:
  void clear_object_list();
  ::KWMsg::Ident* mutable_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
      mutable_object_list();
  private:
  const ::KWMsg::Ident& _internal_object_list(int index) const;
  ::KWMsg::Ident* _internal_add_object_list();
  public:
  const ::KWMsg::Ident& object_list(int index) const;
  ::KWMsg::Ident* add_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:KWMsg.AckPlayerLeaveList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident > object_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckPlayerDataFinished final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckPlayerDataFinished) */ {
 public:
  inline AckPlayerDataFinished() : AckPlayerDataFinished(nullptr) {}
  ~AckPlayerDataFinished() override;
  explicit constexpr AckPlayerDataFinished(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckPlayerDataFinished(const AckPlayerDataFinished& from);
  AckPlayerDataFinished(AckPlayerDataFinished&& from) noexcept
    : AckPlayerDataFinished() {
    *this = ::std::move(from);
  }

  inline AckPlayerDataFinished& operator=(const AckPlayerDataFinished& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckPlayerDataFinished& operator=(AckPlayerDataFinished&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckPlayerDataFinished& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckPlayerDataFinished* internal_default_instance() {
    return reinterpret_cast<const AckPlayerDataFinished*>(
               &_AckPlayerDataFinished_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(AckPlayerDataFinished& a, AckPlayerDataFinished& b) {
    a.Swap(&b);
  }
  inline void Swap(AckPlayerDataFinished* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckPlayerDataFinished* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckPlayerDataFinished* New() const final {
    return new AckPlayerDataFinished();
  }

  AckPlayerDataFinished* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckPlayerDataFinished>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckPlayerDataFinished& from);
  void MergeFrom(const AckPlayerDataFinished& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPlayerDataFinished* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckPlayerDataFinished";
  }
  protected:
  explicit AckPlayerDataFinished(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kObjectListFieldNumber = 1,
  };
  // repeated .KWMsg.Ident object_list = 1;
  int object_list_size() const;
  private:
  int _internal_object_list_size() const;
  public:
  void clear_object_list();
  ::KWMsg::Ident* mutable_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
      mutable_object_list();
  private:
  const ::KWMsg::Ident& _internal_object_list(int index) const;
  ::KWMsg::Ident* _internal_add_object_list();
  public:
  const ::KWMsg::Ident& object_list(int index) const;
  ::KWMsg::Ident* add_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
      object_list() const;

  // @@protoc_insertion_point(class_scope:KWMsg.AckPlayerDataFinished)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident > object_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class PosSyncUnit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PosSyncUnit) */ {
 public:
  inline PosSyncUnit() : PosSyncUnit(nullptr) {}
  ~PosSyncUnit() override;
  explicit constexpr PosSyncUnit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PosSyncUnit(const PosSyncUnit& from);
  PosSyncUnit(PosSyncUnit&& from) noexcept
    : PosSyncUnit() {
    *this = ::std::move(from);
  }

  inline PosSyncUnit& operator=(const PosSyncUnit& from) {
    CopyFrom(from);
    return *this;
  }
  inline PosSyncUnit& operator=(PosSyncUnit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PosSyncUnit& default_instance() {
    return *internal_default_instance();
  }
  static inline const PosSyncUnit* internal_default_instance() {
    return reinterpret_cast<const PosSyncUnit*>(
               &_PosSyncUnit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(PosSyncUnit& a, PosSyncUnit& b) {
    a.Swap(&b);
  }
  inline void Swap(PosSyncUnit* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PosSyncUnit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PosSyncUnit* New() const final {
    return new PosSyncUnit();
  }

  PosSyncUnit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PosSyncUnit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PosSyncUnit& from);
  void MergeFrom(const PosSyncUnit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PosSyncUnit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PosSyncUnit";
  }
  protected:
  explicit PosSyncUnit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef PosSyncUnit_EMoveType EMoveType;
  static constexpr EMoveType EMT_WALK =
    PosSyncUnit_EMoveType_EMT_WALK;
  static constexpr EMoveType EET_SPEEDY =
    PosSyncUnit_EMoveType_EET_SPEEDY;
  static constexpr EMoveType EET_TELEPORT =
    PosSyncUnit_EMoveType_EET_TELEPORT;
  static inline bool EMoveType_IsValid(int value) {
    return PosSyncUnit_EMoveType_IsValid(value);
  }
  static constexpr EMoveType EMoveType_MIN =
    PosSyncUnit_EMoveType_EMoveType_MIN;
  static constexpr EMoveType EMoveType_MAX =
    PosSyncUnit_EMoveType_EMoveType_MAX;
  static constexpr int EMoveType_ARRAYSIZE =
    PosSyncUnit_EMoveType_EMoveType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EMoveType_descriptor() {
    return PosSyncUnit_EMoveType_descriptor();
  }
  template<typename T>
  static inline const std::string& EMoveType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EMoveType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EMoveType_Name.");
    return PosSyncUnit_EMoveType_Name(enum_t_value);
  }
  static inline bool EMoveType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EMoveType* value) {
    return PosSyncUnit_EMoveType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPosFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kStatusFieldNumber = 4,
    kTypeFieldNumber = 5,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Vector3 pos = 2;
  bool has_pos() const;
  private:
  bool _internal_has_pos() const;
  public:
  void clear_pos();
  const ::KWMsg::Vector3& pos() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Vector3* release_pos();
  ::KWMsg::Vector3* mutable_pos();
  void set_allocated_pos(::KWMsg::Vector3* pos);
  private:
  const ::KWMsg::Vector3& _internal_pos() const;
  ::KWMsg::Vector3* _internal_mutable_pos();
  public:
  void unsafe_arena_set_allocated_pos(
      ::KWMsg::Vector3* pos);
  ::KWMsg::Vector3* unsafe_arena_release_pos();

  // .KWMsg.Vector3 orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::KWMsg::Vector3& orientation() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Vector3* release_orientation();
  ::KWMsg::Vector3* mutable_orientation();
  void set_allocated_orientation(::KWMsg::Vector3* orientation);
  private:
  const ::KWMsg::Vector3& _internal_orientation() const;
  ::KWMsg::Vector3* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::KWMsg::Vector3* orientation);
  ::KWMsg::Vector3* unsafe_arena_release_orientation();

  // int32 status = 4;
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.PosSyncUnit.EMoveType type = 5;
  void clear_type();
  ::KWMsg::PosSyncUnit_EMoveType type() const;
  void set_type(::KWMsg::PosSyncUnit_EMoveType value);
  private:
  ::KWMsg::PosSyncUnit_EMoveType _internal_type() const;
  void _internal_set_type(::KWMsg::PosSyncUnit_EMoveType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.PosSyncUnit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Vector3* pos_;
  ::KWMsg::Vector3* orientation_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckPlayerPosSync final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAckPlayerPosSync) */ {
 public:
  inline ReqAckPlayerPosSync() : ReqAckPlayerPosSync(nullptr) {}
  ~ReqAckPlayerPosSync() override;
  explicit constexpr ReqAckPlayerPosSync(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckPlayerPosSync(const ReqAckPlayerPosSync& from);
  ReqAckPlayerPosSync(ReqAckPlayerPosSync&& from) noexcept
    : ReqAckPlayerPosSync() {
    *this = ::std::move(from);
  }

  inline ReqAckPlayerPosSync& operator=(const ReqAckPlayerPosSync& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckPlayerPosSync& operator=(ReqAckPlayerPosSync&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckPlayerPosSync& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckPlayerPosSync* internal_default_instance() {
    return reinterpret_cast<const ReqAckPlayerPosSync*>(
               &_ReqAckPlayerPosSync_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(ReqAckPlayerPosSync& a, ReqAckPlayerPosSync& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckPlayerPosSync* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckPlayerPosSync* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckPlayerPosSync* New() const final {
    return new ReqAckPlayerPosSync();
  }

  ReqAckPlayerPosSync* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckPlayerPosSync>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckPlayerPosSync& from);
  void MergeFrom(const ReqAckPlayerPosSync& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckPlayerPosSync* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAckPlayerPosSync";
  }
  protected:
  explicit ReqAckPlayerPosSync(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSyncUnitFieldNumber = 2,
    kSequenceFieldNumber = 1,
  };
  // .KWMsg.PosSyncUnit sync_unit = 2;
  bool has_sync_unit() const;
  private:
  bool _internal_has_sync_unit() const;
  public:
  void clear_sync_unit();
  const ::KWMsg::PosSyncUnit& sync_unit() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::PosSyncUnit* release_sync_unit();
  ::KWMsg::PosSyncUnit* mutable_sync_unit();
  void set_allocated_sync_unit(::KWMsg::PosSyncUnit* sync_unit);
  private:
  const ::KWMsg::PosSyncUnit& _internal_sync_unit() const;
  ::KWMsg::PosSyncUnit* _internal_mutable_sync_unit();
  public:
  void unsafe_arena_set_allocated_sync_unit(
      ::KWMsg::PosSyncUnit* sync_unit);
  ::KWMsg::PosSyncUnit* unsafe_arena_release_sync_unit();

  // int32 sequence = 1;
  void clear_sequence();
  ::PROTOBUF_NAMESPACE_ID::int32 sequence() const;
  void set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sequence() const;
  void _internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAckPlayerPosSync)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::PosSyncUnit* sync_unit_;
  ::PROTOBUF_NAMESPACE_ID::int32 sequence_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSwapScene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSwapScene) */ {
 public:
  inline ReqSwapScene() : ReqSwapScene(nullptr) {}
  ~ReqSwapScene() override;
  explicit constexpr ReqSwapScene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSwapScene(const ReqSwapScene& from);
  ReqSwapScene(ReqSwapScene&& from) noexcept
    : ReqSwapScene() {
    *this = ::std::move(from);
  }

  inline ReqSwapScene& operator=(const ReqSwapScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSwapScene& operator=(ReqSwapScene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSwapScene& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSwapScene* internal_default_instance() {
    return reinterpret_cast<const ReqSwapScene*>(
               &_ReqSwapScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(ReqSwapScene& a, ReqSwapScene& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSwapScene* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSwapScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSwapScene* New() const final {
    return new ReqSwapScene();
  }

  ReqSwapScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSwapScene>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSwapScene& from);
  void MergeFrom(const ReqSwapScene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSwapScene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSwapScene";
  }
  protected:
  explicit ReqSwapScene(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kSceneIdFieldNumber = 2,
  };
  // bytes args = 3;
  void clear_args();
  const std::string& args() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_args(ArgT0&& arg0, ArgT... args);
  std::string* mutable_args();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 scene_id = 2;
  void clear_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id() const;
  void set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_id() const;
  void _internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSwapScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSwapScene final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSwapScene) */ {
 public:
  inline AckSwapScene() : AckSwapScene(nullptr) {}
  ~AckSwapScene() override;
  explicit constexpr AckSwapScene(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSwapScene(const AckSwapScene& from);
  AckSwapScene(AckSwapScene&& from) noexcept
    : AckSwapScene() {
    *this = ::std::move(from);
  }

  inline AckSwapScene& operator=(const AckSwapScene& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSwapScene& operator=(AckSwapScene&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSwapScene& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSwapScene* internal_default_instance() {
    return reinterpret_cast<const AckSwapScene*>(
               &_AckSwapScene_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(AckSwapScene& a, AckSwapScene& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSwapScene* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSwapScene* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSwapScene* New() const final {
    return new AckSwapScene();
  }

  AckSwapScene* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSwapScene>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSwapScene& from);
  void MergeFrom(const AckSwapScene& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSwapScene* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSwapScene";
  }
  protected:
  explicit AckSwapScene(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArgsFieldNumber = 3,
    kEventCodeFieldNumber = 1,
    kSceneIdFieldNumber = 2,
  };
  // bytes args = 3;
  void clear_args();
  const std::string& args() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_args(ArgT0&& arg0, ArgT... args);
  std::string* mutable_args();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_args();
  void set_allocated_args(std::string* args);
  private:
  const std::string& _internal_args() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_args(const std::string& value);
  std::string* _internal_mutable_args();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 scene_id = 2;
  void clear_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id() const;
  void set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_id() const;
  void _internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSwapScene)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr args_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSwapSceneNotify final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSwapSceneNotify) */ {
 public:
  inline AckSwapSceneNotify() : AckSwapSceneNotify(nullptr) {}
  ~AckSwapSceneNotify() override;
  explicit constexpr AckSwapSceneNotify(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSwapSceneNotify(const AckSwapSceneNotify& from);
  AckSwapSceneNotify(AckSwapSceneNotify&& from) noexcept
    : AckSwapSceneNotify() {
    *this = ::std::move(from);
  }

  inline AckSwapSceneNotify& operator=(const AckSwapSceneNotify& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSwapSceneNotify& operator=(AckSwapSceneNotify&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSwapSceneNotify& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSwapSceneNotify* internal_default_instance() {
    return reinterpret_cast<const AckSwapSceneNotify*>(
               &_AckSwapSceneNotify_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(AckSwapSceneNotify& a, AckSwapSceneNotify& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSwapSceneNotify* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSwapSceneNotify* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSwapSceneNotify* New() const final {
    return new AckSwapSceneNotify();
  }

  AckSwapSceneNotify* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSwapSceneNotify>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSwapSceneNotify& from);
  void MergeFrom(const AckSwapSceneNotify& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSwapSceneNotify* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSwapSceneNotify";
  }
  protected:
  explicit AckSwapSceneNotify(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
    kSceneIdFieldNumber = 2,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 scene_id = 2;
  void clear_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id() const;
  void set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_id() const;
  void _internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSwapSceneNotify)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqAckPlayerChat final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAckPlayerChat) */ {
 public:
  inline ReqAckPlayerChat() : ReqAckPlayerChat(nullptr) {}
  ~ReqAckPlayerChat() override;
  explicit constexpr ReqAckPlayerChat(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAckPlayerChat(const ReqAckPlayerChat& from);
  ReqAckPlayerChat(ReqAckPlayerChat&& from) noexcept
    : ReqAckPlayerChat() {
    *this = ::std::move(from);
  }

  inline ReqAckPlayerChat& operator=(const ReqAckPlayerChat& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAckPlayerChat& operator=(ReqAckPlayerChat&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAckPlayerChat& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAckPlayerChat* internal_default_instance() {
    return reinterpret_cast<const ReqAckPlayerChat*>(
               &_ReqAckPlayerChat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(ReqAckPlayerChat& a, ReqAckPlayerChat& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAckPlayerChat* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAckPlayerChat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAckPlayerChat* New() const final {
    return new ReqAckPlayerChat();
  }

  ReqAckPlayerChat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAckPlayerChat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAckPlayerChat& from);
  void MergeFrom(const ReqAckPlayerChat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAckPlayerChat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAckPlayerChat";
  }
  protected:
  explicit ReqAckPlayerChat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqAckPlayerChat_EGameChatChannel EGameChatChannel;
  static constexpr EGameChatChannel EGCC_GLOBAL =
    ReqAckPlayerChat_EGameChatChannel_EGCC_GLOBAL;
  static constexpr EGameChatChannel EGCC_GUILD =
    ReqAckPlayerChat_EGameChatChannel_EGCC_GUILD;
  static constexpr EGameChatChannel EGCC_ROOM =
    ReqAckPlayerChat_EGameChatChannel_EGCC_ROOM;
  static constexpr EGameChatChannel EGCC_TEAM =
    ReqAckPlayerChat_EGameChatChannel_EGCC_TEAM;
  static inline bool EGameChatChannel_IsValid(int value) {
    return ReqAckPlayerChat_EGameChatChannel_IsValid(value);
  }
  static constexpr EGameChatChannel EGameChatChannel_MIN =
    ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MIN;
  static constexpr EGameChatChannel EGameChatChannel_MAX =
    ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_MAX;
  static constexpr int EGameChatChannel_ARRAYSIZE =
    ReqAckPlayerChat_EGameChatChannel_EGameChatChannel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EGameChatChannel_descriptor() {
    return ReqAckPlayerChat_EGameChatChannel_descriptor();
  }
  template<typename T>
  static inline const std::string& EGameChatChannel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EGameChatChannel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EGameChatChannel_Name.");
    return ReqAckPlayerChat_EGameChatChannel_Name(enum_t_value);
  }
  static inline bool EGameChatChannel_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EGameChatChannel* value) {
    return ReqAckPlayerChat_EGameChatChannel_Parse(name, value);
  }

  typedef ReqAckPlayerChat_EGameChatType EGameChatType;
  static constexpr EGameChatType EGCT_TEXT =
    ReqAckPlayerChat_EGameChatType_EGCT_TEXT;
  static constexpr EGameChatType EGCT_VOICE =
    ReqAckPlayerChat_EGameChatType_EGCT_VOICE;
  static constexpr EGameChatType EGCT_EMOJI =
    ReqAckPlayerChat_EGameChatType_EGCT_EMOJI;
  static inline bool EGameChatType_IsValid(int value) {
    return ReqAckPlayerChat_EGameChatType_IsValid(value);
  }
  static constexpr EGameChatType EGameChatType_MIN =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MIN;
  static constexpr EGameChatType EGameChatType_MAX =
    ReqAckPlayerChat_EGameChatType_EGameChatType_MAX;
  static constexpr int EGameChatType_ARRAYSIZE =
    ReqAckPlayerChat_EGameChatType_EGameChatType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EGameChatType_descriptor() {
    return ReqAckPlayerChat_EGameChatType_descriptor();
  }
  template<typename T>
  static inline const std::string& EGameChatType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EGameChatType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EGameChatType_Name.");
    return ReqAckPlayerChat_EGameChatType_Name(enum_t_value);
  }
  static inline bool EGameChatType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EGameChatType* value) {
    return ReqAckPlayerChat_EGameChatType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kNicknameFieldNumber = 2,
    kAvatarFieldNumber = 3,
    kAvatarFrameFieldNumber = 4,
    kChatInfoFieldNumber = 7,
    kPlayerIdFieldNumber = 1,
    kChatChannelFieldNumber = 5,
    kChatTypeFieldNumber = 6,
  };
  // bytes nickname = 2;
  void clear_nickname();
  const std::string& nickname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_nickname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_nickname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_nickname();
  void set_allocated_nickname(std::string* nickname);
  private:
  const std::string& _internal_nickname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_nickname(const std::string& value);
  std::string* _internal_mutable_nickname();
  public:

  // bytes avatar = 3;
  void clear_avatar();
  const std::string& avatar() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_avatar();
  void set_allocated_avatar(std::string* avatar);
  private:
  const std::string& _internal_avatar() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar(const std::string& value);
  std::string* _internal_mutable_avatar();
  public:

  // bytes avatar_frame = 4;
  void clear_avatar_frame();
  const std::string& avatar_frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_frame();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_avatar_frame();
  void set_allocated_avatar_frame(std::string* avatar_frame);
  private:
  const std::string& _internal_avatar_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_frame(const std::string& value);
  std::string* _internal_mutable_avatar_frame();
  public:

  // bytes chat_info = 7;
  void clear_chat_info();
  const std::string& chat_info() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_info(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_info();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_info();
  void set_allocated_chat_info(std::string* chat_info);
  private:
  const std::string& _internal_chat_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_info(const std::string& value);
  std::string* _internal_mutable_chat_info();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 5;
  void clear_chat_channel();
  ::KWMsg::ReqAckPlayerChat_EGameChatChannel chat_channel() const;
  void set_chat_channel(::KWMsg::ReqAckPlayerChat_EGameChatChannel value);
  private:
  ::KWMsg::ReqAckPlayerChat_EGameChatChannel _internal_chat_channel() const;
  void _internal_set_chat_channel(::KWMsg::ReqAckPlayerChat_EGameChatChannel value);
  public:

  // .KWMsg.ReqAckPlayerChat.EGameChatType chat_type = 6;
  void clear_chat_type();
  ::KWMsg::ReqAckPlayerChat_EGameChatType chat_type() const;
  void set_chat_type(::KWMsg::ReqAckPlayerChat_EGameChatType value);
  private:
  ::KWMsg::ReqAckPlayerChat_EGameChatType _internal_chat_type() const;
  void _internal_set_chat_type(::KWMsg::ReqAckPlayerChat_EGameChatType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAckPlayerChat)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nickname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_info_;
  ::KWMsg::Ident* player_id_;
  int chat_channel_;
  int chat_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCreateKcpObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCreateKcpObject) */ {
 public:
  inline ReqCreateKcpObject() : ReqCreateKcpObject(nullptr) {}
  ~ReqCreateKcpObject() override;
  explicit constexpr ReqCreateKcpObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCreateKcpObject(const ReqCreateKcpObject& from);
  ReqCreateKcpObject(ReqCreateKcpObject&& from) noexcept
    : ReqCreateKcpObject() {
    *this = ::std::move(from);
  }

  inline ReqCreateKcpObject& operator=(const ReqCreateKcpObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCreateKcpObject& operator=(ReqCreateKcpObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCreateKcpObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCreateKcpObject* internal_default_instance() {
    return reinterpret_cast<const ReqCreateKcpObject*>(
               &_ReqCreateKcpObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(ReqCreateKcpObject& a, ReqCreateKcpObject& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCreateKcpObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCreateKcpObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCreateKcpObject* New() const final {
    return new ReqCreateKcpObject();
  }

  ReqCreateKcpObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCreateKcpObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCreateKcpObject& from);
  void MergeFrom(const ReqCreateKcpObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCreateKcpObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCreateKcpObject";
  }
  protected:
  explicit ReqCreateKcpObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCreateKcpObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCreateKcpObject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCreateKcpObject) */ {
 public:
  inline AckCreateKcpObject() : AckCreateKcpObject(nullptr) {}
  ~AckCreateKcpObject() override;
  explicit constexpr AckCreateKcpObject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCreateKcpObject(const AckCreateKcpObject& from);
  AckCreateKcpObject(AckCreateKcpObject&& from) noexcept
    : AckCreateKcpObject() {
    *this = ::std::move(from);
  }

  inline AckCreateKcpObject& operator=(const AckCreateKcpObject& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCreateKcpObject& operator=(AckCreateKcpObject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCreateKcpObject& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCreateKcpObject* internal_default_instance() {
    return reinterpret_cast<const AckCreateKcpObject*>(
               &_AckCreateKcpObject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(AckCreateKcpObject& a, AckCreateKcpObject& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCreateKcpObject* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCreateKcpObject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCreateKcpObject* New() const final {
    return new AckCreateKcpObject();
  }

  AckCreateKcpObject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCreateKcpObject>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCreateKcpObject& from);
  void MergeFrom(const AckCreateKcpObject& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCreateKcpObject* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCreateKcpObject";
  }
  protected:
  explicit AckCreateKcpObject(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kServerIpFieldNumber = 2,
    kEventCodeFieldNumber = 1,
    kServerPortFieldNumber = 3,
    kConvFieldNumber = 4,
  };
  // bytes server_ip = 2;
  void clear_server_ip();
  const std::string& server_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_server_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_server_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_server_ip();
  void set_allocated_server_ip(std::string* server_ip);
  private:
  const std::string& _internal_server_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_server_ip(const std::string& value);
  std::string* _internal_mutable_server_ip();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 server_port = 3;
  void clear_server_port();
  ::PROTOBUF_NAMESPACE_ID::int32 server_port() const;
  void set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_port() const;
  void _internal_set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 conv = 4;
  void clear_conv();
  ::PROTOBUF_NAMESPACE_ID::uint32 conv() const;
  void set_conv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_conv() const;
  void _internal_set_conv(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCreateKcpObject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr server_ip_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_port_;
  ::PROTOBUF_NAMESPACE_ID::uint32 conv_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqEstablishKcpConnection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqEstablishKcpConnection) */ {
 public:
  inline ReqEstablishKcpConnection() : ReqEstablishKcpConnection(nullptr) {}
  ~ReqEstablishKcpConnection() override;
  explicit constexpr ReqEstablishKcpConnection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqEstablishKcpConnection(const ReqEstablishKcpConnection& from);
  ReqEstablishKcpConnection(ReqEstablishKcpConnection&& from) noexcept
    : ReqEstablishKcpConnection() {
    *this = ::std::move(from);
  }

  inline ReqEstablishKcpConnection& operator=(const ReqEstablishKcpConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqEstablishKcpConnection& operator=(ReqEstablishKcpConnection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqEstablishKcpConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqEstablishKcpConnection* internal_default_instance() {
    return reinterpret_cast<const ReqEstablishKcpConnection*>(
               &_ReqEstablishKcpConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(ReqEstablishKcpConnection& a, ReqEstablishKcpConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqEstablishKcpConnection* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqEstablishKcpConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqEstablishKcpConnection* New() const final {
    return new ReqEstablishKcpConnection();
  }

  ReqEstablishKcpConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqEstablishKcpConnection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqEstablishKcpConnection& from);
  void MergeFrom(const ReqEstablishKcpConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqEstablishKcpConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqEstablishKcpConnection";
  }
  protected:
  explicit ReqEstablishKcpConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqEstablishKcpConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckEstablishKcpConnection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckEstablishKcpConnection) */ {
 public:
  inline AckEstablishKcpConnection() : AckEstablishKcpConnection(nullptr) {}
  ~AckEstablishKcpConnection() override;
  explicit constexpr AckEstablishKcpConnection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckEstablishKcpConnection(const AckEstablishKcpConnection& from);
  AckEstablishKcpConnection(AckEstablishKcpConnection&& from) noexcept
    : AckEstablishKcpConnection() {
    *this = ::std::move(from);
  }

  inline AckEstablishKcpConnection& operator=(const AckEstablishKcpConnection& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckEstablishKcpConnection& operator=(AckEstablishKcpConnection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckEstablishKcpConnection& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckEstablishKcpConnection* internal_default_instance() {
    return reinterpret_cast<const AckEstablishKcpConnection*>(
               &_AckEstablishKcpConnection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(AckEstablishKcpConnection& a, AckEstablishKcpConnection& b) {
    a.Swap(&b);
  }
  inline void Swap(AckEstablishKcpConnection* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckEstablishKcpConnection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckEstablishKcpConnection* New() const final {
    return new AckEstablishKcpConnection();
  }

  AckEstablishKcpConnection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckEstablishKcpConnection>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckEstablishKcpConnection& from);
  void MergeFrom(const AckEstablishKcpConnection& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckEstablishKcpConnection* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckEstablishKcpConnection";
  }
  protected:
  explicit AckEstablishKcpConnection(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckEstablishKcpConnection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqTryPushClientIntoQueueUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqTryPushClientIntoQueueUp) */ {
 public:
  inline ReqTryPushClientIntoQueueUp() : ReqTryPushClientIntoQueueUp(nullptr) {}
  ~ReqTryPushClientIntoQueueUp() override;
  explicit constexpr ReqTryPushClientIntoQueueUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqTryPushClientIntoQueueUp(const ReqTryPushClientIntoQueueUp& from);
  ReqTryPushClientIntoQueueUp(ReqTryPushClientIntoQueueUp&& from) noexcept
    : ReqTryPushClientIntoQueueUp() {
    *this = ::std::move(from);
  }

  inline ReqTryPushClientIntoQueueUp& operator=(const ReqTryPushClientIntoQueueUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTryPushClientIntoQueueUp& operator=(ReqTryPushClientIntoQueueUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqTryPushClientIntoQueueUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqTryPushClientIntoQueueUp* internal_default_instance() {
    return reinterpret_cast<const ReqTryPushClientIntoQueueUp*>(
               &_ReqTryPushClientIntoQueueUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(ReqTryPushClientIntoQueueUp& a, ReqTryPushClientIntoQueueUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqTryPushClientIntoQueueUp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTryPushClientIntoQueueUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqTryPushClientIntoQueueUp* New() const final {
    return new ReqTryPushClientIntoQueueUp();
  }

  ReqTryPushClientIntoQueueUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqTryPushClientIntoQueueUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqTryPushClientIntoQueueUp& from);
  void MergeFrom(const ReqTryPushClientIntoQueueUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTryPushClientIntoQueueUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqTryPushClientIntoQueueUp";
  }
  protected:
  explicit ReqTryPushClientIntoQueueUp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kSenderFieldNumber = 4,
    kWorldIdFieldNumber = 2,
    kLoginIdFieldNumber = 3,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // .KWMsg.Ident sender = 4;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::KWMsg::Ident& sender() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_sender();
  ::KWMsg::Ident* mutable_sender();
  void set_allocated_sender(::KWMsg::Ident* sender);
  private:
  const ::KWMsg::Ident& _internal_sender() const;
  ::KWMsg::Ident* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::KWMsg::Ident* sender);
  ::KWMsg::Ident* unsafe_arena_release_sender();

  // int32 world_id = 2;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 login_id = 3;
  void clear_login_id();
  ::PROTOBUF_NAMESPACE_ID::int32 login_id() const;
  void set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_login_id() const;
  void _internal_set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqTryPushClientIntoQueueUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::KWMsg::Ident* sender_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 login_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckPushClientIntoQueueUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckPushClientIntoQueueUp) */ {
 public:
  inline AckPushClientIntoQueueUp() : AckPushClientIntoQueueUp(nullptr) {}
  ~AckPushClientIntoQueueUp() override;
  explicit constexpr AckPushClientIntoQueueUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckPushClientIntoQueueUp(const AckPushClientIntoQueueUp& from);
  AckPushClientIntoQueueUp(AckPushClientIntoQueueUp&& from) noexcept
    : AckPushClientIntoQueueUp() {
    *this = ::std::move(from);
  }

  inline AckPushClientIntoQueueUp& operator=(const AckPushClientIntoQueueUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckPushClientIntoQueueUp& operator=(AckPushClientIntoQueueUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckPushClientIntoQueueUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckPushClientIntoQueueUp* internal_default_instance() {
    return reinterpret_cast<const AckPushClientIntoQueueUp*>(
               &_AckPushClientIntoQueueUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(AckPushClientIntoQueueUp& a, AckPushClientIntoQueueUp& b) {
    a.Swap(&b);
  }
  inline void Swap(AckPushClientIntoQueueUp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckPushClientIntoQueueUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckPushClientIntoQueueUp* New() const final {
    return new AckPushClientIntoQueueUp();
  }

  AckPushClientIntoQueueUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckPushClientIntoQueueUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckPushClientIntoQueueUp& from);
  void MergeFrom(const AckPushClientIntoQueueUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPushClientIntoQueueUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckPushClientIntoQueueUp";
  }
  protected:
  explicit AckPushClientIntoQueueUp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 2,
    kAccountFieldNumber = 3,
    kQueueUpIpFieldNumber = 7,
    kSenderFieldNumber = 6,
    kEventCodeFieldNumber = 1,
    kWorldIdFieldNumber = 4,
    kLoginIdFieldNumber = 5,
    kQueueUpPortFieldNumber = 8,
  };
  // bytes ticket = 2;
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // bytes account = 3;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // bytes queue_up_ip = 7;
  void clear_queue_up_ip();
  const std::string& queue_up_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_queue_up_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_queue_up_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_queue_up_ip();
  void set_allocated_queue_up_ip(std::string* queue_up_ip);
  private:
  const std::string& _internal_queue_up_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_queue_up_ip(const std::string& value);
  std::string* _internal_mutable_queue_up_ip();
  public:

  // .KWMsg.Ident sender = 6;
  bool has_sender() const;
  private:
  bool _internal_has_sender() const;
  public:
  void clear_sender();
  const ::KWMsg::Ident& sender() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_sender();
  ::KWMsg::Ident* mutable_sender();
  void set_allocated_sender(::KWMsg::Ident* sender);
  private:
  const ::KWMsg::Ident& _internal_sender() const;
  ::KWMsg::Ident* _internal_mutable_sender();
  public:
  void unsafe_arena_set_allocated_sender(
      ::KWMsg::Ident* sender);
  ::KWMsg::Ident* unsafe_arena_release_sender();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 world_id = 4;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 login_id = 5;
  void clear_login_id();
  ::PROTOBUF_NAMESPACE_ID::int32 login_id() const;
  void set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_login_id() const;
  void _internal_set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 queue_up_port = 8;
  void clear_queue_up_port();
  ::PROTOBUF_NAMESPACE_ID::int32 queue_up_port() const;
  void set_queue_up_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_queue_up_port() const;
  void _internal_set_queue_up_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckPushClientIntoQueueUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr queue_up_ip_;
  ::KWMsg::Ident* sender_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 login_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 queue_up_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqQueueUpGetCurWorldSuitProxy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqQueueUpGetCurWorldSuitProxy) */ {
 public:
  inline ReqQueueUpGetCurWorldSuitProxy() : ReqQueueUpGetCurWorldSuitProxy(nullptr) {}
  ~ReqQueueUpGetCurWorldSuitProxy() override;
  explicit constexpr ReqQueueUpGetCurWorldSuitProxy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqQueueUpGetCurWorldSuitProxy(const ReqQueueUpGetCurWorldSuitProxy& from);
  ReqQueueUpGetCurWorldSuitProxy(ReqQueueUpGetCurWorldSuitProxy&& from) noexcept
    : ReqQueueUpGetCurWorldSuitProxy() {
    *this = ::std::move(from);
  }

  inline ReqQueueUpGetCurWorldSuitProxy& operator=(const ReqQueueUpGetCurWorldSuitProxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqQueueUpGetCurWorldSuitProxy& operator=(ReqQueueUpGetCurWorldSuitProxy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqQueueUpGetCurWorldSuitProxy& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqQueueUpGetCurWorldSuitProxy* internal_default_instance() {
    return reinterpret_cast<const ReqQueueUpGetCurWorldSuitProxy*>(
               &_ReqQueueUpGetCurWorldSuitProxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(ReqQueueUpGetCurWorldSuitProxy& a, ReqQueueUpGetCurWorldSuitProxy& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqQueueUpGetCurWorldSuitProxy* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqQueueUpGetCurWorldSuitProxy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqQueueUpGetCurWorldSuitProxy* New() const final {
    return new ReqQueueUpGetCurWorldSuitProxy();
  }

  ReqQueueUpGetCurWorldSuitProxy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqQueueUpGetCurWorldSuitProxy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqQueueUpGetCurWorldSuitProxy& from);
  void MergeFrom(const ReqQueueUpGetCurWorldSuitProxy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqQueueUpGetCurWorldSuitProxy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqQueueUpGetCurWorldSuitProxy";
  }
  protected:
  explicit ReqQueueUpGetCurWorldSuitProxy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
    kTranspondIdFieldNumber = 2,
  };
  // bytes ticket = 1;
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // .KWMsg.Ident transpond_id = 2;
  bool has_transpond_id() const;
  private:
  bool _internal_has_transpond_id() const;
  public:
  void clear_transpond_id();
  const ::KWMsg::Ident& transpond_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_transpond_id();
  ::KWMsg::Ident* mutable_transpond_id();
  void set_allocated_transpond_id(::KWMsg::Ident* transpond_id);
  private:
  const ::KWMsg::Ident& _internal_transpond_id() const;
  ::KWMsg::Ident* _internal_mutable_transpond_id();
  public:
  void unsafe_arena_set_allocated_transpond_id(
      ::KWMsg::Ident* transpond_id);
  ::KWMsg::Ident* unsafe_arena_release_transpond_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqQueueUpGetCurWorldSuitProxy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::KWMsg::Ident* transpond_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckQueueUpGetCurWorldSuitProxy final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckQueueUpGetCurWorldSuitProxy) */ {
 public:
  inline AckQueueUpGetCurWorldSuitProxy() : AckQueueUpGetCurWorldSuitProxy(nullptr) {}
  ~AckQueueUpGetCurWorldSuitProxy() override;
  explicit constexpr AckQueueUpGetCurWorldSuitProxy(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckQueueUpGetCurWorldSuitProxy(const AckQueueUpGetCurWorldSuitProxy& from);
  AckQueueUpGetCurWorldSuitProxy(AckQueueUpGetCurWorldSuitProxy&& from) noexcept
    : AckQueueUpGetCurWorldSuitProxy() {
    *this = ::std::move(from);
  }

  inline AckQueueUpGetCurWorldSuitProxy& operator=(const AckQueueUpGetCurWorldSuitProxy& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckQueueUpGetCurWorldSuitProxy& operator=(AckQueueUpGetCurWorldSuitProxy&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckQueueUpGetCurWorldSuitProxy& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckQueueUpGetCurWorldSuitProxy* internal_default_instance() {
    return reinterpret_cast<const AckQueueUpGetCurWorldSuitProxy*>(
               &_AckQueueUpGetCurWorldSuitProxy_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(AckQueueUpGetCurWorldSuitProxy& a, AckQueueUpGetCurWorldSuitProxy& b) {
    a.Swap(&b);
  }
  inline void Swap(AckQueueUpGetCurWorldSuitProxy* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckQueueUpGetCurWorldSuitProxy* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckQueueUpGetCurWorldSuitProxy* New() const final {
    return new AckQueueUpGetCurWorldSuitProxy();
  }

  AckQueueUpGetCurWorldSuitProxy* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckQueueUpGetCurWorldSuitProxy>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckQueueUpGetCurWorldSuitProxy& from);
  void MergeFrom(const AckQueueUpGetCurWorldSuitProxy& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckQueueUpGetCurWorldSuitProxy* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckQueueUpGetCurWorldSuitProxy";
  }
  protected:
  explicit AckQueueUpGetCurWorldSuitProxy(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTicketFieldNumber = 1,
    kWorldIpFieldNumber = 3,
    kTranspondIdFieldNumber = 2,
    kWorldPortFieldNumber = 4,
  };
  // bytes ticket = 1;
  void clear_ticket();
  const std::string& ticket() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ticket(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ticket();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ticket();
  void set_allocated_ticket(std::string* ticket);
  private:
  const std::string& _internal_ticket() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ticket(const std::string& value);
  std::string* _internal_mutable_ticket();
  public:

  // bytes world_ip = 3;
  void clear_world_ip();
  const std::string& world_ip() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_world_ip(ArgT0&& arg0, ArgT... args);
  std::string* mutable_world_ip();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_world_ip();
  void set_allocated_world_ip(std::string* world_ip);
  private:
  const std::string& _internal_world_ip() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_world_ip(const std::string& value);
  std::string* _internal_mutable_world_ip();
  public:

  // .KWMsg.Ident transpond_id = 2;
  bool has_transpond_id() const;
  private:
  bool _internal_has_transpond_id() const;
  public:
  void clear_transpond_id();
  const ::KWMsg::Ident& transpond_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_transpond_id();
  ::KWMsg::Ident* mutable_transpond_id();
  void set_allocated_transpond_id(::KWMsg::Ident* transpond_id);
  private:
  const ::KWMsg::Ident& _internal_transpond_id() const;
  ::KWMsg::Ident* _internal_mutable_transpond_id();
  public:
  void unsafe_arena_set_allocated_transpond_id(
      ::KWMsg::Ident* transpond_id);
  ::KWMsg::Ident* unsafe_arena_release_transpond_id();

  // int32 world_port = 4;
  void clear_world_port();
  ::PROTOBUF_NAMESPACE_ID::int32 world_port() const;
  void set_world_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_port() const;
  void _internal_set_world_port(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckQueueUpGetCurWorldSuitProxy)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ticket_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr world_ip_;
  ::KWMsg::Ident* transpond_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_port_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqUpdatePlayerLastHeartbeatTS final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUpdatePlayerLastHeartbeatTS) */ {
 public:
  inline ReqUpdatePlayerLastHeartbeatTS() : ReqUpdatePlayerLastHeartbeatTS(nullptr) {}
  ~ReqUpdatePlayerLastHeartbeatTS() override;
  explicit constexpr ReqUpdatePlayerLastHeartbeatTS(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUpdatePlayerLastHeartbeatTS(const ReqUpdatePlayerLastHeartbeatTS& from);
  ReqUpdatePlayerLastHeartbeatTS(ReqUpdatePlayerLastHeartbeatTS&& from) noexcept
    : ReqUpdatePlayerLastHeartbeatTS() {
    *this = ::std::move(from);
  }

  inline ReqUpdatePlayerLastHeartbeatTS& operator=(const ReqUpdatePlayerLastHeartbeatTS& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUpdatePlayerLastHeartbeatTS& operator=(ReqUpdatePlayerLastHeartbeatTS&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUpdatePlayerLastHeartbeatTS& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUpdatePlayerLastHeartbeatTS* internal_default_instance() {
    return reinterpret_cast<const ReqUpdatePlayerLastHeartbeatTS*>(
               &_ReqUpdatePlayerLastHeartbeatTS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(ReqUpdatePlayerLastHeartbeatTS& a, ReqUpdatePlayerLastHeartbeatTS& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUpdatePlayerLastHeartbeatTS* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUpdatePlayerLastHeartbeatTS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUpdatePlayerLastHeartbeatTS* New() const final {
    return new ReqUpdatePlayerLastHeartbeatTS();
  }

  ReqUpdatePlayerLastHeartbeatTS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUpdatePlayerLastHeartbeatTS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUpdatePlayerLastHeartbeatTS& from);
  void MergeFrom(const ReqUpdatePlayerLastHeartbeatTS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUpdatePlayerLastHeartbeatTS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUpdatePlayerLastHeartbeatTS";
  }
  protected:
  explicit ReqUpdatePlayerLastHeartbeatTS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kTsFieldNumber = 2,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // int64 ts = 2;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUpdatePlayerLastHeartbeatTS)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncQueueUpUserCancelOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncQueueUpUserCancelOperation) */ {
 public:
  inline SyncQueueUpUserCancelOperation() : SyncQueueUpUserCancelOperation(nullptr) {}
  ~SyncQueueUpUserCancelOperation() override;
  explicit constexpr SyncQueueUpUserCancelOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncQueueUpUserCancelOperation(const SyncQueueUpUserCancelOperation& from);
  SyncQueueUpUserCancelOperation(SyncQueueUpUserCancelOperation&& from) noexcept
    : SyncQueueUpUserCancelOperation() {
    *this = ::std::move(from);
  }

  inline SyncQueueUpUserCancelOperation& operator=(const SyncQueueUpUserCancelOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncQueueUpUserCancelOperation& operator=(SyncQueueUpUserCancelOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncQueueUpUserCancelOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncQueueUpUserCancelOperation* internal_default_instance() {
    return reinterpret_cast<const SyncQueueUpUserCancelOperation*>(
               &_SyncQueueUpUserCancelOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SyncQueueUpUserCancelOperation& a, SyncQueueUpUserCancelOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncQueueUpUserCancelOperation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncQueueUpUserCancelOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncQueueUpUserCancelOperation* New() const final {
    return new SyncQueueUpUserCancelOperation();
  }

  SyncQueueUpUserCancelOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncQueueUpUserCancelOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncQueueUpUserCancelOperation& from);
  void MergeFrom(const SyncQueueUpUserCancelOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncQueueUpUserCancelOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncQueueUpUserCancelOperation";
  }
  protected:
  explicit SyncQueueUpUserCancelOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAccountFieldNumber = 1,
    kServerIdFieldNumber = 2,
  };
  // bytes account = 1;
  void clear_account();
  const std::string& account() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_account(ArgT0&& arg0, ArgT... args);
  std::string* mutable_account();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_account();
  void set_allocated_account(std::string* account);
  private:
  const std::string& _internal_account() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_account(const std::string& value);
  std::string* _internal_mutable_account();
  public:

  // int32 server_id = 2;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncQueueUpUserCancelOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr account_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerPropertiesCache final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncPlayerPropertiesCache) */ {
 public:
  inline SyncPlayerPropertiesCache() : SyncPlayerPropertiesCache(nullptr) {}
  ~SyncPlayerPropertiesCache() override;
  explicit constexpr SyncPlayerPropertiesCache(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayerPropertiesCache(const SyncPlayerPropertiesCache& from);
  SyncPlayerPropertiesCache(SyncPlayerPropertiesCache&& from) noexcept
    : SyncPlayerPropertiesCache() {
    *this = ::std::move(from);
  }

  inline SyncPlayerPropertiesCache& operator=(const SyncPlayerPropertiesCache& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerPropertiesCache& operator=(SyncPlayerPropertiesCache&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayerPropertiesCache& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayerPropertiesCache* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerPropertiesCache*>(
               &_SyncPlayerPropertiesCache_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(SyncPlayerPropertiesCache& a, SyncPlayerPropertiesCache& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerPropertiesCache* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayerPropertiesCache* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerPropertiesCache* New() const final {
    return new SyncPlayerPropertiesCache();
  }

  SyncPlayerPropertiesCache* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerPropertiesCache>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerPropertiesCache& from);
  void MergeFrom(const SyncPlayerPropertiesCache& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerPropertiesCache* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncPlayerPropertiesCache";
  }
  protected:
  explicit SyncPlayerPropertiesCache(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPropertyFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.ObjectProperty property = 2;
  bool has_property() const;
  private:
  bool _internal_has_property() const;
  public:
  void clear_property();
  const ::KWMsg::ObjectProperty& property() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::ObjectProperty* release_property();
  ::KWMsg::ObjectProperty* mutable_property();
  void set_allocated_property(::KWMsg::ObjectProperty* property);
  private:
  const ::KWMsg::ObjectProperty& _internal_property() const;
  ::KWMsg::ObjectProperty* _internal_mutable_property();
  public:
  void unsafe_arena_set_allocated_property(
      ::KWMsg::ObjectProperty* property);
  ::KWMsg::ObjectProperty* unsafe_arena_release_property();

  // @@protoc_insertion_point(class_scope:KWMsg.SyncPlayerPropertiesCache)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::ObjectProperty* property_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class LoadPlayerPropertiesCache final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.LoadPlayerPropertiesCache) */ {
 public:
  inline LoadPlayerPropertiesCache() : LoadPlayerPropertiesCache(nullptr) {}
  ~LoadPlayerPropertiesCache() override;
  explicit constexpr LoadPlayerPropertiesCache(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadPlayerPropertiesCache(const LoadPlayerPropertiesCache& from);
  LoadPlayerPropertiesCache(LoadPlayerPropertiesCache&& from) noexcept
    : LoadPlayerPropertiesCache() {
    *this = ::std::move(from);
  }

  inline LoadPlayerPropertiesCache& operator=(const LoadPlayerPropertiesCache& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadPlayerPropertiesCache& operator=(LoadPlayerPropertiesCache&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadPlayerPropertiesCache& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadPlayerPropertiesCache* internal_default_instance() {
    return reinterpret_cast<const LoadPlayerPropertiesCache*>(
               &_LoadPlayerPropertiesCache_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(LoadPlayerPropertiesCache& a, LoadPlayerPropertiesCache& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadPlayerPropertiesCache* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadPlayerPropertiesCache* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadPlayerPropertiesCache* New() const final {
    return new LoadPlayerPropertiesCache();
  }

  LoadPlayerPropertiesCache* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadPlayerPropertiesCache>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadPlayerPropertiesCache& from);
  void MergeFrom(const LoadPlayerPropertiesCache& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPlayerPropertiesCache* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.LoadPlayerPropertiesCache";
  }
  protected:
  explicit LoadPlayerPropertiesCache(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPropertyListFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.ObjectPropertyList property_list = 2;
  bool has_property_list() const;
  private:
  bool _internal_has_property_list() const;
  public:
  void clear_property_list();
  const ::KWMsg::ObjectPropertyList& property_list() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::ObjectPropertyList* release_property_list();
  ::KWMsg::ObjectPropertyList* mutable_property_list();
  void set_allocated_property_list(::KWMsg::ObjectPropertyList* property_list);
  private:
  const ::KWMsg::ObjectPropertyList& _internal_property_list() const;
  ::KWMsg::ObjectPropertyList* _internal_mutable_property_list();
  public:
  void unsafe_arena_set_allocated_property_list(
      ::KWMsg::ObjectPropertyList* property_list);
  ::KWMsg::ObjectPropertyList* unsafe_arena_release_property_list();

  // @@protoc_insertion_point(class_scope:KWMsg.LoadPlayerPropertiesCache)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::ObjectPropertyList* property_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class LoadPlayerRecordsCache final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.LoadPlayerRecordsCache) */ {
 public:
  inline LoadPlayerRecordsCache() : LoadPlayerRecordsCache(nullptr) {}
  ~LoadPlayerRecordsCache() override;
  explicit constexpr LoadPlayerRecordsCache(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  LoadPlayerRecordsCache(const LoadPlayerRecordsCache& from);
  LoadPlayerRecordsCache(LoadPlayerRecordsCache&& from) noexcept
    : LoadPlayerRecordsCache() {
    *this = ::std::move(from);
  }

  inline LoadPlayerRecordsCache& operator=(const LoadPlayerRecordsCache& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoadPlayerRecordsCache& operator=(LoadPlayerRecordsCache&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LoadPlayerRecordsCache& default_instance() {
    return *internal_default_instance();
  }
  static inline const LoadPlayerRecordsCache* internal_default_instance() {
    return reinterpret_cast<const LoadPlayerRecordsCache*>(
               &_LoadPlayerRecordsCache_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(LoadPlayerRecordsCache& a, LoadPlayerRecordsCache& b) {
    a.Swap(&b);
  }
  inline void Swap(LoadPlayerRecordsCache* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LoadPlayerRecordsCache* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoadPlayerRecordsCache* New() const final {
    return new LoadPlayerRecordsCache();
  }

  LoadPlayerRecordsCache* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoadPlayerRecordsCache>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoadPlayerRecordsCache& from);
  void MergeFrom(const LoadPlayerRecordsCache& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoadPlayerRecordsCache* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.LoadPlayerRecordsCache";
  }
  protected:
  explicit LoadPlayerRecordsCache(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kRecordListFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.ObjectRecordList record_list = 2;
  bool has_record_list() const;
  private:
  bool _internal_has_record_list() const;
  public:
  void clear_record_list();
  const ::KWMsg::ObjectRecordList& record_list() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::ObjectRecordList* release_record_list();
  ::KWMsg::ObjectRecordList* mutable_record_list();
  void set_allocated_record_list(::KWMsg::ObjectRecordList* record_list);
  private:
  const ::KWMsg::ObjectRecordList& _internal_record_list() const;
  ::KWMsg::ObjectRecordList* _internal_mutable_record_list();
  public:
  void unsafe_arena_set_allocated_record_list(
      ::KWMsg::ObjectRecordList* record_list);
  ::KWMsg::ObjectRecordList* unsafe_arena_release_record_list();

  // @@protoc_insertion_point(class_scope:KWMsg.LoadPlayerRecordsCache)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::ObjectRecordList* record_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerRecordsCacheAdd final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncPlayerRecordsCacheAdd) */ {
 public:
  inline SyncPlayerRecordsCacheAdd() : SyncPlayerRecordsCacheAdd(nullptr) {}
  ~SyncPlayerRecordsCacheAdd() override;
  explicit constexpr SyncPlayerRecordsCacheAdd(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayerRecordsCacheAdd(const SyncPlayerRecordsCacheAdd& from);
  SyncPlayerRecordsCacheAdd(SyncPlayerRecordsCacheAdd&& from) noexcept
    : SyncPlayerRecordsCacheAdd() {
    *this = ::std::move(from);
  }

  inline SyncPlayerRecordsCacheAdd& operator=(const SyncPlayerRecordsCacheAdd& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerRecordsCacheAdd& operator=(SyncPlayerRecordsCacheAdd&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayerRecordsCacheAdd& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayerRecordsCacheAdd* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerRecordsCacheAdd*>(
               &_SyncPlayerRecordsCacheAdd_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(SyncPlayerRecordsCacheAdd& a, SyncPlayerRecordsCacheAdd& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerRecordsCacheAdd* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayerRecordsCacheAdd* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerRecordsCacheAdd* New() const final {
    return new SyncPlayerRecordsCacheAdd();
  }

  SyncPlayerRecordsCacheAdd* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerRecordsCacheAdd>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerRecordsCacheAdd& from);
  void MergeFrom(const SyncPlayerRecordsCacheAdd& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerRecordsCacheAdd* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncPlayerRecordsCacheAdd";
  }
  protected:
  explicit SyncPlayerRecordsCacheAdd(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordIntListFieldNumber = 4,
    kRecordFloatListFieldNumber = 5,
    kRecordStringListFieldNumber = 6,
    kRecordObjectListFieldNumber = 7,
    kRecordVector2ListFieldNumber = 8,
    kRecordVector3ListFieldNumber = 9,
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kRowFieldNumber = 3,
  };
  // repeated .KWMsg.RecordInt record_int_list = 4;
  int record_int_list_size() const;
  private:
  int _internal_record_int_list_size() const;
  public:
  void clear_record_int_list();
  ::KWMsg::RecordInt* mutable_record_int_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt >*
      mutable_record_int_list();
  private:
  const ::KWMsg::RecordInt& _internal_record_int_list(int index) const;
  ::KWMsg::RecordInt* _internal_add_record_int_list();
  public:
  const ::KWMsg::RecordInt& record_int_list(int index) const;
  ::KWMsg::RecordInt* add_record_int_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt >&
      record_int_list() const;

  // repeated .KWMsg.RecordFloat record_float_list = 5;
  int record_float_list_size() const;
  private:
  int _internal_record_float_list_size() const;
  public:
  void clear_record_float_list();
  ::KWMsg::RecordFloat* mutable_record_float_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat >*
      mutable_record_float_list();
  private:
  const ::KWMsg::RecordFloat& _internal_record_float_list(int index) const;
  ::KWMsg::RecordFloat* _internal_add_record_float_list();
  public:
  const ::KWMsg::RecordFloat& record_float_list(int index) const;
  ::KWMsg::RecordFloat* add_record_float_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat >&
      record_float_list() const;

  // repeated .KWMsg.RecordString record_string_list = 6;
  int record_string_list_size() const;
  private:
  int _internal_record_string_list_size() const;
  public:
  void clear_record_string_list();
  ::KWMsg::RecordString* mutable_record_string_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString >*
      mutable_record_string_list();
  private:
  const ::KWMsg::RecordString& _internal_record_string_list(int index) const;
  ::KWMsg::RecordString* _internal_add_record_string_list();
  public:
  const ::KWMsg::RecordString& record_string_list(int index) const;
  ::KWMsg::RecordString* add_record_string_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString >&
      record_string_list() const;

  // repeated .KWMsg.RecordObject record_object_list = 7;
  int record_object_list_size() const;
  private:
  int _internal_record_object_list_size() const;
  public:
  void clear_record_object_list();
  ::KWMsg::RecordObject* mutable_record_object_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject >*
      mutable_record_object_list();
  private:
  const ::KWMsg::RecordObject& _internal_record_object_list(int index) const;
  ::KWMsg::RecordObject* _internal_add_record_object_list();
  public:
  const ::KWMsg::RecordObject& record_object_list(int index) const;
  ::KWMsg::RecordObject* add_record_object_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject >&
      record_object_list() const;

  // repeated .KWMsg.RecordVector2 record_vector2_list = 8;
  int record_vector2_list_size() const;
  private:
  int _internal_record_vector2_list_size() const;
  public:
  void clear_record_vector2_list();
  ::KWMsg::RecordVector2* mutable_record_vector2_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 >*
      mutable_record_vector2_list();
  private:
  const ::KWMsg::RecordVector2& _internal_record_vector2_list(int index) const;
  ::KWMsg::RecordVector2* _internal_add_record_vector2_list();
  public:
  const ::KWMsg::RecordVector2& record_vector2_list(int index) const;
  ::KWMsg::RecordVector2* add_record_vector2_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 >&
      record_vector2_list() const;

  // repeated .KWMsg.RecordVector3 record_vector3_list = 9;
  int record_vector3_list_size() const;
  private:
  int _internal_record_vector3_list_size() const;
  public:
  void clear_record_vector3_list();
  ::KWMsg::RecordVector3* mutable_record_vector3_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 >*
      mutable_record_vector3_list();
  private:
  const ::KWMsg::RecordVector3& _internal_record_vector3_list(int index) const;
  ::KWMsg::RecordVector3* _internal_add_record_vector3_list();
  public:
  const ::KWMsg::RecordVector3& record_vector3_list(int index) const;
  ::KWMsg::RecordVector3* add_record_vector3_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 >&
      record_vector3_list() const;

  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 row = 3;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncPlayerRecordsCacheAdd)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt > record_int_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat > record_float_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString > record_string_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject > record_object_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 > record_vector2_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 > record_vector3_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerRecordsCacheUpdate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncPlayerRecordsCacheUpdate) */ {
 public:
  inline SyncPlayerRecordsCacheUpdate() : SyncPlayerRecordsCacheUpdate(nullptr) {}
  ~SyncPlayerRecordsCacheUpdate() override;
  explicit constexpr SyncPlayerRecordsCacheUpdate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayerRecordsCacheUpdate(const SyncPlayerRecordsCacheUpdate& from);
  SyncPlayerRecordsCacheUpdate(SyncPlayerRecordsCacheUpdate&& from) noexcept
    : SyncPlayerRecordsCacheUpdate() {
    *this = ::std::move(from);
  }

  inline SyncPlayerRecordsCacheUpdate& operator=(const SyncPlayerRecordsCacheUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerRecordsCacheUpdate& operator=(SyncPlayerRecordsCacheUpdate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayerRecordsCacheUpdate& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayerRecordsCacheUpdate* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerRecordsCacheUpdate*>(
               &_SyncPlayerRecordsCacheUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(SyncPlayerRecordsCacheUpdate& a, SyncPlayerRecordsCacheUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerRecordsCacheUpdate* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayerRecordsCacheUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerRecordsCacheUpdate* New() const final {
    return new SyncPlayerRecordsCacheUpdate();
  }

  SyncPlayerRecordsCacheUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerRecordsCacheUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerRecordsCacheUpdate& from);
  void MergeFrom(const SyncPlayerRecordsCacheUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerRecordsCacheUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncPlayerRecordsCacheUpdate";
  }
  protected:
  explicit SyncPlayerRecordsCacheUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kRecordIntFieldNumber = 4,
    kRecordFloatFieldNumber = 5,
    kRecordStringFieldNumber = 6,
    kRecordObjectFieldNumber = 7,
    kRecordVector2FieldNumber = 8,
    kRecordVector3FieldNumber = 9,
    kRowFieldNumber = 3,
  };
  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.RecordInt record_int = 4;
  bool has_record_int() const;
  private:
  bool _internal_has_record_int() const;
  public:
  void clear_record_int();
  const ::KWMsg::RecordInt& record_int() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::RecordInt* release_record_int();
  ::KWMsg::RecordInt* mutable_record_int();
  void set_allocated_record_int(::KWMsg::RecordInt* record_int);
  private:
  const ::KWMsg::RecordInt& _internal_record_int() const;
  ::KWMsg::RecordInt* _internal_mutable_record_int();
  public:
  void unsafe_arena_set_allocated_record_int(
      ::KWMsg::RecordInt* record_int);
  ::KWMsg::RecordInt* unsafe_arena_release_record_int();

  // .KWMsg.RecordFloat record_float = 5;
  bool has_record_float() const;
  private:
  bool _internal_has_record_float() const;
  public:
  void clear_record_float();
  const ::KWMsg::RecordFloat& record_float() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::RecordFloat* release_record_float();
  ::KWMsg::RecordFloat* mutable_record_float();
  void set_allocated_record_float(::KWMsg::RecordFloat* record_float);
  private:
  const ::KWMsg::RecordFloat& _internal_record_float() const;
  ::KWMsg::RecordFloat* _internal_mutable_record_float();
  public:
  void unsafe_arena_set_allocated_record_float(
      ::KWMsg::RecordFloat* record_float);
  ::KWMsg::RecordFloat* unsafe_arena_release_record_float();

  // .KWMsg.RecordString record_string = 6;
  bool has_record_string() const;
  private:
  bool _internal_has_record_string() const;
  public:
  void clear_record_string();
  const ::KWMsg::RecordString& record_string() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::RecordString* release_record_string();
  ::KWMsg::RecordString* mutable_record_string();
  void set_allocated_record_string(::KWMsg::RecordString* record_string);
  private:
  const ::KWMsg::RecordString& _internal_record_string() const;
  ::KWMsg::RecordString* _internal_mutable_record_string();
  public:
  void unsafe_arena_set_allocated_record_string(
      ::KWMsg::RecordString* record_string);
  ::KWMsg::RecordString* unsafe_arena_release_record_string();

  // .KWMsg.RecordObject record_object = 7;
  bool has_record_object() const;
  private:
  bool _internal_has_record_object() const;
  public:
  void clear_record_object();
  const ::KWMsg::RecordObject& record_object() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::RecordObject* release_record_object();
  ::KWMsg::RecordObject* mutable_record_object();
  void set_allocated_record_object(::KWMsg::RecordObject* record_object);
  private:
  const ::KWMsg::RecordObject& _internal_record_object() const;
  ::KWMsg::RecordObject* _internal_mutable_record_object();
  public:
  void unsafe_arena_set_allocated_record_object(
      ::KWMsg::RecordObject* record_object);
  ::KWMsg::RecordObject* unsafe_arena_release_record_object();

  // .KWMsg.RecordVector2 record_vector2 = 8;
  bool has_record_vector2() const;
  private:
  bool _internal_has_record_vector2() const;
  public:
  void clear_record_vector2();
  const ::KWMsg::RecordVector2& record_vector2() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::RecordVector2* release_record_vector2();
  ::KWMsg::RecordVector2* mutable_record_vector2();
  void set_allocated_record_vector2(::KWMsg::RecordVector2* record_vector2);
  private:
  const ::KWMsg::RecordVector2& _internal_record_vector2() const;
  ::KWMsg::RecordVector2* _internal_mutable_record_vector2();
  public:
  void unsafe_arena_set_allocated_record_vector2(
      ::KWMsg::RecordVector2* record_vector2);
  ::KWMsg::RecordVector2* unsafe_arena_release_record_vector2();

  // .KWMsg.RecordVector3 record_vector3 = 9;
  bool has_record_vector3() const;
  private:
  bool _internal_has_record_vector3() const;
  public:
  void clear_record_vector3();
  const ::KWMsg::RecordVector3& record_vector3() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::RecordVector3* release_record_vector3();
  ::KWMsg::RecordVector3* mutable_record_vector3();
  void set_allocated_record_vector3(::KWMsg::RecordVector3* record_vector3);
  private:
  const ::KWMsg::RecordVector3& _internal_record_vector3() const;
  ::KWMsg::RecordVector3* _internal_mutable_record_vector3();
  public:
  void unsafe_arena_set_allocated_record_vector3(
      ::KWMsg::RecordVector3* record_vector3);
  ::KWMsg::RecordVector3* unsafe_arena_release_record_vector3();

  // int32 row = 3;
  void clear_row();
  ::PROTOBUF_NAMESPACE_ID::int32 row() const;
  void set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row() const;
  void _internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncPlayerRecordsCacheUpdate)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::RecordInt* record_int_;
  ::KWMsg::RecordFloat* record_float_;
  ::KWMsg::RecordString* record_string_;
  ::KWMsg::RecordObject* record_object_;
  ::KWMsg::RecordVector2* record_vector2_;
  ::KWMsg::RecordVector3* record_vector3_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerRecordsCacheDel final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncPlayerRecordsCacheDel) */ {
 public:
  inline SyncPlayerRecordsCacheDel() : SyncPlayerRecordsCacheDel(nullptr) {}
  ~SyncPlayerRecordsCacheDel() override;
  explicit constexpr SyncPlayerRecordsCacheDel(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayerRecordsCacheDel(const SyncPlayerRecordsCacheDel& from);
  SyncPlayerRecordsCacheDel(SyncPlayerRecordsCacheDel&& from) noexcept
    : SyncPlayerRecordsCacheDel() {
    *this = ::std::move(from);
  }

  inline SyncPlayerRecordsCacheDel& operator=(const SyncPlayerRecordsCacheDel& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerRecordsCacheDel& operator=(SyncPlayerRecordsCacheDel&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayerRecordsCacheDel& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayerRecordsCacheDel* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerRecordsCacheDel*>(
               &_SyncPlayerRecordsCacheDel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(SyncPlayerRecordsCacheDel& a, SyncPlayerRecordsCacheDel& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerRecordsCacheDel* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayerRecordsCacheDel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerRecordsCacheDel* New() const final {
    return new SyncPlayerRecordsCacheDel();
  }

  SyncPlayerRecordsCacheDel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerRecordsCacheDel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerRecordsCacheDel& from);
  void MergeFrom(const SyncPlayerRecordsCacheDel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerRecordsCacheDel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncPlayerRecordsCacheDel";
  }
  protected:
  explicit SyncPlayerRecordsCacheDel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kRemoveRowFieldNumber = 3,
  };
  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 remove_row = 3;
  void clear_remove_row();
  ::PROTOBUF_NAMESPACE_ID::int32 remove_row() const;
  void set_remove_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_remove_row() const;
  void _internal_set_remove_row(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncPlayerRecordsCacheDel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 remove_row_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerRecordsCacheSwap final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncPlayerRecordsCacheSwap) */ {
 public:
  inline SyncPlayerRecordsCacheSwap() : SyncPlayerRecordsCacheSwap(nullptr) {}
  ~SyncPlayerRecordsCacheSwap() override;
  explicit constexpr SyncPlayerRecordsCacheSwap(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayerRecordsCacheSwap(const SyncPlayerRecordsCacheSwap& from);
  SyncPlayerRecordsCacheSwap(SyncPlayerRecordsCacheSwap&& from) noexcept
    : SyncPlayerRecordsCacheSwap() {
    *this = ::std::move(from);
  }

  inline SyncPlayerRecordsCacheSwap& operator=(const SyncPlayerRecordsCacheSwap& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerRecordsCacheSwap& operator=(SyncPlayerRecordsCacheSwap&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayerRecordsCacheSwap& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayerRecordsCacheSwap* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerRecordsCacheSwap*>(
               &_SyncPlayerRecordsCacheSwap_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(SyncPlayerRecordsCacheSwap& a, SyncPlayerRecordsCacheSwap& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerRecordsCacheSwap* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayerRecordsCacheSwap* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerRecordsCacheSwap* New() const final {
    return new SyncPlayerRecordsCacheSwap();
  }

  SyncPlayerRecordsCacheSwap* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerRecordsCacheSwap>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerRecordsCacheSwap& from);
  void MergeFrom(const SyncPlayerRecordsCacheSwap& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerRecordsCacheSwap* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncPlayerRecordsCacheSwap";
  }
  protected:
  explicit SyncPlayerRecordsCacheSwap(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRecordNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kRowOriginFieldNumber = 3,
    kRowTargetFieldNumber = 4,
  };
  // bytes record_name = 2;
  void clear_record_name();
  const std::string& record_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_record_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_record_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_record_name();
  void set_allocated_record_name(std::string* record_name);
  private:
  const std::string& _internal_record_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_record_name(const std::string& value);
  std::string* _internal_mutable_record_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 row_origin = 3;
  void clear_row_origin();
  ::PROTOBUF_NAMESPACE_ID::int32 row_origin() const;
  void set_row_origin(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row_origin() const;
  void _internal_set_row_origin(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 row_target = 4;
  void clear_row_target();
  ::PROTOBUF_NAMESPACE_ID::int32 row_target() const;
  void set_row_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_row_target() const;
  void _internal_set_row_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncPlayerRecordsCacheSwap)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr record_name_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_origin_;
  ::PROTOBUF_NAMESPACE_ID::int32 row_target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqTestBattle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqTestBattle) */ {
 public:
  inline ReqTestBattle() : ReqTestBattle(nullptr) {}
  ~ReqTestBattle() override;
  explicit constexpr ReqTestBattle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqTestBattle(const ReqTestBattle& from);
  ReqTestBattle(ReqTestBattle&& from) noexcept
    : ReqTestBattle() {
    *this = ::std::move(from);
  }

  inline ReqTestBattle& operator=(const ReqTestBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTestBattle& operator=(ReqTestBattle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqTestBattle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqTestBattle* internal_default_instance() {
    return reinterpret_cast<const ReqTestBattle*>(
               &_ReqTestBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(ReqTestBattle& a, ReqTestBattle& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqTestBattle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTestBattle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqTestBattle* New() const final {
    return new ReqTestBattle();
  }

  ReqTestBattle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqTestBattle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqTestBattle& from);
  void MergeFrom(const ReqTestBattle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTestBattle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqTestBattle";
  }
  protected:
  explicit ReqTestBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleListFieldNumber = 2,
    kTeamIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // bytes battle_list = 2;
  void clear_battle_list();
  const std::string& battle_list() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_battle_list(ArgT0&& arg0, ArgT... args);
  std::string* mutable_battle_list();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_battle_list();
  void set_allocated_battle_list(std::string* battle_list);
  private:
  const std::string& _internal_battle_list() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_battle_list(const std::string& value);
  std::string* _internal_mutable_battle_list();
  public:

  // bytes team_id = 3;
  void clear_team_id();
  const std::string& team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_team_id();
  void set_allocated_team_id(std::string* team_id);
  private:
  const std::string& _internal_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_id(const std::string& value);
  std::string* _internal_mutable_team_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqTestBattle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckTestBattle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckTestBattle) */ {
 public:
  inline AckTestBattle() : AckTestBattle(nullptr) {}
  ~AckTestBattle() override;
  explicit constexpr AckTestBattle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckTestBattle(const AckTestBattle& from);
  AckTestBattle(AckTestBattle&& from) noexcept
    : AckTestBattle() {
    *this = ::std::move(from);
  }

  inline AckTestBattle& operator=(const AckTestBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckTestBattle& operator=(AckTestBattle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckTestBattle& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckTestBattle* internal_default_instance() {
    return reinterpret_cast<const AckTestBattle*>(
               &_AckTestBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(AckTestBattle& a, AckTestBattle& b) {
    a.Swap(&b);
  }
  inline void Swap(AckTestBattle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckTestBattle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckTestBattle* New() const final {
    return new AckTestBattle();
  }

  AckTestBattle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckTestBattle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckTestBattle& from);
  void MergeFrom(const AckTestBattle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckTestBattle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckTestBattle";
  }
  protected:
  explicit AckTestBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleListFieldNumber = 2,
    kTeamIdFieldNumber = 3,
    kEventCodeFieldNumber = 1,
    kSceneIdFieldNumber = 4,
  };
  // bytes battle_list = 2;
  void clear_battle_list();
  const std::string& battle_list() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_battle_list(ArgT0&& arg0, ArgT... args);
  std::string* mutable_battle_list();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_battle_list();
  void set_allocated_battle_list(std::string* battle_list);
  private:
  const std::string& _internal_battle_list() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_battle_list(const std::string& value);
  std::string* _internal_mutable_battle_list();
  public:

  // bytes team_id = 3;
  void clear_team_id();
  const std::string& team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_team_id();
  void set_allocated_team_id(std::string* team_id);
  private:
  const std::string& _internal_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_id(const std::string& value);
  std::string* _internal_mutable_team_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 scene_id = 4;
  void clear_scene_id();
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id() const;
  void set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_scene_id() const;
  void _internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckTestBattle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 scene_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCollectWitch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCollectWitch) */ {
 public:
  inline ReqCollectWitch() : ReqCollectWitch(nullptr) {}
  ~ReqCollectWitch() override;
  explicit constexpr ReqCollectWitch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCollectWitch(const ReqCollectWitch& from);
  ReqCollectWitch(ReqCollectWitch&& from) noexcept
    : ReqCollectWitch() {
    *this = ::std::move(from);
  }

  inline ReqCollectWitch& operator=(const ReqCollectWitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCollectWitch& operator=(ReqCollectWitch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCollectWitch& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCollectWitch* internal_default_instance() {
    return reinterpret_cast<const ReqCollectWitch*>(
               &_ReqCollectWitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(ReqCollectWitch& a, ReqCollectWitch& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCollectWitch* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCollectWitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCollectWitch* New() const final {
    return new ReqCollectWitch();
  }

  ReqCollectWitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCollectWitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCollectWitch& from);
  void MergeFrom(const ReqCollectWitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCollectWitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCollectWitch";
  }
  protected:
  explicit ReqCollectWitch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes witch_id = 2;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCollectWitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCollectWitch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCollectWitch) */ {
 public:
  inline AckCollectWitch() : AckCollectWitch(nullptr) {}
  ~AckCollectWitch() override;
  explicit constexpr AckCollectWitch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCollectWitch(const AckCollectWitch& from);
  AckCollectWitch(AckCollectWitch&& from) noexcept
    : AckCollectWitch() {
    *this = ::std::move(from);
  }

  inline AckCollectWitch& operator=(const AckCollectWitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCollectWitch& operator=(AckCollectWitch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCollectWitch& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCollectWitch* internal_default_instance() {
    return reinterpret_cast<const AckCollectWitch*>(
               &_AckCollectWitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(AckCollectWitch& a, AckCollectWitch& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCollectWitch* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCollectWitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCollectWitch* New() const final {
    return new AckCollectWitch();
  }

  AckCollectWitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCollectWitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCollectWitch& from);
  void MergeFrom(const AckCollectWitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCollectWitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCollectWitch";
  }
  protected:
  explicit AckCollectWitch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
    kIsCollectFieldNumber = 3,
  };
  // bytes witch_id = 2;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 is_collect = 3;
  void clear_is_collect();
  ::PROTOBUF_NAMESPACE_ID::int32 is_collect() const;
  void set_is_collect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_collect() const;
  void _internal_set_is_collect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCollectWitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_collect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqInitPlayerName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqInitPlayerName) */ {
 public:
  inline ReqInitPlayerName() : ReqInitPlayerName(nullptr) {}
  ~ReqInitPlayerName() override;
  explicit constexpr ReqInitPlayerName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqInitPlayerName(const ReqInitPlayerName& from);
  ReqInitPlayerName(ReqInitPlayerName&& from) noexcept
    : ReqInitPlayerName() {
    *this = ::std::move(from);
  }

  inline ReqInitPlayerName& operator=(const ReqInitPlayerName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqInitPlayerName& operator=(ReqInitPlayerName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqInitPlayerName& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqInitPlayerName* internal_default_instance() {
    return reinterpret_cast<const ReqInitPlayerName*>(
               &_ReqInitPlayerName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(ReqInitPlayerName& a, ReqInitPlayerName& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqInitPlayerName* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqInitPlayerName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqInitPlayerName* New() const final {
    return new ReqInitPlayerName();
  }

  ReqInitPlayerName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqInitPlayerName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqInitPlayerName& from);
  void MergeFrom(const ReqInitPlayerName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqInitPlayerName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqInitPlayerName";
  }
  protected:
  explicit ReqInitPlayerName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kIsRandomNameFieldNumber = 3,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 is_random_name = 3;
  void clear_is_random_name();
  ::PROTOBUF_NAMESPACE_ID::int32 is_random_name() const;
  void set_is_random_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_random_name() const;
  void _internal_set_is_random_name(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqInitPlayerName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_random_name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckInitPlayerName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckInitPlayerName) */ {
 public:
  inline AckInitPlayerName() : AckInitPlayerName(nullptr) {}
  ~AckInitPlayerName() override;
  explicit constexpr AckInitPlayerName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckInitPlayerName(const AckInitPlayerName& from);
  AckInitPlayerName(AckInitPlayerName&& from) noexcept
    : AckInitPlayerName() {
    *this = ::std::move(from);
  }

  inline AckInitPlayerName& operator=(const AckInitPlayerName& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckInitPlayerName& operator=(AckInitPlayerName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckInitPlayerName& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckInitPlayerName* internal_default_instance() {
    return reinterpret_cast<const AckInitPlayerName*>(
               &_AckInitPlayerName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(AckInitPlayerName& a, AckInitPlayerName& b) {
    a.Swap(&b);
  }
  inline void Swap(AckInitPlayerName* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckInitPlayerName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckInitPlayerName* New() const final {
    return new AckInitPlayerName();
  }

  AckInitPlayerName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckInitPlayerName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckInitPlayerName& from);
  void MergeFrom(const AckInitPlayerName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckInitPlayerName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckInitPlayerName";
  }
  protected:
  explicit AckInitPlayerName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 3,
    kPlayerIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // bytes name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckInitPlayerName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::KWMsg::Ident* player_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqUpdateModule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUpdateModule) */ {
 public:
  inline ReqUpdateModule() : ReqUpdateModule(nullptr) {}
  ~ReqUpdateModule() override;
  explicit constexpr ReqUpdateModule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUpdateModule(const ReqUpdateModule& from);
  ReqUpdateModule(ReqUpdateModule&& from) noexcept
    : ReqUpdateModule() {
    *this = ::std::move(from);
  }

  inline ReqUpdateModule& operator=(const ReqUpdateModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUpdateModule& operator=(ReqUpdateModule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUpdateModule& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUpdateModule* internal_default_instance() {
    return reinterpret_cast<const ReqUpdateModule*>(
               &_ReqUpdateModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(ReqUpdateModule& a, ReqUpdateModule& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUpdateModule* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUpdateModule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUpdateModule* New() const final {
    return new ReqUpdateModule();
  }

  ReqUpdateModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUpdateModule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUpdateModule& from);
  void MergeFrom(const ReqUpdateModule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUpdateModule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUpdateModule";
  }
  protected:
  explicit ReqUpdateModule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUpdateModule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckUpdateModule final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckUpdateModule) */ {
 public:
  inline AckUpdateModule() : AckUpdateModule(nullptr) {}
  ~AckUpdateModule() override;
  explicit constexpr AckUpdateModule(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckUpdateModule(const AckUpdateModule& from);
  AckUpdateModule(AckUpdateModule&& from) noexcept
    : AckUpdateModule() {
    *this = ::std::move(from);
  }

  inline AckUpdateModule& operator=(const AckUpdateModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckUpdateModule& operator=(AckUpdateModule&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckUpdateModule& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckUpdateModule* internal_default_instance() {
    return reinterpret_cast<const AckUpdateModule*>(
               &_AckUpdateModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(AckUpdateModule& a, AckUpdateModule& b) {
    a.Swap(&b);
  }
  inline void Swap(AckUpdateModule* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckUpdateModule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckUpdateModule* New() const final {
    return new AckUpdateModule();
  }

  AckUpdateModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckUpdateModule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckUpdateModule& from);
  void MergeFrom(const AckUpdateModule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckUpdateModule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckUpdateModule";
  }
  protected:
  explicit AckUpdateModule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
    kChapterStatusFieldNumber = 3,
  };
  // bytes module_id = 2;
  void clear_module_id();
  const std::string& module_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_module_id();
  void set_allocated_module_id(std::string* module_id);
  private:
  const std::string& _internal_module_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_id(const std::string& value);
  std::string* _internal_mutable_module_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 chapter_status = 3;
  void clear_chapter_status();
  ::PROTOBUF_NAMESPACE_ID::int32 chapter_status() const;
  void set_chapter_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chapter_status() const;
  void _internal_set_chapter_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckUpdateModule)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 chapter_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqChapterRewardTipOk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqChapterRewardTipOk) */ {
 public:
  inline ReqChapterRewardTipOk() : ReqChapterRewardTipOk(nullptr) {}
  ~ReqChapterRewardTipOk() override;
  explicit constexpr ReqChapterRewardTipOk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqChapterRewardTipOk(const ReqChapterRewardTipOk& from);
  ReqChapterRewardTipOk(ReqChapterRewardTipOk&& from) noexcept
    : ReqChapterRewardTipOk() {
    *this = ::std::move(from);
  }

  inline ReqChapterRewardTipOk& operator=(const ReqChapterRewardTipOk& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqChapterRewardTipOk& operator=(ReqChapterRewardTipOk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqChapterRewardTipOk& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqChapterRewardTipOk* internal_default_instance() {
    return reinterpret_cast<const ReqChapterRewardTipOk*>(
               &_ReqChapterRewardTipOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(ReqChapterRewardTipOk& a, ReqChapterRewardTipOk& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqChapterRewardTipOk* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqChapterRewardTipOk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqChapterRewardTipOk* New() const final {
    return new ReqChapterRewardTipOk();
  }

  ReqChapterRewardTipOk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqChapterRewardTipOk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqChapterRewardTipOk& from);
  void MergeFrom(const ReqChapterRewardTipOk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqChapterRewardTipOk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqChapterRewardTipOk";
  }
  protected:
  explicit ReqChapterRewardTipOk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqChapterRewardTipOk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckChapterRewardTipOk final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckChapterRewardTipOk) */ {
 public:
  inline AckChapterRewardTipOk() : AckChapterRewardTipOk(nullptr) {}
  ~AckChapterRewardTipOk() override;
  explicit constexpr AckChapterRewardTipOk(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckChapterRewardTipOk(const AckChapterRewardTipOk& from);
  AckChapterRewardTipOk(AckChapterRewardTipOk&& from) noexcept
    : AckChapterRewardTipOk() {
    *this = ::std::move(from);
  }

  inline AckChapterRewardTipOk& operator=(const AckChapterRewardTipOk& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckChapterRewardTipOk& operator=(AckChapterRewardTipOk&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckChapterRewardTipOk& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckChapterRewardTipOk* internal_default_instance() {
    return reinterpret_cast<const AckChapterRewardTipOk*>(
               &_AckChapterRewardTipOk_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(AckChapterRewardTipOk& a, AckChapterRewardTipOk& b) {
    a.Swap(&b);
  }
  inline void Swap(AckChapterRewardTipOk* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckChapterRewardTipOk* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckChapterRewardTipOk* New() const final {
    return new AckChapterRewardTipOk();
  }

  AckChapterRewardTipOk* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckChapterRewardTipOk>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckChapterRewardTipOk& from);
  void MergeFrom(const AckChapterRewardTipOk& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckChapterRewardTipOk* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckChapterRewardTipOk";
  }
  protected:
  explicit AckChapterRewardTipOk(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModuleIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
    kChapterStatusFieldNumber = 3,
  };
  // bytes module_id = 2;
  void clear_module_id();
  const std::string& module_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_module_id();
  void set_allocated_module_id(std::string* module_id);
  private:
  const std::string& _internal_module_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_id(const std::string& value);
  std::string* _internal_mutable_module_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 chapter_status = 3;
  void clear_chapter_status();
  ::PROTOBUF_NAMESPACE_ID::int32 chapter_status() const;
  void set_chapter_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chapter_status() const;
  void _internal_set_chapter_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckChapterRewardTipOk)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 chapter_status_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCollegeDrama final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCollegeDrama) */ {
 public:
  inline ReqCollegeDrama() : ReqCollegeDrama(nullptr) {}
  ~ReqCollegeDrama() override;
  explicit constexpr ReqCollegeDrama(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCollegeDrama(const ReqCollegeDrama& from);
  ReqCollegeDrama(ReqCollegeDrama&& from) noexcept
    : ReqCollegeDrama() {
    *this = ::std::move(from);
  }

  inline ReqCollegeDrama& operator=(const ReqCollegeDrama& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCollegeDrama& operator=(ReqCollegeDrama&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCollegeDrama& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCollegeDrama* internal_default_instance() {
    return reinterpret_cast<const ReqCollegeDrama*>(
               &_ReqCollegeDrama_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(ReqCollegeDrama& a, ReqCollegeDrama& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCollegeDrama* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCollegeDrama* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCollegeDrama* New() const final {
    return new ReqCollegeDrama();
  }

  ReqCollegeDrama* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCollegeDrama>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCollegeDrama& from);
  void MergeFrom(const ReqCollegeDrama& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCollegeDrama* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCollegeDrama";
  }
  protected:
  explicit ReqCollegeDrama(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ReqCollegeDrama_DramaType DramaType;
  static constexpr DramaType ECD_SEMESTER_START =
    ReqCollegeDrama_DramaType_ECD_SEMESTER_START;
  static constexpr DramaType ECD_INCLASS =
    ReqCollegeDrama_DramaType_ECD_INCLASS;
  static constexpr DramaType ECD_SEMESTER_END =
    ReqCollegeDrama_DramaType_ECD_SEMESTER_END;
  static inline bool DramaType_IsValid(int value) {
    return ReqCollegeDrama_DramaType_IsValid(value);
  }
  static constexpr DramaType DramaType_MIN =
    ReqCollegeDrama_DramaType_DramaType_MIN;
  static constexpr DramaType DramaType_MAX =
    ReqCollegeDrama_DramaType_DramaType_MAX;
  static constexpr int DramaType_ARRAYSIZE =
    ReqCollegeDrama_DramaType_DramaType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DramaType_descriptor() {
    return ReqCollegeDrama_DramaType_descriptor();
  }
  template<typename T>
  static inline const std::string& DramaType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DramaType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DramaType_Name.");
    return ReqCollegeDrama_DramaType_Name(enum_t_value);
  }
  static inline bool DramaType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      DramaType* value) {
    return ReqCollegeDrama_DramaType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kModuleIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kDramaTypeFieldNumber = 2,
  };
  // bytes module_id = 3;
  void clear_module_id();
  const std::string& module_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_module_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_module_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_module_id();
  void set_allocated_module_id(std::string* module_id);
  private:
  const std::string& _internal_module_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_module_id(const std::string& value);
  std::string* _internal_mutable_module_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.ReqCollegeDrama.DramaType drama_type = 2;
  void clear_drama_type();
  ::KWMsg::ReqCollegeDrama_DramaType drama_type() const;
  void set_drama_type(::KWMsg::ReqCollegeDrama_DramaType value);
  private:
  ::KWMsg::ReqCollegeDrama_DramaType _internal_drama_type() const;
  void _internal_set_drama_type(::KWMsg::ReqCollegeDrama_DramaType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCollegeDrama)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr module_id_;
  ::KWMsg::Ident* player_id_;
  int drama_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCollegeDrama final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCollegeDrama) */ {
 public:
  inline AckCollegeDrama() : AckCollegeDrama(nullptr) {}
  ~AckCollegeDrama() override;
  explicit constexpr AckCollegeDrama(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCollegeDrama(const AckCollegeDrama& from);
  AckCollegeDrama(AckCollegeDrama&& from) noexcept
    : AckCollegeDrama() {
    *this = ::std::move(from);
  }

  inline AckCollegeDrama& operator=(const AckCollegeDrama& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCollegeDrama& operator=(AckCollegeDrama&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCollegeDrama& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCollegeDrama* internal_default_instance() {
    return reinterpret_cast<const AckCollegeDrama*>(
               &_AckCollegeDrama_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(AckCollegeDrama& a, AckCollegeDrama& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCollegeDrama* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCollegeDrama* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCollegeDrama* New() const final {
    return new AckCollegeDrama();
  }

  AckCollegeDrama* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCollegeDrama>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCollegeDrama& from);
  void MergeFrom(const AckCollegeDrama& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCollegeDrama* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCollegeDrama";
  }
  protected:
  explicit AckCollegeDrama(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCollegeDrama)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCollegeTaskAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCollegeTaskAction) */ {
 public:
  inline ReqCollegeTaskAction() : ReqCollegeTaskAction(nullptr) {}
  ~ReqCollegeTaskAction() override;
  explicit constexpr ReqCollegeTaskAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCollegeTaskAction(const ReqCollegeTaskAction& from);
  ReqCollegeTaskAction(ReqCollegeTaskAction&& from) noexcept
    : ReqCollegeTaskAction() {
    *this = ::std::move(from);
  }

  inline ReqCollegeTaskAction& operator=(const ReqCollegeTaskAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCollegeTaskAction& operator=(ReqCollegeTaskAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCollegeTaskAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCollegeTaskAction* internal_default_instance() {
    return reinterpret_cast<const ReqCollegeTaskAction*>(
               &_ReqCollegeTaskAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(ReqCollegeTaskAction& a, ReqCollegeTaskAction& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCollegeTaskAction* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCollegeTaskAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCollegeTaskAction* New() const final {
    return new ReqCollegeTaskAction();
  }

  ReqCollegeTaskAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCollegeTaskAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCollegeTaskAction& from);
  void MergeFrom(const ReqCollegeTaskAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCollegeTaskAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCollegeTaskAction";
  }
  protected:
  explicit ReqCollegeTaskAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes task_id = 2;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCollegeTaskAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCollegeTaskAction final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCollegeTaskAction) */ {
 public:
  inline AckCollegeTaskAction() : AckCollegeTaskAction(nullptr) {}
  ~AckCollegeTaskAction() override;
  explicit constexpr AckCollegeTaskAction(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCollegeTaskAction(const AckCollegeTaskAction& from);
  AckCollegeTaskAction(AckCollegeTaskAction&& from) noexcept
    : AckCollegeTaskAction() {
    *this = ::std::move(from);
  }

  inline AckCollegeTaskAction& operator=(const AckCollegeTaskAction& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCollegeTaskAction& operator=(AckCollegeTaskAction&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCollegeTaskAction& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCollegeTaskAction* internal_default_instance() {
    return reinterpret_cast<const AckCollegeTaskAction*>(
               &_AckCollegeTaskAction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(AckCollegeTaskAction& a, AckCollegeTaskAction& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCollegeTaskAction* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCollegeTaskAction* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCollegeTaskAction* New() const final {
    return new AckCollegeTaskAction();
  }

  AckCollegeTaskAction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCollegeTaskAction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCollegeTaskAction& from);
  void MergeFrom(const AckCollegeTaskAction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCollegeTaskAction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCollegeTaskAction";
  }
  protected:
  explicit AckCollegeTaskAction(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCollegeTaskAction)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCollegeTaskCountdown final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCollegeTaskCountdown) */ {
 public:
  inline ReqCollegeTaskCountdown() : ReqCollegeTaskCountdown(nullptr) {}
  ~ReqCollegeTaskCountdown() override;
  explicit constexpr ReqCollegeTaskCountdown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCollegeTaskCountdown(const ReqCollegeTaskCountdown& from);
  ReqCollegeTaskCountdown(ReqCollegeTaskCountdown&& from) noexcept
    : ReqCollegeTaskCountdown() {
    *this = ::std::move(from);
  }

  inline ReqCollegeTaskCountdown& operator=(const ReqCollegeTaskCountdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCollegeTaskCountdown& operator=(ReqCollegeTaskCountdown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCollegeTaskCountdown& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCollegeTaskCountdown* internal_default_instance() {
    return reinterpret_cast<const ReqCollegeTaskCountdown*>(
               &_ReqCollegeTaskCountdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(ReqCollegeTaskCountdown& a, ReqCollegeTaskCountdown& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCollegeTaskCountdown* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCollegeTaskCountdown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCollegeTaskCountdown* New() const final {
    return new ReqCollegeTaskCountdown();
  }

  ReqCollegeTaskCountdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCollegeTaskCountdown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCollegeTaskCountdown& from);
  void MergeFrom(const ReqCollegeTaskCountdown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCollegeTaskCountdown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCollegeTaskCountdown";
  }
  protected:
  explicit ReqCollegeTaskCountdown(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTaskIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes task_id = 2;
  void clear_task_id();
  const std::string& task_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_task_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_task_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_task_id();
  void set_allocated_task_id(std::string* task_id);
  private:
  const std::string& _internal_task_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_task_id(const std::string& value);
  std::string* _internal_mutable_task_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCollegeTaskCountdown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr task_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCollegeTaskCountdown final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCollegeTaskCountdown) */ {
 public:
  inline AckCollegeTaskCountdown() : AckCollegeTaskCountdown(nullptr) {}
  ~AckCollegeTaskCountdown() override;
  explicit constexpr AckCollegeTaskCountdown(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCollegeTaskCountdown(const AckCollegeTaskCountdown& from);
  AckCollegeTaskCountdown(AckCollegeTaskCountdown&& from) noexcept
    : AckCollegeTaskCountdown() {
    *this = ::std::move(from);
  }

  inline AckCollegeTaskCountdown& operator=(const AckCollegeTaskCountdown& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCollegeTaskCountdown& operator=(AckCollegeTaskCountdown&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCollegeTaskCountdown& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCollegeTaskCountdown* internal_default_instance() {
    return reinterpret_cast<const AckCollegeTaskCountdown*>(
               &_AckCollegeTaskCountdown_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(AckCollegeTaskCountdown& a, AckCollegeTaskCountdown& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCollegeTaskCountdown* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCollegeTaskCountdown* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCollegeTaskCountdown* New() const final {
    return new AckCollegeTaskCountdown();
  }

  AckCollegeTaskCountdown* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCollegeTaskCountdown>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCollegeTaskCountdown& from);
  void MergeFrom(const AckCollegeTaskCountdown& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCollegeTaskCountdown* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCollegeTaskCountdown";
  }
  protected:
  explicit AckCollegeTaskCountdown(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCollegeTaskCountdown)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ExamQuestion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ExamQuestion) */ {
 public:
  inline ExamQuestion() : ExamQuestion(nullptr) {}
  ~ExamQuestion() override;
  explicit constexpr ExamQuestion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ExamQuestion(const ExamQuestion& from);
  ExamQuestion(ExamQuestion&& from) noexcept
    : ExamQuestion() {
    *this = ::std::move(from);
  }

  inline ExamQuestion& operator=(const ExamQuestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ExamQuestion& operator=(ExamQuestion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ExamQuestion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ExamQuestion* internal_default_instance() {
    return reinterpret_cast<const ExamQuestion*>(
               &_ExamQuestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(ExamQuestion& a, ExamQuestion& b) {
    a.Swap(&b);
  }
  inline void Swap(ExamQuestion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ExamQuestion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ExamQuestion* New() const final {
    return new ExamQuestion();
  }

  ExamQuestion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ExamQuestion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ExamQuestion& from);
  void MergeFrom(const ExamQuestion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ExamQuestion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ExamQuestion";
  }
  protected:
  explicit ExamQuestion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestionIdFieldNumber = 1,
  };
  // bytes question_id = 1;
  void clear_question_id();
  const std::string& question_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_question_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_question_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_question_id();
  void set_allocated_question_id(std::string* question_id);
  private:
  const std::string& _internal_question_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_question_id(const std::string& value);
  std::string* _internal_mutable_question_id();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ExamQuestion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr question_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCollegeStartExam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCollegeStartExam) */ {
 public:
  inline ReqCollegeStartExam() : ReqCollegeStartExam(nullptr) {}
  ~ReqCollegeStartExam() override;
  explicit constexpr ReqCollegeStartExam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCollegeStartExam(const ReqCollegeStartExam& from);
  ReqCollegeStartExam(ReqCollegeStartExam&& from) noexcept
    : ReqCollegeStartExam() {
    *this = ::std::move(from);
  }

  inline ReqCollegeStartExam& operator=(const ReqCollegeStartExam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCollegeStartExam& operator=(ReqCollegeStartExam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCollegeStartExam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCollegeStartExam* internal_default_instance() {
    return reinterpret_cast<const ReqCollegeStartExam*>(
               &_ReqCollegeStartExam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(ReqCollegeStartExam& a, ReqCollegeStartExam& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCollegeStartExam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCollegeStartExam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCollegeStartExam* New() const final {
    return new ReqCollegeStartExam();
  }

  ReqCollegeStartExam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCollegeStartExam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCollegeStartExam& from);
  void MergeFrom(const ReqCollegeStartExam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCollegeStartExam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCollegeStartExam";
  }
  protected:
  explicit ReqCollegeStartExam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCollegeStartExam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCollegeStartExam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCollegeStartExam) */ {
 public:
  inline AckCollegeStartExam() : AckCollegeStartExam(nullptr) {}
  ~AckCollegeStartExam() override;
  explicit constexpr AckCollegeStartExam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCollegeStartExam(const AckCollegeStartExam& from);
  AckCollegeStartExam(AckCollegeStartExam&& from) noexcept
    : AckCollegeStartExam() {
    *this = ::std::move(from);
  }

  inline AckCollegeStartExam& operator=(const AckCollegeStartExam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCollegeStartExam& operator=(AckCollegeStartExam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCollegeStartExam& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCollegeStartExam* internal_default_instance() {
    return reinterpret_cast<const AckCollegeStartExam*>(
               &_AckCollegeStartExam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(AckCollegeStartExam& a, AckCollegeStartExam& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCollegeStartExam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCollegeStartExam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCollegeStartExam* New() const final {
    return new AckCollegeStartExam();
  }

  AckCollegeStartExam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCollegeStartExam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCollegeStartExam& from);
  void MergeFrom(const AckCollegeStartExam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCollegeStartExam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCollegeStartExam";
  }
  protected:
  explicit AckCollegeStartExam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestionIdListFieldNumber = 3,
    kEventCodeFieldNumber = 1,
    kExamTypeFieldNumber = 2,
  };
  // repeated .KWMsg.ExamQuestion question_id_list = 3;
  int question_id_list_size() const;
  private:
  int _internal_question_id_list_size() const;
  public:
  void clear_question_id_list();
  ::KWMsg::ExamQuestion* mutable_question_id_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ExamQuestion >*
      mutable_question_id_list();
  private:
  const ::KWMsg::ExamQuestion& _internal_question_id_list(int index) const;
  ::KWMsg::ExamQuestion* _internal_add_question_id_list();
  public:
  const ::KWMsg::ExamQuestion& question_id_list(int index) const;
  ::KWMsg::ExamQuestion* add_question_id_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ExamQuestion >&
      question_id_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 exam_type = 2;
  void clear_exam_type();
  ::PROTOBUF_NAMESPACE_ID::int32 exam_type() const;
  void set_exam_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exam_type() const;
  void _internal_set_exam_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCollegeStartExam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ExamQuestion > question_id_list_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 exam_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCollegeAnswer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCollegeAnswer) */ {
 public:
  inline ReqCollegeAnswer() : ReqCollegeAnswer(nullptr) {}
  ~ReqCollegeAnswer() override;
  explicit constexpr ReqCollegeAnswer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCollegeAnswer(const ReqCollegeAnswer& from);
  ReqCollegeAnswer(ReqCollegeAnswer&& from) noexcept
    : ReqCollegeAnswer() {
    *this = ::std::move(from);
  }

  inline ReqCollegeAnswer& operator=(const ReqCollegeAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCollegeAnswer& operator=(ReqCollegeAnswer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCollegeAnswer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCollegeAnswer* internal_default_instance() {
    return reinterpret_cast<const ReqCollegeAnswer*>(
               &_ReqCollegeAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(ReqCollegeAnswer& a, ReqCollegeAnswer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCollegeAnswer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCollegeAnswer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCollegeAnswer* New() const final {
    return new ReqCollegeAnswer();
  }

  ReqCollegeAnswer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCollegeAnswer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCollegeAnswer& from);
  void MergeFrom(const ReqCollegeAnswer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCollegeAnswer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCollegeAnswer";
  }
  protected:
  explicit ReqCollegeAnswer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestionIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kOptionsFieldNumber = 3,
  };
  // bytes question_id = 2;
  void clear_question_id();
  const std::string& question_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_question_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_question_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_question_id();
  void set_allocated_question_id(std::string* question_id);
  private:
  const std::string& _internal_question_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_question_id(const std::string& value);
  std::string* _internal_mutable_question_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 options = 3;
  void clear_options();
  ::PROTOBUF_NAMESPACE_ID::int32 options() const;
  void set_options(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_options() const;
  void _internal_set_options(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCollegeAnswer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr question_id_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 options_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCollegeAnswer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCollegeAnswer) */ {
 public:
  inline AckCollegeAnswer() : AckCollegeAnswer(nullptr) {}
  ~AckCollegeAnswer() override;
  explicit constexpr AckCollegeAnswer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCollegeAnswer(const AckCollegeAnswer& from);
  AckCollegeAnswer(AckCollegeAnswer&& from) noexcept
    : AckCollegeAnswer() {
    *this = ::std::move(from);
  }

  inline AckCollegeAnswer& operator=(const AckCollegeAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCollegeAnswer& operator=(AckCollegeAnswer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCollegeAnswer& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCollegeAnswer* internal_default_instance() {
    return reinterpret_cast<const AckCollegeAnswer*>(
               &_AckCollegeAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(AckCollegeAnswer& a, AckCollegeAnswer& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCollegeAnswer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCollegeAnswer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCollegeAnswer* New() const final {
    return new AckCollegeAnswer();
  }

  AckCollegeAnswer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCollegeAnswer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCollegeAnswer& from);
  void MergeFrom(const AckCollegeAnswer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCollegeAnswer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCollegeAnswer";
  }
  protected:
  explicit AckCollegeAnswer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestionIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
    kResultFieldNumber = 3,
  };
  // bytes question_id = 2;
  void clear_question_id();
  const std::string& question_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_question_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_question_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_question_id();
  void set_allocated_question_id(std::string* question_id);
  private:
  const std::string& _internal_question_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_question_id(const std::string& value);
  std::string* _internal_mutable_question_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 result = 3;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCollegeAnswer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr question_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class CommonReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.CommonReward) */ {
 public:
  inline CommonReward() : CommonReward(nullptr) {}
  ~CommonReward() override;
  explicit constexpr CommonReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonReward(const CommonReward& from);
  CommonReward(CommonReward&& from) noexcept
    : CommonReward() {
    *this = ::std::move(from);
  }

  inline CommonReward& operator=(const CommonReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonReward& operator=(CommonReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonReward* internal_default_instance() {
    return reinterpret_cast<const CommonReward*>(
               &_CommonReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(CommonReward& a, CommonReward& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonReward* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonReward* New() const final {
    return new CommonReward();
  }

  CommonReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonReward& from);
  void MergeFrom(const CommonReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.CommonReward";
  }
  protected:
  explicit CommonReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardIdFieldNumber = 1,
    kRewardCountFieldNumber = 2,
    kRewardTypeFieldNumber = 3,
  };
  // bytes reward_id = 1;
  void clear_reward_id();
  const std::string& reward_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_reward_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_reward_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_reward_id();
  void set_allocated_reward_id(std::string* reward_id);
  private:
  const std::string& _internal_reward_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_reward_id(const std::string& value);
  std::string* _internal_mutable_reward_id();
  public:

  // int32 reward_count = 2;
  void clear_reward_count();
  ::PROTOBUF_NAMESPACE_ID::int32 reward_count() const;
  void set_reward_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward_count() const;
  void _internal_set_reward_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 reward_type = 3;
  void clear_reward_type();
  ::PROTOBUF_NAMESPACE_ID::int32 reward_type() const;
  void set_reward_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward_type() const;
  void _internal_set_reward_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.CommonReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr reward_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCollegeReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCollegeReward) */ {
 public:
  inline ReqCollegeReward() : ReqCollegeReward(nullptr) {}
  ~ReqCollegeReward() override;
  explicit constexpr ReqCollegeReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCollegeReward(const ReqCollegeReward& from);
  ReqCollegeReward(ReqCollegeReward&& from) noexcept
    : ReqCollegeReward() {
    *this = ::std::move(from);
  }

  inline ReqCollegeReward& operator=(const ReqCollegeReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCollegeReward& operator=(ReqCollegeReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCollegeReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCollegeReward* internal_default_instance() {
    return reinterpret_cast<const ReqCollegeReward*>(
               &_ReqCollegeReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(ReqCollegeReward& a, ReqCollegeReward& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCollegeReward* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCollegeReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCollegeReward* New() const final {
    return new ReqCollegeReward();
  }

  ReqCollegeReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCollegeReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCollegeReward& from);
  void MergeFrom(const ReqCollegeReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCollegeReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCollegeReward";
  }
  protected:
  explicit ReqCollegeReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kRewardTypeFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 reward_type = 2;
  void clear_reward_type();
  ::PROTOBUF_NAMESPACE_ID::int32 reward_type() const;
  void set_reward_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward_type() const;
  void _internal_set_reward_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCollegeReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCollegeReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCollegeReward) */ {
 public:
  inline AckCollegeReward() : AckCollegeReward(nullptr) {}
  ~AckCollegeReward() override;
  explicit constexpr AckCollegeReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCollegeReward(const AckCollegeReward& from);
  AckCollegeReward(AckCollegeReward&& from) noexcept
    : AckCollegeReward() {
    *this = ::std::move(from);
  }

  inline AckCollegeReward& operator=(const AckCollegeReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCollegeReward& operator=(AckCollegeReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCollegeReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCollegeReward* internal_default_instance() {
    return reinterpret_cast<const AckCollegeReward*>(
               &_AckCollegeReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(AckCollegeReward& a, AckCollegeReward& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCollegeReward* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCollegeReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCollegeReward* New() const final {
    return new AckCollegeReward();
  }

  AckCollegeReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCollegeReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCollegeReward& from);
  void MergeFrom(const AckCollegeReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCollegeReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCollegeReward";
  }
  protected:
  explicit AckCollegeReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardInfoFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.CommonReward reward_info = 2;
  int reward_info_size() const;
  private:
  int _internal_reward_info_size() const;
  public:
  void clear_reward_info();
  ::KWMsg::CommonReward* mutable_reward_info(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommonReward >*
      mutable_reward_info();
  private:
  const ::KWMsg::CommonReward& _internal_reward_info(int index) const;
  ::KWMsg::CommonReward* _internal_add_reward_info();
  public:
  const ::KWMsg::CommonReward& reward_info(int index) const;
  ::KWMsg::CommonReward* add_reward_info();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommonReward >&
      reward_info() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCollegeReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommonReward > reward_info_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqTestSetCollegeExamStatus final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqTestSetCollegeExamStatus) */ {
 public:
  inline ReqTestSetCollegeExamStatus() : ReqTestSetCollegeExamStatus(nullptr) {}
  ~ReqTestSetCollegeExamStatus() override;
  explicit constexpr ReqTestSetCollegeExamStatus(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqTestSetCollegeExamStatus(const ReqTestSetCollegeExamStatus& from);
  ReqTestSetCollegeExamStatus(ReqTestSetCollegeExamStatus&& from) noexcept
    : ReqTestSetCollegeExamStatus() {
    *this = ::std::move(from);
  }

  inline ReqTestSetCollegeExamStatus& operator=(const ReqTestSetCollegeExamStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTestSetCollegeExamStatus& operator=(ReqTestSetCollegeExamStatus&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqTestSetCollegeExamStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqTestSetCollegeExamStatus* internal_default_instance() {
    return reinterpret_cast<const ReqTestSetCollegeExamStatus*>(
               &_ReqTestSetCollegeExamStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(ReqTestSetCollegeExamStatus& a, ReqTestSetCollegeExamStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqTestSetCollegeExamStatus* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTestSetCollegeExamStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqTestSetCollegeExamStatus* New() const final {
    return new ReqTestSetCollegeExamStatus();
  }

  ReqTestSetCollegeExamStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqTestSetCollegeExamStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqTestSetCollegeExamStatus& from);
  void MergeFrom(const ReqTestSetCollegeExamStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTestSetCollegeExamStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqTestSetCollegeExamStatus";
  }
  protected:
  explicit ReqTestSetCollegeExamStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kExamTypeFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 exam_type = 2;
  void clear_exam_type();
  ::PROTOBUF_NAMESPACE_ID::int32 exam_type() const;
  void set_exam_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_exam_type() const;
  void _internal_set_exam_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqTestSetCollegeExamStatus)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 exam_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCollegeExamExit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCollegeExamExit) */ {
 public:
  inline ReqCollegeExamExit() : ReqCollegeExamExit(nullptr) {}
  ~ReqCollegeExamExit() override;
  explicit constexpr ReqCollegeExamExit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCollegeExamExit(const ReqCollegeExamExit& from);
  ReqCollegeExamExit(ReqCollegeExamExit&& from) noexcept
    : ReqCollegeExamExit() {
    *this = ::std::move(from);
  }

  inline ReqCollegeExamExit& operator=(const ReqCollegeExamExit& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCollegeExamExit& operator=(ReqCollegeExamExit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCollegeExamExit& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCollegeExamExit* internal_default_instance() {
    return reinterpret_cast<const ReqCollegeExamExit*>(
               &_ReqCollegeExamExit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(ReqCollegeExamExit& a, ReqCollegeExamExit& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCollegeExamExit* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCollegeExamExit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCollegeExamExit* New() const final {
    return new ReqCollegeExamExit();
  }

  ReqCollegeExamExit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCollegeExamExit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCollegeExamExit& from);
  void MergeFrom(const ReqCollegeExamExit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCollegeExamExit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCollegeExamExit";
  }
  protected:
  explicit ReqCollegeExamExit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCollegeExamExit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCollegeExamExit final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCollegeExamExit) */ {
 public:
  inline AckCollegeExamExit() : AckCollegeExamExit(nullptr) {}
  ~AckCollegeExamExit() override;
  explicit constexpr AckCollegeExamExit(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCollegeExamExit(const AckCollegeExamExit& from);
  AckCollegeExamExit(AckCollegeExamExit&& from) noexcept
    : AckCollegeExamExit() {
    *this = ::std::move(from);
  }

  inline AckCollegeExamExit& operator=(const AckCollegeExamExit& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCollegeExamExit& operator=(AckCollegeExamExit&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCollegeExamExit& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCollegeExamExit* internal_default_instance() {
    return reinterpret_cast<const AckCollegeExamExit*>(
               &_AckCollegeExamExit_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(AckCollegeExamExit& a, AckCollegeExamExit& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCollegeExamExit* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCollegeExamExit* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCollegeExamExit* New() const final {
    return new AckCollegeExamExit();
  }

  AckCollegeExamExit* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCollegeExamExit>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCollegeExamExit& from);
  void MergeFrom(const AckCollegeExamExit& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCollegeExamExit* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCollegeExamExit";
  }
  protected:
  explicit AckCollegeExamExit(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCollegeExamExit)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSetItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSetItem) */ {
 public:
  inline ReqSetItem() : ReqSetItem(nullptr) {}
  ~ReqSetItem() override;
  explicit constexpr ReqSetItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSetItem(const ReqSetItem& from);
  ReqSetItem(ReqSetItem&& from) noexcept
    : ReqSetItem() {
    *this = ::std::move(from);
  }

  inline ReqSetItem& operator=(const ReqSetItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSetItem& operator=(ReqSetItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSetItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSetItem* internal_default_instance() {
    return reinterpret_cast<const ReqSetItem*>(
               &_ReqSetItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(ReqSetItem& a, ReqSetItem& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSetItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSetItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSetItem* New() const final {
    return new ReqSetItem();
  }

  ReqSetItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSetItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSetItem& from);
  void MergeFrom(const ReqSetItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSetItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSetItem";
  }
  protected:
  explicit ReqSetItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kItemIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kCountFieldNumber = 3,
  };
  // bytes item_id = 2;
  void clear_item_id();
  const std::string& item_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSetItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqBattlePreparedInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBattlePreparedInfo) */ {
 public:
  inline ReqBattlePreparedInfo() : ReqBattlePreparedInfo(nullptr) {}
  ~ReqBattlePreparedInfo() override;
  explicit constexpr ReqBattlePreparedInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBattlePreparedInfo(const ReqBattlePreparedInfo& from);
  ReqBattlePreparedInfo(ReqBattlePreparedInfo&& from) noexcept
    : ReqBattlePreparedInfo() {
    *this = ::std::move(from);
  }

  inline ReqBattlePreparedInfo& operator=(const ReqBattlePreparedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBattlePreparedInfo& operator=(ReqBattlePreparedInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBattlePreparedInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBattlePreparedInfo* internal_default_instance() {
    return reinterpret_cast<const ReqBattlePreparedInfo*>(
               &_ReqBattlePreparedInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(ReqBattlePreparedInfo& a, ReqBattlePreparedInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBattlePreparedInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBattlePreparedInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBattlePreparedInfo* New() const final {
    return new ReqBattlePreparedInfo();
  }

  ReqBattlePreparedInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBattlePreparedInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBattlePreparedInfo& from);
  void MergeFrom(const ReqBattlePreparedInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBattlePreparedInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBattlePreparedInfo";
  }
  protected:
  explicit ReqBattlePreparedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBattleIdFieldNumber = 2,
    kGamePlayIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kChallengeIdFieldNumber = 4,
    kReplayIdFieldNumber = 5,
  };
  // bytes battle_id = 2;
  void clear_battle_id();
  const std::string& battle_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_battle_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_battle_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_battle_id();
  void set_allocated_battle_id(std::string* battle_id);
  private:
  const std::string& _internal_battle_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_battle_id(const std::string& value);
  std::string* _internal_mutable_battle_id();
  public:

  // bytes game_play_id = 3;
  void clear_game_play_id();
  const std::string& game_play_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_play_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_play_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_game_play_id();
  void set_allocated_game_play_id(std::string* game_play_id);
  private:
  const std::string& _internal_game_play_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_play_id(const std::string& value);
  std::string* _internal_mutable_game_play_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident challenge_id = 4;
  bool has_challenge_id() const;
  private:
  bool _internal_has_challenge_id() const;
  public:
  void clear_challenge_id();
  const ::KWMsg::Ident& challenge_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_challenge_id();
  ::KWMsg::Ident* mutable_challenge_id();
  void set_allocated_challenge_id(::KWMsg::Ident* challenge_id);
  private:
  const ::KWMsg::Ident& _internal_challenge_id() const;
  ::KWMsg::Ident* _internal_mutable_challenge_id();
  public:
  void unsafe_arena_set_allocated_challenge_id(
      ::KWMsg::Ident* challenge_id);
  ::KWMsg::Ident* unsafe_arena_release_challenge_id();

  // .KWMsg.Ident replay_id = 5;
  bool has_replay_id() const;
  private:
  bool _internal_has_replay_id() const;
  public:
  void clear_replay_id();
  const ::KWMsg::Ident& replay_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_replay_id();
  ::KWMsg::Ident* mutable_replay_id();
  void set_allocated_replay_id(::KWMsg::Ident* replay_id);
  private:
  const ::KWMsg::Ident& _internal_replay_id() const;
  ::KWMsg::Ident* _internal_mutable_replay_id();
  public:
  void unsafe_arena_set_allocated_replay_id(
      ::KWMsg::Ident* replay_id);
  ::KWMsg::Ident* unsafe_arena_release_replay_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBattlePreparedInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_play_id_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* challenge_id_;
  ::KWMsg::Ident* replay_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class BattleEntityInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BattleEntityInfo) */ {
 public:
  inline BattleEntityInfo() : BattleEntityInfo(nullptr) {}
  ~BattleEntityInfo() override;
  explicit constexpr BattleEntityInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BattleEntityInfo(const BattleEntityInfo& from);
  BattleEntityInfo(BattleEntityInfo&& from) noexcept
    : BattleEntityInfo() {
    *this = ::std::move(from);
  }

  inline BattleEntityInfo& operator=(const BattleEntityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleEntityInfo& operator=(BattleEntityInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BattleEntityInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BattleEntityInfo* internal_default_instance() {
    return reinterpret_cast<const BattleEntityInfo*>(
               &_BattleEntityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(BattleEntityInfo& a, BattleEntityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleEntityInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleEntityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleEntityInfo* New() const final {
    return new BattleEntityInfo();
  }

  BattleEntityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleEntityInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleEntityInfo& from);
  void MergeFrom(const BattleEntityInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleEntityInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BattleEntityInfo";
  }
  protected:
  explicit BattleEntityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttrsFieldNumber = 3,
    kConfigIdFieldNumber = 1,
    kLevelFieldNumber = 2,
  };
  // repeated int64 attrs = 3;
  int attrs_size() const;
  private:
  int _internal_attrs_size() const;
  public:
  void clear_attrs();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_attrs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_attrs() const;
  void _internal_add_attrs(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_attrs();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 attrs(int index) const;
  void set_attrs(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_attrs(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      attrs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_attrs();

  // bytes config_id = 1;
  void clear_config_id();
  const std::string& config_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_config_id();
  void set_allocated_config_id(std::string* config_id);
  private:
  const std::string& _internal_config_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_id(const std::string& value);
  std::string* _internal_mutable_config_id();
  public:

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BattleEntityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > attrs_;
  mutable std::atomic<int> _attrs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class BattleWitchInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BattleWitchInfo) */ {
 public:
  inline BattleWitchInfo() : BattleWitchInfo(nullptr) {}
  ~BattleWitchInfo() override;
  explicit constexpr BattleWitchInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BattleWitchInfo(const BattleWitchInfo& from);
  BattleWitchInfo(BattleWitchInfo&& from) noexcept
    : BattleWitchInfo() {
    *this = ::std::move(from);
  }

  inline BattleWitchInfo& operator=(const BattleWitchInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline BattleWitchInfo& operator=(BattleWitchInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BattleWitchInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const BattleWitchInfo* internal_default_instance() {
    return reinterpret_cast<const BattleWitchInfo*>(
               &_BattleWitchInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(BattleWitchInfo& a, BattleWitchInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(BattleWitchInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BattleWitchInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BattleWitchInfo* New() const final {
    return new BattleWitchInfo();
  }

  BattleWitchInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BattleWitchInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BattleWitchInfo& from);
  void MergeFrom(const BattleWitchInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BattleWitchInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BattleWitchInfo";
  }
  protected:
  explicit BattleWitchInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAttrsFieldNumber = 3,
    kSkillsFieldNumber = 6,
    kConfigIdFieldNumber = 1,
    kRoleResIdFieldNumber = 5,
    kLevelFieldNumber = 2,
    kStarLevelFieldNumber = 4,
  };
  // repeated int64 attrs = 3;
  int attrs_size() const;
  private:
  int _internal_attrs_size() const;
  public:
  void clear_attrs();
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_attrs(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      _internal_attrs() const;
  void _internal_add_attrs(::PROTOBUF_NAMESPACE_ID::int64 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      _internal_mutable_attrs();
  public:
  ::PROTOBUF_NAMESPACE_ID::int64 attrs(int index) const;
  void set_attrs(int index, ::PROTOBUF_NAMESPACE_ID::int64 value);
  void add_attrs(::PROTOBUF_NAMESPACE_ID::int64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
      attrs() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_attrs();

  // repeated bytes skills = 6;
  int skills_size() const;
  private:
  int _internal_skills_size() const;
  public:
  void clear_skills();
  const std::string& skills(int index) const;
  std::string* mutable_skills(int index);
  void set_skills(int index, const std::string& value);
  void set_skills(int index, std::string&& value);
  void set_skills(int index, const char* value);
  void set_skills(int index, const void* value, size_t size);
  std::string* add_skills();
  void add_skills(const std::string& value);
  void add_skills(std::string&& value);
  void add_skills(const char* value);
  void add_skills(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& skills() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_skills();
  private:
  const std::string& _internal_skills(int index) const;
  std::string* _internal_add_skills();
  public:

  // bytes config_id = 1;
  void clear_config_id();
  const std::string& config_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_config_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_config_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_config_id();
  void set_allocated_config_id(std::string* config_id);
  private:
  const std::string& _internal_config_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_config_id(const std::string& value);
  std::string* _internal_mutable_config_id();
  public:

  // bytes role_res_id = 5;
  void clear_role_res_id();
  const std::string& role_res_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_res_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_res_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_role_res_id();
  void set_allocated_role_res_id(std::string* role_res_id);
  private:
  const std::string& _internal_role_res_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_res_id(const std::string& value);
  std::string* _internal_mutable_role_res_id();
  public:

  // int32 level = 2;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 star_level = 4;
  void clear_star_level();
  ::PROTOBUF_NAMESPACE_ID::int32 star_level() const;
  void set_star_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_star_level() const;
  void _internal_set_star_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.BattleWitchInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 > attrs_;
  mutable std::atomic<int> _attrs_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> skills_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr config_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_res_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 star_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckBattlePreparedInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBattlePreparedInfo) */ {
 public:
  inline AckBattlePreparedInfo() : AckBattlePreparedInfo(nullptr) {}
  ~AckBattlePreparedInfo() override;
  explicit constexpr AckBattlePreparedInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBattlePreparedInfo(const AckBattlePreparedInfo& from);
  AckBattlePreparedInfo(AckBattlePreparedInfo&& from) noexcept
    : AckBattlePreparedInfo() {
    *this = ::std::move(from);
  }

  inline AckBattlePreparedInfo& operator=(const AckBattlePreparedInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBattlePreparedInfo& operator=(AckBattlePreparedInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBattlePreparedInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBattlePreparedInfo* internal_default_instance() {
    return reinterpret_cast<const AckBattlePreparedInfo*>(
               &_AckBattlePreparedInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(AckBattlePreparedInfo& a, AckBattlePreparedInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBattlePreparedInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBattlePreparedInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBattlePreparedInfo* New() const final {
    return new AckBattlePreparedInfo();
  }

  AckBattlePreparedInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBattlePreparedInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBattlePreparedInfo& from);
  void MergeFrom(const AckBattlePreparedInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBattlePreparedInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBattlePreparedInfo";
  }
  protected:
  explicit AckBattlePreparedInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMonstersFieldNumber = 3,
    kNpcsFieldNumber = 4,
    kWitchesFieldNumber = 7,
    kBattleIdFieldNumber = 2,
    kGamePlayIdFieldNumber = 5,
    kEventCodeFieldNumber = 1,
    kBattleTypeFieldNumber = 6,
  };
  // repeated .KWMsg.BattleEntityInfo monsters = 3;
  int monsters_size() const;
  private:
  int _internal_monsters_size() const;
  public:
  void clear_monsters();
  ::KWMsg::BattleEntityInfo* mutable_monsters(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleEntityInfo >*
      mutable_monsters();
  private:
  const ::KWMsg::BattleEntityInfo& _internal_monsters(int index) const;
  ::KWMsg::BattleEntityInfo* _internal_add_monsters();
  public:
  const ::KWMsg::BattleEntityInfo& monsters(int index) const;
  ::KWMsg::BattleEntityInfo* add_monsters();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleEntityInfo >&
      monsters() const;

  // repeated .KWMsg.BattleEntityInfo npcs = 4;
  int npcs_size() const;
  private:
  int _internal_npcs_size() const;
  public:
  void clear_npcs();
  ::KWMsg::BattleEntityInfo* mutable_npcs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleEntityInfo >*
      mutable_npcs();
  private:
  const ::KWMsg::BattleEntityInfo& _internal_npcs(int index) const;
  ::KWMsg::BattleEntityInfo* _internal_add_npcs();
  public:
  const ::KWMsg::BattleEntityInfo& npcs(int index) const;
  ::KWMsg::BattleEntityInfo* add_npcs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleEntityInfo >&
      npcs() const;

  // repeated .KWMsg.BattleWitchInfo witches = 7;
  int witches_size() const;
  private:
  int _internal_witches_size() const;
  public:
  void clear_witches();
  ::KWMsg::BattleWitchInfo* mutable_witches(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleWitchInfo >*
      mutable_witches();
  private:
  const ::KWMsg::BattleWitchInfo& _internal_witches(int index) const;
  ::KWMsg::BattleWitchInfo* _internal_add_witches();
  public:
  const ::KWMsg::BattleWitchInfo& witches(int index) const;
  ::KWMsg::BattleWitchInfo* add_witches();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleWitchInfo >&
      witches() const;

  // bytes battle_id = 2;
  void clear_battle_id();
  const std::string& battle_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_battle_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_battle_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_battle_id();
  void set_allocated_battle_id(std::string* battle_id);
  private:
  const std::string& _internal_battle_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_battle_id(const std::string& value);
  std::string* _internal_mutable_battle_id();
  public:

  // bytes game_play_id = 5;
  void clear_game_play_id();
  const std::string& game_play_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_play_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_play_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_game_play_id();
  void set_allocated_game_play_id(std::string* game_play_id);
  private:
  const std::string& _internal_game_play_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_play_id(const std::string& value);
  std::string* _internal_mutable_game_play_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // .KWMsg.EBattleType battle_type = 6;
  void clear_battle_type();
  ::KWMsg::EBattleType battle_type() const;
  void set_battle_type(::KWMsg::EBattleType value);
  private:
  ::KWMsg::EBattleType _internal_battle_type() const;
  void _internal_set_battle_type(::KWMsg::EBattleType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBattlePreparedInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleEntityInfo > monsters_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleEntityInfo > npcs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleWitchInfo > witches_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr battle_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_play_id_;
  int event_code_;
  int battle_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqBuyPower final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBuyPower) */ {
 public:
  inline ReqBuyPower() : ReqBuyPower(nullptr) {}
  ~ReqBuyPower() override;
  explicit constexpr ReqBuyPower(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBuyPower(const ReqBuyPower& from);
  ReqBuyPower(ReqBuyPower&& from) noexcept
    : ReqBuyPower() {
    *this = ::std::move(from);
  }

  inline ReqBuyPower& operator=(const ReqBuyPower& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBuyPower& operator=(ReqBuyPower&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBuyPower& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBuyPower* internal_default_instance() {
    return reinterpret_cast<const ReqBuyPower*>(
               &_ReqBuyPower_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(ReqBuyPower& a, ReqBuyPower& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBuyPower* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBuyPower* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBuyPower* New() const final {
    return new ReqBuyPower();
  }

  ReqBuyPower* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBuyPower>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBuyPower& from);
  void MergeFrom(const ReqBuyPower& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBuyPower* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBuyPower";
  }
  protected:
  explicit ReqBuyPower(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBuyPower)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckBuyPower final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBuyPower) */ {
 public:
  inline AckBuyPower() : AckBuyPower(nullptr) {}
  ~AckBuyPower() override;
  explicit constexpr AckBuyPower(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBuyPower(const AckBuyPower& from);
  AckBuyPower(AckBuyPower&& from) noexcept
    : AckBuyPower() {
    *this = ::std::move(from);
  }

  inline AckBuyPower& operator=(const AckBuyPower& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBuyPower& operator=(AckBuyPower&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBuyPower& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBuyPower* internal_default_instance() {
    return reinterpret_cast<const AckBuyPower*>(
               &_AckBuyPower_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(AckBuyPower& a, AckBuyPower& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBuyPower* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBuyPower* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBuyPower* New() const final {
    return new AckBuyPower();
  }

  AckBuyPower* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBuyPower>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBuyPower& from);
  void MergeFrom(const AckBuyPower& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBuyPower* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBuyPower";
  }
  protected:
  explicit AckBuyPower(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBuyPower)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqTestSetResource final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqTestSetResource) */ {
 public:
  inline ReqTestSetResource() : ReqTestSetResource(nullptr) {}
  ~ReqTestSetResource() override;
  explicit constexpr ReqTestSetResource(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqTestSetResource(const ReqTestSetResource& from);
  ReqTestSetResource(ReqTestSetResource&& from) noexcept
    : ReqTestSetResource() {
    *this = ::std::move(from);
  }

  inline ReqTestSetResource& operator=(const ReqTestSetResource& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTestSetResource& operator=(ReqTestSetResource&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqTestSetResource& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqTestSetResource* internal_default_instance() {
    return reinterpret_cast<const ReqTestSetResource*>(
               &_ReqTestSetResource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(ReqTestSetResource& a, ReqTestSetResource& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqTestSetResource* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTestSetResource* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqTestSetResource* New() const final {
    return new ReqTestSetResource();
  }

  ReqTestSetResource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqTestSetResource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqTestSetResource& from);
  void MergeFrom(const ReqTestSetResource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTestSetResource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqTestSetResource";
  }
  protected:
  explicit ReqTestSetResource(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResTypeFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kResValueFieldNumber = 3,
  };
  // bytes res_type = 2;
  void clear_res_type();
  const std::string& res_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_res_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_res_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_res_type();
  void set_allocated_res_type(std::string* res_type);
  private:
  const std::string& _internal_res_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_res_type(const std::string& value);
  std::string* _internal_mutable_res_type();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int64 res_value = 3;
  void clear_res_value();
  ::PROTOBUF_NAMESPACE_ID::int64 res_value() const;
  void set_res_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_res_value() const;
  void _internal_set_res_value(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqTestSetResource)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr res_type_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 res_value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqBattleAdjWitchTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBattleAdjWitchTeam) */ {
 public:
  inline ReqBattleAdjWitchTeam() : ReqBattleAdjWitchTeam(nullptr) {}
  ~ReqBattleAdjWitchTeam() override;
  explicit constexpr ReqBattleAdjWitchTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBattleAdjWitchTeam(const ReqBattleAdjWitchTeam& from);
  ReqBattleAdjWitchTeam(ReqBattleAdjWitchTeam&& from) noexcept
    : ReqBattleAdjWitchTeam() {
    *this = ::std::move(from);
  }

  inline ReqBattleAdjWitchTeam& operator=(const ReqBattleAdjWitchTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBattleAdjWitchTeam& operator=(ReqBattleAdjWitchTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBattleAdjWitchTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBattleAdjWitchTeam* internal_default_instance() {
    return reinterpret_cast<const ReqBattleAdjWitchTeam*>(
               &_ReqBattleAdjWitchTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(ReqBattleAdjWitchTeam& a, ReqBattleAdjWitchTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBattleAdjWitchTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBattleAdjWitchTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBattleAdjWitchTeam* New() const final {
    return new ReqBattleAdjWitchTeam();
  }

  ReqBattleAdjWitchTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBattleAdjWitchTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBattleAdjWitchTeam& from);
  void MergeFrom(const ReqBattleAdjWitchTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBattleAdjWitchTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBattleAdjWitchTeam";
  }
  protected:
  explicit ReqBattleAdjWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchTeamIdFieldNumber = 2,
    kWitchIdFieldNumber = 4,
    kPlayerIdFieldNumber = 1,
    kIdxFieldNumber = 3,
  };
  // bytes witch_team_id = 2;
  void clear_witch_team_id();
  const std::string& witch_team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_team_id();
  void set_allocated_witch_team_id(std::string* witch_team_id);
  private:
  const std::string& _internal_witch_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_team_id(const std::string& value);
  std::string* _internal_mutable_witch_team_id();
  public:

  // bytes witch_id = 4;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 idx = 3;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBattleAdjWitchTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_team_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckBattleAdjWitchTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBattleAdjWitchTeam) */ {
 public:
  inline AckBattleAdjWitchTeam() : AckBattleAdjWitchTeam(nullptr) {}
  ~AckBattleAdjWitchTeam() override;
  explicit constexpr AckBattleAdjWitchTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBattleAdjWitchTeam(const AckBattleAdjWitchTeam& from);
  AckBattleAdjWitchTeam(AckBattleAdjWitchTeam&& from) noexcept
    : AckBattleAdjWitchTeam() {
    *this = ::std::move(from);
  }

  inline AckBattleAdjWitchTeam& operator=(const AckBattleAdjWitchTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBattleAdjWitchTeam& operator=(AckBattleAdjWitchTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBattleAdjWitchTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBattleAdjWitchTeam* internal_default_instance() {
    return reinterpret_cast<const AckBattleAdjWitchTeam*>(
               &_AckBattleAdjWitchTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(AckBattleAdjWitchTeam& a, AckBattleAdjWitchTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBattleAdjWitchTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBattleAdjWitchTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBattleAdjWitchTeam* New() const final {
    return new AckBattleAdjWitchTeam();
  }

  AckBattleAdjWitchTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBattleAdjWitchTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBattleAdjWitchTeam& from);
  void MergeFrom(const AckBattleAdjWitchTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBattleAdjWitchTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBattleAdjWitchTeam";
  }
  protected:
  explicit AckBattleAdjWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchTeamIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // bytes witch_team_id = 2;
  void clear_witch_team_id();
  const std::string& witch_team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_team_id();
  void set_allocated_witch_team_id(std::string* witch_team_id);
  private:
  const std::string& _internal_witch_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_team_id(const std::string& value);
  std::string* _internal_mutable_witch_team_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBattleAdjWitchTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_team_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqBattleChangeWitchTeamName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBattleChangeWitchTeamName) */ {
 public:
  inline ReqBattleChangeWitchTeamName() : ReqBattleChangeWitchTeamName(nullptr) {}
  ~ReqBattleChangeWitchTeamName() override;
  explicit constexpr ReqBattleChangeWitchTeamName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBattleChangeWitchTeamName(const ReqBattleChangeWitchTeamName& from);
  ReqBattleChangeWitchTeamName(ReqBattleChangeWitchTeamName&& from) noexcept
    : ReqBattleChangeWitchTeamName() {
    *this = ::std::move(from);
  }

  inline ReqBattleChangeWitchTeamName& operator=(const ReqBattleChangeWitchTeamName& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBattleChangeWitchTeamName& operator=(ReqBattleChangeWitchTeamName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBattleChangeWitchTeamName& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBattleChangeWitchTeamName* internal_default_instance() {
    return reinterpret_cast<const ReqBattleChangeWitchTeamName*>(
               &_ReqBattleChangeWitchTeamName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(ReqBattleChangeWitchTeamName& a, ReqBattleChangeWitchTeamName& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBattleChangeWitchTeamName* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBattleChangeWitchTeamName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBattleChangeWitchTeamName* New() const final {
    return new ReqBattleChangeWitchTeamName();
  }

  ReqBattleChangeWitchTeamName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBattleChangeWitchTeamName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBattleChangeWitchTeamName& from);
  void MergeFrom(const ReqBattleChangeWitchTeamName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBattleChangeWitchTeamName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBattleChangeWitchTeamName";
  }
  protected:
  explicit ReqBattleChangeWitchTeamName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchTeamIdFieldNumber = 2,
    kNameFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // bytes witch_team_id = 2;
  void clear_witch_team_id();
  const std::string& witch_team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_team_id();
  void set_allocated_witch_team_id(std::string* witch_team_id);
  private:
  const std::string& _internal_witch_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_team_id(const std::string& value);
  std::string* _internal_mutable_witch_team_id();
  public:

  // bytes name = 3;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBattleChangeWitchTeamName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_team_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckBattleChangeWitchTeamName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBattleChangeWitchTeamName) */ {
 public:
  inline AckBattleChangeWitchTeamName() : AckBattleChangeWitchTeamName(nullptr) {}
  ~AckBattleChangeWitchTeamName() override;
  explicit constexpr AckBattleChangeWitchTeamName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBattleChangeWitchTeamName(const AckBattleChangeWitchTeamName& from);
  AckBattleChangeWitchTeamName(AckBattleChangeWitchTeamName&& from) noexcept
    : AckBattleChangeWitchTeamName() {
    *this = ::std::move(from);
  }

  inline AckBattleChangeWitchTeamName& operator=(const AckBattleChangeWitchTeamName& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBattleChangeWitchTeamName& operator=(AckBattleChangeWitchTeamName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBattleChangeWitchTeamName& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBattleChangeWitchTeamName* internal_default_instance() {
    return reinterpret_cast<const AckBattleChangeWitchTeamName*>(
               &_AckBattleChangeWitchTeamName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(AckBattleChangeWitchTeamName& a, AckBattleChangeWitchTeamName& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBattleChangeWitchTeamName* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBattleChangeWitchTeamName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBattleChangeWitchTeamName* New() const final {
    return new AckBattleChangeWitchTeamName();
  }

  AckBattleChangeWitchTeamName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBattleChangeWitchTeamName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBattleChangeWitchTeamName& from);
  void MergeFrom(const AckBattleChangeWitchTeamName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBattleChangeWitchTeamName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBattleChangeWitchTeamName";
  }
  protected:
  explicit AckBattleChangeWitchTeamName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchTeamIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // bytes witch_team_id = 2;
  void clear_witch_team_id();
  const std::string& witch_team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_team_id();
  void set_allocated_witch_team_id(std::string* witch_team_id);
  private:
  const std::string& _internal_witch_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_team_id(const std::string& value);
  std::string* _internal_mutable_witch_team_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBattleChangeWitchTeamName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_team_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqBattleResetWitchTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBattleResetWitchTeam) */ {
 public:
  inline ReqBattleResetWitchTeam() : ReqBattleResetWitchTeam(nullptr) {}
  ~ReqBattleResetWitchTeam() override;
  explicit constexpr ReqBattleResetWitchTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBattleResetWitchTeam(const ReqBattleResetWitchTeam& from);
  ReqBattleResetWitchTeam(ReqBattleResetWitchTeam&& from) noexcept
    : ReqBattleResetWitchTeam() {
    *this = ::std::move(from);
  }

  inline ReqBattleResetWitchTeam& operator=(const ReqBattleResetWitchTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBattleResetWitchTeam& operator=(ReqBattleResetWitchTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBattleResetWitchTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBattleResetWitchTeam* internal_default_instance() {
    return reinterpret_cast<const ReqBattleResetWitchTeam*>(
               &_ReqBattleResetWitchTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(ReqBattleResetWitchTeam& a, ReqBattleResetWitchTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBattleResetWitchTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBattleResetWitchTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBattleResetWitchTeam* New() const final {
    return new ReqBattleResetWitchTeam();
  }

  ReqBattleResetWitchTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBattleResetWitchTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBattleResetWitchTeam& from);
  void MergeFrom(const ReqBattleResetWitchTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBattleResetWitchTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBattleResetWitchTeam";
  }
  protected:
  explicit ReqBattleResetWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchTeamIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes witch_team_id = 2;
  void clear_witch_team_id();
  const std::string& witch_team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_team_id();
  void set_allocated_witch_team_id(std::string* witch_team_id);
  private:
  const std::string& _internal_witch_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_team_id(const std::string& value);
  std::string* _internal_mutable_witch_team_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBattleResetWitchTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_team_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckBattleResetWitchTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBattleResetWitchTeam) */ {
 public:
  inline AckBattleResetWitchTeam() : AckBattleResetWitchTeam(nullptr) {}
  ~AckBattleResetWitchTeam() override;
  explicit constexpr AckBattleResetWitchTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBattleResetWitchTeam(const AckBattleResetWitchTeam& from);
  AckBattleResetWitchTeam(AckBattleResetWitchTeam&& from) noexcept
    : AckBattleResetWitchTeam() {
    *this = ::std::move(from);
  }

  inline AckBattleResetWitchTeam& operator=(const AckBattleResetWitchTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBattleResetWitchTeam& operator=(AckBattleResetWitchTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBattleResetWitchTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBattleResetWitchTeam* internal_default_instance() {
    return reinterpret_cast<const AckBattleResetWitchTeam*>(
               &_AckBattleResetWitchTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(AckBattleResetWitchTeam& a, AckBattleResetWitchTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBattleResetWitchTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBattleResetWitchTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBattleResetWitchTeam* New() const final {
    return new AckBattleResetWitchTeam();
  }

  AckBattleResetWitchTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBattleResetWitchTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBattleResetWitchTeam& from);
  void MergeFrom(const AckBattleResetWitchTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBattleResetWitchTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBattleResetWitchTeam";
  }
  protected:
  explicit AckBattleResetWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchTeamIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // bytes witch_team_id = 2;
  void clear_witch_team_id();
  const std::string& witch_team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_team_id();
  void set_allocated_witch_team_id(std::string* witch_team_id);
  private:
  const std::string& _internal_witch_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_team_id(const std::string& value);
  std::string* _internal_mutable_witch_team_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBattleResetWitchTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_team_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqBattleQuickConfigWitchTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBattleQuickConfigWitchTeam) */ {
 public:
  inline ReqBattleQuickConfigWitchTeam() : ReqBattleQuickConfigWitchTeam(nullptr) {}
  ~ReqBattleQuickConfigWitchTeam() override;
  explicit constexpr ReqBattleQuickConfigWitchTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBattleQuickConfigWitchTeam(const ReqBattleQuickConfigWitchTeam& from);
  ReqBattleQuickConfigWitchTeam(ReqBattleQuickConfigWitchTeam&& from) noexcept
    : ReqBattleQuickConfigWitchTeam() {
    *this = ::std::move(from);
  }

  inline ReqBattleQuickConfigWitchTeam& operator=(const ReqBattleQuickConfigWitchTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBattleQuickConfigWitchTeam& operator=(ReqBattleQuickConfigWitchTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBattleQuickConfigWitchTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBattleQuickConfigWitchTeam* internal_default_instance() {
    return reinterpret_cast<const ReqBattleQuickConfigWitchTeam*>(
               &_ReqBattleQuickConfigWitchTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(ReqBattleQuickConfigWitchTeam& a, ReqBattleQuickConfigWitchTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBattleQuickConfigWitchTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBattleQuickConfigWitchTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBattleQuickConfigWitchTeam* New() const final {
    return new ReqBattleQuickConfigWitchTeam();
  }

  ReqBattleQuickConfigWitchTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBattleQuickConfigWitchTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBattleQuickConfigWitchTeam& from);
  void MergeFrom(const ReqBattleQuickConfigWitchTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBattleQuickConfigWitchTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBattleQuickConfigWitchTeam";
  }
  protected:
  explicit ReqBattleQuickConfigWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdListFieldNumber = 3,
    kWitchTeamIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated bytes witch_id_list = 3;
  int witch_id_list_size() const;
  private:
  int _internal_witch_id_list_size() const;
  public:
  void clear_witch_id_list();
  const std::string& witch_id_list(int index) const;
  std::string* mutable_witch_id_list(int index);
  void set_witch_id_list(int index, const std::string& value);
  void set_witch_id_list(int index, std::string&& value);
  void set_witch_id_list(int index, const char* value);
  void set_witch_id_list(int index, const void* value, size_t size);
  std::string* add_witch_id_list();
  void add_witch_id_list(const std::string& value);
  void add_witch_id_list(std::string&& value);
  void add_witch_id_list(const char* value);
  void add_witch_id_list(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& witch_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_witch_id_list();
  private:
  const std::string& _internal_witch_id_list(int index) const;
  std::string* _internal_add_witch_id_list();
  public:

  // bytes witch_team_id = 2;
  void clear_witch_team_id();
  const std::string& witch_team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_team_id();
  void set_allocated_witch_team_id(std::string* witch_team_id);
  private:
  const std::string& _internal_witch_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_team_id(const std::string& value);
  std::string* _internal_mutable_witch_team_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBattleQuickConfigWitchTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> witch_id_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_team_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckBattleQuickConfigWitchTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBattleQuickConfigWitchTeam) */ {
 public:
  inline AckBattleQuickConfigWitchTeam() : AckBattleQuickConfigWitchTeam(nullptr) {}
  ~AckBattleQuickConfigWitchTeam() override;
  explicit constexpr AckBattleQuickConfigWitchTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBattleQuickConfigWitchTeam(const AckBattleQuickConfigWitchTeam& from);
  AckBattleQuickConfigWitchTeam(AckBattleQuickConfigWitchTeam&& from) noexcept
    : AckBattleQuickConfigWitchTeam() {
    *this = ::std::move(from);
  }

  inline AckBattleQuickConfigWitchTeam& operator=(const AckBattleQuickConfigWitchTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBattleQuickConfigWitchTeam& operator=(AckBattleQuickConfigWitchTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBattleQuickConfigWitchTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBattleQuickConfigWitchTeam* internal_default_instance() {
    return reinterpret_cast<const AckBattleQuickConfigWitchTeam*>(
               &_AckBattleQuickConfigWitchTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(AckBattleQuickConfigWitchTeam& a, AckBattleQuickConfigWitchTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBattleQuickConfigWitchTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBattleQuickConfigWitchTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBattleQuickConfigWitchTeam* New() const final {
    return new AckBattleQuickConfigWitchTeam();
  }

  AckBattleQuickConfigWitchTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBattleQuickConfigWitchTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBattleQuickConfigWitchTeam& from);
  void MergeFrom(const AckBattleQuickConfigWitchTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBattleQuickConfigWitchTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBattleQuickConfigWitchTeam";
  }
  protected:
  explicit AckBattleQuickConfigWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdListFieldNumber = 3,
    kWitchTeamIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated bytes witch_id_list = 3;
  int witch_id_list_size() const;
  private:
  int _internal_witch_id_list_size() const;
  public:
  void clear_witch_id_list();
  const std::string& witch_id_list(int index) const;
  std::string* mutable_witch_id_list(int index);
  void set_witch_id_list(int index, const std::string& value);
  void set_witch_id_list(int index, std::string&& value);
  void set_witch_id_list(int index, const char* value);
  void set_witch_id_list(int index, const void* value, size_t size);
  std::string* add_witch_id_list();
  void add_witch_id_list(const std::string& value);
  void add_witch_id_list(std::string&& value);
  void add_witch_id_list(const char* value);
  void add_witch_id_list(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& witch_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_witch_id_list();
  private:
  const std::string& _internal_witch_id_list(int index) const;
  std::string* _internal_add_witch_id_list();
  public:

  // bytes witch_team_id = 2;
  void clear_witch_team_id();
  const std::string& witch_team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_team_id();
  void set_allocated_witch_team_id(std::string* witch_team_id);
  private:
  const std::string& _internal_witch_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_team_id(const std::string& value);
  std::string* _internal_mutable_witch_team_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBattleQuickConfigWitchTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> witch_id_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_team_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqBattleBuyWitchTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBattleBuyWitchTeam) */ {
 public:
  inline ReqBattleBuyWitchTeam() : ReqBattleBuyWitchTeam(nullptr) {}
  ~ReqBattleBuyWitchTeam() override;
  explicit constexpr ReqBattleBuyWitchTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBattleBuyWitchTeam(const ReqBattleBuyWitchTeam& from);
  ReqBattleBuyWitchTeam(ReqBattleBuyWitchTeam&& from) noexcept
    : ReqBattleBuyWitchTeam() {
    *this = ::std::move(from);
  }

  inline ReqBattleBuyWitchTeam& operator=(const ReqBattleBuyWitchTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBattleBuyWitchTeam& operator=(ReqBattleBuyWitchTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBattleBuyWitchTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBattleBuyWitchTeam* internal_default_instance() {
    return reinterpret_cast<const ReqBattleBuyWitchTeam*>(
               &_ReqBattleBuyWitchTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(ReqBattleBuyWitchTeam& a, ReqBattleBuyWitchTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBattleBuyWitchTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBattleBuyWitchTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBattleBuyWitchTeam* New() const final {
    return new ReqBattleBuyWitchTeam();
  }

  ReqBattleBuyWitchTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBattleBuyWitchTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBattleBuyWitchTeam& from);
  void MergeFrom(const ReqBattleBuyWitchTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBattleBuyWitchTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBattleBuyWitchTeam";
  }
  protected:
  explicit ReqBattleBuyWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchTeamIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes witch_team_id = 2;
  void clear_witch_team_id();
  const std::string& witch_team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_team_id();
  void set_allocated_witch_team_id(std::string* witch_team_id);
  private:
  const std::string& _internal_witch_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_team_id(const std::string& value);
  std::string* _internal_mutable_witch_team_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBattleBuyWitchTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_team_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckBattleBuyWitchTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBattleBuyWitchTeam) */ {
 public:
  inline AckBattleBuyWitchTeam() : AckBattleBuyWitchTeam(nullptr) {}
  ~AckBattleBuyWitchTeam() override;
  explicit constexpr AckBattleBuyWitchTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBattleBuyWitchTeam(const AckBattleBuyWitchTeam& from);
  AckBattleBuyWitchTeam(AckBattleBuyWitchTeam&& from) noexcept
    : AckBattleBuyWitchTeam() {
    *this = ::std::move(from);
  }

  inline AckBattleBuyWitchTeam& operator=(const AckBattleBuyWitchTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBattleBuyWitchTeam& operator=(AckBattleBuyWitchTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBattleBuyWitchTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBattleBuyWitchTeam* internal_default_instance() {
    return reinterpret_cast<const AckBattleBuyWitchTeam*>(
               &_AckBattleBuyWitchTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(AckBattleBuyWitchTeam& a, AckBattleBuyWitchTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBattleBuyWitchTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBattleBuyWitchTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBattleBuyWitchTeam* New() const final {
    return new AckBattleBuyWitchTeam();
  }

  AckBattleBuyWitchTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBattleBuyWitchTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBattleBuyWitchTeam& from);
  void MergeFrom(const AckBattleBuyWitchTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBattleBuyWitchTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBattleBuyWitchTeam";
  }
  protected:
  explicit AckBattleBuyWitchTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchTeamIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // bytes witch_team_id = 2;
  void clear_witch_team_id();
  const std::string& witch_team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_team_id();
  void set_allocated_witch_team_id(std::string* witch_team_id);
  private:
  const std::string& _internal_witch_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_team_id(const std::string& value);
  std::string* _internal_mutable_witch_team_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBattleBuyWitchTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_team_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqTestRecruitWitch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqTestRecruitWitch) */ {
 public:
  inline ReqTestRecruitWitch() : ReqTestRecruitWitch(nullptr) {}
  ~ReqTestRecruitWitch() override;
  explicit constexpr ReqTestRecruitWitch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqTestRecruitWitch(const ReqTestRecruitWitch& from);
  ReqTestRecruitWitch(ReqTestRecruitWitch&& from) noexcept
    : ReqTestRecruitWitch() {
    *this = ::std::move(from);
  }

  inline ReqTestRecruitWitch& operator=(const ReqTestRecruitWitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTestRecruitWitch& operator=(ReqTestRecruitWitch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqTestRecruitWitch& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqTestRecruitWitch* internal_default_instance() {
    return reinterpret_cast<const ReqTestRecruitWitch*>(
               &_ReqTestRecruitWitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(ReqTestRecruitWitch& a, ReqTestRecruitWitch& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqTestRecruitWitch* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTestRecruitWitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqTestRecruitWitch* New() const final {
    return new ReqTestRecruitWitch();
  }

  ReqTestRecruitWitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqTestRecruitWitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqTestRecruitWitch& from);
  void MergeFrom(const ReqTestRecruitWitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTestRecruitWitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqTestRecruitWitch";
  }
  protected:
  explicit ReqTestRecruitWitch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes witch_id = 2;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqTestRecruitWitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class CommonGetRewardInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.CommonGetRewardInfo) */ {
 public:
  inline CommonGetRewardInfo() : CommonGetRewardInfo(nullptr) {}
  ~CommonGetRewardInfo() override;
  explicit constexpr CommonGetRewardInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonGetRewardInfo(const CommonGetRewardInfo& from);
  CommonGetRewardInfo(CommonGetRewardInfo&& from) noexcept
    : CommonGetRewardInfo() {
    *this = ::std::move(from);
  }

  inline CommonGetRewardInfo& operator=(const CommonGetRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonGetRewardInfo& operator=(CommonGetRewardInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonGetRewardInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommonGetRewardInfo* internal_default_instance() {
    return reinterpret_cast<const CommonGetRewardInfo*>(
               &_CommonGetRewardInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(CommonGetRewardInfo& a, CommonGetRewardInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonGetRewardInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonGetRewardInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommonGetRewardInfo* New() const final {
    return new CommonGetRewardInfo();
  }

  CommonGetRewardInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommonGetRewardInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommonGetRewardInfo& from);
  void MergeFrom(const CommonGetRewardInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonGetRewardInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.CommonGetRewardInfo";
  }
  protected:
  explicit CommonGetRewardInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef CommonGetRewardInfo_EShowType EShowType;
  static constexpr EShowType EST_NONE =
    CommonGetRewardInfo_EShowType_EST_NONE;
  static constexpr EShowType EST_DAILY_ACTIVE_MISSION_GEAR_REWARD =
    CommonGetRewardInfo_EShowType_EST_DAILY_ACTIVE_MISSION_GEAR_REWARD;
  static constexpr EShowType EST_WEEKLY_ACTIVE_MISSION_GEAR_REWARD =
    CommonGetRewardInfo_EShowType_EST_WEEKLY_ACTIVE_MISSION_GEAR_REWARD;
  static constexpr EShowType EST_ACTIVE_MISSION_REWARD =
    CommonGetRewardInfo_EShowType_EST_ACTIVE_MISSION_REWARD;
  static inline bool EShowType_IsValid(int value) {
    return CommonGetRewardInfo_EShowType_IsValid(value);
  }
  static constexpr EShowType EShowType_MIN =
    CommonGetRewardInfo_EShowType_EShowType_MIN;
  static constexpr EShowType EShowType_MAX =
    CommonGetRewardInfo_EShowType_EShowType_MAX;
  static constexpr int EShowType_ARRAYSIZE =
    CommonGetRewardInfo_EShowType_EShowType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  EShowType_descriptor() {
    return CommonGetRewardInfo_EShowType_descriptor();
  }
  template<typename T>
  static inline const std::string& EShowType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, EShowType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function EShowType_Name.");
    return CommonGetRewardInfo_EShowType_Name(enum_t_value);
  }
  static inline bool EShowType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      EShowType* value) {
    return CommonGetRewardInfo_EShowType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 2,
    kShowTypeFieldNumber = 1,
  };
  // repeated .KWMsg.RewardInfo reward_list = 2;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::KWMsg::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_reward_list();
  private:
  const ::KWMsg::RewardInfo& _internal_reward_list(int index) const;
  ::KWMsg::RewardInfo* _internal_add_reward_list();
  public:
  const ::KWMsg::RewardInfo& reward_list(int index) const;
  ::KWMsg::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      reward_list() const;

  // .KWMsg.CommonGetRewardInfo.EShowType show_type = 1;
  void clear_show_type();
  ::KWMsg::CommonGetRewardInfo_EShowType show_type() const;
  void set_show_type(::KWMsg::CommonGetRewardInfo_EShowType value);
  private:
  ::KWMsg::CommonGetRewardInfo_EShowType _internal_show_type() const;
  void _internal_set_show_type(::KWMsg::CommonGetRewardInfo_EShowType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.CommonGetRewardInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > reward_list_;
  int show_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSetSystemFunctionFlag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSetSystemFunctionFlag) */ {
 public:
  inline ReqSetSystemFunctionFlag() : ReqSetSystemFunctionFlag(nullptr) {}
  ~ReqSetSystemFunctionFlag() override;
  explicit constexpr ReqSetSystemFunctionFlag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSetSystemFunctionFlag(const ReqSetSystemFunctionFlag& from);
  ReqSetSystemFunctionFlag(ReqSetSystemFunctionFlag&& from) noexcept
    : ReqSetSystemFunctionFlag() {
    *this = ::std::move(from);
  }

  inline ReqSetSystemFunctionFlag& operator=(const ReqSetSystemFunctionFlag& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSetSystemFunctionFlag& operator=(ReqSetSystemFunctionFlag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSetSystemFunctionFlag& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSetSystemFunctionFlag* internal_default_instance() {
    return reinterpret_cast<const ReqSetSystemFunctionFlag*>(
               &_ReqSetSystemFunctionFlag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(ReqSetSystemFunctionFlag& a, ReqSetSystemFunctionFlag& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSetSystemFunctionFlag* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSetSystemFunctionFlag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSetSystemFunctionFlag* New() const final {
    return new ReqSetSystemFunctionFlag();
  }

  ReqSetSystemFunctionFlag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSetSystemFunctionFlag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSetSystemFunctionFlag& from);
  void MergeFrom(const ReqSetSystemFunctionFlag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSetSystemFunctionFlag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSetSystemFunctionFlag";
  }
  protected:
  explicit ReqSetSystemFunctionFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kFlagFieldNumber = 3,
  };
  // bytes function_id = 2;
  void clear_function_id();
  const std::string& function_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_function_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_function_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_function_id();
  void set_allocated_function_id(std::string* function_id);
  private:
  const std::string& _internal_function_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_function_id(const std::string& value);
  std::string* _internal_mutable_function_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 flag = 3;
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSetSystemFunctionFlag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr function_id_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSetSystemFunctionFlag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSetSystemFunctionFlag) */ {
 public:
  inline AckSetSystemFunctionFlag() : AckSetSystemFunctionFlag(nullptr) {}
  ~AckSetSystemFunctionFlag() override;
  explicit constexpr AckSetSystemFunctionFlag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSetSystemFunctionFlag(const AckSetSystemFunctionFlag& from);
  AckSetSystemFunctionFlag(AckSetSystemFunctionFlag&& from) noexcept
    : AckSetSystemFunctionFlag() {
    *this = ::std::move(from);
  }

  inline AckSetSystemFunctionFlag& operator=(const AckSetSystemFunctionFlag& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSetSystemFunctionFlag& operator=(AckSetSystemFunctionFlag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSetSystemFunctionFlag& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSetSystemFunctionFlag* internal_default_instance() {
    return reinterpret_cast<const AckSetSystemFunctionFlag*>(
               &_AckSetSystemFunctionFlag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(AckSetSystemFunctionFlag& a, AckSetSystemFunctionFlag& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSetSystemFunctionFlag* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSetSystemFunctionFlag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSetSystemFunctionFlag* New() const final {
    return new AckSetSystemFunctionFlag();
  }

  AckSetSystemFunctionFlag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSetSystemFunctionFlag>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSetSystemFunctionFlag& from);
  void MergeFrom(const AckSetSystemFunctionFlag& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSetSystemFunctionFlag* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSetSystemFunctionFlag";
  }
  protected:
  explicit AckSetSystemFunctionFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSetSystemFunctionFlag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncSystemFunctionUnlock final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncSystemFunctionUnlock) */ {
 public:
  inline SyncSystemFunctionUnlock() : SyncSystemFunctionUnlock(nullptr) {}
  ~SyncSystemFunctionUnlock() override;
  explicit constexpr SyncSystemFunctionUnlock(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncSystemFunctionUnlock(const SyncSystemFunctionUnlock& from);
  SyncSystemFunctionUnlock(SyncSystemFunctionUnlock&& from) noexcept
    : SyncSystemFunctionUnlock() {
    *this = ::std::move(from);
  }

  inline SyncSystemFunctionUnlock& operator=(const SyncSystemFunctionUnlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncSystemFunctionUnlock& operator=(SyncSystemFunctionUnlock&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncSystemFunctionUnlock& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncSystemFunctionUnlock* internal_default_instance() {
    return reinterpret_cast<const SyncSystemFunctionUnlock*>(
               &_SyncSystemFunctionUnlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(SyncSystemFunctionUnlock& a, SyncSystemFunctionUnlock& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncSystemFunctionUnlock* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncSystemFunctionUnlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncSystemFunctionUnlock* New() const final {
    return new SyncSystemFunctionUnlock();
  }

  SyncSystemFunctionUnlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncSystemFunctionUnlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncSystemFunctionUnlock& from);
  void MergeFrom(const SyncSystemFunctionUnlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncSystemFunctionUnlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncSystemFunctionUnlock";
  }
  protected:
  explicit SyncSystemFunctionUnlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFunctionListFieldNumber = 1,
  };
  // repeated bytes function_list = 1;
  int function_list_size() const;
  private:
  int _internal_function_list_size() const;
  public:
  void clear_function_list();
  const std::string& function_list(int index) const;
  std::string* mutable_function_list(int index);
  void set_function_list(int index, const std::string& value);
  void set_function_list(int index, std::string&& value);
  void set_function_list(int index, const char* value);
  void set_function_list(int index, const void* value, size_t size);
  std::string* add_function_list();
  void add_function_list(const std::string& value);
  void add_function_list(std::string&& value);
  void add_function_list(const char* value);
  void add_function_list(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& function_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_function_list();
  private:
  const std::string& _internal_function_list(int index) const;
  std::string* _internal_add_function_list();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncSystemFunctionUnlock)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> function_list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerLevelRanking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncPlayerLevelRanking) */ {
 public:
  inline SyncPlayerLevelRanking() : SyncPlayerLevelRanking(nullptr) {}
  ~SyncPlayerLevelRanking() override;
  explicit constexpr SyncPlayerLevelRanking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayerLevelRanking(const SyncPlayerLevelRanking& from);
  SyncPlayerLevelRanking(SyncPlayerLevelRanking&& from) noexcept
    : SyncPlayerLevelRanking() {
    *this = ::std::move(from);
  }

  inline SyncPlayerLevelRanking& operator=(const SyncPlayerLevelRanking& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerLevelRanking& operator=(SyncPlayerLevelRanking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayerLevelRanking& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayerLevelRanking* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerLevelRanking*>(
               &_SyncPlayerLevelRanking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(SyncPlayerLevelRanking& a, SyncPlayerLevelRanking& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerLevelRanking* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayerLevelRanking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerLevelRanking* New() const final {
    return new SyncPlayerLevelRanking();
  }

  SyncPlayerLevelRanking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerLevelRanking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerLevelRanking& from);
  void MergeFrom(const SyncPlayerLevelRanking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerLevelRanking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncPlayerLevelRanking";
  }
  protected:
  explicit SyncPlayerLevelRanking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kLevelOrScoreFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int64 level_or_score = 2;
  void clear_level_or_score();
  ::PROTOBUF_NAMESPACE_ID::int64 level_or_score() const;
  void set_level_or_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_level_or_score() const;
  void _internal_set_level_or_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncPlayerLevelRanking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 level_or_score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSendGiftForWitch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSendGiftForWitch) */ {
 public:
  inline ReqSendGiftForWitch() : ReqSendGiftForWitch(nullptr) {}
  ~ReqSendGiftForWitch() override;
  explicit constexpr ReqSendGiftForWitch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSendGiftForWitch(const ReqSendGiftForWitch& from);
  ReqSendGiftForWitch(ReqSendGiftForWitch&& from) noexcept
    : ReqSendGiftForWitch() {
    *this = ::std::move(from);
  }

  inline ReqSendGiftForWitch& operator=(const ReqSendGiftForWitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSendGiftForWitch& operator=(ReqSendGiftForWitch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSendGiftForWitch& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSendGiftForWitch* internal_default_instance() {
    return reinterpret_cast<const ReqSendGiftForWitch*>(
               &_ReqSendGiftForWitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(ReqSendGiftForWitch& a, ReqSendGiftForWitch& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSendGiftForWitch* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSendGiftForWitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSendGiftForWitch* New() const final {
    return new ReqSendGiftForWitch();
  }

  ReqSendGiftForWitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSendGiftForWitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSendGiftForWitch& from);
  void MergeFrom(const ReqSendGiftForWitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSendGiftForWitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSendGiftForWitch";
  }
  protected:
  explicit ReqSendGiftForWitch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 2,
    kGiftItemIdFieldNumber = 3,
    kBoxItemIdFieldNumber = 4,
    kPlayerIdFieldNumber = 1,
  };
  // bytes witch_id = 2;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // bytes gift_item_id = 3;
  void clear_gift_item_id();
  const std::string& gift_item_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_gift_item_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_gift_item_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_gift_item_id();
  void set_allocated_gift_item_id(std::string* gift_item_id);
  private:
  const std::string& _internal_gift_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_gift_item_id(const std::string& value);
  std::string* _internal_mutable_gift_item_id();
  public:

  // bytes box_item_id = 4;
  void clear_box_item_id();
  const std::string& box_item_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_box_item_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_box_item_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_box_item_id();
  void set_allocated_box_item_id(std::string* box_item_id);
  private:
  const std::string& _internal_box_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_box_item_id(const std::string& value);
  std::string* _internal_mutable_box_item_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSendGiftForWitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gift_item_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr box_item_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSendGiftForWitch final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSendGiftForWitch) */ {
 public:
  inline AckSendGiftForWitch() : AckSendGiftForWitch(nullptr) {}
  ~AckSendGiftForWitch() override;
  explicit constexpr AckSendGiftForWitch(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSendGiftForWitch(const AckSendGiftForWitch& from);
  AckSendGiftForWitch(AckSendGiftForWitch&& from) noexcept
    : AckSendGiftForWitch() {
    *this = ::std::move(from);
  }

  inline AckSendGiftForWitch& operator=(const AckSendGiftForWitch& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSendGiftForWitch& operator=(AckSendGiftForWitch&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSendGiftForWitch& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSendGiftForWitch* internal_default_instance() {
    return reinterpret_cast<const AckSendGiftForWitch*>(
               &_AckSendGiftForWitch_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(AckSendGiftForWitch& a, AckSendGiftForWitch& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSendGiftForWitch* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSendGiftForWitch* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSendGiftForWitch* New() const final {
    return new AckSendGiftForWitch();
  }

  AckSendGiftForWitch* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSendGiftForWitch>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSendGiftForWitch& from);
  void MergeFrom(const AckSendGiftForWitch& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSendGiftForWitch* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSendGiftForWitch";
  }
  protected:
  explicit AckSendGiftForWitch(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSendGiftForWitch)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqUseMagicalMedicine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUseMagicalMedicine) */ {
 public:
  inline ReqUseMagicalMedicine() : ReqUseMagicalMedicine(nullptr) {}
  ~ReqUseMagicalMedicine() override;
  explicit constexpr ReqUseMagicalMedicine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUseMagicalMedicine(const ReqUseMagicalMedicine& from);
  ReqUseMagicalMedicine(ReqUseMagicalMedicine&& from) noexcept
    : ReqUseMagicalMedicine() {
    *this = ::std::move(from);
  }

  inline ReqUseMagicalMedicine& operator=(const ReqUseMagicalMedicine& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUseMagicalMedicine& operator=(ReqUseMagicalMedicine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUseMagicalMedicine& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUseMagicalMedicine* internal_default_instance() {
    return reinterpret_cast<const ReqUseMagicalMedicine*>(
               &_ReqUseMagicalMedicine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(ReqUseMagicalMedicine& a, ReqUseMagicalMedicine& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUseMagicalMedicine* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUseMagicalMedicine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUseMagicalMedicine* New() const final {
    return new ReqUseMagicalMedicine();
  }

  ReqUseMagicalMedicine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUseMagicalMedicine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUseMagicalMedicine& from);
  void MergeFrom(const ReqUseMagicalMedicine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUseMagicalMedicine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUseMagicalMedicine";
  }
  protected:
  explicit ReqUseMagicalMedicine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 2,
    kItemIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kUseCountFieldNumber = 4,
  };
  // bytes witch_id = 2;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // bytes item_id = 3;
  void clear_item_id();
  const std::string& item_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_item_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_item_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_item_id();
  void set_allocated_item_id(std::string* item_id);
  private:
  const std::string& _internal_item_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_item_id(const std::string& value);
  std::string* _internal_mutable_item_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 use_count = 4;
  void clear_use_count();
  ::PROTOBUF_NAMESPACE_ID::int32 use_count() const;
  void set_use_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_use_count() const;
  void _internal_set_use_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUseMagicalMedicine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr item_id_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 use_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckUseMagicalMedicine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckUseMagicalMedicine) */ {
 public:
  inline AckUseMagicalMedicine() : AckUseMagicalMedicine(nullptr) {}
  ~AckUseMagicalMedicine() override;
  explicit constexpr AckUseMagicalMedicine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckUseMagicalMedicine(const AckUseMagicalMedicine& from);
  AckUseMagicalMedicine(AckUseMagicalMedicine&& from) noexcept
    : AckUseMagicalMedicine() {
    *this = ::std::move(from);
  }

  inline AckUseMagicalMedicine& operator=(const AckUseMagicalMedicine& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckUseMagicalMedicine& operator=(AckUseMagicalMedicine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckUseMagicalMedicine& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckUseMagicalMedicine* internal_default_instance() {
    return reinterpret_cast<const AckUseMagicalMedicine*>(
               &_AckUseMagicalMedicine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(AckUseMagicalMedicine& a, AckUseMagicalMedicine& b) {
    a.Swap(&b);
  }
  inline void Swap(AckUseMagicalMedicine* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckUseMagicalMedicine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckUseMagicalMedicine* New() const final {
    return new AckUseMagicalMedicine();
  }

  AckUseMagicalMedicine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckUseMagicalMedicine>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckUseMagicalMedicine& from);
  void MergeFrom(const AckUseMagicalMedicine& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckUseMagicalMedicine* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckUseMagicalMedicine";
  }
  protected:
  explicit AckUseMagicalMedicine(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckUseMagicalMedicine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqUnlockWitchSkin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUnlockWitchSkin) */ {
 public:
  inline ReqUnlockWitchSkin() : ReqUnlockWitchSkin(nullptr) {}
  ~ReqUnlockWitchSkin() override;
  explicit constexpr ReqUnlockWitchSkin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUnlockWitchSkin(const ReqUnlockWitchSkin& from);
  ReqUnlockWitchSkin(ReqUnlockWitchSkin&& from) noexcept
    : ReqUnlockWitchSkin() {
    *this = ::std::move(from);
  }

  inline ReqUnlockWitchSkin& operator=(const ReqUnlockWitchSkin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUnlockWitchSkin& operator=(ReqUnlockWitchSkin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUnlockWitchSkin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUnlockWitchSkin* internal_default_instance() {
    return reinterpret_cast<const ReqUnlockWitchSkin*>(
               &_ReqUnlockWitchSkin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(ReqUnlockWitchSkin& a, ReqUnlockWitchSkin& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUnlockWitchSkin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUnlockWitchSkin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUnlockWitchSkin* New() const final {
    return new ReqUnlockWitchSkin();
  }

  ReqUnlockWitchSkin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUnlockWitchSkin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUnlockWitchSkin& from);
  void MergeFrom(const ReqUnlockWitchSkin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUnlockWitchSkin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUnlockWitchSkin";
  }
  protected:
  explicit ReqUnlockWitchSkin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 2,
    kWitchSkinIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // bytes witch_id = 2;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // bytes witch_skin_id = 3;
  void clear_witch_skin_id();
  const std::string& witch_skin_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_skin_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_skin_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_skin_id();
  void set_allocated_witch_skin_id(std::string* witch_skin_id);
  private:
  const std::string& _internal_witch_skin_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_skin_id(const std::string& value);
  std::string* _internal_mutable_witch_skin_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUnlockWitchSkin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_skin_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckUnlockWitchSkin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckUnlockWitchSkin) */ {
 public:
  inline AckUnlockWitchSkin() : AckUnlockWitchSkin(nullptr) {}
  ~AckUnlockWitchSkin() override;
  explicit constexpr AckUnlockWitchSkin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckUnlockWitchSkin(const AckUnlockWitchSkin& from);
  AckUnlockWitchSkin(AckUnlockWitchSkin&& from) noexcept
    : AckUnlockWitchSkin() {
    *this = ::std::move(from);
  }

  inline AckUnlockWitchSkin& operator=(const AckUnlockWitchSkin& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckUnlockWitchSkin& operator=(AckUnlockWitchSkin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckUnlockWitchSkin& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckUnlockWitchSkin* internal_default_instance() {
    return reinterpret_cast<const AckUnlockWitchSkin*>(
               &_AckUnlockWitchSkin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(AckUnlockWitchSkin& a, AckUnlockWitchSkin& b) {
    a.Swap(&b);
  }
  inline void Swap(AckUnlockWitchSkin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckUnlockWitchSkin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckUnlockWitchSkin* New() const final {
    return new AckUnlockWitchSkin();
  }

  AckUnlockWitchSkin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckUnlockWitchSkin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckUnlockWitchSkin& from);
  void MergeFrom(const AckUnlockWitchSkin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckUnlockWitchSkin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckUnlockWitchSkin";
  }
  protected:
  explicit AckUnlockWitchSkin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckUnlockWitchSkin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqWitchStarLevelUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqWitchStarLevelUp) */ {
 public:
  inline ReqWitchStarLevelUp() : ReqWitchStarLevelUp(nullptr) {}
  ~ReqWitchStarLevelUp() override;
  explicit constexpr ReqWitchStarLevelUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqWitchStarLevelUp(const ReqWitchStarLevelUp& from);
  ReqWitchStarLevelUp(ReqWitchStarLevelUp&& from) noexcept
    : ReqWitchStarLevelUp() {
    *this = ::std::move(from);
  }

  inline ReqWitchStarLevelUp& operator=(const ReqWitchStarLevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqWitchStarLevelUp& operator=(ReqWitchStarLevelUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqWitchStarLevelUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqWitchStarLevelUp* internal_default_instance() {
    return reinterpret_cast<const ReqWitchStarLevelUp*>(
               &_ReqWitchStarLevelUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(ReqWitchStarLevelUp& a, ReqWitchStarLevelUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqWitchStarLevelUp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqWitchStarLevelUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqWitchStarLevelUp* New() const final {
    return new ReqWitchStarLevelUp();
  }

  ReqWitchStarLevelUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqWitchStarLevelUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqWitchStarLevelUp& from);
  void MergeFrom(const ReqWitchStarLevelUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqWitchStarLevelUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqWitchStarLevelUp";
  }
  protected:
  explicit ReqWitchStarLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 2,
    kConsumeItemListFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // bytes witch_id = 2;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // bytes consume_item_list = 3;
  void clear_consume_item_list();
  const std::string& consume_item_list() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_consume_item_list(ArgT0&& arg0, ArgT... args);
  std::string* mutable_consume_item_list();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_consume_item_list();
  void set_allocated_consume_item_list(std::string* consume_item_list);
  private:
  const std::string& _internal_consume_item_list() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_consume_item_list(const std::string& value);
  std::string* _internal_mutable_consume_item_list();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqWitchStarLevelUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr consume_item_list_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckWitchStarLevelUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckWitchStarLevelUp) */ {
 public:
  inline AckWitchStarLevelUp() : AckWitchStarLevelUp(nullptr) {}
  ~AckWitchStarLevelUp() override;
  explicit constexpr AckWitchStarLevelUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckWitchStarLevelUp(const AckWitchStarLevelUp& from);
  AckWitchStarLevelUp(AckWitchStarLevelUp&& from) noexcept
    : AckWitchStarLevelUp() {
    *this = ::std::move(from);
  }

  inline AckWitchStarLevelUp& operator=(const AckWitchStarLevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckWitchStarLevelUp& operator=(AckWitchStarLevelUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckWitchStarLevelUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckWitchStarLevelUp* internal_default_instance() {
    return reinterpret_cast<const AckWitchStarLevelUp*>(
               &_AckWitchStarLevelUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(AckWitchStarLevelUp& a, AckWitchStarLevelUp& b) {
    a.Swap(&b);
  }
  inline void Swap(AckWitchStarLevelUp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckWitchStarLevelUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckWitchStarLevelUp* New() const final {
    return new AckWitchStarLevelUp();
  }

  AckWitchStarLevelUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckWitchStarLevelUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckWitchStarLevelUp& from);
  void MergeFrom(const AckWitchStarLevelUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckWitchStarLevelUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckWitchStarLevelUp";
  }
  protected:
  explicit AckWitchStarLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckWitchStarLevelUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqWitchKnowledgeLevelUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqWitchKnowledgeLevelUp) */ {
 public:
  inline ReqWitchKnowledgeLevelUp() : ReqWitchKnowledgeLevelUp(nullptr) {}
  ~ReqWitchKnowledgeLevelUp() override;
  explicit constexpr ReqWitchKnowledgeLevelUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqWitchKnowledgeLevelUp(const ReqWitchKnowledgeLevelUp& from);
  ReqWitchKnowledgeLevelUp(ReqWitchKnowledgeLevelUp&& from) noexcept
    : ReqWitchKnowledgeLevelUp() {
    *this = ::std::move(from);
  }

  inline ReqWitchKnowledgeLevelUp& operator=(const ReqWitchKnowledgeLevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqWitchKnowledgeLevelUp& operator=(ReqWitchKnowledgeLevelUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqWitchKnowledgeLevelUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqWitchKnowledgeLevelUp* internal_default_instance() {
    return reinterpret_cast<const ReqWitchKnowledgeLevelUp*>(
               &_ReqWitchKnowledgeLevelUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(ReqWitchKnowledgeLevelUp& a, ReqWitchKnowledgeLevelUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqWitchKnowledgeLevelUp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqWitchKnowledgeLevelUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqWitchKnowledgeLevelUp* New() const final {
    return new ReqWitchKnowledgeLevelUp();
  }

  ReqWitchKnowledgeLevelUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqWitchKnowledgeLevelUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqWitchKnowledgeLevelUp& from);
  void MergeFrom(const ReqWitchKnowledgeLevelUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqWitchKnowledgeLevelUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqWitchKnowledgeLevelUp";
  }
  protected:
  explicit ReqWitchKnowledgeLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kOptTypeFieldNumber = 3,
  };
  // bytes witch_id = 2;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.EWitchKnowledgeOptType opt_type = 3;
  void clear_opt_type();
  ::KWMsg::EWitchKnowledgeOptType opt_type() const;
  void set_opt_type(::KWMsg::EWitchKnowledgeOptType value);
  private:
  ::KWMsg::EWitchKnowledgeOptType _internal_opt_type() const;
  void _internal_set_opt_type(::KWMsg::EWitchKnowledgeOptType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqWitchKnowledgeLevelUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::KWMsg::Ident* player_id_;
  int opt_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckWitchKnowledgeLevelUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckWitchKnowledgeLevelUp) */ {
 public:
  inline AckWitchKnowledgeLevelUp() : AckWitchKnowledgeLevelUp(nullptr) {}
  ~AckWitchKnowledgeLevelUp() override;
  explicit constexpr AckWitchKnowledgeLevelUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckWitchKnowledgeLevelUp(const AckWitchKnowledgeLevelUp& from);
  AckWitchKnowledgeLevelUp(AckWitchKnowledgeLevelUp&& from) noexcept
    : AckWitchKnowledgeLevelUp() {
    *this = ::std::move(from);
  }

  inline AckWitchKnowledgeLevelUp& operator=(const AckWitchKnowledgeLevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckWitchKnowledgeLevelUp& operator=(AckWitchKnowledgeLevelUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckWitchKnowledgeLevelUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckWitchKnowledgeLevelUp* internal_default_instance() {
    return reinterpret_cast<const AckWitchKnowledgeLevelUp*>(
               &_AckWitchKnowledgeLevelUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(AckWitchKnowledgeLevelUp& a, AckWitchKnowledgeLevelUp& b) {
    a.Swap(&b);
  }
  inline void Swap(AckWitchKnowledgeLevelUp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckWitchKnowledgeLevelUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckWitchKnowledgeLevelUp* New() const final {
    return new AckWitchKnowledgeLevelUp();
  }

  AckWitchKnowledgeLevelUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckWitchKnowledgeLevelUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckWitchKnowledgeLevelUp& from);
  void MergeFrom(const AckWitchKnowledgeLevelUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckWitchKnowledgeLevelUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckWitchKnowledgeLevelUp";
  }
  protected:
  explicit AckWitchKnowledgeLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckWitchKnowledgeLevelUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqExpandWitchPneumaBagSize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqExpandWitchPneumaBagSize) */ {
 public:
  inline ReqExpandWitchPneumaBagSize() : ReqExpandWitchPneumaBagSize(nullptr) {}
  ~ReqExpandWitchPneumaBagSize() override;
  explicit constexpr ReqExpandWitchPneumaBagSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqExpandWitchPneumaBagSize(const ReqExpandWitchPneumaBagSize& from);
  ReqExpandWitchPneumaBagSize(ReqExpandWitchPneumaBagSize&& from) noexcept
    : ReqExpandWitchPneumaBagSize() {
    *this = ::std::move(from);
  }

  inline ReqExpandWitchPneumaBagSize& operator=(const ReqExpandWitchPneumaBagSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqExpandWitchPneumaBagSize& operator=(ReqExpandWitchPneumaBagSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqExpandWitchPneumaBagSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqExpandWitchPneumaBagSize* internal_default_instance() {
    return reinterpret_cast<const ReqExpandWitchPneumaBagSize*>(
               &_ReqExpandWitchPneumaBagSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(ReqExpandWitchPneumaBagSize& a, ReqExpandWitchPneumaBagSize& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqExpandWitchPneumaBagSize* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqExpandWitchPneumaBagSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqExpandWitchPneumaBagSize* New() const final {
    return new ReqExpandWitchPneumaBagSize();
  }

  ReqExpandWitchPneumaBagSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqExpandWitchPneumaBagSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqExpandWitchPneumaBagSize& from);
  void MergeFrom(const ReqExpandWitchPneumaBagSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqExpandWitchPneumaBagSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqExpandWitchPneumaBagSize";
  }
  protected:
  explicit ReqExpandWitchPneumaBagSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kExpandCountFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 expand_count = 2;
  void clear_expand_count();
  ::PROTOBUF_NAMESPACE_ID::int32 expand_count() const;
  void set_expand_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_expand_count() const;
  void _internal_set_expand_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqExpandWitchPneumaBagSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 expand_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckExpandWitchPneumaBagSize final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckExpandWitchPneumaBagSize) */ {
 public:
  inline AckExpandWitchPneumaBagSize() : AckExpandWitchPneumaBagSize(nullptr) {}
  ~AckExpandWitchPneumaBagSize() override;
  explicit constexpr AckExpandWitchPneumaBagSize(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckExpandWitchPneumaBagSize(const AckExpandWitchPneumaBagSize& from);
  AckExpandWitchPneumaBagSize(AckExpandWitchPneumaBagSize&& from) noexcept
    : AckExpandWitchPneumaBagSize() {
    *this = ::std::move(from);
  }

  inline AckExpandWitchPneumaBagSize& operator=(const AckExpandWitchPneumaBagSize& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckExpandWitchPneumaBagSize& operator=(AckExpandWitchPneumaBagSize&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckExpandWitchPneumaBagSize& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckExpandWitchPneumaBagSize* internal_default_instance() {
    return reinterpret_cast<const AckExpandWitchPneumaBagSize*>(
               &_AckExpandWitchPneumaBagSize_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(AckExpandWitchPneumaBagSize& a, AckExpandWitchPneumaBagSize& b) {
    a.Swap(&b);
  }
  inline void Swap(AckExpandWitchPneumaBagSize* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckExpandWitchPneumaBagSize* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckExpandWitchPneumaBagSize* New() const final {
    return new AckExpandWitchPneumaBagSize();
  }

  AckExpandWitchPneumaBagSize* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckExpandWitchPneumaBagSize>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckExpandWitchPneumaBagSize& from);
  void MergeFrom(const AckExpandWitchPneumaBagSize& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckExpandWitchPneumaBagSize* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckExpandWitchPneumaBagSize";
  }
  protected:
  explicit AckExpandWitchPneumaBagSize(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckExpandWitchPneumaBagSize)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqWitchPneumaOpt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqWitchPneumaOpt) */ {
 public:
  inline ReqWitchPneumaOpt() : ReqWitchPneumaOpt(nullptr) {}
  ~ReqWitchPneumaOpt() override;
  explicit constexpr ReqWitchPneumaOpt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqWitchPneumaOpt(const ReqWitchPneumaOpt& from);
  ReqWitchPneumaOpt(ReqWitchPneumaOpt&& from) noexcept
    : ReqWitchPneumaOpt() {
    *this = ::std::move(from);
  }

  inline ReqWitchPneumaOpt& operator=(const ReqWitchPneumaOpt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqWitchPneumaOpt& operator=(ReqWitchPneumaOpt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqWitchPneumaOpt& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqWitchPneumaOpt* internal_default_instance() {
    return reinterpret_cast<const ReqWitchPneumaOpt*>(
               &_ReqWitchPneumaOpt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(ReqWitchPneumaOpt& a, ReqWitchPneumaOpt& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqWitchPneumaOpt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqWitchPneumaOpt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqWitchPneumaOpt* New() const final {
    return new ReqWitchPneumaOpt();
  }

  ReqWitchPneumaOpt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqWitchPneumaOpt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqWitchPneumaOpt& from);
  void MergeFrom(const ReqWitchPneumaOpt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqWitchPneumaOpt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqWitchPneumaOpt";
  }
  protected:
  explicit ReqWitchPneumaOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kPneumaGuidFieldNumber = 2,
    kOptTypeFieldNumber = 4,
  };
  // bytes witch_id = 3;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident pneuma_guid = 2;
  bool has_pneuma_guid() const;
  private:
  bool _internal_has_pneuma_guid() const;
  public:
  void clear_pneuma_guid();
  const ::KWMsg::Ident& pneuma_guid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_pneuma_guid();
  ::KWMsg::Ident* mutable_pneuma_guid();
  void set_allocated_pneuma_guid(::KWMsg::Ident* pneuma_guid);
  private:
  const ::KWMsg::Ident& _internal_pneuma_guid() const;
  ::KWMsg::Ident* _internal_mutable_pneuma_guid();
  public:
  void unsafe_arena_set_allocated_pneuma_guid(
      ::KWMsg::Ident* pneuma_guid);
  ::KWMsg::Ident* unsafe_arena_release_pneuma_guid();

  // .KWMsg.EWitchPneumaOptType opt_type = 4;
  void clear_opt_type();
  ::KWMsg::EWitchPneumaOptType opt_type() const;
  void set_opt_type(::KWMsg::EWitchPneumaOptType value);
  private:
  ::KWMsg::EWitchPneumaOptType _internal_opt_type() const;
  void _internal_set_opt_type(::KWMsg::EWitchPneumaOptType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqWitchPneumaOpt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* pneuma_guid_;
  int opt_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckWitchPneumaOpt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckWitchPneumaOpt) */ {
 public:
  inline AckWitchPneumaOpt() : AckWitchPneumaOpt(nullptr) {}
  ~AckWitchPneumaOpt() override;
  explicit constexpr AckWitchPneumaOpt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckWitchPneumaOpt(const AckWitchPneumaOpt& from);
  AckWitchPneumaOpt(AckWitchPneumaOpt&& from) noexcept
    : AckWitchPneumaOpt() {
    *this = ::std::move(from);
  }

  inline AckWitchPneumaOpt& operator=(const AckWitchPneumaOpt& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckWitchPneumaOpt& operator=(AckWitchPneumaOpt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckWitchPneumaOpt& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckWitchPneumaOpt* internal_default_instance() {
    return reinterpret_cast<const AckWitchPneumaOpt*>(
               &_AckWitchPneumaOpt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(AckWitchPneumaOpt& a, AckWitchPneumaOpt& b) {
    a.Swap(&b);
  }
  inline void Swap(AckWitchPneumaOpt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckWitchPneumaOpt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckWitchPneumaOpt* New() const final {
    return new AckWitchPneumaOpt();
  }

  AckWitchPneumaOpt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckWitchPneumaOpt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckWitchPneumaOpt& from);
  void MergeFrom(const AckWitchPneumaOpt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckWitchPneumaOpt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckWitchPneumaOpt";
  }
  protected:
  explicit AckWitchPneumaOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 3,
    kPneumaGuidFieldNumber = 2,
    kEventCodeFieldNumber = 1,
    kOptTypeFieldNumber = 4,
  };
  // bytes witch_id = 3;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // .KWMsg.Ident pneuma_guid = 2;
  bool has_pneuma_guid() const;
  private:
  bool _internal_has_pneuma_guid() const;
  public:
  void clear_pneuma_guid();
  const ::KWMsg::Ident& pneuma_guid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_pneuma_guid();
  ::KWMsg::Ident* mutable_pneuma_guid();
  void set_allocated_pneuma_guid(::KWMsg::Ident* pneuma_guid);
  private:
  const ::KWMsg::Ident& _internal_pneuma_guid() const;
  ::KWMsg::Ident* _internal_mutable_pneuma_guid();
  public:
  void unsafe_arena_set_allocated_pneuma_guid(
      ::KWMsg::Ident* pneuma_guid);
  ::KWMsg::Ident* unsafe_arena_release_pneuma_guid();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // .KWMsg.EWitchPneumaOptType opt_type = 4;
  void clear_opt_type();
  ::KWMsg::EWitchPneumaOptType opt_type() const;
  void set_opt_type(::KWMsg::EWitchPneumaOptType value);
  private:
  ::KWMsg::EWitchPneumaOptType _internal_opt_type() const;
  void _internal_set_opt_type(::KWMsg::EWitchPneumaOptType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckWitchPneumaOpt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::KWMsg::Ident* pneuma_guid_;
  int event_code_;
  int opt_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqWitchPneumaEnhance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqWitchPneumaEnhance) */ {
 public:
  inline ReqWitchPneumaEnhance() : ReqWitchPneumaEnhance(nullptr) {}
  ~ReqWitchPneumaEnhance() override;
  explicit constexpr ReqWitchPneumaEnhance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqWitchPneumaEnhance(const ReqWitchPneumaEnhance& from);
  ReqWitchPneumaEnhance(ReqWitchPneumaEnhance&& from) noexcept
    : ReqWitchPneumaEnhance() {
    *this = ::std::move(from);
  }

  inline ReqWitchPneumaEnhance& operator=(const ReqWitchPneumaEnhance& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqWitchPneumaEnhance& operator=(ReqWitchPneumaEnhance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqWitchPneumaEnhance& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqWitchPneumaEnhance* internal_default_instance() {
    return reinterpret_cast<const ReqWitchPneumaEnhance*>(
               &_ReqWitchPneumaEnhance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(ReqWitchPneumaEnhance& a, ReqWitchPneumaEnhance& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqWitchPneumaEnhance* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqWitchPneumaEnhance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqWitchPneumaEnhance* New() const final {
    return new ReqWitchPneumaEnhance();
  }

  ReqWitchPneumaEnhance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqWitchPneumaEnhance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqWitchPneumaEnhance& from);
  void MergeFrom(const ReqWitchPneumaEnhance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqWitchPneumaEnhance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqWitchPneumaEnhance";
  }
  protected:
  explicit ReqWitchPneumaEnhance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kPneumaGuidFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident pneuma_guid = 2;
  bool has_pneuma_guid() const;
  private:
  bool _internal_has_pneuma_guid() const;
  public:
  void clear_pneuma_guid();
  const ::KWMsg::Ident& pneuma_guid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_pneuma_guid();
  ::KWMsg::Ident* mutable_pneuma_guid();
  void set_allocated_pneuma_guid(::KWMsg::Ident* pneuma_guid);
  private:
  const ::KWMsg::Ident& _internal_pneuma_guid() const;
  ::KWMsg::Ident* _internal_mutable_pneuma_guid();
  public:
  void unsafe_arena_set_allocated_pneuma_guid(
      ::KWMsg::Ident* pneuma_guid);
  ::KWMsg::Ident* unsafe_arena_release_pneuma_guid();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqWitchPneumaEnhance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* pneuma_guid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckWitchPneumaEnhance final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckWitchPneumaEnhance) */ {
 public:
  inline AckWitchPneumaEnhance() : AckWitchPneumaEnhance(nullptr) {}
  ~AckWitchPneumaEnhance() override;
  explicit constexpr AckWitchPneumaEnhance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckWitchPneumaEnhance(const AckWitchPneumaEnhance& from);
  AckWitchPneumaEnhance(AckWitchPneumaEnhance&& from) noexcept
    : AckWitchPneumaEnhance() {
    *this = ::std::move(from);
  }

  inline AckWitchPneumaEnhance& operator=(const AckWitchPneumaEnhance& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckWitchPneumaEnhance& operator=(AckWitchPneumaEnhance&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckWitchPneumaEnhance& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckWitchPneumaEnhance* internal_default_instance() {
    return reinterpret_cast<const AckWitchPneumaEnhance*>(
               &_AckWitchPneumaEnhance_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(AckWitchPneumaEnhance& a, AckWitchPneumaEnhance& b) {
    a.Swap(&b);
  }
  inline void Swap(AckWitchPneumaEnhance* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckWitchPneumaEnhance* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckWitchPneumaEnhance* New() const final {
    return new AckWitchPneumaEnhance();
  }

  AckWitchPneumaEnhance* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckWitchPneumaEnhance>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckWitchPneumaEnhance& from);
  void MergeFrom(const AckWitchPneumaEnhance& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckWitchPneumaEnhance* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckWitchPneumaEnhance";
  }
  protected:
  explicit AckWitchPneumaEnhance(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckWitchPneumaEnhance)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqWitchPneumaDecompose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqWitchPneumaDecompose) */ {
 public:
  inline ReqWitchPneumaDecompose() : ReqWitchPneumaDecompose(nullptr) {}
  ~ReqWitchPneumaDecompose() override;
  explicit constexpr ReqWitchPneumaDecompose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqWitchPneumaDecompose(const ReqWitchPneumaDecompose& from);
  ReqWitchPneumaDecompose(ReqWitchPneumaDecompose&& from) noexcept
    : ReqWitchPneumaDecompose() {
    *this = ::std::move(from);
  }

  inline ReqWitchPneumaDecompose& operator=(const ReqWitchPneumaDecompose& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqWitchPneumaDecompose& operator=(ReqWitchPneumaDecompose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqWitchPneumaDecompose& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqWitchPneumaDecompose* internal_default_instance() {
    return reinterpret_cast<const ReqWitchPneumaDecompose*>(
               &_ReqWitchPneumaDecompose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(ReqWitchPneumaDecompose& a, ReqWitchPneumaDecompose& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqWitchPneumaDecompose* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqWitchPneumaDecompose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqWitchPneumaDecompose* New() const final {
    return new ReqWitchPneumaDecompose();
  }

  ReqWitchPneumaDecompose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqWitchPneumaDecompose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqWitchPneumaDecompose& from);
  void MergeFrom(const ReqWitchPneumaDecompose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqWitchPneumaDecompose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqWitchPneumaDecompose";
  }
  protected:
  explicit ReqWitchPneumaDecompose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPneumaGuidListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.Ident pneuma_guid_list = 2;
  int pneuma_guid_list_size() const;
  private:
  int _internal_pneuma_guid_list_size() const;
  public:
  void clear_pneuma_guid_list();
  ::KWMsg::Ident* mutable_pneuma_guid_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
      mutable_pneuma_guid_list();
  private:
  const ::KWMsg::Ident& _internal_pneuma_guid_list(int index) const;
  ::KWMsg::Ident* _internal_add_pneuma_guid_list();
  public:
  const ::KWMsg::Ident& pneuma_guid_list(int index) const;
  ::KWMsg::Ident* add_pneuma_guid_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
      pneuma_guid_list() const;

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqWitchPneumaDecompose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident > pneuma_guid_list_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckWitchPneumaDecompose final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckWitchPneumaDecompose) */ {
 public:
  inline AckWitchPneumaDecompose() : AckWitchPneumaDecompose(nullptr) {}
  ~AckWitchPneumaDecompose() override;
  explicit constexpr AckWitchPneumaDecompose(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckWitchPneumaDecompose(const AckWitchPneumaDecompose& from);
  AckWitchPneumaDecompose(AckWitchPneumaDecompose&& from) noexcept
    : AckWitchPneumaDecompose() {
    *this = ::std::move(from);
  }

  inline AckWitchPneumaDecompose& operator=(const AckWitchPneumaDecompose& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckWitchPneumaDecompose& operator=(AckWitchPneumaDecompose&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckWitchPneumaDecompose& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckWitchPneumaDecompose* internal_default_instance() {
    return reinterpret_cast<const AckWitchPneumaDecompose*>(
               &_AckWitchPneumaDecompose_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(AckWitchPneumaDecompose& a, AckWitchPneumaDecompose& b) {
    a.Swap(&b);
  }
  inline void Swap(AckWitchPneumaDecompose* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckWitchPneumaDecompose* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckWitchPneumaDecompose* New() const final {
    return new AckWitchPneumaDecompose();
  }

  AckWitchPneumaDecompose* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckWitchPneumaDecompose>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckWitchPneumaDecompose& from);
  void MergeFrom(const AckWitchPneumaDecompose& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckWitchPneumaDecompose* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckWitchPneumaDecompose";
  }
  protected:
  explicit AckWitchPneumaDecompose(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.RewardInfo reward_list = 2;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::KWMsg::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_reward_list();
  private:
  const ::KWMsg::RewardInfo& _internal_reward_list(int index) const;
  ::KWMsg::RewardInfo* _internal_add_reward_list();
  public:
  const ::KWMsg::RewardInfo& reward_list(int index) const;
  ::KWMsg::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      reward_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckWitchPneumaDecompose)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > reward_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqWitchSkillLevelUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqWitchSkillLevelUp) */ {
 public:
  inline ReqWitchSkillLevelUp() : ReqWitchSkillLevelUp(nullptr) {}
  ~ReqWitchSkillLevelUp() override;
  explicit constexpr ReqWitchSkillLevelUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqWitchSkillLevelUp(const ReqWitchSkillLevelUp& from);
  ReqWitchSkillLevelUp(ReqWitchSkillLevelUp&& from) noexcept
    : ReqWitchSkillLevelUp() {
    *this = ::std::move(from);
  }

  inline ReqWitchSkillLevelUp& operator=(const ReqWitchSkillLevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqWitchSkillLevelUp& operator=(ReqWitchSkillLevelUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqWitchSkillLevelUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqWitchSkillLevelUp* internal_default_instance() {
    return reinterpret_cast<const ReqWitchSkillLevelUp*>(
               &_ReqWitchSkillLevelUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(ReqWitchSkillLevelUp& a, ReqWitchSkillLevelUp& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqWitchSkillLevelUp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqWitchSkillLevelUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqWitchSkillLevelUp* New() const final {
    return new ReqWitchSkillLevelUp();
  }

  ReqWitchSkillLevelUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqWitchSkillLevelUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqWitchSkillLevelUp& from);
  void MergeFrom(const ReqWitchSkillLevelUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqWitchSkillLevelUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqWitchSkillLevelUp";
  }
  protected:
  explicit ReqWitchSkillLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kOptTypeFieldNumber = 3,
  };
  // bytes witch_id = 2;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.EWitchSkillOptType opt_type = 3;
  void clear_opt_type();
  ::KWMsg::EWitchSkillOptType opt_type() const;
  void set_opt_type(::KWMsg::EWitchSkillOptType value);
  private:
  ::KWMsg::EWitchSkillOptType _internal_opt_type() const;
  void _internal_set_opt_type(::KWMsg::EWitchSkillOptType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqWitchSkillLevelUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::KWMsg::Ident* player_id_;
  int opt_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckWitchSkillLevelUp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckWitchSkillLevelUp) */ {
 public:
  inline AckWitchSkillLevelUp() : AckWitchSkillLevelUp(nullptr) {}
  ~AckWitchSkillLevelUp() override;
  explicit constexpr AckWitchSkillLevelUp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckWitchSkillLevelUp(const AckWitchSkillLevelUp& from);
  AckWitchSkillLevelUp(AckWitchSkillLevelUp&& from) noexcept
    : AckWitchSkillLevelUp() {
    *this = ::std::move(from);
  }

  inline AckWitchSkillLevelUp& operator=(const AckWitchSkillLevelUp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckWitchSkillLevelUp& operator=(AckWitchSkillLevelUp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckWitchSkillLevelUp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckWitchSkillLevelUp* internal_default_instance() {
    return reinterpret_cast<const AckWitchSkillLevelUp*>(
               &_AckWitchSkillLevelUp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(AckWitchSkillLevelUp& a, AckWitchSkillLevelUp& b) {
    a.Swap(&b);
  }
  inline void Swap(AckWitchSkillLevelUp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckWitchSkillLevelUp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckWitchSkillLevelUp* New() const final {
    return new AckWitchSkillLevelUp();
  }

  AckWitchSkillLevelUp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckWitchSkillLevelUp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckWitchSkillLevelUp& from);
  void MergeFrom(const AckWitchSkillLevelUp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckWitchSkillLevelUp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckWitchSkillLevelUp";
  }
  protected:
  explicit AckWitchSkillLevelUp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckWitchSkillLevelUp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSweepEndlessTower final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSweepEndlessTower) */ {
 public:
  inline ReqSweepEndlessTower() : ReqSweepEndlessTower(nullptr) {}
  ~ReqSweepEndlessTower() override;
  explicit constexpr ReqSweepEndlessTower(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSweepEndlessTower(const ReqSweepEndlessTower& from);
  ReqSweepEndlessTower(ReqSweepEndlessTower&& from) noexcept
    : ReqSweepEndlessTower() {
    *this = ::std::move(from);
  }

  inline ReqSweepEndlessTower& operator=(const ReqSweepEndlessTower& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSweepEndlessTower& operator=(ReqSweepEndlessTower&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSweepEndlessTower& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSweepEndlessTower* internal_default_instance() {
    return reinterpret_cast<const ReqSweepEndlessTower*>(
               &_ReqSweepEndlessTower_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(ReqSweepEndlessTower& a, ReqSweepEndlessTower& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSweepEndlessTower* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSweepEndlessTower* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSweepEndlessTower* New() const final {
    return new ReqSweepEndlessTower();
  }

  ReqSweepEndlessTower* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSweepEndlessTower>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSweepEndlessTower& from);
  void MergeFrom(const ReqSweepEndlessTower& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSweepEndlessTower* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSweepEndlessTower";
  }
  protected:
  explicit ReqSweepEndlessTower(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kSweepCountFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 sweep_count = 2;
  void clear_sweep_count();
  ::PROTOBUF_NAMESPACE_ID::int32 sweep_count() const;
  void set_sweep_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sweep_count() const;
  void _internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSweepEndlessTower)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sweep_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSweepEndlessTower final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSweepEndlessTower) */ {
 public:
  inline AckSweepEndlessTower() : AckSweepEndlessTower(nullptr) {}
  ~AckSweepEndlessTower() override;
  explicit constexpr AckSweepEndlessTower(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSweepEndlessTower(const AckSweepEndlessTower& from);
  AckSweepEndlessTower(AckSweepEndlessTower&& from) noexcept
    : AckSweepEndlessTower() {
    *this = ::std::move(from);
  }

  inline AckSweepEndlessTower& operator=(const AckSweepEndlessTower& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSweepEndlessTower& operator=(AckSweepEndlessTower&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSweepEndlessTower& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSweepEndlessTower* internal_default_instance() {
    return reinterpret_cast<const AckSweepEndlessTower*>(
               &_AckSweepEndlessTower_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(AckSweepEndlessTower& a, AckSweepEndlessTower& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSweepEndlessTower* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSweepEndlessTower* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSweepEndlessTower* New() const final {
    return new AckSweepEndlessTower();
  }

  AckSweepEndlessTower* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSweepEndlessTower>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSweepEndlessTower& from);
  void MergeFrom(const AckSweepEndlessTower& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSweepEndlessTower* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSweepEndlessTower";
  }
  protected:
  explicit AckSweepEndlessTower(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.RewardInfo reward_list = 2;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::KWMsg::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_reward_list();
  private:
  const ::KWMsg::RewardInfo& _internal_reward_list(int index) const;
  ::KWMsg::RewardInfo* _internal_add_reward_list();
  public:
  const ::KWMsg::RewardInfo& reward_list(int index) const;
  ::KWMsg::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      reward_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSweepEndlessTower)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > reward_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqBlackmartCommodityList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBlackmartCommodityList) */ {
 public:
  inline ReqBlackmartCommodityList() : ReqBlackmartCommodityList(nullptr) {}
  ~ReqBlackmartCommodityList() override;
  explicit constexpr ReqBlackmartCommodityList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBlackmartCommodityList(const ReqBlackmartCommodityList& from);
  ReqBlackmartCommodityList(ReqBlackmartCommodityList&& from) noexcept
    : ReqBlackmartCommodityList() {
    *this = ::std::move(from);
  }

  inline ReqBlackmartCommodityList& operator=(const ReqBlackmartCommodityList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBlackmartCommodityList& operator=(ReqBlackmartCommodityList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBlackmartCommodityList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBlackmartCommodityList* internal_default_instance() {
    return reinterpret_cast<const ReqBlackmartCommodityList*>(
               &_ReqBlackmartCommodityList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(ReqBlackmartCommodityList& a, ReqBlackmartCommodityList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBlackmartCommodityList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBlackmartCommodityList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBlackmartCommodityList* New() const final {
    return new ReqBlackmartCommodityList();
  }

  ReqBlackmartCommodityList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBlackmartCommodityList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBlackmartCommodityList& from);
  void MergeFrom(const ReqBlackmartCommodityList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBlackmartCommodityList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBlackmartCommodityList";
  }
  protected:
  explicit ReqBlackmartCommodityList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBlackmartCommodityList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckBlackmartCommodityList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBlackmartCommodityList) */ {
 public:
  inline AckBlackmartCommodityList() : AckBlackmartCommodityList(nullptr) {}
  ~AckBlackmartCommodityList() override;
  explicit constexpr AckBlackmartCommodityList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBlackmartCommodityList(const AckBlackmartCommodityList& from);
  AckBlackmartCommodityList(AckBlackmartCommodityList&& from) noexcept
    : AckBlackmartCommodityList() {
    *this = ::std::move(from);
  }

  inline AckBlackmartCommodityList& operator=(const AckBlackmartCommodityList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBlackmartCommodityList& operator=(AckBlackmartCommodityList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBlackmartCommodityList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBlackmartCommodityList* internal_default_instance() {
    return reinterpret_cast<const AckBlackmartCommodityList*>(
               &_AckBlackmartCommodityList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(AckBlackmartCommodityList& a, AckBlackmartCommodityList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBlackmartCommodityList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBlackmartCommodityList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBlackmartCommodityList* New() const final {
    return new AckBlackmartCommodityList();
  }

  AckBlackmartCommodityList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBlackmartCommodityList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBlackmartCommodityList& from);
  void MergeFrom(const AckBlackmartCommodityList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBlackmartCommodityList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBlackmartCommodityList";
  }
  protected:
  explicit AckBlackmartCommodityList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBlackmartCommodityList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqRefreshBlackmartCommodityList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqRefreshBlackmartCommodityList) */ {
 public:
  inline ReqRefreshBlackmartCommodityList() : ReqRefreshBlackmartCommodityList(nullptr) {}
  ~ReqRefreshBlackmartCommodityList() override;
  explicit constexpr ReqRefreshBlackmartCommodityList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqRefreshBlackmartCommodityList(const ReqRefreshBlackmartCommodityList& from);
  ReqRefreshBlackmartCommodityList(ReqRefreshBlackmartCommodityList&& from) noexcept
    : ReqRefreshBlackmartCommodityList() {
    *this = ::std::move(from);
  }

  inline ReqRefreshBlackmartCommodityList& operator=(const ReqRefreshBlackmartCommodityList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqRefreshBlackmartCommodityList& operator=(ReqRefreshBlackmartCommodityList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqRefreshBlackmartCommodityList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqRefreshBlackmartCommodityList* internal_default_instance() {
    return reinterpret_cast<const ReqRefreshBlackmartCommodityList*>(
               &_ReqRefreshBlackmartCommodityList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(ReqRefreshBlackmartCommodityList& a, ReqRefreshBlackmartCommodityList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqRefreshBlackmartCommodityList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqRefreshBlackmartCommodityList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqRefreshBlackmartCommodityList* New() const final {
    return new ReqRefreshBlackmartCommodityList();
  }

  ReqRefreshBlackmartCommodityList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqRefreshBlackmartCommodityList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqRefreshBlackmartCommodityList& from);
  void MergeFrom(const ReqRefreshBlackmartCommodityList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRefreshBlackmartCommodityList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqRefreshBlackmartCommodityList";
  }
  protected:
  explicit ReqRefreshBlackmartCommodityList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqRefreshBlackmartCommodityList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckRefreshBlackmartCommodityList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckRefreshBlackmartCommodityList) */ {
 public:
  inline AckRefreshBlackmartCommodityList() : AckRefreshBlackmartCommodityList(nullptr) {}
  ~AckRefreshBlackmartCommodityList() override;
  explicit constexpr AckRefreshBlackmartCommodityList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckRefreshBlackmartCommodityList(const AckRefreshBlackmartCommodityList& from);
  AckRefreshBlackmartCommodityList(AckRefreshBlackmartCommodityList&& from) noexcept
    : AckRefreshBlackmartCommodityList() {
    *this = ::std::move(from);
  }

  inline AckRefreshBlackmartCommodityList& operator=(const AckRefreshBlackmartCommodityList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckRefreshBlackmartCommodityList& operator=(AckRefreshBlackmartCommodityList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckRefreshBlackmartCommodityList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckRefreshBlackmartCommodityList* internal_default_instance() {
    return reinterpret_cast<const AckRefreshBlackmartCommodityList*>(
               &_AckRefreshBlackmartCommodityList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(AckRefreshBlackmartCommodityList& a, AckRefreshBlackmartCommodityList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckRefreshBlackmartCommodityList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckRefreshBlackmartCommodityList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckRefreshBlackmartCommodityList* New() const final {
    return new AckRefreshBlackmartCommodityList();
  }

  AckRefreshBlackmartCommodityList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckRefreshBlackmartCommodityList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckRefreshBlackmartCommodityList& from);
  void MergeFrom(const AckRefreshBlackmartCommodityList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckRefreshBlackmartCommodityList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckRefreshBlackmartCommodityList";
  }
  protected:
  explicit AckRefreshBlackmartCommodityList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckRefreshBlackmartCommodityList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqBuyBlackmartCommodity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBuyBlackmartCommodity) */ {
 public:
  inline ReqBuyBlackmartCommodity() : ReqBuyBlackmartCommodity(nullptr) {}
  ~ReqBuyBlackmartCommodity() override;
  explicit constexpr ReqBuyBlackmartCommodity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBuyBlackmartCommodity(const ReqBuyBlackmartCommodity& from);
  ReqBuyBlackmartCommodity(ReqBuyBlackmartCommodity&& from) noexcept
    : ReqBuyBlackmartCommodity() {
    *this = ::std::move(from);
  }

  inline ReqBuyBlackmartCommodity& operator=(const ReqBuyBlackmartCommodity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBuyBlackmartCommodity& operator=(ReqBuyBlackmartCommodity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBuyBlackmartCommodity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBuyBlackmartCommodity* internal_default_instance() {
    return reinterpret_cast<const ReqBuyBlackmartCommodity*>(
               &_ReqBuyBlackmartCommodity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(ReqBuyBlackmartCommodity& a, ReqBuyBlackmartCommodity& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBuyBlackmartCommodity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBuyBlackmartCommodity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBuyBlackmartCommodity* New() const final {
    return new ReqBuyBlackmartCommodity();
  }

  ReqBuyBlackmartCommodity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBuyBlackmartCommodity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBuyBlackmartCommodity& from);
  void MergeFrom(const ReqBuyBlackmartCommodity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBuyBlackmartCommodity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBuyBlackmartCommodity";
  }
  protected:
  explicit ReqBuyBlackmartCommodity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommodityIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kCountFieldNumber = 3,
  };
  // bytes commodity_id = 2;
  void clear_commodity_id();
  const std::string& commodity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commodity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commodity_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_commodity_id();
  void set_allocated_commodity_id(std::string* commodity_id);
  private:
  const std::string& _internal_commodity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commodity_id(const std::string& value);
  std::string* _internal_mutable_commodity_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 count = 3;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBuyBlackmartCommodity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commodity_id_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckBuyBlackmartCommodity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBuyBlackmartCommodity) */ {
 public:
  inline AckBuyBlackmartCommodity() : AckBuyBlackmartCommodity(nullptr) {}
  ~AckBuyBlackmartCommodity() override;
  explicit constexpr AckBuyBlackmartCommodity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBuyBlackmartCommodity(const AckBuyBlackmartCommodity& from);
  AckBuyBlackmartCommodity(AckBuyBlackmartCommodity&& from) noexcept
    : AckBuyBlackmartCommodity() {
    *this = ::std::move(from);
  }

  inline AckBuyBlackmartCommodity& operator=(const AckBuyBlackmartCommodity& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBuyBlackmartCommodity& operator=(AckBuyBlackmartCommodity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBuyBlackmartCommodity& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBuyBlackmartCommodity* internal_default_instance() {
    return reinterpret_cast<const AckBuyBlackmartCommodity*>(
               &_AckBuyBlackmartCommodity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(AckBuyBlackmartCommodity& a, AckBuyBlackmartCommodity& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBuyBlackmartCommodity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBuyBlackmartCommodity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBuyBlackmartCommodity* New() const final {
    return new AckBuyBlackmartCommodity();
  }

  AckBuyBlackmartCommodity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBuyBlackmartCommodity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBuyBlackmartCommodity& from);
  void MergeFrom(const AckBuyBlackmartCommodity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBuyBlackmartCommodity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBuyBlackmartCommodity";
  }
  protected:
  explicit AckBuyBlackmartCommodity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommodityIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // bytes commodity_id = 2;
  void clear_commodity_id();
  const std::string& commodity_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_commodity_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_commodity_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_commodity_id();
  void set_allocated_commodity_id(std::string* commodity_id);
  private:
  const std::string& _internal_commodity_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_commodity_id(const std::string& value);
  std::string* _internal_mutable_commodity_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBuyBlackmartCommodity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr commodity_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncBlackmartCommodityUpdated final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncBlackmartCommodityUpdated) */ {
 public:
  inline SyncBlackmartCommodityUpdated() : SyncBlackmartCommodityUpdated(nullptr) {}
  ~SyncBlackmartCommodityUpdated() override;
  explicit constexpr SyncBlackmartCommodityUpdated(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncBlackmartCommodityUpdated(const SyncBlackmartCommodityUpdated& from);
  SyncBlackmartCommodityUpdated(SyncBlackmartCommodityUpdated&& from) noexcept
    : SyncBlackmartCommodityUpdated() {
    *this = ::std::move(from);
  }

  inline SyncBlackmartCommodityUpdated& operator=(const SyncBlackmartCommodityUpdated& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncBlackmartCommodityUpdated& operator=(SyncBlackmartCommodityUpdated&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncBlackmartCommodityUpdated& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncBlackmartCommodityUpdated* internal_default_instance() {
    return reinterpret_cast<const SyncBlackmartCommodityUpdated*>(
               &_SyncBlackmartCommodityUpdated_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(SyncBlackmartCommodityUpdated& a, SyncBlackmartCommodityUpdated& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncBlackmartCommodityUpdated* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncBlackmartCommodityUpdated* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncBlackmartCommodityUpdated* New() const final {
    return new SyncBlackmartCommodityUpdated();
  }

  SyncBlackmartCommodityUpdated* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncBlackmartCommodityUpdated>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncBlackmartCommodityUpdated& from);
  void MergeFrom(const SyncBlackmartCommodityUpdated& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncBlackmartCommodityUpdated* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncBlackmartCommodityUpdated";
  }
  protected:
  explicit SyncBlackmartCommodityUpdated(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateTypeFieldNumber = 1,
  };
  // int32 update_type = 1;
  void clear_update_type();
  ::PROTOBUF_NAMESPACE_ID::int32 update_type() const;
  void set_update_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_update_type() const;
  void _internal_set_update_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncBlackmartCommodityUpdated)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 update_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqActiveMissionOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqActiveMissionOperation) */ {
 public:
  inline ReqActiveMissionOperation() : ReqActiveMissionOperation(nullptr) {}
  ~ReqActiveMissionOperation() override;
  explicit constexpr ReqActiveMissionOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqActiveMissionOperation(const ReqActiveMissionOperation& from);
  ReqActiveMissionOperation(ReqActiveMissionOperation&& from) noexcept
    : ReqActiveMissionOperation() {
    *this = ::std::move(from);
  }

  inline ReqActiveMissionOperation& operator=(const ReqActiveMissionOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqActiveMissionOperation& operator=(ReqActiveMissionOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqActiveMissionOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqActiveMissionOperation* internal_default_instance() {
    return reinterpret_cast<const ReqActiveMissionOperation*>(
               &_ReqActiveMissionOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    119;

  friend void swap(ReqActiveMissionOperation& a, ReqActiveMissionOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqActiveMissionOperation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqActiveMissionOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqActiveMissionOperation* New() const final {
    return new ReqActiveMissionOperation();
  }

  ReqActiveMissionOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqActiveMissionOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqActiveMissionOperation& from);
  void MergeFrom(const ReqActiveMissionOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqActiveMissionOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqActiveMissionOperation";
  }
  protected:
  explicit ReqActiveMissionOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kMissionFlagFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.EActiveMisisonFlag mission_flag = 2;
  void clear_mission_flag();
  ::KWMsg::EActiveMisisonFlag mission_flag() const;
  void set_mission_flag(::KWMsg::EActiveMisisonFlag value);
  private:
  ::KWMsg::EActiveMisisonFlag _internal_mission_flag() const;
  void _internal_set_mission_flag(::KWMsg::EActiveMisisonFlag value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqActiveMissionOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  int mission_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckActiveMissionOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckActiveMissionOperation) */ {
 public:
  inline AckActiveMissionOperation() : AckActiveMissionOperation(nullptr) {}
  ~AckActiveMissionOperation() override;
  explicit constexpr AckActiveMissionOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckActiveMissionOperation(const AckActiveMissionOperation& from);
  AckActiveMissionOperation(AckActiveMissionOperation&& from) noexcept
    : AckActiveMissionOperation() {
    *this = ::std::move(from);
  }

  inline AckActiveMissionOperation& operator=(const AckActiveMissionOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckActiveMissionOperation& operator=(AckActiveMissionOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckActiveMissionOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckActiveMissionOperation* internal_default_instance() {
    return reinterpret_cast<const AckActiveMissionOperation*>(
               &_AckActiveMissionOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    120;

  friend void swap(AckActiveMissionOperation& a, AckActiveMissionOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(AckActiveMissionOperation* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckActiveMissionOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckActiveMissionOperation* New() const final {
    return new AckActiveMissionOperation();
  }

  AckActiveMissionOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckActiveMissionOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckActiveMissionOperation& from);
  void MergeFrom(const AckActiveMissionOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckActiveMissionOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckActiveMissionOperation";
  }
  protected:
  explicit AckActiveMissionOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckActiveMissionOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqGetActiveMissionReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGetActiveMissionReward) */ {
 public:
  inline ReqGetActiveMissionReward() : ReqGetActiveMissionReward(nullptr) {}
  ~ReqGetActiveMissionReward() override;
  explicit constexpr ReqGetActiveMissionReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetActiveMissionReward(const ReqGetActiveMissionReward& from);
  ReqGetActiveMissionReward(ReqGetActiveMissionReward&& from) noexcept
    : ReqGetActiveMissionReward() {
    *this = ::std::move(from);
  }

  inline ReqGetActiveMissionReward& operator=(const ReqGetActiveMissionReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetActiveMissionReward& operator=(ReqGetActiveMissionReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetActiveMissionReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetActiveMissionReward* internal_default_instance() {
    return reinterpret_cast<const ReqGetActiveMissionReward*>(
               &_ReqGetActiveMissionReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    121;

  friend void swap(ReqGetActiveMissionReward& a, ReqGetActiveMissionReward& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetActiveMissionReward* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetActiveMissionReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGetActiveMissionReward* New() const final {
    return new ReqGetActiveMissionReward();
  }

  ReqGetActiveMissionReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetActiveMissionReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetActiveMissionReward& from);
  void MergeFrom(const ReqGetActiveMissionReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetActiveMissionReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGetActiveMissionReward";
  }
  protected:
  explicit ReqGetActiveMissionReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMissionIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes mission_id = 2;
  void clear_mission_id();
  const std::string& mission_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_mission_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_mission_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_mission_id();
  void set_allocated_mission_id(std::string* mission_id);
  private:
  const std::string& _internal_mission_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_mission_id(const std::string& value);
  std::string* _internal_mutable_mission_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGetActiveMissionReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mission_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckGetActiveMissionReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGetActiveMissionReward) */ {
 public:
  inline AckGetActiveMissionReward() : AckGetActiveMissionReward(nullptr) {}
  ~AckGetActiveMissionReward() override;
  explicit constexpr AckGetActiveMissionReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGetActiveMissionReward(const AckGetActiveMissionReward& from);
  AckGetActiveMissionReward(AckGetActiveMissionReward&& from) noexcept
    : AckGetActiveMissionReward() {
    *this = ::std::move(from);
  }

  inline AckGetActiveMissionReward& operator=(const AckGetActiveMissionReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGetActiveMissionReward& operator=(AckGetActiveMissionReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGetActiveMissionReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGetActiveMissionReward* internal_default_instance() {
    return reinterpret_cast<const AckGetActiveMissionReward*>(
               &_AckGetActiveMissionReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    122;

  friend void swap(AckGetActiveMissionReward& a, AckGetActiveMissionReward& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGetActiveMissionReward* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGetActiveMissionReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGetActiveMissionReward* New() const final {
    return new AckGetActiveMissionReward();
  }

  AckGetActiveMissionReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGetActiveMissionReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGetActiveMissionReward& from);
  void MergeFrom(const AckGetActiveMissionReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGetActiveMissionReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGetActiveMissionReward";
  }
  protected:
  explicit AckGetActiveMissionReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGetActiveMissionReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqDrawCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqDrawCard) */ {
 public:
  inline ReqDrawCard() : ReqDrawCard(nullptr) {}
  ~ReqDrawCard() override;
  explicit constexpr ReqDrawCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDrawCard(const ReqDrawCard& from);
  ReqDrawCard(ReqDrawCard&& from) noexcept
    : ReqDrawCard() {
    *this = ::std::move(from);
  }

  inline ReqDrawCard& operator=(const ReqDrawCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDrawCard& operator=(ReqDrawCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDrawCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDrawCard* internal_default_instance() {
    return reinterpret_cast<const ReqDrawCard*>(
               &_ReqDrawCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    123;

  friend void swap(ReqDrawCard& a, ReqDrawCard& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDrawCard* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDrawCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqDrawCard* New() const final {
    return new ReqDrawCard();
  }

  ReqDrawCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDrawCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqDrawCard& from);
  void MergeFrom(const ReqDrawCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDrawCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqDrawCard";
  }
  protected:
  explicit ReqDrawCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCardPoolIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kDcCountFieldNumber = 3,
  };
  // bytes card_pool_id = 2;
  void clear_card_pool_id();
  const std::string& card_pool_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_card_pool_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_card_pool_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_card_pool_id();
  void set_allocated_card_pool_id(std::string* card_pool_id);
  private:
  const std::string& _internal_card_pool_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_card_pool_id(const std::string& value);
  std::string* _internal_mutable_card_pool_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 dc_count = 3;
  void clear_dc_count();
  ::PROTOBUF_NAMESPACE_ID::int32 dc_count() const;
  void set_dc_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_dc_count() const;
  void _internal_set_dc_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqDrawCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr card_pool_id_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 dc_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckDrawCard final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckDrawCard) */ {
 public:
  inline AckDrawCard() : AckDrawCard(nullptr) {}
  ~AckDrawCard() override;
  explicit constexpr AckDrawCard(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckDrawCard(const AckDrawCard& from);
  AckDrawCard(AckDrawCard&& from) noexcept
    : AckDrawCard() {
    *this = ::std::move(from);
  }

  inline AckDrawCard& operator=(const AckDrawCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckDrawCard& operator=(AckDrawCard&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckDrawCard& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckDrawCard* internal_default_instance() {
    return reinterpret_cast<const AckDrawCard*>(
               &_AckDrawCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    124;

  friend void swap(AckDrawCard& a, AckDrawCard& b) {
    a.Swap(&b);
  }
  inline void Swap(AckDrawCard* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckDrawCard* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckDrawCard* New() const final {
    return new AckDrawCard();
  }

  AckDrawCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckDrawCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckDrawCard& from);
  void MergeFrom(const AckDrawCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckDrawCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckDrawCard";
  }
  protected:
  explicit AckDrawCard(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.DrawCardInfo result = 2;
  int result_size() const;
  private:
  int _internal_result_size() const;
  public:
  void clear_result();
  ::KWMsg::DrawCardInfo* mutable_result(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::DrawCardInfo >*
      mutable_result();
  private:
  const ::KWMsg::DrawCardInfo& _internal_result(int index) const;
  ::KWMsg::DrawCardInfo* _internal_add_result();
  public:
  const ::KWMsg::DrawCardInfo& result(int index) const;
  ::KWMsg::DrawCardInfo* add_result();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::DrawCardInfo >&
      result() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckDrawCard)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::DrawCardInfo > result_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class CommunityMemberInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.CommunityMemberInfo) */ {
 public:
  inline CommunityMemberInfo() : CommunityMemberInfo(nullptr) {}
  ~CommunityMemberInfo() override;
  explicit constexpr CommunityMemberInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommunityMemberInfo(const CommunityMemberInfo& from);
  CommunityMemberInfo(CommunityMemberInfo&& from) noexcept
    : CommunityMemberInfo() {
    *this = ::std::move(from);
  }

  inline CommunityMemberInfo& operator=(const CommunityMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunityMemberInfo& operator=(CommunityMemberInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommunityMemberInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommunityMemberInfo* internal_default_instance() {
    return reinterpret_cast<const CommunityMemberInfo*>(
               &_CommunityMemberInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    125;

  friend void swap(CommunityMemberInfo& a, CommunityMemberInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunityMemberInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunityMemberInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommunityMemberInfo* New() const final {
    return new CommunityMemberInfo();
  }

  CommunityMemberInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommunityMemberInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommunityMemberInfo& from);
  void MergeFrom(const CommunityMemberInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunityMemberInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.CommunityMemberInfo";
  }
  protected:
  explicit CommunityMemberInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAvatarUrlFieldNumber = 3,
    kAvatarFrameFieldNumber = 4,
    kPlayerIdFieldNumber = 1,
    kLevelFieldNumber = 5,
    kFightingCapacityFieldNumber = 6,
    kWeeklyActiveValFieldNumber = 7,
    kTotalActiveValFieldNumber = 8,
    kJoinTsFieldNumber = 10,
    kOfflineTsFieldNumber = 11,
    kPositionFieldNumber = 9,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes avatar_url = 3;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_url();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // bytes avatar_frame = 4;
  void clear_avatar_frame();
  const std::string& avatar_frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_frame();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_avatar_frame();
  void set_allocated_avatar_frame(std::string* avatar_frame);
  private:
  const std::string& _internal_avatar_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_frame(const std::string& value);
  std::string* _internal_mutable_avatar_frame();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 level = 5;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 fighting_capacity = 6;
  void clear_fighting_capacity();
  ::PROTOBUF_NAMESPACE_ID::int32 fighting_capacity() const;
  void set_fighting_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fighting_capacity() const;
  void _internal_set_fighting_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 weekly_active_val = 7;
  void clear_weekly_active_val();
  ::PROTOBUF_NAMESPACE_ID::int32 weekly_active_val() const;
  void set_weekly_active_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_weekly_active_val() const;
  void _internal_set_weekly_active_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_active_val = 8;
  void clear_total_active_val();
  ::PROTOBUF_NAMESPACE_ID::int32 total_active_val() const;
  void set_total_active_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_active_val() const;
  void _internal_set_total_active_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 join_ts = 10;
  void clear_join_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 join_ts() const;
  void set_join_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_join_ts() const;
  void _internal_set_join_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 offline_ts = 11;
  void clear_offline_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 offline_ts() const;
  void set_offline_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offline_ts() const;
  void _internal_set_offline_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .KWMsg.ECommunityMemberPosition position = 9;
  void clear_position();
  ::KWMsg::ECommunityMemberPosition position() const;
  void set_position(::KWMsg::ECommunityMemberPosition value);
  private:
  ::KWMsg::ECommunityMemberPosition _internal_position() const;
  void _internal_set_position(::KWMsg::ECommunityMemberPosition value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.CommunityMemberInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_frame_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 fighting_capacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 weekly_active_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_active_val_;
  ::PROTOBUF_NAMESPACE_ID::int64 join_ts_;
  ::PROTOBUF_NAMESPACE_ID::int64 offline_ts_;
  int position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class CommunityInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.CommunityInfo) */ {
 public:
  inline CommunityInfo() : CommunityInfo(nullptr) {}
  ~CommunityInfo() override;
  explicit constexpr CommunityInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommunityInfo(const CommunityInfo& from);
  CommunityInfo(CommunityInfo&& from) noexcept
    : CommunityInfo() {
    *this = ::std::move(from);
  }

  inline CommunityInfo& operator=(const CommunityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommunityInfo& operator=(CommunityInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommunityInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const CommunityInfo* internal_default_instance() {
    return reinterpret_cast<const CommunityInfo*>(
               &_CommunityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    126;

  friend void swap(CommunityInfo& a, CommunityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(CommunityInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommunityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CommunityInfo* New() const final {
    return new CommunityInfo();
  }

  CommunityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CommunityInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CommunityInfo& from);
  void MergeFrom(const CommunityInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommunityInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.CommunityInfo";
  }
  protected:
  explicit CommunityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityNameFieldNumber = 1,
    kCommunityFlagFieldNumber = 2,
    kCommunityIconFieldNumber = 3,
    kCommunityDeclarationFieldNumber = 4,
    kCommunityChatChannelIdFieldNumber = 5,
    kCommunityChiefNameFieldNumber = 6,
    kCommunityChiefPlayerIdFieldNumber = 7,
    kCommunityIdFieldNumber = 8,
    kCommunityLevelFieldNumber = 9,
    kCommunityExpFieldNumber = 10,
    kCommunityFightingCapacityFieldNumber = 11,
    kCommunityWeeklyActiveValFieldNumber = 12,
    kCommunityTotalActiveValFieldNumber = 13,
    kCommunityApproveTypeFieldNumber = 14,
    kLevelRestrictionFieldNumber = 15,
    kMemberNumFieldNumber = 16,
  };
  // bytes community_name = 1;
  void clear_community_name();
  const std::string& community_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_name();
  void set_allocated_community_name(std::string* community_name);
  private:
  const std::string& _internal_community_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_name(const std::string& value);
  std::string* _internal_mutable_community_name();
  public:

  // bytes community_flag = 2;
  void clear_community_flag();
  const std::string& community_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_flag();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_flag();
  void set_allocated_community_flag(std::string* community_flag);
  private:
  const std::string& _internal_community_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_flag(const std::string& value);
  std::string* _internal_mutable_community_flag();
  public:

  // bytes community_icon = 3;
  void clear_community_icon();
  const std::string& community_icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_icon();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_icon();
  void set_allocated_community_icon(std::string* community_icon);
  private:
  const std::string& _internal_community_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_icon(const std::string& value);
  std::string* _internal_mutable_community_icon();
  public:

  // bytes community_declaration = 4;
  void clear_community_declaration();
  const std::string& community_declaration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_declaration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_declaration();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_declaration();
  void set_allocated_community_declaration(std::string* community_declaration);
  private:
  const std::string& _internal_community_declaration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_declaration(const std::string& value);
  std::string* _internal_mutable_community_declaration();
  public:

  // bytes community_chat_channel_id = 5;
  void clear_community_chat_channel_id();
  const std::string& community_chat_channel_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_chat_channel_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_chat_channel_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_chat_channel_id();
  void set_allocated_community_chat_channel_id(std::string* community_chat_channel_id);
  private:
  const std::string& _internal_community_chat_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_chat_channel_id(const std::string& value);
  std::string* _internal_mutable_community_chat_channel_id();
  public:

  // bytes community_chief_name = 6;
  void clear_community_chief_name();
  const std::string& community_chief_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_chief_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_chief_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_chief_name();
  void set_allocated_community_chief_name(std::string* community_chief_name);
  private:
  const std::string& _internal_community_chief_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_chief_name(const std::string& value);
  std::string* _internal_mutable_community_chief_name();
  public:

  // .KWMsg.Ident community_chief_player_id = 7;
  bool has_community_chief_player_id() const;
  private:
  bool _internal_has_community_chief_player_id() const;
  public:
  void clear_community_chief_player_id();
  const ::KWMsg::Ident& community_chief_player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_community_chief_player_id();
  ::KWMsg::Ident* mutable_community_chief_player_id();
  void set_allocated_community_chief_player_id(::KWMsg::Ident* community_chief_player_id);
  private:
  const ::KWMsg::Ident& _internal_community_chief_player_id() const;
  ::KWMsg::Ident* _internal_mutable_community_chief_player_id();
  public:
  void unsafe_arena_set_allocated_community_chief_player_id(
      ::KWMsg::Ident* community_chief_player_id);
  ::KWMsg::Ident* unsafe_arena_release_community_chief_player_id();

  // int32 community_id = 8;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 community_level = 9;
  void clear_community_level();
  ::PROTOBUF_NAMESPACE_ID::int32 community_level() const;
  void set_community_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_level() const;
  void _internal_set_community_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 community_exp = 10;
  void clear_community_exp();
  ::PROTOBUF_NAMESPACE_ID::int32 community_exp() const;
  void set_community_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_exp() const;
  void _internal_set_community_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 community_fighting_capacity = 11;
  void clear_community_fighting_capacity();
  ::PROTOBUF_NAMESPACE_ID::int32 community_fighting_capacity() const;
  void set_community_fighting_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_fighting_capacity() const;
  void _internal_set_community_fighting_capacity(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 community_weekly_active_val = 12;
  void clear_community_weekly_active_val();
  ::PROTOBUF_NAMESPACE_ID::int32 community_weekly_active_val() const;
  void set_community_weekly_active_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_weekly_active_val() const;
  void _internal_set_community_weekly_active_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 community_total_active_val = 13;
  void clear_community_total_active_val();
  ::PROTOBUF_NAMESPACE_ID::int32 community_total_active_val() const;
  void set_community_total_active_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_total_active_val() const;
  void _internal_set_community_total_active_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 community_approve_type = 14;
  void clear_community_approve_type();
  ::PROTOBUF_NAMESPACE_ID::int32 community_approve_type() const;
  void set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_approve_type() const;
  void _internal_set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level_restriction = 15;
  void clear_level_restriction();
  ::PROTOBUF_NAMESPACE_ID::int32 level_restriction() const;
  void set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level_restriction() const;
  void _internal_set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 member_num = 16;
  void clear_member_num();
  ::PROTOBUF_NAMESPACE_ID::int32 member_num() const;
  void set_member_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_member_num() const;
  void _internal_set_member_num(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.CommunityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_declaration_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_chat_channel_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_chief_name_;
  ::KWMsg::Ident* community_chief_player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_level_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_exp_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_fighting_capacity_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_weekly_active_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_total_active_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_approve_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_restriction_;
  ::PROTOBUF_NAMESPACE_ID::int32 member_num_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AppliedCommunityInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AppliedCommunityInfo) */ {
 public:
  inline AppliedCommunityInfo() : AppliedCommunityInfo(nullptr) {}
  ~AppliedCommunityInfo() override;
  explicit constexpr AppliedCommunityInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppliedCommunityInfo(const AppliedCommunityInfo& from);
  AppliedCommunityInfo(AppliedCommunityInfo&& from) noexcept
    : AppliedCommunityInfo() {
    *this = ::std::move(from);
  }

  inline AppliedCommunityInfo& operator=(const AppliedCommunityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppliedCommunityInfo& operator=(AppliedCommunityInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppliedCommunityInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppliedCommunityInfo* internal_default_instance() {
    return reinterpret_cast<const AppliedCommunityInfo*>(
               &_AppliedCommunityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    127;

  friend void swap(AppliedCommunityInfo& a, AppliedCommunityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppliedCommunityInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppliedCommunityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppliedCommunityInfo* New() const final {
    return new AppliedCommunityInfo();
  }

  AppliedCommunityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppliedCommunityInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppliedCommunityInfo& from);
  void MergeFrom(const AppliedCommunityInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppliedCommunityInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AppliedCommunityInfo";
  }
  protected:
  explicit AppliedCommunityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityInfoFieldNumber = 2,
    kApplyJoinTsFieldNumber = 1,
  };
  // .KWMsg.CommunityInfo community_info = 2;
  bool has_community_info() const;
  private:
  bool _internal_has_community_info() const;
  public:
  void clear_community_info();
  const ::KWMsg::CommunityInfo& community_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::CommunityInfo* release_community_info();
  ::KWMsg::CommunityInfo* mutable_community_info();
  void set_allocated_community_info(::KWMsg::CommunityInfo* community_info);
  private:
  const ::KWMsg::CommunityInfo& _internal_community_info() const;
  ::KWMsg::CommunityInfo* _internal_mutable_community_info();
  public:
  void unsafe_arena_set_allocated_community_info(
      ::KWMsg::CommunityInfo* community_info);
  ::KWMsg::CommunityInfo* unsafe_arena_release_community_info();

  // int64 apply_join_ts = 1;
  void clear_apply_join_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 apply_join_ts() const;
  void set_apply_join_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_apply_join_ts() const;
  void _internal_set_apply_join_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AppliedCommunityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::CommunityInfo* community_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 apply_join_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AppliedPlayerInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AppliedPlayerInfo) */ {
 public:
  inline AppliedPlayerInfo() : AppliedPlayerInfo(nullptr) {}
  ~AppliedPlayerInfo() override;
  explicit constexpr AppliedPlayerInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppliedPlayerInfo(const AppliedPlayerInfo& from);
  AppliedPlayerInfo(AppliedPlayerInfo&& from) noexcept
    : AppliedPlayerInfo() {
    *this = ::std::move(from);
  }

  inline AppliedPlayerInfo& operator=(const AppliedPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppliedPlayerInfo& operator=(AppliedPlayerInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppliedPlayerInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppliedPlayerInfo* internal_default_instance() {
    return reinterpret_cast<const AppliedPlayerInfo*>(
               &_AppliedPlayerInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    128;

  friend void swap(AppliedPlayerInfo& a, AppliedPlayerInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppliedPlayerInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppliedPlayerInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppliedPlayerInfo* New() const final {
    return new AppliedPlayerInfo();
  }

  AppliedPlayerInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppliedPlayerInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppliedPlayerInfo& from);
  void MergeFrom(const AppliedPlayerInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppliedPlayerInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AppliedPlayerInfo";
  }
  protected:
  explicit AppliedPlayerInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 2,
    kApplyJoinTsFieldNumber = 1,
  };
  // .KWMsg.CommunityMemberInfo player_info = 2;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::KWMsg::CommunityMemberInfo& player_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::CommunityMemberInfo* release_player_info();
  ::KWMsg::CommunityMemberInfo* mutable_player_info();
  void set_allocated_player_info(::KWMsg::CommunityMemberInfo* player_info);
  private:
  const ::KWMsg::CommunityMemberInfo& _internal_player_info() const;
  ::KWMsg::CommunityMemberInfo* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::KWMsg::CommunityMemberInfo* player_info);
  ::KWMsg::CommunityMemberInfo* unsafe_arena_release_player_info();

  // int64 apply_join_ts = 1;
  void clear_apply_join_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 apply_join_ts() const;
  void set_apply_join_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_apply_join_ts() const;
  void _internal_set_apply_join_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AppliedPlayerInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::CommunityMemberInfo* player_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 apply_join_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerCommunityInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncPlayerCommunityInfo) */ {
 public:
  inline SyncPlayerCommunityInfo() : SyncPlayerCommunityInfo(nullptr) {}
  ~SyncPlayerCommunityInfo() override;
  explicit constexpr SyncPlayerCommunityInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayerCommunityInfo(const SyncPlayerCommunityInfo& from);
  SyncPlayerCommunityInfo(SyncPlayerCommunityInfo&& from) noexcept
    : SyncPlayerCommunityInfo() {
    *this = ::std::move(from);
  }

  inline SyncPlayerCommunityInfo& operator=(const SyncPlayerCommunityInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerCommunityInfo& operator=(SyncPlayerCommunityInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayerCommunityInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayerCommunityInfo* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerCommunityInfo*>(
               &_SyncPlayerCommunityInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    129;

  friend void swap(SyncPlayerCommunityInfo& a, SyncPlayerCommunityInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerCommunityInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayerCommunityInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerCommunityInfo* New() const final {
    return new SyncPlayerCommunityInfo();
  }

  SyncPlayerCommunityInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerCommunityInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerCommunityInfo& from);
  void MergeFrom(const SyncPlayerCommunityInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerCommunityInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncPlayerCommunityInfo";
  }
  protected:
  explicit SyncPlayerCommunityInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kCommunityIdFieldNumber = 2,
    kPositionFieldNumber = 3,
    kQuitTsFieldNumber = 4,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 community_id = 2;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.ECommunityMemberPosition position = 3;
  void clear_position();
  ::KWMsg::ECommunityMemberPosition position() const;
  void set_position(::KWMsg::ECommunityMemberPosition value);
  private:
  ::KWMsg::ECommunityMemberPosition _internal_position() const;
  void _internal_set_position(::KWMsg::ECommunityMemberPosition value);
  public:

  // int64 quit_ts = 4;
  void clear_quit_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 quit_ts() const;
  void set_quit_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_quit_ts() const;
  void _internal_set_quit_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncPlayerCommunityInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  int position_;
  ::PROTOBUF_NAMESPACE_ID::int64 quit_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AddCommunityActiveValAndExp final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AddCommunityActiveValAndExp) */ {
 public:
  inline AddCommunityActiveValAndExp() : AddCommunityActiveValAndExp(nullptr) {}
  ~AddCommunityActiveValAndExp() override;
  explicit constexpr AddCommunityActiveValAndExp(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddCommunityActiveValAndExp(const AddCommunityActiveValAndExp& from);
  AddCommunityActiveValAndExp(AddCommunityActiveValAndExp&& from) noexcept
    : AddCommunityActiveValAndExp() {
    *this = ::std::move(from);
  }

  inline AddCommunityActiveValAndExp& operator=(const AddCommunityActiveValAndExp& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddCommunityActiveValAndExp& operator=(AddCommunityActiveValAndExp&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddCommunityActiveValAndExp& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddCommunityActiveValAndExp* internal_default_instance() {
    return reinterpret_cast<const AddCommunityActiveValAndExp*>(
               &_AddCommunityActiveValAndExp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    130;

  friend void swap(AddCommunityActiveValAndExp& a, AddCommunityActiveValAndExp& b) {
    a.Swap(&b);
  }
  inline void Swap(AddCommunityActiveValAndExp* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddCommunityActiveValAndExp* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddCommunityActiveValAndExp* New() const final {
    return new AddCommunityActiveValAndExp();
  }

  AddCommunityActiveValAndExp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddCommunityActiveValAndExp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddCommunityActiveValAndExp& from);
  void MergeFrom(const AddCommunityActiveValAndExp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddCommunityActiveValAndExp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AddCommunityActiveValAndExp";
  }
  protected:
  explicit AddCommunityActiveValAndExp(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kCommunityIdFieldNumber = 2,
    kActiveValFieldNumber = 3,
    kLevelExpFieldNumber = 4,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 community_id = 2;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 active_val = 3;
  void clear_active_val();
  ::PROTOBUF_NAMESPACE_ID::int32 active_val() const;
  void set_active_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_active_val() const;
  void _internal_set_active_val(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level_exp = 4;
  void clear_level_exp();
  ::PROTOBUF_NAMESPACE_ID::int32 level_exp() const;
  void set_level_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level_exp() const;
  void _internal_set_level_exp(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AddCommunityActiveValAndExp)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 active_val_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_exp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class NotifyApplyJoinCommunityResult final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.NotifyApplyJoinCommunityResult) */ {
 public:
  inline NotifyApplyJoinCommunityResult() : NotifyApplyJoinCommunityResult(nullptr) {}
  ~NotifyApplyJoinCommunityResult() override;
  explicit constexpr NotifyApplyJoinCommunityResult(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyApplyJoinCommunityResult(const NotifyApplyJoinCommunityResult& from);
  NotifyApplyJoinCommunityResult(NotifyApplyJoinCommunityResult&& from) noexcept
    : NotifyApplyJoinCommunityResult() {
    *this = ::std::move(from);
  }

  inline NotifyApplyJoinCommunityResult& operator=(const NotifyApplyJoinCommunityResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyApplyJoinCommunityResult& operator=(NotifyApplyJoinCommunityResult&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyApplyJoinCommunityResult& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyApplyJoinCommunityResult* internal_default_instance() {
    return reinterpret_cast<const NotifyApplyJoinCommunityResult*>(
               &_NotifyApplyJoinCommunityResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    131;

  friend void swap(NotifyApplyJoinCommunityResult& a, NotifyApplyJoinCommunityResult& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyApplyJoinCommunityResult* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyApplyJoinCommunityResult* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotifyApplyJoinCommunityResult* New() const final {
    return new NotifyApplyJoinCommunityResult();
  }

  NotifyApplyJoinCommunityResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotifyApplyJoinCommunityResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotifyApplyJoinCommunityResult& from);
  void MergeFrom(const NotifyApplyJoinCommunityResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyApplyJoinCommunityResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.NotifyApplyJoinCommunityResult";
  }
  protected:
  explicit NotifyApplyJoinCommunityResult(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityChatChannelIdFieldNumber = 3,
    kCommunityIdFieldNumber = 1,
    kPositionFieldNumber = 2,
    kJoinResultFieldNumber = 4,
  };
  // bytes community_chat_channel_id = 3;
  void clear_community_chat_channel_id();
  const std::string& community_chat_channel_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_chat_channel_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_chat_channel_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_chat_channel_id();
  void set_allocated_community_chat_channel_id(std::string* community_chat_channel_id);
  private:
  const std::string& _internal_community_chat_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_chat_channel_id(const std::string& value);
  std::string* _internal_mutable_community_chat_channel_id();
  public:

  // int32 community_id = 1;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.ECommunityMemberPosition position = 2;
  void clear_position();
  ::KWMsg::ECommunityMemberPosition position() const;
  void set_position(::KWMsg::ECommunityMemberPosition value);
  private:
  ::KWMsg::ECommunityMemberPosition _internal_position() const;
  void _internal_set_position(::KWMsg::ECommunityMemberPosition value);
  public:

  // int32 join_result = 4;
  void clear_join_result();
  ::PROTOBUF_NAMESPACE_ID::int32 join_result() const;
  void set_join_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_join_result() const;
  void _internal_set_join_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.NotifyApplyJoinCommunityResult)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_chat_channel_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  int position_;
  ::PROTOBUF_NAMESPACE_ID::int32 join_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class NotifyPlayerGetFiredFromCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.NotifyPlayerGetFiredFromCommunity) */ {
 public:
  inline NotifyPlayerGetFiredFromCommunity() : NotifyPlayerGetFiredFromCommunity(nullptr) {}
  ~NotifyPlayerGetFiredFromCommunity() override;
  explicit constexpr NotifyPlayerGetFiredFromCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  NotifyPlayerGetFiredFromCommunity(const NotifyPlayerGetFiredFromCommunity& from);
  NotifyPlayerGetFiredFromCommunity(NotifyPlayerGetFiredFromCommunity&& from) noexcept
    : NotifyPlayerGetFiredFromCommunity() {
    *this = ::std::move(from);
  }

  inline NotifyPlayerGetFiredFromCommunity& operator=(const NotifyPlayerGetFiredFromCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyPlayerGetFiredFromCommunity& operator=(NotifyPlayerGetFiredFromCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const NotifyPlayerGetFiredFromCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const NotifyPlayerGetFiredFromCommunity* internal_default_instance() {
    return reinterpret_cast<const NotifyPlayerGetFiredFromCommunity*>(
               &_NotifyPlayerGetFiredFromCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    132;

  friend void swap(NotifyPlayerGetFiredFromCommunity& a, NotifyPlayerGetFiredFromCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyPlayerGetFiredFromCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NotifyPlayerGetFiredFromCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotifyPlayerGetFiredFromCommunity* New() const final {
    return new NotifyPlayerGetFiredFromCommunity();
  }

  NotifyPlayerGetFiredFromCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotifyPlayerGetFiredFromCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotifyPlayerGetFiredFromCommunity& from);
  void MergeFrom(const NotifyPlayerGetFiredFromCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyPlayerGetFiredFromCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.NotifyPlayerGetFiredFromCommunity";
  }
  protected:
  explicit NotifyPlayerGetFiredFromCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityChatChannelIdFieldNumber = 3,
    kCommunityIdFieldNumber = 1,
    kPositionFieldNumber = 2,
  };
  // bytes community_chat_channel_id = 3;
  void clear_community_chat_channel_id();
  const std::string& community_chat_channel_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_chat_channel_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_chat_channel_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_chat_channel_id();
  void set_allocated_community_chat_channel_id(std::string* community_chat_channel_id);
  private:
  const std::string& _internal_community_chat_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_chat_channel_id(const std::string& value);
  std::string* _internal_mutable_community_chat_channel_id();
  public:

  // int32 community_id = 1;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.ECommunityMemberPosition position = 2;
  void clear_position();
  ::KWMsg::ECommunityMemberPosition position() const;
  void set_position(::KWMsg::ECommunityMemberPosition value);
  private:
  ::KWMsg::ECommunityMemberPosition _internal_position() const;
  void _internal_set_position(::KWMsg::ECommunityMemberPosition value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.NotifyPlayerGetFiredFromCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_chat_channel_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  int position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCreateCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCreateCommunity) */ {
 public:
  inline ReqCreateCommunity() : ReqCreateCommunity(nullptr) {}
  ~ReqCreateCommunity() override;
  explicit constexpr ReqCreateCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCreateCommunity(const ReqCreateCommunity& from);
  ReqCreateCommunity(ReqCreateCommunity&& from) noexcept
    : ReqCreateCommunity() {
    *this = ::std::move(from);
  }

  inline ReqCreateCommunity& operator=(const ReqCreateCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCreateCommunity& operator=(ReqCreateCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCreateCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCreateCommunity* internal_default_instance() {
    return reinterpret_cast<const ReqCreateCommunity*>(
               &_ReqCreateCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    133;

  friend void swap(ReqCreateCommunity& a, ReqCreateCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCreateCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCreateCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCreateCommunity* New() const final {
    return new ReqCreateCommunity();
  }

  ReqCreateCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCreateCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCreateCommunity& from);
  void MergeFrom(const ReqCreateCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCreateCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCreateCommunity";
  }
  protected:
  explicit ReqCreateCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityNameFieldNumber = 2,
    kCommunityFlagFieldNumber = 3,
    kCommunityIconFieldNumber = 4,
    kCommunityDeclarationFieldNumber = 5,
    kPlayerIdFieldNumber = 1,
    kCommunityApproveTypeFieldNumber = 6,
    kLevelRestrictionFieldNumber = 7,
  };
  // bytes community_name = 2;
  void clear_community_name();
  const std::string& community_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_name();
  void set_allocated_community_name(std::string* community_name);
  private:
  const std::string& _internal_community_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_name(const std::string& value);
  std::string* _internal_mutable_community_name();
  public:

  // bytes community_flag = 3;
  void clear_community_flag();
  const std::string& community_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_flag();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_flag();
  void set_allocated_community_flag(std::string* community_flag);
  private:
  const std::string& _internal_community_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_flag(const std::string& value);
  std::string* _internal_mutable_community_flag();
  public:

  // bytes community_icon = 4;
  void clear_community_icon();
  const std::string& community_icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_icon();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_icon();
  void set_allocated_community_icon(std::string* community_icon);
  private:
  const std::string& _internal_community_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_icon(const std::string& value);
  std::string* _internal_mutable_community_icon();
  public:

  // bytes community_declaration = 5;
  void clear_community_declaration();
  const std::string& community_declaration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_declaration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_declaration();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_declaration();
  void set_allocated_community_declaration(std::string* community_declaration);
  private:
  const std::string& _internal_community_declaration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_declaration(const std::string& value);
  std::string* _internal_mutable_community_declaration();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 community_approve_type = 6;
  void clear_community_approve_type();
  ::PROTOBUF_NAMESPACE_ID::int32 community_approve_type() const;
  void set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_approve_type() const;
  void _internal_set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level_restriction = 7;
  void clear_level_restriction();
  ::PROTOBUF_NAMESPACE_ID::int32 level_restriction() const;
  void set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level_restriction() const;
  void _internal_set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCreateCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_declaration_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_approve_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_restriction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCreateCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCreateCommunity) */ {
 public:
  inline AckCreateCommunity() : AckCreateCommunity(nullptr) {}
  ~AckCreateCommunity() override;
  explicit constexpr AckCreateCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCreateCommunity(const AckCreateCommunity& from);
  AckCreateCommunity(AckCreateCommunity&& from) noexcept
    : AckCreateCommunity() {
    *this = ::std::move(from);
  }

  inline AckCreateCommunity& operator=(const AckCreateCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCreateCommunity& operator=(AckCreateCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCreateCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCreateCommunity* internal_default_instance() {
    return reinterpret_cast<const AckCreateCommunity*>(
               &_AckCreateCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    134;

  friend void swap(AckCreateCommunity& a, AckCreateCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCreateCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCreateCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCreateCommunity* New() const final {
    return new AckCreateCommunity();
  }

  AckCreateCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCreateCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCreateCommunity& from);
  void MergeFrom(const AckCreateCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCreateCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCreateCommunity";
  }
  protected:
  explicit AckCreateCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberInfoListFieldNumber = 3,
    kCommunityInfoFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.CommunityMemberInfo member_info_list = 3;
  int member_info_list_size() const;
  private:
  int _internal_member_info_list_size() const;
  public:
  void clear_member_info_list();
  ::KWMsg::CommunityMemberInfo* mutable_member_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityMemberInfo >*
      mutable_member_info_list();
  private:
  const ::KWMsg::CommunityMemberInfo& _internal_member_info_list(int index) const;
  ::KWMsg::CommunityMemberInfo* _internal_add_member_info_list();
  public:
  const ::KWMsg::CommunityMemberInfo& member_info_list(int index) const;
  ::KWMsg::CommunityMemberInfo* add_member_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityMemberInfo >&
      member_info_list() const;

  // .KWMsg.CommunityInfo community_info = 2;
  bool has_community_info() const;
  private:
  bool _internal_has_community_info() const;
  public:
  void clear_community_info();
  const ::KWMsg::CommunityInfo& community_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::CommunityInfo* release_community_info();
  ::KWMsg::CommunityInfo* mutable_community_info();
  void set_allocated_community_info(::KWMsg::CommunityInfo* community_info);
  private:
  const ::KWMsg::CommunityInfo& _internal_community_info() const;
  ::KWMsg::CommunityInfo* _internal_mutable_community_info();
  public:
  void unsafe_arena_set_allocated_community_info(
      ::KWMsg::CommunityInfo* community_info);
  ::KWMsg::CommunityInfo* unsafe_arena_release_community_info();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCreateCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityMemberInfo > member_info_list_;
  ::KWMsg::CommunityInfo* community_info_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSearchCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSearchCommunity) */ {
 public:
  inline ReqSearchCommunity() : ReqSearchCommunity(nullptr) {}
  ~ReqSearchCommunity() override;
  explicit constexpr ReqSearchCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSearchCommunity(const ReqSearchCommunity& from);
  ReqSearchCommunity(ReqSearchCommunity&& from) noexcept
    : ReqSearchCommunity() {
    *this = ::std::move(from);
  }

  inline ReqSearchCommunity& operator=(const ReqSearchCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSearchCommunity& operator=(ReqSearchCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSearchCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSearchCommunity* internal_default_instance() {
    return reinterpret_cast<const ReqSearchCommunity*>(
               &_ReqSearchCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    135;

  friend void swap(ReqSearchCommunity& a, ReqSearchCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSearchCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSearchCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSearchCommunity* New() const final {
    return new ReqSearchCommunity();
  }

  ReqSearchCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSearchCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSearchCommunity& from);
  void MergeFrom(const ReqSearchCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSearchCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSearchCommunity";
  }
  protected:
  explicit ReqSearchCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityNameOrIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes community_name_or_id = 2;
  void clear_community_name_or_id();
  const std::string& community_name_or_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_name_or_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_name_or_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_name_or_id();
  void set_allocated_community_name_or_id(std::string* community_name_or_id);
  private:
  const std::string& _internal_community_name_or_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_name_or_id(const std::string& value);
  std::string* _internal_mutable_community_name_or_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSearchCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_name_or_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSearchCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSearchCommunity) */ {
 public:
  inline AckSearchCommunity() : AckSearchCommunity(nullptr) {}
  ~AckSearchCommunity() override;
  explicit constexpr AckSearchCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSearchCommunity(const AckSearchCommunity& from);
  AckSearchCommunity(AckSearchCommunity&& from) noexcept
    : AckSearchCommunity() {
    *this = ::std::move(from);
  }

  inline AckSearchCommunity& operator=(const AckSearchCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSearchCommunity& operator=(AckSearchCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSearchCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSearchCommunity* internal_default_instance() {
    return reinterpret_cast<const AckSearchCommunity*>(
               &_AckSearchCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    136;

  friend void swap(AckSearchCommunity& a, AckSearchCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSearchCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSearchCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSearchCommunity* New() const final {
    return new AckSearchCommunity();
  }

  AckSearchCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSearchCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSearchCommunity& from);
  void MergeFrom(const AckSearchCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSearchCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSearchCommunity";
  }
  protected:
  explicit AckSearchCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityInfoFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.CommunityInfo community_info = 2;
  bool has_community_info() const;
  private:
  bool _internal_has_community_info() const;
  public:
  void clear_community_info();
  const ::KWMsg::CommunityInfo& community_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::CommunityInfo* release_community_info();
  ::KWMsg::CommunityInfo* mutable_community_info();
  void set_allocated_community_info(::KWMsg::CommunityInfo* community_info);
  private:
  const ::KWMsg::CommunityInfo& _internal_community_info() const;
  ::KWMsg::CommunityInfo* _internal_mutable_community_info();
  public:
  void unsafe_arena_set_allocated_community_info(
      ::KWMsg::CommunityInfo* community_info);
  ::KWMsg::CommunityInfo* unsafe_arena_release_community_info();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSearchCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::CommunityInfo* community_info_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqQueryCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqQueryCommunity) */ {
 public:
  inline ReqQueryCommunity() : ReqQueryCommunity(nullptr) {}
  ~ReqQueryCommunity() override;
  explicit constexpr ReqQueryCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqQueryCommunity(const ReqQueryCommunity& from);
  ReqQueryCommunity(ReqQueryCommunity&& from) noexcept
    : ReqQueryCommunity() {
    *this = ::std::move(from);
  }

  inline ReqQueryCommunity& operator=(const ReqQueryCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqQueryCommunity& operator=(ReqQueryCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqQueryCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqQueryCommunity* internal_default_instance() {
    return reinterpret_cast<const ReqQueryCommunity*>(
               &_ReqQueryCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    137;

  friend void swap(ReqQueryCommunity& a, ReqQueryCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqQueryCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqQueryCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqQueryCommunity* New() const final {
    return new ReqQueryCommunity();
  }

  ReqQueryCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqQueryCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqQueryCommunity& from);
  void MergeFrom(const ReqQueryCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqQueryCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqQueryCommunity";
  }
  protected:
  explicit ReqQueryCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kCommunityIdFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 community_id = 2;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqQueryCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckQueryCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckQueryCommunity) */ {
 public:
  inline AckQueryCommunity() : AckQueryCommunity(nullptr) {}
  ~AckQueryCommunity() override;
  explicit constexpr AckQueryCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckQueryCommunity(const AckQueryCommunity& from);
  AckQueryCommunity(AckQueryCommunity&& from) noexcept
    : AckQueryCommunity() {
    *this = ::std::move(from);
  }

  inline AckQueryCommunity& operator=(const AckQueryCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckQueryCommunity& operator=(AckQueryCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckQueryCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckQueryCommunity* internal_default_instance() {
    return reinterpret_cast<const AckQueryCommunity*>(
               &_AckQueryCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    138;

  friend void swap(AckQueryCommunity& a, AckQueryCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(AckQueryCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckQueryCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckQueryCommunity* New() const final {
    return new AckQueryCommunity();
  }

  AckQueryCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckQueryCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckQueryCommunity& from);
  void MergeFrom(const AckQueryCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckQueryCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckQueryCommunity";
  }
  protected:
  explicit AckQueryCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemberInfoListFieldNumber = 3,
    kCommunityInfoFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.CommunityMemberInfo member_info_list = 3;
  int member_info_list_size() const;
  private:
  int _internal_member_info_list_size() const;
  public:
  void clear_member_info_list();
  ::KWMsg::CommunityMemberInfo* mutable_member_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityMemberInfo >*
      mutable_member_info_list();
  private:
  const ::KWMsg::CommunityMemberInfo& _internal_member_info_list(int index) const;
  ::KWMsg::CommunityMemberInfo* _internal_add_member_info_list();
  public:
  const ::KWMsg::CommunityMemberInfo& member_info_list(int index) const;
  ::KWMsg::CommunityMemberInfo* add_member_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityMemberInfo >&
      member_info_list() const;

  // .KWMsg.CommunityInfo community_info = 2;
  bool has_community_info() const;
  private:
  bool _internal_has_community_info() const;
  public:
  void clear_community_info();
  const ::KWMsg::CommunityInfo& community_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::CommunityInfo* release_community_info();
  ::KWMsg::CommunityInfo* mutable_community_info();
  void set_allocated_community_info(::KWMsg::CommunityInfo* community_info);
  private:
  const ::KWMsg::CommunityInfo& _internal_community_info() const;
  ::KWMsg::CommunityInfo* _internal_mutable_community_info();
  public:
  void unsafe_arena_set_allocated_community_info(
      ::KWMsg::CommunityInfo* community_info);
  ::KWMsg::CommunityInfo* unsafe_arena_release_community_info();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckQueryCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityMemberInfo > member_info_list_;
  ::KWMsg::CommunityInfo* community_info_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSpecifiedCommunityPage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSpecifiedCommunityPage) */ {
 public:
  inline ReqSpecifiedCommunityPage() : ReqSpecifiedCommunityPage(nullptr) {}
  ~ReqSpecifiedCommunityPage() override;
  explicit constexpr ReqSpecifiedCommunityPage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSpecifiedCommunityPage(const ReqSpecifiedCommunityPage& from);
  ReqSpecifiedCommunityPage(ReqSpecifiedCommunityPage&& from) noexcept
    : ReqSpecifiedCommunityPage() {
    *this = ::std::move(from);
  }

  inline ReqSpecifiedCommunityPage& operator=(const ReqSpecifiedCommunityPage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSpecifiedCommunityPage& operator=(ReqSpecifiedCommunityPage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSpecifiedCommunityPage& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSpecifiedCommunityPage* internal_default_instance() {
    return reinterpret_cast<const ReqSpecifiedCommunityPage*>(
               &_ReqSpecifiedCommunityPage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    139;

  friend void swap(ReqSpecifiedCommunityPage& a, ReqSpecifiedCommunityPage& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSpecifiedCommunityPage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSpecifiedCommunityPage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSpecifiedCommunityPage* New() const final {
    return new ReqSpecifiedCommunityPage();
  }

  ReqSpecifiedCommunityPage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSpecifiedCommunityPage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSpecifiedCommunityPage& from);
  void MergeFrom(const ReqSpecifiedCommunityPage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSpecifiedCommunityPage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSpecifiedCommunityPage";
  }
  protected:
  explicit ReqSpecifiedCommunityPage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kSortTypeFieldNumber = 2,
    kShowOnlySatisfyRulesFieldNumber = 3,
    kHideMemberIsFullFieldNumber = 4,
    kPageNoFieldNumber = 5,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 sort_type = 2;
  void clear_sort_type();
  ::PROTOBUF_NAMESPACE_ID::int32 sort_type() const;
  void set_sort_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sort_type() const;
  void _internal_set_sort_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 show_only_satisfy_rules = 3;
  void clear_show_only_satisfy_rules();
  ::PROTOBUF_NAMESPACE_ID::int32 show_only_satisfy_rules() const;
  void set_show_only_satisfy_rules(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_show_only_satisfy_rules() const;
  void _internal_set_show_only_satisfy_rules(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 hide_member_is_full = 4;
  void clear_hide_member_is_full();
  ::PROTOBUF_NAMESPACE_ID::int32 hide_member_is_full() const;
  void set_hide_member_is_full(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hide_member_is_full() const;
  void _internal_set_hide_member_is_full(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 page_no = 5;
  void clear_page_no();
  ::PROTOBUF_NAMESPACE_ID::int32 page_no() const;
  void set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_page_no() const;
  void _internal_set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSpecifiedCommunityPage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sort_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 show_only_satisfy_rules_;
  ::PROTOBUF_NAMESPACE_ID::int32 hide_member_is_full_;
  ::PROTOBUF_NAMESPACE_ID::int32 page_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSpecifiedCommunityPage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSpecifiedCommunityPage) */ {
 public:
  inline AckSpecifiedCommunityPage() : AckSpecifiedCommunityPage(nullptr) {}
  ~AckSpecifiedCommunityPage() override;
  explicit constexpr AckSpecifiedCommunityPage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSpecifiedCommunityPage(const AckSpecifiedCommunityPage& from);
  AckSpecifiedCommunityPage(AckSpecifiedCommunityPage&& from) noexcept
    : AckSpecifiedCommunityPage() {
    *this = ::std::move(from);
  }

  inline AckSpecifiedCommunityPage& operator=(const AckSpecifiedCommunityPage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSpecifiedCommunityPage& operator=(AckSpecifiedCommunityPage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSpecifiedCommunityPage& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSpecifiedCommunityPage* internal_default_instance() {
    return reinterpret_cast<const AckSpecifiedCommunityPage*>(
               &_AckSpecifiedCommunityPage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    140;

  friend void swap(AckSpecifiedCommunityPage& a, AckSpecifiedCommunityPage& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSpecifiedCommunityPage* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSpecifiedCommunityPage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSpecifiedCommunityPage* New() const final {
    return new AckSpecifiedCommunityPage();
  }

  AckSpecifiedCommunityPage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSpecifiedCommunityPage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSpecifiedCommunityPage& from);
  void MergeFrom(const AckSpecifiedCommunityPage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSpecifiedCommunityPage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSpecifiedCommunityPage";
  }
  protected:
  explicit AckSpecifiedCommunityPage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityInfoListFieldNumber = 4,
    kEventCodeFieldNumber = 1,
    kCurPageNoFieldNumber = 2,
    kTotalPageNoFieldNumber = 3,
  };
  // repeated .KWMsg.CommunityInfo community_info_list = 4;
  int community_info_list_size() const;
  private:
  int _internal_community_info_list_size() const;
  public:
  void clear_community_info_list();
  ::KWMsg::CommunityInfo* mutable_community_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityInfo >*
      mutable_community_info_list();
  private:
  const ::KWMsg::CommunityInfo& _internal_community_info_list(int index) const;
  ::KWMsg::CommunityInfo* _internal_add_community_info_list();
  public:
  const ::KWMsg::CommunityInfo& community_info_list(int index) const;
  ::KWMsg::CommunityInfo* add_community_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityInfo >&
      community_info_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 cur_page_no = 2;
  void clear_cur_page_no();
  ::PROTOBUF_NAMESPACE_ID::int32 cur_page_no() const;
  void set_cur_page_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cur_page_no() const;
  void _internal_set_cur_page_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 total_page_no = 3;
  void clear_total_page_no();
  ::PROTOBUF_NAMESPACE_ID::int32 total_page_no() const;
  void set_total_page_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_total_page_no() const;
  void _internal_set_total_page_no(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSpecifiedCommunityPage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityInfo > community_info_list_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 cur_page_no_;
  ::PROTOBUF_NAMESPACE_ID::int32 total_page_no_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqQuickJoinCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqQuickJoinCommunity) */ {
 public:
  inline ReqQuickJoinCommunity() : ReqQuickJoinCommunity(nullptr) {}
  ~ReqQuickJoinCommunity() override;
  explicit constexpr ReqQuickJoinCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqQuickJoinCommunity(const ReqQuickJoinCommunity& from);
  ReqQuickJoinCommunity(ReqQuickJoinCommunity&& from) noexcept
    : ReqQuickJoinCommunity() {
    *this = ::std::move(from);
  }

  inline ReqQuickJoinCommunity& operator=(const ReqQuickJoinCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqQuickJoinCommunity& operator=(ReqQuickJoinCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqQuickJoinCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqQuickJoinCommunity* internal_default_instance() {
    return reinterpret_cast<const ReqQuickJoinCommunity*>(
               &_ReqQuickJoinCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    141;

  friend void swap(ReqQuickJoinCommunity& a, ReqQuickJoinCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqQuickJoinCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqQuickJoinCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqQuickJoinCommunity* New() const final {
    return new ReqQuickJoinCommunity();
  }

  ReqQuickJoinCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqQuickJoinCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqQuickJoinCommunity& from);
  void MergeFrom(const ReqQuickJoinCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqQuickJoinCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqQuickJoinCommunity";
  }
  protected:
  explicit ReqQuickJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqQuickJoinCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckQuickJoinCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckQuickJoinCommunity) */ {
 public:
  inline AckQuickJoinCommunity() : AckQuickJoinCommunity(nullptr) {}
  ~AckQuickJoinCommunity() override;
  explicit constexpr AckQuickJoinCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckQuickJoinCommunity(const AckQuickJoinCommunity& from);
  AckQuickJoinCommunity(AckQuickJoinCommunity&& from) noexcept
    : AckQuickJoinCommunity() {
    *this = ::std::move(from);
  }

  inline AckQuickJoinCommunity& operator=(const AckQuickJoinCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckQuickJoinCommunity& operator=(AckQuickJoinCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckQuickJoinCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckQuickJoinCommunity* internal_default_instance() {
    return reinterpret_cast<const AckQuickJoinCommunity*>(
               &_AckQuickJoinCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    142;

  friend void swap(AckQuickJoinCommunity& a, AckQuickJoinCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(AckQuickJoinCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckQuickJoinCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckQuickJoinCommunity* New() const final {
    return new AckQuickJoinCommunity();
  }

  AckQuickJoinCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckQuickJoinCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckQuickJoinCommunity& from);
  void MergeFrom(const AckQuickJoinCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckQuickJoinCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckQuickJoinCommunity";
  }
  protected:
  explicit AckQuickJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityChatChannelIdFieldNumber = 4,
    kEventCodeFieldNumber = 1,
    kCommunityIdFieldNumber = 2,
    kPositionFieldNumber = 3,
  };
  // bytes community_chat_channel_id = 4;
  void clear_community_chat_channel_id();
  const std::string& community_chat_channel_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_chat_channel_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_chat_channel_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_chat_channel_id();
  void set_allocated_community_chat_channel_id(std::string* community_chat_channel_id);
  private:
  const std::string& _internal_community_chat_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_chat_channel_id(const std::string& value);
  std::string* _internal_mutable_community_chat_channel_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 community_id = 2;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.ECommunityMemberPosition position = 3;
  void clear_position();
  ::KWMsg::ECommunityMemberPosition position() const;
  void set_position(::KWMsg::ECommunityMemberPosition value);
  private:
  ::KWMsg::ECommunityMemberPosition _internal_position() const;
  void _internal_set_position(::KWMsg::ECommunityMemberPosition value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckQuickJoinCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_chat_channel_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  int position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqApplyJoinCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqApplyJoinCommunity) */ {
 public:
  inline ReqApplyJoinCommunity() : ReqApplyJoinCommunity(nullptr) {}
  ~ReqApplyJoinCommunity() override;
  explicit constexpr ReqApplyJoinCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqApplyJoinCommunity(const ReqApplyJoinCommunity& from);
  ReqApplyJoinCommunity(ReqApplyJoinCommunity&& from) noexcept
    : ReqApplyJoinCommunity() {
    *this = ::std::move(from);
  }

  inline ReqApplyJoinCommunity& operator=(const ReqApplyJoinCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqApplyJoinCommunity& operator=(ReqApplyJoinCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqApplyJoinCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqApplyJoinCommunity* internal_default_instance() {
    return reinterpret_cast<const ReqApplyJoinCommunity*>(
               &_ReqApplyJoinCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    143;

  friend void swap(ReqApplyJoinCommunity& a, ReqApplyJoinCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqApplyJoinCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqApplyJoinCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqApplyJoinCommunity* New() const final {
    return new ReqApplyJoinCommunity();
  }

  ReqApplyJoinCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqApplyJoinCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqApplyJoinCommunity& from);
  void MergeFrom(const ReqApplyJoinCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqApplyJoinCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqApplyJoinCommunity";
  }
  protected:
  explicit ReqApplyJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kCommunityIdFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 community_id = 2;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqApplyJoinCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckApplyJoinCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckApplyJoinCommunity) */ {
 public:
  inline AckApplyJoinCommunity() : AckApplyJoinCommunity(nullptr) {}
  ~AckApplyJoinCommunity() override;
  explicit constexpr AckApplyJoinCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckApplyJoinCommunity(const AckApplyJoinCommunity& from);
  AckApplyJoinCommunity(AckApplyJoinCommunity&& from) noexcept
    : AckApplyJoinCommunity() {
    *this = ::std::move(from);
  }

  inline AckApplyJoinCommunity& operator=(const AckApplyJoinCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckApplyJoinCommunity& operator=(AckApplyJoinCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckApplyJoinCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckApplyJoinCommunity* internal_default_instance() {
    return reinterpret_cast<const AckApplyJoinCommunity*>(
               &_AckApplyJoinCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    144;

  friend void swap(AckApplyJoinCommunity& a, AckApplyJoinCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(AckApplyJoinCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckApplyJoinCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckApplyJoinCommunity* New() const final {
    return new AckApplyJoinCommunity();
  }

  AckApplyJoinCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckApplyJoinCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckApplyJoinCommunity& from);
  void MergeFrom(const AckApplyJoinCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckApplyJoinCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckApplyJoinCommunity";
  }
  protected:
  explicit AckApplyJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityChatChannelIdFieldNumber = 4,
    kEventCodeFieldNumber = 1,
    kCommunityIdFieldNumber = 2,
    kPositionFieldNumber = 3,
  };
  // bytes community_chat_channel_id = 4;
  void clear_community_chat_channel_id();
  const std::string& community_chat_channel_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_chat_channel_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_chat_channel_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_chat_channel_id();
  void set_allocated_community_chat_channel_id(std::string* community_chat_channel_id);
  private:
  const std::string& _internal_community_chat_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_chat_channel_id(const std::string& value);
  std::string* _internal_mutable_community_chat_channel_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 community_id = 2;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.ECommunityMemberPosition position = 3;
  void clear_position();
  ::KWMsg::ECommunityMemberPosition position() const;
  void set_position(::KWMsg::ECommunityMemberPosition value);
  private:
  ::KWMsg::ECommunityMemberPosition _internal_position() const;
  void _internal_set_position(::KWMsg::ECommunityMemberPosition value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckApplyJoinCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_chat_channel_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  int position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCancelJoinCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCancelJoinCommunity) */ {
 public:
  inline ReqCancelJoinCommunity() : ReqCancelJoinCommunity(nullptr) {}
  ~ReqCancelJoinCommunity() override;
  explicit constexpr ReqCancelJoinCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCancelJoinCommunity(const ReqCancelJoinCommunity& from);
  ReqCancelJoinCommunity(ReqCancelJoinCommunity&& from) noexcept
    : ReqCancelJoinCommunity() {
    *this = ::std::move(from);
  }

  inline ReqCancelJoinCommunity& operator=(const ReqCancelJoinCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCancelJoinCommunity& operator=(ReqCancelJoinCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCancelJoinCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCancelJoinCommunity* internal_default_instance() {
    return reinterpret_cast<const ReqCancelJoinCommunity*>(
               &_ReqCancelJoinCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    145;

  friend void swap(ReqCancelJoinCommunity& a, ReqCancelJoinCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCancelJoinCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCancelJoinCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCancelJoinCommunity* New() const final {
    return new ReqCancelJoinCommunity();
  }

  ReqCancelJoinCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCancelJoinCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCancelJoinCommunity& from);
  void MergeFrom(const ReqCancelJoinCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCancelJoinCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCancelJoinCommunity";
  }
  protected:
  explicit ReqCancelJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kCommunityIdFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 community_id = 2;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCancelJoinCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCancelJoinCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCancelJoinCommunity) */ {
 public:
  inline AckCancelJoinCommunity() : AckCancelJoinCommunity(nullptr) {}
  ~AckCancelJoinCommunity() override;
  explicit constexpr AckCancelJoinCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCancelJoinCommunity(const AckCancelJoinCommunity& from);
  AckCancelJoinCommunity(AckCancelJoinCommunity&& from) noexcept
    : AckCancelJoinCommunity() {
    *this = ::std::move(from);
  }

  inline AckCancelJoinCommunity& operator=(const AckCancelJoinCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCancelJoinCommunity& operator=(AckCancelJoinCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCancelJoinCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCancelJoinCommunity* internal_default_instance() {
    return reinterpret_cast<const AckCancelJoinCommunity*>(
               &_AckCancelJoinCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    146;

  friend void swap(AckCancelJoinCommunity& a, AckCancelJoinCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCancelJoinCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCancelJoinCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCancelJoinCommunity* New() const final {
    return new AckCancelJoinCommunity();
  }

  AckCancelJoinCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCancelJoinCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCancelJoinCommunity& from);
  void MergeFrom(const AckCancelJoinCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCancelJoinCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCancelJoinCommunity";
  }
  protected:
  explicit AckCancelJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCancelJoinCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqAppliedCommunityList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAppliedCommunityList) */ {
 public:
  inline ReqAppliedCommunityList() : ReqAppliedCommunityList(nullptr) {}
  ~ReqAppliedCommunityList() override;
  explicit constexpr ReqAppliedCommunityList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAppliedCommunityList(const ReqAppliedCommunityList& from);
  ReqAppliedCommunityList(ReqAppliedCommunityList&& from) noexcept
    : ReqAppliedCommunityList() {
    *this = ::std::move(from);
  }

  inline ReqAppliedCommunityList& operator=(const ReqAppliedCommunityList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAppliedCommunityList& operator=(ReqAppliedCommunityList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAppliedCommunityList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAppliedCommunityList* internal_default_instance() {
    return reinterpret_cast<const ReqAppliedCommunityList*>(
               &_ReqAppliedCommunityList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    147;

  friend void swap(ReqAppliedCommunityList& a, ReqAppliedCommunityList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAppliedCommunityList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAppliedCommunityList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAppliedCommunityList* New() const final {
    return new ReqAppliedCommunityList();
  }

  ReqAppliedCommunityList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAppliedCommunityList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAppliedCommunityList& from);
  void MergeFrom(const ReqAppliedCommunityList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAppliedCommunityList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAppliedCommunityList";
  }
  protected:
  explicit ReqAppliedCommunityList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAppliedCommunityList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckAppliedCommunityList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckAppliedCommunityList) */ {
 public:
  inline AckAppliedCommunityList() : AckAppliedCommunityList(nullptr) {}
  ~AckAppliedCommunityList() override;
  explicit constexpr AckAppliedCommunityList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckAppliedCommunityList(const AckAppliedCommunityList& from);
  AckAppliedCommunityList(AckAppliedCommunityList&& from) noexcept
    : AckAppliedCommunityList() {
    *this = ::std::move(from);
  }

  inline AckAppliedCommunityList& operator=(const AckAppliedCommunityList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckAppliedCommunityList& operator=(AckAppliedCommunityList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckAppliedCommunityList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckAppliedCommunityList* internal_default_instance() {
    return reinterpret_cast<const AckAppliedCommunityList*>(
               &_AckAppliedCommunityList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    148;

  friend void swap(AckAppliedCommunityList& a, AckAppliedCommunityList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckAppliedCommunityList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckAppliedCommunityList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckAppliedCommunityList* New() const final {
    return new AckAppliedCommunityList();
  }

  AckAppliedCommunityList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckAppliedCommunityList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckAppliedCommunityList& from);
  void MergeFrom(const AckAppliedCommunityList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckAppliedCommunityList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckAppliedCommunityList";
  }
  protected:
  explicit AckAppliedCommunityList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppliedCommunityInfoListFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.AppliedCommunityInfo applied_community_info_list = 2;
  int applied_community_info_list_size() const;
  private:
  int _internal_applied_community_info_list_size() const;
  public:
  void clear_applied_community_info_list();
  ::KWMsg::AppliedCommunityInfo* mutable_applied_community_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedCommunityInfo >*
      mutable_applied_community_info_list();
  private:
  const ::KWMsg::AppliedCommunityInfo& _internal_applied_community_info_list(int index) const;
  ::KWMsg::AppliedCommunityInfo* _internal_add_applied_community_info_list();
  public:
  const ::KWMsg::AppliedCommunityInfo& applied_community_info_list(int index) const;
  ::KWMsg::AppliedCommunityInfo* add_applied_community_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedCommunityInfo >&
      applied_community_info_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckAppliedCommunityList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedCommunityInfo > applied_community_info_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqModifyNameAndDeclaration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqModifyNameAndDeclaration) */ {
 public:
  inline ReqModifyNameAndDeclaration() : ReqModifyNameAndDeclaration(nullptr) {}
  ~ReqModifyNameAndDeclaration() override;
  explicit constexpr ReqModifyNameAndDeclaration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqModifyNameAndDeclaration(const ReqModifyNameAndDeclaration& from);
  ReqModifyNameAndDeclaration(ReqModifyNameAndDeclaration&& from) noexcept
    : ReqModifyNameAndDeclaration() {
    *this = ::std::move(from);
  }

  inline ReqModifyNameAndDeclaration& operator=(const ReqModifyNameAndDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqModifyNameAndDeclaration& operator=(ReqModifyNameAndDeclaration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqModifyNameAndDeclaration& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqModifyNameAndDeclaration* internal_default_instance() {
    return reinterpret_cast<const ReqModifyNameAndDeclaration*>(
               &_ReqModifyNameAndDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    149;

  friend void swap(ReqModifyNameAndDeclaration& a, ReqModifyNameAndDeclaration& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqModifyNameAndDeclaration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqModifyNameAndDeclaration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqModifyNameAndDeclaration* New() const final {
    return new ReqModifyNameAndDeclaration();
  }

  ReqModifyNameAndDeclaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqModifyNameAndDeclaration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqModifyNameAndDeclaration& from);
  void MergeFrom(const ReqModifyNameAndDeclaration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqModifyNameAndDeclaration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqModifyNameAndDeclaration";
  }
  protected:
  explicit ReqModifyNameAndDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityNameFieldNumber = 3,
    kCommunityDeclarationFieldNumber = 4,
    kPlayerIdFieldNumber = 1,
    kCommunityIdFieldNumber = 2,
  };
  // bytes community_name = 3;
  void clear_community_name();
  const std::string& community_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_name();
  void set_allocated_community_name(std::string* community_name);
  private:
  const std::string& _internal_community_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_name(const std::string& value);
  std::string* _internal_mutable_community_name();
  public:

  // bytes community_declaration = 4;
  void clear_community_declaration();
  const std::string& community_declaration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_declaration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_declaration();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_declaration();
  void set_allocated_community_declaration(std::string* community_declaration);
  private:
  const std::string& _internal_community_declaration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_declaration(const std::string& value);
  std::string* _internal_mutable_community_declaration();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 community_id = 2;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqModifyNameAndDeclaration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_declaration_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckModifyNameAndDeclaration final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckModifyNameAndDeclaration) */ {
 public:
  inline AckModifyNameAndDeclaration() : AckModifyNameAndDeclaration(nullptr) {}
  ~AckModifyNameAndDeclaration() override;
  explicit constexpr AckModifyNameAndDeclaration(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckModifyNameAndDeclaration(const AckModifyNameAndDeclaration& from);
  AckModifyNameAndDeclaration(AckModifyNameAndDeclaration&& from) noexcept
    : AckModifyNameAndDeclaration() {
    *this = ::std::move(from);
  }

  inline AckModifyNameAndDeclaration& operator=(const AckModifyNameAndDeclaration& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckModifyNameAndDeclaration& operator=(AckModifyNameAndDeclaration&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckModifyNameAndDeclaration& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckModifyNameAndDeclaration* internal_default_instance() {
    return reinterpret_cast<const AckModifyNameAndDeclaration*>(
               &_AckModifyNameAndDeclaration_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    150;

  friend void swap(AckModifyNameAndDeclaration& a, AckModifyNameAndDeclaration& b) {
    a.Swap(&b);
  }
  inline void Swap(AckModifyNameAndDeclaration* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckModifyNameAndDeclaration* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckModifyNameAndDeclaration* New() const final {
    return new AckModifyNameAndDeclaration();
  }

  AckModifyNameAndDeclaration* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckModifyNameAndDeclaration>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckModifyNameAndDeclaration& from);
  void MergeFrom(const AckModifyNameAndDeclaration& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckModifyNameAndDeclaration* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckModifyNameAndDeclaration";
  }
  protected:
  explicit AckModifyNameAndDeclaration(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityNameFieldNumber = 2,
    kCommunityDeclarationFieldNumber = 3,
    kEventCodeFieldNumber = 1,
  };
  // bytes community_name = 2;
  void clear_community_name();
  const std::string& community_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_name();
  void set_allocated_community_name(std::string* community_name);
  private:
  const std::string& _internal_community_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_name(const std::string& value);
  std::string* _internal_mutable_community_name();
  public:

  // bytes community_declaration = 3;
  void clear_community_declaration();
  const std::string& community_declaration() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_declaration(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_declaration();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_declaration();
  void set_allocated_community_declaration(std::string* community_declaration);
  private:
  const std::string& _internal_community_declaration() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_declaration(const std::string& value);
  std::string* _internal_mutable_community_declaration();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckModifyNameAndDeclaration)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_declaration_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqModifyFlagAndIcon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqModifyFlagAndIcon) */ {
 public:
  inline ReqModifyFlagAndIcon() : ReqModifyFlagAndIcon(nullptr) {}
  ~ReqModifyFlagAndIcon() override;
  explicit constexpr ReqModifyFlagAndIcon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqModifyFlagAndIcon(const ReqModifyFlagAndIcon& from);
  ReqModifyFlagAndIcon(ReqModifyFlagAndIcon&& from) noexcept
    : ReqModifyFlagAndIcon() {
    *this = ::std::move(from);
  }

  inline ReqModifyFlagAndIcon& operator=(const ReqModifyFlagAndIcon& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqModifyFlagAndIcon& operator=(ReqModifyFlagAndIcon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqModifyFlagAndIcon& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqModifyFlagAndIcon* internal_default_instance() {
    return reinterpret_cast<const ReqModifyFlagAndIcon*>(
               &_ReqModifyFlagAndIcon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    151;

  friend void swap(ReqModifyFlagAndIcon& a, ReqModifyFlagAndIcon& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqModifyFlagAndIcon* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqModifyFlagAndIcon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqModifyFlagAndIcon* New() const final {
    return new ReqModifyFlagAndIcon();
  }

  ReqModifyFlagAndIcon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqModifyFlagAndIcon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqModifyFlagAndIcon& from);
  void MergeFrom(const ReqModifyFlagAndIcon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqModifyFlagAndIcon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqModifyFlagAndIcon";
  }
  protected:
  explicit ReqModifyFlagAndIcon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityFlagFieldNumber = 3,
    kCommunityIconFieldNumber = 4,
    kPlayerIdFieldNumber = 1,
    kCommunityIdFieldNumber = 2,
  };
  // bytes community_flag = 3;
  void clear_community_flag();
  const std::string& community_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_flag();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_flag();
  void set_allocated_community_flag(std::string* community_flag);
  private:
  const std::string& _internal_community_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_flag(const std::string& value);
  std::string* _internal_mutable_community_flag();
  public:

  // bytes community_icon = 4;
  void clear_community_icon();
  const std::string& community_icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_icon();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_icon();
  void set_allocated_community_icon(std::string* community_icon);
  private:
  const std::string& _internal_community_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_icon(const std::string& value);
  std::string* _internal_mutable_community_icon();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 community_id = 2;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqModifyFlagAndIcon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_icon_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckModifyFlagAndIcon final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckModifyFlagAndIcon) */ {
 public:
  inline AckModifyFlagAndIcon() : AckModifyFlagAndIcon(nullptr) {}
  ~AckModifyFlagAndIcon() override;
  explicit constexpr AckModifyFlagAndIcon(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckModifyFlagAndIcon(const AckModifyFlagAndIcon& from);
  AckModifyFlagAndIcon(AckModifyFlagAndIcon&& from) noexcept
    : AckModifyFlagAndIcon() {
    *this = ::std::move(from);
  }

  inline AckModifyFlagAndIcon& operator=(const AckModifyFlagAndIcon& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckModifyFlagAndIcon& operator=(AckModifyFlagAndIcon&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckModifyFlagAndIcon& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckModifyFlagAndIcon* internal_default_instance() {
    return reinterpret_cast<const AckModifyFlagAndIcon*>(
               &_AckModifyFlagAndIcon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    152;

  friend void swap(AckModifyFlagAndIcon& a, AckModifyFlagAndIcon& b) {
    a.Swap(&b);
  }
  inline void Swap(AckModifyFlagAndIcon* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckModifyFlagAndIcon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckModifyFlagAndIcon* New() const final {
    return new AckModifyFlagAndIcon();
  }

  AckModifyFlagAndIcon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckModifyFlagAndIcon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckModifyFlagAndIcon& from);
  void MergeFrom(const AckModifyFlagAndIcon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckModifyFlagAndIcon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckModifyFlagAndIcon";
  }
  protected:
  explicit AckModifyFlagAndIcon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityFlagFieldNumber = 2,
    kCommunityIconFieldNumber = 3,
    kEventCodeFieldNumber = 1,
  };
  // bytes community_flag = 2;
  void clear_community_flag();
  const std::string& community_flag() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_flag(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_flag();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_flag();
  void set_allocated_community_flag(std::string* community_flag);
  private:
  const std::string& _internal_community_flag() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_flag(const std::string& value);
  std::string* _internal_mutable_community_flag();
  public:

  // bytes community_icon = 3;
  void clear_community_icon();
  const std::string& community_icon() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_icon(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_icon();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_icon();
  void set_allocated_community_icon(std::string* community_icon);
  private:
  const std::string& _internal_community_icon() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_icon(const std::string& value);
  std::string* _internal_mutable_community_icon();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckModifyFlagAndIcon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_flag_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_icon_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqModifyApprovedRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqModifyApprovedRules) */ {
 public:
  inline ReqModifyApprovedRules() : ReqModifyApprovedRules(nullptr) {}
  ~ReqModifyApprovedRules() override;
  explicit constexpr ReqModifyApprovedRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqModifyApprovedRules(const ReqModifyApprovedRules& from);
  ReqModifyApprovedRules(ReqModifyApprovedRules&& from) noexcept
    : ReqModifyApprovedRules() {
    *this = ::std::move(from);
  }

  inline ReqModifyApprovedRules& operator=(const ReqModifyApprovedRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqModifyApprovedRules& operator=(ReqModifyApprovedRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqModifyApprovedRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqModifyApprovedRules* internal_default_instance() {
    return reinterpret_cast<const ReqModifyApprovedRules*>(
               &_ReqModifyApprovedRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    153;

  friend void swap(ReqModifyApprovedRules& a, ReqModifyApprovedRules& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqModifyApprovedRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqModifyApprovedRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqModifyApprovedRules* New() const final {
    return new ReqModifyApprovedRules();
  }

  ReqModifyApprovedRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqModifyApprovedRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqModifyApprovedRules& from);
  void MergeFrom(const ReqModifyApprovedRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqModifyApprovedRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqModifyApprovedRules";
  }
  protected:
  explicit ReqModifyApprovedRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kCommunityIdFieldNumber = 2,
    kCommunityApproveTypeFieldNumber = 3,
    kLevelRestrictionFieldNumber = 4,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 community_id = 2;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 community_approve_type = 3;
  void clear_community_approve_type();
  ::PROTOBUF_NAMESPACE_ID::int32 community_approve_type() const;
  void set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_approve_type() const;
  void _internal_set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level_restriction = 4;
  void clear_level_restriction();
  ::PROTOBUF_NAMESPACE_ID::int32 level_restriction() const;
  void set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level_restriction() const;
  void _internal_set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqModifyApprovedRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_approve_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_restriction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckModifyApprovedRules final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckModifyApprovedRules) */ {
 public:
  inline AckModifyApprovedRules() : AckModifyApprovedRules(nullptr) {}
  ~AckModifyApprovedRules() override;
  explicit constexpr AckModifyApprovedRules(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckModifyApprovedRules(const AckModifyApprovedRules& from);
  AckModifyApprovedRules(AckModifyApprovedRules&& from) noexcept
    : AckModifyApprovedRules() {
    *this = ::std::move(from);
  }

  inline AckModifyApprovedRules& operator=(const AckModifyApprovedRules& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckModifyApprovedRules& operator=(AckModifyApprovedRules&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckModifyApprovedRules& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckModifyApprovedRules* internal_default_instance() {
    return reinterpret_cast<const AckModifyApprovedRules*>(
               &_AckModifyApprovedRules_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    154;

  friend void swap(AckModifyApprovedRules& a, AckModifyApprovedRules& b) {
    a.Swap(&b);
  }
  inline void Swap(AckModifyApprovedRules* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckModifyApprovedRules* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckModifyApprovedRules* New() const final {
    return new AckModifyApprovedRules();
  }

  AckModifyApprovedRules* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckModifyApprovedRules>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckModifyApprovedRules& from);
  void MergeFrom(const AckModifyApprovedRules& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckModifyApprovedRules* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckModifyApprovedRules";
  }
  protected:
  explicit AckModifyApprovedRules(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
    kCommunityApproveTypeFieldNumber = 2,
    kLevelRestrictionFieldNumber = 3,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 community_approve_type = 2;
  void clear_community_approve_type();
  ::PROTOBUF_NAMESPACE_ID::int32 community_approve_type() const;
  void set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_approve_type() const;
  void _internal_set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 level_restriction = 3;
  void clear_level_restriction();
  ::PROTOBUF_NAMESPACE_ID::int32 level_restriction() const;
  void set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level_restriction() const;
  void _internal_set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckModifyApprovedRules)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_approve_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_restriction_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqPromotionOrDemotionManager final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqPromotionOrDemotionManager) */ {
 public:
  inline ReqPromotionOrDemotionManager() : ReqPromotionOrDemotionManager(nullptr) {}
  ~ReqPromotionOrDemotionManager() override;
  explicit constexpr ReqPromotionOrDemotionManager(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqPromotionOrDemotionManager(const ReqPromotionOrDemotionManager& from);
  ReqPromotionOrDemotionManager(ReqPromotionOrDemotionManager&& from) noexcept
    : ReqPromotionOrDemotionManager() {
    *this = ::std::move(from);
  }

  inline ReqPromotionOrDemotionManager& operator=(const ReqPromotionOrDemotionManager& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqPromotionOrDemotionManager& operator=(ReqPromotionOrDemotionManager&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqPromotionOrDemotionManager& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqPromotionOrDemotionManager* internal_default_instance() {
    return reinterpret_cast<const ReqPromotionOrDemotionManager*>(
               &_ReqPromotionOrDemotionManager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    155;

  friend void swap(ReqPromotionOrDemotionManager& a, ReqPromotionOrDemotionManager& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqPromotionOrDemotionManager* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqPromotionOrDemotionManager* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqPromotionOrDemotionManager* New() const final {
    return new ReqPromotionOrDemotionManager();
  }

  ReqPromotionOrDemotionManager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqPromotionOrDemotionManager>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqPromotionOrDemotionManager& from);
  void MergeFrom(const ReqPromotionOrDemotionManager& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqPromotionOrDemotionManager* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqPromotionOrDemotionManager";
  }
  protected:
  explicit ReqPromotionOrDemotionManager(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kCommunityIdFieldNumber = 3,
    kOptTypeFieldNumber = 4,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::KWMsg::Ident& target_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_target_id();
  ::KWMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::KWMsg::Ident* target_id);
  private:
  const ::KWMsg::Ident& _internal_target_id() const;
  ::KWMsg::Ident* _internal_mutable_target_id();
  public:
  void unsafe_arena_set_allocated_target_id(
      ::KWMsg::Ident* target_id);
  ::KWMsg::Ident* unsafe_arena_release_target_id();

  // int32 community_id = 3;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 opt_type = 4;
  void clear_opt_type();
  ::PROTOBUF_NAMESPACE_ID::int32 opt_type() const;
  void set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opt_type() const;
  void _internal_set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqPromotionOrDemotionManager)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* target_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 opt_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckPromotionOrDemotionManager final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckPromotionOrDemotionManager) */ {
 public:
  inline AckPromotionOrDemotionManager() : AckPromotionOrDemotionManager(nullptr) {}
  ~AckPromotionOrDemotionManager() override;
  explicit constexpr AckPromotionOrDemotionManager(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckPromotionOrDemotionManager(const AckPromotionOrDemotionManager& from);
  AckPromotionOrDemotionManager(AckPromotionOrDemotionManager&& from) noexcept
    : AckPromotionOrDemotionManager() {
    *this = ::std::move(from);
  }

  inline AckPromotionOrDemotionManager& operator=(const AckPromotionOrDemotionManager& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckPromotionOrDemotionManager& operator=(AckPromotionOrDemotionManager&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckPromotionOrDemotionManager& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckPromotionOrDemotionManager* internal_default_instance() {
    return reinterpret_cast<const AckPromotionOrDemotionManager*>(
               &_AckPromotionOrDemotionManager_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    156;

  friend void swap(AckPromotionOrDemotionManager& a, AckPromotionOrDemotionManager& b) {
    a.Swap(&b);
  }
  inline void Swap(AckPromotionOrDemotionManager* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckPromotionOrDemotionManager* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckPromotionOrDemotionManager* New() const final {
    return new AckPromotionOrDemotionManager();
  }

  AckPromotionOrDemotionManager* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckPromotionOrDemotionManager>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckPromotionOrDemotionManager& from);
  void MergeFrom(const AckPromotionOrDemotionManager& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckPromotionOrDemotionManager* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckPromotionOrDemotionManager";
  }
  protected:
  explicit AckPromotionOrDemotionManager(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckPromotionOrDemotionManager)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqAppliedPlayerList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAppliedPlayerList) */ {
 public:
  inline ReqAppliedPlayerList() : ReqAppliedPlayerList(nullptr) {}
  ~ReqAppliedPlayerList() override;
  explicit constexpr ReqAppliedPlayerList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAppliedPlayerList(const ReqAppliedPlayerList& from);
  ReqAppliedPlayerList(ReqAppliedPlayerList&& from) noexcept
    : ReqAppliedPlayerList() {
    *this = ::std::move(from);
  }

  inline ReqAppliedPlayerList& operator=(const ReqAppliedPlayerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAppliedPlayerList& operator=(ReqAppliedPlayerList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAppliedPlayerList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAppliedPlayerList* internal_default_instance() {
    return reinterpret_cast<const ReqAppliedPlayerList*>(
               &_ReqAppliedPlayerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    157;

  friend void swap(ReqAppliedPlayerList& a, ReqAppliedPlayerList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAppliedPlayerList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAppliedPlayerList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAppliedPlayerList* New() const final {
    return new ReqAppliedPlayerList();
  }

  ReqAppliedPlayerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAppliedPlayerList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAppliedPlayerList& from);
  void MergeFrom(const ReqAppliedPlayerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAppliedPlayerList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAppliedPlayerList";
  }
  protected:
  explicit ReqAppliedPlayerList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kCommunityIdFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 community_id = 2;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAppliedPlayerList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckAppliedPlayerList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckAppliedPlayerList) */ {
 public:
  inline AckAppliedPlayerList() : AckAppliedPlayerList(nullptr) {}
  ~AckAppliedPlayerList() override;
  explicit constexpr AckAppliedPlayerList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckAppliedPlayerList(const AckAppliedPlayerList& from);
  AckAppliedPlayerList(AckAppliedPlayerList&& from) noexcept
    : AckAppliedPlayerList() {
    *this = ::std::move(from);
  }

  inline AckAppliedPlayerList& operator=(const AckAppliedPlayerList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckAppliedPlayerList& operator=(AckAppliedPlayerList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckAppliedPlayerList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckAppliedPlayerList* internal_default_instance() {
    return reinterpret_cast<const AckAppliedPlayerList*>(
               &_AckAppliedPlayerList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    158;

  friend void swap(AckAppliedPlayerList& a, AckAppliedPlayerList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckAppliedPlayerList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckAppliedPlayerList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckAppliedPlayerList* New() const final {
    return new AckAppliedPlayerList();
  }

  AckAppliedPlayerList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckAppliedPlayerList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckAppliedPlayerList& from);
  void MergeFrom(const AckAppliedPlayerList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckAppliedPlayerList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckAppliedPlayerList";
  }
  protected:
  explicit AckAppliedPlayerList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppliedPlayerInfoListFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.AppliedPlayerInfo applied_player_info_list = 2;
  int applied_player_info_list_size() const;
  private:
  int _internal_applied_player_info_list_size() const;
  public:
  void clear_applied_player_info_list();
  ::KWMsg::AppliedPlayerInfo* mutable_applied_player_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedPlayerInfo >*
      mutable_applied_player_info_list();
  private:
  const ::KWMsg::AppliedPlayerInfo& _internal_applied_player_info_list(int index) const;
  ::KWMsg::AppliedPlayerInfo* _internal_add_applied_player_info_list();
  public:
  const ::KWMsg::AppliedPlayerInfo& applied_player_info_list(int index) const;
  ::KWMsg::AppliedPlayerInfo* add_applied_player_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedPlayerInfo >&
      applied_player_info_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckAppliedPlayerList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedPlayerInfo > applied_player_info_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqDealWithJoinCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqDealWithJoinCommunity) */ {
 public:
  inline ReqDealWithJoinCommunity() : ReqDealWithJoinCommunity(nullptr) {}
  ~ReqDealWithJoinCommunity() override;
  explicit constexpr ReqDealWithJoinCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDealWithJoinCommunity(const ReqDealWithJoinCommunity& from);
  ReqDealWithJoinCommunity(ReqDealWithJoinCommunity&& from) noexcept
    : ReqDealWithJoinCommunity() {
    *this = ::std::move(from);
  }

  inline ReqDealWithJoinCommunity& operator=(const ReqDealWithJoinCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDealWithJoinCommunity& operator=(ReqDealWithJoinCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDealWithJoinCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDealWithJoinCommunity* internal_default_instance() {
    return reinterpret_cast<const ReqDealWithJoinCommunity*>(
               &_ReqDealWithJoinCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    159;

  friend void swap(ReqDealWithJoinCommunity& a, ReqDealWithJoinCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDealWithJoinCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDealWithJoinCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqDealWithJoinCommunity* New() const final {
    return new ReqDealWithJoinCommunity();
  }

  ReqDealWithJoinCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDealWithJoinCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqDealWithJoinCommunity& from);
  void MergeFrom(const ReqDealWithJoinCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDealWithJoinCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqDealWithJoinCommunity";
  }
  protected:
  explicit ReqDealWithJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kCommunityIdFieldNumber = 3,
    kOptTypeFieldNumber = 4,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::KWMsg::Ident& target_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_target_id();
  ::KWMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::KWMsg::Ident* target_id);
  private:
  const ::KWMsg::Ident& _internal_target_id() const;
  ::KWMsg::Ident* _internal_mutable_target_id();
  public:
  void unsafe_arena_set_allocated_target_id(
      ::KWMsg::Ident* target_id);
  ::KWMsg::Ident* unsafe_arena_release_target_id();

  // int32 community_id = 3;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 opt_type = 4;
  void clear_opt_type();
  ::PROTOBUF_NAMESPACE_ID::int32 opt_type() const;
  void set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opt_type() const;
  void _internal_set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqDealWithJoinCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* target_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 opt_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckDealWithJoinCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckDealWithJoinCommunity) */ {
 public:
  inline AckDealWithJoinCommunity() : AckDealWithJoinCommunity(nullptr) {}
  ~AckDealWithJoinCommunity() override;
  explicit constexpr AckDealWithJoinCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckDealWithJoinCommunity(const AckDealWithJoinCommunity& from);
  AckDealWithJoinCommunity(AckDealWithJoinCommunity&& from) noexcept
    : AckDealWithJoinCommunity() {
    *this = ::std::move(from);
  }

  inline AckDealWithJoinCommunity& operator=(const AckDealWithJoinCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckDealWithJoinCommunity& operator=(AckDealWithJoinCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckDealWithJoinCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckDealWithJoinCommunity* internal_default_instance() {
    return reinterpret_cast<const AckDealWithJoinCommunity*>(
               &_AckDealWithJoinCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    160;

  friend void swap(AckDealWithJoinCommunity& a, AckDealWithJoinCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(AckDealWithJoinCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckDealWithJoinCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckDealWithJoinCommunity* New() const final {
    return new AckDealWithJoinCommunity();
  }

  AckDealWithJoinCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckDealWithJoinCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckDealWithJoinCommunity& from);
  void MergeFrom(const AckDealWithJoinCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckDealWithJoinCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckDealWithJoinCommunity";
  }
  protected:
  explicit AckDealWithJoinCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckDealWithJoinCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqQuitCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqQuitCommunity) */ {
 public:
  inline ReqQuitCommunity() : ReqQuitCommunity(nullptr) {}
  ~ReqQuitCommunity() override;
  explicit constexpr ReqQuitCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqQuitCommunity(const ReqQuitCommunity& from);
  ReqQuitCommunity(ReqQuitCommunity&& from) noexcept
    : ReqQuitCommunity() {
    *this = ::std::move(from);
  }

  inline ReqQuitCommunity& operator=(const ReqQuitCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqQuitCommunity& operator=(ReqQuitCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqQuitCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqQuitCommunity* internal_default_instance() {
    return reinterpret_cast<const ReqQuitCommunity*>(
               &_ReqQuitCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    161;

  friend void swap(ReqQuitCommunity& a, ReqQuitCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqQuitCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqQuitCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqQuitCommunity* New() const final {
    return new ReqQuitCommunity();
  }

  ReqQuitCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqQuitCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqQuitCommunity& from);
  void MergeFrom(const ReqQuitCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqQuitCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqQuitCommunity";
  }
  protected:
  explicit ReqQuitCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kCommunityIdFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 community_id = 2;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqQuitCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckQuitCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckQuitCommunity) */ {
 public:
  inline AckQuitCommunity() : AckQuitCommunity(nullptr) {}
  ~AckQuitCommunity() override;
  explicit constexpr AckQuitCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckQuitCommunity(const AckQuitCommunity& from);
  AckQuitCommunity(AckQuitCommunity&& from) noexcept
    : AckQuitCommunity() {
    *this = ::std::move(from);
  }

  inline AckQuitCommunity& operator=(const AckQuitCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckQuitCommunity& operator=(AckQuitCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckQuitCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckQuitCommunity* internal_default_instance() {
    return reinterpret_cast<const AckQuitCommunity*>(
               &_AckQuitCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    162;

  friend void swap(AckQuitCommunity& a, AckQuitCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(AckQuitCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckQuitCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckQuitCommunity* New() const final {
    return new AckQuitCommunity();
  }

  AckQuitCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckQuitCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckQuitCommunity& from);
  void MergeFrom(const AckQuitCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckQuitCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckQuitCommunity";
  }
  protected:
  explicit AckQuitCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityChatChannelIdFieldNumber = 4,
    kEventCodeFieldNumber = 1,
    kCommunityIdFieldNumber = 2,
    kPositionFieldNumber = 3,
  };
  // bytes community_chat_channel_id = 4;
  void clear_community_chat_channel_id();
  const std::string& community_chat_channel_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_chat_channel_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_chat_channel_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_chat_channel_id();
  void set_allocated_community_chat_channel_id(std::string* community_chat_channel_id);
  private:
  const std::string& _internal_community_chat_channel_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_chat_channel_id(const std::string& value);
  std::string* _internal_mutable_community_chat_channel_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 community_id = 2;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.ECommunityMemberPosition position = 3;
  void clear_position();
  ::KWMsg::ECommunityMemberPosition position() const;
  void set_position(::KWMsg::ECommunityMemberPosition value);
  private:
  ::KWMsg::ECommunityMemberPosition _internal_position() const;
  void _internal_set_position(::KWMsg::ECommunityMemberPosition value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckQuitCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_chat_channel_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  int position_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqGetOutOfMyCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGetOutOfMyCommunity) */ {
 public:
  inline ReqGetOutOfMyCommunity() : ReqGetOutOfMyCommunity(nullptr) {}
  ~ReqGetOutOfMyCommunity() override;
  explicit constexpr ReqGetOutOfMyCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetOutOfMyCommunity(const ReqGetOutOfMyCommunity& from);
  ReqGetOutOfMyCommunity(ReqGetOutOfMyCommunity&& from) noexcept
    : ReqGetOutOfMyCommunity() {
    *this = ::std::move(from);
  }

  inline ReqGetOutOfMyCommunity& operator=(const ReqGetOutOfMyCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetOutOfMyCommunity& operator=(ReqGetOutOfMyCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetOutOfMyCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetOutOfMyCommunity* internal_default_instance() {
    return reinterpret_cast<const ReqGetOutOfMyCommunity*>(
               &_ReqGetOutOfMyCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    163;

  friend void swap(ReqGetOutOfMyCommunity& a, ReqGetOutOfMyCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetOutOfMyCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetOutOfMyCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGetOutOfMyCommunity* New() const final {
    return new ReqGetOutOfMyCommunity();
  }

  ReqGetOutOfMyCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetOutOfMyCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetOutOfMyCommunity& from);
  void MergeFrom(const ReqGetOutOfMyCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetOutOfMyCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGetOutOfMyCommunity";
  }
  protected:
  explicit ReqGetOutOfMyCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kCommunityIdFieldNumber = 3,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::KWMsg::Ident& target_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_target_id();
  ::KWMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::KWMsg::Ident* target_id);
  private:
  const ::KWMsg::Ident& _internal_target_id() const;
  ::KWMsg::Ident* _internal_mutable_target_id();
  public:
  void unsafe_arena_set_allocated_target_id(
      ::KWMsg::Ident* target_id);
  ::KWMsg::Ident* unsafe_arena_release_target_id();

  // int32 community_id = 3;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGetOutOfMyCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* target_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckGetOutOfMyCommunity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGetOutOfMyCommunity) */ {
 public:
  inline AckGetOutOfMyCommunity() : AckGetOutOfMyCommunity(nullptr) {}
  ~AckGetOutOfMyCommunity() override;
  explicit constexpr AckGetOutOfMyCommunity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGetOutOfMyCommunity(const AckGetOutOfMyCommunity& from);
  AckGetOutOfMyCommunity(AckGetOutOfMyCommunity&& from) noexcept
    : AckGetOutOfMyCommunity() {
    *this = ::std::move(from);
  }

  inline AckGetOutOfMyCommunity& operator=(const AckGetOutOfMyCommunity& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGetOutOfMyCommunity& operator=(AckGetOutOfMyCommunity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGetOutOfMyCommunity& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGetOutOfMyCommunity* internal_default_instance() {
    return reinterpret_cast<const AckGetOutOfMyCommunity*>(
               &_AckGetOutOfMyCommunity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    164;

  friend void swap(AckGetOutOfMyCommunity& a, AckGetOutOfMyCommunity& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGetOutOfMyCommunity* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGetOutOfMyCommunity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGetOutOfMyCommunity* New() const final {
    return new AckGetOutOfMyCommunity();
  }

  AckGetOutOfMyCommunity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGetOutOfMyCommunity>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGetOutOfMyCommunity& from);
  void MergeFrom(const AckGetOutOfMyCommunity& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGetOutOfMyCommunity* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGetOutOfMyCommunity";
  }
  protected:
  explicit AckGetOutOfMyCommunity(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGetOutOfMyCommunity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCommunitySignIn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCommunitySignIn) */ {
 public:
  inline ReqCommunitySignIn() : ReqCommunitySignIn(nullptr) {}
  ~ReqCommunitySignIn() override;
  explicit constexpr ReqCommunitySignIn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCommunitySignIn(const ReqCommunitySignIn& from);
  ReqCommunitySignIn(ReqCommunitySignIn&& from) noexcept
    : ReqCommunitySignIn() {
    *this = ::std::move(from);
  }

  inline ReqCommunitySignIn& operator=(const ReqCommunitySignIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCommunitySignIn& operator=(ReqCommunitySignIn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCommunitySignIn& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCommunitySignIn* internal_default_instance() {
    return reinterpret_cast<const ReqCommunitySignIn*>(
               &_ReqCommunitySignIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    165;

  friend void swap(ReqCommunitySignIn& a, ReqCommunitySignIn& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCommunitySignIn* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCommunitySignIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCommunitySignIn* New() const final {
    return new ReqCommunitySignIn();
  }

  ReqCommunitySignIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCommunitySignIn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCommunitySignIn& from);
  void MergeFrom(const ReqCommunitySignIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCommunitySignIn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCommunitySignIn";
  }
  protected:
  explicit ReqCommunitySignIn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kCommunityIdFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 community_id = 2;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCommunitySignIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCommunitySignIn final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCommunitySignIn) */ {
 public:
  inline AckCommunitySignIn() : AckCommunitySignIn(nullptr) {}
  ~AckCommunitySignIn() override;
  explicit constexpr AckCommunitySignIn(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCommunitySignIn(const AckCommunitySignIn& from);
  AckCommunitySignIn(AckCommunitySignIn&& from) noexcept
    : AckCommunitySignIn() {
    *this = ::std::move(from);
  }

  inline AckCommunitySignIn& operator=(const AckCommunitySignIn& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCommunitySignIn& operator=(AckCommunitySignIn&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCommunitySignIn& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCommunitySignIn* internal_default_instance() {
    return reinterpret_cast<const AckCommunitySignIn*>(
               &_AckCommunitySignIn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    166;

  friend void swap(AckCommunitySignIn& a, AckCommunitySignIn& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCommunitySignIn* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCommunitySignIn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCommunitySignIn* New() const final {
    return new AckCommunitySignIn();
  }

  AckCommunitySignIn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCommunitySignIn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCommunitySignIn& from);
  void MergeFrom(const AckCommunitySignIn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCommunitySignIn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCommunitySignIn";
  }
  protected:
  explicit AckCommunitySignIn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.RewardInfo reward_list = 2;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::KWMsg::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_reward_list();
  private:
  const ::KWMsg::RewardInfo& _internal_reward_list(int index) const;
  ::KWMsg::RewardInfo* _internal_add_reward_list();
  public:
  const ::KWMsg::RewardInfo& reward_list(int index) const;
  ::KWMsg::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      reward_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCommunitySignIn)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > reward_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class PlayerBaseInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PlayerBaseInfo) */ {
 public:
  inline PlayerBaseInfo() : PlayerBaseInfo(nullptr) {}
  ~PlayerBaseInfo() override;
  explicit constexpr PlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PlayerBaseInfo(const PlayerBaseInfo& from);
  PlayerBaseInfo(PlayerBaseInfo&& from) noexcept
    : PlayerBaseInfo() {
    *this = ::std::move(from);
  }

  inline PlayerBaseInfo& operator=(const PlayerBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline PlayerBaseInfo& operator=(PlayerBaseInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PlayerBaseInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const PlayerBaseInfo* internal_default_instance() {
    return reinterpret_cast<const PlayerBaseInfo*>(
               &_PlayerBaseInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    167;

  friend void swap(PlayerBaseInfo& a, PlayerBaseInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(PlayerBaseInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PlayerBaseInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PlayerBaseInfo* New() const final {
    return new PlayerBaseInfo();
  }

  PlayerBaseInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PlayerBaseInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PlayerBaseInfo& from);
  void MergeFrom(const PlayerBaseInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PlayerBaseInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PlayerBaseInfo";
  }
  protected:
  explicit PlayerBaseInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kAvatarUrlFieldNumber = 3,
    kAvatarFrameFieldNumber = 4,
    kTitleFieldNumber = 5,
    kCommunityNameFieldNumber = 9,
    kPlayerIdFieldNumber = 1,
    kOfflineTsFieldNumber = 6,
    kLevelFieldNumber = 7,
    kCommunityIdFieldNumber = 8,
  };
  // bytes name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // bytes avatar_url = 3;
  void clear_avatar_url();
  const std::string& avatar_url() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_url(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_url();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_avatar_url();
  void set_allocated_avatar_url(std::string* avatar_url);
  private:
  const std::string& _internal_avatar_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_url(const std::string& value);
  std::string* _internal_mutable_avatar_url();
  public:

  // bytes avatar_frame = 4;
  void clear_avatar_frame();
  const std::string& avatar_frame() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_avatar_frame(ArgT0&& arg0, ArgT... args);
  std::string* mutable_avatar_frame();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_avatar_frame();
  void set_allocated_avatar_frame(std::string* avatar_frame);
  private:
  const std::string& _internal_avatar_frame() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_avatar_frame(const std::string& value);
  std::string* _internal_mutable_avatar_frame();
  public:

  // bytes title = 5;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // bytes community_name = 9;
  void clear_community_name();
  const std::string& community_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_name();
  void set_allocated_community_name(std::string* community_name);
  private:
  const std::string& _internal_community_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_name(const std::string& value);
  std::string* _internal_mutable_community_name();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int64 offline_ts = 6;
  void clear_offline_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 offline_ts() const;
  void set_offline_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_offline_ts() const;
  void _internal_set_offline_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 level = 7;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 community_id = 8;
  void clear_community_id();
  ::PROTOBUF_NAMESPACE_ID::int32 community_id() const;
  void set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_community_id() const;
  void _internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.PlayerBaseInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_url_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr avatar_frame_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_name_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 offline_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 community_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class FriendInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.FriendInfo) */ {
 public:
  inline FriendInfo() : FriendInfo(nullptr) {}
  ~FriendInfo() override;
  explicit constexpr FriendInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FriendInfo(const FriendInfo& from);
  FriendInfo(FriendInfo&& from) noexcept
    : FriendInfo() {
    *this = ::std::move(from);
  }

  inline FriendInfo& operator=(const FriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendInfo& operator=(FriendInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FriendInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const FriendInfo* internal_default_instance() {
    return reinterpret_cast<const FriendInfo*>(
               &_FriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    168;

  friend void swap(FriendInfo& a, FriendInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FriendInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendInfo* New() const final {
    return new FriendInfo();
  }

  FriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendInfo& from);
  void MergeFrom(const FriendInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.FriendInfo";
  }
  protected:
  explicit FriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseInfoFieldNumber = 1,
    kAddTsFieldNumber = 3,
    kIsCollectFieldNumber = 2,
  };
  // .KWMsg.PlayerBaseInfo base_info = 1;
  bool has_base_info() const;
  private:
  bool _internal_has_base_info() const;
  public:
  void clear_base_info();
  const ::KWMsg::PlayerBaseInfo& base_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::PlayerBaseInfo* release_base_info();
  ::KWMsg::PlayerBaseInfo* mutable_base_info();
  void set_allocated_base_info(::KWMsg::PlayerBaseInfo* base_info);
  private:
  const ::KWMsg::PlayerBaseInfo& _internal_base_info() const;
  ::KWMsg::PlayerBaseInfo* _internal_mutable_base_info();
  public:
  void unsafe_arena_set_allocated_base_info(
      ::KWMsg::PlayerBaseInfo* base_info);
  ::KWMsg::PlayerBaseInfo* unsafe_arena_release_base_info();

  // int64 add_ts = 3;
  void clear_add_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 add_ts() const;
  void set_add_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_add_ts() const;
  void _internal_set_add_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 is_collect = 2;
  void clear_is_collect();
  ::PROTOBUF_NAMESPACE_ID::int32 is_collect() const;
  void set_is_collect(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_is_collect() const;
  void _internal_set_is_collect(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.FriendInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::PlayerBaseInfo* base_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 add_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 is_collect_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AppliedFriendInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AppliedFriendInfo) */ {
 public:
  inline AppliedFriendInfo() : AppliedFriendInfo(nullptr) {}
  ~AppliedFriendInfo() override;
  explicit constexpr AppliedFriendInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AppliedFriendInfo(const AppliedFriendInfo& from);
  AppliedFriendInfo(AppliedFriendInfo&& from) noexcept
    : AppliedFriendInfo() {
    *this = ::std::move(from);
  }

  inline AppliedFriendInfo& operator=(const AppliedFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline AppliedFriendInfo& operator=(AppliedFriendInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AppliedFriendInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const AppliedFriendInfo* internal_default_instance() {
    return reinterpret_cast<const AppliedFriendInfo*>(
               &_AppliedFriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    169;

  friend void swap(AppliedFriendInfo& a, AppliedFriendInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(AppliedFriendInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AppliedFriendInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AppliedFriendInfo* New() const final {
    return new AppliedFriendInfo();
  }

  AppliedFriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AppliedFriendInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AppliedFriendInfo& from);
  void MergeFrom(const AppliedFriendInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AppliedFriendInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AppliedFriendInfo";
  }
  protected:
  explicit AppliedFriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseInfoFieldNumber = 1,
    kApplyTsFieldNumber = 2,
  };
  // .KWMsg.PlayerBaseInfo base_info = 1;
  bool has_base_info() const;
  private:
  bool _internal_has_base_info() const;
  public:
  void clear_base_info();
  const ::KWMsg::PlayerBaseInfo& base_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::PlayerBaseInfo* release_base_info();
  ::KWMsg::PlayerBaseInfo* mutable_base_info();
  void set_allocated_base_info(::KWMsg::PlayerBaseInfo* base_info);
  private:
  const ::KWMsg::PlayerBaseInfo& _internal_base_info() const;
  ::KWMsg::PlayerBaseInfo* _internal_mutable_base_info();
  public:
  void unsafe_arena_set_allocated_base_info(
      ::KWMsg::PlayerBaseInfo* base_info);
  ::KWMsg::PlayerBaseInfo* unsafe_arena_release_base_info();

  // int64 apply_ts = 2;
  void clear_apply_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 apply_ts() const;
  void set_apply_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_apply_ts() const;
  void _internal_set_apply_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AppliedFriendInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::PlayerBaseInfo* base_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 apply_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class RecommendedFriendInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.RecommendedFriendInfo) */ {
 public:
  inline RecommendedFriendInfo() : RecommendedFriendInfo(nullptr) {}
  ~RecommendedFriendInfo() override;
  explicit constexpr RecommendedFriendInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  RecommendedFriendInfo(const RecommendedFriendInfo& from);
  RecommendedFriendInfo(RecommendedFriendInfo&& from) noexcept
    : RecommendedFriendInfo() {
    *this = ::std::move(from);
  }

  inline RecommendedFriendInfo& operator=(const RecommendedFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RecommendedFriendInfo& operator=(RecommendedFriendInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const RecommendedFriendInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const RecommendedFriendInfo* internal_default_instance() {
    return reinterpret_cast<const RecommendedFriendInfo*>(
               &_RecommendedFriendInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    170;

  friend void swap(RecommendedFriendInfo& a, RecommendedFriendInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(RecommendedFriendInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RecommendedFriendInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RecommendedFriendInfo* New() const final {
    return new RecommendedFriendInfo();
  }

  RecommendedFriendInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RecommendedFriendInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RecommendedFriendInfo& from);
  void MergeFrom(const RecommendedFriendInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RecommendedFriendInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.RecommendedFriendInfo";
  }
  protected:
  explicit RecommendedFriendInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseInfoFieldNumber = 1,
    kRecommendedTypeFieldNumber = 2,
  };
  // .KWMsg.PlayerBaseInfo base_info = 1;
  bool has_base_info() const;
  private:
  bool _internal_has_base_info() const;
  public:
  void clear_base_info();
  const ::KWMsg::PlayerBaseInfo& base_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::PlayerBaseInfo* release_base_info();
  ::KWMsg::PlayerBaseInfo* mutable_base_info();
  void set_allocated_base_info(::KWMsg::PlayerBaseInfo* base_info);
  private:
  const ::KWMsg::PlayerBaseInfo& _internal_base_info() const;
  ::KWMsg::PlayerBaseInfo* _internal_mutable_base_info();
  public:
  void unsafe_arena_set_allocated_base_info(
      ::KWMsg::PlayerBaseInfo* base_info);
  ::KWMsg::PlayerBaseInfo* unsafe_arena_release_base_info();

  // .KWMsg.ERecommendedFriendType recommended_type = 2;
  void clear_recommended_type();
  ::KWMsg::ERecommendedFriendType recommended_type() const;
  void set_recommended_type(::KWMsg::ERecommendedFriendType value);
  private:
  ::KWMsg::ERecommendedFriendType _internal_recommended_type() const;
  void _internal_set_recommended_type(::KWMsg::ERecommendedFriendType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.RecommendedFriendInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::PlayerBaseInfo* base_info_;
  int recommended_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqFriendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqFriendList) */ {
 public:
  inline ReqFriendList() : ReqFriendList(nullptr) {}
  ~ReqFriendList() override;
  explicit constexpr ReqFriendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqFriendList(const ReqFriendList& from);
  ReqFriendList(ReqFriendList&& from) noexcept
    : ReqFriendList() {
    *this = ::std::move(from);
  }

  inline ReqFriendList& operator=(const ReqFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqFriendList& operator=(ReqFriendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqFriendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqFriendList* internal_default_instance() {
    return reinterpret_cast<const ReqFriendList*>(
               &_ReqFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    171;

  friend void swap(ReqFriendList& a, ReqFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqFriendList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqFriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqFriendList* New() const final {
    return new ReqFriendList();
  }

  ReqFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqFriendList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqFriendList& from);
  void MergeFrom(const ReqFriendList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqFriendList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqFriendList";
  }
  protected:
  explicit ReqFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqFriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckFriendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckFriendList) */ {
 public:
  inline AckFriendList() : AckFriendList(nullptr) {}
  ~AckFriendList() override;
  explicit constexpr AckFriendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckFriendList(const AckFriendList& from);
  AckFriendList(AckFriendList&& from) noexcept
    : AckFriendList() {
    *this = ::std::move(from);
  }

  inline AckFriendList& operator=(const AckFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckFriendList& operator=(AckFriendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckFriendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckFriendList* internal_default_instance() {
    return reinterpret_cast<const AckFriendList*>(
               &_AckFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    172;

  friend void swap(AckFriendList& a, AckFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckFriendList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckFriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckFriendList* New() const final {
    return new AckFriendList();
  }

  AckFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckFriendList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckFriendList& from);
  void MergeFrom(const AckFriendList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckFriendList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckFriendList";
  }
  protected:
  explicit AckFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoListFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.FriendInfo info_list = 2;
  int info_list_size() const;
  private:
  int _internal_info_list_size() const;
  public:
  void clear_info_list();
  ::KWMsg::FriendInfo* mutable_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::FriendInfo >*
      mutable_info_list();
  private:
  const ::KWMsg::FriendInfo& _internal_info_list(int index) const;
  ::KWMsg::FriendInfo* _internal_add_info_list();
  public:
  const ::KWMsg::FriendInfo& info_list(int index) const;
  ::KWMsg::FriendInfo* add_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::FriendInfo >&
      info_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckFriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::FriendInfo > info_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqAppliedFriendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAppliedFriendList) */ {
 public:
  inline ReqAppliedFriendList() : ReqAppliedFriendList(nullptr) {}
  ~ReqAppliedFriendList() override;
  explicit constexpr ReqAppliedFriendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAppliedFriendList(const ReqAppliedFriendList& from);
  ReqAppliedFriendList(ReqAppliedFriendList&& from) noexcept
    : ReqAppliedFriendList() {
    *this = ::std::move(from);
  }

  inline ReqAppliedFriendList& operator=(const ReqAppliedFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAppliedFriendList& operator=(ReqAppliedFriendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAppliedFriendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAppliedFriendList* internal_default_instance() {
    return reinterpret_cast<const ReqAppliedFriendList*>(
               &_ReqAppliedFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    173;

  friend void swap(ReqAppliedFriendList& a, ReqAppliedFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAppliedFriendList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAppliedFriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAppliedFriendList* New() const final {
    return new ReqAppliedFriendList();
  }

  ReqAppliedFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAppliedFriendList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAppliedFriendList& from);
  void MergeFrom(const ReqAppliedFriendList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAppliedFriendList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAppliedFriendList";
  }
  protected:
  explicit ReqAppliedFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAppliedFriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckAppliedFriendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckAppliedFriendList) */ {
 public:
  inline AckAppliedFriendList() : AckAppliedFriendList(nullptr) {}
  ~AckAppliedFriendList() override;
  explicit constexpr AckAppliedFriendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckAppliedFriendList(const AckAppliedFriendList& from);
  AckAppliedFriendList(AckAppliedFriendList&& from) noexcept
    : AckAppliedFriendList() {
    *this = ::std::move(from);
  }

  inline AckAppliedFriendList& operator=(const AckAppliedFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckAppliedFriendList& operator=(AckAppliedFriendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckAppliedFriendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckAppliedFriendList* internal_default_instance() {
    return reinterpret_cast<const AckAppliedFriendList*>(
               &_AckAppliedFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    174;

  friend void swap(AckAppliedFriendList& a, AckAppliedFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckAppliedFriendList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckAppliedFriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckAppliedFriendList* New() const final {
    return new AckAppliedFriendList();
  }

  AckAppliedFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckAppliedFriendList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckAppliedFriendList& from);
  void MergeFrom(const AckAppliedFriendList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckAppliedFriendList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckAppliedFriendList";
  }
  protected:
  explicit AckAppliedFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoListFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.AppliedFriendInfo info_list = 2;
  int info_list_size() const;
  private:
  int _internal_info_list_size() const;
  public:
  void clear_info_list();
  ::KWMsg::AppliedFriendInfo* mutable_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedFriendInfo >*
      mutable_info_list();
  private:
  const ::KWMsg::AppliedFriendInfo& _internal_info_list(int index) const;
  ::KWMsg::AppliedFriendInfo* _internal_add_info_list();
  public:
  const ::KWMsg::AppliedFriendInfo& info_list(int index) const;
  ::KWMsg::AppliedFriendInfo* add_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedFriendInfo >&
      info_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckAppliedFriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedFriendInfo > info_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqAddFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAddFriend) */ {
 public:
  inline ReqAddFriend() : ReqAddFriend(nullptr) {}
  ~ReqAddFriend() override;
  explicit constexpr ReqAddFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAddFriend(const ReqAddFriend& from);
  ReqAddFriend(ReqAddFriend&& from) noexcept
    : ReqAddFriend() {
    *this = ::std::move(from);
  }

  inline ReqAddFriend& operator=(const ReqAddFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAddFriend& operator=(ReqAddFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAddFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAddFriend* internal_default_instance() {
    return reinterpret_cast<const ReqAddFriend*>(
               &_ReqAddFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    175;

  friend void swap(ReqAddFriend& a, ReqAddFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAddFriend* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAddFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAddFriend* New() const final {
    return new ReqAddFriend();
  }

  ReqAddFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAddFriend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAddFriend& from);
  void MergeFrom(const ReqAddFriend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAddFriend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAddFriend";
  }
  protected:
  explicit ReqAddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::KWMsg::Ident& target_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_target_id();
  ::KWMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::KWMsg::Ident* target_id);
  private:
  const ::KWMsg::Ident& _internal_target_id() const;
  ::KWMsg::Ident* _internal_mutable_target_id();
  public:
  void unsafe_arena_set_allocated_target_id(
      ::KWMsg::Ident* target_id);
  ::KWMsg::Ident* unsafe_arena_release_target_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAddFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* target_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckAddFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckAddFriend) */ {
 public:
  inline AckAddFriend() : AckAddFriend(nullptr) {}
  ~AckAddFriend() override;
  explicit constexpr AckAddFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckAddFriend(const AckAddFriend& from);
  AckAddFriend(AckAddFriend&& from) noexcept
    : AckAddFriend() {
    *this = ::std::move(from);
  }

  inline AckAddFriend& operator=(const AckAddFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckAddFriend& operator=(AckAddFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckAddFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckAddFriend* internal_default_instance() {
    return reinterpret_cast<const AckAddFriend*>(
               &_AckAddFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    176;

  friend void swap(AckAddFriend& a, AckAddFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(AckAddFriend* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckAddFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckAddFriend* New() const final {
    return new AckAddFriend();
  }

  AckAddFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckAddFriend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckAddFriend& from);
  void MergeFrom(const AckAddFriend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckAddFriend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckAddFriend";
  }
  protected:
  explicit AckAddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckAddFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqDealWithAddFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqDealWithAddFriend) */ {
 public:
  inline ReqDealWithAddFriend() : ReqDealWithAddFriend(nullptr) {}
  ~ReqDealWithAddFriend() override;
  explicit constexpr ReqDealWithAddFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDealWithAddFriend(const ReqDealWithAddFriend& from);
  ReqDealWithAddFriend(ReqDealWithAddFriend&& from) noexcept
    : ReqDealWithAddFriend() {
    *this = ::std::move(from);
  }

  inline ReqDealWithAddFriend& operator=(const ReqDealWithAddFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDealWithAddFriend& operator=(ReqDealWithAddFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDealWithAddFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDealWithAddFriend* internal_default_instance() {
    return reinterpret_cast<const ReqDealWithAddFriend*>(
               &_ReqDealWithAddFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    177;

  friend void swap(ReqDealWithAddFriend& a, ReqDealWithAddFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDealWithAddFriend* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDealWithAddFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqDealWithAddFriend* New() const final {
    return new ReqDealWithAddFriend();
  }

  ReqDealWithAddFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDealWithAddFriend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqDealWithAddFriend& from);
  void MergeFrom(const ReqDealWithAddFriend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDealWithAddFriend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqDealWithAddFriend";
  }
  protected:
  explicit ReqDealWithAddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kOptTypeFieldNumber = 3,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::KWMsg::Ident& target_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_target_id();
  ::KWMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::KWMsg::Ident* target_id);
  private:
  const ::KWMsg::Ident& _internal_target_id() const;
  ::KWMsg::Ident* _internal_mutable_target_id();
  public:
  void unsafe_arena_set_allocated_target_id(
      ::KWMsg::Ident* target_id);
  ::KWMsg::Ident* unsafe_arena_release_target_id();

  // int32 opt_type = 3;
  void clear_opt_type();
  ::PROTOBUF_NAMESPACE_ID::int32 opt_type() const;
  void set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opt_type() const;
  void _internal_set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqDealWithAddFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* target_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 opt_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckDealWithAddFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckDealWithAddFriend) */ {
 public:
  inline AckDealWithAddFriend() : AckDealWithAddFriend(nullptr) {}
  ~AckDealWithAddFriend() override;
  explicit constexpr AckDealWithAddFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckDealWithAddFriend(const AckDealWithAddFriend& from);
  AckDealWithAddFriend(AckDealWithAddFriend&& from) noexcept
    : AckDealWithAddFriend() {
    *this = ::std::move(from);
  }

  inline AckDealWithAddFriend& operator=(const AckDealWithAddFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckDealWithAddFriend& operator=(AckDealWithAddFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckDealWithAddFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckDealWithAddFriend* internal_default_instance() {
    return reinterpret_cast<const AckDealWithAddFriend*>(
               &_AckDealWithAddFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    178;

  friend void swap(AckDealWithAddFriend& a, AckDealWithAddFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(AckDealWithAddFriend* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckDealWithAddFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckDealWithAddFriend* New() const final {
    return new AckDealWithAddFriend();
  }

  AckDealWithAddFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckDealWithAddFriend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckDealWithAddFriend& from);
  void MergeFrom(const AckDealWithAddFriend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckDealWithAddFriend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckDealWithAddFriend";
  }
  protected:
  explicit AckDealWithAddFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckDealWithAddFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqDelFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqDelFriend) */ {
 public:
  inline ReqDelFriend() : ReqDelFriend(nullptr) {}
  ~ReqDelFriend() override;
  explicit constexpr ReqDelFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDelFriend(const ReqDelFriend& from);
  ReqDelFriend(ReqDelFriend&& from) noexcept
    : ReqDelFriend() {
    *this = ::std::move(from);
  }

  inline ReqDelFriend& operator=(const ReqDelFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDelFriend& operator=(ReqDelFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDelFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDelFriend* internal_default_instance() {
    return reinterpret_cast<const ReqDelFriend*>(
               &_ReqDelFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    179;

  friend void swap(ReqDelFriend& a, ReqDelFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDelFriend* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDelFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqDelFriend* New() const final {
    return new ReqDelFriend();
  }

  ReqDelFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDelFriend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqDelFriend& from);
  void MergeFrom(const ReqDelFriend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDelFriend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqDelFriend";
  }
  protected:
  explicit ReqDelFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::KWMsg::Ident& target_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_target_id();
  ::KWMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::KWMsg::Ident* target_id);
  private:
  const ::KWMsg::Ident& _internal_target_id() const;
  ::KWMsg::Ident* _internal_mutable_target_id();
  public:
  void unsafe_arena_set_allocated_target_id(
      ::KWMsg::Ident* target_id);
  ::KWMsg::Ident* unsafe_arena_release_target_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqDelFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* target_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckDelFriend final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckDelFriend) */ {
 public:
  inline AckDelFriend() : AckDelFriend(nullptr) {}
  ~AckDelFriend() override;
  explicit constexpr AckDelFriend(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckDelFriend(const AckDelFriend& from);
  AckDelFriend(AckDelFriend&& from) noexcept
    : AckDelFriend() {
    *this = ::std::move(from);
  }

  inline AckDelFriend& operator=(const AckDelFriend& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckDelFriend& operator=(AckDelFriend&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckDelFriend& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckDelFriend* internal_default_instance() {
    return reinterpret_cast<const AckDelFriend*>(
               &_AckDelFriend_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    180;

  friend void swap(AckDelFriend& a, AckDelFriend& b) {
    a.Swap(&b);
  }
  inline void Swap(AckDelFriend* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckDelFriend* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckDelFriend* New() const final {
    return new AckDelFriend();
  }

  AckDelFriend* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckDelFriend>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckDelFriend& from);
  void MergeFrom(const AckDelFriend& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckDelFriend* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckDelFriend";
  }
  protected:
  explicit AckDelFriend(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.Ident target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::KWMsg::Ident& target_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_target_id();
  ::KWMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::KWMsg::Ident* target_id);
  private:
  const ::KWMsg::Ident& _internal_target_id() const;
  ::KWMsg::Ident* _internal_mutable_target_id();
  public:
  void unsafe_arena_set_allocated_target_id(
      ::KWMsg::Ident* target_id);
  ::KWMsg::Ident* unsafe_arena_release_target_id();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckDelFriend)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* target_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqBlacklist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBlacklist) */ {
 public:
  inline ReqBlacklist() : ReqBlacklist(nullptr) {}
  ~ReqBlacklist() override;
  explicit constexpr ReqBlacklist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBlacklist(const ReqBlacklist& from);
  ReqBlacklist(ReqBlacklist&& from) noexcept
    : ReqBlacklist() {
    *this = ::std::move(from);
  }

  inline ReqBlacklist& operator=(const ReqBlacklist& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBlacklist& operator=(ReqBlacklist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBlacklist& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBlacklist* internal_default_instance() {
    return reinterpret_cast<const ReqBlacklist*>(
               &_ReqBlacklist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    181;

  friend void swap(ReqBlacklist& a, ReqBlacklist& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBlacklist* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBlacklist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBlacklist* New() const final {
    return new ReqBlacklist();
  }

  ReqBlacklist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBlacklist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBlacklist& from);
  void MergeFrom(const ReqBlacklist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBlacklist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBlacklist";
  }
  protected:
  explicit ReqBlacklist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBlacklist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckBlacklist final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBlacklist) */ {
 public:
  inline AckBlacklist() : AckBlacklist(nullptr) {}
  ~AckBlacklist() override;
  explicit constexpr AckBlacklist(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBlacklist(const AckBlacklist& from);
  AckBlacklist(AckBlacklist&& from) noexcept
    : AckBlacklist() {
    *this = ::std::move(from);
  }

  inline AckBlacklist& operator=(const AckBlacklist& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBlacklist& operator=(AckBlacklist&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBlacklist& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBlacklist* internal_default_instance() {
    return reinterpret_cast<const AckBlacklist*>(
               &_AckBlacklist_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    182;

  friend void swap(AckBlacklist& a, AckBlacklist& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBlacklist* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBlacklist* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBlacklist* New() const final {
    return new AckBlacklist();
  }

  AckBlacklist* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBlacklist>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBlacklist& from);
  void MergeFrom(const AckBlacklist& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBlacklist* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBlacklist";
  }
  protected:
  explicit AckBlacklist(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoListFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.PlayerBaseInfo info_list = 2;
  int info_list_size() const;
  private:
  int _internal_info_list_size() const;
  public:
  void clear_info_list();
  ::KWMsg::PlayerBaseInfo* mutable_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerBaseInfo >*
      mutable_info_list();
  private:
  const ::KWMsg::PlayerBaseInfo& _internal_info_list(int index) const;
  ::KWMsg::PlayerBaseInfo* _internal_add_info_list();
  public:
  const ::KWMsg::PlayerBaseInfo& info_list(int index) const;
  ::KWMsg::PlayerBaseInfo* add_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerBaseInfo >&
      info_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBlacklist)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerBaseInfo > info_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqBlacklistOpt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBlacklistOpt) */ {
 public:
  inline ReqBlacklistOpt() : ReqBlacklistOpt(nullptr) {}
  ~ReqBlacklistOpt() override;
  explicit constexpr ReqBlacklistOpt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBlacklistOpt(const ReqBlacklistOpt& from);
  ReqBlacklistOpt(ReqBlacklistOpt&& from) noexcept
    : ReqBlacklistOpt() {
    *this = ::std::move(from);
  }

  inline ReqBlacklistOpt& operator=(const ReqBlacklistOpt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBlacklistOpt& operator=(ReqBlacklistOpt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBlacklistOpt& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBlacklistOpt* internal_default_instance() {
    return reinterpret_cast<const ReqBlacklistOpt*>(
               &_ReqBlacklistOpt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    183;

  friend void swap(ReqBlacklistOpt& a, ReqBlacklistOpt& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBlacklistOpt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBlacklistOpt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBlacklistOpt* New() const final {
    return new ReqBlacklistOpt();
  }

  ReqBlacklistOpt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBlacklistOpt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBlacklistOpt& from);
  void MergeFrom(const ReqBlacklistOpt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBlacklistOpt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBlacklistOpt";
  }
  protected:
  explicit ReqBlacklistOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kOptTypeFieldNumber = 3,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::KWMsg::Ident& target_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_target_id();
  ::KWMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::KWMsg::Ident* target_id);
  private:
  const ::KWMsg::Ident& _internal_target_id() const;
  ::KWMsg::Ident* _internal_mutable_target_id();
  public:
  void unsafe_arena_set_allocated_target_id(
      ::KWMsg::Ident* target_id);
  ::KWMsg::Ident* unsafe_arena_release_target_id();

  // int32 opt_type = 3;
  void clear_opt_type();
  ::PROTOBUF_NAMESPACE_ID::int32 opt_type() const;
  void set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opt_type() const;
  void _internal_set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBlacklistOpt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* target_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 opt_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckBlacklistOpt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBlacklistOpt) */ {
 public:
  inline AckBlacklistOpt() : AckBlacklistOpt(nullptr) {}
  ~AckBlacklistOpt() override;
  explicit constexpr AckBlacklistOpt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBlacklistOpt(const AckBlacklistOpt& from);
  AckBlacklistOpt(AckBlacklistOpt&& from) noexcept
    : AckBlacklistOpt() {
    *this = ::std::move(from);
  }

  inline AckBlacklistOpt& operator=(const AckBlacklistOpt& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBlacklistOpt& operator=(AckBlacklistOpt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBlacklistOpt& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBlacklistOpt* internal_default_instance() {
    return reinterpret_cast<const AckBlacklistOpt*>(
               &_AckBlacklistOpt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    184;

  friend void swap(AckBlacklistOpt& a, AckBlacklistOpt& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBlacklistOpt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBlacklistOpt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBlacklistOpt* New() const final {
    return new AckBlacklistOpt();
  }

  AckBlacklistOpt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBlacklistOpt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBlacklistOpt& from);
  void MergeFrom(const AckBlacklistOpt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBlacklistOpt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBlacklistOpt";
  }
  protected:
  explicit AckBlacklistOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.Ident target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::KWMsg::Ident& target_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_target_id();
  ::KWMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::KWMsg::Ident* target_id);
  private:
  const ::KWMsg::Ident& _internal_target_id() const;
  ::KWMsg::Ident* _internal_mutable_target_id();
  public:
  void unsafe_arena_set_allocated_target_id(
      ::KWMsg::Ident* target_id);
  ::KWMsg::Ident* unsafe_arena_release_target_id();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBlacklistOpt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* target_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqRecommendedFriendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqRecommendedFriendList) */ {
 public:
  inline ReqRecommendedFriendList() : ReqRecommendedFriendList(nullptr) {}
  ~ReqRecommendedFriendList() override;
  explicit constexpr ReqRecommendedFriendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqRecommendedFriendList(const ReqRecommendedFriendList& from);
  ReqRecommendedFriendList(ReqRecommendedFriendList&& from) noexcept
    : ReqRecommendedFriendList() {
    *this = ::std::move(from);
  }

  inline ReqRecommendedFriendList& operator=(const ReqRecommendedFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqRecommendedFriendList& operator=(ReqRecommendedFriendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqRecommendedFriendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqRecommendedFriendList* internal_default_instance() {
    return reinterpret_cast<const ReqRecommendedFriendList*>(
               &_ReqRecommendedFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    185;

  friend void swap(ReqRecommendedFriendList& a, ReqRecommendedFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqRecommendedFriendList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqRecommendedFriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqRecommendedFriendList* New() const final {
    return new ReqRecommendedFriendList();
  }

  ReqRecommendedFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqRecommendedFriendList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqRecommendedFriendList& from);
  void MergeFrom(const ReqRecommendedFriendList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRecommendedFriendList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqRecommendedFriendList";
  }
  protected:
  explicit ReqRecommendedFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kRefreshFlagFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 refresh_flag = 2;
  void clear_refresh_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 refresh_flag() const;
  void set_refresh_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_refresh_flag() const;
  void _internal_set_refresh_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqRecommendedFriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 refresh_flag_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckRecommendedFriendList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckRecommendedFriendList) */ {
 public:
  inline AckRecommendedFriendList() : AckRecommendedFriendList(nullptr) {}
  ~AckRecommendedFriendList() override;
  explicit constexpr AckRecommendedFriendList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckRecommendedFriendList(const AckRecommendedFriendList& from);
  AckRecommendedFriendList(AckRecommendedFriendList&& from) noexcept
    : AckRecommendedFriendList() {
    *this = ::std::move(from);
  }

  inline AckRecommendedFriendList& operator=(const AckRecommendedFriendList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckRecommendedFriendList& operator=(AckRecommendedFriendList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckRecommendedFriendList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckRecommendedFriendList* internal_default_instance() {
    return reinterpret_cast<const AckRecommendedFriendList*>(
               &_AckRecommendedFriendList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    186;

  friend void swap(AckRecommendedFriendList& a, AckRecommendedFriendList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckRecommendedFriendList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckRecommendedFriendList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckRecommendedFriendList* New() const final {
    return new AckRecommendedFriendList();
  }

  AckRecommendedFriendList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckRecommendedFriendList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckRecommendedFriendList& from);
  void MergeFrom(const AckRecommendedFriendList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckRecommendedFriendList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckRecommendedFriendList";
  }
  protected:
  explicit AckRecommendedFriendList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInfoListFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.RecommendedFriendInfo info_list = 2;
  int info_list_size() const;
  private:
  int _internal_info_list_size() const;
  public:
  void clear_info_list();
  ::KWMsg::RecommendedFriendInfo* mutable_info_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecommendedFriendInfo >*
      mutable_info_list();
  private:
  const ::KWMsg::RecommendedFriendInfo& _internal_info_list(int index) const;
  ::KWMsg::RecommendedFriendInfo* _internal_add_info_list();
  public:
  const ::KWMsg::RecommendedFriendInfo& info_list(int index) const;
  ::KWMsg::RecommendedFriendInfo* add_info_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecommendedFriendInfo >&
      info_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckRecommendedFriendList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecommendedFriendInfo > info_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqFriendCollectOpt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqFriendCollectOpt) */ {
 public:
  inline ReqFriendCollectOpt() : ReqFriendCollectOpt(nullptr) {}
  ~ReqFriendCollectOpt() override;
  explicit constexpr ReqFriendCollectOpt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqFriendCollectOpt(const ReqFriendCollectOpt& from);
  ReqFriendCollectOpt(ReqFriendCollectOpt&& from) noexcept
    : ReqFriendCollectOpt() {
    *this = ::std::move(from);
  }

  inline ReqFriendCollectOpt& operator=(const ReqFriendCollectOpt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqFriendCollectOpt& operator=(ReqFriendCollectOpt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqFriendCollectOpt& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqFriendCollectOpt* internal_default_instance() {
    return reinterpret_cast<const ReqFriendCollectOpt*>(
               &_ReqFriendCollectOpt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    187;

  friend void swap(ReqFriendCollectOpt& a, ReqFriendCollectOpt& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqFriendCollectOpt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqFriendCollectOpt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqFriendCollectOpt* New() const final {
    return new ReqFriendCollectOpt();
  }

  ReqFriendCollectOpt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqFriendCollectOpt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqFriendCollectOpt& from);
  void MergeFrom(const ReqFriendCollectOpt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqFriendCollectOpt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqFriendCollectOpt";
  }
  protected:
  explicit ReqFriendCollectOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTargetIdFieldNumber = 2,
    kOptTypeFieldNumber = 3,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::KWMsg::Ident& target_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_target_id();
  ::KWMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::KWMsg::Ident* target_id);
  private:
  const ::KWMsg::Ident& _internal_target_id() const;
  ::KWMsg::Ident* _internal_mutable_target_id();
  public:
  void unsafe_arena_set_allocated_target_id(
      ::KWMsg::Ident* target_id);
  ::KWMsg::Ident* unsafe_arena_release_target_id();

  // int32 opt_type = 3;
  void clear_opt_type();
  ::PROTOBUF_NAMESPACE_ID::int32 opt_type() const;
  void set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opt_type() const;
  void _internal_set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqFriendCollectOpt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* target_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 opt_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckFriendCollectOpt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckFriendCollectOpt) */ {
 public:
  inline AckFriendCollectOpt() : AckFriendCollectOpt(nullptr) {}
  ~AckFriendCollectOpt() override;
  explicit constexpr AckFriendCollectOpt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckFriendCollectOpt(const AckFriendCollectOpt& from);
  AckFriendCollectOpt(AckFriendCollectOpt&& from) noexcept
    : AckFriendCollectOpt() {
    *this = ::std::move(from);
  }

  inline AckFriendCollectOpt& operator=(const AckFriendCollectOpt& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckFriendCollectOpt& operator=(AckFriendCollectOpt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckFriendCollectOpt& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckFriendCollectOpt* internal_default_instance() {
    return reinterpret_cast<const AckFriendCollectOpt*>(
               &_AckFriendCollectOpt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    188;

  friend void swap(AckFriendCollectOpt& a, AckFriendCollectOpt& b) {
    a.Swap(&b);
  }
  inline void Swap(AckFriendCollectOpt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckFriendCollectOpt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckFriendCollectOpt* New() const final {
    return new AckFriendCollectOpt();
  }

  AckFriendCollectOpt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckFriendCollectOpt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckFriendCollectOpt& from);
  void MergeFrom(const AckFriendCollectOpt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckFriendCollectOpt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckFriendCollectOpt";
  }
  protected:
  explicit AckFriendCollectOpt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.Ident target_id = 2;
  bool has_target_id() const;
  private:
  bool _internal_has_target_id() const;
  public:
  void clear_target_id();
  const ::KWMsg::Ident& target_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_target_id();
  ::KWMsg::Ident* mutable_target_id();
  void set_allocated_target_id(::KWMsg::Ident* target_id);
  private:
  const ::KWMsg::Ident& _internal_target_id() const;
  ::KWMsg::Ident* _internal_mutable_target_id();
  public:
  void unsafe_arena_set_allocated_target_id(
      ::KWMsg::Ident* target_id);
  ::KWMsg::Ident* unsafe_arena_release_target_id();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckFriendCollectOpt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* target_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqFindPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqFindPlayer) */ {
 public:
  inline ReqFindPlayer() : ReqFindPlayer(nullptr) {}
  ~ReqFindPlayer() override;
  explicit constexpr ReqFindPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqFindPlayer(const ReqFindPlayer& from);
  ReqFindPlayer(ReqFindPlayer&& from) noexcept
    : ReqFindPlayer() {
    *this = ::std::move(from);
  }

  inline ReqFindPlayer& operator=(const ReqFindPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqFindPlayer& operator=(ReqFindPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqFindPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqFindPlayer* internal_default_instance() {
    return reinterpret_cast<const ReqFindPlayer*>(
               &_ReqFindPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    189;

  friend void swap(ReqFindPlayer& a, ReqFindPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqFindPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqFindPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqFindPlayer* New() const final {
    return new ReqFindPlayer();
  }

  ReqFindPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqFindPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqFindPlayer& from);
  void MergeFrom(const ReqFindPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqFindPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqFindPlayer";
  }
  protected:
  explicit ReqFindPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetNameOrIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kFindTypeFieldNumber = 3,
  };
  // bytes target_name_or_id = 2;
  void clear_target_name_or_id();
  const std::string& target_name_or_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_target_name_or_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_target_name_or_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_target_name_or_id();
  void set_allocated_target_name_or_id(std::string* target_name_or_id);
  private:
  const std::string& _internal_target_name_or_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_target_name_or_id(const std::string& value);
  std::string* _internal_mutable_target_name_or_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 find_type = 3;
  void clear_find_type();
  ::PROTOBUF_NAMESPACE_ID::int32 find_type() const;
  void set_find_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_find_type() const;
  void _internal_set_find_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqFindPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr target_name_or_id_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 find_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckFindPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckFindPlayer) */ {
 public:
  inline AckFindPlayer() : AckFindPlayer(nullptr) {}
  ~AckFindPlayer() override;
  explicit constexpr AckFindPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckFindPlayer(const AckFindPlayer& from);
  AckFindPlayer(AckFindPlayer&& from) noexcept
    : AckFindPlayer() {
    *this = ::std::move(from);
  }

  inline AckFindPlayer& operator=(const AckFindPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckFindPlayer& operator=(AckFindPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckFindPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckFindPlayer* internal_default_instance() {
    return reinterpret_cast<const AckFindPlayer*>(
               &_AckFindPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    190;

  friend void swap(AckFindPlayer& a, AckFindPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(AckFindPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckFindPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckFindPlayer* New() const final {
    return new AckFindPlayer();
  }

  AckFindPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckFindPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckFindPlayer& from);
  void MergeFrom(const AckFindPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckFindPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckFindPlayer";
  }
  protected:
  explicit AckFindPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseInfoFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.PlayerBaseInfo base_info = 2;
  bool has_base_info() const;
  private:
  bool _internal_has_base_info() const;
  public:
  void clear_base_info();
  const ::KWMsg::PlayerBaseInfo& base_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::PlayerBaseInfo* release_base_info();
  ::KWMsg::PlayerBaseInfo* mutable_base_info();
  void set_allocated_base_info(::KWMsg::PlayerBaseInfo* base_info);
  private:
  const ::KWMsg::PlayerBaseInfo& _internal_base_info() const;
  ::KWMsg::PlayerBaseInfo* _internal_mutable_base_info();
  public:
  void unsafe_arena_set_allocated_base_info(
      ::KWMsg::PlayerBaseInfo* base_info);
  ::KWMsg::PlayerBaseInfo* unsafe_arena_release_base_info();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckFindPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::PlayerBaseInfo* base_info_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqExploreUpdateNodePostion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqExploreUpdateNodePostion) */ {
 public:
  inline ReqExploreUpdateNodePostion() : ReqExploreUpdateNodePostion(nullptr) {}
  ~ReqExploreUpdateNodePostion() override;
  explicit constexpr ReqExploreUpdateNodePostion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqExploreUpdateNodePostion(const ReqExploreUpdateNodePostion& from);
  ReqExploreUpdateNodePostion(ReqExploreUpdateNodePostion&& from) noexcept
    : ReqExploreUpdateNodePostion() {
    *this = ::std::move(from);
  }

  inline ReqExploreUpdateNodePostion& operator=(const ReqExploreUpdateNodePostion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqExploreUpdateNodePostion& operator=(ReqExploreUpdateNodePostion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqExploreUpdateNodePostion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqExploreUpdateNodePostion* internal_default_instance() {
    return reinterpret_cast<const ReqExploreUpdateNodePostion*>(
               &_ReqExploreUpdateNodePostion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    191;

  friend void swap(ReqExploreUpdateNodePostion& a, ReqExploreUpdateNodePostion& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqExploreUpdateNodePostion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqExploreUpdateNodePostion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqExploreUpdateNodePostion* New() const final {
    return new ReqExploreUpdateNodePostion();
  }

  ReqExploreUpdateNodePostion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqExploreUpdateNodePostion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqExploreUpdateNodePostion& from);
  void MergeFrom(const ReqExploreUpdateNodePostion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqExploreUpdateNodePostion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqExploreUpdateNodePostion";
  }
  protected:
  explicit ReqExploreUpdateNodePostion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExploreNodeIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes explore_node_id = 2;
  void clear_explore_node_id();
  const std::string& explore_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_explore_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_explore_node_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_explore_node_id();
  void set_allocated_explore_node_id(std::string* explore_node_id);
  private:
  const std::string& _internal_explore_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_explore_node_id(const std::string& value);
  std::string* _internal_mutable_explore_node_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqExploreUpdateNodePostion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explore_node_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckExploreUpdateNodePostion final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckExploreUpdateNodePostion) */ {
 public:
  inline AckExploreUpdateNodePostion() : AckExploreUpdateNodePostion(nullptr) {}
  ~AckExploreUpdateNodePostion() override;
  explicit constexpr AckExploreUpdateNodePostion(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckExploreUpdateNodePostion(const AckExploreUpdateNodePostion& from);
  AckExploreUpdateNodePostion(AckExploreUpdateNodePostion&& from) noexcept
    : AckExploreUpdateNodePostion() {
    *this = ::std::move(from);
  }

  inline AckExploreUpdateNodePostion& operator=(const AckExploreUpdateNodePostion& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckExploreUpdateNodePostion& operator=(AckExploreUpdateNodePostion&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckExploreUpdateNodePostion& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckExploreUpdateNodePostion* internal_default_instance() {
    return reinterpret_cast<const AckExploreUpdateNodePostion*>(
               &_AckExploreUpdateNodePostion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    192;

  friend void swap(AckExploreUpdateNodePostion& a, AckExploreUpdateNodePostion& b) {
    a.Swap(&b);
  }
  inline void Swap(AckExploreUpdateNodePostion* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckExploreUpdateNodePostion* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckExploreUpdateNodePostion* New() const final {
    return new AckExploreUpdateNodePostion();
  }

  AckExploreUpdateNodePostion* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckExploreUpdateNodePostion>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckExploreUpdateNodePostion& from);
  void MergeFrom(const AckExploreUpdateNodePostion& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckExploreUpdateNodePostion* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckExploreUpdateNodePostion";
  }
  protected:
  explicit AckExploreUpdateNodePostion(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExploreNodeIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // bytes explore_node_id = 2;
  void clear_explore_node_id();
  const std::string& explore_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_explore_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_explore_node_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_explore_node_id();
  void set_allocated_explore_node_id(std::string* explore_node_id);
  private:
  const std::string& _internal_explore_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_explore_node_id(const std::string& value);
  std::string* _internal_mutable_explore_node_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckExploreUpdateNodePostion)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explore_node_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqGetExploreAreaProgressRewards final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGetExploreAreaProgressRewards) */ {
 public:
  inline ReqGetExploreAreaProgressRewards() : ReqGetExploreAreaProgressRewards(nullptr) {}
  ~ReqGetExploreAreaProgressRewards() override;
  explicit constexpr ReqGetExploreAreaProgressRewards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetExploreAreaProgressRewards(const ReqGetExploreAreaProgressRewards& from);
  ReqGetExploreAreaProgressRewards(ReqGetExploreAreaProgressRewards&& from) noexcept
    : ReqGetExploreAreaProgressRewards() {
    *this = ::std::move(from);
  }

  inline ReqGetExploreAreaProgressRewards& operator=(const ReqGetExploreAreaProgressRewards& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetExploreAreaProgressRewards& operator=(ReqGetExploreAreaProgressRewards&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetExploreAreaProgressRewards& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetExploreAreaProgressRewards* internal_default_instance() {
    return reinterpret_cast<const ReqGetExploreAreaProgressRewards*>(
               &_ReqGetExploreAreaProgressRewards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    193;

  friend void swap(ReqGetExploreAreaProgressRewards& a, ReqGetExploreAreaProgressRewards& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetExploreAreaProgressRewards* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetExploreAreaProgressRewards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGetExploreAreaProgressRewards* New() const final {
    return new ReqGetExploreAreaProgressRewards();
  }

  ReqGetExploreAreaProgressRewards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetExploreAreaProgressRewards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetExploreAreaProgressRewards& from);
  void MergeFrom(const ReqGetExploreAreaProgressRewards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetExploreAreaProgressRewards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGetExploreAreaProgressRewards";
  }
  protected:
  explicit ReqGetExploreAreaProgressRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExploreAreaIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes explore_area_id = 2;
  void clear_explore_area_id();
  const std::string& explore_area_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_explore_area_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_explore_area_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_explore_area_id();
  void set_allocated_explore_area_id(std::string* explore_area_id);
  private:
  const std::string& _internal_explore_area_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_explore_area_id(const std::string& value);
  std::string* _internal_mutable_explore_area_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGetExploreAreaProgressRewards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explore_area_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckGetExploreAreaProgressRewards final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGetExploreAreaProgressRewards) */ {
 public:
  inline AckGetExploreAreaProgressRewards() : AckGetExploreAreaProgressRewards(nullptr) {}
  ~AckGetExploreAreaProgressRewards() override;
  explicit constexpr AckGetExploreAreaProgressRewards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGetExploreAreaProgressRewards(const AckGetExploreAreaProgressRewards& from);
  AckGetExploreAreaProgressRewards(AckGetExploreAreaProgressRewards&& from) noexcept
    : AckGetExploreAreaProgressRewards() {
    *this = ::std::move(from);
  }

  inline AckGetExploreAreaProgressRewards& operator=(const AckGetExploreAreaProgressRewards& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGetExploreAreaProgressRewards& operator=(AckGetExploreAreaProgressRewards&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGetExploreAreaProgressRewards& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGetExploreAreaProgressRewards* internal_default_instance() {
    return reinterpret_cast<const AckGetExploreAreaProgressRewards*>(
               &_AckGetExploreAreaProgressRewards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    194;

  friend void swap(AckGetExploreAreaProgressRewards& a, AckGetExploreAreaProgressRewards& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGetExploreAreaProgressRewards* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGetExploreAreaProgressRewards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGetExploreAreaProgressRewards* New() const final {
    return new AckGetExploreAreaProgressRewards();
  }

  AckGetExploreAreaProgressRewards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGetExploreAreaProgressRewards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGetExploreAreaProgressRewards& from);
  void MergeFrom(const AckGetExploreAreaProgressRewards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGetExploreAreaProgressRewards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGetExploreAreaProgressRewards";
  }
  protected:
  explicit AckGetExploreAreaProgressRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.RewardInfo reward_list = 2;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::KWMsg::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_reward_list();
  private:
  const ::KWMsg::RewardInfo& _internal_reward_list(int index) const;
  ::KWMsg::RewardInfo* _internal_add_reward_list();
  public:
  const ::KWMsg::RewardInfo& reward_list(int index) const;
  ::KWMsg::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      reward_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGetExploreAreaProgressRewards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > reward_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSweepExploreThreeStarNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSweepExploreThreeStarNode) */ {
 public:
  inline ReqSweepExploreThreeStarNode() : ReqSweepExploreThreeStarNode(nullptr) {}
  ~ReqSweepExploreThreeStarNode() override;
  explicit constexpr ReqSweepExploreThreeStarNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSweepExploreThreeStarNode(const ReqSweepExploreThreeStarNode& from);
  ReqSweepExploreThreeStarNode(ReqSweepExploreThreeStarNode&& from) noexcept
    : ReqSweepExploreThreeStarNode() {
    *this = ::std::move(from);
  }

  inline ReqSweepExploreThreeStarNode& operator=(const ReqSweepExploreThreeStarNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSweepExploreThreeStarNode& operator=(ReqSweepExploreThreeStarNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSweepExploreThreeStarNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSweepExploreThreeStarNode* internal_default_instance() {
    return reinterpret_cast<const ReqSweepExploreThreeStarNode*>(
               &_ReqSweepExploreThreeStarNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    195;

  friend void swap(ReqSweepExploreThreeStarNode& a, ReqSweepExploreThreeStarNode& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSweepExploreThreeStarNode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSweepExploreThreeStarNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSweepExploreThreeStarNode* New() const final {
    return new ReqSweepExploreThreeStarNode();
  }

  ReqSweepExploreThreeStarNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSweepExploreThreeStarNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSweepExploreThreeStarNode& from);
  void MergeFrom(const ReqSweepExploreThreeStarNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSweepExploreThreeStarNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSweepExploreThreeStarNode";
  }
  protected:
  explicit ReqSweepExploreThreeStarNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExploreNodeIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kSweepCountFieldNumber = 3,
  };
  // bytes explore_node_id = 2;
  void clear_explore_node_id();
  const std::string& explore_node_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_explore_node_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_explore_node_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_explore_node_id();
  void set_allocated_explore_node_id(std::string* explore_node_id);
  private:
  const std::string& _internal_explore_node_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_explore_node_id(const std::string& value);
  std::string* _internal_mutable_explore_node_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 sweep_count = 3;
  void clear_sweep_count();
  ::PROTOBUF_NAMESPACE_ID::int32 sweep_count() const;
  void set_sweep_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sweep_count() const;
  void _internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSweepExploreThreeStarNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explore_node_id_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sweep_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSweepExploreThreeStarNode final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSweepExploreThreeStarNode) */ {
 public:
  inline AckSweepExploreThreeStarNode() : AckSweepExploreThreeStarNode(nullptr) {}
  ~AckSweepExploreThreeStarNode() override;
  explicit constexpr AckSweepExploreThreeStarNode(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSweepExploreThreeStarNode(const AckSweepExploreThreeStarNode& from);
  AckSweepExploreThreeStarNode(AckSweepExploreThreeStarNode&& from) noexcept
    : AckSweepExploreThreeStarNode() {
    *this = ::std::move(from);
  }

  inline AckSweepExploreThreeStarNode& operator=(const AckSweepExploreThreeStarNode& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSweepExploreThreeStarNode& operator=(AckSweepExploreThreeStarNode&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSweepExploreThreeStarNode& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSweepExploreThreeStarNode* internal_default_instance() {
    return reinterpret_cast<const AckSweepExploreThreeStarNode*>(
               &_AckSweepExploreThreeStarNode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    196;

  friend void swap(AckSweepExploreThreeStarNode& a, AckSweepExploreThreeStarNode& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSweepExploreThreeStarNode* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSweepExploreThreeStarNode* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSweepExploreThreeStarNode* New() const final {
    return new AckSweepExploreThreeStarNode();
  }

  AckSweepExploreThreeStarNode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSweepExploreThreeStarNode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSweepExploreThreeStarNode& from);
  void MergeFrom(const AckSweepExploreThreeStarNode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSweepExploreThreeStarNode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSweepExploreThreeStarNode";
  }
  protected:
  explicit AckSweepExploreThreeStarNode(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 2,
    kExtraRewardListFieldNumber = 3,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.RewardInfo reward_list = 2;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::KWMsg::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_reward_list();
  private:
  const ::KWMsg::RewardInfo& _internal_reward_list(int index) const;
  ::KWMsg::RewardInfo* _internal_add_reward_list();
  public:
  const ::KWMsg::RewardInfo& reward_list(int index) const;
  ::KWMsg::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      reward_list() const;

  // repeated .KWMsg.RewardInfo extra_reward_list = 3;
  int extra_reward_list_size() const;
  private:
  int _internal_extra_reward_list_size() const;
  public:
  void clear_extra_reward_list();
  ::KWMsg::RewardInfo* mutable_extra_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_extra_reward_list();
  private:
  const ::KWMsg::RewardInfo& _internal_extra_reward_list(int index) const;
  ::KWMsg::RewardInfo* _internal_add_extra_reward_list();
  public:
  const ::KWMsg::RewardInfo& extra_reward_list(int index) const;
  ::KWMsg::RewardInfo* add_extra_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      extra_reward_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSweepExploreThreeStarNode)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > reward_list_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > extra_reward_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqGetExploreMapStarRewards final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGetExploreMapStarRewards) */ {
 public:
  inline ReqGetExploreMapStarRewards() : ReqGetExploreMapStarRewards(nullptr) {}
  ~ReqGetExploreMapStarRewards() override;
  explicit constexpr ReqGetExploreMapStarRewards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetExploreMapStarRewards(const ReqGetExploreMapStarRewards& from);
  ReqGetExploreMapStarRewards(ReqGetExploreMapStarRewards&& from) noexcept
    : ReqGetExploreMapStarRewards() {
    *this = ::std::move(from);
  }

  inline ReqGetExploreMapStarRewards& operator=(const ReqGetExploreMapStarRewards& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetExploreMapStarRewards& operator=(ReqGetExploreMapStarRewards&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetExploreMapStarRewards& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetExploreMapStarRewards* internal_default_instance() {
    return reinterpret_cast<const ReqGetExploreMapStarRewards*>(
               &_ReqGetExploreMapStarRewards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    197;

  friend void swap(ReqGetExploreMapStarRewards& a, ReqGetExploreMapStarRewards& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetExploreMapStarRewards* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetExploreMapStarRewards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGetExploreMapStarRewards* New() const final {
    return new ReqGetExploreMapStarRewards();
  }

  ReqGetExploreMapStarRewards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetExploreMapStarRewards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetExploreMapStarRewards& from);
  void MergeFrom(const ReqGetExploreMapStarRewards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetExploreMapStarRewards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGetExploreMapStarRewards";
  }
  protected:
  explicit ReqGetExploreMapStarRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExploreMapIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // bytes explore_map_id = 3;
  void clear_explore_map_id();
  const std::string& explore_map_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_explore_map_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_explore_map_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_explore_map_id();
  void set_allocated_explore_map_id(std::string* explore_map_id);
  private:
  const std::string& _internal_explore_map_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_explore_map_id(const std::string& value);
  std::string* _internal_mutable_explore_map_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 target = 2;
  void clear_target();
  ::PROTOBUF_NAMESPACE_ID::int32 target() const;
  void set_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target() const;
  void _internal_set_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGetExploreMapStarRewards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explore_map_id_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckGetExploreMapStarRewards final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGetExploreMapStarRewards) */ {
 public:
  inline AckGetExploreMapStarRewards() : AckGetExploreMapStarRewards(nullptr) {}
  ~AckGetExploreMapStarRewards() override;
  explicit constexpr AckGetExploreMapStarRewards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGetExploreMapStarRewards(const AckGetExploreMapStarRewards& from);
  AckGetExploreMapStarRewards(AckGetExploreMapStarRewards&& from) noexcept
    : AckGetExploreMapStarRewards() {
    *this = ::std::move(from);
  }

  inline AckGetExploreMapStarRewards& operator=(const AckGetExploreMapStarRewards& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGetExploreMapStarRewards& operator=(AckGetExploreMapStarRewards&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGetExploreMapStarRewards& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGetExploreMapStarRewards* internal_default_instance() {
    return reinterpret_cast<const AckGetExploreMapStarRewards*>(
               &_AckGetExploreMapStarRewards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    198;

  friend void swap(AckGetExploreMapStarRewards& a, AckGetExploreMapStarRewards& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGetExploreMapStarRewards* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGetExploreMapStarRewards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGetExploreMapStarRewards* New() const final {
    return new AckGetExploreMapStarRewards();
  }

  AckGetExploreMapStarRewards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGetExploreMapStarRewards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGetExploreMapStarRewards& from);
  void MergeFrom(const AckGetExploreMapStarRewards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGetExploreMapStarRewards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGetExploreMapStarRewards";
  }
  protected:
  explicit AckGetExploreMapStarRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.RewardInfo reward_list = 2;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::KWMsg::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_reward_list();
  private:
  const ::KWMsg::RewardInfo& _internal_reward_list(int index) const;
  ::KWMsg::RewardInfo* _internal_add_reward_list();
  public:
  const ::KWMsg::RewardInfo& reward_list(int index) const;
  ::KWMsg::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      reward_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGetExploreMapStarRewards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > reward_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqGetExploreMapBranchlineRewards final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGetExploreMapBranchlineRewards) */ {
 public:
  inline ReqGetExploreMapBranchlineRewards() : ReqGetExploreMapBranchlineRewards(nullptr) {}
  ~ReqGetExploreMapBranchlineRewards() override;
  explicit constexpr ReqGetExploreMapBranchlineRewards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetExploreMapBranchlineRewards(const ReqGetExploreMapBranchlineRewards& from);
  ReqGetExploreMapBranchlineRewards(ReqGetExploreMapBranchlineRewards&& from) noexcept
    : ReqGetExploreMapBranchlineRewards() {
    *this = ::std::move(from);
  }

  inline ReqGetExploreMapBranchlineRewards& operator=(const ReqGetExploreMapBranchlineRewards& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetExploreMapBranchlineRewards& operator=(ReqGetExploreMapBranchlineRewards&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetExploreMapBranchlineRewards& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetExploreMapBranchlineRewards* internal_default_instance() {
    return reinterpret_cast<const ReqGetExploreMapBranchlineRewards*>(
               &_ReqGetExploreMapBranchlineRewards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    199;

  friend void swap(ReqGetExploreMapBranchlineRewards& a, ReqGetExploreMapBranchlineRewards& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetExploreMapBranchlineRewards* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetExploreMapBranchlineRewards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGetExploreMapBranchlineRewards* New() const final {
    return new ReqGetExploreMapBranchlineRewards();
  }

  ReqGetExploreMapBranchlineRewards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetExploreMapBranchlineRewards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetExploreMapBranchlineRewards& from);
  void MergeFrom(const ReqGetExploreMapBranchlineRewards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetExploreMapBranchlineRewards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGetExploreMapBranchlineRewards";
  }
  protected:
  explicit ReqGetExploreMapBranchlineRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExploreMapIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // bytes explore_map_id = 3;
  void clear_explore_map_id();
  const std::string& explore_map_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_explore_map_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_explore_map_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_explore_map_id();
  void set_allocated_explore_map_id(std::string* explore_map_id);
  private:
  const std::string& _internal_explore_map_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_explore_map_id(const std::string& value);
  std::string* _internal_mutable_explore_map_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 target = 2;
  void clear_target();
  ::PROTOBUF_NAMESPACE_ID::int32 target() const;
  void set_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_target() const;
  void _internal_set_target(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGetExploreMapBranchlineRewards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explore_map_id_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 target_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckGetExploreMapBranchlineRewards final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGetExploreMapBranchlineRewards) */ {
 public:
  inline AckGetExploreMapBranchlineRewards() : AckGetExploreMapBranchlineRewards(nullptr) {}
  ~AckGetExploreMapBranchlineRewards() override;
  explicit constexpr AckGetExploreMapBranchlineRewards(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGetExploreMapBranchlineRewards(const AckGetExploreMapBranchlineRewards& from);
  AckGetExploreMapBranchlineRewards(AckGetExploreMapBranchlineRewards&& from) noexcept
    : AckGetExploreMapBranchlineRewards() {
    *this = ::std::move(from);
  }

  inline AckGetExploreMapBranchlineRewards& operator=(const AckGetExploreMapBranchlineRewards& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGetExploreMapBranchlineRewards& operator=(AckGetExploreMapBranchlineRewards&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGetExploreMapBranchlineRewards& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGetExploreMapBranchlineRewards* internal_default_instance() {
    return reinterpret_cast<const AckGetExploreMapBranchlineRewards*>(
               &_AckGetExploreMapBranchlineRewards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    200;

  friend void swap(AckGetExploreMapBranchlineRewards& a, AckGetExploreMapBranchlineRewards& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGetExploreMapBranchlineRewards* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGetExploreMapBranchlineRewards* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGetExploreMapBranchlineRewards* New() const final {
    return new AckGetExploreMapBranchlineRewards();
  }

  AckGetExploreMapBranchlineRewards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGetExploreMapBranchlineRewards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGetExploreMapBranchlineRewards& from);
  void MergeFrom(const AckGetExploreMapBranchlineRewards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGetExploreMapBranchlineRewards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGetExploreMapBranchlineRewards";
  }
  protected:
  explicit AckGetExploreMapBranchlineRewards(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.RewardInfo reward_list = 2;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::KWMsg::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_reward_list();
  private:
  const ::KWMsg::RewardInfo& _internal_reward_list(int index) const;
  ::KWMsg::RewardInfo* _internal_add_reward_list();
  public:
  const ::KWMsg::RewardInfo& reward_list(int index) const;
  ::KWMsg::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      reward_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGetExploreMapBranchlineRewards)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > reward_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqUpgradeExploreGuiderFriendship final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUpgradeExploreGuiderFriendship) */ {
 public:
  inline ReqUpgradeExploreGuiderFriendship() : ReqUpgradeExploreGuiderFriendship(nullptr) {}
  ~ReqUpgradeExploreGuiderFriendship() override;
  explicit constexpr ReqUpgradeExploreGuiderFriendship(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUpgradeExploreGuiderFriendship(const ReqUpgradeExploreGuiderFriendship& from);
  ReqUpgradeExploreGuiderFriendship(ReqUpgradeExploreGuiderFriendship&& from) noexcept
    : ReqUpgradeExploreGuiderFriendship() {
    *this = ::std::move(from);
  }

  inline ReqUpgradeExploreGuiderFriendship& operator=(const ReqUpgradeExploreGuiderFriendship& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUpgradeExploreGuiderFriendship& operator=(ReqUpgradeExploreGuiderFriendship&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUpgradeExploreGuiderFriendship& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUpgradeExploreGuiderFriendship* internal_default_instance() {
    return reinterpret_cast<const ReqUpgradeExploreGuiderFriendship*>(
               &_ReqUpgradeExploreGuiderFriendship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    201;

  friend void swap(ReqUpgradeExploreGuiderFriendship& a, ReqUpgradeExploreGuiderFriendship& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUpgradeExploreGuiderFriendship* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUpgradeExploreGuiderFriendship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUpgradeExploreGuiderFriendship* New() const final {
    return new ReqUpgradeExploreGuiderFriendship();
  }

  ReqUpgradeExploreGuiderFriendship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUpgradeExploreGuiderFriendship>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUpgradeExploreGuiderFriendship& from);
  void MergeFrom(const ReqUpgradeExploreGuiderFriendship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUpgradeExploreGuiderFriendship* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUpgradeExploreGuiderFriendship";
  }
  protected:
  explicit ReqUpgradeExploreGuiderFriendship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kExploreGuiderIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes explore_guider_id = 2;
  void clear_explore_guider_id();
  const std::string& explore_guider_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_explore_guider_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_explore_guider_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_explore_guider_id();
  void set_allocated_explore_guider_id(std::string* explore_guider_id);
  private:
  const std::string& _internal_explore_guider_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_explore_guider_id(const std::string& value);
  std::string* _internal_mutable_explore_guider_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUpgradeExploreGuiderFriendship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr explore_guider_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckUpgradeExploreGuiderFriendship final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckUpgradeExploreGuiderFriendship) */ {
 public:
  inline AckUpgradeExploreGuiderFriendship() : AckUpgradeExploreGuiderFriendship(nullptr) {}
  ~AckUpgradeExploreGuiderFriendship() override;
  explicit constexpr AckUpgradeExploreGuiderFriendship(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckUpgradeExploreGuiderFriendship(const AckUpgradeExploreGuiderFriendship& from);
  AckUpgradeExploreGuiderFriendship(AckUpgradeExploreGuiderFriendship&& from) noexcept
    : AckUpgradeExploreGuiderFriendship() {
    *this = ::std::move(from);
  }

  inline AckUpgradeExploreGuiderFriendship& operator=(const AckUpgradeExploreGuiderFriendship& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckUpgradeExploreGuiderFriendship& operator=(AckUpgradeExploreGuiderFriendship&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckUpgradeExploreGuiderFriendship& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckUpgradeExploreGuiderFriendship* internal_default_instance() {
    return reinterpret_cast<const AckUpgradeExploreGuiderFriendship*>(
               &_AckUpgradeExploreGuiderFriendship_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    202;

  friend void swap(AckUpgradeExploreGuiderFriendship& a, AckUpgradeExploreGuiderFriendship& b) {
    a.Swap(&b);
  }
  inline void Swap(AckUpgradeExploreGuiderFriendship* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckUpgradeExploreGuiderFriendship* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckUpgradeExploreGuiderFriendship* New() const final {
    return new AckUpgradeExploreGuiderFriendship();
  }

  AckUpgradeExploreGuiderFriendship* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckUpgradeExploreGuiderFriendship>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckUpgradeExploreGuiderFriendship& from);
  void MergeFrom(const AckUpgradeExploreGuiderFriendship& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckUpgradeExploreGuiderFriendship* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckUpgradeExploreGuiderFriendship";
  }
  protected:
  explicit AckUpgradeExploreGuiderFriendship(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckUpgradeExploreGuiderFriendship)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqGetAppointReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGetAppointReward) */ {
 public:
  inline ReqGetAppointReward() : ReqGetAppointReward(nullptr) {}
  ~ReqGetAppointReward() override;
  explicit constexpr ReqGetAppointReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetAppointReward(const ReqGetAppointReward& from);
  ReqGetAppointReward(ReqGetAppointReward&& from) noexcept
    : ReqGetAppointReward() {
    *this = ::std::move(from);
  }

  inline ReqGetAppointReward& operator=(const ReqGetAppointReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetAppointReward& operator=(ReqGetAppointReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetAppointReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetAppointReward* internal_default_instance() {
    return reinterpret_cast<const ReqGetAppointReward*>(
               &_ReqGetAppointReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    203;

  friend void swap(ReqGetAppointReward& a, ReqGetAppointReward& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetAppointReward* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetAppointReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGetAppointReward* New() const final {
    return new ReqGetAppointReward();
  }

  ReqGetAppointReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetAppointReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetAppointReward& from);
  void MergeFrom(const ReqGetAppointReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetAppointReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGetAppointReward";
  }
  protected:
  explicit ReqGetAppointReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGetAppointReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckGetAppointReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGetAppointReward) */ {
 public:
  inline AckGetAppointReward() : AckGetAppointReward(nullptr) {}
  ~AckGetAppointReward() override;
  explicit constexpr AckGetAppointReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGetAppointReward(const AckGetAppointReward& from);
  AckGetAppointReward(AckGetAppointReward&& from) noexcept
    : AckGetAppointReward() {
    *this = ::std::move(from);
  }

  inline AckGetAppointReward& operator=(const AckGetAppointReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGetAppointReward& operator=(AckGetAppointReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGetAppointReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGetAppointReward* internal_default_instance() {
    return reinterpret_cast<const AckGetAppointReward*>(
               &_AckGetAppointReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    204;

  friend void swap(AckGetAppointReward& a, AckGetAppointReward& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGetAppointReward* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGetAppointReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGetAppointReward* New() const final {
    return new AckGetAppointReward();
  }

  AckGetAppointReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGetAppointReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGetAppointReward& from);
  void MergeFrom(const AckGetAppointReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGetAppointReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGetAppointReward";
  }
  protected:
  explicit AckGetAppointReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardsFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.RewardInfo rewards = 2;
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;
  public:
  void clear_rewards();
  ::KWMsg::RewardInfo* mutable_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_rewards();
  private:
  const ::KWMsg::RewardInfo& _internal_rewards(int index) const;
  ::KWMsg::RewardInfo* _internal_add_rewards();
  public:
  const ::KWMsg::RewardInfo& rewards(int index) const;
  ::KWMsg::RewardInfo* add_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      rewards() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGetAppointReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > rewards_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSwitchAppointArea final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSwitchAppointArea) */ {
 public:
  inline ReqSwitchAppointArea() : ReqSwitchAppointArea(nullptr) {}
  ~ReqSwitchAppointArea() override;
  explicit constexpr ReqSwitchAppointArea(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSwitchAppointArea(const ReqSwitchAppointArea& from);
  ReqSwitchAppointArea(ReqSwitchAppointArea&& from) noexcept
    : ReqSwitchAppointArea() {
    *this = ::std::move(from);
  }

  inline ReqSwitchAppointArea& operator=(const ReqSwitchAppointArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSwitchAppointArea& operator=(ReqSwitchAppointArea&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSwitchAppointArea& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSwitchAppointArea* internal_default_instance() {
    return reinterpret_cast<const ReqSwitchAppointArea*>(
               &_ReqSwitchAppointArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    205;

  friend void swap(ReqSwitchAppointArea& a, ReqSwitchAppointArea& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSwitchAppointArea* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSwitchAppointArea* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSwitchAppointArea* New() const final {
    return new ReqSwitchAppointArea();
  }

  ReqSwitchAppointArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSwitchAppointArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSwitchAppointArea& from);
  void MergeFrom(const ReqSwitchAppointArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSwitchAppointArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSwitchAppointArea";
  }
  protected:
  explicit ReqSwitchAppointArea(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppointAreaIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes appoint_area_id = 2;
  void clear_appoint_area_id();
  const std::string& appoint_area_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appoint_area_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appoint_area_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_appoint_area_id();
  void set_allocated_appoint_area_id(std::string* appoint_area_id);
  private:
  const std::string& _internal_appoint_area_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appoint_area_id(const std::string& value);
  std::string* _internal_mutable_appoint_area_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSwitchAppointArea)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appoint_area_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSwitchAppointArea final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSwitchAppointArea) */ {
 public:
  inline AckSwitchAppointArea() : AckSwitchAppointArea(nullptr) {}
  ~AckSwitchAppointArea() override;
  explicit constexpr AckSwitchAppointArea(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSwitchAppointArea(const AckSwitchAppointArea& from);
  AckSwitchAppointArea(AckSwitchAppointArea&& from) noexcept
    : AckSwitchAppointArea() {
    *this = ::std::move(from);
  }

  inline AckSwitchAppointArea& operator=(const AckSwitchAppointArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSwitchAppointArea& operator=(AckSwitchAppointArea&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSwitchAppointArea& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSwitchAppointArea* internal_default_instance() {
    return reinterpret_cast<const AckSwitchAppointArea*>(
               &_AckSwitchAppointArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    206;

  friend void swap(AckSwitchAppointArea& a, AckSwitchAppointArea& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSwitchAppointArea* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSwitchAppointArea* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSwitchAppointArea* New() const final {
    return new AckSwitchAppointArea();
  }

  AckSwitchAppointArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSwitchAppointArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSwitchAppointArea& from);
  void MergeFrom(const AckSwitchAppointArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSwitchAppointArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSwitchAppointArea";
  }
  protected:
  explicit AckSwitchAppointArea(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardsFieldNumber = 3,
    kAppointAreaIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.RewardInfo rewards = 3;
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;
  public:
  void clear_rewards();
  ::KWMsg::RewardInfo* mutable_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_rewards();
  private:
  const ::KWMsg::RewardInfo& _internal_rewards(int index) const;
  ::KWMsg::RewardInfo* _internal_add_rewards();
  public:
  const ::KWMsg::RewardInfo& rewards(int index) const;
  ::KWMsg::RewardInfo* add_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      rewards() const;

  // bytes appoint_area_id = 2;
  void clear_appoint_area_id();
  const std::string& appoint_area_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_appoint_area_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_appoint_area_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_appoint_area_id();
  void set_allocated_appoint_area_id(std::string* appoint_area_id);
  private:
  const std::string& _internal_appoint_area_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_appoint_area_id(const std::string& value);
  std::string* _internal_mutable_appoint_area_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSwitchAppointArea)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > rewards_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr appoint_area_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqStartAffair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqStartAffair) */ {
 public:
  inline ReqStartAffair() : ReqStartAffair(nullptr) {}
  ~ReqStartAffair() override;
  explicit constexpr ReqStartAffair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqStartAffair(const ReqStartAffair& from);
  ReqStartAffair(ReqStartAffair&& from) noexcept
    : ReqStartAffair() {
    *this = ::std::move(from);
  }

  inline ReqStartAffair& operator=(const ReqStartAffair& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqStartAffair& operator=(ReqStartAffair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqStartAffair& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqStartAffair* internal_default_instance() {
    return reinterpret_cast<const ReqStartAffair*>(
               &_ReqStartAffair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    207;

  friend void swap(ReqStartAffair& a, ReqStartAffair& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqStartAffair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqStartAffair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqStartAffair* New() const final {
    return new ReqStartAffair();
  }

  ReqStartAffair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqStartAffair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqStartAffair& from);
  void MergeFrom(const ReqStartAffair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqStartAffair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqStartAffair";
  }
  protected:
  explicit ReqStartAffair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffairPositionFieldNumber = 2,
    kWitchIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kAffairGuidFieldNumber = 4,
  };
  // bytes affair_position = 2;
  void clear_affair_position();
  const std::string& affair_position() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_affair_position(ArgT0&& arg0, ArgT... args);
  std::string* mutable_affair_position();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_affair_position();
  void set_allocated_affair_position(std::string* affair_position);
  private:
  const std::string& _internal_affair_position() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_affair_position(const std::string& value);
  std::string* _internal_mutable_affair_position();
  public:

  // bytes witch_id = 3;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident affair_guid = 4;
  bool has_affair_guid() const;
  private:
  bool _internal_has_affair_guid() const;
  public:
  void clear_affair_guid();
  const ::KWMsg::Ident& affair_guid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_affair_guid();
  ::KWMsg::Ident* mutable_affair_guid();
  void set_allocated_affair_guid(::KWMsg::Ident* affair_guid);
  private:
  const ::KWMsg::Ident& _internal_affair_guid() const;
  ::KWMsg::Ident* _internal_mutable_affair_guid();
  public:
  void unsafe_arena_set_allocated_affair_guid(
      ::KWMsg::Ident* affair_guid);
  ::KWMsg::Ident* unsafe_arena_release_affair_guid();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqStartAffair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affair_position_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* affair_guid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckStartAffair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckStartAffair) */ {
 public:
  inline AckStartAffair() : AckStartAffair(nullptr) {}
  ~AckStartAffair() override;
  explicit constexpr AckStartAffair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckStartAffair(const AckStartAffair& from);
  AckStartAffair(AckStartAffair&& from) noexcept
    : AckStartAffair() {
    *this = ::std::move(from);
  }

  inline AckStartAffair& operator=(const AckStartAffair& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckStartAffair& operator=(AckStartAffair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckStartAffair& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckStartAffair* internal_default_instance() {
    return reinterpret_cast<const AckStartAffair*>(
               &_AckStartAffair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    208;

  friend void swap(AckStartAffair& a, AckStartAffair& b) {
    a.Swap(&b);
  }
  inline void Swap(AckStartAffair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckStartAffair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckStartAffair* New() const final {
    return new AckStartAffair();
  }

  AckStartAffair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckStartAffair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckStartAffair& from);
  void MergeFrom(const AckStartAffair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckStartAffair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckStartAffair";
  }
  protected:
  explicit AckStartAffair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffairPositionFieldNumber = 2,
    kWitchIdFieldNumber = 3,
    kAffairGuidFieldNumber = 4,
    kEventCodeFieldNumber = 1,
  };
  // bytes affair_position = 2;
  void clear_affair_position();
  const std::string& affair_position() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_affair_position(ArgT0&& arg0, ArgT... args);
  std::string* mutable_affair_position();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_affair_position();
  void set_allocated_affair_position(std::string* affair_position);
  private:
  const std::string& _internal_affair_position() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_affair_position(const std::string& value);
  std::string* _internal_mutable_affair_position();
  public:

  // bytes witch_id = 3;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // .KWMsg.Ident affair_guid = 4;
  bool has_affair_guid() const;
  private:
  bool _internal_has_affair_guid() const;
  public:
  void clear_affair_guid();
  const ::KWMsg::Ident& affair_guid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_affair_guid();
  ::KWMsg::Ident* mutable_affair_guid();
  void set_allocated_affair_guid(::KWMsg::Ident* affair_guid);
  private:
  const ::KWMsg::Ident& _internal_affair_guid() const;
  ::KWMsg::Ident* _internal_mutable_affair_guid();
  public:
  void unsafe_arena_set_allocated_affair_guid(
      ::KWMsg::Ident* affair_guid);
  ::KWMsg::Ident* unsafe_arena_release_affair_guid();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckStartAffair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affair_position_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::KWMsg::Ident* affair_guid_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqTerminateAffair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqTerminateAffair) */ {
 public:
  inline ReqTerminateAffair() : ReqTerminateAffair(nullptr) {}
  ~ReqTerminateAffair() override;
  explicit constexpr ReqTerminateAffair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqTerminateAffair(const ReqTerminateAffair& from);
  ReqTerminateAffair(ReqTerminateAffair&& from) noexcept
    : ReqTerminateAffair() {
    *this = ::std::move(from);
  }

  inline ReqTerminateAffair& operator=(const ReqTerminateAffair& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTerminateAffair& operator=(ReqTerminateAffair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqTerminateAffair& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqTerminateAffair* internal_default_instance() {
    return reinterpret_cast<const ReqTerminateAffair*>(
               &_ReqTerminateAffair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    209;

  friend void swap(ReqTerminateAffair& a, ReqTerminateAffair& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqTerminateAffair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTerminateAffair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqTerminateAffair* New() const final {
    return new ReqTerminateAffair();
  }

  ReqTerminateAffair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqTerminateAffair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqTerminateAffair& from);
  void MergeFrom(const ReqTerminateAffair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTerminateAffair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqTerminateAffair";
  }
  protected:
  explicit ReqTerminateAffair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffairPositionFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes affair_position = 2;
  void clear_affair_position();
  const std::string& affair_position() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_affair_position(ArgT0&& arg0, ArgT... args);
  std::string* mutable_affair_position();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_affair_position();
  void set_allocated_affair_position(std::string* affair_position);
  private:
  const std::string& _internal_affair_position() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_affair_position(const std::string& value);
  std::string* _internal_mutable_affair_position();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqTerminateAffair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affair_position_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckTerminateAffair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckTerminateAffair) */ {
 public:
  inline AckTerminateAffair() : AckTerminateAffair(nullptr) {}
  ~AckTerminateAffair() override;
  explicit constexpr AckTerminateAffair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckTerminateAffair(const AckTerminateAffair& from);
  AckTerminateAffair(AckTerminateAffair&& from) noexcept
    : AckTerminateAffair() {
    *this = ::std::move(from);
  }

  inline AckTerminateAffair& operator=(const AckTerminateAffair& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckTerminateAffair& operator=(AckTerminateAffair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckTerminateAffair& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckTerminateAffair* internal_default_instance() {
    return reinterpret_cast<const AckTerminateAffair*>(
               &_AckTerminateAffair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    210;

  friend void swap(AckTerminateAffair& a, AckTerminateAffair& b) {
    a.Swap(&b);
  }
  inline void Swap(AckTerminateAffair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckTerminateAffair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckTerminateAffair* New() const final {
    return new AckTerminateAffair();
  }

  AckTerminateAffair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckTerminateAffair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckTerminateAffair& from);
  void MergeFrom(const AckTerminateAffair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckTerminateAffair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckTerminateAffair";
  }
  protected:
  explicit AckTerminateAffair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffairPositionFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // bytes affair_position = 2;
  void clear_affair_position();
  const std::string& affair_position() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_affair_position(ArgT0&& arg0, ArgT... args);
  std::string* mutable_affair_position();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_affair_position();
  void set_allocated_affair_position(std::string* affair_position);
  private:
  const std::string& _internal_affair_position() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_affair_position(const std::string& value);
  std::string* _internal_mutable_affair_position();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckTerminateAffair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affair_position_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqGetAffairReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGetAffairReward) */ {
 public:
  inline ReqGetAffairReward() : ReqGetAffairReward(nullptr) {}
  ~ReqGetAffairReward() override;
  explicit constexpr ReqGetAffairReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetAffairReward(const ReqGetAffairReward& from);
  ReqGetAffairReward(ReqGetAffairReward&& from) noexcept
    : ReqGetAffairReward() {
    *this = ::std::move(from);
  }

  inline ReqGetAffairReward& operator=(const ReqGetAffairReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetAffairReward& operator=(ReqGetAffairReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetAffairReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetAffairReward* internal_default_instance() {
    return reinterpret_cast<const ReqGetAffairReward*>(
               &_ReqGetAffairReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    211;

  friend void swap(ReqGetAffairReward& a, ReqGetAffairReward& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetAffairReward* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetAffairReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGetAffairReward* New() const final {
    return new ReqGetAffairReward();
  }

  ReqGetAffairReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetAffairReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetAffairReward& from);
  void MergeFrom(const ReqGetAffairReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetAffairReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGetAffairReward";
  }
  protected:
  explicit ReqGetAffairReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffairPositionFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes affair_position = 2;
  void clear_affair_position();
  const std::string& affair_position() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_affair_position(ArgT0&& arg0, ArgT... args);
  std::string* mutable_affair_position();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_affair_position();
  void set_allocated_affair_position(std::string* affair_position);
  private:
  const std::string& _internal_affair_position() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_affair_position(const std::string& value);
  std::string* _internal_mutable_affair_position();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGetAffairReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affair_position_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckGetAffairReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGetAffairReward) */ {
 public:
  inline AckGetAffairReward() : AckGetAffairReward(nullptr) {}
  ~AckGetAffairReward() override;
  explicit constexpr AckGetAffairReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGetAffairReward(const AckGetAffairReward& from);
  AckGetAffairReward(AckGetAffairReward&& from) noexcept
    : AckGetAffairReward() {
    *this = ::std::move(from);
  }

  inline AckGetAffairReward& operator=(const AckGetAffairReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGetAffairReward& operator=(AckGetAffairReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGetAffairReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGetAffairReward* internal_default_instance() {
    return reinterpret_cast<const AckGetAffairReward*>(
               &_AckGetAffairReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    212;

  friend void swap(AckGetAffairReward& a, AckGetAffairReward& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGetAffairReward* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGetAffairReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGetAffairReward* New() const final {
    return new AckGetAffairReward();
  }

  AckGetAffairReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGetAffairReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGetAffairReward& from);
  void MergeFrom(const AckGetAffairReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGetAffairReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGetAffairReward";
  }
  protected:
  explicit AckGetAffairReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardsFieldNumber = 3,
    kAffairPositionFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.RewardInfo rewards = 3;
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;
  public:
  void clear_rewards();
  ::KWMsg::RewardInfo* mutable_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_rewards();
  private:
  const ::KWMsg::RewardInfo& _internal_rewards(int index) const;
  ::KWMsg::RewardInfo* _internal_add_rewards();
  public:
  const ::KWMsg::RewardInfo& rewards(int index) const;
  ::KWMsg::RewardInfo* add_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      rewards() const;

  // bytes affair_position = 2;
  void clear_affair_position();
  const std::string& affair_position() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_affair_position(ArgT0&& arg0, ArgT... args);
  std::string* mutable_affair_position();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_affair_position();
  void set_allocated_affair_position(std::string* affair_position);
  private:
  const std::string& _internal_affair_position() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_affair_position(const std::string& value);
  std::string* _internal_mutable_affair_position();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGetAffairReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > rewards_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr affair_position_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqDeleteAffair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqDeleteAffair) */ {
 public:
  inline ReqDeleteAffair() : ReqDeleteAffair(nullptr) {}
  ~ReqDeleteAffair() override;
  explicit constexpr ReqDeleteAffair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDeleteAffair(const ReqDeleteAffair& from);
  ReqDeleteAffair(ReqDeleteAffair&& from) noexcept
    : ReqDeleteAffair() {
    *this = ::std::move(from);
  }

  inline ReqDeleteAffair& operator=(const ReqDeleteAffair& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDeleteAffair& operator=(ReqDeleteAffair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDeleteAffair& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDeleteAffair* internal_default_instance() {
    return reinterpret_cast<const ReqDeleteAffair*>(
               &_ReqDeleteAffair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    213;

  friend void swap(ReqDeleteAffair& a, ReqDeleteAffair& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDeleteAffair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDeleteAffair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqDeleteAffair* New() const final {
    return new ReqDeleteAffair();
  }

  ReqDeleteAffair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDeleteAffair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqDeleteAffair& from);
  void MergeFrom(const ReqDeleteAffair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDeleteAffair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqDeleteAffair";
  }
  protected:
  explicit ReqDeleteAffair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kAffairGuidFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident affair_guid = 2;
  bool has_affair_guid() const;
  private:
  bool _internal_has_affair_guid() const;
  public:
  void clear_affair_guid();
  const ::KWMsg::Ident& affair_guid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_affair_guid();
  ::KWMsg::Ident* mutable_affair_guid();
  void set_allocated_affair_guid(::KWMsg::Ident* affair_guid);
  private:
  const ::KWMsg::Ident& _internal_affair_guid() const;
  ::KWMsg::Ident* _internal_mutable_affair_guid();
  public:
  void unsafe_arena_set_allocated_affair_guid(
      ::KWMsg::Ident* affair_guid);
  ::KWMsg::Ident* unsafe_arena_release_affair_guid();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqDeleteAffair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* affair_guid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckDeleteAffair final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckDeleteAffair) */ {
 public:
  inline AckDeleteAffair() : AckDeleteAffair(nullptr) {}
  ~AckDeleteAffair() override;
  explicit constexpr AckDeleteAffair(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckDeleteAffair(const AckDeleteAffair& from);
  AckDeleteAffair(AckDeleteAffair&& from) noexcept
    : AckDeleteAffair() {
    *this = ::std::move(from);
  }

  inline AckDeleteAffair& operator=(const AckDeleteAffair& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckDeleteAffair& operator=(AckDeleteAffair&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckDeleteAffair& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckDeleteAffair* internal_default_instance() {
    return reinterpret_cast<const AckDeleteAffair*>(
               &_AckDeleteAffair_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    214;

  friend void swap(AckDeleteAffair& a, AckDeleteAffair& b) {
    a.Swap(&b);
  }
  inline void Swap(AckDeleteAffair* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckDeleteAffair* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckDeleteAffair* New() const final {
    return new AckDeleteAffair();
  }

  AckDeleteAffair* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckDeleteAffair>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckDeleteAffair& from);
  void MergeFrom(const AckDeleteAffair& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckDeleteAffair* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckDeleteAffair";
  }
  protected:
  explicit AckDeleteAffair(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAffairGuidFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.Ident affair_guid = 2;
  bool has_affair_guid() const;
  private:
  bool _internal_has_affair_guid() const;
  public:
  void clear_affair_guid();
  const ::KWMsg::Ident& affair_guid() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_affair_guid();
  ::KWMsg::Ident* mutable_affair_guid();
  void set_allocated_affair_guid(::KWMsg::Ident* affair_guid);
  private:
  const ::KWMsg::Ident& _internal_affair_guid() const;
  ::KWMsg::Ident* _internal_mutable_affair_guid();
  public:
  void unsafe_arena_set_allocated_affair_guid(
      ::KWMsg::Ident* affair_guid);
  ::KWMsg::Ident* unsafe_arena_release_affair_guid();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckDeleteAffair)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* affair_guid_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqStartAppoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqStartAppoint) */ {
 public:
  inline ReqStartAppoint() : ReqStartAppoint(nullptr) {}
  ~ReqStartAppoint() override;
  explicit constexpr ReqStartAppoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqStartAppoint(const ReqStartAppoint& from);
  ReqStartAppoint(ReqStartAppoint&& from) noexcept
    : ReqStartAppoint() {
    *this = ::std::move(from);
  }

  inline ReqStartAppoint& operator=(const ReqStartAppoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqStartAppoint& operator=(ReqStartAppoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqStartAppoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqStartAppoint* internal_default_instance() {
    return reinterpret_cast<const ReqStartAppoint*>(
               &_ReqStartAppoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    215;

  friend void swap(ReqStartAppoint& a, ReqStartAppoint& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqStartAppoint* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqStartAppoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqStartAppoint* New() const final {
    return new ReqStartAppoint();
  }

  ReqStartAppoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqStartAppoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqStartAppoint& from);
  void MergeFrom(const ReqStartAppoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqStartAppoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqStartAppoint";
  }
  protected:
  explicit ReqStartAppoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqStartAppoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckStartAppoint final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckStartAppoint) */ {
 public:
  inline AckStartAppoint() : AckStartAppoint(nullptr) {}
  ~AckStartAppoint() override;
  explicit constexpr AckStartAppoint(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckStartAppoint(const AckStartAppoint& from);
  AckStartAppoint(AckStartAppoint&& from) noexcept
    : AckStartAppoint() {
    *this = ::std::move(from);
  }

  inline AckStartAppoint& operator=(const AckStartAppoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckStartAppoint& operator=(AckStartAppoint&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckStartAppoint& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckStartAppoint* internal_default_instance() {
    return reinterpret_cast<const AckStartAppoint*>(
               &_AckStartAppoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    216;

  friend void swap(AckStartAppoint& a, AckStartAppoint& b) {
    a.Swap(&b);
  }
  inline void Swap(AckStartAppoint* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckStartAppoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckStartAppoint* New() const final {
    return new AckStartAppoint();
  }

  AckStartAppoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckStartAppoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckStartAppoint& from);
  void MergeFrom(const AckStartAppoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckStartAppoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckStartAppoint";
  }
  protected:
  explicit AckStartAppoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckStartAppoint)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSetHouseKeeper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSetHouseKeeper) */ {
 public:
  inline ReqSetHouseKeeper() : ReqSetHouseKeeper(nullptr) {}
  ~ReqSetHouseKeeper() override;
  explicit constexpr ReqSetHouseKeeper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSetHouseKeeper(const ReqSetHouseKeeper& from);
  ReqSetHouseKeeper(ReqSetHouseKeeper&& from) noexcept
    : ReqSetHouseKeeper() {
    *this = ::std::move(from);
  }

  inline ReqSetHouseKeeper& operator=(const ReqSetHouseKeeper& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSetHouseKeeper& operator=(ReqSetHouseKeeper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSetHouseKeeper& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSetHouseKeeper* internal_default_instance() {
    return reinterpret_cast<const ReqSetHouseKeeper*>(
               &_ReqSetHouseKeeper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    217;

  friend void swap(ReqSetHouseKeeper& a, ReqSetHouseKeeper& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSetHouseKeeper* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSetHouseKeeper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSetHouseKeeper* New() const final {
    return new ReqSetHouseKeeper();
  }

  ReqSetHouseKeeper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSetHouseKeeper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSetHouseKeeper& from);
  void MergeFrom(const ReqSetHouseKeeper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSetHouseKeeper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSetHouseKeeper";
  }
  protected:
  explicit ReqSetHouseKeeper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes witch_id = 2;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSetHouseKeeper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSetHouseKeeper final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSetHouseKeeper) */ {
 public:
  inline AckSetHouseKeeper() : AckSetHouseKeeper(nullptr) {}
  ~AckSetHouseKeeper() override;
  explicit constexpr AckSetHouseKeeper(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSetHouseKeeper(const AckSetHouseKeeper& from);
  AckSetHouseKeeper(AckSetHouseKeeper&& from) noexcept
    : AckSetHouseKeeper() {
    *this = ::std::move(from);
  }

  inline AckSetHouseKeeper& operator=(const AckSetHouseKeeper& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSetHouseKeeper& operator=(AckSetHouseKeeper&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSetHouseKeeper& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSetHouseKeeper* internal_default_instance() {
    return reinterpret_cast<const AckSetHouseKeeper*>(
               &_AckSetHouseKeeper_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    218;

  friend void swap(AckSetHouseKeeper& a, AckSetHouseKeeper& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSetHouseKeeper* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSetHouseKeeper* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSetHouseKeeper* New() const final {
    return new AckSetHouseKeeper();
  }

  AckSetHouseKeeper* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSetHouseKeeper>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSetHouseKeeper& from);
  void MergeFrom(const AckSetHouseKeeper& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSetHouseKeeper* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSetHouseKeeper";
  }
  protected:
  explicit AckSetHouseKeeper(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSetHouseKeeper)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSetHouseKeeperSkinId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSetHouseKeeperSkinId) */ {
 public:
  inline ReqSetHouseKeeperSkinId() : ReqSetHouseKeeperSkinId(nullptr) {}
  ~ReqSetHouseKeeperSkinId() override;
  explicit constexpr ReqSetHouseKeeperSkinId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSetHouseKeeperSkinId(const ReqSetHouseKeeperSkinId& from);
  ReqSetHouseKeeperSkinId(ReqSetHouseKeeperSkinId&& from) noexcept
    : ReqSetHouseKeeperSkinId() {
    *this = ::std::move(from);
  }

  inline ReqSetHouseKeeperSkinId& operator=(const ReqSetHouseKeeperSkinId& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSetHouseKeeperSkinId& operator=(ReqSetHouseKeeperSkinId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSetHouseKeeperSkinId& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSetHouseKeeperSkinId* internal_default_instance() {
    return reinterpret_cast<const ReqSetHouseKeeperSkinId*>(
               &_ReqSetHouseKeeperSkinId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    219;

  friend void swap(ReqSetHouseKeeperSkinId& a, ReqSetHouseKeeperSkinId& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSetHouseKeeperSkinId* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSetHouseKeeperSkinId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSetHouseKeeperSkinId* New() const final {
    return new ReqSetHouseKeeperSkinId();
  }

  ReqSetHouseKeeperSkinId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSetHouseKeeperSkinId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSetHouseKeeperSkinId& from);
  void MergeFrom(const ReqSetHouseKeeperSkinId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSetHouseKeeperSkinId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSetHouseKeeperSkinId";
  }
  protected:
  explicit ReqSetHouseKeeperSkinId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 2,
    kWitchSkinIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // bytes witch_id = 2;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // bytes witch_skin_id = 3;
  void clear_witch_skin_id();
  const std::string& witch_skin_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_skin_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_skin_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_skin_id();
  void set_allocated_witch_skin_id(std::string* witch_skin_id);
  private:
  const std::string& _internal_witch_skin_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_skin_id(const std::string& value);
  std::string* _internal_mutable_witch_skin_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSetHouseKeeperSkinId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_skin_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSetHouseKeeperSkinId final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSetHouseKeeperSkinId) */ {
 public:
  inline AckSetHouseKeeperSkinId() : AckSetHouseKeeperSkinId(nullptr) {}
  ~AckSetHouseKeeperSkinId() override;
  explicit constexpr AckSetHouseKeeperSkinId(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSetHouseKeeperSkinId(const AckSetHouseKeeperSkinId& from);
  AckSetHouseKeeperSkinId(AckSetHouseKeeperSkinId&& from) noexcept
    : AckSetHouseKeeperSkinId() {
    *this = ::std::move(from);
  }

  inline AckSetHouseKeeperSkinId& operator=(const AckSetHouseKeeperSkinId& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSetHouseKeeperSkinId& operator=(AckSetHouseKeeperSkinId&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSetHouseKeeperSkinId& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSetHouseKeeperSkinId* internal_default_instance() {
    return reinterpret_cast<const AckSetHouseKeeperSkinId*>(
               &_AckSetHouseKeeperSkinId_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    220;

  friend void swap(AckSetHouseKeeperSkinId& a, AckSetHouseKeeperSkinId& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSetHouseKeeperSkinId* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSetHouseKeeperSkinId* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSetHouseKeeperSkinId* New() const final {
    return new AckSetHouseKeeperSkinId();
  }

  AckSetHouseKeeperSkinId* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSetHouseKeeperSkinId>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSetHouseKeeperSkinId& from);
  void MergeFrom(const AckSetHouseKeeperSkinId& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSetHouseKeeperSkinId* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSetHouseKeeperSkinId";
  }
  protected:
  explicit AckSetHouseKeeperSkinId(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSetHouseKeeperSkinId)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqHousekeeperInitSignin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqHousekeeperInitSignin) */ {
 public:
  inline ReqHousekeeperInitSignin() : ReqHousekeeperInitSignin(nullptr) {}
  ~ReqHousekeeperInitSignin() override;
  explicit constexpr ReqHousekeeperInitSignin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqHousekeeperInitSignin(const ReqHousekeeperInitSignin& from);
  ReqHousekeeperInitSignin(ReqHousekeeperInitSignin&& from) noexcept
    : ReqHousekeeperInitSignin() {
    *this = ::std::move(from);
  }

  inline ReqHousekeeperInitSignin& operator=(const ReqHousekeeperInitSignin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqHousekeeperInitSignin& operator=(ReqHousekeeperInitSignin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqHousekeeperInitSignin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqHousekeeperInitSignin* internal_default_instance() {
    return reinterpret_cast<const ReqHousekeeperInitSignin*>(
               &_ReqHousekeeperInitSignin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    221;

  friend void swap(ReqHousekeeperInitSignin& a, ReqHousekeeperInitSignin& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqHousekeeperInitSignin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqHousekeeperInitSignin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqHousekeeperInitSignin* New() const final {
    return new ReqHousekeeperInitSignin();
  }

  ReqHousekeeperInitSignin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqHousekeeperInitSignin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqHousekeeperInitSignin& from);
  void MergeFrom(const ReqHousekeeperInitSignin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqHousekeeperInitSignin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqHousekeeperInitSignin";
  }
  protected:
  explicit ReqHousekeeperInitSignin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqHousekeeperInitSignin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckHousekeeperInitSignin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckHousekeeperInitSignin) */ {
 public:
  inline AckHousekeeperInitSignin() : AckHousekeeperInitSignin(nullptr) {}
  ~AckHousekeeperInitSignin() override;
  explicit constexpr AckHousekeeperInitSignin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckHousekeeperInitSignin(const AckHousekeeperInitSignin& from);
  AckHousekeeperInitSignin(AckHousekeeperInitSignin&& from) noexcept
    : AckHousekeeperInitSignin() {
    *this = ::std::move(from);
  }

  inline AckHousekeeperInitSignin& operator=(const AckHousekeeperInitSignin& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckHousekeeperInitSignin& operator=(AckHousekeeperInitSignin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckHousekeeperInitSignin& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckHousekeeperInitSignin* internal_default_instance() {
    return reinterpret_cast<const AckHousekeeperInitSignin*>(
               &_AckHousekeeperInitSignin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    222;

  friend void swap(AckHousekeeperInitSignin& a, AckHousekeeperInitSignin& b) {
    a.Swap(&b);
  }
  inline void Swap(AckHousekeeperInitSignin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckHousekeeperInitSignin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckHousekeeperInitSignin* New() const final {
    return new AckHousekeeperInitSignin();
  }

  AckHousekeeperInitSignin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckHousekeeperInitSignin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckHousekeeperInitSignin& from);
  void MergeFrom(const AckHousekeeperInitSignin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckHousekeeperInitSignin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckHousekeeperInitSignin";
  }
  protected:
  explicit AckHousekeeperInitSignin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckHousekeeperInitSignin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqHousekeeperFinishedSignin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqHousekeeperFinishedSignin) */ {
 public:
  inline ReqHousekeeperFinishedSignin() : ReqHousekeeperFinishedSignin(nullptr) {}
  ~ReqHousekeeperFinishedSignin() override;
  explicit constexpr ReqHousekeeperFinishedSignin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqHousekeeperFinishedSignin(const ReqHousekeeperFinishedSignin& from);
  ReqHousekeeperFinishedSignin(ReqHousekeeperFinishedSignin&& from) noexcept
    : ReqHousekeeperFinishedSignin() {
    *this = ::std::move(from);
  }

  inline ReqHousekeeperFinishedSignin& operator=(const ReqHousekeeperFinishedSignin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqHousekeeperFinishedSignin& operator=(ReqHousekeeperFinishedSignin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqHousekeeperFinishedSignin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqHousekeeperFinishedSignin* internal_default_instance() {
    return reinterpret_cast<const ReqHousekeeperFinishedSignin*>(
               &_ReqHousekeeperFinishedSignin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    223;

  friend void swap(ReqHousekeeperFinishedSignin& a, ReqHousekeeperFinishedSignin& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqHousekeeperFinishedSignin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqHousekeeperFinishedSignin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqHousekeeperFinishedSignin* New() const final {
    return new ReqHousekeeperFinishedSignin();
  }

  ReqHousekeeperFinishedSignin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqHousekeeperFinishedSignin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqHousekeeperFinishedSignin& from);
  void MergeFrom(const ReqHousekeeperFinishedSignin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqHousekeeperFinishedSignin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqHousekeeperFinishedSignin";
  }
  protected:
  explicit ReqHousekeeperFinishedSignin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqHousekeeperFinishedSignin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckHousekeeperFinishedSignin final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckHousekeeperFinishedSignin) */ {
 public:
  inline AckHousekeeperFinishedSignin() : AckHousekeeperFinishedSignin(nullptr) {}
  ~AckHousekeeperFinishedSignin() override;
  explicit constexpr AckHousekeeperFinishedSignin(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckHousekeeperFinishedSignin(const AckHousekeeperFinishedSignin& from);
  AckHousekeeperFinishedSignin(AckHousekeeperFinishedSignin&& from) noexcept
    : AckHousekeeperFinishedSignin() {
    *this = ::std::move(from);
  }

  inline AckHousekeeperFinishedSignin& operator=(const AckHousekeeperFinishedSignin& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckHousekeeperFinishedSignin& operator=(AckHousekeeperFinishedSignin&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckHousekeeperFinishedSignin& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckHousekeeperFinishedSignin* internal_default_instance() {
    return reinterpret_cast<const AckHousekeeperFinishedSignin*>(
               &_AckHousekeeperFinishedSignin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    224;

  friend void swap(AckHousekeeperFinishedSignin& a, AckHousekeeperFinishedSignin& b) {
    a.Swap(&b);
  }
  inline void Swap(AckHousekeeperFinishedSignin* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckHousekeeperFinishedSignin* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckHousekeeperFinishedSignin* New() const final {
    return new AckHousekeeperFinishedSignin();
  }

  AckHousekeeperFinishedSignin* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckHousekeeperFinishedSignin>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckHousekeeperFinishedSignin& from);
  void MergeFrom(const AckHousekeeperFinishedSignin& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckHousekeeperFinishedSignin* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckHousekeeperFinishedSignin";
  }
  protected:
  explicit AckHousekeeperFinishedSignin(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckHousekeeperFinishedSignin)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqGetPneumaIslandStarReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGetPneumaIslandStarReward) */ {
 public:
  inline ReqGetPneumaIslandStarReward() : ReqGetPneumaIslandStarReward(nullptr) {}
  ~ReqGetPneumaIslandStarReward() override;
  explicit constexpr ReqGetPneumaIslandStarReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetPneumaIslandStarReward(const ReqGetPneumaIslandStarReward& from);
  ReqGetPneumaIslandStarReward(ReqGetPneumaIslandStarReward&& from) noexcept
    : ReqGetPneumaIslandStarReward() {
    *this = ::std::move(from);
  }

  inline ReqGetPneumaIslandStarReward& operator=(const ReqGetPneumaIslandStarReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetPneumaIslandStarReward& operator=(ReqGetPneumaIslandStarReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetPneumaIslandStarReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetPneumaIslandStarReward* internal_default_instance() {
    return reinterpret_cast<const ReqGetPneumaIslandStarReward*>(
               &_ReqGetPneumaIslandStarReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    225;

  friend void swap(ReqGetPneumaIslandStarReward& a, ReqGetPneumaIslandStarReward& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetPneumaIslandStarReward* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetPneumaIslandStarReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGetPneumaIslandStarReward* New() const final {
    return new ReqGetPneumaIslandStarReward();
  }

  ReqGetPneumaIslandStarReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetPneumaIslandStarReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetPneumaIslandStarReward& from);
  void MergeFrom(const ReqGetPneumaIslandStarReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetPneumaIslandStarReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGetPneumaIslandStarReward";
  }
  protected:
  explicit ReqGetPneumaIslandStarReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBossIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kRewardIdxFieldNumber = 3,
  };
  // bytes boss_id = 2;
  void clear_boss_id();
  const std::string& boss_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_boss_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_boss_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_boss_id();
  void set_allocated_boss_id(std::string* boss_id);
  private:
  const std::string& _internal_boss_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_boss_id(const std::string& value);
  std::string* _internal_mutable_boss_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 reward_idx = 3;
  void clear_reward_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 reward_idx() const;
  void set_reward_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward_idx() const;
  void _internal_set_reward_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGetPneumaIslandStarReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boss_id_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckGetPneumaIslandStarReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGetPneumaIslandStarReward) */ {
 public:
  inline AckGetPneumaIslandStarReward() : AckGetPneumaIslandStarReward(nullptr) {}
  ~AckGetPneumaIslandStarReward() override;
  explicit constexpr AckGetPneumaIslandStarReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGetPneumaIslandStarReward(const AckGetPneumaIslandStarReward& from);
  AckGetPneumaIslandStarReward(AckGetPneumaIslandStarReward&& from) noexcept
    : AckGetPneumaIslandStarReward() {
    *this = ::std::move(from);
  }

  inline AckGetPneumaIslandStarReward& operator=(const AckGetPneumaIslandStarReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGetPneumaIslandStarReward& operator=(AckGetPneumaIslandStarReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGetPneumaIslandStarReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGetPneumaIslandStarReward* internal_default_instance() {
    return reinterpret_cast<const AckGetPneumaIslandStarReward*>(
               &_AckGetPneumaIslandStarReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    226;

  friend void swap(AckGetPneumaIslandStarReward& a, AckGetPneumaIslandStarReward& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGetPneumaIslandStarReward* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGetPneumaIslandStarReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGetPneumaIslandStarReward* New() const final {
    return new AckGetPneumaIslandStarReward();
  }

  AckGetPneumaIslandStarReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGetPneumaIslandStarReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGetPneumaIslandStarReward& from);
  void MergeFrom(const AckGetPneumaIslandStarReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGetPneumaIslandStarReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGetPneumaIslandStarReward";
  }
  protected:
  explicit AckGetPneumaIslandStarReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardsFieldNumber = 4,
    kBossIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
    kRewardIdxFieldNumber = 3,
  };
  // repeated .KWMsg.RewardInfo rewards = 4;
  int rewards_size() const;
  private:
  int _internal_rewards_size() const;
  public:
  void clear_rewards();
  ::KWMsg::RewardInfo* mutable_rewards(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_rewards();
  private:
  const ::KWMsg::RewardInfo& _internal_rewards(int index) const;
  ::KWMsg::RewardInfo* _internal_add_rewards();
  public:
  const ::KWMsg::RewardInfo& rewards(int index) const;
  ::KWMsg::RewardInfo* add_rewards();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      rewards() const;

  // bytes boss_id = 2;
  void clear_boss_id();
  const std::string& boss_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_boss_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_boss_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_boss_id();
  void set_allocated_boss_id(std::string* boss_id);
  private:
  const std::string& _internal_boss_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_boss_id(const std::string& value);
  std::string* _internal_mutable_boss_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 reward_idx = 3;
  void clear_reward_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 reward_idx() const;
  void set_reward_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_reward_idx() const;
  void _internal_set_reward_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGetPneumaIslandStarReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > rewards_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boss_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 reward_idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqUpdatePneumaIslandShowState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUpdatePneumaIslandShowState) */ {
 public:
  inline ReqUpdatePneumaIslandShowState() : ReqUpdatePneumaIslandShowState(nullptr) {}
  ~ReqUpdatePneumaIslandShowState() override;
  explicit constexpr ReqUpdatePneumaIslandShowState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUpdatePneumaIslandShowState(const ReqUpdatePneumaIslandShowState& from);
  ReqUpdatePneumaIslandShowState(ReqUpdatePneumaIslandShowState&& from) noexcept
    : ReqUpdatePneumaIslandShowState() {
    *this = ::std::move(from);
  }

  inline ReqUpdatePneumaIslandShowState& operator=(const ReqUpdatePneumaIslandShowState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUpdatePneumaIslandShowState& operator=(ReqUpdatePneumaIslandShowState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUpdatePneumaIslandShowState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUpdatePneumaIslandShowState* internal_default_instance() {
    return reinterpret_cast<const ReqUpdatePneumaIslandShowState*>(
               &_ReqUpdatePneumaIslandShowState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    227;

  friend void swap(ReqUpdatePneumaIslandShowState& a, ReqUpdatePneumaIslandShowState& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUpdatePneumaIslandShowState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUpdatePneumaIslandShowState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUpdatePneumaIslandShowState* New() const final {
    return new ReqUpdatePneumaIslandShowState();
  }

  ReqUpdatePneumaIslandShowState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUpdatePneumaIslandShowState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUpdatePneumaIslandShowState& from);
  void MergeFrom(const ReqUpdatePneumaIslandShowState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUpdatePneumaIslandShowState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUpdatePneumaIslandShowState";
  }
  protected:
  explicit ReqUpdatePneumaIslandShowState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBossGroupIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes boss_group_id = 2;
  void clear_boss_group_id();
  const std::string& boss_group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_boss_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_boss_group_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_boss_group_id();
  void set_allocated_boss_group_id(std::string* boss_group_id);
  private:
  const std::string& _internal_boss_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_boss_group_id(const std::string& value);
  std::string* _internal_mutable_boss_group_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUpdatePneumaIslandShowState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boss_group_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckUpdatePneumaIslandShowState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckUpdatePneumaIslandShowState) */ {
 public:
  inline AckUpdatePneumaIslandShowState() : AckUpdatePneumaIslandShowState(nullptr) {}
  ~AckUpdatePneumaIslandShowState() override;
  explicit constexpr AckUpdatePneumaIslandShowState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckUpdatePneumaIslandShowState(const AckUpdatePneumaIslandShowState& from);
  AckUpdatePneumaIslandShowState(AckUpdatePneumaIslandShowState&& from) noexcept
    : AckUpdatePneumaIslandShowState() {
    *this = ::std::move(from);
  }

  inline AckUpdatePneumaIslandShowState& operator=(const AckUpdatePneumaIslandShowState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckUpdatePneumaIslandShowState& operator=(AckUpdatePneumaIslandShowState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckUpdatePneumaIslandShowState& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckUpdatePneumaIslandShowState* internal_default_instance() {
    return reinterpret_cast<const AckUpdatePneumaIslandShowState*>(
               &_AckUpdatePneumaIslandShowState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    228;

  friend void swap(AckUpdatePneumaIslandShowState& a, AckUpdatePneumaIslandShowState& b) {
    a.Swap(&b);
  }
  inline void Swap(AckUpdatePneumaIslandShowState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckUpdatePneumaIslandShowState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckUpdatePneumaIslandShowState* New() const final {
    return new AckUpdatePneumaIslandShowState();
  }

  AckUpdatePneumaIslandShowState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckUpdatePneumaIslandShowState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckUpdatePneumaIslandShowState& from);
  void MergeFrom(const AckUpdatePneumaIslandShowState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckUpdatePneumaIslandShowState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckUpdatePneumaIslandShowState";
  }
  protected:
  explicit AckUpdatePneumaIslandShowState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBossGroupIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // bytes boss_group_id = 2;
  void clear_boss_group_id();
  const std::string& boss_group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_boss_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_boss_group_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_boss_group_id();
  void set_allocated_boss_group_id(std::string* boss_group_id);
  private:
  const std::string& _internal_boss_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_boss_group_id(const std::string& value);
  std::string* _internal_mutable_boss_group_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckUpdatePneumaIslandShowState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boss_group_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqUpdatePneumaAutoDecomposeState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUpdatePneumaAutoDecomposeState) */ {
 public:
  inline ReqUpdatePneumaAutoDecomposeState() : ReqUpdatePneumaAutoDecomposeState(nullptr) {}
  ~ReqUpdatePneumaAutoDecomposeState() override;
  explicit constexpr ReqUpdatePneumaAutoDecomposeState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUpdatePneumaAutoDecomposeState(const ReqUpdatePneumaAutoDecomposeState& from);
  ReqUpdatePneumaAutoDecomposeState(ReqUpdatePneumaAutoDecomposeState&& from) noexcept
    : ReqUpdatePneumaAutoDecomposeState() {
    *this = ::std::move(from);
  }

  inline ReqUpdatePneumaAutoDecomposeState& operator=(const ReqUpdatePneumaAutoDecomposeState& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUpdatePneumaAutoDecomposeState& operator=(ReqUpdatePneumaAutoDecomposeState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUpdatePneumaAutoDecomposeState& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUpdatePneumaAutoDecomposeState* internal_default_instance() {
    return reinterpret_cast<const ReqUpdatePneumaAutoDecomposeState*>(
               &_ReqUpdatePneumaAutoDecomposeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    229;

  friend void swap(ReqUpdatePneumaAutoDecomposeState& a, ReqUpdatePneumaAutoDecomposeState& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUpdatePneumaAutoDecomposeState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUpdatePneumaAutoDecomposeState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUpdatePneumaAutoDecomposeState* New() const final {
    return new ReqUpdatePneumaAutoDecomposeState();
  }

  ReqUpdatePneumaAutoDecomposeState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUpdatePneumaAutoDecomposeState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUpdatePneumaAutoDecomposeState& from);
  void MergeFrom(const ReqUpdatePneumaAutoDecomposeState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUpdatePneumaAutoDecomposeState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUpdatePneumaAutoDecomposeState";
  }
  protected:
  explicit ReqUpdatePneumaAutoDecomposeState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kEnableFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 enable = 2;
  void clear_enable();
  ::PROTOBUF_NAMESPACE_ID::int32 enable() const;
  void set_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enable() const;
  void _internal_set_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUpdatePneumaAutoDecomposeState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckUpdatePneumaAutoDecomposeState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckUpdatePneumaAutoDecomposeState) */ {
 public:
  inline AckUpdatePneumaAutoDecomposeState() : AckUpdatePneumaAutoDecomposeState(nullptr) {}
  ~AckUpdatePneumaAutoDecomposeState() override;
  explicit constexpr AckUpdatePneumaAutoDecomposeState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckUpdatePneumaAutoDecomposeState(const AckUpdatePneumaAutoDecomposeState& from);
  AckUpdatePneumaAutoDecomposeState(AckUpdatePneumaAutoDecomposeState&& from) noexcept
    : AckUpdatePneumaAutoDecomposeState() {
    *this = ::std::move(from);
  }

  inline AckUpdatePneumaAutoDecomposeState& operator=(const AckUpdatePneumaAutoDecomposeState& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckUpdatePneumaAutoDecomposeState& operator=(AckUpdatePneumaAutoDecomposeState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckUpdatePneumaAutoDecomposeState& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckUpdatePneumaAutoDecomposeState* internal_default_instance() {
    return reinterpret_cast<const AckUpdatePneumaAutoDecomposeState*>(
               &_AckUpdatePneumaAutoDecomposeState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    230;

  friend void swap(AckUpdatePneumaAutoDecomposeState& a, AckUpdatePneumaAutoDecomposeState& b) {
    a.Swap(&b);
  }
  inline void Swap(AckUpdatePneumaAutoDecomposeState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckUpdatePneumaAutoDecomposeState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckUpdatePneumaAutoDecomposeState* New() const final {
    return new AckUpdatePneumaAutoDecomposeState();
  }

  AckUpdatePneumaAutoDecomposeState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckUpdatePneumaAutoDecomposeState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckUpdatePneumaAutoDecomposeState& from);
  void MergeFrom(const AckUpdatePneumaAutoDecomposeState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckUpdatePneumaAutoDecomposeState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckUpdatePneumaAutoDecomposeState";
  }
  protected:
  explicit AckUpdatePneumaAutoDecomposeState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
    kEnableFieldNumber = 2,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 enable = 2;
  void clear_enable();
  ::PROTOBUF_NAMESPACE_ID::int32 enable() const;
  void set_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_enable() const;
  void _internal_set_enable(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckUpdatePneumaAutoDecomposeState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 enable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class PneumaDecomposeScheme final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.PneumaDecomposeScheme) */ {
 public:
  inline PneumaDecomposeScheme() : PneumaDecomposeScheme(nullptr) {}
  ~PneumaDecomposeScheme() override;
  explicit constexpr PneumaDecomposeScheme(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  PneumaDecomposeScheme(const PneumaDecomposeScheme& from);
  PneumaDecomposeScheme(PneumaDecomposeScheme&& from) noexcept
    : PneumaDecomposeScheme() {
    *this = ::std::move(from);
  }

  inline PneumaDecomposeScheme& operator=(const PneumaDecomposeScheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline PneumaDecomposeScheme& operator=(PneumaDecomposeScheme&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const PneumaDecomposeScheme& default_instance() {
    return *internal_default_instance();
  }
  static inline const PneumaDecomposeScheme* internal_default_instance() {
    return reinterpret_cast<const PneumaDecomposeScheme*>(
               &_PneumaDecomposeScheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    231;

  friend void swap(PneumaDecomposeScheme& a, PneumaDecomposeScheme& b) {
    a.Swap(&b);
  }
  inline void Swap(PneumaDecomposeScheme* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PneumaDecomposeScheme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PneumaDecomposeScheme* New() const final {
    return new PneumaDecomposeScheme();
  }

  PneumaDecomposeScheme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PneumaDecomposeScheme>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PneumaDecomposeScheme& from);
  void MergeFrom(const PneumaDecomposeScheme& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PneumaDecomposeScheme* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.PneumaDecomposeScheme";
  }
  protected:
  explicit PneumaDecomposeScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPneumaTypeFieldNumber = 1,
    kDecomposeSchemeFieldNumber = 2,
  };
  // bytes pneuma_type = 1;
  void clear_pneuma_type();
  const std::string& pneuma_type() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pneuma_type(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pneuma_type();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_pneuma_type();
  void set_allocated_pneuma_type(std::string* pneuma_type);
  private:
  const std::string& _internal_pneuma_type() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pneuma_type(const std::string& value);
  std::string* _internal_mutable_pneuma_type();
  public:

  // bytes decompose_scheme = 2;
  void clear_decompose_scheme();
  const std::string& decompose_scheme() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_decompose_scheme(ArgT0&& arg0, ArgT... args);
  std::string* mutable_decompose_scheme();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_decompose_scheme();
  void set_allocated_decompose_scheme(std::string* decompose_scheme);
  private:
  const std::string& _internal_decompose_scheme() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_decompose_scheme(const std::string& value);
  std::string* _internal_mutable_decompose_scheme();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.PneumaDecomposeScheme)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pneuma_type_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr decompose_scheme_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqUpdatePneumaDecomposeScheme final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUpdatePneumaDecomposeScheme) */ {
 public:
  inline ReqUpdatePneumaDecomposeScheme() : ReqUpdatePneumaDecomposeScheme(nullptr) {}
  ~ReqUpdatePneumaDecomposeScheme() override;
  explicit constexpr ReqUpdatePneumaDecomposeScheme(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUpdatePneumaDecomposeScheme(const ReqUpdatePneumaDecomposeScheme& from);
  ReqUpdatePneumaDecomposeScheme(ReqUpdatePneumaDecomposeScheme&& from) noexcept
    : ReqUpdatePneumaDecomposeScheme() {
    *this = ::std::move(from);
  }

  inline ReqUpdatePneumaDecomposeScheme& operator=(const ReqUpdatePneumaDecomposeScheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUpdatePneumaDecomposeScheme& operator=(ReqUpdatePneumaDecomposeScheme&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUpdatePneumaDecomposeScheme& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUpdatePneumaDecomposeScheme* internal_default_instance() {
    return reinterpret_cast<const ReqUpdatePneumaDecomposeScheme*>(
               &_ReqUpdatePneumaDecomposeScheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    232;

  friend void swap(ReqUpdatePneumaDecomposeScheme& a, ReqUpdatePneumaDecomposeScheme& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUpdatePneumaDecomposeScheme* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUpdatePneumaDecomposeScheme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUpdatePneumaDecomposeScheme* New() const final {
    return new ReqUpdatePneumaDecomposeScheme();
  }

  ReqUpdatePneumaDecomposeScheme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUpdatePneumaDecomposeScheme>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUpdatePneumaDecomposeScheme& from);
  void MergeFrom(const ReqUpdatePneumaDecomposeScheme& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUpdatePneumaDecomposeScheme* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUpdatePneumaDecomposeScheme";
  }
  protected:
  explicit ReqUpdatePneumaDecomposeScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemeListFieldNumber = 3,
    kBossIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.PneumaDecomposeScheme scheme_list = 3;
  int scheme_list_size() const;
  private:
  int _internal_scheme_list_size() const;
  public:
  void clear_scheme_list();
  ::KWMsg::PneumaDecomposeScheme* mutable_scheme_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PneumaDecomposeScheme >*
      mutable_scheme_list();
  private:
  const ::KWMsg::PneumaDecomposeScheme& _internal_scheme_list(int index) const;
  ::KWMsg::PneumaDecomposeScheme* _internal_add_scheme_list();
  public:
  const ::KWMsg::PneumaDecomposeScheme& scheme_list(int index) const;
  ::KWMsg::PneumaDecomposeScheme* add_scheme_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PneumaDecomposeScheme >&
      scheme_list() const;

  // bytes boss_id = 2;
  void clear_boss_id();
  const std::string& boss_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_boss_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_boss_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_boss_id();
  void set_allocated_boss_id(std::string* boss_id);
  private:
  const std::string& _internal_boss_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_boss_id(const std::string& value);
  std::string* _internal_mutable_boss_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUpdatePneumaDecomposeScheme)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PneumaDecomposeScheme > scheme_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boss_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckUpdatePneumaDecomposeScheme final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckUpdatePneumaDecomposeScheme) */ {
 public:
  inline AckUpdatePneumaDecomposeScheme() : AckUpdatePneumaDecomposeScheme(nullptr) {}
  ~AckUpdatePneumaDecomposeScheme() override;
  explicit constexpr AckUpdatePneumaDecomposeScheme(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckUpdatePneumaDecomposeScheme(const AckUpdatePneumaDecomposeScheme& from);
  AckUpdatePneumaDecomposeScheme(AckUpdatePneumaDecomposeScheme&& from) noexcept
    : AckUpdatePneumaDecomposeScheme() {
    *this = ::std::move(from);
  }

  inline AckUpdatePneumaDecomposeScheme& operator=(const AckUpdatePneumaDecomposeScheme& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckUpdatePneumaDecomposeScheme& operator=(AckUpdatePneumaDecomposeScheme&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckUpdatePneumaDecomposeScheme& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckUpdatePneumaDecomposeScheme* internal_default_instance() {
    return reinterpret_cast<const AckUpdatePneumaDecomposeScheme*>(
               &_AckUpdatePneumaDecomposeScheme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    233;

  friend void swap(AckUpdatePneumaDecomposeScheme& a, AckUpdatePneumaDecomposeScheme& b) {
    a.Swap(&b);
  }
  inline void Swap(AckUpdatePneumaDecomposeScheme* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckUpdatePneumaDecomposeScheme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckUpdatePneumaDecomposeScheme* New() const final {
    return new AckUpdatePneumaDecomposeScheme();
  }

  AckUpdatePneumaDecomposeScheme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckUpdatePneumaDecomposeScheme>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckUpdatePneumaDecomposeScheme& from);
  void MergeFrom(const AckUpdatePneumaDecomposeScheme& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckUpdatePneumaDecomposeScheme* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckUpdatePneumaDecomposeScheme";
  }
  protected:
  explicit AckUpdatePneumaDecomposeScheme(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSchemeListFieldNumber = 3,
    kBossIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.PneumaDecomposeScheme scheme_list = 3;
  int scheme_list_size() const;
  private:
  int _internal_scheme_list_size() const;
  public:
  void clear_scheme_list();
  ::KWMsg::PneumaDecomposeScheme* mutable_scheme_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PneumaDecomposeScheme >*
      mutable_scheme_list();
  private:
  const ::KWMsg::PneumaDecomposeScheme& _internal_scheme_list(int index) const;
  ::KWMsg::PneumaDecomposeScheme* _internal_add_scheme_list();
  public:
  const ::KWMsg::PneumaDecomposeScheme& scheme_list(int index) const;
  ::KWMsg::PneumaDecomposeScheme* add_scheme_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PneumaDecomposeScheme >&
      scheme_list() const;

  // bytes boss_id = 2;
  void clear_boss_id();
  const std::string& boss_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_boss_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_boss_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_boss_id();
  void set_allocated_boss_id(std::string* boss_id);
  private:
  const std::string& _internal_boss_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_boss_id(const std::string& value);
  std::string* _internal_mutable_boss_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckUpdatePneumaDecomposeScheme)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PneumaDecomposeScheme > scheme_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr boss_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCreateOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCreateOrder) */ {
 public:
  inline ReqCreateOrder() : ReqCreateOrder(nullptr) {}
  ~ReqCreateOrder() override;
  explicit constexpr ReqCreateOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCreateOrder(const ReqCreateOrder& from);
  ReqCreateOrder(ReqCreateOrder&& from) noexcept
    : ReqCreateOrder() {
    *this = ::std::move(from);
  }

  inline ReqCreateOrder& operator=(const ReqCreateOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCreateOrder& operator=(ReqCreateOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCreateOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCreateOrder* internal_default_instance() {
    return reinterpret_cast<const ReqCreateOrder*>(
               &_ReqCreateOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    234;

  friend void swap(ReqCreateOrder& a, ReqCreateOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCreateOrder* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCreateOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCreateOrder* New() const final {
    return new ReqCreateOrder();
  }

  ReqCreateOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCreateOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCreateOrder& from);
  void MergeFrom(const ReqCreateOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCreateOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCreateOrder";
  }
  protected:
  explicit ReqCreateOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes product_id = 2;
  void clear_product_id();
  const std::string& product_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCreateOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCreateOrder final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCreateOrder) */ {
 public:
  inline AckCreateOrder() : AckCreateOrder(nullptr) {}
  ~AckCreateOrder() override;
  explicit constexpr AckCreateOrder(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCreateOrder(const AckCreateOrder& from);
  AckCreateOrder(AckCreateOrder&& from) noexcept
    : AckCreateOrder() {
    *this = ::std::move(from);
  }

  inline AckCreateOrder& operator=(const AckCreateOrder& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCreateOrder& operator=(AckCreateOrder&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCreateOrder& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCreateOrder* internal_default_instance() {
    return reinterpret_cast<const AckCreateOrder*>(
               &_AckCreateOrder_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    235;

  friend void swap(AckCreateOrder& a, AckCreateOrder& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCreateOrder* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCreateOrder* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCreateOrder* New() const final {
    return new AckCreateOrder();
  }

  AckCreateOrder* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCreateOrder>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCreateOrder& from);
  void MergeFrom(const AckCreateOrder& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCreateOrder* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCreateOrder";
  }
  protected:
  explicit AckCreateOrder(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 2,
    kOrderIdFieldNumber = 3,
    kEventCodeFieldNumber = 1,
    kServerIdFieldNumber = 5,
    kOrderTsFieldNumber = 4,
  };
  // bytes product_id = 2;
  void clear_product_id();
  const std::string& product_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // bytes order_id = 3;
  void clear_order_id();
  const std::string& order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_order_id();
  void set_allocated_order_id(std::string* order_id);
  private:
  const std::string& _internal_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_id(const std::string& value);
  std::string* _internal_mutable_order_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 server_id = 5;
  void clear_server_id();
  ::PROTOBUF_NAMESPACE_ID::int32 server_id() const;
  void set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_server_id() const;
  void _internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 order_ts = 4;
  void clear_order_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 order_ts() const;
  void set_order_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_order_ts() const;
  void _internal_set_order_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCreateOrder)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 server_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 order_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCallbackRecharge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCallbackRecharge) */ {
 public:
  inline ReqCallbackRecharge() : ReqCallbackRecharge(nullptr) {}
  ~ReqCallbackRecharge() override;
  explicit constexpr ReqCallbackRecharge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCallbackRecharge(const ReqCallbackRecharge& from);
  ReqCallbackRecharge(ReqCallbackRecharge&& from) noexcept
    : ReqCallbackRecharge() {
    *this = ::std::move(from);
  }

  inline ReqCallbackRecharge& operator=(const ReqCallbackRecharge& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCallbackRecharge& operator=(ReqCallbackRecharge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCallbackRecharge& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCallbackRecharge* internal_default_instance() {
    return reinterpret_cast<const ReqCallbackRecharge*>(
               &_ReqCallbackRecharge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    236;

  friend void swap(ReqCallbackRecharge& a, ReqCallbackRecharge& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCallbackRecharge* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCallbackRecharge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCallbackRecharge* New() const final {
    return new ReqCallbackRecharge();
  }

  ReqCallbackRecharge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCallbackRecharge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCallbackRecharge& from);
  void MergeFrom(const ReqCallbackRecharge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCallbackRecharge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCallbackRecharge";
  }
  protected:
  explicit ReqCallbackRecharge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSdkUidFieldNumber = 1,
    kSdkOrderIdFieldNumber = 2,
    kAppOrderIdFieldNumber = 3,
    kProductIdFieldNumber = 4,
    kMoneyCurrencyFieldNumber = 7,
    kOrderCurrencyFieldNumber = 9,
    kRoleIdFieldNumber = 14,
    kExtFieldNumber = 15,
    kTimestampFieldNumber = 5,
    kMoneyAmountFieldNumber = 6,
    kOrderAmountFieldNumber = 8,
    kPayTypeFieldNumber = 10,
    kPlatformIdFieldNumber = 11,
    kSandboxFieldNumber = 12,
    kSourceTypeFieldNumber = 13,
  };
  // bytes sdk_uid = 1;
  void clear_sdk_uid();
  const std::string& sdk_uid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdk_uid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdk_uid();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sdk_uid();
  void set_allocated_sdk_uid(std::string* sdk_uid);
  private:
  const std::string& _internal_sdk_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_uid(const std::string& value);
  std::string* _internal_mutable_sdk_uid();
  public:

  // bytes sdk_order_id = 2;
  void clear_sdk_order_id();
  const std::string& sdk_order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdk_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdk_order_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sdk_order_id();
  void set_allocated_sdk_order_id(std::string* sdk_order_id);
  private:
  const std::string& _internal_sdk_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_order_id(const std::string& value);
  std::string* _internal_mutable_sdk_order_id();
  public:

  // bytes app_order_id = 3;
  void clear_app_order_id();
  const std::string& app_order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_order_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_app_order_id();
  void set_allocated_app_order_id(std::string* app_order_id);
  private:
  const std::string& _internal_app_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_order_id(const std::string& value);
  std::string* _internal_mutable_app_order_id();
  public:

  // bytes product_id = 4;
  void clear_product_id();
  const std::string& product_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // bytes money_currency = 7;
  void clear_money_currency();
  const std::string& money_currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_money_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_money_currency();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_money_currency();
  void set_allocated_money_currency(std::string* money_currency);
  private:
  const std::string& _internal_money_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_money_currency(const std::string& value);
  std::string* _internal_mutable_money_currency();
  public:

  // bytes order_currency = 9;
  void clear_order_currency();
  const std::string& order_currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_currency();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_order_currency();
  void set_allocated_order_currency(std::string* order_currency);
  private:
  const std::string& _internal_order_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_currency(const std::string& value);
  std::string* _internal_mutable_order_currency();
  public:

  // bytes role_id = 14;
  void clear_role_id();
  const std::string& role_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_role_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_role_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_role_id();
  void set_allocated_role_id(std::string* role_id);
  private:
  const std::string& _internal_role_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_role_id(const std::string& value);
  std::string* _internal_mutable_role_id();
  public:

  // bytes ext = 15;
  void clear_ext();
  const std::string& ext() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_ext(ArgT0&& arg0, ArgT... args);
  std::string* mutable_ext();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_ext();
  void set_allocated_ext(std::string* ext);
  private:
  const std::string& _internal_ext() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_ext(const std::string& value);
  std::string* _internal_mutable_ext();
  public:

  // int64 timestamp = 5;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_timestamp() const;
  void _internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 money_amount = 6;
  void clear_money_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 money_amount() const;
  void set_money_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_money_amount() const;
  void _internal_set_money_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 order_amount = 8;
  void clear_order_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 order_amount() const;
  void set_order_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_order_amount() const;
  void _internal_set_order_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 pay_type = 10;
  void clear_pay_type();
  ::PROTOBUF_NAMESPACE_ID::int32 pay_type() const;
  void set_pay_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pay_type() const;
  void _internal_set_pay_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 platform_id = 11;
  void clear_platform_id();
  ::PROTOBUF_NAMESPACE_ID::int32 platform_id() const;
  void set_platform_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_platform_id() const;
  void _internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 sandbox = 12;
  void clear_sandbox();
  ::PROTOBUF_NAMESPACE_ID::int32 sandbox() const;
  void set_sandbox(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_sandbox() const;
  void _internal_set_sandbox(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 source_type = 13;
  void clear_source_type();
  ::PROTOBUF_NAMESPACE_ID::int32 source_type() const;
  void set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_source_type() const;
  void _internal_set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCallbackRecharge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_uid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr money_currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr role_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ext_;
  ::PROTOBUF_NAMESPACE_ID::int64 timestamp_;
  ::PROTOBUF_NAMESPACE_ID::int64 money_amount_;
  ::PROTOBUF_NAMESPACE_ID::int64 order_amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 pay_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 platform_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 sandbox_;
  ::PROTOBUF_NAMESPACE_ID::int32 source_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCallbackRecharge final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCallbackRecharge) */ {
 public:
  inline AckCallbackRecharge() : AckCallbackRecharge(nullptr) {}
  ~AckCallbackRecharge() override;
  explicit constexpr AckCallbackRecharge(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCallbackRecharge(const AckCallbackRecharge& from);
  AckCallbackRecharge(AckCallbackRecharge&& from) noexcept
    : AckCallbackRecharge() {
    *this = ::std::move(from);
  }

  inline AckCallbackRecharge& operator=(const AckCallbackRecharge& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCallbackRecharge& operator=(AckCallbackRecharge&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCallbackRecharge& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCallbackRecharge* internal_default_instance() {
    return reinterpret_cast<const AckCallbackRecharge*>(
               &_AckCallbackRecharge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    237;

  friend void swap(AckCallbackRecharge& a, AckCallbackRecharge& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCallbackRecharge* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCallbackRecharge* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCallbackRecharge* New() const final {
    return new AckCallbackRecharge();
  }

  AckCallbackRecharge* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCallbackRecharge>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCallbackRecharge& from);
  void MergeFrom(const AckCallbackRecharge& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCallbackRecharge* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCallbackRecharge";
  }
  protected:
  explicit AckCallbackRecharge(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAppOrderIdFieldNumber = 2,
    kSdkOrderIdFieldNumber = 3,
    kProductIdFieldNumber = 4,
    kMoneyCurrencyFieldNumber = 6,
    kOrderCurrencyFieldNumber = 8,
    kExtraParamFieldNumber = 12,
    kMoneyAmountFieldNumber = 5,
    kEventCodeFieldNumber = 1,
    kBasicAddNumberFieldNumber = 9,
    kOrderAmountFieldNumber = 7,
    kExtraAddNumberFieldNumber = 10,
    kExtraParamTypeFieldNumber = 11,
  };
  // bytes app_order_id = 2;
  void clear_app_order_id();
  const std::string& app_order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_app_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_app_order_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_app_order_id();
  void set_allocated_app_order_id(std::string* app_order_id);
  private:
  const std::string& _internal_app_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_app_order_id(const std::string& value);
  std::string* _internal_mutable_app_order_id();
  public:

  // bytes sdk_order_id = 3;
  void clear_sdk_order_id();
  const std::string& sdk_order_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sdk_order_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sdk_order_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sdk_order_id();
  void set_allocated_sdk_order_id(std::string* sdk_order_id);
  private:
  const std::string& _internal_sdk_order_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sdk_order_id(const std::string& value);
  std::string* _internal_mutable_sdk_order_id();
  public:

  // bytes product_id = 4;
  void clear_product_id();
  const std::string& product_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // bytes money_currency = 6;
  void clear_money_currency();
  const std::string& money_currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_money_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_money_currency();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_money_currency();
  void set_allocated_money_currency(std::string* money_currency);
  private:
  const std::string& _internal_money_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_money_currency(const std::string& value);
  std::string* _internal_mutable_money_currency();
  public:

  // bytes order_currency = 8;
  void clear_order_currency();
  const std::string& order_currency() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_order_currency(ArgT0&& arg0, ArgT... args);
  std::string* mutable_order_currency();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_order_currency();
  void set_allocated_order_currency(std::string* order_currency);
  private:
  const std::string& _internal_order_currency() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_order_currency(const std::string& value);
  std::string* _internal_mutable_order_currency();
  public:

  // bytes extra_param = 12;
  void clear_extra_param();
  const std::string& extra_param() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_param(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_param();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra_param();
  void set_allocated_extra_param(std::string* extra_param);
  private:
  const std::string& _internal_extra_param() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_param(const std::string& value);
  std::string* _internal_mutable_extra_param();
  public:

  // int64 money_amount = 5;
  void clear_money_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 money_amount() const;
  void set_money_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_money_amount() const;
  void _internal_set_money_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 basic_add_number = 9;
  void clear_basic_add_number();
  ::PROTOBUF_NAMESPACE_ID::int32 basic_add_number() const;
  void set_basic_add_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_basic_add_number() const;
  void _internal_set_basic_add_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 order_amount = 7;
  void clear_order_amount();
  ::PROTOBUF_NAMESPACE_ID::int64 order_amount() const;
  void set_order_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_order_amount() const;
  void _internal_set_order_amount(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 extra_add_number = 10;
  void clear_extra_add_number();
  ::PROTOBUF_NAMESPACE_ID::int32 extra_add_number() const;
  void set_extra_add_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extra_add_number() const;
  void _internal_set_extra_add_number(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 extra_param_type = 11;
  void clear_extra_param_type();
  ::PROTOBUF_NAMESPACE_ID::int32 extra_param_type() const;
  void set_extra_param_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_extra_param_type() const;
  void _internal_set_extra_param_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCallbackRecharge)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr app_order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sdk_order_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr money_currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr order_currency_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_param_;
  ::PROTOBUF_NAMESPACE_ID::int64 money_amount_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 basic_add_number_;
  ::PROTOBUF_NAMESPACE_ID::int64 order_amount_;
  ::PROTOBUF_NAMESPACE_ID::int32 extra_add_number_;
  ::PROTOBUF_NAMESPACE_ID::int32 extra_param_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class MailInfo final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.MailInfo) */ {
 public:
  inline MailInfo() : MailInfo(nullptr) {}
  ~MailInfo() override;
  explicit constexpr MailInfo(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MailInfo(const MailInfo& from);
  MailInfo(MailInfo&& from) noexcept
    : MailInfo() {
    *this = ::std::move(from);
  }

  inline MailInfo& operator=(const MailInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailInfo& operator=(MailInfo&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MailInfo& default_instance() {
    return *internal_default_instance();
  }
  static inline const MailInfo* internal_default_instance() {
    return reinterpret_cast<const MailInfo*>(
               &_MailInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    238;

  friend void swap(MailInfo& a, MailInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MailInfo* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MailInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MailInfo* New() const final {
    return new MailInfo();
  }

  MailInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MailInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MailInfo& from);
  void MergeFrom(const MailInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.MailInfo";
  }
  protected:
  explicit MailInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 7,
    kPromptIdFieldNumber = 2,
    kTitleFieldNumber = 3,
    kContextFieldNumber = 4,
    kSenderFieldNumber = 5,
    kParmsFieldNumber = 6,
    kMailIdFieldNumber = 1,
    kCreateTsFieldNumber = 8,
    kDeadlineTsFieldNumber = 9,
  };
  // repeated .KWMsg.RewardInfo reward_list = 7;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::KWMsg::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_reward_list();
  private:
  const ::KWMsg::RewardInfo& _internal_reward_list(int index) const;
  ::KWMsg::RewardInfo* _internal_add_reward_list();
  public:
  const ::KWMsg::RewardInfo& reward_list(int index) const;
  ::KWMsg::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      reward_list() const;

  // bytes prompt_id = 2;
  void clear_prompt_id();
  const std::string& prompt_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_prompt_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_prompt_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_prompt_id();
  void set_allocated_prompt_id(std::string* prompt_id);
  private:
  const std::string& _internal_prompt_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_prompt_id(const std::string& value);
  std::string* _internal_mutable_prompt_id();
  public:

  // bytes title = 3;
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // bytes context = 4;
  void clear_context();
  const std::string& context() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_context(ArgT0&& arg0, ArgT... args);
  std::string* mutable_context();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_context();
  void set_allocated_context(std::string* context);
  private:
  const std::string& _internal_context() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_context(const std::string& value);
  std::string* _internal_mutable_context();
  public:

  // bytes sender = 5;
  void clear_sender();
  const std::string& sender() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_sender(ArgT0&& arg0, ArgT... args);
  std::string* mutable_sender();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_sender();
  void set_allocated_sender(std::string* sender);
  private:
  const std::string& _internal_sender() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_sender(const std::string& value);
  std::string* _internal_mutable_sender();
  public:

  // bytes parms = 6;
  void clear_parms();
  const std::string& parms() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_parms(ArgT0&& arg0, ArgT... args);
  std::string* mutable_parms();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_parms();
  void set_allocated_parms(std::string* parms);
  private:
  const std::string& _internal_parms() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_parms(const std::string& value);
  std::string* _internal_mutable_parms();
  public:

  // .KWMsg.Ident mail_id = 1;
  bool has_mail_id() const;
  private:
  bool _internal_has_mail_id() const;
  public:
  void clear_mail_id();
  const ::KWMsg::Ident& mail_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_mail_id();
  ::KWMsg::Ident* mutable_mail_id();
  void set_allocated_mail_id(::KWMsg::Ident* mail_id);
  private:
  const ::KWMsg::Ident& _internal_mail_id() const;
  ::KWMsg::Ident* _internal_mutable_mail_id();
  public:
  void unsafe_arena_set_allocated_mail_id(
      ::KWMsg::Ident* mail_id);
  ::KWMsg::Ident* unsafe_arena_release_mail_id();

  // int64 create_ts = 8;
  void clear_create_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 create_ts() const;
  void set_create_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_create_ts() const;
  void _internal_set_create_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int64 deadline_ts = 9;
  void clear_deadline_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 deadline_ts() const;
  void set_deadline_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_deadline_ts() const;
  void _internal_set_deadline_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.MailInfo)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > reward_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr prompt_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr context_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sender_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr parms_;
  ::KWMsg::Ident* mail_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 create_ts_;
  ::PROTOBUF_NAMESPACE_ID::int64 deadline_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class MailInfos final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.MailInfos) */ {
 public:
  inline MailInfos() : MailInfos(nullptr) {}
  ~MailInfos() override;
  explicit constexpr MailInfos(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  MailInfos(const MailInfos& from);
  MailInfos(MailInfos&& from) noexcept
    : MailInfos() {
    *this = ::std::move(from);
  }

  inline MailInfos& operator=(const MailInfos& from) {
    CopyFrom(from);
    return *this;
  }
  inline MailInfos& operator=(MailInfos&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MailInfos& default_instance() {
    return *internal_default_instance();
  }
  static inline const MailInfos* internal_default_instance() {
    return reinterpret_cast<const MailInfos*>(
               &_MailInfos_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    239;

  friend void swap(MailInfos& a, MailInfos& b) {
    a.Swap(&b);
  }
  inline void Swap(MailInfos* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MailInfos* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MailInfos* New() const final {
    return new MailInfos();
  }

  MailInfos* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MailInfos>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MailInfos& from);
  void MergeFrom(const MailInfos& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MailInfos* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.MailInfos";
  }
  protected:
  explicit MailInfos(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .KWMsg.MailInfo list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::KWMsg::MailInfo* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::MailInfo >*
      mutable_list();
  private:
  const ::KWMsg::MailInfo& _internal_list(int index) const;
  ::KWMsg::MailInfo* _internal_add_list();
  public:
  const ::KWMsg::MailInfo& list(int index) const;
  ::KWMsg::MailInfo* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::MailInfo >&
      list() const;

  // @@protoc_insertion_point(class_scope:KWMsg.MailInfos)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::MailInfo > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqDeleteReadedMails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqDeleteReadedMails) */ {
 public:
  inline ReqDeleteReadedMails() : ReqDeleteReadedMails(nullptr) {}
  ~ReqDeleteReadedMails() override;
  explicit constexpr ReqDeleteReadedMails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDeleteReadedMails(const ReqDeleteReadedMails& from);
  ReqDeleteReadedMails(ReqDeleteReadedMails&& from) noexcept
    : ReqDeleteReadedMails() {
    *this = ::std::move(from);
  }

  inline ReqDeleteReadedMails& operator=(const ReqDeleteReadedMails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDeleteReadedMails& operator=(ReqDeleteReadedMails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDeleteReadedMails& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDeleteReadedMails* internal_default_instance() {
    return reinterpret_cast<const ReqDeleteReadedMails*>(
               &_ReqDeleteReadedMails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    240;

  friend void swap(ReqDeleteReadedMails& a, ReqDeleteReadedMails& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDeleteReadedMails* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDeleteReadedMails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqDeleteReadedMails* New() const final {
    return new ReqDeleteReadedMails();
  }

  ReqDeleteReadedMails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDeleteReadedMails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqDeleteReadedMails& from);
  void MergeFrom(const ReqDeleteReadedMails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDeleteReadedMails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqDeleteReadedMails";
  }
  protected:
  explicit ReqDeleteReadedMails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailIdsFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated bytes mail_ids = 2;
  int mail_ids_size() const;
  private:
  int _internal_mail_ids_size() const;
  public:
  void clear_mail_ids();
  const std::string& mail_ids(int index) const;
  std::string* mutable_mail_ids(int index);
  void set_mail_ids(int index, const std::string& value);
  void set_mail_ids(int index, std::string&& value);
  void set_mail_ids(int index, const char* value);
  void set_mail_ids(int index, const void* value, size_t size);
  std::string* add_mail_ids();
  void add_mail_ids(const std::string& value);
  void add_mail_ids(std::string&& value);
  void add_mail_ids(const char* value);
  void add_mail_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mail_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mail_ids();
  private:
  const std::string& _internal_mail_ids(int index) const;
  std::string* _internal_add_mail_ids();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqDeleteReadedMails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mail_ids_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckDeleteReadedMails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckDeleteReadedMails) */ {
 public:
  inline AckDeleteReadedMails() : AckDeleteReadedMails(nullptr) {}
  ~AckDeleteReadedMails() override;
  explicit constexpr AckDeleteReadedMails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckDeleteReadedMails(const AckDeleteReadedMails& from);
  AckDeleteReadedMails(AckDeleteReadedMails&& from) noexcept
    : AckDeleteReadedMails() {
    *this = ::std::move(from);
  }

  inline AckDeleteReadedMails& operator=(const AckDeleteReadedMails& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckDeleteReadedMails& operator=(AckDeleteReadedMails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckDeleteReadedMails& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckDeleteReadedMails* internal_default_instance() {
    return reinterpret_cast<const AckDeleteReadedMails*>(
               &_AckDeleteReadedMails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    241;

  friend void swap(AckDeleteReadedMails& a, AckDeleteReadedMails& b) {
    a.Swap(&b);
  }
  inline void Swap(AckDeleteReadedMails* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckDeleteReadedMails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckDeleteReadedMails* New() const final {
    return new AckDeleteReadedMails();
  }

  AckDeleteReadedMails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckDeleteReadedMails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckDeleteReadedMails& from);
  void MergeFrom(const AckDeleteReadedMails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckDeleteReadedMails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckDeleteReadedMails";
  }
  protected:
  explicit AckDeleteReadedMails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckDeleteReadedMails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqReadMails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqReadMails) */ {
 public:
  inline ReqReadMails() : ReqReadMails(nullptr) {}
  ~ReqReadMails() override;
  explicit constexpr ReqReadMails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqReadMails(const ReqReadMails& from);
  ReqReadMails(ReqReadMails&& from) noexcept
    : ReqReadMails() {
    *this = ::std::move(from);
  }

  inline ReqReadMails& operator=(const ReqReadMails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqReadMails& operator=(ReqReadMails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqReadMails& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqReadMails* internal_default_instance() {
    return reinterpret_cast<const ReqReadMails*>(
               &_ReqReadMails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    242;

  friend void swap(ReqReadMails& a, ReqReadMails& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqReadMails* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqReadMails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqReadMails* New() const final {
    return new ReqReadMails();
  }

  ReqReadMails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqReadMails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqReadMails& from);
  void MergeFrom(const ReqReadMails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqReadMails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqReadMails";
  }
  protected:
  explicit ReqReadMails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailIdsFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated bytes mail_ids = 2;
  int mail_ids_size() const;
  private:
  int _internal_mail_ids_size() const;
  public:
  void clear_mail_ids();
  const std::string& mail_ids(int index) const;
  std::string* mutable_mail_ids(int index);
  void set_mail_ids(int index, const std::string& value);
  void set_mail_ids(int index, std::string&& value);
  void set_mail_ids(int index, const char* value);
  void set_mail_ids(int index, const void* value, size_t size);
  std::string* add_mail_ids();
  void add_mail_ids(const std::string& value);
  void add_mail_ids(std::string&& value);
  void add_mail_ids(const char* value);
  void add_mail_ids(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& mail_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_mail_ids();
  private:
  const std::string& _internal_mail_ids(int index) const;
  std::string* _internal_add_mail_ids();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqReadMails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> mail_ids_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckReadMails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckReadMails) */ {
 public:
  inline AckReadMails() : AckReadMails(nullptr) {}
  ~AckReadMails() override;
  explicit constexpr AckReadMails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckReadMails(const AckReadMails& from);
  AckReadMails(AckReadMails&& from) noexcept
    : AckReadMails() {
    *this = ::std::move(from);
  }

  inline AckReadMails& operator=(const AckReadMails& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckReadMails& operator=(AckReadMails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckReadMails& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckReadMails* internal_default_instance() {
    return reinterpret_cast<const AckReadMails*>(
               &_AckReadMails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    243;

  friend void swap(AckReadMails& a, AckReadMails& b) {
    a.Swap(&b);
  }
  inline void Swap(AckReadMails* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckReadMails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckReadMails* New() const final {
    return new AckReadMails();
  }

  AckReadMails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckReadMails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckReadMails& from);
  void MergeFrom(const AckReadMails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckReadMails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckReadMails";
  }
  protected:
  explicit AckReadMails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.RewardInfo reward_list = 2;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::KWMsg::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_reward_list();
  private:
  const ::KWMsg::RewardInfo& _internal_reward_list(int index) const;
  ::KWMsg::RewardInfo* _internal_add_reward_list();
  public:
  const ::KWMsg::RewardInfo& reward_list(int index) const;
  ::KWMsg::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      reward_list() const;

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckReadMails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > reward_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqWorldSendMailToPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqWorldSendMailToPlayer) */ {
 public:
  inline ReqWorldSendMailToPlayer() : ReqWorldSendMailToPlayer(nullptr) {}
  ~ReqWorldSendMailToPlayer() override;
  explicit constexpr ReqWorldSendMailToPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqWorldSendMailToPlayer(const ReqWorldSendMailToPlayer& from);
  ReqWorldSendMailToPlayer(ReqWorldSendMailToPlayer&& from) noexcept
    : ReqWorldSendMailToPlayer() {
    *this = ::std::move(from);
  }

  inline ReqWorldSendMailToPlayer& operator=(const ReqWorldSendMailToPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqWorldSendMailToPlayer& operator=(ReqWorldSendMailToPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqWorldSendMailToPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqWorldSendMailToPlayer* internal_default_instance() {
    return reinterpret_cast<const ReqWorldSendMailToPlayer*>(
               &_ReqWorldSendMailToPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    244;

  friend void swap(ReqWorldSendMailToPlayer& a, ReqWorldSendMailToPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqWorldSendMailToPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqWorldSendMailToPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqWorldSendMailToPlayer* New() const final {
    return new ReqWorldSendMailToPlayer();
  }

  ReqWorldSendMailToPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqWorldSendMailToPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqWorldSendMailToPlayer& from);
  void MergeFrom(const ReqWorldSendMailToPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqWorldSendMailToPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqWorldSendMailToPlayer";
  }
  protected:
  explicit ReqWorldSendMailToPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kMailInfoFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.MailInfo mail_info = 2;
  bool has_mail_info() const;
  private:
  bool _internal_has_mail_info() const;
  public:
  void clear_mail_info();
  const ::KWMsg::MailInfo& mail_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::MailInfo* release_mail_info();
  ::KWMsg::MailInfo* mutable_mail_info();
  void set_allocated_mail_info(::KWMsg::MailInfo* mail_info);
  private:
  const ::KWMsg::MailInfo& _internal_mail_info() const;
  ::KWMsg::MailInfo* _internal_mutable_mail_info();
  public:
  void unsafe_arena_set_allocated_mail_info(
      ::KWMsg::MailInfo* mail_info);
  ::KWMsg::MailInfo* unsafe_arena_release_mail_info();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqWorldSendMailToPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::MailInfo* mail_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckWorldSendMailToPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckWorldSendMailToPlayer) */ {
 public:
  inline AckWorldSendMailToPlayer() : AckWorldSendMailToPlayer(nullptr) {}
  ~AckWorldSendMailToPlayer() override;
  explicit constexpr AckWorldSendMailToPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckWorldSendMailToPlayer(const AckWorldSendMailToPlayer& from);
  AckWorldSendMailToPlayer(AckWorldSendMailToPlayer&& from) noexcept
    : AckWorldSendMailToPlayer() {
    *this = ::std::move(from);
  }

  inline AckWorldSendMailToPlayer& operator=(const AckWorldSendMailToPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckWorldSendMailToPlayer& operator=(AckWorldSendMailToPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckWorldSendMailToPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckWorldSendMailToPlayer* internal_default_instance() {
    return reinterpret_cast<const AckWorldSendMailToPlayer*>(
               &_AckWorldSendMailToPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    245;

  friend void swap(AckWorldSendMailToPlayer& a, AckWorldSendMailToPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(AckWorldSendMailToPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckWorldSendMailToPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckWorldSendMailToPlayer* New() const final {
    return new AckWorldSendMailToPlayer();
  }

  AckWorldSendMailToPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckWorldSendMailToPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckWorldSendMailToPlayer& from);
  void MergeFrom(const AckWorldSendMailToPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckWorldSendMailToPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckWorldSendMailToPlayer";
  }
  protected:
  explicit AckWorldSendMailToPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 2,
    kMailInfoFieldNumber = 3,
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.MailInfo mail_info = 3;
  bool has_mail_info() const;
  private:
  bool _internal_has_mail_info() const;
  public:
  void clear_mail_info();
  const ::KWMsg::MailInfo& mail_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::MailInfo* release_mail_info();
  ::KWMsg::MailInfo* mutable_mail_info();
  void set_allocated_mail_info(::KWMsg::MailInfo* mail_info);
  private:
  const ::KWMsg::MailInfo& _internal_mail_info() const;
  ::KWMsg::MailInfo* _internal_mutable_mail_info();
  public:
  void unsafe_arena_set_allocated_mail_info(
      ::KWMsg::MailInfo* mail_info);
  ::KWMsg::MailInfo* unsafe_arena_release_mail_info();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckWorldSendMailToPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::MailInfo* mail_info_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncAddPreSendAllPlayersMails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncAddPreSendAllPlayersMails) */ {
 public:
  inline SyncAddPreSendAllPlayersMails() : SyncAddPreSendAllPlayersMails(nullptr) {}
  ~SyncAddPreSendAllPlayersMails() override;
  explicit constexpr SyncAddPreSendAllPlayersMails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncAddPreSendAllPlayersMails(const SyncAddPreSendAllPlayersMails& from);
  SyncAddPreSendAllPlayersMails(SyncAddPreSendAllPlayersMails&& from) noexcept
    : SyncAddPreSendAllPlayersMails() {
    *this = ::std::move(from);
  }

  inline SyncAddPreSendAllPlayersMails& operator=(const SyncAddPreSendAllPlayersMails& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncAddPreSendAllPlayersMails& operator=(SyncAddPreSendAllPlayersMails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncAddPreSendAllPlayersMails& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncAddPreSendAllPlayersMails* internal_default_instance() {
    return reinterpret_cast<const SyncAddPreSendAllPlayersMails*>(
               &_SyncAddPreSendAllPlayersMails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    246;

  friend void swap(SyncAddPreSendAllPlayersMails& a, SyncAddPreSendAllPlayersMails& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncAddPreSendAllPlayersMails* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncAddPreSendAllPlayersMails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncAddPreSendAllPlayersMails* New() const final {
    return new SyncAddPreSendAllPlayersMails();
  }

  SyncAddPreSendAllPlayersMails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncAddPreSendAllPlayersMails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncAddPreSendAllPlayersMails& from);
  void MergeFrom(const SyncAddPreSendAllPlayersMails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncAddPreSendAllPlayersMails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncAddPreSendAllPlayersMails";
  }
  protected:
  explicit SyncAddPreSendAllPlayersMails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailInfoFieldNumber = 1,
  };
  // .KWMsg.MailInfo mail_info = 1;
  bool has_mail_info() const;
  private:
  bool _internal_has_mail_info() const;
  public:
  void clear_mail_info();
  const ::KWMsg::MailInfo& mail_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::MailInfo* release_mail_info();
  ::KWMsg::MailInfo* mutable_mail_info();
  void set_allocated_mail_info(::KWMsg::MailInfo* mail_info);
  private:
  const ::KWMsg::MailInfo& _internal_mail_info() const;
  ::KWMsg::MailInfo* _internal_mutable_mail_info();
  public:
  void unsafe_arena_set_allocated_mail_info(
      ::KWMsg::MailInfo* mail_info);
  ::KWMsg::MailInfo* unsafe_arena_release_mail_info();

  // @@protoc_insertion_point(class_scope:KWMsg.SyncAddPreSendAllPlayersMails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::MailInfo* mail_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncDelPreSendAllPlayersMails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncDelPreSendAllPlayersMails) */ {
 public:
  inline SyncDelPreSendAllPlayersMails() : SyncDelPreSendAllPlayersMails(nullptr) {}
  ~SyncDelPreSendAllPlayersMails() override;
  explicit constexpr SyncDelPreSendAllPlayersMails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncDelPreSendAllPlayersMails(const SyncDelPreSendAllPlayersMails& from);
  SyncDelPreSendAllPlayersMails(SyncDelPreSendAllPlayersMails&& from) noexcept
    : SyncDelPreSendAllPlayersMails() {
    *this = ::std::move(from);
  }

  inline SyncDelPreSendAllPlayersMails& operator=(const SyncDelPreSendAllPlayersMails& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncDelPreSendAllPlayersMails& operator=(SyncDelPreSendAllPlayersMails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncDelPreSendAllPlayersMails& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncDelPreSendAllPlayersMails* internal_default_instance() {
    return reinterpret_cast<const SyncDelPreSendAllPlayersMails*>(
               &_SyncDelPreSendAllPlayersMails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    247;

  friend void swap(SyncDelPreSendAllPlayersMails& a, SyncDelPreSendAllPlayersMails& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncDelPreSendAllPlayersMails* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncDelPreSendAllPlayersMails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncDelPreSendAllPlayersMails* New() const final {
    return new SyncDelPreSendAllPlayersMails();
  }

  SyncDelPreSendAllPlayersMails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncDelPreSendAllPlayersMails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncDelPreSendAllPlayersMails& from);
  void MergeFrom(const SyncDelPreSendAllPlayersMails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncDelPreSendAllPlayersMails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncDelPreSendAllPlayersMails";
  }
  protected:
  explicit SyncDelPreSendAllPlayersMails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMailInfoFieldNumber = 1,
  };
  // .KWMsg.MailInfo mail_info = 1;
  bool has_mail_info() const;
  private:
  bool _internal_has_mail_info() const;
  public:
  void clear_mail_info();
  const ::KWMsg::MailInfo& mail_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::MailInfo* release_mail_info();
  ::KWMsg::MailInfo* mutable_mail_info();
  void set_allocated_mail_info(::KWMsg::MailInfo* mail_info);
  private:
  const ::KWMsg::MailInfo& _internal_mail_info() const;
  ::KWMsg::MailInfo* _internal_mutable_mail_info();
  public:
  void unsafe_arena_set_allocated_mail_info(
      ::KWMsg::MailInfo* mail_info);
  ::KWMsg::MailInfo* unsafe_arena_release_mail_info();

  // @@protoc_insertion_point(class_scope:KWMsg.SyncDelPreSendAllPlayersMails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::MailInfo* mail_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncAddPreSendPlayerMails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncAddPreSendPlayerMails) */ {
 public:
  inline SyncAddPreSendPlayerMails() : SyncAddPreSendPlayerMails(nullptr) {}
  ~SyncAddPreSendPlayerMails() override;
  explicit constexpr SyncAddPreSendPlayerMails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncAddPreSendPlayerMails(const SyncAddPreSendPlayerMails& from);
  SyncAddPreSendPlayerMails(SyncAddPreSendPlayerMails&& from) noexcept
    : SyncAddPreSendPlayerMails() {
    *this = ::std::move(from);
  }

  inline SyncAddPreSendPlayerMails& operator=(const SyncAddPreSendPlayerMails& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncAddPreSendPlayerMails& operator=(SyncAddPreSendPlayerMails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncAddPreSendPlayerMails& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncAddPreSendPlayerMails* internal_default_instance() {
    return reinterpret_cast<const SyncAddPreSendPlayerMails*>(
               &_SyncAddPreSendPlayerMails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    248;

  friend void swap(SyncAddPreSendPlayerMails& a, SyncAddPreSendPlayerMails& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncAddPreSendPlayerMails* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncAddPreSendPlayerMails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncAddPreSendPlayerMails* New() const final {
    return new SyncAddPreSendPlayerMails();
  }

  SyncAddPreSendPlayerMails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncAddPreSendPlayerMails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncAddPreSendPlayerMails& from);
  void MergeFrom(const SyncAddPreSendPlayerMails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncAddPreSendPlayerMails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncAddPreSendPlayerMails";
  }
  protected:
  explicit SyncAddPreSendPlayerMails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kMailInfoFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.MailInfo mail_info = 2;
  bool has_mail_info() const;
  private:
  bool _internal_has_mail_info() const;
  public:
  void clear_mail_info();
  const ::KWMsg::MailInfo& mail_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::MailInfo* release_mail_info();
  ::KWMsg::MailInfo* mutable_mail_info();
  void set_allocated_mail_info(::KWMsg::MailInfo* mail_info);
  private:
  const ::KWMsg::MailInfo& _internal_mail_info() const;
  ::KWMsg::MailInfo* _internal_mutable_mail_info();
  public:
  void unsafe_arena_set_allocated_mail_info(
      ::KWMsg::MailInfo* mail_info);
  ::KWMsg::MailInfo* unsafe_arena_release_mail_info();

  // @@protoc_insertion_point(class_scope:KWMsg.SyncAddPreSendPlayerMails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::MailInfo* mail_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncDelPreSendPlayerMails final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncDelPreSendPlayerMails) */ {
 public:
  inline SyncDelPreSendPlayerMails() : SyncDelPreSendPlayerMails(nullptr) {}
  ~SyncDelPreSendPlayerMails() override;
  explicit constexpr SyncDelPreSendPlayerMails(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncDelPreSendPlayerMails(const SyncDelPreSendPlayerMails& from);
  SyncDelPreSendPlayerMails(SyncDelPreSendPlayerMails&& from) noexcept
    : SyncDelPreSendPlayerMails() {
    *this = ::std::move(from);
  }

  inline SyncDelPreSendPlayerMails& operator=(const SyncDelPreSendPlayerMails& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncDelPreSendPlayerMails& operator=(SyncDelPreSendPlayerMails&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncDelPreSendPlayerMails& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncDelPreSendPlayerMails* internal_default_instance() {
    return reinterpret_cast<const SyncDelPreSendPlayerMails*>(
               &_SyncDelPreSendPlayerMails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    249;

  friend void swap(SyncDelPreSendPlayerMails& a, SyncDelPreSendPlayerMails& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncDelPreSendPlayerMails* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncDelPreSendPlayerMails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncDelPreSendPlayerMails* New() const final {
    return new SyncDelPreSendPlayerMails();
  }

  SyncDelPreSendPlayerMails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncDelPreSendPlayerMails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncDelPreSendPlayerMails& from);
  void MergeFrom(const SyncDelPreSendPlayerMails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncDelPreSendPlayerMails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncDelPreSendPlayerMails";
  }
  protected:
  explicit SyncDelPreSendPlayerMails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kMailInfoFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.MailInfo mail_info = 2;
  bool has_mail_info() const;
  private:
  bool _internal_has_mail_info() const;
  public:
  void clear_mail_info();
  const ::KWMsg::MailInfo& mail_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::MailInfo* release_mail_info();
  ::KWMsg::MailInfo* mutable_mail_info();
  void set_allocated_mail_info(::KWMsg::MailInfo* mail_info);
  private:
  const ::KWMsg::MailInfo& _internal_mail_info() const;
  ::KWMsg::MailInfo* _internal_mutable_mail_info();
  public:
  void unsafe_arena_set_allocated_mail_info(
      ::KWMsg::MailInfo* mail_info);
  ::KWMsg::MailInfo* unsafe_arena_release_mail_info();

  // @@protoc_insertion_point(class_scope:KWMsg.SyncDelPreSendPlayerMails)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::MailInfo* mail_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerMailSessions final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncPlayerMailSessions) */ {
 public:
  inline SyncPlayerMailSessions() : SyncPlayerMailSessions(nullptr) {}
  ~SyncPlayerMailSessions() override;
  explicit constexpr SyncPlayerMailSessions(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayerMailSessions(const SyncPlayerMailSessions& from);
  SyncPlayerMailSessions(SyncPlayerMailSessions&& from) noexcept
    : SyncPlayerMailSessions() {
    *this = ::std::move(from);
  }

  inline SyncPlayerMailSessions& operator=(const SyncPlayerMailSessions& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerMailSessions& operator=(SyncPlayerMailSessions&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayerMailSessions& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayerMailSessions* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerMailSessions*>(
               &_SyncPlayerMailSessions_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    250;

  friend void swap(SyncPlayerMailSessions& a, SyncPlayerMailSessions& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerMailSessions* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayerMailSessions* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerMailSessions* New() const final {
    return new SyncPlayerMailSessions();
  }

  SyncPlayerMailSessions* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerMailSessions>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerMailSessions& from);
  void MergeFrom(const SyncPlayerMailSessions& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerMailSessions* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncPlayerMailSessions";
  }
  protected:
  explicit SyncPlayerMailSessions(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTsFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int64 ts = 2;
  void clear_ts();
  ::PROTOBUF_NAMESPACE_ID::int64 ts() const;
  void set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ts() const;
  void _internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncPlayerMailSessions)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqRegisterChatSdkAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqRegisterChatSdkAccount) */ {
 public:
  inline ReqRegisterChatSdkAccount() : ReqRegisterChatSdkAccount(nullptr) {}
  ~ReqRegisterChatSdkAccount() override;
  explicit constexpr ReqRegisterChatSdkAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqRegisterChatSdkAccount(const ReqRegisterChatSdkAccount& from);
  ReqRegisterChatSdkAccount(ReqRegisterChatSdkAccount&& from) noexcept
    : ReqRegisterChatSdkAccount() {
    *this = ::std::move(from);
  }

  inline ReqRegisterChatSdkAccount& operator=(const ReqRegisterChatSdkAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqRegisterChatSdkAccount& operator=(ReqRegisterChatSdkAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqRegisterChatSdkAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqRegisterChatSdkAccount* internal_default_instance() {
    return reinterpret_cast<const ReqRegisterChatSdkAccount*>(
               &_ReqRegisterChatSdkAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    251;

  friend void swap(ReqRegisterChatSdkAccount& a, ReqRegisterChatSdkAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqRegisterChatSdkAccount* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqRegisterChatSdkAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqRegisterChatSdkAccount* New() const final {
    return new ReqRegisterChatSdkAccount();
  }

  ReqRegisterChatSdkAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqRegisterChatSdkAccount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqRegisterChatSdkAccount& from);
  void MergeFrom(const ReqRegisterChatSdkAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRegisterChatSdkAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqRegisterChatSdkAccount";
  }
  protected:
  explicit ReqRegisterChatSdkAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatSdkPasswdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kWorldIdFieldNumber = 3,
  };
  // bytes chat_sdk_passwd = 2;
  void clear_chat_sdk_passwd();
  const std::string& chat_sdk_passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_sdk_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_sdk_passwd();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_sdk_passwd();
  void set_allocated_chat_sdk_passwd(std::string* chat_sdk_passwd);
  private:
  const std::string& _internal_chat_sdk_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_sdk_passwd(const std::string& value);
  std::string* _internal_mutable_chat_sdk_passwd();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 world_id = 3;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqRegisterChatSdkAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_sdk_passwd_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckRegisterChatSdkAccount final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckRegisterChatSdkAccount) */ {
 public:
  inline AckRegisterChatSdkAccount() : AckRegisterChatSdkAccount(nullptr) {}
  ~AckRegisterChatSdkAccount() override;
  explicit constexpr AckRegisterChatSdkAccount(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckRegisterChatSdkAccount(const AckRegisterChatSdkAccount& from);
  AckRegisterChatSdkAccount(AckRegisterChatSdkAccount&& from) noexcept
    : AckRegisterChatSdkAccount() {
    *this = ::std::move(from);
  }

  inline AckRegisterChatSdkAccount& operator=(const AckRegisterChatSdkAccount& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckRegisterChatSdkAccount& operator=(AckRegisterChatSdkAccount&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckRegisterChatSdkAccount& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckRegisterChatSdkAccount* internal_default_instance() {
    return reinterpret_cast<const AckRegisterChatSdkAccount*>(
               &_AckRegisterChatSdkAccount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    252;

  friend void swap(AckRegisterChatSdkAccount& a, AckRegisterChatSdkAccount& b) {
    a.Swap(&b);
  }
  inline void Swap(AckRegisterChatSdkAccount* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckRegisterChatSdkAccount* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckRegisterChatSdkAccount* New() const final {
    return new AckRegisterChatSdkAccount();
  }

  AckRegisterChatSdkAccount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckRegisterChatSdkAccount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckRegisterChatSdkAccount& from);
  void MergeFrom(const AckRegisterChatSdkAccount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckRegisterChatSdkAccount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckRegisterChatSdkAccount";
  }
  protected:
  explicit AckRegisterChatSdkAccount(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatSdkPasswdFieldNumber = 3,
    kPlayerIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
    kWorldIdFieldNumber = 4,
  };
  // bytes chat_sdk_passwd = 3;
  void clear_chat_sdk_passwd();
  const std::string& chat_sdk_passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_sdk_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_sdk_passwd();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_sdk_passwd();
  void set_allocated_chat_sdk_passwd(std::string* chat_sdk_passwd);
  private:
  const std::string& _internal_chat_sdk_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_sdk_passwd(const std::string& value);
  std::string* _internal_mutable_chat_sdk_passwd();
  public:

  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 world_id = 4;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckRegisterChatSdkAccount)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_sdk_passwd_;
  ::KWMsg::Ident* player_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCreateChatroom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCreateChatroom) */ {
 public:
  inline ReqCreateChatroom() : ReqCreateChatroom(nullptr) {}
  ~ReqCreateChatroom() override;
  explicit constexpr ReqCreateChatroom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCreateChatroom(const ReqCreateChatroom& from);
  ReqCreateChatroom(ReqCreateChatroom&& from) noexcept
    : ReqCreateChatroom() {
    *this = ::std::move(from);
  }

  inline ReqCreateChatroom& operator=(const ReqCreateChatroom& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCreateChatroom& operator=(ReqCreateChatroom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCreateChatroom& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCreateChatroom* internal_default_instance() {
    return reinterpret_cast<const ReqCreateChatroom*>(
               &_ReqCreateChatroom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    253;

  friend void swap(ReqCreateChatroom& a, ReqCreateChatroom& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCreateChatroom* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCreateChatroom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCreateChatroom* New() const final {
    return new ReqCreateChatroom();
  }

  ReqCreateChatroom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCreateChatroom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCreateChatroom& from);
  void MergeFrom(const ReqCreateChatroom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCreateChatroom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCreateChatroom";
  }
  protected:
  explicit ReqCreateChatroom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatroomNameFieldNumber = 2,
    kExtraDataFieldNumber = 4,
    kChatroomTypeFieldNumber = 1,
    kWorldIdFieldNumber = 3,
  };
  // bytes chatroom_name = 2;
  void clear_chatroom_name();
  const std::string& chatroom_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chatroom_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chatroom_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chatroom_name();
  void set_allocated_chatroom_name(std::string* chatroom_name);
  private:
  const std::string& _internal_chatroom_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatroom_name(const std::string& value);
  std::string* _internal_mutable_chatroom_name();
  public:

  // bytes extra_data = 4;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // int32 chatroom_type = 1;
  void clear_chatroom_type();
  ::PROTOBUF_NAMESPACE_ID::int32 chatroom_type() const;
  void set_chatroom_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chatroom_type() const;
  void _internal_set_chatroom_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 3;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCreateChatroom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatroom_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 chatroom_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCreateChatroom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCreateChatroom) */ {
 public:
  inline AckCreateChatroom() : AckCreateChatroom(nullptr) {}
  ~AckCreateChatroom() override;
  explicit constexpr AckCreateChatroom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCreateChatroom(const AckCreateChatroom& from);
  AckCreateChatroom(AckCreateChatroom&& from) noexcept
    : AckCreateChatroom() {
    *this = ::std::move(from);
  }

  inline AckCreateChatroom& operator=(const AckCreateChatroom& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCreateChatroom& operator=(AckCreateChatroom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCreateChatroom& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCreateChatroom* internal_default_instance() {
    return reinterpret_cast<const AckCreateChatroom*>(
               &_AckCreateChatroom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    254;

  friend void swap(AckCreateChatroom& a, AckCreateChatroom& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCreateChatroom* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCreateChatroom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCreateChatroom* New() const final {
    return new AckCreateChatroom();
  }

  AckCreateChatroom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCreateChatroom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCreateChatroom& from);
  void MergeFrom(const AckCreateChatroom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCreateChatroom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCreateChatroom";
  }
  protected:
  explicit AckCreateChatroom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatroomNameFieldNumber = 3,
    kExtraDataFieldNumber = 5,
    kChatroomIdFieldNumber = 6,
    kEventCodeFieldNumber = 1,
    kChatroomTypeFieldNumber = 2,
    kWorldIdFieldNumber = 4,
  };
  // bytes chatroom_name = 3;
  void clear_chatroom_name();
  const std::string& chatroom_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chatroom_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chatroom_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chatroom_name();
  void set_allocated_chatroom_name(std::string* chatroom_name);
  private:
  const std::string& _internal_chatroom_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatroom_name(const std::string& value);
  std::string* _internal_mutable_chatroom_name();
  public:

  // bytes extra_data = 5;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // bytes chatroom_id = 6;
  void clear_chatroom_id();
  const std::string& chatroom_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chatroom_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chatroom_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chatroom_id();
  void set_allocated_chatroom_id(std::string* chatroom_id);
  private:
  const std::string& _internal_chatroom_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatroom_id(const std::string& value);
  std::string* _internal_mutable_chatroom_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 chatroom_type = 2;
  void clear_chatroom_type();
  ::PROTOBUF_NAMESPACE_ID::int32 chatroom_type() const;
  void set_chatroom_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chatroom_type() const;
  void _internal_set_chatroom_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 4;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCreateChatroom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatroom_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatroom_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 chatroom_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSdkLoginInfoAndChatroom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSdkLoginInfoAndChatroom) */ {
 public:
  inline ReqSdkLoginInfoAndChatroom() : ReqSdkLoginInfoAndChatroom(nullptr) {}
  ~ReqSdkLoginInfoAndChatroom() override;
  explicit constexpr ReqSdkLoginInfoAndChatroom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSdkLoginInfoAndChatroom(const ReqSdkLoginInfoAndChatroom& from);
  ReqSdkLoginInfoAndChatroom(ReqSdkLoginInfoAndChatroom&& from) noexcept
    : ReqSdkLoginInfoAndChatroom() {
    *this = ::std::move(from);
  }

  inline ReqSdkLoginInfoAndChatroom& operator=(const ReqSdkLoginInfoAndChatroom& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSdkLoginInfoAndChatroom& operator=(ReqSdkLoginInfoAndChatroom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSdkLoginInfoAndChatroom& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSdkLoginInfoAndChatroom* internal_default_instance() {
    return reinterpret_cast<const ReqSdkLoginInfoAndChatroom*>(
               &_ReqSdkLoginInfoAndChatroom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    255;

  friend void swap(ReqSdkLoginInfoAndChatroom& a, ReqSdkLoginInfoAndChatroom& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSdkLoginInfoAndChatroom* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSdkLoginInfoAndChatroom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSdkLoginInfoAndChatroom* New() const final {
    return new ReqSdkLoginInfoAndChatroom();
  }

  ReqSdkLoginInfoAndChatroom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSdkLoginInfoAndChatroom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSdkLoginInfoAndChatroom& from);
  void MergeFrom(const ReqSdkLoginInfoAndChatroom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSdkLoginInfoAndChatroom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSdkLoginInfoAndChatroom";
  }
  protected:
  explicit ReqSdkLoginInfoAndChatroom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommunityIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes community_id = 2;
  void clear_community_id();
  const std::string& community_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_id();
  void set_allocated_community_id(std::string* community_id);
  private:
  const std::string& _internal_community_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_id(const std::string& value);
  std::string* _internal_mutable_community_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSdkLoginInfoAndChatroom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSdkLoginInfoAndChatroom final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSdkLoginInfoAndChatroom) */ {
 public:
  inline AckSdkLoginInfoAndChatroom() : AckSdkLoginInfoAndChatroom(nullptr) {}
  ~AckSdkLoginInfoAndChatroom() override;
  explicit constexpr AckSdkLoginInfoAndChatroom(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSdkLoginInfoAndChatroom(const AckSdkLoginInfoAndChatroom& from);
  AckSdkLoginInfoAndChatroom(AckSdkLoginInfoAndChatroom&& from) noexcept
    : AckSdkLoginInfoAndChatroom() {
    *this = ::std::move(from);
  }

  inline AckSdkLoginInfoAndChatroom& operator=(const AckSdkLoginInfoAndChatroom& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSdkLoginInfoAndChatroom& operator=(AckSdkLoginInfoAndChatroom&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSdkLoginInfoAndChatroom& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSdkLoginInfoAndChatroom* internal_default_instance() {
    return reinterpret_cast<const AckSdkLoginInfoAndChatroom*>(
               &_AckSdkLoginInfoAndChatroom_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    256;

  friend void swap(AckSdkLoginInfoAndChatroom& a, AckSdkLoginInfoAndChatroom& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSdkLoginInfoAndChatroom* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSdkLoginInfoAndChatroom* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSdkLoginInfoAndChatroom* New() const final {
    return new AckSdkLoginInfoAndChatroom();
  }

  AckSdkLoginInfoAndChatroom* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSdkLoginInfoAndChatroom>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSdkLoginInfoAndChatroom& from);
  void MergeFrom(const AckSdkLoginInfoAndChatroom& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSdkLoginInfoAndChatroom* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSdkLoginInfoAndChatroom";
  }
  protected:
  explicit AckSdkLoginInfoAndChatroom(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatSdkPasswdFieldNumber = 2,
    kPublicChatroomIdFieldNumber = 3,
    kSystemChatroomIdFieldNumber = 4,
    kCommunityChatroomIdFieldNumber = 5,
    kEventCodeFieldNumber = 1,
  };
  // bytes chat_sdk_passwd = 2;
  void clear_chat_sdk_passwd();
  const std::string& chat_sdk_passwd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_sdk_passwd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_sdk_passwd();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_sdk_passwd();
  void set_allocated_chat_sdk_passwd(std::string* chat_sdk_passwd);
  private:
  const std::string& _internal_chat_sdk_passwd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_sdk_passwd(const std::string& value);
  std::string* _internal_mutable_chat_sdk_passwd();
  public:

  // bytes public_chatroom_id = 3;
  void clear_public_chatroom_id();
  const std::string& public_chatroom_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_public_chatroom_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_public_chatroom_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_public_chatroom_id();
  void set_allocated_public_chatroom_id(std::string* public_chatroom_id);
  private:
  const std::string& _internal_public_chatroom_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_public_chatroom_id(const std::string& value);
  std::string* _internal_mutable_public_chatroom_id();
  public:

  // bytes system_chatroom_id = 4;
  void clear_system_chatroom_id();
  const std::string& system_chatroom_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_system_chatroom_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_system_chatroom_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_system_chatroom_id();
  void set_allocated_system_chatroom_id(std::string* system_chatroom_id);
  private:
  const std::string& _internal_system_chatroom_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_system_chatroom_id(const std::string& value);
  std::string* _internal_mutable_system_chatroom_id();
  public:

  // bytes community_chatroom_id = 5;
  void clear_community_chatroom_id();
  const std::string& community_chatroom_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_community_chatroom_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_community_chatroom_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_community_chatroom_id();
  void set_allocated_community_chatroom_id(std::string* community_chatroom_id);
  private:
  const std::string& _internal_community_chatroom_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_community_chatroom_id(const std::string& value);
  std::string* _internal_mutable_community_chatroom_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSdkLoginInfoAndChatroom)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_sdk_passwd_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr public_chatroom_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr system_chatroom_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr community_chatroom_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqReportChatPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqReportChatPlayer) */ {
 public:
  inline ReqReportChatPlayer() : ReqReportChatPlayer(nullptr) {}
  ~ReqReportChatPlayer() override;
  explicit constexpr ReqReportChatPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqReportChatPlayer(const ReqReportChatPlayer& from);
  ReqReportChatPlayer(ReqReportChatPlayer&& from) noexcept
    : ReqReportChatPlayer() {
    *this = ::std::move(from);
  }

  inline ReqReportChatPlayer& operator=(const ReqReportChatPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqReportChatPlayer& operator=(ReqReportChatPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqReportChatPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqReportChatPlayer* internal_default_instance() {
    return reinterpret_cast<const ReqReportChatPlayer*>(
               &_ReqReportChatPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    257;

  friend void swap(ReqReportChatPlayer& a, ReqReportChatPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqReportChatPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqReportChatPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqReportChatPlayer* New() const final {
    return new ReqReportChatPlayer();
  }

  ReqReportChatPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqReportChatPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqReportChatPlayer& from);
  void MergeFrom(const ReqReportChatPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqReportChatPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqReportChatPlayer";
  }
  protected:
  explicit ReqReportChatPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportContentFieldNumber = 4,
    kPlayerIdFieldNumber = 1,
    kChatPlayerIdFieldNumber = 2,
    kReportTypeFieldNumber = 3,
  };
  // bytes report_content = 4;
  void clear_report_content();
  const std::string& report_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_report_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_report_content();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_report_content();
  void set_allocated_report_content(std::string* report_content);
  private:
  const std::string& _internal_report_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_report_content(const std::string& value);
  std::string* _internal_mutable_report_content();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident chat_player_id = 2;
  bool has_chat_player_id() const;
  private:
  bool _internal_has_chat_player_id() const;
  public:
  void clear_chat_player_id();
  const ::KWMsg::Ident& chat_player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_chat_player_id();
  ::KWMsg::Ident* mutable_chat_player_id();
  void set_allocated_chat_player_id(::KWMsg::Ident* chat_player_id);
  private:
  const ::KWMsg::Ident& _internal_chat_player_id() const;
  ::KWMsg::Ident* _internal_mutable_chat_player_id();
  public:
  void unsafe_arena_set_allocated_chat_player_id(
      ::KWMsg::Ident* chat_player_id);
  ::KWMsg::Ident* unsafe_arena_release_chat_player_id();

  // int32 report_type = 3;
  void clear_report_type();
  ::PROTOBUF_NAMESPACE_ID::int32 report_type() const;
  void set_report_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_report_type() const;
  void _internal_set_report_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqReportChatPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_content_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* chat_player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 report_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckReportChatPlayer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckReportChatPlayer) */ {
 public:
  inline AckReportChatPlayer() : AckReportChatPlayer(nullptr) {}
  ~AckReportChatPlayer() override;
  explicit constexpr AckReportChatPlayer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckReportChatPlayer(const AckReportChatPlayer& from);
  AckReportChatPlayer(AckReportChatPlayer&& from) noexcept
    : AckReportChatPlayer() {
    *this = ::std::move(from);
  }

  inline AckReportChatPlayer& operator=(const AckReportChatPlayer& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckReportChatPlayer& operator=(AckReportChatPlayer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckReportChatPlayer& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckReportChatPlayer* internal_default_instance() {
    return reinterpret_cast<const AckReportChatPlayer*>(
               &_AckReportChatPlayer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    258;

  friend void swap(AckReportChatPlayer& a, AckReportChatPlayer& b) {
    a.Swap(&b);
  }
  inline void Swap(AckReportChatPlayer* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckReportChatPlayer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckReportChatPlayer* New() const final {
    return new AckReportChatPlayer();
  }

  AckReportChatPlayer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckReportChatPlayer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckReportChatPlayer& from);
  void MergeFrom(const AckReportChatPlayer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckReportChatPlayer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckReportChatPlayer";
  }
  protected:
  explicit AckReportChatPlayer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReportContentFieldNumber = 4,
    kChatPlayerIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
    kReportTypeFieldNumber = 3,
  };
  // bytes report_content = 4;
  void clear_report_content();
  const std::string& report_content() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_report_content(ArgT0&& arg0, ArgT... args);
  std::string* mutable_report_content();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_report_content();
  void set_allocated_report_content(std::string* report_content);
  private:
  const std::string& _internal_report_content() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_report_content(const std::string& value);
  std::string* _internal_mutable_report_content();
  public:

  // .KWMsg.Ident chat_player_id = 2;
  bool has_chat_player_id() const;
  private:
  bool _internal_has_chat_player_id() const;
  public:
  void clear_chat_player_id();
  const ::KWMsg::Ident& chat_player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_chat_player_id();
  ::KWMsg::Ident* mutable_chat_player_id();
  void set_allocated_chat_player_id(::KWMsg::Ident* chat_player_id);
  private:
  const ::KWMsg::Ident& _internal_chat_player_id() const;
  ::KWMsg::Ident* _internal_mutable_chat_player_id();
  public:
  void unsafe_arena_set_allocated_chat_player_id(
      ::KWMsg::Ident* chat_player_id);
  ::KWMsg::Ident* unsafe_arena_release_chat_player_id();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 report_type = 3;
  void clear_report_type();
  ::PROTOBUF_NAMESPACE_ID::int32 report_type() const;
  void set_report_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_report_type() const;
  void _internal_set_report_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckReportChatPlayer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr report_content_;
  ::KWMsg::Ident* chat_player_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 report_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSendChatroomMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSendChatroomMsg) */ {
 public:
  inline ReqSendChatroomMsg() : ReqSendChatroomMsg(nullptr) {}
  ~ReqSendChatroomMsg() override;
  explicit constexpr ReqSendChatroomMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSendChatroomMsg(const ReqSendChatroomMsg& from);
  ReqSendChatroomMsg(ReqSendChatroomMsg&& from) noexcept
    : ReqSendChatroomMsg() {
    *this = ::std::move(from);
  }

  inline ReqSendChatroomMsg& operator=(const ReqSendChatroomMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSendChatroomMsg& operator=(ReqSendChatroomMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSendChatroomMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSendChatroomMsg* internal_default_instance() {
    return reinterpret_cast<const ReqSendChatroomMsg*>(
               &_ReqSendChatroomMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    259;

  friend void swap(ReqSendChatroomMsg& a, ReqSendChatroomMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSendChatroomMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSendChatroomMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSendChatroomMsg* New() const final {
    return new ReqSendChatroomMsg();
  }

  ReqSendChatroomMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSendChatroomMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSendChatroomMsg& from);
  void MergeFrom(const ReqSendChatroomMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSendChatroomMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSendChatroomMsg";
  }
  protected:
  explicit ReqSendChatroomMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatroomIdsFieldNumber = 1,
    kChatMsgFieldNumber = 2,
  };
  // bytes chatroom_ids = 1;
  void clear_chatroom_ids();
  const std::string& chatroom_ids() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chatroom_ids(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chatroom_ids();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chatroom_ids();
  void set_allocated_chatroom_ids(std::string* chatroom_ids);
  private:
  const std::string& _internal_chatroom_ids() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatroom_ids(const std::string& value);
  std::string* _internal_mutable_chatroom_ids();
  public:

  // bytes chat_msg = 2;
  void clear_chat_msg();
  const std::string& chat_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_msg();
  void set_allocated_chat_msg(std::string* chat_msg);
  private:
  const std::string& _internal_chat_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_msg(const std::string& value);
  std::string* _internal_mutable_chat_msg();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSendChatroomMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatroom_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSendChatroomMsg final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSendChatroomMsg) */ {
 public:
  inline AckSendChatroomMsg() : AckSendChatroomMsg(nullptr) {}
  ~AckSendChatroomMsg() override;
  explicit constexpr AckSendChatroomMsg(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSendChatroomMsg(const AckSendChatroomMsg& from);
  AckSendChatroomMsg(AckSendChatroomMsg&& from) noexcept
    : AckSendChatroomMsg() {
    *this = ::std::move(from);
  }

  inline AckSendChatroomMsg& operator=(const AckSendChatroomMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSendChatroomMsg& operator=(AckSendChatroomMsg&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSendChatroomMsg& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSendChatroomMsg* internal_default_instance() {
    return reinterpret_cast<const AckSendChatroomMsg*>(
               &_AckSendChatroomMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    260;

  friend void swap(AckSendChatroomMsg& a, AckSendChatroomMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSendChatroomMsg* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSendChatroomMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSendChatroomMsg* New() const final {
    return new AckSendChatroomMsg();
  }

  AckSendChatroomMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSendChatroomMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSendChatroomMsg& from);
  void MergeFrom(const AckSendChatroomMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSendChatroomMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSendChatroomMsg";
  }
  protected:
  explicit AckSendChatroomMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatroomIdsFieldNumber = 1,
    kChatMsgFieldNumber = 2,
  };
  // bytes chatroom_ids = 1;
  void clear_chatroom_ids();
  const std::string& chatroom_ids() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chatroom_ids(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chatroom_ids();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chatroom_ids();
  void set_allocated_chatroom_ids(std::string* chatroom_ids);
  private:
  const std::string& _internal_chatroom_ids() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatroom_ids(const std::string& value);
  std::string* _internal_mutable_chatroom_ids();
  public:

  // bytes chat_msg = 2;
  void clear_chat_msg();
  const std::string& chat_msg() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_msg(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_msg();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_msg();
  void set_allocated_chat_msg(std::string* chat_msg);
  private:
  const std::string& _internal_chat_msg() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_msg(const std::string& value);
  std::string* _internal_mutable_chat_msg();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSendChatroomMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatroom_ids_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_msg_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqUpdateChatroomAnnouncement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUpdateChatroomAnnouncement) */ {
 public:
  inline ReqUpdateChatroomAnnouncement() : ReqUpdateChatroomAnnouncement(nullptr) {}
  ~ReqUpdateChatroomAnnouncement() override;
  explicit constexpr ReqUpdateChatroomAnnouncement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUpdateChatroomAnnouncement(const ReqUpdateChatroomAnnouncement& from);
  ReqUpdateChatroomAnnouncement(ReqUpdateChatroomAnnouncement&& from) noexcept
    : ReqUpdateChatroomAnnouncement() {
    *this = ::std::move(from);
  }

  inline ReqUpdateChatroomAnnouncement& operator=(const ReqUpdateChatroomAnnouncement& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUpdateChatroomAnnouncement& operator=(ReqUpdateChatroomAnnouncement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUpdateChatroomAnnouncement& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUpdateChatroomAnnouncement* internal_default_instance() {
    return reinterpret_cast<const ReqUpdateChatroomAnnouncement*>(
               &_ReqUpdateChatroomAnnouncement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    261;

  friend void swap(ReqUpdateChatroomAnnouncement& a, ReqUpdateChatroomAnnouncement& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUpdateChatroomAnnouncement* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUpdateChatroomAnnouncement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUpdateChatroomAnnouncement* New() const final {
    return new ReqUpdateChatroomAnnouncement();
  }

  ReqUpdateChatroomAnnouncement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUpdateChatroomAnnouncement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUpdateChatroomAnnouncement& from);
  void MergeFrom(const ReqUpdateChatroomAnnouncement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUpdateChatroomAnnouncement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUpdateChatroomAnnouncement";
  }
  protected:
  explicit ReqUpdateChatroomAnnouncement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatroomIdFieldNumber = 1,
    kAnnouncementFieldNumber = 2,
  };
  // bytes chatroom_id = 1;
  void clear_chatroom_id();
  const std::string& chatroom_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chatroom_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chatroom_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chatroom_id();
  void set_allocated_chatroom_id(std::string* chatroom_id);
  private:
  const std::string& _internal_chatroom_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatroom_id(const std::string& value);
  std::string* _internal_mutable_chatroom_id();
  public:

  // bytes announcement = 2;
  void clear_announcement();
  const std::string& announcement() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_announcement(ArgT0&& arg0, ArgT... args);
  std::string* mutable_announcement();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_announcement();
  void set_allocated_announcement(std::string* announcement);
  private:
  const std::string& _internal_announcement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_announcement(const std::string& value);
  std::string* _internal_mutable_announcement();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUpdateChatroomAnnouncement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatroom_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr announcement_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckUpdateChatroomAnnouncement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckUpdateChatroomAnnouncement) */ {
 public:
  inline AckUpdateChatroomAnnouncement() : AckUpdateChatroomAnnouncement(nullptr) {}
  ~AckUpdateChatroomAnnouncement() override;
  explicit constexpr AckUpdateChatroomAnnouncement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckUpdateChatroomAnnouncement(const AckUpdateChatroomAnnouncement& from);
  AckUpdateChatroomAnnouncement(AckUpdateChatroomAnnouncement&& from) noexcept
    : AckUpdateChatroomAnnouncement() {
    *this = ::std::move(from);
  }

  inline AckUpdateChatroomAnnouncement& operator=(const AckUpdateChatroomAnnouncement& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckUpdateChatroomAnnouncement& operator=(AckUpdateChatroomAnnouncement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckUpdateChatroomAnnouncement& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckUpdateChatroomAnnouncement* internal_default_instance() {
    return reinterpret_cast<const AckUpdateChatroomAnnouncement*>(
               &_AckUpdateChatroomAnnouncement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    262;

  friend void swap(AckUpdateChatroomAnnouncement& a, AckUpdateChatroomAnnouncement& b) {
    a.Swap(&b);
  }
  inline void Swap(AckUpdateChatroomAnnouncement* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckUpdateChatroomAnnouncement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckUpdateChatroomAnnouncement* New() const final {
    return new AckUpdateChatroomAnnouncement();
  }

  AckUpdateChatroomAnnouncement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckUpdateChatroomAnnouncement>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckUpdateChatroomAnnouncement& from);
  void MergeFrom(const AckUpdateChatroomAnnouncement& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckUpdateChatroomAnnouncement* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckUpdateChatroomAnnouncement";
  }
  protected:
  explicit AckUpdateChatroomAnnouncement(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatroomIdFieldNumber = 1,
    kAnnouncementFieldNumber = 2,
  };
  // bytes chatroom_id = 1;
  void clear_chatroom_id();
  const std::string& chatroom_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chatroom_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chatroom_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chatroom_id();
  void set_allocated_chatroom_id(std::string* chatroom_id);
  private:
  const std::string& _internal_chatroom_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chatroom_id(const std::string& value);
  std::string* _internal_mutable_chatroom_id();
  public:

  // bytes announcement = 2;
  void clear_announcement();
  const std::string& announcement() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_announcement(ArgT0&& arg0, ArgT... args);
  std::string* mutable_announcement();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_announcement();
  void set_allocated_announcement(std::string* announcement);
  private:
  const std::string& _internal_announcement() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_announcement(const std::string& value);
  std::string* _internal_mutable_announcement();
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckUpdateChatroomAnnouncement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chatroom_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr announcement_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCheckChatText final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCheckChatText) */ {
 public:
  inline ReqCheckChatText() : ReqCheckChatText(nullptr) {}
  ~ReqCheckChatText() override;
  explicit constexpr ReqCheckChatText(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCheckChatText(const ReqCheckChatText& from);
  ReqCheckChatText(ReqCheckChatText&& from) noexcept
    : ReqCheckChatText() {
    *this = ::std::move(from);
  }

  inline ReqCheckChatText& operator=(const ReqCheckChatText& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCheckChatText& operator=(ReqCheckChatText&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCheckChatText& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCheckChatText* internal_default_instance() {
    return reinterpret_cast<const ReqCheckChatText*>(
               &_ReqCheckChatText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    263;

  friend void swap(ReqCheckChatText& a, ReqCheckChatText& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCheckChatText* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCheckChatText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCheckChatText* New() const final {
    return new ReqCheckChatText();
  }

  ReqCheckChatText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCheckChatText>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCheckChatText& from);
  void MergeFrom(const ReqCheckChatText& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCheckChatText* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCheckChatText";
  }
  protected:
  explicit ReqCheckChatText(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatTextFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
    kOtherPlayerIdFieldNumber = 5,
    kWorldIdFieldNumber = 3,
    kChatTypeFieldNumber = 4,
  };
  // bytes chat_text = 2;
  void clear_chat_text();
  const std::string& chat_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_text();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_text();
  void set_allocated_chat_text(std::string* chat_text);
  private:
  const std::string& _internal_chat_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_text(const std::string& value);
  std::string* _internal_mutable_chat_text();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident other_player_id = 5;
  bool has_other_player_id() const;
  private:
  bool _internal_has_other_player_id() const;
  public:
  void clear_other_player_id();
  const ::KWMsg::Ident& other_player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_other_player_id();
  ::KWMsg::Ident* mutable_other_player_id();
  void set_allocated_other_player_id(::KWMsg::Ident* other_player_id);
  private:
  const ::KWMsg::Ident& _internal_other_player_id() const;
  ::KWMsg::Ident* _internal_mutable_other_player_id();
  public:
  void unsafe_arena_set_allocated_other_player_id(
      ::KWMsg::Ident* other_player_id);
  ::KWMsg::Ident* unsafe_arena_release_other_player_id();

  // int32 world_id = 3;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.EChatType chat_type = 4;
  void clear_chat_type();
  ::KWMsg::EChatType chat_type() const;
  void set_chat_type(::KWMsg::EChatType value);
  private:
  ::KWMsg::EChatType _internal_chat_type() const;
  void _internal_set_chat_type(::KWMsg::EChatType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCheckChatText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_text_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* other_player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  int chat_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCheckChatText final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCheckChatText) */ {
 public:
  inline AckCheckChatText() : AckCheckChatText(nullptr) {}
  ~AckCheckChatText() override;
  explicit constexpr AckCheckChatText(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCheckChatText(const AckCheckChatText& from);
  AckCheckChatText(AckCheckChatText&& from) noexcept
    : AckCheckChatText() {
    *this = ::std::move(from);
  }

  inline AckCheckChatText& operator=(const AckCheckChatText& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCheckChatText& operator=(AckCheckChatText&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCheckChatText& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCheckChatText* internal_default_instance() {
    return reinterpret_cast<const AckCheckChatText*>(
               &_AckCheckChatText_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    264;

  friend void swap(AckCheckChatText& a, AckCheckChatText& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCheckChatText* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCheckChatText* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCheckChatText* New() const final {
    return new AckCheckChatText();
  }

  AckCheckChatText* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCheckChatText>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCheckChatText& from);
  void MergeFrom(const AckCheckChatText& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCheckChatText* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCheckChatText";
  }
  protected:
  explicit AckCheckChatText(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatTextFieldNumber = 3,
    kPlayerIdFieldNumber = 2,
    kOtherPlayerIdFieldNumber = 7,
    kEventCodeFieldNumber = 1,
    kSuggestionFieldNumber = 4,
    kWorldIdFieldNumber = 5,
    kChatTypeFieldNumber = 6,
  };
  // bytes chat_text = 3;
  void clear_chat_text();
  const std::string& chat_text() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_text(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_text();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_text();
  void set_allocated_chat_text(std::string* chat_text);
  private:
  const std::string& _internal_chat_text() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_text(const std::string& value);
  std::string* _internal_mutable_chat_text();
  public:

  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident other_player_id = 7;
  bool has_other_player_id() const;
  private:
  bool _internal_has_other_player_id() const;
  public:
  void clear_other_player_id();
  const ::KWMsg::Ident& other_player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_other_player_id();
  ::KWMsg::Ident* mutable_other_player_id();
  void set_allocated_other_player_id(::KWMsg::Ident* other_player_id);
  private:
  const ::KWMsg::Ident& _internal_other_player_id() const;
  ::KWMsg::Ident* _internal_mutable_other_player_id();
  public:
  void unsafe_arena_set_allocated_other_player_id(
      ::KWMsg::Ident* other_player_id);
  ::KWMsg::Ident* unsafe_arena_release_other_player_id();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 suggestion = 4;
  void clear_suggestion();
  ::PROTOBUF_NAMESPACE_ID::int32 suggestion() const;
  void set_suggestion(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_suggestion() const;
  void _internal_set_suggestion(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 5;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.EChatType chat_type = 6;
  void clear_chat_type();
  ::KWMsg::EChatType chat_type() const;
  void set_chat_type(::KWMsg::EChatType value);
  private:
  ::KWMsg::EChatType _internal_chat_type() const;
  void _internal_set_chat_type(::KWMsg::EChatType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCheckChatText)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_text_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* other_player_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 suggestion_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  int chat_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqCreateChatGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqCreateChatGroup) */ {
 public:
  inline ReqCreateChatGroup() : ReqCreateChatGroup(nullptr) {}
  ~ReqCreateChatGroup() override;
  explicit constexpr ReqCreateChatGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqCreateChatGroup(const ReqCreateChatGroup& from);
  ReqCreateChatGroup(ReqCreateChatGroup&& from) noexcept
    : ReqCreateChatGroup() {
    *this = ::std::move(from);
  }

  inline ReqCreateChatGroup& operator=(const ReqCreateChatGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqCreateChatGroup& operator=(ReqCreateChatGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqCreateChatGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqCreateChatGroup* internal_default_instance() {
    return reinterpret_cast<const ReqCreateChatGroup*>(
               &_ReqCreateChatGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    265;

  friend void swap(ReqCreateChatGroup& a, ReqCreateChatGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqCreateChatGroup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqCreateChatGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqCreateChatGroup* New() const final {
    return new ReqCreateChatGroup();
  }

  ReqCreateChatGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqCreateChatGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqCreateChatGroup& from);
  void MergeFrom(const ReqCreateChatGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqCreateChatGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqCreateChatGroup";
  }
  protected:
  explicit ReqCreateChatGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatGroupNameFieldNumber = 2,
    kOwnerFieldNumber = 3,
    kExtraDataFieldNumber = 4,
    kChatGroupTypeFieldNumber = 1,
    kWorldIdFieldNumber = 5,
  };
  // bytes chat_group_name = 2;
  void clear_chat_group_name();
  const std::string& chat_group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_group_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_group_name();
  void set_allocated_chat_group_name(std::string* chat_group_name);
  private:
  const std::string& _internal_chat_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_group_name(const std::string& value);
  std::string* _internal_mutable_chat_group_name();
  public:

  // bytes owner = 3;
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // bytes extra_data = 4;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // int32 chat_group_type = 1;
  void clear_chat_group_type();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type() const;
  void set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_group_type() const;
  void _internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 5;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqCreateChatGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckCreateChatGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckCreateChatGroup) */ {
 public:
  inline AckCreateChatGroup() : AckCreateChatGroup(nullptr) {}
  ~AckCreateChatGroup() override;
  explicit constexpr AckCreateChatGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckCreateChatGroup(const AckCreateChatGroup& from);
  AckCreateChatGroup(AckCreateChatGroup&& from) noexcept
    : AckCreateChatGroup() {
    *this = ::std::move(from);
  }

  inline AckCreateChatGroup& operator=(const AckCreateChatGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckCreateChatGroup& operator=(AckCreateChatGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckCreateChatGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckCreateChatGroup* internal_default_instance() {
    return reinterpret_cast<const AckCreateChatGroup*>(
               &_AckCreateChatGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    266;

  friend void swap(AckCreateChatGroup& a, AckCreateChatGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(AckCreateChatGroup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckCreateChatGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckCreateChatGroup* New() const final {
    return new AckCreateChatGroup();
  }

  AckCreateChatGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckCreateChatGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckCreateChatGroup& from);
  void MergeFrom(const AckCreateChatGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckCreateChatGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckCreateChatGroup";
  }
  protected:
  explicit AckCreateChatGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatGroupNameFieldNumber = 3,
    kOwnerFieldNumber = 4,
    kExtraDataFieldNumber = 5,
    kChatGroupIdFieldNumber = 7,
    kEventCodeFieldNumber = 1,
    kChatGroupTypeFieldNumber = 2,
    kWorldIdFieldNumber = 6,
  };
  // bytes chat_group_name = 3;
  void clear_chat_group_name();
  const std::string& chat_group_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_group_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_group_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_group_name();
  void set_allocated_chat_group_name(std::string* chat_group_name);
  private:
  const std::string& _internal_chat_group_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_group_name(const std::string& value);
  std::string* _internal_mutable_chat_group_name();
  public:

  // bytes owner = 4;
  void clear_owner();
  const std::string& owner() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_owner(ArgT0&& arg0, ArgT... args);
  std::string* mutable_owner();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_owner();
  void set_allocated_owner(std::string* owner);
  private:
  const std::string& _internal_owner() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_owner(const std::string& value);
  std::string* _internal_mutable_owner();
  public:

  // bytes extra_data = 5;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // bytes chat_group_id = 7;
  void clear_chat_group_id();
  const std::string& chat_group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_group_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_group_id();
  void set_allocated_chat_group_id(std::string* chat_group_id);
  private:
  const std::string& _internal_chat_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_group_id(const std::string& value);
  std::string* _internal_mutable_chat_group_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 chat_group_type = 2;
  void clear_chat_group_type();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type() const;
  void set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_group_type() const;
  void _internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 6;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckCreateChatGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_group_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr owner_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_group_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqDeleteChatGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqDeleteChatGroup) */ {
 public:
  inline ReqDeleteChatGroup() : ReqDeleteChatGroup(nullptr) {}
  ~ReqDeleteChatGroup() override;
  explicit constexpr ReqDeleteChatGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDeleteChatGroup(const ReqDeleteChatGroup& from);
  ReqDeleteChatGroup(ReqDeleteChatGroup&& from) noexcept
    : ReqDeleteChatGroup() {
    *this = ::std::move(from);
  }

  inline ReqDeleteChatGroup& operator=(const ReqDeleteChatGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDeleteChatGroup& operator=(ReqDeleteChatGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDeleteChatGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDeleteChatGroup* internal_default_instance() {
    return reinterpret_cast<const ReqDeleteChatGroup*>(
               &_ReqDeleteChatGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    267;

  friend void swap(ReqDeleteChatGroup& a, ReqDeleteChatGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDeleteChatGroup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDeleteChatGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqDeleteChatGroup* New() const final {
    return new ReqDeleteChatGroup();
  }

  ReqDeleteChatGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDeleteChatGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqDeleteChatGroup& from);
  void MergeFrom(const ReqDeleteChatGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDeleteChatGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqDeleteChatGroup";
  }
  protected:
  explicit ReqDeleteChatGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatGroupIdFieldNumber = 1,
    kExtraDataFieldNumber = 3,
    kChatGroupTypeFieldNumber = 2,
    kWorldIdFieldNumber = 4,
  };
  // bytes chat_group_id = 1;
  void clear_chat_group_id();
  const std::string& chat_group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_group_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_group_id();
  void set_allocated_chat_group_id(std::string* chat_group_id);
  private:
  const std::string& _internal_chat_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_group_id(const std::string& value);
  std::string* _internal_mutable_chat_group_id();
  public:

  // bytes extra_data = 3;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // int32 chat_group_type = 2;
  void clear_chat_group_type();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type() const;
  void set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_group_type() const;
  void _internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 4;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqDeleteChatGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckDeleteChatGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckDeleteChatGroup) */ {
 public:
  inline AckDeleteChatGroup() : AckDeleteChatGroup(nullptr) {}
  ~AckDeleteChatGroup() override;
  explicit constexpr AckDeleteChatGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckDeleteChatGroup(const AckDeleteChatGroup& from);
  AckDeleteChatGroup(AckDeleteChatGroup&& from) noexcept
    : AckDeleteChatGroup() {
    *this = ::std::move(from);
  }

  inline AckDeleteChatGroup& operator=(const AckDeleteChatGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckDeleteChatGroup& operator=(AckDeleteChatGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckDeleteChatGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckDeleteChatGroup* internal_default_instance() {
    return reinterpret_cast<const AckDeleteChatGroup*>(
               &_AckDeleteChatGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    268;

  friend void swap(AckDeleteChatGroup& a, AckDeleteChatGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(AckDeleteChatGroup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckDeleteChatGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckDeleteChatGroup* New() const final {
    return new AckDeleteChatGroup();
  }

  AckDeleteChatGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckDeleteChatGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckDeleteChatGroup& from);
  void MergeFrom(const AckDeleteChatGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckDeleteChatGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckDeleteChatGroup";
  }
  protected:
  explicit AckDeleteChatGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatGroupIdFieldNumber = 2,
    kExtraDataFieldNumber = 4,
    kEventCodeFieldNumber = 1,
    kChatGroupTypeFieldNumber = 3,
    kWorldIdFieldNumber = 5,
  };
  // bytes chat_group_id = 2;
  void clear_chat_group_id();
  const std::string& chat_group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_group_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_group_id();
  void set_allocated_chat_group_id(std::string* chat_group_id);
  private:
  const std::string& _internal_chat_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_group_id(const std::string& value);
  std::string* _internal_mutable_chat_group_id();
  public:

  // bytes extra_data = 4;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 chat_group_type = 3;
  void clear_chat_group_type();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type() const;
  void set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_group_type() const;
  void _internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 5;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckDeleteChatGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqTransferChatGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqTransferChatGroup) */ {
 public:
  inline ReqTransferChatGroup() : ReqTransferChatGroup(nullptr) {}
  ~ReqTransferChatGroup() override;
  explicit constexpr ReqTransferChatGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqTransferChatGroup(const ReqTransferChatGroup& from);
  ReqTransferChatGroup(ReqTransferChatGroup&& from) noexcept
    : ReqTransferChatGroup() {
    *this = ::std::move(from);
  }

  inline ReqTransferChatGroup& operator=(const ReqTransferChatGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqTransferChatGroup& operator=(ReqTransferChatGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqTransferChatGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqTransferChatGroup* internal_default_instance() {
    return reinterpret_cast<const ReqTransferChatGroup*>(
               &_ReqTransferChatGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    269;

  friend void swap(ReqTransferChatGroup& a, ReqTransferChatGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqTransferChatGroup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqTransferChatGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqTransferChatGroup* New() const final {
    return new ReqTransferChatGroup();
  }

  ReqTransferChatGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqTransferChatGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqTransferChatGroup& from);
  void MergeFrom(const ReqTransferChatGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqTransferChatGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqTransferChatGroup";
  }
  protected:
  explicit ReqTransferChatGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatGroupIdFieldNumber = 1,
    kExtraDataFieldNumber = 3,
    kUserNameFieldNumber = 4,
    kChatGroupTypeFieldNumber = 2,
    kWorldIdFieldNumber = 5,
  };
  // bytes chat_group_id = 1;
  void clear_chat_group_id();
  const std::string& chat_group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_group_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_group_id();
  void set_allocated_chat_group_id(std::string* chat_group_id);
  private:
  const std::string& _internal_chat_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_group_id(const std::string& value);
  std::string* _internal_mutable_chat_group_id();
  public:

  // bytes extra_data = 3;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // bytes user_name = 4;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int32 chat_group_type = 2;
  void clear_chat_group_type();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type() const;
  void set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_group_type() const;
  void _internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 5;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqTransferChatGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckTransferChatGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckTransferChatGroup) */ {
 public:
  inline AckTransferChatGroup() : AckTransferChatGroup(nullptr) {}
  ~AckTransferChatGroup() override;
  explicit constexpr AckTransferChatGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckTransferChatGroup(const AckTransferChatGroup& from);
  AckTransferChatGroup(AckTransferChatGroup&& from) noexcept
    : AckTransferChatGroup() {
    *this = ::std::move(from);
  }

  inline AckTransferChatGroup& operator=(const AckTransferChatGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckTransferChatGroup& operator=(AckTransferChatGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckTransferChatGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckTransferChatGroup* internal_default_instance() {
    return reinterpret_cast<const AckTransferChatGroup*>(
               &_AckTransferChatGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    270;

  friend void swap(AckTransferChatGroup& a, AckTransferChatGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(AckTransferChatGroup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckTransferChatGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckTransferChatGroup* New() const final {
    return new AckTransferChatGroup();
  }

  AckTransferChatGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckTransferChatGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckTransferChatGroup& from);
  void MergeFrom(const AckTransferChatGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckTransferChatGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckTransferChatGroup";
  }
  protected:
  explicit AckTransferChatGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatGroupIdFieldNumber = 2,
    kExtraDataFieldNumber = 4,
    kUserNameFieldNumber = 5,
    kEventCodeFieldNumber = 1,
    kChatGroupTypeFieldNumber = 3,
    kWorldIdFieldNumber = 6,
  };
  // bytes chat_group_id = 2;
  void clear_chat_group_id();
  const std::string& chat_group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_group_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_group_id();
  void set_allocated_chat_group_id(std::string* chat_group_id);
  private:
  const std::string& _internal_chat_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_group_id(const std::string& value);
  std::string* _internal_mutable_chat_group_id();
  public:

  // bytes extra_data = 4;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // bytes user_name = 5;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 chat_group_type = 3;
  void clear_chat_group_type();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type() const;
  void set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_group_type() const;
  void _internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 6;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckTransferChatGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqAddChatGroupUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAddChatGroupUser) */ {
 public:
  inline ReqAddChatGroupUser() : ReqAddChatGroupUser(nullptr) {}
  ~ReqAddChatGroupUser() override;
  explicit constexpr ReqAddChatGroupUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAddChatGroupUser(const ReqAddChatGroupUser& from);
  ReqAddChatGroupUser(ReqAddChatGroupUser&& from) noexcept
    : ReqAddChatGroupUser() {
    *this = ::std::move(from);
  }

  inline ReqAddChatGroupUser& operator=(const ReqAddChatGroupUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAddChatGroupUser& operator=(ReqAddChatGroupUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAddChatGroupUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAddChatGroupUser* internal_default_instance() {
    return reinterpret_cast<const ReqAddChatGroupUser*>(
               &_ReqAddChatGroupUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    271;

  friend void swap(ReqAddChatGroupUser& a, ReqAddChatGroupUser& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAddChatGroupUser* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAddChatGroupUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAddChatGroupUser* New() const final {
    return new ReqAddChatGroupUser();
  }

  ReqAddChatGroupUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAddChatGroupUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAddChatGroupUser& from);
  void MergeFrom(const ReqAddChatGroupUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAddChatGroupUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAddChatGroupUser";
  }
  protected:
  explicit ReqAddChatGroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatGroupIdFieldNumber = 1,
    kExtraDataFieldNumber = 3,
    kUserNameFieldNumber = 4,
    kChatGroupTypeFieldNumber = 2,
    kWorldIdFieldNumber = 5,
  };
  // bytes chat_group_id = 1;
  void clear_chat_group_id();
  const std::string& chat_group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_group_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_group_id();
  void set_allocated_chat_group_id(std::string* chat_group_id);
  private:
  const std::string& _internal_chat_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_group_id(const std::string& value);
  std::string* _internal_mutable_chat_group_id();
  public:

  // bytes extra_data = 3;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // bytes user_name = 4;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int32 chat_group_type = 2;
  void clear_chat_group_type();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type() const;
  void set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_group_type() const;
  void _internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 5;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAddChatGroupUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckAddChatGroupUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckAddChatGroupUser) */ {
 public:
  inline AckAddChatGroupUser() : AckAddChatGroupUser(nullptr) {}
  ~AckAddChatGroupUser() override;
  explicit constexpr AckAddChatGroupUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckAddChatGroupUser(const AckAddChatGroupUser& from);
  AckAddChatGroupUser(AckAddChatGroupUser&& from) noexcept
    : AckAddChatGroupUser() {
    *this = ::std::move(from);
  }

  inline AckAddChatGroupUser& operator=(const AckAddChatGroupUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckAddChatGroupUser& operator=(AckAddChatGroupUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckAddChatGroupUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckAddChatGroupUser* internal_default_instance() {
    return reinterpret_cast<const AckAddChatGroupUser*>(
               &_AckAddChatGroupUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    272;

  friend void swap(AckAddChatGroupUser& a, AckAddChatGroupUser& b) {
    a.Swap(&b);
  }
  inline void Swap(AckAddChatGroupUser* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckAddChatGroupUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckAddChatGroupUser* New() const final {
    return new AckAddChatGroupUser();
  }

  AckAddChatGroupUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckAddChatGroupUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckAddChatGroupUser& from);
  void MergeFrom(const AckAddChatGroupUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckAddChatGroupUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckAddChatGroupUser";
  }
  protected:
  explicit AckAddChatGroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatGroupIdFieldNumber = 2,
    kExtraDataFieldNumber = 4,
    kUserNameFieldNumber = 5,
    kEventCodeFieldNumber = 1,
    kChatGroupTypeFieldNumber = 3,
    kWorldIdFieldNumber = 6,
  };
  // bytes chat_group_id = 2;
  void clear_chat_group_id();
  const std::string& chat_group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_group_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_group_id();
  void set_allocated_chat_group_id(std::string* chat_group_id);
  private:
  const std::string& _internal_chat_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_group_id(const std::string& value);
  std::string* _internal_mutable_chat_group_id();
  public:

  // bytes extra_data = 4;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // bytes user_name = 5;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 chat_group_type = 3;
  void clear_chat_group_type();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type() const;
  void set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_group_type() const;
  void _internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 6;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckAddChatGroupUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqDeleteChatGroupUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqDeleteChatGroupUser) */ {
 public:
  inline ReqDeleteChatGroupUser() : ReqDeleteChatGroupUser(nullptr) {}
  ~ReqDeleteChatGroupUser() override;
  explicit constexpr ReqDeleteChatGroupUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqDeleteChatGroupUser(const ReqDeleteChatGroupUser& from);
  ReqDeleteChatGroupUser(ReqDeleteChatGroupUser&& from) noexcept
    : ReqDeleteChatGroupUser() {
    *this = ::std::move(from);
  }

  inline ReqDeleteChatGroupUser& operator=(const ReqDeleteChatGroupUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqDeleteChatGroupUser& operator=(ReqDeleteChatGroupUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqDeleteChatGroupUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqDeleteChatGroupUser* internal_default_instance() {
    return reinterpret_cast<const ReqDeleteChatGroupUser*>(
               &_ReqDeleteChatGroupUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    273;

  friend void swap(ReqDeleteChatGroupUser& a, ReqDeleteChatGroupUser& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqDeleteChatGroupUser* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqDeleteChatGroupUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqDeleteChatGroupUser* New() const final {
    return new ReqDeleteChatGroupUser();
  }

  ReqDeleteChatGroupUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqDeleteChatGroupUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqDeleteChatGroupUser& from);
  void MergeFrom(const ReqDeleteChatGroupUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqDeleteChatGroupUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqDeleteChatGroupUser";
  }
  protected:
  explicit ReqDeleteChatGroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatGroupIdFieldNumber = 1,
    kExtraDataFieldNumber = 3,
    kUserNameFieldNumber = 4,
    kChatGroupTypeFieldNumber = 2,
    kWorldIdFieldNumber = 5,
  };
  // bytes chat_group_id = 1;
  void clear_chat_group_id();
  const std::string& chat_group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_group_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_group_id();
  void set_allocated_chat_group_id(std::string* chat_group_id);
  private:
  const std::string& _internal_chat_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_group_id(const std::string& value);
  std::string* _internal_mutable_chat_group_id();
  public:

  // bytes extra_data = 3;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // bytes user_name = 4;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // int32 chat_group_type = 2;
  void clear_chat_group_type();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type() const;
  void set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_group_type() const;
  void _internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 5;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqDeleteChatGroupUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckDeleteChatGroupUser final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckDeleteChatGroupUser) */ {
 public:
  inline AckDeleteChatGroupUser() : AckDeleteChatGroupUser(nullptr) {}
  ~AckDeleteChatGroupUser() override;
  explicit constexpr AckDeleteChatGroupUser(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckDeleteChatGroupUser(const AckDeleteChatGroupUser& from);
  AckDeleteChatGroupUser(AckDeleteChatGroupUser&& from) noexcept
    : AckDeleteChatGroupUser() {
    *this = ::std::move(from);
  }

  inline AckDeleteChatGroupUser& operator=(const AckDeleteChatGroupUser& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckDeleteChatGroupUser& operator=(AckDeleteChatGroupUser&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckDeleteChatGroupUser& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckDeleteChatGroupUser* internal_default_instance() {
    return reinterpret_cast<const AckDeleteChatGroupUser*>(
               &_AckDeleteChatGroupUser_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    274;

  friend void swap(AckDeleteChatGroupUser& a, AckDeleteChatGroupUser& b) {
    a.Swap(&b);
  }
  inline void Swap(AckDeleteChatGroupUser* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckDeleteChatGroupUser* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckDeleteChatGroupUser* New() const final {
    return new AckDeleteChatGroupUser();
  }

  AckDeleteChatGroupUser* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckDeleteChatGroupUser>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckDeleteChatGroupUser& from);
  void MergeFrom(const AckDeleteChatGroupUser& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckDeleteChatGroupUser* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckDeleteChatGroupUser";
  }
  protected:
  explicit AckDeleteChatGroupUser(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChatGroupIdFieldNumber = 2,
    kExtraDataFieldNumber = 4,
    kUserNameFieldNumber = 5,
    kEventCodeFieldNumber = 1,
    kChatGroupTypeFieldNumber = 3,
    kWorldIdFieldNumber = 6,
  };
  // bytes chat_group_id = 2;
  void clear_chat_group_id();
  const std::string& chat_group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chat_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chat_group_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_chat_group_id();
  void set_allocated_chat_group_id(std::string* chat_group_id);
  private:
  const std::string& _internal_chat_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chat_group_id(const std::string& value);
  std::string* _internal_mutable_chat_group_id();
  public:

  // bytes extra_data = 4;
  void clear_extra_data();
  const std::string& extra_data() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_extra_data(ArgT0&& arg0, ArgT... args);
  std::string* mutable_extra_data();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_extra_data();
  void set_allocated_extra_data(std::string* extra_data);
  private:
  const std::string& _internal_extra_data() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_extra_data(const std::string& value);
  std::string* _internal_mutable_extra_data();
  public:

  // bytes user_name = 5;
  void clear_user_name();
  const std::string& user_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_user_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_user_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_user_name();
  void set_allocated_user_name(std::string* user_name);
  private:
  const std::string& _internal_user_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_user_name(const std::string& value);
  std::string* _internal_mutable_user_name();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 chat_group_type = 3;
  void clear_chat_group_type();
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type() const;
  void set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_chat_group_type() const;
  void _internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 world_id = 6;
  void clear_world_id();
  ::PROTOBUF_NAMESPACE_ID::int32 world_id() const;
  void set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_world_id() const;
  void _internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckDeleteChatGroupUser)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chat_group_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr extra_data_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr user_name_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 chat_group_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 world_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqSwitchChatBubble final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqSwitchChatBubble) */ {
 public:
  inline ReqSwitchChatBubble() : ReqSwitchChatBubble(nullptr) {}
  ~ReqSwitchChatBubble() override;
  explicit constexpr ReqSwitchChatBubble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqSwitchChatBubble(const ReqSwitchChatBubble& from);
  ReqSwitchChatBubble(ReqSwitchChatBubble&& from) noexcept
    : ReqSwitchChatBubble() {
    *this = ::std::move(from);
  }

  inline ReqSwitchChatBubble& operator=(const ReqSwitchChatBubble& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqSwitchChatBubble& operator=(ReqSwitchChatBubble&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqSwitchChatBubble& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqSwitchChatBubble* internal_default_instance() {
    return reinterpret_cast<const ReqSwitchChatBubble*>(
               &_ReqSwitchChatBubble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    275;

  friend void swap(ReqSwitchChatBubble& a, ReqSwitchChatBubble& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqSwitchChatBubble* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqSwitchChatBubble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqSwitchChatBubble* New() const final {
    return new ReqSwitchChatBubble();
  }

  ReqSwitchChatBubble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqSwitchChatBubble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqSwitchChatBubble& from);
  void MergeFrom(const ReqSwitchChatBubble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqSwitchChatBubble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqSwitchChatBubble";
  }
  protected:
  explicit ReqSwitchChatBubble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBubbleIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes bubble_id = 2;
  void clear_bubble_id();
  const std::string& bubble_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bubble_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bubble_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_bubble_id();
  void set_allocated_bubble_id(std::string* bubble_id);
  private:
  const std::string& _internal_bubble_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bubble_id(const std::string& value);
  std::string* _internal_mutable_bubble_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqSwitchChatBubble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bubble_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckSwitchChatBubble final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckSwitchChatBubble) */ {
 public:
  inline AckSwitchChatBubble() : AckSwitchChatBubble(nullptr) {}
  ~AckSwitchChatBubble() override;
  explicit constexpr AckSwitchChatBubble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckSwitchChatBubble(const AckSwitchChatBubble& from);
  AckSwitchChatBubble(AckSwitchChatBubble&& from) noexcept
    : AckSwitchChatBubble() {
    *this = ::std::move(from);
  }

  inline AckSwitchChatBubble& operator=(const AckSwitchChatBubble& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckSwitchChatBubble& operator=(AckSwitchChatBubble&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckSwitchChatBubble& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckSwitchChatBubble* internal_default_instance() {
    return reinterpret_cast<const AckSwitchChatBubble*>(
               &_AckSwitchChatBubble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    276;

  friend void swap(AckSwitchChatBubble& a, AckSwitchChatBubble& b) {
    a.Swap(&b);
  }
  inline void Swap(AckSwitchChatBubble* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckSwitchChatBubble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckSwitchChatBubble* New() const final {
    return new AckSwitchChatBubble();
  }

  AckSwitchChatBubble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckSwitchChatBubble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckSwitchChatBubble& from);
  void MergeFrom(const AckSwitchChatBubble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckSwitchChatBubble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckSwitchChatBubble";
  }
  protected:
  explicit AckSwitchChatBubble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBubbleIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // bytes bubble_id = 2;
  void clear_bubble_id();
  const std::string& bubble_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bubble_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bubble_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_bubble_id();
  void set_allocated_bubble_id(std::string* bubble_id);
  private:
  const std::string& _internal_bubble_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bubble_id(const std::string& value);
  std::string* _internal_mutable_bubble_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckSwitchChatBubble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bubble_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqUnlockChatBubble final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUnlockChatBubble) */ {
 public:
  inline ReqUnlockChatBubble() : ReqUnlockChatBubble(nullptr) {}
  ~ReqUnlockChatBubble() override;
  explicit constexpr ReqUnlockChatBubble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUnlockChatBubble(const ReqUnlockChatBubble& from);
  ReqUnlockChatBubble(ReqUnlockChatBubble&& from) noexcept
    : ReqUnlockChatBubble() {
    *this = ::std::move(from);
  }

  inline ReqUnlockChatBubble& operator=(const ReqUnlockChatBubble& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUnlockChatBubble& operator=(ReqUnlockChatBubble&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUnlockChatBubble& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUnlockChatBubble* internal_default_instance() {
    return reinterpret_cast<const ReqUnlockChatBubble*>(
               &_ReqUnlockChatBubble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    277;

  friend void swap(ReqUnlockChatBubble& a, ReqUnlockChatBubble& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUnlockChatBubble* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUnlockChatBubble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUnlockChatBubble* New() const final {
    return new ReqUnlockChatBubble();
  }

  ReqUnlockChatBubble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUnlockChatBubble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUnlockChatBubble& from);
  void MergeFrom(const ReqUnlockChatBubble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUnlockChatBubble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUnlockChatBubble";
  }
  protected:
  explicit ReqUnlockChatBubble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBubbleIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes bubble_id = 2;
  void clear_bubble_id();
  const std::string& bubble_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bubble_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bubble_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_bubble_id();
  void set_allocated_bubble_id(std::string* bubble_id);
  private:
  const std::string& _internal_bubble_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bubble_id(const std::string& value);
  std::string* _internal_mutable_bubble_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUnlockChatBubble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bubble_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckUnlockChatBubble final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckUnlockChatBubble) */ {
 public:
  inline AckUnlockChatBubble() : AckUnlockChatBubble(nullptr) {}
  ~AckUnlockChatBubble() override;
  explicit constexpr AckUnlockChatBubble(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckUnlockChatBubble(const AckUnlockChatBubble& from);
  AckUnlockChatBubble(AckUnlockChatBubble&& from) noexcept
    : AckUnlockChatBubble() {
    *this = ::std::move(from);
  }

  inline AckUnlockChatBubble& operator=(const AckUnlockChatBubble& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckUnlockChatBubble& operator=(AckUnlockChatBubble&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckUnlockChatBubble& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckUnlockChatBubble* internal_default_instance() {
    return reinterpret_cast<const AckUnlockChatBubble*>(
               &_AckUnlockChatBubble_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    278;

  friend void swap(AckUnlockChatBubble& a, AckUnlockChatBubble& b) {
    a.Swap(&b);
  }
  inline void Swap(AckUnlockChatBubble* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckUnlockChatBubble* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckUnlockChatBubble* New() const final {
    return new AckUnlockChatBubble();
  }

  AckUnlockChatBubble* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckUnlockChatBubble>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckUnlockChatBubble& from);
  void MergeFrom(const AckUnlockChatBubble& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckUnlockChatBubble* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckUnlockChatBubble";
  }
  protected:
  explicit AckUnlockChatBubble(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBubbleIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // bytes bubble_id = 2;
  void clear_bubble_id();
  const std::string& bubble_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_bubble_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_bubble_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_bubble_id();
  void set_allocated_bubble_id(std::string* bubble_id);
  private:
  const std::string& _internal_bubble_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_bubble_id(const std::string& value);
  std::string* _internal_mutable_bubble_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckUnlockChatBubble)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr bubble_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqUnlockChatMemeGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUnlockChatMemeGroup) */ {
 public:
  inline ReqUnlockChatMemeGroup() : ReqUnlockChatMemeGroup(nullptr) {}
  ~ReqUnlockChatMemeGroup() override;
  explicit constexpr ReqUnlockChatMemeGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUnlockChatMemeGroup(const ReqUnlockChatMemeGroup& from);
  ReqUnlockChatMemeGroup(ReqUnlockChatMemeGroup&& from) noexcept
    : ReqUnlockChatMemeGroup() {
    *this = ::std::move(from);
  }

  inline ReqUnlockChatMemeGroup& operator=(const ReqUnlockChatMemeGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUnlockChatMemeGroup& operator=(ReqUnlockChatMemeGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUnlockChatMemeGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUnlockChatMemeGroup* internal_default_instance() {
    return reinterpret_cast<const ReqUnlockChatMemeGroup*>(
               &_ReqUnlockChatMemeGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    279;

  friend void swap(ReqUnlockChatMemeGroup& a, ReqUnlockChatMemeGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUnlockChatMemeGroup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUnlockChatMemeGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUnlockChatMemeGroup* New() const final {
    return new ReqUnlockChatMemeGroup();
  }

  ReqUnlockChatMemeGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUnlockChatMemeGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUnlockChatMemeGroup& from);
  void MergeFrom(const ReqUnlockChatMemeGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUnlockChatMemeGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUnlockChatMemeGroup";
  }
  protected:
  explicit ReqUnlockChatMemeGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemeGroupIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes meme_group_id = 2;
  void clear_meme_group_id();
  const std::string& meme_group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meme_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meme_group_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_meme_group_id();
  void set_allocated_meme_group_id(std::string* meme_group_id);
  private:
  const std::string& _internal_meme_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meme_group_id(const std::string& value);
  std::string* _internal_mutable_meme_group_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUnlockChatMemeGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meme_group_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckUnlockChatMemeGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckUnlockChatMemeGroup) */ {
 public:
  inline AckUnlockChatMemeGroup() : AckUnlockChatMemeGroup(nullptr) {}
  ~AckUnlockChatMemeGroup() override;
  explicit constexpr AckUnlockChatMemeGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckUnlockChatMemeGroup(const AckUnlockChatMemeGroup& from);
  AckUnlockChatMemeGroup(AckUnlockChatMemeGroup&& from) noexcept
    : AckUnlockChatMemeGroup() {
    *this = ::std::move(from);
  }

  inline AckUnlockChatMemeGroup& operator=(const AckUnlockChatMemeGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckUnlockChatMemeGroup& operator=(AckUnlockChatMemeGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckUnlockChatMemeGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckUnlockChatMemeGroup* internal_default_instance() {
    return reinterpret_cast<const AckUnlockChatMemeGroup*>(
               &_AckUnlockChatMemeGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    280;

  friend void swap(AckUnlockChatMemeGroup& a, AckUnlockChatMemeGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(AckUnlockChatMemeGroup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckUnlockChatMemeGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckUnlockChatMemeGroup* New() const final {
    return new AckUnlockChatMemeGroup();
  }

  AckUnlockChatMemeGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckUnlockChatMemeGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckUnlockChatMemeGroup& from);
  void MergeFrom(const AckUnlockChatMemeGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckUnlockChatMemeGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckUnlockChatMemeGroup";
  }
  protected:
  explicit AckUnlockChatMemeGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemeGroupIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // bytes meme_group_id = 2;
  void clear_meme_group_id();
  const std::string& meme_group_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meme_group_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meme_group_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_meme_group_id();
  void set_allocated_meme_group_id(std::string* meme_group_id);
  private:
  const std::string& _internal_meme_group_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meme_group_id(const std::string& value);
  std::string* _internal_mutable_meme_group_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckUnlockChatMemeGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meme_group_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqUnlockChatMeme final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqUnlockChatMeme) */ {
 public:
  inline ReqUnlockChatMeme() : ReqUnlockChatMeme(nullptr) {}
  ~ReqUnlockChatMeme() override;
  explicit constexpr ReqUnlockChatMeme(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqUnlockChatMeme(const ReqUnlockChatMeme& from);
  ReqUnlockChatMeme(ReqUnlockChatMeme&& from) noexcept
    : ReqUnlockChatMeme() {
    *this = ::std::move(from);
  }

  inline ReqUnlockChatMeme& operator=(const ReqUnlockChatMeme& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqUnlockChatMeme& operator=(ReqUnlockChatMeme&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqUnlockChatMeme& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqUnlockChatMeme* internal_default_instance() {
    return reinterpret_cast<const ReqUnlockChatMeme*>(
               &_ReqUnlockChatMeme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    281;

  friend void swap(ReqUnlockChatMeme& a, ReqUnlockChatMeme& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqUnlockChatMeme* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqUnlockChatMeme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqUnlockChatMeme* New() const final {
    return new ReqUnlockChatMeme();
  }

  ReqUnlockChatMeme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqUnlockChatMeme>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqUnlockChatMeme& from);
  void MergeFrom(const ReqUnlockChatMeme& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqUnlockChatMeme* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqUnlockChatMeme";
  }
  protected:
  explicit ReqUnlockChatMeme(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemeIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes meme_id = 2;
  void clear_meme_id();
  const std::string& meme_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meme_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meme_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_meme_id();
  void set_allocated_meme_id(std::string* meme_id);
  private:
  const std::string& _internal_meme_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meme_id(const std::string& value);
  std::string* _internal_mutable_meme_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqUnlockChatMeme)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meme_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckUnlockChatMeme final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckUnlockChatMeme) */ {
 public:
  inline AckUnlockChatMeme() : AckUnlockChatMeme(nullptr) {}
  ~AckUnlockChatMeme() override;
  explicit constexpr AckUnlockChatMeme(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckUnlockChatMeme(const AckUnlockChatMeme& from);
  AckUnlockChatMeme(AckUnlockChatMeme&& from) noexcept
    : AckUnlockChatMeme() {
    *this = ::std::move(from);
  }

  inline AckUnlockChatMeme& operator=(const AckUnlockChatMeme& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckUnlockChatMeme& operator=(AckUnlockChatMeme&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckUnlockChatMeme& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckUnlockChatMeme* internal_default_instance() {
    return reinterpret_cast<const AckUnlockChatMeme*>(
               &_AckUnlockChatMeme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    282;

  friend void swap(AckUnlockChatMeme& a, AckUnlockChatMeme& b) {
    a.Swap(&b);
  }
  inline void Swap(AckUnlockChatMeme* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckUnlockChatMeme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckUnlockChatMeme* New() const final {
    return new AckUnlockChatMeme();
  }

  AckUnlockChatMeme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckUnlockChatMeme>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckUnlockChatMeme& from);
  void MergeFrom(const AckUnlockChatMeme& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckUnlockChatMeme* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckUnlockChatMeme";
  }
  protected:
  explicit AckUnlockChatMeme(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMemeIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // bytes meme_id = 2;
  void clear_meme_id();
  const std::string& meme_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_meme_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_meme_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_meme_id();
  void set_allocated_meme_id(std::string* meme_id);
  private:
  const std::string& _internal_meme_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_meme_id(const std::string& value);
  std::string* _internal_mutable_meme_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckUnlockChatMeme)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr meme_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerHonorPointChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncPlayerHonorPointChanged) */ {
 public:
  inline SyncPlayerHonorPointChanged() : SyncPlayerHonorPointChanged(nullptr) {}
  ~SyncPlayerHonorPointChanged() override;
  explicit constexpr SyncPlayerHonorPointChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayerHonorPointChanged(const SyncPlayerHonorPointChanged& from);
  SyncPlayerHonorPointChanged(SyncPlayerHonorPointChanged&& from) noexcept
    : SyncPlayerHonorPointChanged() {
    *this = ::std::move(from);
  }

  inline SyncPlayerHonorPointChanged& operator=(const SyncPlayerHonorPointChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerHonorPointChanged& operator=(SyncPlayerHonorPointChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayerHonorPointChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayerHonorPointChanged* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerHonorPointChanged*>(
               &_SyncPlayerHonorPointChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    283;

  friend void swap(SyncPlayerHonorPointChanged& a, SyncPlayerHonorPointChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerHonorPointChanged* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayerHonorPointChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerHonorPointChanged* New() const final {
    return new SyncPlayerHonorPointChanged();
  }

  SyncPlayerHonorPointChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerHonorPointChanged>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerHonorPointChanged& from);
  void MergeFrom(const SyncPlayerHonorPointChanged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerHonorPointChanged* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncPlayerHonorPointChanged";
  }
  protected:
  explicit SyncPlayerHonorPointChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kHonorPointFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 honor_point = 2;
  void clear_honor_point();
  ::PROTOBUF_NAMESPACE_ID::int32 honor_point() const;
  void set_honor_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_honor_point() const;
  void _internal_set_honor_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncPlayerHonorPointChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 honor_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SavePlayerHonorPointRanking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SavePlayerHonorPointRanking) */ {
 public:
  inline SavePlayerHonorPointRanking() : SavePlayerHonorPointRanking(nullptr) {}
  ~SavePlayerHonorPointRanking() override;
  explicit constexpr SavePlayerHonorPointRanking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SavePlayerHonorPointRanking(const SavePlayerHonorPointRanking& from);
  SavePlayerHonorPointRanking(SavePlayerHonorPointRanking&& from) noexcept
    : SavePlayerHonorPointRanking() {
    *this = ::std::move(from);
  }

  inline SavePlayerHonorPointRanking& operator=(const SavePlayerHonorPointRanking& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavePlayerHonorPointRanking& operator=(SavePlayerHonorPointRanking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SavePlayerHonorPointRanking& default_instance() {
    return *internal_default_instance();
  }
  static inline const SavePlayerHonorPointRanking* internal_default_instance() {
    return reinterpret_cast<const SavePlayerHonorPointRanking*>(
               &_SavePlayerHonorPointRanking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    284;

  friend void swap(SavePlayerHonorPointRanking& a, SavePlayerHonorPointRanking& b) {
    a.Swap(&b);
  }
  inline void Swap(SavePlayerHonorPointRanking* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SavePlayerHonorPointRanking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SavePlayerHonorPointRanking* New() const final {
    return new SavePlayerHonorPointRanking();
  }

  SavePlayerHonorPointRanking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SavePlayerHonorPointRanking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SavePlayerHonorPointRanking& from);
  void MergeFrom(const SavePlayerHonorPointRanking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SavePlayerHonorPointRanking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SavePlayerHonorPointRanking";
  }
  protected:
  explicit SavePlayerHonorPointRanking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int64 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SavePlayerHonorPointRanking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncPlayerStrategyPointChanged final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncPlayerStrategyPointChanged) */ {
 public:
  inline SyncPlayerStrategyPointChanged() : SyncPlayerStrategyPointChanged(nullptr) {}
  ~SyncPlayerStrategyPointChanged() override;
  explicit constexpr SyncPlayerStrategyPointChanged(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncPlayerStrategyPointChanged(const SyncPlayerStrategyPointChanged& from);
  SyncPlayerStrategyPointChanged(SyncPlayerStrategyPointChanged&& from) noexcept
    : SyncPlayerStrategyPointChanged() {
    *this = ::std::move(from);
  }

  inline SyncPlayerStrategyPointChanged& operator=(const SyncPlayerStrategyPointChanged& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncPlayerStrategyPointChanged& operator=(SyncPlayerStrategyPointChanged&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncPlayerStrategyPointChanged& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncPlayerStrategyPointChanged* internal_default_instance() {
    return reinterpret_cast<const SyncPlayerStrategyPointChanged*>(
               &_SyncPlayerStrategyPointChanged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    285;

  friend void swap(SyncPlayerStrategyPointChanged& a, SyncPlayerStrategyPointChanged& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncPlayerStrategyPointChanged* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncPlayerStrategyPointChanged* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncPlayerStrategyPointChanged* New() const final {
    return new SyncPlayerStrategyPointChanged();
  }

  SyncPlayerStrategyPointChanged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncPlayerStrategyPointChanged>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncPlayerStrategyPointChanged& from);
  void MergeFrom(const SyncPlayerStrategyPointChanged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncPlayerStrategyPointChanged* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncPlayerStrategyPointChanged";
  }
  protected:
  explicit SyncPlayerStrategyPointChanged(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kStrategyPointFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 strategy_point = 2;
  void clear_strategy_point();
  ::PROTOBUF_NAMESPACE_ID::int32 strategy_point() const;
  void set_strategy_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_strategy_point() const;
  void _internal_set_strategy_point(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncPlayerStrategyPointChanged)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 strategy_point_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SavePlayerStrategyPointRanking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SavePlayerStrategyPointRanking) */ {
 public:
  inline SavePlayerStrategyPointRanking() : SavePlayerStrategyPointRanking(nullptr) {}
  ~SavePlayerStrategyPointRanking() override;
  explicit constexpr SavePlayerStrategyPointRanking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SavePlayerStrategyPointRanking(const SavePlayerStrategyPointRanking& from);
  SavePlayerStrategyPointRanking(SavePlayerStrategyPointRanking&& from) noexcept
    : SavePlayerStrategyPointRanking() {
    *this = ::std::move(from);
  }

  inline SavePlayerStrategyPointRanking& operator=(const SavePlayerStrategyPointRanking& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavePlayerStrategyPointRanking& operator=(SavePlayerStrategyPointRanking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SavePlayerStrategyPointRanking& default_instance() {
    return *internal_default_instance();
  }
  static inline const SavePlayerStrategyPointRanking* internal_default_instance() {
    return reinterpret_cast<const SavePlayerStrategyPointRanking*>(
               &_SavePlayerStrategyPointRanking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    286;

  friend void swap(SavePlayerStrategyPointRanking& a, SavePlayerStrategyPointRanking& b) {
    a.Swap(&b);
  }
  inline void Swap(SavePlayerStrategyPointRanking* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SavePlayerStrategyPointRanking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SavePlayerStrategyPointRanking* New() const final {
    return new SavePlayerStrategyPointRanking();
  }

  SavePlayerStrategyPointRanking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SavePlayerStrategyPointRanking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SavePlayerStrategyPointRanking& from);
  void MergeFrom(const SavePlayerStrategyPointRanking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SavePlayerStrategyPointRanking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SavePlayerStrategyPointRanking";
  }
  protected:
  explicit SavePlayerStrategyPointRanking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kScoreFieldNumber = 2,
  };
  // bytes key = 1;
  void clear_key();
  const std::string& key() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_key(ArgT0&& arg0, ArgT... args);
  std::string* mutable_key();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // int64 score = 2;
  void clear_score();
  ::PROTOBUF_NAMESPACE_ID::int64 score() const;
  void set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_score() const;
  void _internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SavePlayerStrategyPointRanking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::int64 score_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncBotArenaState final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncBotArenaState) */ {
 public:
  inline SyncBotArenaState() : SyncBotArenaState(nullptr) {}
  ~SyncBotArenaState() override;
  explicit constexpr SyncBotArenaState(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncBotArenaState(const SyncBotArenaState& from);
  SyncBotArenaState(SyncBotArenaState&& from) noexcept
    : SyncBotArenaState() {
    *this = ::std::move(from);
  }

  inline SyncBotArenaState& operator=(const SyncBotArenaState& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncBotArenaState& operator=(SyncBotArenaState&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncBotArenaState& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncBotArenaState* internal_default_instance() {
    return reinterpret_cast<const SyncBotArenaState*>(
               &_SyncBotArenaState_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    287;

  friend void swap(SyncBotArenaState& a, SyncBotArenaState& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncBotArenaState* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncBotArenaState* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncBotArenaState* New() const final {
    return new SyncBotArenaState();
  }

  SyncBotArenaState* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncBotArenaState>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncBotArenaState& from);
  void MergeFrom(const SyncBotArenaState& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncBotArenaState* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncBotArenaState";
  }
  protected:
  explicit SyncBotArenaState(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStateFieldNumber = 1,
  };
  // int32 state = 1;
  void clear_state();
  ::PROTOBUF_NAMESPACE_ID::int32 state() const;
  void set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_state() const;
  void _internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncBotArenaState)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 state_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncBotArenaStageSession final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncBotArenaStageSession) */ {
 public:
  inline SyncBotArenaStageSession() : SyncBotArenaStageSession(nullptr) {}
  ~SyncBotArenaStageSession() override;
  explicit constexpr SyncBotArenaStageSession(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncBotArenaStageSession(const SyncBotArenaStageSession& from);
  SyncBotArenaStageSession(SyncBotArenaStageSession&& from) noexcept
    : SyncBotArenaStageSession() {
    *this = ::std::move(from);
  }

  inline SyncBotArenaStageSession& operator=(const SyncBotArenaStageSession& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncBotArenaStageSession& operator=(SyncBotArenaStageSession&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncBotArenaStageSession& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncBotArenaStageSession* internal_default_instance() {
    return reinterpret_cast<const SyncBotArenaStageSession*>(
               &_SyncBotArenaStageSession_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    288;

  friend void swap(SyncBotArenaStageSession& a, SyncBotArenaStageSession& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncBotArenaStageSession* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncBotArenaStageSession* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncBotArenaStageSession* New() const final {
    return new SyncBotArenaStageSession();
  }

  SyncBotArenaStageSession* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncBotArenaStageSession>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncBotArenaStageSession& from);
  void MergeFrom(const SyncBotArenaStageSession& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncBotArenaStageSession* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncBotArenaStageSession";
  }
  protected:
  explicit SyncBotArenaStageSession(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStageFieldNumber = 1,
    kSessionFieldNumber = 2,
  };
  // int32 stage = 1;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 session = 2;
  void clear_session();
  ::PROTOBUF_NAMESPACE_ID::int32 session() const;
  void set_session(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session() const;
  void _internal_set_session(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncBotArenaStageSession)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SavePlayerChallengeList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SavePlayerChallengeList) */ {
 public:
  inline SavePlayerChallengeList() : SavePlayerChallengeList(nullptr) {}
  ~SavePlayerChallengeList() override;
  explicit constexpr SavePlayerChallengeList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SavePlayerChallengeList(const SavePlayerChallengeList& from);
  SavePlayerChallengeList(SavePlayerChallengeList&& from) noexcept
    : SavePlayerChallengeList() {
    *this = ::std::move(from);
  }

  inline SavePlayerChallengeList& operator=(const SavePlayerChallengeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SavePlayerChallengeList& operator=(SavePlayerChallengeList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SavePlayerChallengeList& default_instance() {
    return *internal_default_instance();
  }
  static inline const SavePlayerChallengeList* internal_default_instance() {
    return reinterpret_cast<const SavePlayerChallengeList*>(
               &_SavePlayerChallengeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    289;

  friend void swap(SavePlayerChallengeList& a, SavePlayerChallengeList& b) {
    a.Swap(&b);
  }
  inline void Swap(SavePlayerChallengeList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SavePlayerChallengeList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SavePlayerChallengeList* New() const final {
    return new SavePlayerChallengeList();
  }

  SavePlayerChallengeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SavePlayerChallengeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SavePlayerChallengeList& from);
  void MergeFrom(const SavePlayerChallengeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SavePlayerChallengeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SavePlayerChallengeList";
  }
  protected:
  explicit SavePlayerChallengeList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kListFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.BotArenaChallengeList list = 2;
  bool has_list() const;
  private:
  bool _internal_has_list() const;
  public:
  void clear_list();
  const ::KWMsg::BotArenaChallengeList& list() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BotArenaChallengeList* release_list();
  ::KWMsg::BotArenaChallengeList* mutable_list();
  void set_allocated_list(::KWMsg::BotArenaChallengeList* list);
  private:
  const ::KWMsg::BotArenaChallengeList& _internal_list() const;
  ::KWMsg::BotArenaChallengeList* _internal_mutable_list();
  public:
  void unsafe_arena_set_allocated_list(
      ::KWMsg::BotArenaChallengeList* list);
  ::KWMsg::BotArenaChallengeList* unsafe_arena_release_list();

  // @@protoc_insertion_point(class_scope:KWMsg.SavePlayerChallengeList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::BotArenaChallengeList* list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class UpdatePlayerChallengeItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.UpdatePlayerChallengeItem) */ {
 public:
  inline UpdatePlayerChallengeItem() : UpdatePlayerChallengeItem(nullptr) {}
  ~UpdatePlayerChallengeItem() override;
  explicit constexpr UpdatePlayerChallengeItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePlayerChallengeItem(const UpdatePlayerChallengeItem& from);
  UpdatePlayerChallengeItem(UpdatePlayerChallengeItem&& from) noexcept
    : UpdatePlayerChallengeItem() {
    *this = ::std::move(from);
  }

  inline UpdatePlayerChallengeItem& operator=(const UpdatePlayerChallengeItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePlayerChallengeItem& operator=(UpdatePlayerChallengeItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePlayerChallengeItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePlayerChallengeItem* internal_default_instance() {
    return reinterpret_cast<const UpdatePlayerChallengeItem*>(
               &_UpdatePlayerChallengeItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    290;

  friend void swap(UpdatePlayerChallengeItem& a, UpdatePlayerChallengeItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePlayerChallengeItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePlayerChallengeItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePlayerChallengeItem* New() const final {
    return new UpdatePlayerChallengeItem();
  }

  UpdatePlayerChallengeItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePlayerChallengeItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePlayerChallengeItem& from);
  void MergeFrom(const UpdatePlayerChallengeItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePlayerChallengeItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.UpdatePlayerChallengeItem";
  }
  protected:
  explicit UpdatePlayerChallengeItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kItemFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.BotArenaChallengeItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::KWMsg::BotArenaChallengeItem& item() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BotArenaChallengeItem* release_item();
  ::KWMsg::BotArenaChallengeItem* mutable_item();
  void set_allocated_item(::KWMsg::BotArenaChallengeItem* item);
  private:
  const ::KWMsg::BotArenaChallengeItem& _internal_item() const;
  ::KWMsg::BotArenaChallengeItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::KWMsg::BotArenaChallengeItem* item);
  ::KWMsg::BotArenaChallengeItem* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:KWMsg.UpdatePlayerChallengeItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::BotArenaChallengeItem* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class UpdatePlayerReplayItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.UpdatePlayerReplayItem) */ {
 public:
  inline UpdatePlayerReplayItem() : UpdatePlayerReplayItem(nullptr) {}
  ~UpdatePlayerReplayItem() override;
  explicit constexpr UpdatePlayerReplayItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdatePlayerReplayItem(const UpdatePlayerReplayItem& from);
  UpdatePlayerReplayItem(UpdatePlayerReplayItem&& from) noexcept
    : UpdatePlayerReplayItem() {
    *this = ::std::move(from);
  }

  inline UpdatePlayerReplayItem& operator=(const UpdatePlayerReplayItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdatePlayerReplayItem& operator=(UpdatePlayerReplayItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdatePlayerReplayItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdatePlayerReplayItem* internal_default_instance() {
    return reinterpret_cast<const UpdatePlayerReplayItem*>(
               &_UpdatePlayerReplayItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    291;

  friend void swap(UpdatePlayerReplayItem& a, UpdatePlayerReplayItem& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdatePlayerReplayItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdatePlayerReplayItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdatePlayerReplayItem* New() const final {
    return new UpdatePlayerReplayItem();
  }

  UpdatePlayerReplayItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdatePlayerReplayItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdatePlayerReplayItem& from);
  void MergeFrom(const UpdatePlayerReplayItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdatePlayerReplayItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.UpdatePlayerReplayItem";
  }
  protected:
  explicit UpdatePlayerReplayItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kItemFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.BotArenaReplayItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::KWMsg::BotArenaReplayItem& item() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BotArenaReplayItem* release_item();
  ::KWMsg::BotArenaReplayItem* mutable_item();
  void set_allocated_item(::KWMsg::BotArenaReplayItem* item);
  private:
  const ::KWMsg::BotArenaReplayItem& _internal_item() const;
  ::KWMsg::BotArenaReplayItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::KWMsg::BotArenaReplayItem* item);
  ::KWMsg::BotArenaReplayItem* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:KWMsg.UpdatePlayerReplayItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::BotArenaReplayItem* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AddPlayerReplayItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AddPlayerReplayItem) */ {
 public:
  inline AddPlayerReplayItem() : AddPlayerReplayItem(nullptr) {}
  ~AddPlayerReplayItem() override;
  explicit constexpr AddPlayerReplayItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPlayerReplayItem(const AddPlayerReplayItem& from);
  AddPlayerReplayItem(AddPlayerReplayItem&& from) noexcept
    : AddPlayerReplayItem() {
    *this = ::std::move(from);
  }

  inline AddPlayerReplayItem& operator=(const AddPlayerReplayItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPlayerReplayItem& operator=(AddPlayerReplayItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPlayerReplayItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPlayerReplayItem* internal_default_instance() {
    return reinterpret_cast<const AddPlayerReplayItem*>(
               &_AddPlayerReplayItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    292;

  friend void swap(AddPlayerReplayItem& a, AddPlayerReplayItem& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPlayerReplayItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPlayerReplayItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPlayerReplayItem* New() const final {
    return new AddPlayerReplayItem();
  }

  AddPlayerReplayItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPlayerReplayItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPlayerReplayItem& from);
  void MergeFrom(const AddPlayerReplayItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPlayerReplayItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AddPlayerReplayItem";
  }
  protected:
  explicit AddPlayerReplayItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kItemFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.BotArenaReplayItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::KWMsg::BotArenaReplayItem& item() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BotArenaReplayItem* release_item();
  ::KWMsg::BotArenaReplayItem* mutable_item();
  void set_allocated_item(::KWMsg::BotArenaReplayItem* item);
  private:
  const ::KWMsg::BotArenaReplayItem& _internal_item() const;
  ::KWMsg::BotArenaReplayItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::KWMsg::BotArenaReplayItem* item);
  ::KWMsg::BotArenaReplayItem* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:KWMsg.AddPlayerReplayItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::BotArenaReplayItem* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class DelPlayerReplayItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.DelPlayerReplayItem) */ {
 public:
  inline DelPlayerReplayItem() : DelPlayerReplayItem(nullptr) {}
  ~DelPlayerReplayItem() override;
  explicit constexpr DelPlayerReplayItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelPlayerReplayItem(const DelPlayerReplayItem& from);
  DelPlayerReplayItem(DelPlayerReplayItem&& from) noexcept
    : DelPlayerReplayItem() {
    *this = ::std::move(from);
  }

  inline DelPlayerReplayItem& operator=(const DelPlayerReplayItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelPlayerReplayItem& operator=(DelPlayerReplayItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelPlayerReplayItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelPlayerReplayItem* internal_default_instance() {
    return reinterpret_cast<const DelPlayerReplayItem*>(
               &_DelPlayerReplayItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    293;

  friend void swap(DelPlayerReplayItem& a, DelPlayerReplayItem& b) {
    a.Swap(&b);
  }
  inline void Swap(DelPlayerReplayItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelPlayerReplayItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelPlayerReplayItem* New() const final {
    return new DelPlayerReplayItem();
  }

  DelPlayerReplayItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelPlayerReplayItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelPlayerReplayItem& from);
  void MergeFrom(const DelPlayerReplayItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelPlayerReplayItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.DelPlayerReplayItem";
  }
  protected:
  explicit DelPlayerReplayItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kItemFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.BotArenaReplayItem item = 2;
  bool has_item() const;
  private:
  bool _internal_has_item() const;
  public:
  void clear_item();
  const ::KWMsg::BotArenaReplayItem& item() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BotArenaReplayItem* release_item();
  ::KWMsg::BotArenaReplayItem* mutable_item();
  void set_allocated_item(::KWMsg::BotArenaReplayItem* item);
  private:
  const ::KWMsg::BotArenaReplayItem& _internal_item() const;
  ::KWMsg::BotArenaReplayItem* _internal_mutable_item();
  public:
  void unsafe_arena_set_allocated_item(
      ::KWMsg::BotArenaReplayItem* item);
  ::KWMsg::BotArenaReplayItem* unsafe_arena_release_item();

  // @@protoc_insertion_point(class_scope:KWMsg.DelPlayerReplayItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::BotArenaReplayItem* item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncBotArenaBattleIsReady final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncBotArenaBattleIsReady) */ {
 public:
  inline SyncBotArenaBattleIsReady() : SyncBotArenaBattleIsReady(nullptr) {}
  ~SyncBotArenaBattleIsReady() override;
  explicit constexpr SyncBotArenaBattleIsReady(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncBotArenaBattleIsReady(const SyncBotArenaBattleIsReady& from);
  SyncBotArenaBattleIsReady(SyncBotArenaBattleIsReady&& from) noexcept
    : SyncBotArenaBattleIsReady() {
    *this = ::std::move(from);
  }

  inline SyncBotArenaBattleIsReady& operator=(const SyncBotArenaBattleIsReady& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncBotArenaBattleIsReady& operator=(SyncBotArenaBattleIsReady&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncBotArenaBattleIsReady& default_instance() {
    return *internal_default_instance();
  }
  enum ChallengeItemCase {
    kChallengeId = 6,
    kReplayId = 7,
    CHALLENGE_ITEM_NOT_SET = 0,
  };

  enum EntityCase {
    kPlayerInfo = 9,
    kRobotId = 10,
    ENTITY_NOT_SET = 0,
  };

  static inline const SyncBotArenaBattleIsReady* internal_default_instance() {
    return reinterpret_cast<const SyncBotArenaBattleIsReady*>(
               &_SyncBotArenaBattleIsReady_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    294;

  friend void swap(SyncBotArenaBattleIsReady& a, SyncBotArenaBattleIsReady& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncBotArenaBattleIsReady* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncBotArenaBattleIsReady* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncBotArenaBattleIsReady* New() const final {
    return new SyncBotArenaBattleIsReady();
  }

  SyncBotArenaBattleIsReady* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncBotArenaBattleIsReady>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncBotArenaBattleIsReady& from);
  void MergeFrom(const SyncBotArenaBattleIsReady& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncBotArenaBattleIsReady* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncBotArenaBattleIsReady";
  }
  protected:
  explicit SyncBotArenaBattleIsReady(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGamePlayIdFieldNumber = 2,
    kTeamIdFieldNumber = 3,
    kEventCodeFieldNumber = 1,
    kContinuousCountFieldNumber = 4,
    kAutoBuyFieldNumber = 5,
    kChallengeResultFieldNumber = 8,
    kChallengeIdFieldNumber = 6,
    kReplayIdFieldNumber = 7,
    kPlayerInfoFieldNumber = 9,
    kRobotIdFieldNumber = 10,
  };
  // bytes game_play_id = 2;
  void clear_game_play_id();
  const std::string& game_play_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_game_play_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_game_play_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_game_play_id();
  void set_allocated_game_play_id(std::string* game_play_id);
  private:
  const std::string& _internal_game_play_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_game_play_id(const std::string& value);
  std::string* _internal_mutable_game_play_id();
  public:

  // bytes team_id = 3;
  void clear_team_id();
  const std::string& team_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_team_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_team_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_team_id();
  void set_allocated_team_id(std::string* team_id);
  private:
  const std::string& _internal_team_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_team_id(const std::string& value);
  std::string* _internal_mutable_team_id();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 continuous_count = 4;
  void clear_continuous_count();
  ::PROTOBUF_NAMESPACE_ID::int32 continuous_count() const;
  void set_continuous_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_continuous_count() const;
  void _internal_set_continuous_count(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 auto_buy = 5;
  void clear_auto_buy();
  ::PROTOBUF_NAMESPACE_ID::int32 auto_buy() const;
  void set_auto_buy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_auto_buy() const;
  void _internal_set_auto_buy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 challenge_result = 8;
  void clear_challenge_result();
  ::PROTOBUF_NAMESPACE_ID::int32 challenge_result() const;
  void set_challenge_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_challenge_result() const;
  void _internal_set_challenge_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.Ident challenge_id = 6;
  bool has_challenge_id() const;
  private:
  bool _internal_has_challenge_id() const;
  public:
  void clear_challenge_id();
  const ::KWMsg::Ident& challenge_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_challenge_id();
  ::KWMsg::Ident* mutable_challenge_id();
  void set_allocated_challenge_id(::KWMsg::Ident* challenge_id);
  private:
  const ::KWMsg::Ident& _internal_challenge_id() const;
  ::KWMsg::Ident* _internal_mutable_challenge_id();
  public:
  void unsafe_arena_set_allocated_challenge_id(
      ::KWMsg::Ident* challenge_id);
  ::KWMsg::Ident* unsafe_arena_release_challenge_id();

  // .KWMsg.Ident replay_id = 7;
  bool has_replay_id() const;
  private:
  bool _internal_has_replay_id() const;
  public:
  void clear_replay_id();
  const ::KWMsg::Ident& replay_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_replay_id();
  ::KWMsg::Ident* mutable_replay_id();
  void set_allocated_replay_id(::KWMsg::Ident* replay_id);
  private:
  const ::KWMsg::Ident& _internal_replay_id() const;
  ::KWMsg::Ident* _internal_mutable_replay_id();
  public:
  void unsafe_arena_set_allocated_replay_id(
      ::KWMsg::Ident* replay_id);
  ::KWMsg::Ident* unsafe_arena_release_replay_id();

  // .KWMsg.PlayerInfo player_info = 9;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::KWMsg::PlayerInfo& player_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::PlayerInfo* release_player_info();
  ::KWMsg::PlayerInfo* mutable_player_info();
  void set_allocated_player_info(::KWMsg::PlayerInfo* player_info);
  private:
  const ::KWMsg::PlayerInfo& _internal_player_info() const;
  ::KWMsg::PlayerInfo* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::KWMsg::PlayerInfo* player_info);
  ::KWMsg::PlayerInfo* unsafe_arena_release_player_info();

  // bytes robot_id = 10;
  bool has_robot_id() const;
  private:
  bool _internal_has_robot_id() const;
  public:
  void clear_robot_id();
  const std::string& robot_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  void clear_challenge_item();
  ChallengeItemCase challenge_item_case() const;
  void clear_entity();
  EntityCase entity_case() const;
  // @@protoc_insertion_point(class_scope:KWMsg.SyncBotArenaBattleIsReady)
 private:
  class _Internal;
  void set_has_challenge_id();
  void set_has_replay_id();
  void set_has_player_info();
  void set_has_robot_id();

  inline bool has_challenge_item() const;
  inline void clear_has_challenge_item();

  inline bool has_entity() const;
  inline void clear_has_entity();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr game_play_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr team_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 continuous_count_;
  ::PROTOBUF_NAMESPACE_ID::int32 auto_buy_;
  ::PROTOBUF_NAMESPACE_ID::int32 challenge_result_;
  union ChallengeItemUnion {
    constexpr ChallengeItemUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::KWMsg::Ident* challenge_id_;
    ::KWMsg::Ident* replay_id_;
  } challenge_item_;
  union EntityUnion {
    constexpr EntityUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::KWMsg::PlayerInfo* player_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  } entity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[2];

  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncBotArenaBattleReplayDatas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncBotArenaBattleReplayDatas) */ {
 public:
  inline SyncBotArenaBattleReplayDatas() : SyncBotArenaBattleReplayDatas(nullptr) {}
  ~SyncBotArenaBattleReplayDatas() override;
  explicit constexpr SyncBotArenaBattleReplayDatas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncBotArenaBattleReplayDatas(const SyncBotArenaBattleReplayDatas& from);
  SyncBotArenaBattleReplayDatas(SyncBotArenaBattleReplayDatas&& from) noexcept
    : SyncBotArenaBattleReplayDatas() {
    *this = ::std::move(from);
  }

  inline SyncBotArenaBattleReplayDatas& operator=(const SyncBotArenaBattleReplayDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncBotArenaBattleReplayDatas& operator=(SyncBotArenaBattleReplayDatas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncBotArenaBattleReplayDatas& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncBotArenaBattleReplayDatas* internal_default_instance() {
    return reinterpret_cast<const SyncBotArenaBattleReplayDatas*>(
               &_SyncBotArenaBattleReplayDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    295;

  friend void swap(SyncBotArenaBattleReplayDatas& a, SyncBotArenaBattleReplayDatas& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncBotArenaBattleReplayDatas* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncBotArenaBattleReplayDatas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncBotArenaBattleReplayDatas* New() const final {
    return new SyncBotArenaBattleReplayDatas();
  }

  SyncBotArenaBattleReplayDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncBotArenaBattleReplayDatas>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncBotArenaBattleReplayDatas& from);
  void MergeFrom(const SyncBotArenaBattleReplayDatas& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncBotArenaBattleReplayDatas* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncBotArenaBattleReplayDatas";
  }
  protected:
  explicit SyncBotArenaBattleReplayDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kReplayItemFieldNumber = 2,
  };
  // bytes msgs = 3;
  void clear_msgs();
  const std::string& msgs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgs();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msgs();
  void set_allocated_msgs(std::string* msgs);
  private:
  const std::string& _internal_msgs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgs(const std::string& value);
  std::string* _internal_mutable_msgs();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.BotArenaReplayItem replay_item = 2;
  bool has_replay_item() const;
  private:
  bool _internal_has_replay_item() const;
  public:
  void clear_replay_item();
  const ::KWMsg::BotArenaReplayItem& replay_item() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BotArenaReplayItem* release_replay_item();
  ::KWMsg::BotArenaReplayItem* mutable_replay_item();
  void set_allocated_replay_item(::KWMsg::BotArenaReplayItem* replay_item);
  private:
  const ::KWMsg::BotArenaReplayItem& _internal_replay_item() const;
  ::KWMsg::BotArenaReplayItem* _internal_mutable_replay_item();
  public:
  void unsafe_arena_set_allocated_replay_item(
      ::KWMsg::BotArenaReplayItem* replay_item);
  ::KWMsg::BotArenaReplayItem* unsafe_arena_release_replay_item();

  // @@protoc_insertion_point(class_scope:KWMsg.SyncBotArenaBattleReplayDatas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgs_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::BotArenaReplayItem* replay_item_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SaveBotArenaBattleReplayDatas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SaveBotArenaBattleReplayDatas) */ {
 public:
  inline SaveBotArenaBattleReplayDatas() : SaveBotArenaBattleReplayDatas(nullptr) {}
  ~SaveBotArenaBattleReplayDatas() override;
  explicit constexpr SaveBotArenaBattleReplayDatas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SaveBotArenaBattleReplayDatas(const SaveBotArenaBattleReplayDatas& from);
  SaveBotArenaBattleReplayDatas(SaveBotArenaBattleReplayDatas&& from) noexcept
    : SaveBotArenaBattleReplayDatas() {
    *this = ::std::move(from);
  }

  inline SaveBotArenaBattleReplayDatas& operator=(const SaveBotArenaBattleReplayDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline SaveBotArenaBattleReplayDatas& operator=(SaveBotArenaBattleReplayDatas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SaveBotArenaBattleReplayDatas& default_instance() {
    return *internal_default_instance();
  }
  static inline const SaveBotArenaBattleReplayDatas* internal_default_instance() {
    return reinterpret_cast<const SaveBotArenaBattleReplayDatas*>(
               &_SaveBotArenaBattleReplayDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    296;

  friend void swap(SaveBotArenaBattleReplayDatas& a, SaveBotArenaBattleReplayDatas& b) {
    a.Swap(&b);
  }
  inline void Swap(SaveBotArenaBattleReplayDatas* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SaveBotArenaBattleReplayDatas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SaveBotArenaBattleReplayDatas* New() const final {
    return new SaveBotArenaBattleReplayDatas();
  }

  SaveBotArenaBattleReplayDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SaveBotArenaBattleReplayDatas>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SaveBotArenaBattleReplayDatas& from);
  void MergeFrom(const SaveBotArenaBattleReplayDatas& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SaveBotArenaBattleReplayDatas* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SaveBotArenaBattleReplayDatas";
  }
  protected:
  explicit SaveBotArenaBattleReplayDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgsFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kReplayIdFieldNumber = 2,
  };
  // bytes msgs = 3;
  void clear_msgs();
  const std::string& msgs() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_msgs(ArgT0&& arg0, ArgT... args);
  std::string* mutable_msgs();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_msgs();
  void set_allocated_msgs(std::string* msgs);
  private:
  const std::string& _internal_msgs() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_msgs(const std::string& value);
  std::string* _internal_mutable_msgs();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident replay_id = 2;
  bool has_replay_id() const;
  private:
  bool _internal_has_replay_id() const;
  public:
  void clear_replay_id();
  const ::KWMsg::Ident& replay_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_replay_id();
  ::KWMsg::Ident* mutable_replay_id();
  void set_allocated_replay_id(::KWMsg::Ident* replay_id);
  private:
  const ::KWMsg::Ident& _internal_replay_id() const;
  ::KWMsg::Ident* _internal_mutable_replay_id();
  public:
  void unsafe_arena_set_allocated_replay_id(
      ::KWMsg::Ident* replay_id);
  ::KWMsg::Ident* unsafe_arena_release_replay_id();

  // @@protoc_insertion_point(class_scope:KWMsg.SaveBotArenaBattleReplayDatas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr msgs_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* replay_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class DelBotArenaBattleReplayDatas final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.DelBotArenaBattleReplayDatas) */ {
 public:
  inline DelBotArenaBattleReplayDatas() : DelBotArenaBattleReplayDatas(nullptr) {}
  ~DelBotArenaBattleReplayDatas() override;
  explicit constexpr DelBotArenaBattleReplayDatas(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelBotArenaBattleReplayDatas(const DelBotArenaBattleReplayDatas& from);
  DelBotArenaBattleReplayDatas(DelBotArenaBattleReplayDatas&& from) noexcept
    : DelBotArenaBattleReplayDatas() {
    *this = ::std::move(from);
  }

  inline DelBotArenaBattleReplayDatas& operator=(const DelBotArenaBattleReplayDatas& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelBotArenaBattleReplayDatas& operator=(DelBotArenaBattleReplayDatas&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelBotArenaBattleReplayDatas& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelBotArenaBattleReplayDatas* internal_default_instance() {
    return reinterpret_cast<const DelBotArenaBattleReplayDatas*>(
               &_DelBotArenaBattleReplayDatas_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    297;

  friend void swap(DelBotArenaBattleReplayDatas& a, DelBotArenaBattleReplayDatas& b) {
    a.Swap(&b);
  }
  inline void Swap(DelBotArenaBattleReplayDatas* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelBotArenaBattleReplayDatas* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelBotArenaBattleReplayDatas* New() const final {
    return new DelBotArenaBattleReplayDatas();
  }

  DelBotArenaBattleReplayDatas* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelBotArenaBattleReplayDatas>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelBotArenaBattleReplayDatas& from);
  void MergeFrom(const DelBotArenaBattleReplayDatas& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelBotArenaBattleReplayDatas* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.DelBotArenaBattleReplayDatas";
  }
  protected:
  explicit DelBotArenaBattleReplayDatas(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kReplayIdFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident replay_id = 2;
  bool has_replay_id() const;
  private:
  bool _internal_has_replay_id() const;
  public:
  void clear_replay_id();
  const ::KWMsg::Ident& replay_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_replay_id();
  ::KWMsg::Ident* mutable_replay_id();
  void set_allocated_replay_id(::KWMsg::Ident* replay_id);
  private:
  const ::KWMsg::Ident& _internal_replay_id() const;
  ::KWMsg::Ident* _internal_mutable_replay_id();
  public:
  void unsafe_arena_set_allocated_replay_id(
      ::KWMsg::Ident* replay_id);
  ::KWMsg::Ident* unsafe_arena_release_replay_id();

  // @@protoc_insertion_point(class_scope:KWMsg.DelBotArenaBattleReplayDatas)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* replay_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncDefensivePlayerBattleReward final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncDefensivePlayerBattleReward) */ {
 public:
  inline SyncDefensivePlayerBattleReward() : SyncDefensivePlayerBattleReward(nullptr) {}
  ~SyncDefensivePlayerBattleReward() override;
  explicit constexpr SyncDefensivePlayerBattleReward(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncDefensivePlayerBattleReward(const SyncDefensivePlayerBattleReward& from);
  SyncDefensivePlayerBattleReward(SyncDefensivePlayerBattleReward&& from) noexcept
    : SyncDefensivePlayerBattleReward() {
    *this = ::std::move(from);
  }

  inline SyncDefensivePlayerBattleReward& operator=(const SyncDefensivePlayerBattleReward& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncDefensivePlayerBattleReward& operator=(SyncDefensivePlayerBattleReward&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncDefensivePlayerBattleReward& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncDefensivePlayerBattleReward* internal_default_instance() {
    return reinterpret_cast<const SyncDefensivePlayerBattleReward*>(
               &_SyncDefensivePlayerBattleReward_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    298;

  friend void swap(SyncDefensivePlayerBattleReward& a, SyncDefensivePlayerBattleReward& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncDefensivePlayerBattleReward* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncDefensivePlayerBattleReward* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncDefensivePlayerBattleReward* New() const final {
    return new SyncDefensivePlayerBattleReward();
  }

  SyncDefensivePlayerBattleReward* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncDefensivePlayerBattleReward>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncDefensivePlayerBattleReward& from);
  void MergeFrom(const SyncDefensivePlayerBattleReward& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncDefensivePlayerBattleReward* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncDefensivePlayerBattleReward";
  }
  protected:
  explicit SyncDefensivePlayerBattleReward(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated .KWMsg.RewardInfo reward_list = 2;
  int reward_list_size() const;
  private:
  int _internal_reward_list_size() const;
  public:
  void clear_reward_list();
  ::KWMsg::RewardInfo* mutable_reward_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
      mutable_reward_list();
  private:
  const ::KWMsg::RewardInfo& _internal_reward_list(int index) const;
  ::KWMsg::RewardInfo* _internal_add_reward_list();
  public:
  const ::KWMsg::RewardInfo& reward_list(int index) const;
  ::KWMsg::RewardInfo* add_reward_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
      reward_list() const;

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.SyncDefensivePlayerBattleReward)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo > reward_list_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class SyncBotArenaBattleSettleData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.SyncBotArenaBattleSettleData) */ {
 public:
  inline SyncBotArenaBattleSettleData() : SyncBotArenaBattleSettleData(nullptr) {}
  ~SyncBotArenaBattleSettleData() override;
  explicit constexpr SyncBotArenaBattleSettleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  SyncBotArenaBattleSettleData(const SyncBotArenaBattleSettleData& from);
  SyncBotArenaBattleSettleData(SyncBotArenaBattleSettleData&& from) noexcept
    : SyncBotArenaBattleSettleData() {
    *this = ::std::move(from);
  }

  inline SyncBotArenaBattleSettleData& operator=(const SyncBotArenaBattleSettleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline SyncBotArenaBattleSettleData& operator=(SyncBotArenaBattleSettleData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SyncBotArenaBattleSettleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const SyncBotArenaBattleSettleData* internal_default_instance() {
    return reinterpret_cast<const SyncBotArenaBattleSettleData*>(
               &_SyncBotArenaBattleSettleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    299;

  friend void swap(SyncBotArenaBattleSettleData& a, SyncBotArenaBattleSettleData& b) {
    a.Swap(&b);
  }
  inline void Swap(SyncBotArenaBattleSettleData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SyncBotArenaBattleSettleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SyncBotArenaBattleSettleData* New() const final {
    return new SyncBotArenaBattleSettleData();
  }

  SyncBotArenaBattleSettleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SyncBotArenaBattleSettleData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SyncBotArenaBattleSettleData& from);
  void MergeFrom(const SyncBotArenaBattleSettleData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SyncBotArenaBattleSettleData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.SyncBotArenaBattleSettleData";
  }
  protected:
  explicit SyncBotArenaBattleSettleData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kChallengeIdFieldNumber = 2,
    kReplayIdFieldNumber = 3,
    kIsWinFieldNumber = 4,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident challenge_id = 2;
  bool has_challenge_id() const;
  private:
  bool _internal_has_challenge_id() const;
  public:
  void clear_challenge_id();
  const ::KWMsg::Ident& challenge_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_challenge_id();
  ::KWMsg::Ident* mutable_challenge_id();
  void set_allocated_challenge_id(::KWMsg::Ident* challenge_id);
  private:
  const ::KWMsg::Ident& _internal_challenge_id() const;
  ::KWMsg::Ident* _internal_mutable_challenge_id();
  public:
  void unsafe_arena_set_allocated_challenge_id(
      ::KWMsg::Ident* challenge_id);
  ::KWMsg::Ident* unsafe_arena_release_challenge_id();

  // .KWMsg.Ident replay_id = 3;
  bool has_replay_id() const;
  private:
  bool _internal_has_replay_id() const;
  public:
  void clear_replay_id();
  const ::KWMsg::Ident& replay_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_replay_id();
  ::KWMsg::Ident* mutable_replay_id();
  void set_allocated_replay_id(::KWMsg::Ident* replay_id);
  private:
  const ::KWMsg::Ident& _internal_replay_id() const;
  ::KWMsg::Ident* _internal_mutable_replay_id();
  public:
  void unsafe_arena_set_allocated_replay_id(
      ::KWMsg::Ident* replay_id);
  ::KWMsg::Ident* unsafe_arena_release_replay_id();

  // bool is_win = 4;
  void clear_is_win();
  bool is_win() const;
  void set_is_win(bool value);
  private:
  bool _internal_is_win() const;
  void _internal_set_is_win(bool value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.SyncBotArenaBattleSettleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* challenge_id_;
  ::KWMsg::Ident* replay_id_;
  bool is_win_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqClickBotarenaPromptForm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqClickBotarenaPromptForm) */ {
 public:
  inline ReqClickBotarenaPromptForm() : ReqClickBotarenaPromptForm(nullptr) {}
  ~ReqClickBotarenaPromptForm() override;
  explicit constexpr ReqClickBotarenaPromptForm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqClickBotarenaPromptForm(const ReqClickBotarenaPromptForm& from);
  ReqClickBotarenaPromptForm(ReqClickBotarenaPromptForm&& from) noexcept
    : ReqClickBotarenaPromptForm() {
    *this = ::std::move(from);
  }

  inline ReqClickBotarenaPromptForm& operator=(const ReqClickBotarenaPromptForm& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqClickBotarenaPromptForm& operator=(ReqClickBotarenaPromptForm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqClickBotarenaPromptForm& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqClickBotarenaPromptForm* internal_default_instance() {
    return reinterpret_cast<const ReqClickBotarenaPromptForm*>(
               &_ReqClickBotarenaPromptForm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    300;

  friend void swap(ReqClickBotarenaPromptForm& a, ReqClickBotarenaPromptForm& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqClickBotarenaPromptForm* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqClickBotarenaPromptForm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqClickBotarenaPromptForm* New() const final {
    return new ReqClickBotarenaPromptForm();
  }

  ReqClickBotarenaPromptForm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqClickBotarenaPromptForm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqClickBotarenaPromptForm& from);
  void MergeFrom(const ReqClickBotarenaPromptForm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqClickBotarenaPromptForm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqClickBotarenaPromptForm";
  }
  protected:
  explicit ReqClickBotarenaPromptForm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kTypeFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.BotarenaPromptType type = 2;
  void clear_type();
  ::KWMsg::BotarenaPromptType type() const;
  void set_type(::KWMsg::BotarenaPromptType value);
  private:
  ::KWMsg::BotarenaPromptType _internal_type() const;
  void _internal_set_type(::KWMsg::BotarenaPromptType value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqClickBotarenaPromptForm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckClickBotarenaPromptForm final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckClickBotarenaPromptForm) */ {
 public:
  inline AckClickBotarenaPromptForm() : AckClickBotarenaPromptForm(nullptr) {}
  ~AckClickBotarenaPromptForm() override;
  explicit constexpr AckClickBotarenaPromptForm(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckClickBotarenaPromptForm(const AckClickBotarenaPromptForm& from);
  AckClickBotarenaPromptForm(AckClickBotarenaPromptForm&& from) noexcept
    : AckClickBotarenaPromptForm() {
    *this = ::std::move(from);
  }

  inline AckClickBotarenaPromptForm& operator=(const AckClickBotarenaPromptForm& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckClickBotarenaPromptForm& operator=(AckClickBotarenaPromptForm&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckClickBotarenaPromptForm& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckClickBotarenaPromptForm* internal_default_instance() {
    return reinterpret_cast<const AckClickBotarenaPromptForm*>(
               &_AckClickBotarenaPromptForm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    301;

  friend void swap(AckClickBotarenaPromptForm& a, AckClickBotarenaPromptForm& b) {
    a.Swap(&b);
  }
  inline void Swap(AckClickBotarenaPromptForm* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckClickBotarenaPromptForm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckClickBotarenaPromptForm* New() const final {
    return new AckClickBotarenaPromptForm();
  }

  AckClickBotarenaPromptForm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckClickBotarenaPromptForm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckClickBotarenaPromptForm& from);
  void MergeFrom(const AckClickBotarenaPromptForm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckClickBotarenaPromptForm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckClickBotarenaPromptForm";
  }
  protected:
  explicit AckClickBotarenaPromptForm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckClickBotarenaPromptForm)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class HonorPointRankingItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.HonorPointRankingItem) */ {
 public:
  inline HonorPointRankingItem() : HonorPointRankingItem(nullptr) {}
  ~HonorPointRankingItem() override;
  explicit constexpr HonorPointRankingItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HonorPointRankingItem(const HonorPointRankingItem& from);
  HonorPointRankingItem(HonorPointRankingItem&& from) noexcept
    : HonorPointRankingItem() {
    *this = ::std::move(from);
  }

  inline HonorPointRankingItem& operator=(const HonorPointRankingItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline HonorPointRankingItem& operator=(HonorPointRankingItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HonorPointRankingItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const HonorPointRankingItem* internal_default_instance() {
    return reinterpret_cast<const HonorPointRankingItem*>(
               &_HonorPointRankingItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    302;

  friend void swap(HonorPointRankingItem& a, HonorPointRankingItem& b) {
    a.Swap(&b);
  }
  inline void Swap(HonorPointRankingItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HonorPointRankingItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HonorPointRankingItem* New() const final {
    return new HonorPointRankingItem();
  }

  HonorPointRankingItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HonorPointRankingItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HonorPointRankingItem& from);
  void MergeFrom(const HonorPointRankingItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HonorPointRankingItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.HonorPointRankingItem";
  }
  protected:
  explicit HonorPointRankingItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 2,
    kRankFieldNumber = 1,
  };
  // .KWMsg.PlayerInfo player_info = 2;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::KWMsg::PlayerInfo& player_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::PlayerInfo* release_player_info();
  ::KWMsg::PlayerInfo* mutable_player_info();
  void set_allocated_player_info(::KWMsg::PlayerInfo* player_info);
  private:
  const ::KWMsg::PlayerInfo& _internal_player_info() const;
  ::KWMsg::PlayerInfo* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::KWMsg::PlayerInfo* player_info);
  ::KWMsg::PlayerInfo* unsafe_arena_release_player_info();

  // int32 rank = 1;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.HonorPointRankingItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::PlayerInfo* player_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqGetPlayerHonorPointRanking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGetPlayerHonorPointRanking) */ {
 public:
  inline ReqGetPlayerHonorPointRanking() : ReqGetPlayerHonorPointRanking(nullptr) {}
  ~ReqGetPlayerHonorPointRanking() override;
  explicit constexpr ReqGetPlayerHonorPointRanking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetPlayerHonorPointRanking(const ReqGetPlayerHonorPointRanking& from);
  ReqGetPlayerHonorPointRanking(ReqGetPlayerHonorPointRanking&& from) noexcept
    : ReqGetPlayerHonorPointRanking() {
    *this = ::std::move(from);
  }

  inline ReqGetPlayerHonorPointRanking& operator=(const ReqGetPlayerHonorPointRanking& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetPlayerHonorPointRanking& operator=(ReqGetPlayerHonorPointRanking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetPlayerHonorPointRanking& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetPlayerHonorPointRanking* internal_default_instance() {
    return reinterpret_cast<const ReqGetPlayerHonorPointRanking*>(
               &_ReqGetPlayerHonorPointRanking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    303;

  friend void swap(ReqGetPlayerHonorPointRanking& a, ReqGetPlayerHonorPointRanking& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetPlayerHonorPointRanking* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetPlayerHonorPointRanking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGetPlayerHonorPointRanking* New() const final {
    return new ReqGetPlayerHonorPointRanking();
  }

  ReqGetPlayerHonorPointRanking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetPlayerHonorPointRanking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetPlayerHonorPointRanking& from);
  void MergeFrom(const ReqGetPlayerHonorPointRanking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetPlayerHonorPointRanking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGetPlayerHonorPointRanking";
  }
  protected:
  explicit ReqGetPlayerHonorPointRanking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGetPlayerHonorPointRanking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckGetPlayerHonorPointRanking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGetPlayerHonorPointRanking) */ {
 public:
  inline AckGetPlayerHonorPointRanking() : AckGetPlayerHonorPointRanking(nullptr) {}
  ~AckGetPlayerHonorPointRanking() override;
  explicit constexpr AckGetPlayerHonorPointRanking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGetPlayerHonorPointRanking(const AckGetPlayerHonorPointRanking& from);
  AckGetPlayerHonorPointRanking(AckGetPlayerHonorPointRanking&& from) noexcept
    : AckGetPlayerHonorPointRanking() {
    *this = ::std::move(from);
  }

  inline AckGetPlayerHonorPointRanking& operator=(const AckGetPlayerHonorPointRanking& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGetPlayerHonorPointRanking& operator=(AckGetPlayerHonorPointRanking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGetPlayerHonorPointRanking& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGetPlayerHonorPointRanking* internal_default_instance() {
    return reinterpret_cast<const AckGetPlayerHonorPointRanking*>(
               &_AckGetPlayerHonorPointRanking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    304;

  friend void swap(AckGetPlayerHonorPointRanking& a, AckGetPlayerHonorPointRanking& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGetPlayerHonorPointRanking* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGetPlayerHonorPointRanking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGetPlayerHonorPointRanking* New() const final {
    return new AckGetPlayerHonorPointRanking();
  }

  AckGetPlayerHonorPointRanking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGetPlayerHonorPointRanking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGetPlayerHonorPointRanking& from);
  void MergeFrom(const AckGetPlayerHonorPointRanking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGetPlayerHonorPointRanking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGetPlayerHonorPointRanking";
  }
  protected:
  explicit AckGetPlayerHonorPointRanking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankingFieldNumber = 3,
    kPlayerIdFieldNumber = 2,
    kCurRankFieldNumber = 4,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.HonorPointRankingItem ranking = 3;
  int ranking_size() const;
  private:
  int _internal_ranking_size() const;
  public:
  void clear_ranking();
  ::KWMsg::HonorPointRankingItem* mutable_ranking(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::HonorPointRankingItem >*
      mutable_ranking();
  private:
  const ::KWMsg::HonorPointRankingItem& _internal_ranking(int index) const;
  ::KWMsg::HonorPointRankingItem* _internal_add_ranking();
  public:
  const ::KWMsg::HonorPointRankingItem& ranking(int index) const;
  ::KWMsg::HonorPointRankingItem* add_ranking();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::HonorPointRankingItem >&
      ranking() const;

  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.HonorPointRankingItem cur_rank = 4;
  bool has_cur_rank() const;
  private:
  bool _internal_has_cur_rank() const;
  public:
  void clear_cur_rank();
  const ::KWMsg::HonorPointRankingItem& cur_rank() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::HonorPointRankingItem* release_cur_rank();
  ::KWMsg::HonorPointRankingItem* mutable_cur_rank();
  void set_allocated_cur_rank(::KWMsg::HonorPointRankingItem* cur_rank);
  private:
  const ::KWMsg::HonorPointRankingItem& _internal_cur_rank() const;
  ::KWMsg::HonorPointRankingItem* _internal_mutable_cur_rank();
  public:
  void unsafe_arena_set_allocated_cur_rank(
      ::KWMsg::HonorPointRankingItem* cur_rank);
  ::KWMsg::HonorPointRankingItem* unsafe_arena_release_cur_rank();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGetPlayerHonorPointRanking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::HonorPointRankingItem > ranking_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::HonorPointRankingItem* cur_rank_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqGetBotArenaMainPageData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGetBotArenaMainPageData) */ {
 public:
  inline ReqGetBotArenaMainPageData() : ReqGetBotArenaMainPageData(nullptr) {}
  ~ReqGetBotArenaMainPageData() override;
  explicit constexpr ReqGetBotArenaMainPageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetBotArenaMainPageData(const ReqGetBotArenaMainPageData& from);
  ReqGetBotArenaMainPageData(ReqGetBotArenaMainPageData&& from) noexcept
    : ReqGetBotArenaMainPageData() {
    *this = ::std::move(from);
  }

  inline ReqGetBotArenaMainPageData& operator=(const ReqGetBotArenaMainPageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetBotArenaMainPageData& operator=(ReqGetBotArenaMainPageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetBotArenaMainPageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetBotArenaMainPageData* internal_default_instance() {
    return reinterpret_cast<const ReqGetBotArenaMainPageData*>(
               &_ReqGetBotArenaMainPageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    305;

  friend void swap(ReqGetBotArenaMainPageData& a, ReqGetBotArenaMainPageData& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetBotArenaMainPageData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetBotArenaMainPageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGetBotArenaMainPageData* New() const final {
    return new ReqGetBotArenaMainPageData();
  }

  ReqGetBotArenaMainPageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetBotArenaMainPageData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetBotArenaMainPageData& from);
  void MergeFrom(const ReqGetBotArenaMainPageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetBotArenaMainPageData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGetBotArenaMainPageData";
  }
  protected:
  explicit ReqGetBotArenaMainPageData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGetBotArenaMainPageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckGetBotArenaMainPageData final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGetBotArenaMainPageData) */ {
 public:
  inline AckGetBotArenaMainPageData() : AckGetBotArenaMainPageData(nullptr) {}
  ~AckGetBotArenaMainPageData() override;
  explicit constexpr AckGetBotArenaMainPageData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGetBotArenaMainPageData(const AckGetBotArenaMainPageData& from);
  AckGetBotArenaMainPageData(AckGetBotArenaMainPageData&& from) noexcept
    : AckGetBotArenaMainPageData() {
    *this = ::std::move(from);
  }

  inline AckGetBotArenaMainPageData& operator=(const AckGetBotArenaMainPageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGetBotArenaMainPageData& operator=(AckGetBotArenaMainPageData&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGetBotArenaMainPageData& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGetBotArenaMainPageData* internal_default_instance() {
    return reinterpret_cast<const AckGetBotArenaMainPageData*>(
               &_AckGetBotArenaMainPageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    306;

  friend void swap(AckGetBotArenaMainPageData& a, AckGetBotArenaMainPageData& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGetBotArenaMainPageData* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGetBotArenaMainPageData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGetBotArenaMainPageData* New() const final {
    return new AckGetBotArenaMainPageData();
  }

  AckGetBotArenaMainPageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGetBotArenaMainPageData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGetBotArenaMainPageData& from);
  void MergeFrom(const AckGetBotArenaMainPageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGetBotArenaMainPageData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGetBotArenaMainPageData";
  }
  protected:
  explicit AckGetBotArenaMainPageData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPreBotarenaGradeIdFieldNumber = 7,
    kPlayerIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
    kRankFieldNumber = 3,
    kStageFieldNumber = 4,
    kSessionFieldNumber = 5,
    kPromptTypeFieldNumber = 6,
    kStageBeginTsFieldNumber = 9,
    kPreStrategyPointFieldNumber = 8,
    kStageEndTsFieldNumber = 10,
    kStageSettleTsFieldNumber = 11,
    kSessionBeginTsFieldNumber = 12,
    kSessionEndTsFieldNumber = 13,
    kSessionSettleTsFieldNumber = 14,
  };
  // bytes pre_botarena_grade_id = 7;
  void clear_pre_botarena_grade_id();
  const std::string& pre_botarena_grade_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_pre_botarena_grade_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_pre_botarena_grade_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_pre_botarena_grade_id();
  void set_allocated_pre_botarena_grade_id(std::string* pre_botarena_grade_id);
  private:
  const std::string& _internal_pre_botarena_grade_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_pre_botarena_grade_id(const std::string& value);
  std::string* _internal_mutable_pre_botarena_grade_id();
  public:

  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // int32 rank = 3;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stage = 4;
  void clear_stage();
  ::PROTOBUF_NAMESPACE_ID::int32 stage() const;
  void set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage() const;
  void _internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 session = 5;
  void clear_session();
  ::PROTOBUF_NAMESPACE_ID::int32 session() const;
  void set_session(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session() const;
  void _internal_set_session(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.BotarenaPromptType prompt_type = 6;
  void clear_prompt_type();
  ::KWMsg::BotarenaPromptType prompt_type() const;
  void set_prompt_type(::KWMsg::BotarenaPromptType value);
  private:
  ::KWMsg::BotarenaPromptType _internal_prompt_type() const;
  void _internal_set_prompt_type(::KWMsg::BotarenaPromptType value);
  public:

  // int32 stage_begin_ts = 9;
  void clear_stage_begin_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 stage_begin_ts() const;
  void set_stage_begin_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage_begin_ts() const;
  void _internal_set_stage_begin_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int64 pre_strategy_point = 8;
  void clear_pre_strategy_point();
  ::PROTOBUF_NAMESPACE_ID::int64 pre_strategy_point() const;
  void set_pre_strategy_point(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_pre_strategy_point() const;
  void _internal_set_pre_strategy_point(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // int32 stage_end_ts = 10;
  void clear_stage_end_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 stage_end_ts() const;
  void set_stage_end_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage_end_ts() const;
  void _internal_set_stage_end_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 stage_settle_ts = 11;
  void clear_stage_settle_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 stage_settle_ts() const;
  void set_stage_settle_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_stage_settle_ts() const;
  void _internal_set_stage_settle_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 session_begin_ts = 12;
  void clear_session_begin_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 session_begin_ts() const;
  void set_session_begin_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session_begin_ts() const;
  void _internal_set_session_begin_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 session_end_ts = 13;
  void clear_session_end_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 session_end_ts() const;
  void set_session_end_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session_end_ts() const;
  void _internal_set_session_end_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 session_settle_ts = 14;
  void clear_session_settle_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 session_settle_ts() const;
  void set_session_settle_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_session_settle_ts() const;
  void _internal_set_session_settle_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGetBotArenaMainPageData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr pre_botarena_grade_id_;
  ::KWMsg::Ident* player_id_;
  int event_code_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_;
  int prompt_type_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_begin_ts_;
  ::PROTOBUF_NAMESPACE_ID::int64 pre_strategy_point_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_end_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 stage_settle_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_begin_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_end_ts_;
  ::PROTOBUF_NAMESPACE_ID::int32 session_settle_ts_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class StrategyPointRankingItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.StrategyPointRankingItem) */ {
 public:
  inline StrategyPointRankingItem() : StrategyPointRankingItem(nullptr) {}
  ~StrategyPointRankingItem() override;
  explicit constexpr StrategyPointRankingItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StrategyPointRankingItem(const StrategyPointRankingItem& from);
  StrategyPointRankingItem(StrategyPointRankingItem&& from) noexcept
    : StrategyPointRankingItem() {
    *this = ::std::move(from);
  }

  inline StrategyPointRankingItem& operator=(const StrategyPointRankingItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline StrategyPointRankingItem& operator=(StrategyPointRankingItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StrategyPointRankingItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const StrategyPointRankingItem* internal_default_instance() {
    return reinterpret_cast<const StrategyPointRankingItem*>(
               &_StrategyPointRankingItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    307;

  friend void swap(StrategyPointRankingItem& a, StrategyPointRankingItem& b) {
    a.Swap(&b);
  }
  inline void Swap(StrategyPointRankingItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StrategyPointRankingItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StrategyPointRankingItem* New() const final {
    return new StrategyPointRankingItem();
  }

  StrategyPointRankingItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StrategyPointRankingItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StrategyPointRankingItem& from);
  void MergeFrom(const StrategyPointRankingItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StrategyPointRankingItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.StrategyPointRankingItem";
  }
  protected:
  explicit StrategyPointRankingItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerInfoFieldNumber = 2,
    kRankFieldNumber = 1,
  };
  // .KWMsg.PlayerInfo player_info = 2;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::KWMsg::PlayerInfo& player_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::PlayerInfo* release_player_info();
  ::KWMsg::PlayerInfo* mutable_player_info();
  void set_allocated_player_info(::KWMsg::PlayerInfo* player_info);
  private:
  const ::KWMsg::PlayerInfo& _internal_player_info() const;
  ::KWMsg::PlayerInfo* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::KWMsg::PlayerInfo* player_info);
  ::KWMsg::PlayerInfo* unsafe_arena_release_player_info();

  // int32 rank = 1;
  void clear_rank();
  ::PROTOBUF_NAMESPACE_ID::int32 rank() const;
  void set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_rank() const;
  void _internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.StrategyPointRankingItem)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::PlayerInfo* player_info_;
  ::PROTOBUF_NAMESPACE_ID::int32 rank_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqGetPlayerStrategyPointRanking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGetPlayerStrategyPointRanking) */ {
 public:
  inline ReqGetPlayerStrategyPointRanking() : ReqGetPlayerStrategyPointRanking(nullptr) {}
  ~ReqGetPlayerStrategyPointRanking() override;
  explicit constexpr ReqGetPlayerStrategyPointRanking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetPlayerStrategyPointRanking(const ReqGetPlayerStrategyPointRanking& from);
  ReqGetPlayerStrategyPointRanking(ReqGetPlayerStrategyPointRanking&& from) noexcept
    : ReqGetPlayerStrategyPointRanking() {
    *this = ::std::move(from);
  }

  inline ReqGetPlayerStrategyPointRanking& operator=(const ReqGetPlayerStrategyPointRanking& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetPlayerStrategyPointRanking& operator=(ReqGetPlayerStrategyPointRanking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetPlayerStrategyPointRanking& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetPlayerStrategyPointRanking* internal_default_instance() {
    return reinterpret_cast<const ReqGetPlayerStrategyPointRanking*>(
               &_ReqGetPlayerStrategyPointRanking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    308;

  friend void swap(ReqGetPlayerStrategyPointRanking& a, ReqGetPlayerStrategyPointRanking& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetPlayerStrategyPointRanking* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetPlayerStrategyPointRanking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGetPlayerStrategyPointRanking* New() const final {
    return new ReqGetPlayerStrategyPointRanking();
  }

  ReqGetPlayerStrategyPointRanking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetPlayerStrategyPointRanking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetPlayerStrategyPointRanking& from);
  void MergeFrom(const ReqGetPlayerStrategyPointRanking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetPlayerStrategyPointRanking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGetPlayerStrategyPointRanking";
  }
  protected:
  explicit ReqGetPlayerStrategyPointRanking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGetPlayerStrategyPointRanking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckGetPlayerStrategyPointRanking final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGetPlayerStrategyPointRanking) */ {
 public:
  inline AckGetPlayerStrategyPointRanking() : AckGetPlayerStrategyPointRanking(nullptr) {}
  ~AckGetPlayerStrategyPointRanking() override;
  explicit constexpr AckGetPlayerStrategyPointRanking(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGetPlayerStrategyPointRanking(const AckGetPlayerStrategyPointRanking& from);
  AckGetPlayerStrategyPointRanking(AckGetPlayerStrategyPointRanking&& from) noexcept
    : AckGetPlayerStrategyPointRanking() {
    *this = ::std::move(from);
  }

  inline AckGetPlayerStrategyPointRanking& operator=(const AckGetPlayerStrategyPointRanking& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGetPlayerStrategyPointRanking& operator=(AckGetPlayerStrategyPointRanking&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGetPlayerStrategyPointRanking& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGetPlayerStrategyPointRanking* internal_default_instance() {
    return reinterpret_cast<const AckGetPlayerStrategyPointRanking*>(
               &_AckGetPlayerStrategyPointRanking_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    309;

  friend void swap(AckGetPlayerStrategyPointRanking& a, AckGetPlayerStrategyPointRanking& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGetPlayerStrategyPointRanking* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGetPlayerStrategyPointRanking* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGetPlayerStrategyPointRanking* New() const final {
    return new AckGetPlayerStrategyPointRanking();
  }

  AckGetPlayerStrategyPointRanking* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGetPlayerStrategyPointRanking>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGetPlayerStrategyPointRanking& from);
  void MergeFrom(const AckGetPlayerStrategyPointRanking& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGetPlayerStrategyPointRanking* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGetPlayerStrategyPointRanking";
  }
  protected:
  explicit AckGetPlayerStrategyPointRanking(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRankingFieldNumber = 3,
    kPlayerIdFieldNumber = 2,
    kCurRankFieldNumber = 4,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.StrategyPointRankingItem ranking = 3;
  int ranking_size() const;
  private:
  int _internal_ranking_size() const;
  public:
  void clear_ranking();
  ::KWMsg::StrategyPointRankingItem* mutable_ranking(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::StrategyPointRankingItem >*
      mutable_ranking();
  private:
  const ::KWMsg::StrategyPointRankingItem& _internal_ranking(int index) const;
  ::KWMsg::StrategyPointRankingItem* _internal_add_ranking();
  public:
  const ::KWMsg::StrategyPointRankingItem& ranking(int index) const;
  ::KWMsg::StrategyPointRankingItem* add_ranking();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::StrategyPointRankingItem >&
      ranking() const;

  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.StrategyPointRankingItem cur_rank = 4;
  bool has_cur_rank() const;
  private:
  bool _internal_has_cur_rank() const;
  public:
  void clear_cur_rank();
  const ::KWMsg::StrategyPointRankingItem& cur_rank() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::StrategyPointRankingItem* release_cur_rank();
  ::KWMsg::StrategyPointRankingItem* mutable_cur_rank();
  void set_allocated_cur_rank(::KWMsg::StrategyPointRankingItem* cur_rank);
  private:
  const ::KWMsg::StrategyPointRankingItem& _internal_cur_rank() const;
  ::KWMsg::StrategyPointRankingItem* _internal_mutable_cur_rank();
  public:
  void unsafe_arena_set_allocated_cur_rank(
      ::KWMsg::StrategyPointRankingItem* cur_rank);
  ::KWMsg::StrategyPointRankingItem* unsafe_arena_release_cur_rank();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGetPlayerStrategyPointRanking)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::StrategyPointRankingItem > ranking_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::StrategyPointRankingItem* cur_rank_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class BotArenaChallengeItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BotArenaChallengeItem) */ {
 public:
  inline BotArenaChallengeItem() : BotArenaChallengeItem(nullptr) {}
  ~BotArenaChallengeItem() override;
  explicit constexpr BotArenaChallengeItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BotArenaChallengeItem(const BotArenaChallengeItem& from);
  BotArenaChallengeItem(BotArenaChallengeItem&& from) noexcept
    : BotArenaChallengeItem() {
    *this = ::std::move(from);
  }

  inline BotArenaChallengeItem& operator=(const BotArenaChallengeItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline BotArenaChallengeItem& operator=(BotArenaChallengeItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BotArenaChallengeItem& default_instance() {
    return *internal_default_instance();
  }
  enum EntityCase {
    kPlayerInfo = 2,
    kRobotId = 3,
    ENTITY_NOT_SET = 0,
  };

  static inline const BotArenaChallengeItem* internal_default_instance() {
    return reinterpret_cast<const BotArenaChallengeItem*>(
               &_BotArenaChallengeItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    310;

  friend void swap(BotArenaChallengeItem& a, BotArenaChallengeItem& b) {
    a.Swap(&b);
  }
  inline void Swap(BotArenaChallengeItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BotArenaChallengeItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BotArenaChallengeItem* New() const final {
    return new BotArenaChallengeItem();
  }

  BotArenaChallengeItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BotArenaChallengeItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BotArenaChallengeItem& from);
  void MergeFrom(const BotArenaChallengeItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BotArenaChallengeItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BotArenaChallengeItem";
  }
  protected:
  explicit BotArenaChallengeItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kResultFieldNumber = 4,
    kPlayerInfoFieldNumber = 2,
    kRobotIdFieldNumber = 3,
  };
  // .KWMsg.Ident id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::KWMsg::Ident& id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_id();
  ::KWMsg::Ident* mutable_id();
  void set_allocated_id(::KWMsg::Ident* id);
  private:
  const ::KWMsg::Ident& _internal_id() const;
  ::KWMsg::Ident* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::KWMsg::Ident* id);
  ::KWMsg::Ident* unsafe_arena_release_id();

  // int32 result = 4;
  void clear_result();
  ::PROTOBUF_NAMESPACE_ID::int32 result() const;
  void set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_result() const;
  void _internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.PlayerInfo player_info = 2;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::KWMsg::PlayerInfo& player_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::PlayerInfo* release_player_info();
  ::KWMsg::PlayerInfo* mutable_player_info();
  void set_allocated_player_info(::KWMsg::PlayerInfo* player_info);
  private:
  const ::KWMsg::PlayerInfo& _internal_player_info() const;
  ::KWMsg::PlayerInfo* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::KWMsg::PlayerInfo* player_info);
  ::KWMsg::PlayerInfo* unsafe_arena_release_player_info();

  // bytes robot_id = 3;
  bool has_robot_id() const;
  private:
  bool _internal_has_robot_id() const;
  public:
  void clear_robot_id();
  const std::string& robot_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  void clear_entity();
  EntityCase entity_case() const;
  // @@protoc_insertion_point(class_scope:KWMsg.BotArenaChallengeItem)
 private:
  class _Internal;
  void set_has_player_info();
  void set_has_robot_id();

  inline bool has_entity() const;
  inline void clear_has_entity();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* id_;
  ::PROTOBUF_NAMESPACE_ID::int32 result_;
  union EntityUnion {
    constexpr EntityUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::KWMsg::PlayerInfo* player_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  } entity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class BotArenaChallengeList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BotArenaChallengeList) */ {
 public:
  inline BotArenaChallengeList() : BotArenaChallengeList(nullptr) {}
  ~BotArenaChallengeList() override;
  explicit constexpr BotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BotArenaChallengeList(const BotArenaChallengeList& from);
  BotArenaChallengeList(BotArenaChallengeList&& from) noexcept
    : BotArenaChallengeList() {
    *this = ::std::move(from);
  }

  inline BotArenaChallengeList& operator=(const BotArenaChallengeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BotArenaChallengeList& operator=(BotArenaChallengeList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BotArenaChallengeList& default_instance() {
    return *internal_default_instance();
  }
  static inline const BotArenaChallengeList* internal_default_instance() {
    return reinterpret_cast<const BotArenaChallengeList*>(
               &_BotArenaChallengeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    311;

  friend void swap(BotArenaChallengeList& a, BotArenaChallengeList& b) {
    a.Swap(&b);
  }
  inline void Swap(BotArenaChallengeList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BotArenaChallengeList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BotArenaChallengeList* New() const final {
    return new BotArenaChallengeList();
  }

  BotArenaChallengeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BotArenaChallengeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BotArenaChallengeList& from);
  void MergeFrom(const BotArenaChallengeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BotArenaChallengeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BotArenaChallengeList";
  }
  protected:
  explicit BotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .KWMsg.BotArenaChallengeItem list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::KWMsg::BotArenaChallengeItem* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaChallengeItem >*
      mutable_list();
  private:
  const ::KWMsg::BotArenaChallengeItem& _internal_list(int index) const;
  ::KWMsg::BotArenaChallengeItem* _internal_add_list();
  public:
  const ::KWMsg::BotArenaChallengeItem& list(int index) const;
  ::KWMsg::BotArenaChallengeItem* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaChallengeItem >&
      list() const;

  // @@protoc_insertion_point(class_scope:KWMsg.BotArenaChallengeList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaChallengeItem > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqGetPlayerBotArenaChallengeList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGetPlayerBotArenaChallengeList) */ {
 public:
  inline ReqGetPlayerBotArenaChallengeList() : ReqGetPlayerBotArenaChallengeList(nullptr) {}
  ~ReqGetPlayerBotArenaChallengeList() override;
  explicit constexpr ReqGetPlayerBotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetPlayerBotArenaChallengeList(const ReqGetPlayerBotArenaChallengeList& from);
  ReqGetPlayerBotArenaChallengeList(ReqGetPlayerBotArenaChallengeList&& from) noexcept
    : ReqGetPlayerBotArenaChallengeList() {
    *this = ::std::move(from);
  }

  inline ReqGetPlayerBotArenaChallengeList& operator=(const ReqGetPlayerBotArenaChallengeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetPlayerBotArenaChallengeList& operator=(ReqGetPlayerBotArenaChallengeList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetPlayerBotArenaChallengeList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetPlayerBotArenaChallengeList* internal_default_instance() {
    return reinterpret_cast<const ReqGetPlayerBotArenaChallengeList*>(
               &_ReqGetPlayerBotArenaChallengeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    312;

  friend void swap(ReqGetPlayerBotArenaChallengeList& a, ReqGetPlayerBotArenaChallengeList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetPlayerBotArenaChallengeList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetPlayerBotArenaChallengeList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGetPlayerBotArenaChallengeList* New() const final {
    return new ReqGetPlayerBotArenaChallengeList();
  }

  ReqGetPlayerBotArenaChallengeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetPlayerBotArenaChallengeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetPlayerBotArenaChallengeList& from);
  void MergeFrom(const ReqGetPlayerBotArenaChallengeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetPlayerBotArenaChallengeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGetPlayerBotArenaChallengeList";
  }
  protected:
  explicit ReqGetPlayerBotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGetPlayerBotArenaChallengeList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckGetPlayerBotArenaChallengeList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGetPlayerBotArenaChallengeList) */ {
 public:
  inline AckGetPlayerBotArenaChallengeList() : AckGetPlayerBotArenaChallengeList(nullptr) {}
  ~AckGetPlayerBotArenaChallengeList() override;
  explicit constexpr AckGetPlayerBotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGetPlayerBotArenaChallengeList(const AckGetPlayerBotArenaChallengeList& from);
  AckGetPlayerBotArenaChallengeList(AckGetPlayerBotArenaChallengeList&& from) noexcept
    : AckGetPlayerBotArenaChallengeList() {
    *this = ::std::move(from);
  }

  inline AckGetPlayerBotArenaChallengeList& operator=(const AckGetPlayerBotArenaChallengeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGetPlayerBotArenaChallengeList& operator=(AckGetPlayerBotArenaChallengeList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGetPlayerBotArenaChallengeList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGetPlayerBotArenaChallengeList* internal_default_instance() {
    return reinterpret_cast<const AckGetPlayerBotArenaChallengeList*>(
               &_AckGetPlayerBotArenaChallengeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    313;

  friend void swap(AckGetPlayerBotArenaChallengeList& a, AckGetPlayerBotArenaChallengeList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGetPlayerBotArenaChallengeList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGetPlayerBotArenaChallengeList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGetPlayerBotArenaChallengeList* New() const final {
    return new AckGetPlayerBotArenaChallengeList();
  }

  AckGetPlayerBotArenaChallengeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGetPlayerBotArenaChallengeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGetPlayerBotArenaChallengeList& from);
  void MergeFrom(const AckGetPlayerBotArenaChallengeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGetPlayerBotArenaChallengeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGetPlayerBotArenaChallengeList";
  }
  protected:
  explicit AckGetPlayerBotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 2,
    kResultFieldNumber = 3,
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.BotArenaChallengeList result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::KWMsg::BotArenaChallengeList& result() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BotArenaChallengeList* release_result();
  ::KWMsg::BotArenaChallengeList* mutable_result();
  void set_allocated_result(::KWMsg::BotArenaChallengeList* result);
  private:
  const ::KWMsg::BotArenaChallengeList& _internal_result() const;
  ::KWMsg::BotArenaChallengeList* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::KWMsg::BotArenaChallengeList* result);
  ::KWMsg::BotArenaChallengeList* unsafe_arena_release_result();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGetPlayerBotArenaChallengeList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::BotArenaChallengeList* result_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqRefreshPlayerBotArenaChallengeList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqRefreshPlayerBotArenaChallengeList) */ {
 public:
  inline ReqRefreshPlayerBotArenaChallengeList() : ReqRefreshPlayerBotArenaChallengeList(nullptr) {}
  ~ReqRefreshPlayerBotArenaChallengeList() override;
  explicit constexpr ReqRefreshPlayerBotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqRefreshPlayerBotArenaChallengeList(const ReqRefreshPlayerBotArenaChallengeList& from);
  ReqRefreshPlayerBotArenaChallengeList(ReqRefreshPlayerBotArenaChallengeList&& from) noexcept
    : ReqRefreshPlayerBotArenaChallengeList() {
    *this = ::std::move(from);
  }

  inline ReqRefreshPlayerBotArenaChallengeList& operator=(const ReqRefreshPlayerBotArenaChallengeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqRefreshPlayerBotArenaChallengeList& operator=(ReqRefreshPlayerBotArenaChallengeList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqRefreshPlayerBotArenaChallengeList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqRefreshPlayerBotArenaChallengeList* internal_default_instance() {
    return reinterpret_cast<const ReqRefreshPlayerBotArenaChallengeList*>(
               &_ReqRefreshPlayerBotArenaChallengeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    314;

  friend void swap(ReqRefreshPlayerBotArenaChallengeList& a, ReqRefreshPlayerBotArenaChallengeList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqRefreshPlayerBotArenaChallengeList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqRefreshPlayerBotArenaChallengeList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqRefreshPlayerBotArenaChallengeList* New() const final {
    return new ReqRefreshPlayerBotArenaChallengeList();
  }

  ReqRefreshPlayerBotArenaChallengeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqRefreshPlayerBotArenaChallengeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqRefreshPlayerBotArenaChallengeList& from);
  void MergeFrom(const ReqRefreshPlayerBotArenaChallengeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqRefreshPlayerBotArenaChallengeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqRefreshPlayerBotArenaChallengeList";
  }
  protected:
  explicit ReqRefreshPlayerBotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqRefreshPlayerBotArenaChallengeList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckRefreshPlayerBotArenaChallengeList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckRefreshPlayerBotArenaChallengeList) */ {
 public:
  inline AckRefreshPlayerBotArenaChallengeList() : AckRefreshPlayerBotArenaChallengeList(nullptr) {}
  ~AckRefreshPlayerBotArenaChallengeList() override;
  explicit constexpr AckRefreshPlayerBotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckRefreshPlayerBotArenaChallengeList(const AckRefreshPlayerBotArenaChallengeList& from);
  AckRefreshPlayerBotArenaChallengeList(AckRefreshPlayerBotArenaChallengeList&& from) noexcept
    : AckRefreshPlayerBotArenaChallengeList() {
    *this = ::std::move(from);
  }

  inline AckRefreshPlayerBotArenaChallengeList& operator=(const AckRefreshPlayerBotArenaChallengeList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckRefreshPlayerBotArenaChallengeList& operator=(AckRefreshPlayerBotArenaChallengeList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckRefreshPlayerBotArenaChallengeList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckRefreshPlayerBotArenaChallengeList* internal_default_instance() {
    return reinterpret_cast<const AckRefreshPlayerBotArenaChallengeList*>(
               &_AckRefreshPlayerBotArenaChallengeList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    315;

  friend void swap(AckRefreshPlayerBotArenaChallengeList& a, AckRefreshPlayerBotArenaChallengeList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckRefreshPlayerBotArenaChallengeList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckRefreshPlayerBotArenaChallengeList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckRefreshPlayerBotArenaChallengeList* New() const final {
    return new AckRefreshPlayerBotArenaChallengeList();
  }

  AckRefreshPlayerBotArenaChallengeList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckRefreshPlayerBotArenaChallengeList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckRefreshPlayerBotArenaChallengeList& from);
  void MergeFrom(const AckRefreshPlayerBotArenaChallengeList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckRefreshPlayerBotArenaChallengeList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckRefreshPlayerBotArenaChallengeList";
  }
  protected:
  explicit AckRefreshPlayerBotArenaChallengeList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 2,
    kResultFieldNumber = 3,
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.BotArenaChallengeList result = 3;
  bool has_result() const;
  private:
  bool _internal_has_result() const;
  public:
  void clear_result();
  const ::KWMsg::BotArenaChallengeList& result() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::BotArenaChallengeList* release_result();
  ::KWMsg::BotArenaChallengeList* mutable_result();
  void set_allocated_result(::KWMsg::BotArenaChallengeList* result);
  private:
  const ::KWMsg::BotArenaChallengeList& _internal_result() const;
  ::KWMsg::BotArenaChallengeList* _internal_mutable_result();
  public:
  void unsafe_arena_set_allocated_result(
      ::KWMsg::BotArenaChallengeList* result);
  ::KWMsg::BotArenaChallengeList* unsafe_arena_release_result();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckRefreshPlayerBotArenaChallengeList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::BotArenaChallengeList* result_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqAdjBotarenaDefensiveTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqAdjBotarenaDefensiveTeam) */ {
 public:
  inline ReqAdjBotarenaDefensiveTeam() : ReqAdjBotarenaDefensiveTeam(nullptr) {}
  ~ReqAdjBotarenaDefensiveTeam() override;
  explicit constexpr ReqAdjBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqAdjBotarenaDefensiveTeam(const ReqAdjBotarenaDefensiveTeam& from);
  ReqAdjBotarenaDefensiveTeam(ReqAdjBotarenaDefensiveTeam&& from) noexcept
    : ReqAdjBotarenaDefensiveTeam() {
    *this = ::std::move(from);
  }

  inline ReqAdjBotarenaDefensiveTeam& operator=(const ReqAdjBotarenaDefensiveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqAdjBotarenaDefensiveTeam& operator=(ReqAdjBotarenaDefensiveTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqAdjBotarenaDefensiveTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqAdjBotarenaDefensiveTeam* internal_default_instance() {
    return reinterpret_cast<const ReqAdjBotarenaDefensiveTeam*>(
               &_ReqAdjBotarenaDefensiveTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    316;

  friend void swap(ReqAdjBotarenaDefensiveTeam& a, ReqAdjBotarenaDefensiveTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqAdjBotarenaDefensiveTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqAdjBotarenaDefensiveTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqAdjBotarenaDefensiveTeam* New() const final {
    return new ReqAdjBotarenaDefensiveTeam();
  }

  ReqAdjBotarenaDefensiveTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqAdjBotarenaDefensiveTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqAdjBotarenaDefensiveTeam& from);
  void MergeFrom(const ReqAdjBotarenaDefensiveTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqAdjBotarenaDefensiveTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqAdjBotarenaDefensiveTeam";
  }
  protected:
  explicit ReqAdjBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kIdxFieldNumber = 2,
  };
  // bytes witch_id = 3;
  void clear_witch_id();
  const std::string& witch_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_witch_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_witch_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_witch_id();
  void set_allocated_witch_id(std::string* witch_id);
  private:
  const std::string& _internal_witch_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_witch_id(const std::string& value);
  std::string* _internal_mutable_witch_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int32 idx = 2;
  void clear_idx();
  ::PROTOBUF_NAMESPACE_ID::int32 idx() const;
  void set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_idx() const;
  void _internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqAdjBotarenaDefensiveTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr witch_id_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int32 idx_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckAdjBotarenaDefensiveTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckAdjBotarenaDefensiveTeam) */ {
 public:
  inline AckAdjBotarenaDefensiveTeam() : AckAdjBotarenaDefensiveTeam(nullptr) {}
  ~AckAdjBotarenaDefensiveTeam() override;
  explicit constexpr AckAdjBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckAdjBotarenaDefensiveTeam(const AckAdjBotarenaDefensiveTeam& from);
  AckAdjBotarenaDefensiveTeam(AckAdjBotarenaDefensiveTeam&& from) noexcept
    : AckAdjBotarenaDefensiveTeam() {
    *this = ::std::move(from);
  }

  inline AckAdjBotarenaDefensiveTeam& operator=(const AckAdjBotarenaDefensiveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckAdjBotarenaDefensiveTeam& operator=(AckAdjBotarenaDefensiveTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckAdjBotarenaDefensiveTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckAdjBotarenaDefensiveTeam* internal_default_instance() {
    return reinterpret_cast<const AckAdjBotarenaDefensiveTeam*>(
               &_AckAdjBotarenaDefensiveTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    317;

  friend void swap(AckAdjBotarenaDefensiveTeam& a, AckAdjBotarenaDefensiveTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(AckAdjBotarenaDefensiveTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckAdjBotarenaDefensiveTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckAdjBotarenaDefensiveTeam* New() const final {
    return new AckAdjBotarenaDefensiveTeam();
  }

  AckAdjBotarenaDefensiveTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckAdjBotarenaDefensiveTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckAdjBotarenaDefensiveTeam& from);
  void MergeFrom(const AckAdjBotarenaDefensiveTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckAdjBotarenaDefensiveTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckAdjBotarenaDefensiveTeam";
  }
  protected:
  explicit AckAdjBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckAdjBotarenaDefensiveTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqResetBotarenaDefensiveTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqResetBotarenaDefensiveTeam) */ {
 public:
  inline ReqResetBotarenaDefensiveTeam() : ReqResetBotarenaDefensiveTeam(nullptr) {}
  ~ReqResetBotarenaDefensiveTeam() override;
  explicit constexpr ReqResetBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqResetBotarenaDefensiveTeam(const ReqResetBotarenaDefensiveTeam& from);
  ReqResetBotarenaDefensiveTeam(ReqResetBotarenaDefensiveTeam&& from) noexcept
    : ReqResetBotarenaDefensiveTeam() {
    *this = ::std::move(from);
  }

  inline ReqResetBotarenaDefensiveTeam& operator=(const ReqResetBotarenaDefensiveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqResetBotarenaDefensiveTeam& operator=(ReqResetBotarenaDefensiveTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqResetBotarenaDefensiveTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqResetBotarenaDefensiveTeam* internal_default_instance() {
    return reinterpret_cast<const ReqResetBotarenaDefensiveTeam*>(
               &_ReqResetBotarenaDefensiveTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    318;

  friend void swap(ReqResetBotarenaDefensiveTeam& a, ReqResetBotarenaDefensiveTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqResetBotarenaDefensiveTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqResetBotarenaDefensiveTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqResetBotarenaDefensiveTeam* New() const final {
    return new ReqResetBotarenaDefensiveTeam();
  }

  ReqResetBotarenaDefensiveTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqResetBotarenaDefensiveTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqResetBotarenaDefensiveTeam& from);
  void MergeFrom(const ReqResetBotarenaDefensiveTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqResetBotarenaDefensiveTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqResetBotarenaDefensiveTeam";
  }
  protected:
  explicit ReqResetBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqResetBotarenaDefensiveTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckResetBotarenaDefensiveTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckResetBotarenaDefensiveTeam) */ {
 public:
  inline AckResetBotarenaDefensiveTeam() : AckResetBotarenaDefensiveTeam(nullptr) {}
  ~AckResetBotarenaDefensiveTeam() override;
  explicit constexpr AckResetBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckResetBotarenaDefensiveTeam(const AckResetBotarenaDefensiveTeam& from);
  AckResetBotarenaDefensiveTeam(AckResetBotarenaDefensiveTeam&& from) noexcept
    : AckResetBotarenaDefensiveTeam() {
    *this = ::std::move(from);
  }

  inline AckResetBotarenaDefensiveTeam& operator=(const AckResetBotarenaDefensiveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckResetBotarenaDefensiveTeam& operator=(AckResetBotarenaDefensiveTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckResetBotarenaDefensiveTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckResetBotarenaDefensiveTeam* internal_default_instance() {
    return reinterpret_cast<const AckResetBotarenaDefensiveTeam*>(
               &_AckResetBotarenaDefensiveTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    319;

  friend void swap(AckResetBotarenaDefensiveTeam& a, AckResetBotarenaDefensiveTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(AckResetBotarenaDefensiveTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckResetBotarenaDefensiveTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckResetBotarenaDefensiveTeam* New() const final {
    return new AckResetBotarenaDefensiveTeam();
  }

  AckResetBotarenaDefensiveTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckResetBotarenaDefensiveTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckResetBotarenaDefensiveTeam& from);
  void MergeFrom(const AckResetBotarenaDefensiveTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckResetBotarenaDefensiveTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckResetBotarenaDefensiveTeam";
  }
  protected:
  explicit AckResetBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckResetBotarenaDefensiveTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqQuickConfigBotarenaDefensiveTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqQuickConfigBotarenaDefensiveTeam) */ {
 public:
  inline ReqQuickConfigBotarenaDefensiveTeam() : ReqQuickConfigBotarenaDefensiveTeam(nullptr) {}
  ~ReqQuickConfigBotarenaDefensiveTeam() override;
  explicit constexpr ReqQuickConfigBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqQuickConfigBotarenaDefensiveTeam(const ReqQuickConfigBotarenaDefensiveTeam& from);
  ReqQuickConfigBotarenaDefensiveTeam(ReqQuickConfigBotarenaDefensiveTeam&& from) noexcept
    : ReqQuickConfigBotarenaDefensiveTeam() {
    *this = ::std::move(from);
  }

  inline ReqQuickConfigBotarenaDefensiveTeam& operator=(const ReqQuickConfigBotarenaDefensiveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqQuickConfigBotarenaDefensiveTeam& operator=(ReqQuickConfigBotarenaDefensiveTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqQuickConfigBotarenaDefensiveTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqQuickConfigBotarenaDefensiveTeam* internal_default_instance() {
    return reinterpret_cast<const ReqQuickConfigBotarenaDefensiveTeam*>(
               &_ReqQuickConfigBotarenaDefensiveTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    320;

  friend void swap(ReqQuickConfigBotarenaDefensiveTeam& a, ReqQuickConfigBotarenaDefensiveTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqQuickConfigBotarenaDefensiveTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqQuickConfigBotarenaDefensiveTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqQuickConfigBotarenaDefensiveTeam* New() const final {
    return new ReqQuickConfigBotarenaDefensiveTeam();
  }

  ReqQuickConfigBotarenaDefensiveTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqQuickConfigBotarenaDefensiveTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqQuickConfigBotarenaDefensiveTeam& from);
  void MergeFrom(const ReqQuickConfigBotarenaDefensiveTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqQuickConfigBotarenaDefensiveTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqQuickConfigBotarenaDefensiveTeam";
  }
  protected:
  explicit ReqQuickConfigBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdListFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // repeated bytes witch_id_list = 2;
  int witch_id_list_size() const;
  private:
  int _internal_witch_id_list_size() const;
  public:
  void clear_witch_id_list();
  const std::string& witch_id_list(int index) const;
  std::string* mutable_witch_id_list(int index);
  void set_witch_id_list(int index, const std::string& value);
  void set_witch_id_list(int index, std::string&& value);
  void set_witch_id_list(int index, const char* value);
  void set_witch_id_list(int index, const void* value, size_t size);
  std::string* add_witch_id_list();
  void add_witch_id_list(const std::string& value);
  void add_witch_id_list(std::string&& value);
  void add_witch_id_list(const char* value);
  void add_witch_id_list(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& witch_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_witch_id_list();
  private:
  const std::string& _internal_witch_id_list(int index) const;
  std::string* _internal_add_witch_id_list();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqQuickConfigBotarenaDefensiveTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> witch_id_list_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckQuickConfigBotarenaDefensiveTeam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckQuickConfigBotarenaDefensiveTeam) */ {
 public:
  inline AckQuickConfigBotarenaDefensiveTeam() : AckQuickConfigBotarenaDefensiveTeam(nullptr) {}
  ~AckQuickConfigBotarenaDefensiveTeam() override;
  explicit constexpr AckQuickConfigBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckQuickConfigBotarenaDefensiveTeam(const AckQuickConfigBotarenaDefensiveTeam& from);
  AckQuickConfigBotarenaDefensiveTeam(AckQuickConfigBotarenaDefensiveTeam&& from) noexcept
    : AckQuickConfigBotarenaDefensiveTeam() {
    *this = ::std::move(from);
  }

  inline AckQuickConfigBotarenaDefensiveTeam& operator=(const AckQuickConfigBotarenaDefensiveTeam& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckQuickConfigBotarenaDefensiveTeam& operator=(AckQuickConfigBotarenaDefensiveTeam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckQuickConfigBotarenaDefensiveTeam& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckQuickConfigBotarenaDefensiveTeam* internal_default_instance() {
    return reinterpret_cast<const AckQuickConfigBotarenaDefensiveTeam*>(
               &_AckQuickConfigBotarenaDefensiveTeam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    321;

  friend void swap(AckQuickConfigBotarenaDefensiveTeam& a, AckQuickConfigBotarenaDefensiveTeam& b) {
    a.Swap(&b);
  }
  inline void Swap(AckQuickConfigBotarenaDefensiveTeam* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckQuickConfigBotarenaDefensiveTeam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckQuickConfigBotarenaDefensiveTeam* New() const final {
    return new AckQuickConfigBotarenaDefensiveTeam();
  }

  AckQuickConfigBotarenaDefensiveTeam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckQuickConfigBotarenaDefensiveTeam>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckQuickConfigBotarenaDefensiveTeam& from);
  void MergeFrom(const AckQuickConfigBotarenaDefensiveTeam& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckQuickConfigBotarenaDefensiveTeam* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckQuickConfigBotarenaDefensiveTeam";
  }
  protected:
  explicit AckQuickConfigBotarenaDefensiveTeam(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWitchIdListFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated bytes witch_id_list = 2;
  int witch_id_list_size() const;
  private:
  int _internal_witch_id_list_size() const;
  public:
  void clear_witch_id_list();
  const std::string& witch_id_list(int index) const;
  std::string* mutable_witch_id_list(int index);
  void set_witch_id_list(int index, const std::string& value);
  void set_witch_id_list(int index, std::string&& value);
  void set_witch_id_list(int index, const char* value);
  void set_witch_id_list(int index, const void* value, size_t size);
  std::string* add_witch_id_list();
  void add_witch_id_list(const std::string& value);
  void add_witch_id_list(std::string&& value);
  void add_witch_id_list(const char* value);
  void add_witch_id_list(const void* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& witch_id_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_witch_id_list();
  private:
  const std::string& _internal_witch_id_list(int index) const;
  std::string* _internal_add_witch_id_list();
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckQuickConfigBotarenaDefensiveTeam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> witch_id_list_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqBuyShabowToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBuyShabowToken) */ {
 public:
  inline ReqBuyShabowToken() : ReqBuyShabowToken(nullptr) {}
  ~ReqBuyShabowToken() override;
  explicit constexpr ReqBuyShabowToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBuyShabowToken(const ReqBuyShabowToken& from);
  ReqBuyShabowToken(ReqBuyShabowToken&& from) noexcept
    : ReqBuyShabowToken() {
    *this = ::std::move(from);
  }

  inline ReqBuyShabowToken& operator=(const ReqBuyShabowToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBuyShabowToken& operator=(ReqBuyShabowToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBuyShabowToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBuyShabowToken* internal_default_instance() {
    return reinterpret_cast<const ReqBuyShabowToken*>(
               &_ReqBuyShabowToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    322;

  friend void swap(ReqBuyShabowToken& a, ReqBuyShabowToken& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBuyShabowToken* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBuyShabowToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBuyShabowToken* New() const final {
    return new ReqBuyShabowToken();
  }

  ReqBuyShabowToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBuyShabowToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBuyShabowToken& from);
  void MergeFrom(const ReqBuyShabowToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBuyShabowToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBuyShabowToken";
  }
  protected:
  explicit ReqBuyShabowToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kCountFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int64 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBuyShabowToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckBuyShabowToken final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBuyShabowToken) */ {
 public:
  inline AckBuyShabowToken() : AckBuyShabowToken(nullptr) {}
  ~AckBuyShabowToken() override;
  explicit constexpr AckBuyShabowToken(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBuyShabowToken(const AckBuyShabowToken& from);
  AckBuyShabowToken(AckBuyShabowToken&& from) noexcept
    : AckBuyShabowToken() {
    *this = ::std::move(from);
  }

  inline AckBuyShabowToken& operator=(const AckBuyShabowToken& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBuyShabowToken& operator=(AckBuyShabowToken&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBuyShabowToken& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBuyShabowToken* internal_default_instance() {
    return reinterpret_cast<const AckBuyShabowToken*>(
               &_AckBuyShabowToken_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    323;

  friend void swap(AckBuyShabowToken& a, AckBuyShabowToken& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBuyShabowToken* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBuyShabowToken* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBuyShabowToken* New() const final {
    return new AckBuyShabowToken();
  }

  AckBuyShabowToken* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBuyShabowToken>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBuyShabowToken& from);
  void MergeFrom(const AckBuyShabowToken& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBuyShabowToken* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBuyShabowToken";
  }
  protected:
  explicit AckBuyShabowToken(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBuyShabowToken)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class BotArenaReplayItem final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BotArenaReplayItem) */ {
 public:
  inline BotArenaReplayItem() : BotArenaReplayItem(nullptr) {}
  ~BotArenaReplayItem() override;
  explicit constexpr BotArenaReplayItem(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BotArenaReplayItem(const BotArenaReplayItem& from);
  BotArenaReplayItem(BotArenaReplayItem&& from) noexcept
    : BotArenaReplayItem() {
    *this = ::std::move(from);
  }

  inline BotArenaReplayItem& operator=(const BotArenaReplayItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline BotArenaReplayItem& operator=(BotArenaReplayItem&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BotArenaReplayItem& default_instance() {
    return *internal_default_instance();
  }
  enum EntityCase {
    kPlayerInfo = 2,
    kRobotId = 3,
    ENTITY_NOT_SET = 0,
  };

  static inline const BotArenaReplayItem* internal_default_instance() {
    return reinterpret_cast<const BotArenaReplayItem*>(
               &_BotArenaReplayItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    324;

  friend void swap(BotArenaReplayItem& a, BotArenaReplayItem& b) {
    a.Swap(&b);
  }
  inline void Swap(BotArenaReplayItem* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BotArenaReplayItem* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BotArenaReplayItem* New() const final {
    return new BotArenaReplayItem();
  }

  BotArenaReplayItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BotArenaReplayItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BotArenaReplayItem& from);
  void MergeFrom(const BotArenaReplayItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BotArenaReplayItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BotArenaReplayItem";
  }
  protected:
  explicit BotArenaReplayItem(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRewardFieldNumber = 4,
    kCreateTsFieldNumber = 5,
    kResultFieldNumber = 6,
    kIsCounterAttackFieldNumber = 7,
    kPlayerInfoFieldNumber = 2,
    kRobotIdFieldNumber = 3,
  };
  // .KWMsg.Ident id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const ::KWMsg::Ident& id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_id();
  ::KWMsg::Ident* mutable_id();
  void set_allocated_id(::KWMsg::Ident* id);
  private:
  const ::KWMsg::Ident& _internal_id() const;
  ::KWMsg::Ident* _internal_mutable_id();
  public:
  void unsafe_arena_set_allocated_id(
      ::KWMsg::Ident* id);
  ::KWMsg::Ident* unsafe_arena_release_id();

  // .KWMsg.RewardInfo reward = 4;
  bool has_reward() const;
  private:
  bool _internal_has_reward() const;
  public:
  void clear_reward();
  const ::KWMsg::RewardInfo& reward() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::RewardInfo* release_reward();
  ::KWMsg::RewardInfo* mutable_reward();
  void set_allocated_reward(::KWMsg::RewardInfo* reward);
  private:
  const ::KWMsg::RewardInfo& _internal_reward() const;
  ::KWMsg::RewardInfo* _internal_mutable_reward();
  public:
  void unsafe_arena_set_allocated_reward(
      ::KWMsg::RewardInfo* reward);
  ::KWMsg::RewardInfo* unsafe_arena_release_reward();

  // int32 create_ts = 5;
  void clear_create_ts();
  ::PROTOBUF_NAMESPACE_ID::int32 create_ts() const;
  void set_create_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_create_ts() const;
  void _internal_set_create_ts(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // .KWMsg.BotarenaReplayResult result = 6;
  void clear_result();
  ::KWMsg::BotarenaReplayResult result() const;
  void set_result(::KWMsg::BotarenaReplayResult value);
  private:
  ::KWMsg::BotarenaReplayResult _internal_result() const;
  void _internal_set_result(::KWMsg::BotarenaReplayResult value);
  public:

  // bool is_counter_attack = 7;
  void clear_is_counter_attack();
  bool is_counter_attack() const;
  void set_is_counter_attack(bool value);
  private:
  bool _internal_is_counter_attack() const;
  void _internal_set_is_counter_attack(bool value);
  public:

  // .KWMsg.PlayerInfo player_info = 2;
  bool has_player_info() const;
  private:
  bool _internal_has_player_info() const;
  public:
  void clear_player_info();
  const ::KWMsg::PlayerInfo& player_info() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::PlayerInfo* release_player_info();
  ::KWMsg::PlayerInfo* mutable_player_info();
  void set_allocated_player_info(::KWMsg::PlayerInfo* player_info);
  private:
  const ::KWMsg::PlayerInfo& _internal_player_info() const;
  ::KWMsg::PlayerInfo* _internal_mutable_player_info();
  public:
  void unsafe_arena_set_allocated_player_info(
      ::KWMsg::PlayerInfo* player_info);
  ::KWMsg::PlayerInfo* unsafe_arena_release_player_info();

  // bytes robot_id = 3;
  bool has_robot_id() const;
  private:
  bool _internal_has_robot_id() const;
  public:
  void clear_robot_id();
  const std::string& robot_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_robot_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_robot_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_robot_id();
  void set_allocated_robot_id(std::string* robot_id);
  private:
  const std::string& _internal_robot_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_robot_id(const std::string& value);
  std::string* _internal_mutable_robot_id();
  public:

  void clear_entity();
  EntityCase entity_case() const;
  // @@protoc_insertion_point(class_scope:KWMsg.BotArenaReplayItem)
 private:
  class _Internal;
  void set_has_player_info();
  void set_has_robot_id();

  inline bool has_entity() const;
  inline void clear_has_entity();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* id_;
  ::KWMsg::RewardInfo* reward_;
  ::PROTOBUF_NAMESPACE_ID::int32 create_ts_;
  int result_;
  bool is_counter_attack_;
  union EntityUnion {
    constexpr EntityUnion() : _constinit_{} {}
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
    ::KWMsg::PlayerInfo* player_info_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr robot_id_;
  } entity_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class BotArenaReplayList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.BotArenaReplayList) */ {
 public:
  inline BotArenaReplayList() : BotArenaReplayList(nullptr) {}
  ~BotArenaReplayList() override;
  explicit constexpr BotArenaReplayList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  BotArenaReplayList(const BotArenaReplayList& from);
  BotArenaReplayList(BotArenaReplayList&& from) noexcept
    : BotArenaReplayList() {
    *this = ::std::move(from);
  }

  inline BotArenaReplayList& operator=(const BotArenaReplayList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BotArenaReplayList& operator=(BotArenaReplayList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const BotArenaReplayList& default_instance() {
    return *internal_default_instance();
  }
  static inline const BotArenaReplayList* internal_default_instance() {
    return reinterpret_cast<const BotArenaReplayList*>(
               &_BotArenaReplayList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    325;

  friend void swap(BotArenaReplayList& a, BotArenaReplayList& b) {
    a.Swap(&b);
  }
  inline void Swap(BotArenaReplayList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BotArenaReplayList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BotArenaReplayList* New() const final {
    return new BotArenaReplayList();
  }

  BotArenaReplayList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BotArenaReplayList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BotArenaReplayList& from);
  void MergeFrom(const BotArenaReplayList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BotArenaReplayList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.BotArenaReplayList";
  }
  protected:
  explicit BotArenaReplayList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 1,
  };
  // repeated .KWMsg.BotArenaReplayItem list = 1;
  int list_size() const;
  private:
  int _internal_list_size() const;
  public:
  void clear_list();
  ::KWMsg::BotArenaReplayItem* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaReplayItem >*
      mutable_list();
  private:
  const ::KWMsg::BotArenaReplayItem& _internal_list(int index) const;
  ::KWMsg::BotArenaReplayItem* _internal_add_list();
  public:
  const ::KWMsg::BotArenaReplayItem& list(int index) const;
  ::KWMsg::BotArenaReplayItem* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaReplayItem >&
      list() const;

  // @@protoc_insertion_point(class_scope:KWMsg.BotArenaReplayList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaReplayItem > list_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqGetBotArenaReplayList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGetBotArenaReplayList) */ {
 public:
  inline ReqGetBotArenaReplayList() : ReqGetBotArenaReplayList(nullptr) {}
  ~ReqGetBotArenaReplayList() override;
  explicit constexpr ReqGetBotArenaReplayList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetBotArenaReplayList(const ReqGetBotArenaReplayList& from);
  ReqGetBotArenaReplayList(ReqGetBotArenaReplayList&& from) noexcept
    : ReqGetBotArenaReplayList() {
    *this = ::std::move(from);
  }

  inline ReqGetBotArenaReplayList& operator=(const ReqGetBotArenaReplayList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetBotArenaReplayList& operator=(ReqGetBotArenaReplayList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetBotArenaReplayList& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetBotArenaReplayList* internal_default_instance() {
    return reinterpret_cast<const ReqGetBotArenaReplayList*>(
               &_ReqGetBotArenaReplayList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    326;

  friend void swap(ReqGetBotArenaReplayList& a, ReqGetBotArenaReplayList& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetBotArenaReplayList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetBotArenaReplayList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGetBotArenaReplayList* New() const final {
    return new ReqGetBotArenaReplayList();
  }

  ReqGetBotArenaReplayList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetBotArenaReplayList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetBotArenaReplayList& from);
  void MergeFrom(const ReqGetBotArenaReplayList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetBotArenaReplayList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGetBotArenaReplayList";
  }
  protected:
  explicit ReqGetBotArenaReplayList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGetBotArenaReplayList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckGetBotArenaReplayList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGetBotArenaReplayList) */ {
 public:
  inline AckGetBotArenaReplayList() : AckGetBotArenaReplayList(nullptr) {}
  ~AckGetBotArenaReplayList() override;
  explicit constexpr AckGetBotArenaReplayList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGetBotArenaReplayList(const AckGetBotArenaReplayList& from);
  AckGetBotArenaReplayList(AckGetBotArenaReplayList&& from) noexcept
    : AckGetBotArenaReplayList() {
    *this = ::std::move(from);
  }

  inline AckGetBotArenaReplayList& operator=(const AckGetBotArenaReplayList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGetBotArenaReplayList& operator=(AckGetBotArenaReplayList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGetBotArenaReplayList& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGetBotArenaReplayList* internal_default_instance() {
    return reinterpret_cast<const AckGetBotArenaReplayList*>(
               &_AckGetBotArenaReplayList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    327;

  friend void swap(AckGetBotArenaReplayList& a, AckGetBotArenaReplayList& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGetBotArenaReplayList* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGetBotArenaReplayList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGetBotArenaReplayList* New() const final {
    return new AckGetBotArenaReplayList();
  }

  AckGetBotArenaReplayList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGetBotArenaReplayList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGetBotArenaReplayList& from);
  void MergeFrom(const AckGetBotArenaReplayList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGetBotArenaReplayList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGetBotArenaReplayList";
  }
  protected:
  explicit AckGetBotArenaReplayList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReplayListFieldNumber = 3,
    kPlayerIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.BotArenaReplayItem replay_list = 3;
  int replay_list_size() const;
  private:
  int _internal_replay_list_size() const;
  public:
  void clear_replay_list();
  ::KWMsg::BotArenaReplayItem* mutable_replay_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaReplayItem >*
      mutable_replay_list();
  private:
  const ::KWMsg::BotArenaReplayItem& _internal_replay_list(int index) const;
  ::KWMsg::BotArenaReplayItem* _internal_add_replay_list();
  public:
  const ::KWMsg::BotArenaReplayItem& replay_list(int index) const;
  ::KWMsg::BotArenaReplayItem* add_replay_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaReplayItem >&
      replay_list() const;

  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGetBotArenaReplayList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaReplayItem > replay_list_;
  ::KWMsg::Ident* player_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqReplayBotArenaBattle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqReplayBotArenaBattle) */ {
 public:
  inline ReqReplayBotArenaBattle() : ReqReplayBotArenaBattle(nullptr) {}
  ~ReqReplayBotArenaBattle() override;
  explicit constexpr ReqReplayBotArenaBattle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqReplayBotArenaBattle(const ReqReplayBotArenaBattle& from);
  ReqReplayBotArenaBattle(ReqReplayBotArenaBattle&& from) noexcept
    : ReqReplayBotArenaBattle() {
    *this = ::std::move(from);
  }

  inline ReqReplayBotArenaBattle& operator=(const ReqReplayBotArenaBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqReplayBotArenaBattle& operator=(ReqReplayBotArenaBattle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqReplayBotArenaBattle& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqReplayBotArenaBattle* internal_default_instance() {
    return reinterpret_cast<const ReqReplayBotArenaBattle*>(
               &_ReqReplayBotArenaBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    328;

  friend void swap(ReqReplayBotArenaBattle& a, ReqReplayBotArenaBattle& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqReplayBotArenaBattle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqReplayBotArenaBattle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqReplayBotArenaBattle* New() const final {
    return new ReqReplayBotArenaBattle();
  }

  ReqReplayBotArenaBattle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqReplayBotArenaBattle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqReplayBotArenaBattle& from);
  void MergeFrom(const ReqReplayBotArenaBattle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqReplayBotArenaBattle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqReplayBotArenaBattle";
  }
  protected:
  explicit ReqReplayBotArenaBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 1,
    kReplayIdFieldNumber = 2,
  };
  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident replay_id = 2;
  bool has_replay_id() const;
  private:
  bool _internal_has_replay_id() const;
  public:
  void clear_replay_id();
  const ::KWMsg::Ident& replay_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_replay_id();
  ::KWMsg::Ident* mutable_replay_id();
  void set_allocated_replay_id(::KWMsg::Ident* replay_id);
  private:
  const ::KWMsg::Ident& _internal_replay_id() const;
  ::KWMsg::Ident* _internal_mutable_replay_id();
  public:
  void unsafe_arena_set_allocated_replay_id(
      ::KWMsg::Ident* replay_id);
  ::KWMsg::Ident* unsafe_arena_release_replay_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqReplayBotArenaBattle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* replay_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckReplayBotArenaBattle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckReplayBotArenaBattle) */ {
 public:
  inline AckReplayBotArenaBattle() : AckReplayBotArenaBattle(nullptr) {}
  ~AckReplayBotArenaBattle() override;
  explicit constexpr AckReplayBotArenaBattle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckReplayBotArenaBattle(const AckReplayBotArenaBattle& from);
  AckReplayBotArenaBattle(AckReplayBotArenaBattle&& from) noexcept
    : AckReplayBotArenaBattle() {
    *this = ::std::move(from);
  }

  inline AckReplayBotArenaBattle& operator=(const AckReplayBotArenaBattle& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckReplayBotArenaBattle& operator=(AckReplayBotArenaBattle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckReplayBotArenaBattle& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckReplayBotArenaBattle* internal_default_instance() {
    return reinterpret_cast<const AckReplayBotArenaBattle*>(
               &_AckReplayBotArenaBattle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    329;

  friend void swap(AckReplayBotArenaBattle& a, AckReplayBotArenaBattle& b) {
    a.Swap(&b);
  }
  inline void Swap(AckReplayBotArenaBattle* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckReplayBotArenaBattle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckReplayBotArenaBattle* New() const final {
    return new AckReplayBotArenaBattle();
  }

  AckReplayBotArenaBattle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckReplayBotArenaBattle>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckReplayBotArenaBattle& from);
  void MergeFrom(const AckReplayBotArenaBattle& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckReplayBotArenaBattle* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckReplayBotArenaBattle";
  }
  protected:
  explicit AckReplayBotArenaBattle(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 2,
    kReplayIdFieldNumber = 3,
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.Ident replay_id = 3;
  bool has_replay_id() const;
  private:
  bool _internal_has_replay_id() const;
  public:
  void clear_replay_id();
  const ::KWMsg::Ident& replay_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_replay_id();
  ::KWMsg::Ident* mutable_replay_id();
  void set_allocated_replay_id(::KWMsg::Ident* replay_id);
  private:
  const ::KWMsg::Ident& _internal_replay_id() const;
  ::KWMsg::Ident* _internal_mutable_replay_id();
  public:
  void unsafe_arena_set_allocated_replay_id(
      ::KWMsg::Ident* replay_id);
  ::KWMsg::Ident* unsafe_arena_release_replay_id();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckReplayBotArenaBattle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::Ident* replay_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ShopReceipt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ShopReceipt) */ {
 public:
  inline ShopReceipt() : ShopReceipt(nullptr) {}
  ~ShopReceipt() override;
  explicit constexpr ShopReceipt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ShopReceipt(const ShopReceipt& from);
  ShopReceipt(ShopReceipt&& from) noexcept
    : ShopReceipt() {
    *this = ::std::move(from);
  }

  inline ShopReceipt& operator=(const ShopReceipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShopReceipt& operator=(ShopReceipt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ShopReceipt& default_instance() {
    return *internal_default_instance();
  }
  static inline const ShopReceipt* internal_default_instance() {
    return reinterpret_cast<const ShopReceipt*>(
               &_ShopReceipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    330;

  friend void swap(ShopReceipt& a, ShopReceipt& b) {
    a.Swap(&b);
  }
  inline void Swap(ShopReceipt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShopReceipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShopReceipt* New() const final {
    return new ShopReceipt();
  }

  ShopReceipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShopReceipt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShopReceipt& from);
  void MergeFrom(const ShopReceipt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShopReceipt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ShopReceipt";
  }
  protected:
  explicit ShopReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductIdFieldNumber = 1,
    kShopGoodsIdFieldNumber = 2,
    kShopIdFieldNumber = 3,
    kCountFieldNumber = 4,
  };
  // bytes product_id = 1;
  void clear_product_id();
  const std::string& product_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // bytes shop_goods_id = 2;
  void clear_shop_goods_id();
  const std::string& shop_goods_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shop_goods_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shop_goods_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_shop_goods_id();
  void set_allocated_shop_goods_id(std::string* shop_goods_id);
  private:
  const std::string& _internal_shop_goods_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shop_goods_id(const std::string& value);
  std::string* _internal_mutable_shop_goods_id();
  public:

  // bytes shop_id = 3;
  void clear_shop_id();
  const std::string& shop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shop_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_shop_id();
  void set_allocated_shop_id(std::string* shop_id);
  private:
  const std::string& _internal_shop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shop_id(const std::string& value);
  std::string* _internal_mutable_shop_id();
  public:

  // int64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ShopReceipt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shop_goods_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shop_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class DelPlayerShopReceipts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.DelPlayerShopReceipts) */ {
 public:
  inline DelPlayerShopReceipts() : DelPlayerShopReceipts(nullptr) {}
  ~DelPlayerShopReceipts() override;
  explicit constexpr DelPlayerShopReceipts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  DelPlayerShopReceipts(const DelPlayerShopReceipts& from);
  DelPlayerShopReceipts(DelPlayerShopReceipts&& from) noexcept
    : DelPlayerShopReceipts() {
    *this = ::std::move(from);
  }

  inline DelPlayerShopReceipts& operator=(const DelPlayerShopReceipts& from) {
    CopyFrom(from);
    return *this;
  }
  inline DelPlayerShopReceipts& operator=(DelPlayerShopReceipts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const DelPlayerShopReceipts& default_instance() {
    return *internal_default_instance();
  }
  static inline const DelPlayerShopReceipts* internal_default_instance() {
    return reinterpret_cast<const DelPlayerShopReceipts*>(
               &_DelPlayerShopReceipts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    331;

  friend void swap(DelPlayerShopReceipts& a, DelPlayerShopReceipts& b) {
    a.Swap(&b);
  }
  inline void Swap(DelPlayerShopReceipts* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DelPlayerShopReceipts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DelPlayerShopReceipts* New() const final {
    return new DelPlayerShopReceipts();
  }

  DelPlayerShopReceipts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DelPlayerShopReceipts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DelPlayerShopReceipts& from);
  void MergeFrom(const DelPlayerShopReceipts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DelPlayerShopReceipts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.DelPlayerShopReceipts";
  }
  protected:
  explicit DelPlayerShopReceipts(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShopIdFieldNumber = 2,
    kShopGoodsIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
  };
  // bytes shop_id = 2;
  void clear_shop_id();
  const std::string& shop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shop_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_shop_id();
  void set_allocated_shop_id(std::string* shop_id);
  private:
  const std::string& _internal_shop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shop_id(const std::string& value);
  std::string* _internal_mutable_shop_id();
  public:

  // bytes shop_goods_id = 3;
  void clear_shop_goods_id();
  const std::string& shop_goods_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shop_goods_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shop_goods_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_shop_goods_id();
  void set_allocated_shop_goods_id(std::string* shop_goods_id);
  private:
  const std::string& _internal_shop_goods_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shop_goods_id(const std::string& value);
  std::string* _internal_mutable_shop_goods_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.DelPlayerShopReceipts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shop_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shop_goods_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class UpdPlayerShopReceipt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.UpdPlayerShopReceipt) */ {
 public:
  inline UpdPlayerShopReceipt() : UpdPlayerShopReceipt(nullptr) {}
  ~UpdPlayerShopReceipt() override;
  explicit constexpr UpdPlayerShopReceipt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  UpdPlayerShopReceipt(const UpdPlayerShopReceipt& from);
  UpdPlayerShopReceipt(UpdPlayerShopReceipt&& from) noexcept
    : UpdPlayerShopReceipt() {
    *this = ::std::move(from);
  }

  inline UpdPlayerShopReceipt& operator=(const UpdPlayerShopReceipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpdPlayerShopReceipt& operator=(UpdPlayerShopReceipt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const UpdPlayerShopReceipt& default_instance() {
    return *internal_default_instance();
  }
  static inline const UpdPlayerShopReceipt* internal_default_instance() {
    return reinterpret_cast<const UpdPlayerShopReceipt*>(
               &_UpdPlayerShopReceipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    332;

  friend void swap(UpdPlayerShopReceipt& a, UpdPlayerShopReceipt& b) {
    a.Swap(&b);
  }
  inline void Swap(UpdPlayerShopReceipt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpdPlayerShopReceipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpdPlayerShopReceipt* New() const final {
    return new UpdPlayerShopReceipt();
  }

  UpdPlayerShopReceipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpdPlayerShopReceipt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpdPlayerShopReceipt& from);
  void MergeFrom(const UpdPlayerShopReceipt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpdPlayerShopReceipt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.UpdPlayerShopReceipt";
  }
  protected:
  explicit UpdPlayerShopReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShopIdFieldNumber = 2,
    kShopGoodsIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kReceiptFieldNumber = 4,
  };
  // bytes shop_id = 2;
  void clear_shop_id();
  const std::string& shop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shop_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_shop_id();
  void set_allocated_shop_id(std::string* shop_id);
  private:
  const std::string& _internal_shop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shop_id(const std::string& value);
  std::string* _internal_mutable_shop_id();
  public:

  // bytes shop_goods_id = 3;
  void clear_shop_goods_id();
  const std::string& shop_goods_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shop_goods_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shop_goods_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_shop_goods_id();
  void set_allocated_shop_goods_id(std::string* shop_goods_id);
  private:
  const std::string& _internal_shop_goods_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shop_goods_id(const std::string& value);
  std::string* _internal_mutable_shop_goods_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.ShopReceipt receipt = 4;
  bool has_receipt() const;
  private:
  bool _internal_has_receipt() const;
  public:
  void clear_receipt();
  const ::KWMsg::ShopReceipt& receipt() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::ShopReceipt* release_receipt();
  ::KWMsg::ShopReceipt* mutable_receipt();
  void set_allocated_receipt(::KWMsg::ShopReceipt* receipt);
  private:
  const ::KWMsg::ShopReceipt& _internal_receipt() const;
  ::KWMsg::ShopReceipt* _internal_mutable_receipt();
  public:
  void unsafe_arena_set_allocated_receipt(
      ::KWMsg::ShopReceipt* receipt);
  ::KWMsg::ShopReceipt* unsafe_arena_release_receipt();

  // @@protoc_insertion_point(class_scope:KWMsg.UpdPlayerShopReceipt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shop_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shop_goods_id_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::ShopReceipt* receipt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AddPlayerShopReceipt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AddPlayerShopReceipt) */ {
 public:
  inline AddPlayerShopReceipt() : AddPlayerShopReceipt(nullptr) {}
  ~AddPlayerShopReceipt() override;
  explicit constexpr AddPlayerShopReceipt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AddPlayerShopReceipt(const AddPlayerShopReceipt& from);
  AddPlayerShopReceipt(AddPlayerShopReceipt&& from) noexcept
    : AddPlayerShopReceipt() {
    *this = ::std::move(from);
  }

  inline AddPlayerShopReceipt& operator=(const AddPlayerShopReceipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline AddPlayerShopReceipt& operator=(AddPlayerShopReceipt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AddPlayerShopReceipt& default_instance() {
    return *internal_default_instance();
  }
  static inline const AddPlayerShopReceipt* internal_default_instance() {
    return reinterpret_cast<const AddPlayerShopReceipt*>(
               &_AddPlayerShopReceipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    333;

  friend void swap(AddPlayerShopReceipt& a, AddPlayerShopReceipt& b) {
    a.Swap(&b);
  }
  inline void Swap(AddPlayerShopReceipt* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AddPlayerShopReceipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AddPlayerShopReceipt* New() const final {
    return new AddPlayerShopReceipt();
  }

  AddPlayerShopReceipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AddPlayerShopReceipt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AddPlayerShopReceipt& from);
  void MergeFrom(const AddPlayerShopReceipt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AddPlayerShopReceipt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AddPlayerShopReceipt";
  }
  protected:
  explicit AddPlayerShopReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShopIdFieldNumber = 2,
    kShopGoodsIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kReceiptFieldNumber = 4,
  };
  // bytes shop_id = 2;
  void clear_shop_id();
  const std::string& shop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shop_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_shop_id();
  void set_allocated_shop_id(std::string* shop_id);
  private:
  const std::string& _internal_shop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shop_id(const std::string& value);
  std::string* _internal_mutable_shop_id();
  public:

  // bytes shop_goods_id = 3;
  void clear_shop_goods_id();
  const std::string& shop_goods_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shop_goods_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shop_goods_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_shop_goods_id();
  void set_allocated_shop_goods_id(std::string* shop_goods_id);
  private:
  const std::string& _internal_shop_goods_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shop_goods_id(const std::string& value);
  std::string* _internal_mutable_shop_goods_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.ShopReceipt receipt = 4;
  bool has_receipt() const;
  private:
  bool _internal_has_receipt() const;
  public:
  void clear_receipt();
  const ::KWMsg::ShopReceipt& receipt() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::ShopReceipt* release_receipt();
  ::KWMsg::ShopReceipt* mutable_receipt();
  void set_allocated_receipt(::KWMsg::ShopReceipt* receipt);
  private:
  const ::KWMsg::ShopReceipt& _internal_receipt() const;
  ::KWMsg::ShopReceipt* _internal_mutable_receipt();
  public:
  void unsafe_arena_set_allocated_receipt(
      ::KWMsg::ShopReceipt* receipt);
  ::KWMsg::ShopReceipt* unsafe_arena_release_receipt();

  // @@protoc_insertion_point(class_scope:KWMsg.AddPlayerShopReceipt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shop_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shop_goods_id_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::ShopReceipt* receipt_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqGetShopProducts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqGetShopProducts) */ {
 public:
  inline ReqGetShopProducts() : ReqGetShopProducts(nullptr) {}
  ~ReqGetShopProducts() override;
  explicit constexpr ReqGetShopProducts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqGetShopProducts(const ReqGetShopProducts& from);
  ReqGetShopProducts(ReqGetShopProducts&& from) noexcept
    : ReqGetShopProducts() {
    *this = ::std::move(from);
  }

  inline ReqGetShopProducts& operator=(const ReqGetShopProducts& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqGetShopProducts& operator=(ReqGetShopProducts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqGetShopProducts& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqGetShopProducts* internal_default_instance() {
    return reinterpret_cast<const ReqGetShopProducts*>(
               &_ReqGetShopProducts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    334;

  friend void swap(ReqGetShopProducts& a, ReqGetShopProducts& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqGetShopProducts* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqGetShopProducts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqGetShopProducts* New() const final {
    return new ReqGetShopProducts();
  }

  ReqGetShopProducts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqGetShopProducts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqGetShopProducts& from);
  void MergeFrom(const ReqGetShopProducts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqGetShopProducts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqGetShopProducts";
  }
  protected:
  explicit ReqGetShopProducts(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShopIdFieldNumber = 2,
    kPlayerIdFieldNumber = 1,
  };
  // bytes shop_id = 2;
  void clear_shop_id();
  const std::string& shop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shop_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_shop_id();
  void set_allocated_shop_id(std::string* shop_id);
  private:
  const std::string& _internal_shop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shop_id(const std::string& value);
  std::string* _internal_mutable_shop_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // @@protoc_insertion_point(class_scope:KWMsg.ReqGetShopProducts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shop_id_;
  ::KWMsg::Ident* player_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckGetShopProducts final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckGetShopProducts) */ {
 public:
  inline AckGetShopProducts() : AckGetShopProducts(nullptr) {}
  ~AckGetShopProducts() override;
  explicit constexpr AckGetShopProducts(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckGetShopProducts(const AckGetShopProducts& from);
  AckGetShopProducts(AckGetShopProducts&& from) noexcept
    : AckGetShopProducts() {
    *this = ::std::move(from);
  }

  inline AckGetShopProducts& operator=(const AckGetShopProducts& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckGetShopProducts& operator=(AckGetShopProducts&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckGetShopProducts& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckGetShopProducts* internal_default_instance() {
    return reinterpret_cast<const AckGetShopProducts*>(
               &_AckGetShopProducts_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    335;

  friend void swap(AckGetShopProducts& a, AckGetShopProducts& b) {
    a.Swap(&b);
  }
  inline void Swap(AckGetShopProducts* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckGetShopProducts* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckGetShopProducts* New() const final {
    return new AckGetShopProducts();
  }

  AckGetShopProducts* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckGetShopProducts>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckGetShopProducts& from);
  void MergeFrom(const AckGetShopProducts& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckGetShopProducts* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckGetShopProducts";
  }
  protected:
  explicit AckGetShopProducts(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProductsFieldNumber = 3,
    kPlayerIdFieldNumber = 2,
    kEventCodeFieldNumber = 1,
  };
  // repeated .KWMsg.ProductInfo products = 3;
  int products_size() const;
  private:
  int _internal_products_size() const;
  public:
  void clear_products();
  ::KWMsg::ProductInfo* mutable_products(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ProductInfo >*
      mutable_products();
  private:
  const ::KWMsg::ProductInfo& _internal_products(int index) const;
  ::KWMsg::ProductInfo* _internal_add_products();
  public:
  const ::KWMsg::ProductInfo& products(int index) const;
  ::KWMsg::ProductInfo* add_products();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ProductInfo >&
      products() const;

  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckGetShopProducts)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ProductInfo > products_;
  ::KWMsg::Ident* player_id_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class ReqBuyProduct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.ReqBuyProduct) */ {
 public:
  inline ReqBuyProduct() : ReqBuyProduct(nullptr) {}
  ~ReqBuyProduct() override;
  explicit constexpr ReqBuyProduct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ReqBuyProduct(const ReqBuyProduct& from);
  ReqBuyProduct(ReqBuyProduct&& from) noexcept
    : ReqBuyProduct() {
    *this = ::std::move(from);
  }

  inline ReqBuyProduct& operator=(const ReqBuyProduct& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReqBuyProduct& operator=(ReqBuyProduct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ReqBuyProduct& default_instance() {
    return *internal_default_instance();
  }
  static inline const ReqBuyProduct* internal_default_instance() {
    return reinterpret_cast<const ReqBuyProduct*>(
               &_ReqBuyProduct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    336;

  friend void swap(ReqBuyProduct& a, ReqBuyProduct& b) {
    a.Swap(&b);
  }
  inline void Swap(ReqBuyProduct* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReqBuyProduct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReqBuyProduct* New() const final {
    return new ReqBuyProduct();
  }

  ReqBuyProduct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReqBuyProduct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReqBuyProduct& from);
  void MergeFrom(const ReqBuyProduct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReqBuyProduct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.ReqBuyProduct";
  }
  protected:
  explicit ReqBuyProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShopIdFieldNumber = 2,
    kProductIdFieldNumber = 3,
    kPlayerIdFieldNumber = 1,
    kCountFieldNumber = 4,
  };
  // bytes shop_id = 2;
  void clear_shop_id();
  const std::string& shop_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_shop_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_shop_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_shop_id();
  void set_allocated_shop_id(std::string* shop_id);
  private:
  const std::string& _internal_shop_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_shop_id(const std::string& value);
  std::string* _internal_mutable_shop_id();
  public:

  // bytes product_id = 3;
  void clear_product_id();
  const std::string& product_id() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_product_id(ArgT0&& arg0, ArgT... args);
  std::string* mutable_product_id();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_product_id();
  void set_allocated_product_id(std::string* product_id);
  private:
  const std::string& _internal_product_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_product_id(const std::string& value);
  std::string* _internal_mutable_product_id();
  public:

  // .KWMsg.Ident player_id = 1;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // int64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.ReqBuyProduct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shop_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr product_id_;
  ::KWMsg::Ident* player_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// -------------------------------------------------------------------

class AckBuyProduct final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:KWMsg.AckBuyProduct) */ {
 public:
  inline AckBuyProduct() : AckBuyProduct(nullptr) {}
  ~AckBuyProduct() override;
  explicit constexpr AckBuyProduct(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  AckBuyProduct(const AckBuyProduct& from);
  AckBuyProduct(AckBuyProduct&& from) noexcept
    : AckBuyProduct() {
    *this = ::std::move(from);
  }

  inline AckBuyProduct& operator=(const AckBuyProduct& from) {
    CopyFrom(from);
    return *this;
  }
  inline AckBuyProduct& operator=(AckBuyProduct&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const AckBuyProduct& default_instance() {
    return *internal_default_instance();
  }
  static inline const AckBuyProduct* internal_default_instance() {
    return reinterpret_cast<const AckBuyProduct*>(
               &_AckBuyProduct_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    337;

  friend void swap(AckBuyProduct& a, AckBuyProduct& b) {
    a.Swap(&b);
  }
  inline void Swap(AckBuyProduct* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AckBuyProduct* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AckBuyProduct* New() const final {
    return new AckBuyProduct();
  }

  AckBuyProduct* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AckBuyProduct>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AckBuyProduct& from);
  void MergeFrom(const AckBuyProduct& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AckBuyProduct* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "KWMsg.AckBuyProduct";
  }
  protected:
  explicit AckBuyProduct(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayerIdFieldNumber = 2,
    kProductFieldNumber = 3,
    kCountFieldNumber = 4,
    kEventCodeFieldNumber = 1,
  };
  // .KWMsg.Ident player_id = 2;
  bool has_player_id() const;
  private:
  bool _internal_has_player_id() const;
  public:
  void clear_player_id();
  const ::KWMsg::Ident& player_id() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::Ident* release_player_id();
  ::KWMsg::Ident* mutable_player_id();
  void set_allocated_player_id(::KWMsg::Ident* player_id);
  private:
  const ::KWMsg::Ident& _internal_player_id() const;
  ::KWMsg::Ident* _internal_mutable_player_id();
  public:
  void unsafe_arena_set_allocated_player_id(
      ::KWMsg::Ident* player_id);
  ::KWMsg::Ident* unsafe_arena_release_player_id();

  // .KWMsg.ProductInfo product = 3;
  bool has_product() const;
  private:
  bool _internal_has_product() const;
  public:
  void clear_product();
  const ::KWMsg::ProductInfo& product() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::KWMsg::ProductInfo* release_product();
  ::KWMsg::ProductInfo* mutable_product();
  void set_allocated_product(::KWMsg::ProductInfo* product);
  private:
  const ::KWMsg::ProductInfo& _internal_product() const;
  ::KWMsg::ProductInfo* _internal_mutable_product();
  public:
  void unsafe_arena_set_allocated_product(
      ::KWMsg::ProductInfo* product);
  ::KWMsg::ProductInfo* unsafe_arena_release_product();

  // int64 count = 4;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int64 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_count() const;
  void _internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // .KWMsg.EGameEventCode event_code = 1;
  void clear_event_code();
  ::KWMsg::EGameEventCode event_code() const;
  void set_event_code(::KWMsg::EGameEventCode value);
  private:
  ::KWMsg::EGameEventCode _internal_event_code() const;
  void _internal_set_event_code(::KWMsg::EGameEventCode value);
  public:

  // @@protoc_insertion_point(class_scope:KWMsg.AckBuyProduct)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::KWMsg::Ident* player_id_;
  ::KWMsg::ProductInfo* product_;
  ::PROTOBUF_NAMESPACE_ID::int64 count_;
  int event_code_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_kwmsgshare_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProductPrice

// bytes res = 1;
inline void ProductPrice::clear_res() {
  res_.ClearToEmpty();
}
inline const std::string& ProductPrice::res() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductPrice.res)
  return _internal_res();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductPrice::set_res(ArgT0&& arg0, ArgT... args) {
 
 res_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ProductPrice.res)
}
inline std::string* ProductPrice::mutable_res() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ProductPrice.res)
  return _internal_mutable_res();
}
inline const std::string& ProductPrice::_internal_res() const {
  return res_.Get();
}
inline void ProductPrice::_internal_set_res(const std::string& value) {
  
  res_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProductPrice::_internal_mutable_res() {
  
  return res_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProductPrice::release_res() {
  // @@protoc_insertion_point(field_release:KWMsg.ProductPrice.res)
  return res_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProductPrice::set_allocated_res(std::string* res) {
  if (res != nullptr) {
    
  } else {
    
  }
  res_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ProductPrice.res)
}

// int64 count = 2;
inline void ProductPrice::clear_count() {
  count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProductPrice::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProductPrice::count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductPrice.count)
  return _internal_count();
}
inline void ProductPrice::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void ProductPrice::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ProductPrice.count)
}

// -------------------------------------------------------------------

// ProductContent

// bytes reward_id = 1;
inline void ProductContent::clear_reward_id() {
  reward_id_.ClearToEmpty();
}
inline const std::string& ProductContent::reward_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductContent.reward_id)
  return _internal_reward_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductContent::set_reward_id(ArgT0&& arg0, ArgT... args) {
 
 reward_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ProductContent.reward_id)
}
inline std::string* ProductContent::mutable_reward_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ProductContent.reward_id)
  return _internal_mutable_reward_id();
}
inline const std::string& ProductContent::_internal_reward_id() const {
  return reward_id_.Get();
}
inline void ProductContent::_internal_set_reward_id(const std::string& value) {
  
  reward_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProductContent::_internal_mutable_reward_id() {
  
  return reward_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProductContent::release_reward_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ProductContent.reward_id)
  return reward_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProductContent::set_allocated_reward_id(std::string* reward_id) {
  if (reward_id != nullptr) {
    
  } else {
    
  }
  reward_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ProductContent.reward_id)
}

// int64 count = 2;
inline void ProductContent::clear_count() {
  count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProductContent::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProductContent::count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductContent.count)
  return _internal_count();
}
inline void ProductContent::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void ProductContent::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ProductContent.count)
}

// -------------------------------------------------------------------

// ProductInfo

// bytes product_id = 1;
inline void ProductInfo::clear_product_id() {
  product_id_.ClearToEmpty();
}
inline const std::string& ProductInfo::product_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductInfo.product_id)
  return _internal_product_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductInfo::set_product_id(ArgT0&& arg0, ArgT... args) {
 
 product_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ProductInfo.product_id)
}
inline std::string* ProductInfo::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ProductInfo.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& ProductInfo::_internal_product_id() const {
  return product_id_.Get();
}
inline void ProductInfo::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProductInfo::_internal_mutable_product_id() {
  
  return product_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProductInfo::release_product_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ProductInfo.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProductInfo::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ProductInfo.product_id)
}

// bytes shop_id = 2;
inline void ProductInfo::clear_shop_id() {
  shop_id_.ClearToEmpty();
}
inline const std::string& ProductInfo::shop_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductInfo.shop_id)
  return _internal_shop_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductInfo::set_shop_id(ArgT0&& arg0, ArgT... args) {
 
 shop_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ProductInfo.shop_id)
}
inline std::string* ProductInfo::mutable_shop_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ProductInfo.shop_id)
  return _internal_mutable_shop_id();
}
inline const std::string& ProductInfo::_internal_shop_id() const {
  return shop_id_.Get();
}
inline void ProductInfo::_internal_set_shop_id(const std::string& value) {
  
  shop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProductInfo::_internal_mutable_shop_id() {
  
  return shop_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProductInfo::release_shop_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ProductInfo.shop_id)
  return shop_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProductInfo::set_allocated_shop_id(std::string* shop_id) {
  if (shop_id != nullptr) {
    
  } else {
    
  }
  shop_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shop_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ProductInfo.shop_id)
}

// bytes shop_goods_id = 3;
inline void ProductInfo::clear_shop_goods_id() {
  shop_goods_id_.ClearToEmpty();
}
inline const std::string& ProductInfo::shop_goods_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductInfo.shop_goods_id)
  return _internal_shop_goods_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductInfo::set_shop_goods_id(ArgT0&& arg0, ArgT... args) {
 
 shop_goods_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ProductInfo.shop_goods_id)
}
inline std::string* ProductInfo::mutable_shop_goods_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ProductInfo.shop_goods_id)
  return _internal_mutable_shop_goods_id();
}
inline const std::string& ProductInfo::_internal_shop_goods_id() const {
  return shop_goods_id_.Get();
}
inline void ProductInfo::_internal_set_shop_goods_id(const std::string& value) {
  
  shop_goods_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProductInfo::_internal_mutable_shop_goods_id() {
  
  return shop_goods_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProductInfo::release_shop_goods_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ProductInfo.shop_goods_id)
  return shop_goods_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProductInfo::set_allocated_shop_goods_id(std::string* shop_goods_id) {
  if (shop_goods_id != nullptr) {
    
  } else {
    
  }
  shop_goods_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shop_goods_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ProductInfo.shop_goods_id)
}

// .KWMsg.ShopListingType listing_type = 4;
inline void ProductInfo::clear_listing_type() {
  listing_type_ = 0;
}
inline ::KWMsg::ShopListingType ProductInfo::_internal_listing_type() const {
  return static_cast< ::KWMsg::ShopListingType >(listing_type_);
}
inline ::KWMsg::ShopListingType ProductInfo::listing_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductInfo.listing_type)
  return _internal_listing_type();
}
inline void ProductInfo::_internal_set_listing_type(::KWMsg::ShopListingType value) {
  
  listing_type_ = value;
}
inline void ProductInfo::set_listing_type(::KWMsg::ShopListingType value) {
  _internal_set_listing_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ProductInfo.listing_type)
}

// .KWMsg.ProductContent content = 5;
inline bool ProductInfo::_internal_has_content() const {
  return this != internal_default_instance() && content_ != nullptr;
}
inline bool ProductInfo::has_content() const {
  return _internal_has_content();
}
inline void ProductInfo::clear_content() {
  if (GetArenaForAllocation() == nullptr && content_ != nullptr) {
    delete content_;
  }
  content_ = nullptr;
}
inline const ::KWMsg::ProductContent& ProductInfo::_internal_content() const {
  const ::KWMsg::ProductContent* p = content_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::ProductContent&>(
      ::KWMsg::_ProductContent_default_instance_);
}
inline const ::KWMsg::ProductContent& ProductInfo::content() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductInfo.content)
  return _internal_content();
}
inline void ProductInfo::unsafe_arena_set_allocated_content(
    ::KWMsg::ProductContent* content) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(content_);
  }
  content_ = content;
  if (content) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ProductInfo.content)
}
inline ::KWMsg::ProductContent* ProductInfo::release_content() {
  
  ::KWMsg::ProductContent* temp = content_;
  content_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::ProductContent* ProductInfo::unsafe_arena_release_content() {
  // @@protoc_insertion_point(field_release:KWMsg.ProductInfo.content)
  
  ::KWMsg::ProductContent* temp = content_;
  content_ = nullptr;
  return temp;
}
inline ::KWMsg::ProductContent* ProductInfo::_internal_mutable_content() {
  
  if (content_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::ProductContent>(GetArenaForAllocation());
    content_ = p;
  }
  return content_;
}
inline ::KWMsg::ProductContent* ProductInfo::mutable_content() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ProductInfo.content)
  return _internal_mutable_content();
}
inline void ProductInfo::set_allocated_content(::KWMsg::ProductContent* content) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete content_;
  }
  if (content) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::ProductContent>::GetOwningArena(content);
    if (message_arena != submessage_arena) {
      content = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, content, submessage_arena);
    }
    
  } else {
    
  }
  content_ = content;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ProductInfo.content)
}

// .KWMsg.ProductPrice price = 6;
inline bool ProductInfo::_internal_has_price() const {
  return this != internal_default_instance() && price_ != nullptr;
}
inline bool ProductInfo::has_price() const {
  return _internal_has_price();
}
inline void ProductInfo::clear_price() {
  if (GetArenaForAllocation() == nullptr && price_ != nullptr) {
    delete price_;
  }
  price_ = nullptr;
}
inline const ::KWMsg::ProductPrice& ProductInfo::_internal_price() const {
  const ::KWMsg::ProductPrice* p = price_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::ProductPrice&>(
      ::KWMsg::_ProductPrice_default_instance_);
}
inline const ::KWMsg::ProductPrice& ProductInfo::price() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductInfo.price)
  return _internal_price();
}
inline void ProductInfo::unsafe_arena_set_allocated_price(
    ::KWMsg::ProductPrice* price) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(price_);
  }
  price_ = price;
  if (price) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ProductInfo.price)
}
inline ::KWMsg::ProductPrice* ProductInfo::release_price() {
  
  ::KWMsg::ProductPrice* temp = price_;
  price_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::ProductPrice* ProductInfo::unsafe_arena_release_price() {
  // @@protoc_insertion_point(field_release:KWMsg.ProductInfo.price)
  
  ::KWMsg::ProductPrice* temp = price_;
  price_ = nullptr;
  return temp;
}
inline ::KWMsg::ProductPrice* ProductInfo::_internal_mutable_price() {
  
  if (price_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::ProductPrice>(GetArenaForAllocation());
    price_ = p;
  }
  return price_;
}
inline ::KWMsg::ProductPrice* ProductInfo::mutable_price() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ProductInfo.price)
  return _internal_mutable_price();
}
inline void ProductInfo::set_allocated_price(::KWMsg::ProductPrice* price) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete price_;
  }
  if (price) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::ProductPrice>::GetOwningArena(price);
    if (message_arena != submessage_arena) {
      price = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, price, submessage_arena);
    }
    
  } else {
    
  }
  price_ = price;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ProductInfo.price)
}

// int64 maximum_sells = 7;
inline void ProductInfo::clear_maximum_sells() {
  maximum_sells_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProductInfo::_internal_maximum_sells() const {
  return maximum_sells_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProductInfo::maximum_sells() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductInfo.maximum_sells)
  return _internal_maximum_sells();
}
inline void ProductInfo::_internal_set_maximum_sells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maximum_sells_ = value;
}
inline void ProductInfo::set_maximum_sells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maximum_sells(value);
  // @@protoc_insertion_point(field_set:KWMsg.ProductInfo.maximum_sells)
}

// int64 remain_sells = 8;
inline void ProductInfo::clear_remain_sells() {
  remain_sells_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProductInfo::_internal_remain_sells() const {
  return remain_sells_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProductInfo::remain_sells() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductInfo.remain_sells)
  return _internal_remain_sells();
}
inline void ProductInfo::_internal_set_remain_sells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  remain_sells_ = value;
}
inline void ProductInfo::set_remain_sells(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_remain_sells(value);
  // @@protoc_insertion_point(field_set:KWMsg.ProductInfo.remain_sells)
}

// int64 maximun_once_buys = 9;
inline void ProductInfo::clear_maximun_once_buys() {
  maximun_once_buys_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProductInfo::_internal_maximun_once_buys() const {
  return maximun_once_buys_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ProductInfo::maximun_once_buys() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductInfo.maximun_once_buys)
  return _internal_maximun_once_buys();
}
inline void ProductInfo::_internal_set_maximun_once_buys(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  maximun_once_buys_ = value;
}
inline void ProductInfo::set_maximun_once_buys(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_maximun_once_buys(value);
  // @@protoc_insertion_point(field_set:KWMsg.ProductInfo.maximun_once_buys)
}

// bytes refresh_cron_expr = 10;
inline void ProductInfo::clear_refresh_cron_expr() {
  refresh_cron_expr_.ClearToEmpty();
}
inline const std::string& ProductInfo::refresh_cron_expr() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductInfo.refresh_cron_expr)
  return _internal_refresh_cron_expr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ProductInfo::set_refresh_cron_expr(ArgT0&& arg0, ArgT... args) {
 
 refresh_cron_expr_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ProductInfo.refresh_cron_expr)
}
inline std::string* ProductInfo::mutable_refresh_cron_expr() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ProductInfo.refresh_cron_expr)
  return _internal_mutable_refresh_cron_expr();
}
inline const std::string& ProductInfo::_internal_refresh_cron_expr() const {
  return refresh_cron_expr_.Get();
}
inline void ProductInfo::_internal_set_refresh_cron_expr(const std::string& value) {
  
  refresh_cron_expr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ProductInfo::_internal_mutable_refresh_cron_expr() {
  
  return refresh_cron_expr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ProductInfo::release_refresh_cron_expr() {
  // @@protoc_insertion_point(field_release:KWMsg.ProductInfo.refresh_cron_expr)
  return refresh_cron_expr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ProductInfo::set_allocated_refresh_cron_expr(std::string* refresh_cron_expr) {
  if (refresh_cron_expr != nullptr) {
    
  } else {
    
  }
  refresh_cron_expr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), refresh_cron_expr,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ProductInfo.refresh_cron_expr)
}

// int32 refresh_interval = 11;
inline void ProductInfo::clear_refresh_interval() {
  refresh_interval_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProductInfo::_internal_refresh_interval() const {
  return refresh_interval_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProductInfo::refresh_interval() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductInfo.refresh_interval)
  return _internal_refresh_interval();
}
inline void ProductInfo::_internal_set_refresh_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  refresh_interval_ = value;
}
inline void ProductInfo::set_refresh_interval(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_refresh_interval(value);
  // @@protoc_insertion_point(field_set:KWMsg.ProductInfo.refresh_interval)
}

// bool is_purchase_limit = 12;
inline void ProductInfo::clear_is_purchase_limit() {
  is_purchase_limit_ = false;
}
inline bool ProductInfo::_internal_is_purchase_limit() const {
  return is_purchase_limit_;
}
inline bool ProductInfo::is_purchase_limit() const {
  // @@protoc_insertion_point(field_get:KWMsg.ProductInfo.is_purchase_limit)
  return _internal_is_purchase_limit();
}
inline void ProductInfo::_internal_set_is_purchase_limit(bool value) {
  
  is_purchase_limit_ = value;
}
inline void ProductInfo::set_is_purchase_limit(bool value) {
  _internal_set_is_purchase_limit(value);
  // @@protoc_insertion_point(field_set:KWMsg.ProductInfo.is_purchase_limit)
}

// -------------------------------------------------------------------

// RewardInfo

// bytes reward_id = 1;
inline void RewardInfo::clear_reward_id() {
  reward_id_.ClearToEmpty();
}
inline const std::string& RewardInfo::reward_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.RewardInfo.reward_id)
  return _internal_reward_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void RewardInfo::set_reward_id(ArgT0&& arg0, ArgT... args) {
 
 reward_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.RewardInfo.reward_id)
}
inline std::string* RewardInfo::mutable_reward_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.RewardInfo.reward_id)
  return _internal_mutable_reward_id();
}
inline const std::string& RewardInfo::_internal_reward_id() const {
  return reward_id_.Get();
}
inline void RewardInfo::_internal_set_reward_id(const std::string& value) {
  
  reward_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* RewardInfo::_internal_mutable_reward_id() {
  
  return reward_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* RewardInfo::release_reward_id() {
  // @@protoc_insertion_point(field_release:KWMsg.RewardInfo.reward_id)
  return reward_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void RewardInfo::set_allocated_reward_id(std::string* reward_id) {
  if (reward_id != nullptr) {
    
  } else {
    
  }
  reward_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.RewardInfo.reward_id)
}

// int64 reward_count = 2;
inline void RewardInfo::clear_reward_count() {
  reward_count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RewardInfo::_internal_reward_count() const {
  return reward_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RewardInfo::reward_count() const {
  // @@protoc_insertion_point(field_get:KWMsg.RewardInfo.reward_count)
  return _internal_reward_count();
}
inline void RewardInfo::_internal_set_reward_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  reward_count_ = value;
}
inline void RewardInfo::set_reward_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_reward_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.RewardInfo.reward_count)
}

// int32 reward_flag = 3;
inline void RewardInfo::clear_reward_flag() {
  reward_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardInfo::_internal_reward_flag() const {
  return reward_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardInfo::reward_flag() const {
  // @@protoc_insertion_point(field_get:KWMsg.RewardInfo.reward_flag)
  return _internal_reward_flag();
}
inline void RewardInfo::_internal_set_reward_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_flag_ = value;
}
inline void RewardInfo::set_reward_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward_flag(value);
  // @@protoc_insertion_point(field_set:KWMsg.RewardInfo.reward_flag)
}

// -------------------------------------------------------------------

// WitchInfo

// bytes witch_id = 1;
inline void WitchInfo::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& WitchInfo::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WitchInfo::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_id)
}
inline std::string* WitchInfo::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.WitchInfo.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& WitchInfo::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void WitchInfo::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WitchInfo::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WitchInfo::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.WitchInfo.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WitchInfo::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.WitchInfo.witch_id)
}

// int32 witch_level = 2;
inline void WitchInfo::clear_witch_level() {
  witch_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::_internal_witch_level() const {
  return witch_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::witch_level() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_level)
  return _internal_witch_level();
}
inline void WitchInfo::_internal_set_witch_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witch_level_ = value;
}
inline void WitchInfo::set_witch_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witch_level(value);
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_level)
}

// int32 witch_star_level = 3;
inline void WitchInfo::clear_witch_star_level() {
  witch_star_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::_internal_witch_star_level() const {
  return witch_star_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::witch_star_level() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_star_level)
  return _internal_witch_star_level();
}
inline void WitchInfo::_internal_set_witch_star_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witch_star_level_ = value;
}
inline void WitchInfo::set_witch_star_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witch_star_level(value);
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_star_level)
}

// int32 witch_total_fc = 4;
inline void WitchInfo::clear_witch_total_fc() {
  witch_total_fc_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::_internal_witch_total_fc() const {
  return witch_total_fc_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::witch_total_fc() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_total_fc)
  return _internal_witch_total_fc();
}
inline void WitchInfo::_internal_set_witch_total_fc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witch_total_fc_ = value;
}
inline void WitchInfo::set_witch_total_fc(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witch_total_fc(value);
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_total_fc)
}

// bytes witch_role_res_id = 5;
inline void WitchInfo::clear_witch_role_res_id() {
  witch_role_res_id_.ClearToEmpty();
}
inline const std::string& WitchInfo::witch_role_res_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_role_res_id)
  return _internal_witch_role_res_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WitchInfo::set_witch_role_res_id(ArgT0&& arg0, ArgT... args) {
 
 witch_role_res_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_role_res_id)
}
inline std::string* WitchInfo::mutable_witch_role_res_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.WitchInfo.witch_role_res_id)
  return _internal_mutable_witch_role_res_id();
}
inline const std::string& WitchInfo::_internal_witch_role_res_id() const {
  return witch_role_res_id_.Get();
}
inline void WitchInfo::_internal_set_witch_role_res_id(const std::string& value) {
  
  witch_role_res_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WitchInfo::_internal_mutable_witch_role_res_id() {
  
  return witch_role_res_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WitchInfo::release_witch_role_res_id() {
  // @@protoc_insertion_point(field_release:KWMsg.WitchInfo.witch_role_res_id)
  return witch_role_res_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WitchInfo::set_allocated_witch_role_res_id(std::string* witch_role_res_id) {
  if (witch_role_res_id != nullptr) {
    
  } else {
    
  }
  witch_role_res_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_role_res_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.WitchInfo.witch_role_res_id)
}

// int32 witch_hp = 6;
inline void WitchInfo::clear_witch_hp() {
  witch_hp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::_internal_witch_hp() const {
  return witch_hp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::witch_hp() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_hp)
  return _internal_witch_hp();
}
inline void WitchInfo::_internal_set_witch_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witch_hp_ = value;
}
inline void WitchInfo::set_witch_hp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witch_hp(value);
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_hp)
}

// int32 witch_defence = 7;
inline void WitchInfo::clear_witch_defence() {
  witch_defence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::_internal_witch_defence() const {
  return witch_defence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::witch_defence() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_defence)
  return _internal_witch_defence();
}
inline void WitchInfo::_internal_set_witch_defence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witch_defence_ = value;
}
inline void WitchInfo::set_witch_defence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witch_defence(value);
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_defence)
}

// int32 witch_speed = 8;
inline void WitchInfo::clear_witch_speed() {
  witch_speed_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::_internal_witch_speed() const {
  return witch_speed_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::witch_speed() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_speed)
  return _internal_witch_speed();
}
inline void WitchInfo::_internal_set_witch_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witch_speed_ = value;
}
inline void WitchInfo::set_witch_speed(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witch_speed(value);
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_speed)
}

// int32 witch_attackmin = 9;
inline void WitchInfo::clear_witch_attackmin() {
  witch_attackmin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::_internal_witch_attackmin() const {
  return witch_attackmin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::witch_attackmin() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_attackmin)
  return _internal_witch_attackmin();
}
inline void WitchInfo::_internal_set_witch_attackmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witch_attackmin_ = value;
}
inline void WitchInfo::set_witch_attackmin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witch_attackmin(value);
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_attackmin)
}

// int32 witch_attackmax = 10;
inline void WitchInfo::clear_witch_attackmax() {
  witch_attackmax_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::_internal_witch_attackmax() const {
  return witch_attackmax_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::witch_attackmax() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_attackmax)
  return _internal_witch_attackmax();
}
inline void WitchInfo::_internal_set_witch_attackmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witch_attackmax_ = value;
}
inline void WitchInfo::set_witch_attackmax(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witch_attackmax(value);
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_attackmax)
}

// int32 witch_crit = 11;
inline void WitchInfo::clear_witch_crit() {
  witch_crit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::_internal_witch_crit() const {
  return witch_crit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::witch_crit() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_crit)
  return _internal_witch_crit();
}
inline void WitchInfo::_internal_set_witch_crit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witch_crit_ = value;
}
inline void WitchInfo::set_witch_crit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witch_crit(value);
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_crit)
}

// int32 witch_critdmg = 12;
inline void WitchInfo::clear_witch_critdmg() {
  witch_critdmg_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::_internal_witch_critdmg() const {
  return witch_critdmg_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::witch_critdmg() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_critdmg)
  return _internal_witch_critdmg();
}
inline void WitchInfo::_internal_set_witch_critdmg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witch_critdmg_ = value;
}
inline void WitchInfo::set_witch_critdmg(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witch_critdmg(value);
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_critdmg)
}

// int32 witch_hit = 13;
inline void WitchInfo::clear_witch_hit() {
  witch_hit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::_internal_witch_hit() const {
  return witch_hit_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::witch_hit() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_hit)
  return _internal_witch_hit();
}
inline void WitchInfo::_internal_set_witch_hit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witch_hit_ = value;
}
inline void WitchInfo::set_witch_hit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witch_hit(value);
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_hit)
}

// int32 witch_resist = 14;
inline void WitchInfo::clear_witch_resist() {
  witch_resist_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::_internal_witch_resist() const {
  return witch_resist_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 WitchInfo::witch_resist() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_resist)
  return _internal_witch_resist();
}
inline void WitchInfo::_internal_set_witch_resist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  witch_resist_ = value;
}
inline void WitchInfo::set_witch_resist(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_witch_resist(value);
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_resist)
}

// bytes witch_generalskillid = 15;
inline void WitchInfo::clear_witch_generalskillid() {
  witch_generalskillid_.ClearToEmpty();
}
inline const std::string& WitchInfo::witch_generalskillid() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_generalskillid)
  return _internal_witch_generalskillid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WitchInfo::set_witch_generalskillid(ArgT0&& arg0, ArgT... args) {
 
 witch_generalskillid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_generalskillid)
}
inline std::string* WitchInfo::mutable_witch_generalskillid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.WitchInfo.witch_generalskillid)
  return _internal_mutable_witch_generalskillid();
}
inline const std::string& WitchInfo::_internal_witch_generalskillid() const {
  return witch_generalskillid_.Get();
}
inline void WitchInfo::_internal_set_witch_generalskillid(const std::string& value) {
  
  witch_generalskillid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WitchInfo::_internal_mutable_witch_generalskillid() {
  
  return witch_generalskillid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WitchInfo::release_witch_generalskillid() {
  // @@protoc_insertion_point(field_release:KWMsg.WitchInfo.witch_generalskillid)
  return witch_generalskillid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WitchInfo::set_allocated_witch_generalskillid(std::string* witch_generalskillid) {
  if (witch_generalskillid != nullptr) {
    
  } else {
    
  }
  witch_generalskillid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_generalskillid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.WitchInfo.witch_generalskillid)
}

// bytes witch_advancedskillid = 16;
inline void WitchInfo::clear_witch_advancedskillid() {
  witch_advancedskillid_.ClearToEmpty();
}
inline const std::string& WitchInfo::witch_advancedskillid() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_advancedskillid)
  return _internal_witch_advancedskillid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WitchInfo::set_witch_advancedskillid(ArgT0&& arg0, ArgT... args) {
 
 witch_advancedskillid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_advancedskillid)
}
inline std::string* WitchInfo::mutable_witch_advancedskillid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.WitchInfo.witch_advancedskillid)
  return _internal_mutable_witch_advancedskillid();
}
inline const std::string& WitchInfo::_internal_witch_advancedskillid() const {
  return witch_advancedskillid_.Get();
}
inline void WitchInfo::_internal_set_witch_advancedskillid(const std::string& value) {
  
  witch_advancedskillid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WitchInfo::_internal_mutable_witch_advancedskillid() {
  
  return witch_advancedskillid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WitchInfo::release_witch_advancedskillid() {
  // @@protoc_insertion_point(field_release:KWMsg.WitchInfo.witch_advancedskillid)
  return witch_advancedskillid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WitchInfo::set_allocated_witch_advancedskillid(std::string* witch_advancedskillid) {
  if (witch_advancedskillid != nullptr) {
    
  } else {
    
  }
  witch_advancedskillid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_advancedskillid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.WitchInfo.witch_advancedskillid)
}

// bytes witch_uniqueskillid = 17;
inline void WitchInfo::clear_witch_uniqueskillid() {
  witch_uniqueskillid_.ClearToEmpty();
}
inline const std::string& WitchInfo::witch_uniqueskillid() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_uniqueskillid)
  return _internal_witch_uniqueskillid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WitchInfo::set_witch_uniqueskillid(ArgT0&& arg0, ArgT... args) {
 
 witch_uniqueskillid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_uniqueskillid)
}
inline std::string* WitchInfo::mutable_witch_uniqueskillid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.WitchInfo.witch_uniqueskillid)
  return _internal_mutable_witch_uniqueskillid();
}
inline const std::string& WitchInfo::_internal_witch_uniqueskillid() const {
  return witch_uniqueskillid_.Get();
}
inline void WitchInfo::_internal_set_witch_uniqueskillid(const std::string& value) {
  
  witch_uniqueskillid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WitchInfo::_internal_mutable_witch_uniqueskillid() {
  
  return witch_uniqueskillid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WitchInfo::release_witch_uniqueskillid() {
  // @@protoc_insertion_point(field_release:KWMsg.WitchInfo.witch_uniqueskillid)
  return witch_uniqueskillid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WitchInfo::set_allocated_witch_uniqueskillid(std::string* witch_uniqueskillid) {
  if (witch_uniqueskillid != nullptr) {
    
  } else {
    
  }
  witch_uniqueskillid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_uniqueskillid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.WitchInfo.witch_uniqueskillid)
}

// bytes witch_versedskillid = 18;
inline void WitchInfo::clear_witch_versedskillid() {
  witch_versedskillid_.ClearToEmpty();
}
inline const std::string& WitchInfo::witch_versedskillid() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_versedskillid)
  return _internal_witch_versedskillid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WitchInfo::set_witch_versedskillid(ArgT0&& arg0, ArgT... args) {
 
 witch_versedskillid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_versedskillid)
}
inline std::string* WitchInfo::mutable_witch_versedskillid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.WitchInfo.witch_versedskillid)
  return _internal_mutable_witch_versedskillid();
}
inline const std::string& WitchInfo::_internal_witch_versedskillid() const {
  return witch_versedskillid_.Get();
}
inline void WitchInfo::_internal_set_witch_versedskillid(const std::string& value) {
  
  witch_versedskillid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WitchInfo::_internal_mutable_witch_versedskillid() {
  
  return witch_versedskillid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WitchInfo::release_witch_versedskillid() {
  // @@protoc_insertion_point(field_release:KWMsg.WitchInfo.witch_versedskillid)
  return witch_versedskillid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WitchInfo::set_allocated_witch_versedskillid(std::string* witch_versedskillid) {
  if (witch_versedskillid != nullptr) {
    
  } else {
    
  }
  witch_versedskillid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_versedskillid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.WitchInfo.witch_versedskillid)
}

// bytes witch_awakeningskillid = 19;
inline void WitchInfo::clear_witch_awakeningskillid() {
  witch_awakeningskillid_.ClearToEmpty();
}
inline const std::string& WitchInfo::witch_awakeningskillid() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_awakeningskillid)
  return _internal_witch_awakeningskillid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WitchInfo::set_witch_awakeningskillid(ArgT0&& arg0, ArgT... args) {
 
 witch_awakeningskillid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_awakeningskillid)
}
inline std::string* WitchInfo::mutable_witch_awakeningskillid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.WitchInfo.witch_awakeningskillid)
  return _internal_mutable_witch_awakeningskillid();
}
inline const std::string& WitchInfo::_internal_witch_awakeningskillid() const {
  return witch_awakeningskillid_.Get();
}
inline void WitchInfo::_internal_set_witch_awakeningskillid(const std::string& value) {
  
  witch_awakeningskillid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WitchInfo::_internal_mutable_witch_awakeningskillid() {
  
  return witch_awakeningskillid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WitchInfo::release_witch_awakeningskillid() {
  // @@protoc_insertion_point(field_release:KWMsg.WitchInfo.witch_awakeningskillid)
  return witch_awakeningskillid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WitchInfo::set_allocated_witch_awakeningskillid(std::string* witch_awakeningskillid) {
  if (witch_awakeningskillid != nullptr) {
    
  } else {
    
  }
  witch_awakeningskillid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_awakeningskillid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.WitchInfo.witch_awakeningskillid)
}

// bytes witch_extraskillid1 = 20;
inline void WitchInfo::clear_witch_extraskillid1() {
  witch_extraskillid1_.ClearToEmpty();
}
inline const std::string& WitchInfo::witch_extraskillid1() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_extraskillid1)
  return _internal_witch_extraskillid1();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WitchInfo::set_witch_extraskillid1(ArgT0&& arg0, ArgT... args) {
 
 witch_extraskillid1_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_extraskillid1)
}
inline std::string* WitchInfo::mutable_witch_extraskillid1() {
  // @@protoc_insertion_point(field_mutable:KWMsg.WitchInfo.witch_extraskillid1)
  return _internal_mutable_witch_extraskillid1();
}
inline const std::string& WitchInfo::_internal_witch_extraskillid1() const {
  return witch_extraskillid1_.Get();
}
inline void WitchInfo::_internal_set_witch_extraskillid1(const std::string& value) {
  
  witch_extraskillid1_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WitchInfo::_internal_mutable_witch_extraskillid1() {
  
  return witch_extraskillid1_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WitchInfo::release_witch_extraskillid1() {
  // @@protoc_insertion_point(field_release:KWMsg.WitchInfo.witch_extraskillid1)
  return witch_extraskillid1_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WitchInfo::set_allocated_witch_extraskillid1(std::string* witch_extraskillid1) {
  if (witch_extraskillid1 != nullptr) {
    
  } else {
    
  }
  witch_extraskillid1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_extraskillid1,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.WitchInfo.witch_extraskillid1)
}

// bytes witch_extraskillid2 = 21;
inline void WitchInfo::clear_witch_extraskillid2() {
  witch_extraskillid2_.ClearToEmpty();
}
inline const std::string& WitchInfo::witch_extraskillid2() const {
  // @@protoc_insertion_point(field_get:KWMsg.WitchInfo.witch_extraskillid2)
  return _internal_witch_extraskillid2();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void WitchInfo::set_witch_extraskillid2(ArgT0&& arg0, ArgT... args) {
 
 witch_extraskillid2_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.WitchInfo.witch_extraskillid2)
}
inline std::string* WitchInfo::mutable_witch_extraskillid2() {
  // @@protoc_insertion_point(field_mutable:KWMsg.WitchInfo.witch_extraskillid2)
  return _internal_mutable_witch_extraskillid2();
}
inline const std::string& WitchInfo::_internal_witch_extraskillid2() const {
  return witch_extraskillid2_.Get();
}
inline void WitchInfo::_internal_set_witch_extraskillid2(const std::string& value) {
  
  witch_extraskillid2_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* WitchInfo::_internal_mutable_witch_extraskillid2() {
  
  return witch_extraskillid2_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* WitchInfo::release_witch_extraskillid2() {
  // @@protoc_insertion_point(field_release:KWMsg.WitchInfo.witch_extraskillid2)
  return witch_extraskillid2_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void WitchInfo::set_allocated_witch_extraskillid2(std::string* witch_extraskillid2) {
  if (witch_extraskillid2 != nullptr) {
    
  } else {
    
  }
  witch_extraskillid2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_extraskillid2,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.WitchInfo.witch_extraskillid2)
}

// -------------------------------------------------------------------

// GuildInfo

// bytes guild_id = 1;
inline void GuildInfo::clear_guild_id() {
  guild_id_.ClearToEmpty();
}
inline const std::string& GuildInfo::guild_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.GuildInfo.guild_id)
  return _internal_guild_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildInfo::set_guild_id(ArgT0&& arg0, ArgT... args) {
 
 guild_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.GuildInfo.guild_id)
}
inline std::string* GuildInfo::mutable_guild_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.GuildInfo.guild_id)
  return _internal_mutable_guild_id();
}
inline const std::string& GuildInfo::_internal_guild_id() const {
  return guild_id_.Get();
}
inline void GuildInfo::_internal_set_guild_id(const std::string& value) {
  
  guild_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GuildInfo::_internal_mutable_guild_id() {
  
  return guild_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GuildInfo::release_guild_id() {
  // @@protoc_insertion_point(field_release:KWMsg.GuildInfo.guild_id)
  return guild_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GuildInfo::set_allocated_guild_id(std::string* guild_id) {
  if (guild_id != nullptr) {
    
  } else {
    
  }
  guild_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guild_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.GuildInfo.guild_id)
}

// bytes guild_name = 2;
inline void GuildInfo::clear_guild_name() {
  guild_name_.ClearToEmpty();
}
inline const std::string& GuildInfo::guild_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.GuildInfo.guild_name)
  return _internal_guild_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void GuildInfo::set_guild_name(ArgT0&& arg0, ArgT... args) {
 
 guild_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.GuildInfo.guild_name)
}
inline std::string* GuildInfo::mutable_guild_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.GuildInfo.guild_name)
  return _internal_mutable_guild_name();
}
inline const std::string& GuildInfo::_internal_guild_name() const {
  return guild_name_.Get();
}
inline void GuildInfo::_internal_set_guild_name(const std::string& value) {
  
  guild_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* GuildInfo::_internal_mutable_guild_name() {
  
  return guild_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* GuildInfo::release_guild_name() {
  // @@protoc_insertion_point(field_release:KWMsg.GuildInfo.guild_name)
  return guild_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void GuildInfo::set_allocated_guild_name(std::string* guild_name) {
  if (guild_name != nullptr) {
    
  } else {
    
  }
  guild_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), guild_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.GuildInfo.guild_name)
}

// -------------------------------------------------------------------

// PlayerInfo

// .KWMsg.Ident player_id = 1;
inline bool PlayerInfo::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool PlayerInfo::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& PlayerInfo::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& PlayerInfo::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerInfo.player_id)
  return _internal_player_id();
}
inline void PlayerInfo::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PlayerInfo.player_id)
}
inline ::KWMsg::Ident* PlayerInfo::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* PlayerInfo::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerInfo.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* PlayerInfo::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* PlayerInfo::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerInfo.player_id)
  return _internal_mutable_player_id();
}
inline void PlayerInfo::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerInfo.player_id)
}

// int32 level = 2;
inline void PlayerInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::level() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerInfo.level)
  return _internal_level();
}
inline void PlayerInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void PlayerInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerInfo.level)
}

// int32 botarena_pre_season_rank = 3;
inline void PlayerInfo::clear_botarena_pre_season_rank() {
  botarena_pre_season_rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::_internal_botarena_pre_season_rank() const {
  return botarena_pre_season_rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerInfo::botarena_pre_season_rank() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerInfo.botarena_pre_season_rank)
  return _internal_botarena_pre_season_rank();
}
inline void PlayerInfo::_internal_set_botarena_pre_season_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  botarena_pre_season_rank_ = value;
}
inline void PlayerInfo::set_botarena_pre_season_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_botarena_pre_season_rank(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerInfo.botarena_pre_season_rank)
}

// int64 honor_point = 4;
inline void PlayerInfo::clear_honor_point() {
  honor_point_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::_internal_honor_point() const {
  return honor_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::honor_point() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerInfo.honor_point)
  return _internal_honor_point();
}
inline void PlayerInfo::_internal_set_honor_point(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  honor_point_ = value;
}
inline void PlayerInfo::set_honor_point(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_honor_point(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerInfo.honor_point)
}

// int64 strategy_point = 5;
inline void PlayerInfo::clear_strategy_point() {
  strategy_point_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::_internal_strategy_point() const {
  return strategy_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::strategy_point() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerInfo.strategy_point)
  return _internal_strategy_point();
}
inline void PlayerInfo::_internal_set_strategy_point(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  strategy_point_ = value;
}
inline void PlayerInfo::set_strategy_point(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_strategy_point(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerInfo.strategy_point)
}

// int64 shabow_token = 6;
inline void PlayerInfo::clear_shabow_token() {
  shabow_token_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::_internal_shabow_token() const {
  return shabow_token_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::shabow_token() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerInfo.shabow_token)
  return _internal_shabow_token();
}
inline void PlayerInfo::_internal_set_shabow_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  shabow_token_ = value;
}
inline void PlayerInfo::set_shabow_token(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_shabow_token(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerInfo.shabow_token)
}

// int64 shabow_badge = 7;
inline void PlayerInfo::clear_shabow_badge() {
  shabow_badge_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::_internal_shabow_badge() const {
  return shabow_badge_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerInfo::shabow_badge() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerInfo.shabow_badge)
  return _internal_shabow_badge();
}
inline void PlayerInfo::_internal_set_shabow_badge(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  shabow_badge_ = value;
}
inline void PlayerInfo::set_shabow_badge(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_shabow_badge(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerInfo.shabow_badge)
}

// bytes botaren_grade = 8;
inline void PlayerInfo::clear_botaren_grade() {
  botaren_grade_.ClearToEmpty();
}
inline const std::string& PlayerInfo::botaren_grade() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerInfo.botaren_grade)
  return _internal_botaren_grade();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_botaren_grade(ArgT0&& arg0, ArgT... args) {
 
 botaren_grade_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerInfo.botaren_grade)
}
inline std::string* PlayerInfo::mutable_botaren_grade() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerInfo.botaren_grade)
  return _internal_mutable_botaren_grade();
}
inline const std::string& PlayerInfo::_internal_botaren_grade() const {
  return botaren_grade_.Get();
}
inline void PlayerInfo::_internal_set_botaren_grade(const std::string& value) {
  
  botaren_grade_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_botaren_grade() {
  
  return botaren_grade_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_botaren_grade() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerInfo.botaren_grade)
  return botaren_grade_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerInfo::set_allocated_botaren_grade(std::string* botaren_grade) {
  if (botaren_grade != nullptr) {
    
  } else {
    
  }
  botaren_grade_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), botaren_grade,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerInfo.botaren_grade)
}

// bytes nick_name = 9;
inline void PlayerInfo::clear_nick_name() {
  nick_name_.ClearToEmpty();
}
inline const std::string& PlayerInfo::nick_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerInfo.nick_name)
  return _internal_nick_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_nick_name(ArgT0&& arg0, ArgT... args) {
 
 nick_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerInfo.nick_name)
}
inline std::string* PlayerInfo::mutable_nick_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerInfo.nick_name)
  return _internal_mutable_nick_name();
}
inline const std::string& PlayerInfo::_internal_nick_name() const {
  return nick_name_.Get();
}
inline void PlayerInfo::_internal_set_nick_name(const std::string& value) {
  
  nick_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_nick_name() {
  
  return nick_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_nick_name() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerInfo.nick_name)
  return nick_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerInfo::set_allocated_nick_name(std::string* nick_name) {
  if (nick_name != nullptr) {
    
  } else {
    
  }
  nick_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nick_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerInfo.nick_name)
}

// bytes avatar_url = 10;
inline void PlayerInfo::clear_avatar_url() {
  avatar_url_.ClearToEmpty();
}
inline const std::string& PlayerInfo::avatar_url() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerInfo.avatar_url)
  return _internal_avatar_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_avatar_url(ArgT0&& arg0, ArgT... args) {
 
 avatar_url_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerInfo.avatar_url)
}
inline std::string* PlayerInfo::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerInfo.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& PlayerInfo::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void PlayerInfo::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_avatar_url() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerInfo.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerInfo::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerInfo.avatar_url)
}

// bytes avatar_frame_id = 11;
inline void PlayerInfo::clear_avatar_frame_id() {
  avatar_frame_id_.ClearToEmpty();
}
inline const std::string& PlayerInfo::avatar_frame_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerInfo.avatar_frame_id)
  return _internal_avatar_frame_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerInfo::set_avatar_frame_id(ArgT0&& arg0, ArgT... args) {
 
 avatar_frame_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerInfo.avatar_frame_id)
}
inline std::string* PlayerInfo::mutable_avatar_frame_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerInfo.avatar_frame_id)
  return _internal_mutable_avatar_frame_id();
}
inline const std::string& PlayerInfo::_internal_avatar_frame_id() const {
  return avatar_frame_id_.Get();
}
inline void PlayerInfo::_internal_set_avatar_frame_id(const std::string& value) {
  
  avatar_frame_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerInfo::_internal_mutable_avatar_frame_id() {
  
  return avatar_frame_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerInfo::release_avatar_frame_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerInfo.avatar_frame_id)
  return avatar_frame_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerInfo::set_allocated_avatar_frame_id(std::string* avatar_frame_id) {
  if (avatar_frame_id != nullptr) {
    
  } else {
    
  }
  avatar_frame_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_frame_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerInfo.avatar_frame_id)
}

// .KWMsg.GuildInfo guild_info = 12;
inline bool PlayerInfo::_internal_has_guild_info() const {
  return this != internal_default_instance() && guild_info_ != nullptr;
}
inline bool PlayerInfo::has_guild_info() const {
  return _internal_has_guild_info();
}
inline void PlayerInfo::clear_guild_info() {
  if (GetArenaForAllocation() == nullptr && guild_info_ != nullptr) {
    delete guild_info_;
  }
  guild_info_ = nullptr;
}
inline const ::KWMsg::GuildInfo& PlayerInfo::_internal_guild_info() const {
  const ::KWMsg::GuildInfo* p = guild_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::GuildInfo&>(
      ::KWMsg::_GuildInfo_default_instance_);
}
inline const ::KWMsg::GuildInfo& PlayerInfo::guild_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerInfo.guild_info)
  return _internal_guild_info();
}
inline void PlayerInfo::unsafe_arena_set_allocated_guild_info(
    ::KWMsg::GuildInfo* guild_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(guild_info_);
  }
  guild_info_ = guild_info;
  if (guild_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PlayerInfo.guild_info)
}
inline ::KWMsg::GuildInfo* PlayerInfo::release_guild_info() {
  
  ::KWMsg::GuildInfo* temp = guild_info_;
  guild_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::GuildInfo* PlayerInfo::unsafe_arena_release_guild_info() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerInfo.guild_info)
  
  ::KWMsg::GuildInfo* temp = guild_info_;
  guild_info_ = nullptr;
  return temp;
}
inline ::KWMsg::GuildInfo* PlayerInfo::_internal_mutable_guild_info() {
  
  if (guild_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::GuildInfo>(GetArenaForAllocation());
    guild_info_ = p;
  }
  return guild_info_;
}
inline ::KWMsg::GuildInfo* PlayerInfo::mutable_guild_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerInfo.guild_info)
  return _internal_mutable_guild_info();
}
inline void PlayerInfo::set_allocated_guild_info(::KWMsg::GuildInfo* guild_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete guild_info_;
  }
  if (guild_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::GuildInfo>::GetOwningArena(guild_info);
    if (message_arena != submessage_arena) {
      guild_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, guild_info, submessage_arena);
    }
    
  } else {
    
  }
  guild_info_ = guild_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerInfo.guild_info)
}

// repeated .KWMsg.WitchInfo botarena_defensive_team = 13;
inline int PlayerInfo::_internal_botarena_defensive_team_size() const {
  return botarena_defensive_team_.size();
}
inline int PlayerInfo::botarena_defensive_team_size() const {
  return _internal_botarena_defensive_team_size();
}
inline void PlayerInfo::clear_botarena_defensive_team() {
  botarena_defensive_team_.Clear();
}
inline ::KWMsg::WitchInfo* PlayerInfo::mutable_botarena_defensive_team(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerInfo.botarena_defensive_team)
  return botarena_defensive_team_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::WitchInfo >*
PlayerInfo::mutable_botarena_defensive_team() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.PlayerInfo.botarena_defensive_team)
  return &botarena_defensive_team_;
}
inline const ::KWMsg::WitchInfo& PlayerInfo::_internal_botarena_defensive_team(int index) const {
  return botarena_defensive_team_.Get(index);
}
inline const ::KWMsg::WitchInfo& PlayerInfo::botarena_defensive_team(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerInfo.botarena_defensive_team)
  return _internal_botarena_defensive_team(index);
}
inline ::KWMsg::WitchInfo* PlayerInfo::_internal_add_botarena_defensive_team() {
  return botarena_defensive_team_.Add();
}
inline ::KWMsg::WitchInfo* PlayerInfo::add_botarena_defensive_team() {
  // @@protoc_insertion_point(field_add:KWMsg.PlayerInfo.botarena_defensive_team)
  return _internal_add_botarena_defensive_team();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::WitchInfo >&
PlayerInfo::botarena_defensive_team() const {
  // @@protoc_insertion_point(field_list:KWMsg.PlayerInfo.botarena_defensive_team)
  return botarena_defensive_team_;
}

// repeated .KWMsg.WitchInfo botarena_attack_team = 14;
inline int PlayerInfo::_internal_botarena_attack_team_size() const {
  return botarena_attack_team_.size();
}
inline int PlayerInfo::botarena_attack_team_size() const {
  return _internal_botarena_attack_team_size();
}
inline void PlayerInfo::clear_botarena_attack_team() {
  botarena_attack_team_.Clear();
}
inline ::KWMsg::WitchInfo* PlayerInfo::mutable_botarena_attack_team(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerInfo.botarena_attack_team)
  return botarena_attack_team_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::WitchInfo >*
PlayerInfo::mutable_botarena_attack_team() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.PlayerInfo.botarena_attack_team)
  return &botarena_attack_team_;
}
inline const ::KWMsg::WitchInfo& PlayerInfo::_internal_botarena_attack_team(int index) const {
  return botarena_attack_team_.Get(index);
}
inline const ::KWMsg::WitchInfo& PlayerInfo::botarena_attack_team(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerInfo.botarena_attack_team)
  return _internal_botarena_attack_team(index);
}
inline ::KWMsg::WitchInfo* PlayerInfo::_internal_add_botarena_attack_team() {
  return botarena_attack_team_.Add();
}
inline ::KWMsg::WitchInfo* PlayerInfo::add_botarena_attack_team() {
  // @@protoc_insertion_point(field_add:KWMsg.PlayerInfo.botarena_attack_team)
  return _internal_add_botarena_attack_team();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::WitchInfo >&
PlayerInfo::botarena_attack_team() const {
  // @@protoc_insertion_point(field_list:KWMsg.PlayerInfo.botarena_attack_team)
  return botarena_attack_team_;
}

// -------------------------------------------------------------------

// DrawCardInfo

// bytes witch_id = 1;
inline void DrawCardInfo::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& DrawCardInfo::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.DrawCardInfo.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DrawCardInfo::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.DrawCardInfo.witch_id)
}
inline std::string* DrawCardInfo::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DrawCardInfo.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& DrawCardInfo::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void DrawCardInfo::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DrawCardInfo::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DrawCardInfo::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.DrawCardInfo.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DrawCardInfo::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DrawCardInfo.witch_id)
}

// int32 is_debris = 2;
inline void DrawCardInfo::clear_is_debris() {
  is_debris_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrawCardInfo::_internal_is_debris() const {
  return is_debris_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DrawCardInfo::is_debris() const {
  // @@protoc_insertion_point(field_get:KWMsg.DrawCardInfo.is_debris)
  return _internal_is_debris();
}
inline void DrawCardInfo::_internal_set_is_debris(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_debris_ = value;
}
inline void DrawCardInfo::set_is_debris(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_debris(value);
  // @@protoc_insertion_point(field_set:KWMsg.DrawCardInfo.is_debris)
}

// -------------------------------------------------------------------

// RewardList

// repeated .KWMsg.RewardInfo list = 1;
inline int RewardList::_internal_list_size() const {
  return list_.size();
}
inline int RewardList::list_size() const {
  return _internal_list_size();
}
inline void RewardList::clear_list() {
  list_.Clear();
}
inline ::KWMsg::RewardInfo* RewardList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.RewardList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
RewardList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.RewardList.list)
  return &list_;
}
inline const ::KWMsg::RewardInfo& RewardList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::KWMsg::RewardInfo& RewardList::list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.RewardList.list)
  return _internal_list(index);
}
inline ::KWMsg::RewardInfo* RewardList::_internal_add_list() {
  return list_.Add();
}
inline ::KWMsg::RewardInfo* RewardList::add_list() {
  // @@protoc_insertion_point(field_add:KWMsg.RewardList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
RewardList::list() const {
  // @@protoc_insertion_point(field_list:KWMsg.RewardList.list)
  return list_;
}

// -------------------------------------------------------------------

// ReqAckLagTest

// -------------------------------------------------------------------

// ReqAckHeartBeat

// -------------------------------------------------------------------

// ReqLeaveGameServer

// .KWMsg.Ident player_id = 1;
inline bool ReqLeaveGameServer::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqLeaveGameServer::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqLeaveGameServer::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqLeaveGameServer::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqLeaveGameServer.player_id)
  return _internal_player_id();
}
inline void ReqLeaveGameServer::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqLeaveGameServer.player_id)
}
inline ::KWMsg::Ident* ReqLeaveGameServer::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqLeaveGameServer::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqLeaveGameServer.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqLeaveGameServer::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqLeaveGameServer::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqLeaveGameServer.player_id)
  return _internal_mutable_player_id();
}
inline void ReqLeaveGameServer::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqLeaveGameServer.player_id)
}

// -------------------------------------------------------------------

// PlayerEntryInfo

// .KWMsg.Ident object_guid = 1;
inline bool PlayerEntryInfo::_internal_has_object_guid() const {
  return this != internal_default_instance() && object_guid_ != nullptr;
}
inline bool PlayerEntryInfo::has_object_guid() const {
  return _internal_has_object_guid();
}
inline const ::KWMsg::Ident& PlayerEntryInfo::_internal_object_guid() const {
  const ::KWMsg::Ident* p = object_guid_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& PlayerEntryInfo::object_guid() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerEntryInfo.object_guid)
  return _internal_object_guid();
}
inline void PlayerEntryInfo::unsafe_arena_set_allocated_object_guid(
    ::KWMsg::Ident* object_guid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_guid_);
  }
  object_guid_ = object_guid;
  if (object_guid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PlayerEntryInfo.object_guid)
}
inline ::KWMsg::Ident* PlayerEntryInfo::release_object_guid() {
  
  ::KWMsg::Ident* temp = object_guid_;
  object_guid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* PlayerEntryInfo::unsafe_arena_release_object_guid() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerEntryInfo.object_guid)
  
  ::KWMsg::Ident* temp = object_guid_;
  object_guid_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* PlayerEntryInfo::_internal_mutable_object_guid() {
  
  if (object_guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    object_guid_ = p;
  }
  return object_guid_;
}
inline ::KWMsg::Ident* PlayerEntryInfo::mutable_object_guid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerEntryInfo.object_guid)
  return _internal_mutable_object_guid();
}
inline void PlayerEntryInfo::set_allocated_object_guid(::KWMsg::Ident* object_guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_guid_);
  }
  if (object_guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(object_guid));
    if (message_arena != submessage_arena) {
      object_guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object_guid, submessage_arena);
    }
    
  } else {
    
  }
  object_guid_ = object_guid;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerEntryInfo.object_guid)
}

// .KWMsg.Vector3 pos = 2;
inline bool PlayerEntryInfo::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool PlayerEntryInfo::has_pos() const {
  return _internal_has_pos();
}
inline const ::KWMsg::Vector3& PlayerEntryInfo::_internal_pos() const {
  const ::KWMsg::Vector3* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Vector3&>(
      ::KWMsg::_Vector3_default_instance_);
}
inline const ::KWMsg::Vector3& PlayerEntryInfo::pos() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerEntryInfo.pos)
  return _internal_pos();
}
inline void PlayerEntryInfo::unsafe_arena_set_allocated_pos(
    ::KWMsg::Vector3* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PlayerEntryInfo.pos)
}
inline ::KWMsg::Vector3* PlayerEntryInfo::release_pos() {
  
  ::KWMsg::Vector3* temp = pos_;
  pos_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Vector3* PlayerEntryInfo::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerEntryInfo.pos)
  
  ::KWMsg::Vector3* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::KWMsg::Vector3* PlayerEntryInfo::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Vector3>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::KWMsg::Vector3* PlayerEntryInfo::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerEntryInfo.pos)
  return _internal_mutable_pos();
}
inline void PlayerEntryInfo::set_allocated_pos(::KWMsg::Vector3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerEntryInfo.pos)
}

// bytes config_id = 3;
inline void PlayerEntryInfo::clear_config_id() {
  config_id_.ClearToEmpty();
}
inline const std::string& PlayerEntryInfo::config_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerEntryInfo.config_id)
  return _internal_config_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerEntryInfo::set_config_id(ArgT0&& arg0, ArgT... args) {
 
 config_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerEntryInfo.config_id)
}
inline std::string* PlayerEntryInfo::mutable_config_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerEntryInfo.config_id)
  return _internal_mutable_config_id();
}
inline const std::string& PlayerEntryInfo::_internal_config_id() const {
  return config_id_.Get();
}
inline void PlayerEntryInfo::_internal_set_config_id(const std::string& value) {
  
  config_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerEntryInfo::_internal_mutable_config_id() {
  
  return config_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerEntryInfo::release_config_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerEntryInfo.config_id)
  return config_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerEntryInfo::set_allocated_config_id(std::string* config_id) {
  if (config_id != nullptr) {
    
  } else {
    
  }
  config_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerEntryInfo.config_id)
}

// int32 scene_id = 4;
inline void PlayerEntryInfo::clear_scene_id() {
  scene_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerEntryInfo::_internal_scene_id() const {
  return scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerEntryInfo::scene_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerEntryInfo.scene_id)
  return _internal_scene_id();
}
inline void PlayerEntryInfo::_internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_id_ = value;
}
inline void PlayerEntryInfo::set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerEntryInfo.scene_id)
}

// bytes class_id = 5;
inline void PlayerEntryInfo::clear_class_id() {
  class_id_.ClearToEmpty();
}
inline const std::string& PlayerEntryInfo::class_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerEntryInfo.class_id)
  return _internal_class_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerEntryInfo::set_class_id(ArgT0&& arg0, ArgT... args) {
 
 class_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerEntryInfo.class_id)
}
inline std::string* PlayerEntryInfo::mutable_class_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerEntryInfo.class_id)
  return _internal_mutable_class_id();
}
inline const std::string& PlayerEntryInfo::_internal_class_id() const {
  return class_id_.Get();
}
inline void PlayerEntryInfo::_internal_set_class_id(const std::string& value) {
  
  class_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerEntryInfo::_internal_mutable_class_id() {
  
  return class_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerEntryInfo::release_class_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerEntryInfo.class_id)
  return class_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerEntryInfo::set_allocated_class_id(std::string* class_id) {
  if (class_id != nullptr) {
    
  } else {
    
  }
  class_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), class_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerEntryInfo.class_id)
}

// -------------------------------------------------------------------

// AckPlayerEntryList

// repeated .KWMsg.PlayerEntryInfo object_list = 1;
inline int AckPlayerEntryList::_internal_object_list_size() const {
  return object_list_.size();
}
inline int AckPlayerEntryList::object_list_size() const {
  return _internal_object_list_size();
}
inline void AckPlayerEntryList::clear_object_list() {
  object_list_.Clear();
}
inline ::KWMsg::PlayerEntryInfo* AckPlayerEntryList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckPlayerEntryList.object_list)
  return object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerEntryInfo >*
AckPlayerEntryList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckPlayerEntryList.object_list)
  return &object_list_;
}
inline const ::KWMsg::PlayerEntryInfo& AckPlayerEntryList::_internal_object_list(int index) const {
  return object_list_.Get(index);
}
inline const ::KWMsg::PlayerEntryInfo& AckPlayerEntryList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPlayerEntryList.object_list)
  return _internal_object_list(index);
}
inline ::KWMsg::PlayerEntryInfo* AckPlayerEntryList::_internal_add_object_list() {
  return object_list_.Add();
}
inline ::KWMsg::PlayerEntryInfo* AckPlayerEntryList::add_object_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckPlayerEntryList.object_list)
  return _internal_add_object_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerEntryInfo >&
AckPlayerEntryList::object_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckPlayerEntryList.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// AckPlayerLeaveList

// repeated .KWMsg.Ident object_list = 1;
inline int AckPlayerLeaveList::_internal_object_list_size() const {
  return object_list_.size();
}
inline int AckPlayerLeaveList::object_list_size() const {
  return _internal_object_list_size();
}
inline ::KWMsg::Ident* AckPlayerLeaveList::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckPlayerLeaveList.object_list)
  return object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
AckPlayerLeaveList::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckPlayerLeaveList.object_list)
  return &object_list_;
}
inline const ::KWMsg::Ident& AckPlayerLeaveList::_internal_object_list(int index) const {
  return object_list_.Get(index);
}
inline const ::KWMsg::Ident& AckPlayerLeaveList::object_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPlayerLeaveList.object_list)
  return _internal_object_list(index);
}
inline ::KWMsg::Ident* AckPlayerLeaveList::_internal_add_object_list() {
  return object_list_.Add();
}
inline ::KWMsg::Ident* AckPlayerLeaveList::add_object_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckPlayerLeaveList.object_list)
  return _internal_add_object_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
AckPlayerLeaveList::object_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckPlayerLeaveList.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// AckPlayerDataFinished

// repeated .KWMsg.Ident object_list = 1;
inline int AckPlayerDataFinished::_internal_object_list_size() const {
  return object_list_.size();
}
inline int AckPlayerDataFinished::object_list_size() const {
  return _internal_object_list_size();
}
inline ::KWMsg::Ident* AckPlayerDataFinished::mutable_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckPlayerDataFinished.object_list)
  return object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
AckPlayerDataFinished::mutable_object_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckPlayerDataFinished.object_list)
  return &object_list_;
}
inline const ::KWMsg::Ident& AckPlayerDataFinished::_internal_object_list(int index) const {
  return object_list_.Get(index);
}
inline const ::KWMsg::Ident& AckPlayerDataFinished::object_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPlayerDataFinished.object_list)
  return _internal_object_list(index);
}
inline ::KWMsg::Ident* AckPlayerDataFinished::_internal_add_object_list() {
  return object_list_.Add();
}
inline ::KWMsg::Ident* AckPlayerDataFinished::add_object_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckPlayerDataFinished.object_list)
  return _internal_add_object_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
AckPlayerDataFinished::object_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckPlayerDataFinished.object_list)
  return object_list_;
}

// -------------------------------------------------------------------

// PosSyncUnit

// .KWMsg.Ident player_id = 1;
inline bool PosSyncUnit::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool PosSyncUnit::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& PosSyncUnit::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& PosSyncUnit::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PosSyncUnit.player_id)
  return _internal_player_id();
}
inline void PosSyncUnit::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PosSyncUnit.player_id)
}
inline ::KWMsg::Ident* PosSyncUnit::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* PosSyncUnit::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PosSyncUnit.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* PosSyncUnit::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* PosSyncUnit::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PosSyncUnit.player_id)
  return _internal_mutable_player_id();
}
inline void PosSyncUnit::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PosSyncUnit.player_id)
}

// .KWMsg.Vector3 pos = 2;
inline bool PosSyncUnit::_internal_has_pos() const {
  return this != internal_default_instance() && pos_ != nullptr;
}
inline bool PosSyncUnit::has_pos() const {
  return _internal_has_pos();
}
inline const ::KWMsg::Vector3& PosSyncUnit::_internal_pos() const {
  const ::KWMsg::Vector3* p = pos_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Vector3&>(
      ::KWMsg::_Vector3_default_instance_);
}
inline const ::KWMsg::Vector3& PosSyncUnit::pos() const {
  // @@protoc_insertion_point(field_get:KWMsg.PosSyncUnit.pos)
  return _internal_pos();
}
inline void PosSyncUnit::unsafe_arena_set_allocated_pos(
    ::KWMsg::Vector3* pos) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  pos_ = pos;
  if (pos) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PosSyncUnit.pos)
}
inline ::KWMsg::Vector3* PosSyncUnit::release_pos() {
  
  ::KWMsg::Vector3* temp = pos_;
  pos_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Vector3* PosSyncUnit::unsafe_arena_release_pos() {
  // @@protoc_insertion_point(field_release:KWMsg.PosSyncUnit.pos)
  
  ::KWMsg::Vector3* temp = pos_;
  pos_ = nullptr;
  return temp;
}
inline ::KWMsg::Vector3* PosSyncUnit::_internal_mutable_pos() {
  
  if (pos_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Vector3>(GetArenaForAllocation());
    pos_ = p;
  }
  return pos_;
}
inline ::KWMsg::Vector3* PosSyncUnit::mutable_pos() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PosSyncUnit.pos)
  return _internal_mutable_pos();
}
inline void PosSyncUnit::set_allocated_pos(::KWMsg::Vector3* pos) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos_);
  }
  if (pos) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pos));
    if (message_arena != submessage_arena) {
      pos = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pos, submessage_arena);
    }
    
  } else {
    
  }
  pos_ = pos;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PosSyncUnit.pos)
}

// .KWMsg.Vector3 orientation = 3;
inline bool PosSyncUnit::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool PosSyncUnit::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::KWMsg::Vector3& PosSyncUnit::_internal_orientation() const {
  const ::KWMsg::Vector3* p = orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Vector3&>(
      ::KWMsg::_Vector3_default_instance_);
}
inline const ::KWMsg::Vector3& PosSyncUnit::orientation() const {
  // @@protoc_insertion_point(field_get:KWMsg.PosSyncUnit.orientation)
  return _internal_orientation();
}
inline void PosSyncUnit::unsafe_arena_set_allocated_orientation(
    ::KWMsg::Vector3* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PosSyncUnit.orientation)
}
inline ::KWMsg::Vector3* PosSyncUnit::release_orientation() {
  
  ::KWMsg::Vector3* temp = orientation_;
  orientation_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Vector3* PosSyncUnit::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:KWMsg.PosSyncUnit.orientation)
  
  ::KWMsg::Vector3* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::KWMsg::Vector3* PosSyncUnit::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Vector3>(GetArenaForAllocation());
    orientation_ = p;
  }
  return orientation_;
}
inline ::KWMsg::Vector3* PosSyncUnit::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PosSyncUnit.orientation)
  return _internal_mutable_orientation();
}
inline void PosSyncUnit::set_allocated_orientation(::KWMsg::Vector3* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PosSyncUnit.orientation)
}

// int32 status = 4;
inline void PosSyncUnit::clear_status() {
  status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PosSyncUnit::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PosSyncUnit::status() const {
  // @@protoc_insertion_point(field_get:KWMsg.PosSyncUnit.status)
  return _internal_status();
}
inline void PosSyncUnit::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  status_ = value;
}
inline void PosSyncUnit::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:KWMsg.PosSyncUnit.status)
}

// .KWMsg.PosSyncUnit.EMoveType type = 5;
inline void PosSyncUnit::clear_type() {
  type_ = 0;
}
inline ::KWMsg::PosSyncUnit_EMoveType PosSyncUnit::_internal_type() const {
  return static_cast< ::KWMsg::PosSyncUnit_EMoveType >(type_);
}
inline ::KWMsg::PosSyncUnit_EMoveType PosSyncUnit::type() const {
  // @@protoc_insertion_point(field_get:KWMsg.PosSyncUnit.type)
  return _internal_type();
}
inline void PosSyncUnit::_internal_set_type(::KWMsg::PosSyncUnit_EMoveType value) {
  
  type_ = value;
}
inline void PosSyncUnit::set_type(::KWMsg::PosSyncUnit_EMoveType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.PosSyncUnit.type)
}

// -------------------------------------------------------------------

// ReqAckPlayerPosSync

// int32 sequence = 1;
inline void ReqAckPlayerPosSync::clear_sequence() {
  sequence_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckPlayerPosSync::_internal_sequence() const {
  return sequence_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAckPlayerPosSync::sequence() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerPosSync.sequence)
  return _internal_sequence();
}
inline void ReqAckPlayerPosSync::_internal_set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sequence_ = value;
}
inline void ReqAckPlayerPosSync::set_sequence(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sequence(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckPlayerPosSync.sequence)
}

// .KWMsg.PosSyncUnit sync_unit = 2;
inline bool ReqAckPlayerPosSync::_internal_has_sync_unit() const {
  return this != internal_default_instance() && sync_unit_ != nullptr;
}
inline bool ReqAckPlayerPosSync::has_sync_unit() const {
  return _internal_has_sync_unit();
}
inline void ReqAckPlayerPosSync::clear_sync_unit() {
  if (GetArenaForAllocation() == nullptr && sync_unit_ != nullptr) {
    delete sync_unit_;
  }
  sync_unit_ = nullptr;
}
inline const ::KWMsg::PosSyncUnit& ReqAckPlayerPosSync::_internal_sync_unit() const {
  const ::KWMsg::PosSyncUnit* p = sync_unit_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::PosSyncUnit&>(
      ::KWMsg::_PosSyncUnit_default_instance_);
}
inline const ::KWMsg::PosSyncUnit& ReqAckPlayerPosSync::sync_unit() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerPosSync.sync_unit)
  return _internal_sync_unit();
}
inline void ReqAckPlayerPosSync::unsafe_arena_set_allocated_sync_unit(
    ::KWMsg::PosSyncUnit* sync_unit) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sync_unit_);
  }
  sync_unit_ = sync_unit;
  if (sync_unit) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqAckPlayerPosSync.sync_unit)
}
inline ::KWMsg::PosSyncUnit* ReqAckPlayerPosSync::release_sync_unit() {
  
  ::KWMsg::PosSyncUnit* temp = sync_unit_;
  sync_unit_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::PosSyncUnit* ReqAckPlayerPosSync::unsafe_arena_release_sync_unit() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckPlayerPosSync.sync_unit)
  
  ::KWMsg::PosSyncUnit* temp = sync_unit_;
  sync_unit_ = nullptr;
  return temp;
}
inline ::KWMsg::PosSyncUnit* ReqAckPlayerPosSync::_internal_mutable_sync_unit() {
  
  if (sync_unit_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::PosSyncUnit>(GetArenaForAllocation());
    sync_unit_ = p;
  }
  return sync_unit_;
}
inline ::KWMsg::PosSyncUnit* ReqAckPlayerPosSync::mutable_sync_unit() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckPlayerPosSync.sync_unit)
  return _internal_mutable_sync_unit();
}
inline void ReqAckPlayerPosSync::set_allocated_sync_unit(::KWMsg::PosSyncUnit* sync_unit) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete sync_unit_;
  }
  if (sync_unit) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::PosSyncUnit>::GetOwningArena(sync_unit);
    if (message_arena != submessage_arena) {
      sync_unit = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sync_unit, submessage_arena);
    }
    
  } else {
    
  }
  sync_unit_ = sync_unit;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckPlayerPosSync.sync_unit)
}

// -------------------------------------------------------------------

// ReqSwapScene

// .KWMsg.Ident player_id = 1;
inline bool ReqSwapScene::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqSwapScene::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqSwapScene::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqSwapScene::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSwapScene.player_id)
  return _internal_player_id();
}
inline void ReqSwapScene::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqSwapScene.player_id)
}
inline ::KWMsg::Ident* ReqSwapScene::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqSwapScene::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSwapScene.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqSwapScene::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqSwapScene::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSwapScene.player_id)
  return _internal_mutable_player_id();
}
inline void ReqSwapScene::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSwapScene.player_id)
}

// int32 scene_id = 2;
inline void ReqSwapScene::clear_scene_id() {
  scene_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSwapScene::_internal_scene_id() const {
  return scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSwapScene::scene_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSwapScene.scene_id)
  return _internal_scene_id();
}
inline void ReqSwapScene::_internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_id_ = value;
}
inline void ReqSwapScene::set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqSwapScene.scene_id)
}

// bytes args = 3;
inline void ReqSwapScene::clear_args() {
  args_.ClearToEmpty();
}
inline const std::string& ReqSwapScene::args() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSwapScene.args)
  return _internal_args();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSwapScene::set_args(ArgT0&& arg0, ArgT... args) {
 
 args_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSwapScene.args)
}
inline std::string* ReqSwapScene::mutable_args() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSwapScene.args)
  return _internal_mutable_args();
}
inline const std::string& ReqSwapScene::_internal_args() const {
  return args_.Get();
}
inline void ReqSwapScene::_internal_set_args(const std::string& value) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSwapScene::_internal_mutable_args() {
  
  return args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSwapScene::release_args() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSwapScene.args)
  return args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSwapScene::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSwapScene.args)
}

// -------------------------------------------------------------------

// AckSwapScene

// .KWMsg.EGameEventCode event_code = 1;
inline void AckSwapScene::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckSwapScene::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckSwapScene::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSwapScene.event_code)
  return _internal_event_code();
}
inline void AckSwapScene::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckSwapScene::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSwapScene.event_code)
}

// int32 scene_id = 2;
inline void AckSwapScene::clear_scene_id() {
  scene_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckSwapScene::_internal_scene_id() const {
  return scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckSwapScene::scene_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSwapScene.scene_id)
  return _internal_scene_id();
}
inline void AckSwapScene::_internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_id_ = value;
}
inline void AckSwapScene::set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSwapScene.scene_id)
}

// bytes args = 3;
inline void AckSwapScene::clear_args() {
  args_.ClearToEmpty();
}
inline const std::string& AckSwapScene::args() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSwapScene.args)
  return _internal_args();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckSwapScene::set_args(ArgT0&& arg0, ArgT... args) {
 
 args_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckSwapScene.args)
}
inline std::string* AckSwapScene::mutable_args() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSwapScene.args)
  return _internal_mutable_args();
}
inline const std::string& AckSwapScene::_internal_args() const {
  return args_.Get();
}
inline void AckSwapScene::_internal_set_args(const std::string& value) {
  
  args_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckSwapScene::_internal_mutable_args() {
  
  return args_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckSwapScene::release_args() {
  // @@protoc_insertion_point(field_release:KWMsg.AckSwapScene.args)
  return args_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckSwapScene::set_allocated_args(std::string* args) {
  if (args != nullptr) {
    
  } else {
    
  }
  args_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), args,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckSwapScene.args)
}

// -------------------------------------------------------------------

// AckSwapSceneNotify

// .KWMsg.EGameEventCode event_code = 1;
inline void AckSwapSceneNotify::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckSwapSceneNotify::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckSwapSceneNotify::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSwapSceneNotify.event_code)
  return _internal_event_code();
}
inline void AckSwapSceneNotify::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckSwapSceneNotify::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSwapSceneNotify.event_code)
}

// int32 scene_id = 2;
inline void AckSwapSceneNotify::clear_scene_id() {
  scene_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckSwapSceneNotify::_internal_scene_id() const {
  return scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckSwapSceneNotify::scene_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSwapSceneNotify.scene_id)
  return _internal_scene_id();
}
inline void AckSwapSceneNotify::_internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_id_ = value;
}
inline void AckSwapSceneNotify::set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSwapSceneNotify.scene_id)
}

// -------------------------------------------------------------------

// ReqAckPlayerChat

// .KWMsg.Ident player_id = 1;
inline bool ReqAckPlayerChat::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqAckPlayerChat::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqAckPlayerChat::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqAckPlayerChat::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerChat.player_id)
  return _internal_player_id();
}
inline void ReqAckPlayerChat::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqAckPlayerChat.player_id)
}
inline ::KWMsg::Ident* ReqAckPlayerChat::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqAckPlayerChat::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckPlayerChat.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqAckPlayerChat::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqAckPlayerChat::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckPlayerChat.player_id)
  return _internal_mutable_player_id();
}
inline void ReqAckPlayerChat::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckPlayerChat.player_id)
}

// bytes nickname = 2;
inline void ReqAckPlayerChat::clear_nickname() {
  nickname_.ClearToEmpty();
}
inline const std::string& ReqAckPlayerChat::nickname() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerChat.nickname)
  return _internal_nickname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAckPlayerChat::set_nickname(ArgT0&& arg0, ArgT... args) {
 
 nickname_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckPlayerChat.nickname)
}
inline std::string* ReqAckPlayerChat::mutable_nickname() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckPlayerChat.nickname)
  return _internal_mutable_nickname();
}
inline const std::string& ReqAckPlayerChat::_internal_nickname() const {
  return nickname_.Get();
}
inline void ReqAckPlayerChat::_internal_set_nickname(const std::string& value) {
  
  nickname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::_internal_mutable_nickname() {
  
  return nickname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::release_nickname() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckPlayerChat.nickname)
  return nickname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqAckPlayerChat::set_allocated_nickname(std::string* nickname) {
  if (nickname != nullptr) {
    
  } else {
    
  }
  nickname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nickname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckPlayerChat.nickname)
}

// bytes avatar = 3;
inline void ReqAckPlayerChat::clear_avatar() {
  avatar_.ClearToEmpty();
}
inline const std::string& ReqAckPlayerChat::avatar() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerChat.avatar)
  return _internal_avatar();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAckPlayerChat::set_avatar(ArgT0&& arg0, ArgT... args) {
 
 avatar_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckPlayerChat.avatar)
}
inline std::string* ReqAckPlayerChat::mutable_avatar() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckPlayerChat.avatar)
  return _internal_mutable_avatar();
}
inline const std::string& ReqAckPlayerChat::_internal_avatar() const {
  return avatar_.Get();
}
inline void ReqAckPlayerChat::_internal_set_avatar(const std::string& value) {
  
  avatar_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::_internal_mutable_avatar() {
  
  return avatar_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::release_avatar() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckPlayerChat.avatar)
  return avatar_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqAckPlayerChat::set_allocated_avatar(std::string* avatar) {
  if (avatar != nullptr) {
    
  } else {
    
  }
  avatar_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckPlayerChat.avatar)
}

// bytes avatar_frame = 4;
inline void ReqAckPlayerChat::clear_avatar_frame() {
  avatar_frame_.ClearToEmpty();
}
inline const std::string& ReqAckPlayerChat::avatar_frame() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerChat.avatar_frame)
  return _internal_avatar_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAckPlayerChat::set_avatar_frame(ArgT0&& arg0, ArgT... args) {
 
 avatar_frame_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckPlayerChat.avatar_frame)
}
inline std::string* ReqAckPlayerChat::mutable_avatar_frame() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckPlayerChat.avatar_frame)
  return _internal_mutable_avatar_frame();
}
inline const std::string& ReqAckPlayerChat::_internal_avatar_frame() const {
  return avatar_frame_.Get();
}
inline void ReqAckPlayerChat::_internal_set_avatar_frame(const std::string& value) {
  
  avatar_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::_internal_mutable_avatar_frame() {
  
  return avatar_frame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::release_avatar_frame() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckPlayerChat.avatar_frame)
  return avatar_frame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqAckPlayerChat::set_allocated_avatar_frame(std::string* avatar_frame) {
  if (avatar_frame != nullptr) {
    
  } else {
    
  }
  avatar_frame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_frame,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckPlayerChat.avatar_frame)
}

// .KWMsg.ReqAckPlayerChat.EGameChatChannel chat_channel = 5;
inline void ReqAckPlayerChat::clear_chat_channel() {
  chat_channel_ = 0;
}
inline ::KWMsg::ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::_internal_chat_channel() const {
  return static_cast< ::KWMsg::ReqAckPlayerChat_EGameChatChannel >(chat_channel_);
}
inline ::KWMsg::ReqAckPlayerChat_EGameChatChannel ReqAckPlayerChat::chat_channel() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerChat.chat_channel)
  return _internal_chat_channel();
}
inline void ReqAckPlayerChat::_internal_set_chat_channel(::KWMsg::ReqAckPlayerChat_EGameChatChannel value) {
  
  chat_channel_ = value;
}
inline void ReqAckPlayerChat::set_chat_channel(::KWMsg::ReqAckPlayerChat_EGameChatChannel value) {
  _internal_set_chat_channel(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckPlayerChat.chat_channel)
}

// .KWMsg.ReqAckPlayerChat.EGameChatType chat_type = 6;
inline void ReqAckPlayerChat::clear_chat_type() {
  chat_type_ = 0;
}
inline ::KWMsg::ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::_internal_chat_type() const {
  return static_cast< ::KWMsg::ReqAckPlayerChat_EGameChatType >(chat_type_);
}
inline ::KWMsg::ReqAckPlayerChat_EGameChatType ReqAckPlayerChat::chat_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerChat.chat_type)
  return _internal_chat_type();
}
inline void ReqAckPlayerChat::_internal_set_chat_type(::KWMsg::ReqAckPlayerChat_EGameChatType value) {
  
  chat_type_ = value;
}
inline void ReqAckPlayerChat::set_chat_type(::KWMsg::ReqAckPlayerChat_EGameChatType value) {
  _internal_set_chat_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckPlayerChat.chat_type)
}

// bytes chat_info = 7;
inline void ReqAckPlayerChat::clear_chat_info() {
  chat_info_.ClearToEmpty();
}
inline const std::string& ReqAckPlayerChat::chat_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAckPlayerChat.chat_info)
  return _internal_chat_info();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAckPlayerChat::set_chat_info(ArgT0&& arg0, ArgT... args) {
 
 chat_info_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqAckPlayerChat.chat_info)
}
inline std::string* ReqAckPlayerChat::mutable_chat_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAckPlayerChat.chat_info)
  return _internal_mutable_chat_info();
}
inline const std::string& ReqAckPlayerChat::_internal_chat_info() const {
  return chat_info_.Get();
}
inline void ReqAckPlayerChat::_internal_set_chat_info(const std::string& value) {
  
  chat_info_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::_internal_mutable_chat_info() {
  
  return chat_info_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqAckPlayerChat::release_chat_info() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAckPlayerChat.chat_info)
  return chat_info_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqAckPlayerChat::set_allocated_chat_info(std::string* chat_info) {
  if (chat_info != nullptr) {
    
  } else {
    
  }
  chat_info_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_info,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAckPlayerChat.chat_info)
}

// -------------------------------------------------------------------

// ReqCreateKcpObject

// .KWMsg.Ident player_id = 1;
inline bool ReqCreateKcpObject::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCreateKcpObject::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCreateKcpObject::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCreateKcpObject::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateKcpObject.player_id)
  return _internal_player_id();
}
inline void ReqCreateKcpObject::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCreateKcpObject.player_id)
}
inline ::KWMsg::Ident* ReqCreateKcpObject::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCreateKcpObject::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCreateKcpObject.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCreateKcpObject::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCreateKcpObject::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCreateKcpObject.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCreateKcpObject::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCreateKcpObject.player_id)
}

// -------------------------------------------------------------------

// AckCreateKcpObject

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCreateKcpObject::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCreateKcpObject::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCreateKcpObject::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateKcpObject.event_code)
  return _internal_event_code();
}
inline void AckCreateKcpObject::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCreateKcpObject::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateKcpObject.event_code)
}

// bytes server_ip = 2;
inline void AckCreateKcpObject::clear_server_ip() {
  server_ip_.ClearToEmpty();
}
inline const std::string& AckCreateKcpObject::server_ip() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateKcpObject.server_ip)
  return _internal_server_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCreateKcpObject::set_server_ip(ArgT0&& arg0, ArgT... args) {
 
 server_ip_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateKcpObject.server_ip)
}
inline std::string* AckCreateKcpObject::mutable_server_ip() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCreateKcpObject.server_ip)
  return _internal_mutable_server_ip();
}
inline const std::string& AckCreateKcpObject::_internal_server_ip() const {
  return server_ip_.Get();
}
inline void AckCreateKcpObject::_internal_set_server_ip(const std::string& value) {
  
  server_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCreateKcpObject::_internal_mutable_server_ip() {
  
  return server_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCreateKcpObject::release_server_ip() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCreateKcpObject.server_ip)
  return server_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCreateKcpObject::set_allocated_server_ip(std::string* server_ip) {
  if (server_ip != nullptr) {
    
  } else {
    
  }
  server_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), server_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCreateKcpObject.server_ip)
}

// int32 server_port = 3;
inline void AckCreateKcpObject::clear_server_port() {
  server_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCreateKcpObject::_internal_server_port() const {
  return server_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCreateKcpObject::server_port() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateKcpObject.server_port)
  return _internal_server_port();
}
inline void AckCreateKcpObject::_internal_set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_port_ = value;
}
inline void AckCreateKcpObject::set_server_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_port(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateKcpObject.server_port)
}

// uint32 conv = 4;
inline void AckCreateKcpObject::clear_conv() {
  conv_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AckCreateKcpObject::_internal_conv() const {
  return conv_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AckCreateKcpObject::conv() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateKcpObject.conv)
  return _internal_conv();
}
inline void AckCreateKcpObject::_internal_set_conv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  conv_ = value;
}
inline void AckCreateKcpObject::set_conv(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_conv(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateKcpObject.conv)
}

// -------------------------------------------------------------------

// ReqEstablishKcpConnection

// .KWMsg.Ident player_id = 1;
inline bool ReqEstablishKcpConnection::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqEstablishKcpConnection::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqEstablishKcpConnection::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqEstablishKcpConnection::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqEstablishKcpConnection.player_id)
  return _internal_player_id();
}
inline void ReqEstablishKcpConnection::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqEstablishKcpConnection.player_id)
}
inline ::KWMsg::Ident* ReqEstablishKcpConnection::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqEstablishKcpConnection::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqEstablishKcpConnection.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqEstablishKcpConnection::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqEstablishKcpConnection::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqEstablishKcpConnection.player_id)
  return _internal_mutable_player_id();
}
inline void ReqEstablishKcpConnection::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqEstablishKcpConnection.player_id)
}

// -------------------------------------------------------------------

// AckEstablishKcpConnection

// .KWMsg.EGameEventCode event_code = 1;
inline void AckEstablishKcpConnection::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckEstablishKcpConnection::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckEstablishKcpConnection::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckEstablishKcpConnection.event_code)
  return _internal_event_code();
}
inline void AckEstablishKcpConnection::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckEstablishKcpConnection::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckEstablishKcpConnection.event_code)
}

// -------------------------------------------------------------------

// ReqTryPushClientIntoQueueUp

// bytes account = 1;
inline void ReqTryPushClientIntoQueueUp::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqTryPushClientIntoQueueUp::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTryPushClientIntoQueueUp.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqTryPushClientIntoQueueUp::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqTryPushClientIntoQueueUp.account)
}
inline std::string* ReqTryPushClientIntoQueueUp::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTryPushClientIntoQueueUp.account)
  return _internal_mutable_account();
}
inline const std::string& ReqTryPushClientIntoQueueUp::_internal_account() const {
  return account_.Get();
}
inline void ReqTryPushClientIntoQueueUp::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqTryPushClientIntoQueueUp::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqTryPushClientIntoQueueUp::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTryPushClientIntoQueueUp.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqTryPushClientIntoQueueUp::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTryPushClientIntoQueueUp.account)
}

// int32 world_id = 2;
inline void ReqTryPushClientIntoQueueUp::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTryPushClientIntoQueueUp::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTryPushClientIntoQueueUp::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTryPushClientIntoQueueUp.world_id)
  return _internal_world_id();
}
inline void ReqTryPushClientIntoQueueUp::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void ReqTryPushClientIntoQueueUp::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqTryPushClientIntoQueueUp.world_id)
}

// int32 login_id = 3;
inline void ReqTryPushClientIntoQueueUp::clear_login_id() {
  login_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTryPushClientIntoQueueUp::_internal_login_id() const {
  return login_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTryPushClientIntoQueueUp::login_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTryPushClientIntoQueueUp.login_id)
  return _internal_login_id();
}
inline void ReqTryPushClientIntoQueueUp::_internal_set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  login_id_ = value;
}
inline void ReqTryPushClientIntoQueueUp::set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_login_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqTryPushClientIntoQueueUp.login_id)
}

// .KWMsg.Ident sender = 4;
inline bool ReqTryPushClientIntoQueueUp::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool ReqTryPushClientIntoQueueUp::has_sender() const {
  return _internal_has_sender();
}
inline const ::KWMsg::Ident& ReqTryPushClientIntoQueueUp::_internal_sender() const {
  const ::KWMsg::Ident* p = sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqTryPushClientIntoQueueUp::sender() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTryPushClientIntoQueueUp.sender)
  return _internal_sender();
}
inline void ReqTryPushClientIntoQueueUp::unsafe_arena_set_allocated_sender(
    ::KWMsg::Ident* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqTryPushClientIntoQueueUp.sender)
}
inline ::KWMsg::Ident* ReqTryPushClientIntoQueueUp::release_sender() {
  
  ::KWMsg::Ident* temp = sender_;
  sender_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqTryPushClientIntoQueueUp::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTryPushClientIntoQueueUp.sender)
  
  ::KWMsg::Ident* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqTryPushClientIntoQueueUp::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    sender_ = p;
  }
  return sender_;
}
inline ::KWMsg::Ident* ReqTryPushClientIntoQueueUp::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTryPushClientIntoQueueUp.sender)
  return _internal_mutable_sender();
}
inline void ReqTryPushClientIntoQueueUp::set_allocated_sender(::KWMsg::Ident* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender));
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTryPushClientIntoQueueUp.sender)
}

// -------------------------------------------------------------------

// AckPushClientIntoQueueUp

// .KWMsg.EGameEventCode event_code = 1;
inline void AckPushClientIntoQueueUp::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckPushClientIntoQueueUp::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckPushClientIntoQueueUp::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPushClientIntoQueueUp.event_code)
  return _internal_event_code();
}
inline void AckPushClientIntoQueueUp::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckPushClientIntoQueueUp::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckPushClientIntoQueueUp.event_code)
}

// bytes ticket = 2;
inline void AckPushClientIntoQueueUp::clear_ticket() {
  ticket_.ClearToEmpty();
}
inline const std::string& AckPushClientIntoQueueUp::ticket() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPushClientIntoQueueUp.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckPushClientIntoQueueUp::set_ticket(ArgT0&& arg0, ArgT... args) {
 
 ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckPushClientIntoQueueUp.ticket)
}
inline std::string* AckPushClientIntoQueueUp::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckPushClientIntoQueueUp.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& AckPushClientIntoQueueUp::_internal_ticket() const {
  return ticket_.Get();
}
inline void AckPushClientIntoQueueUp::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckPushClientIntoQueueUp::_internal_mutable_ticket() {
  
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckPushClientIntoQueueUp::release_ticket() {
  // @@protoc_insertion_point(field_release:KWMsg.AckPushClientIntoQueueUp.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckPushClientIntoQueueUp::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckPushClientIntoQueueUp.ticket)
}

// bytes account = 3;
inline void AckPushClientIntoQueueUp::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& AckPushClientIntoQueueUp::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPushClientIntoQueueUp.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckPushClientIntoQueueUp::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckPushClientIntoQueueUp.account)
}
inline std::string* AckPushClientIntoQueueUp::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckPushClientIntoQueueUp.account)
  return _internal_mutable_account();
}
inline const std::string& AckPushClientIntoQueueUp::_internal_account() const {
  return account_.Get();
}
inline void AckPushClientIntoQueueUp::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckPushClientIntoQueueUp::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckPushClientIntoQueueUp::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.AckPushClientIntoQueueUp.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckPushClientIntoQueueUp::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckPushClientIntoQueueUp.account)
}

// int32 world_id = 4;
inline void AckPushClientIntoQueueUp::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckPushClientIntoQueueUp::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckPushClientIntoQueueUp::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPushClientIntoQueueUp.world_id)
  return _internal_world_id();
}
inline void AckPushClientIntoQueueUp::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void AckPushClientIntoQueueUp::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckPushClientIntoQueueUp.world_id)
}

// int32 login_id = 5;
inline void AckPushClientIntoQueueUp::clear_login_id() {
  login_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckPushClientIntoQueueUp::_internal_login_id() const {
  return login_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckPushClientIntoQueueUp::login_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPushClientIntoQueueUp.login_id)
  return _internal_login_id();
}
inline void AckPushClientIntoQueueUp::_internal_set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  login_id_ = value;
}
inline void AckPushClientIntoQueueUp::set_login_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_login_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckPushClientIntoQueueUp.login_id)
}

// .KWMsg.Ident sender = 6;
inline bool AckPushClientIntoQueueUp::_internal_has_sender() const {
  return this != internal_default_instance() && sender_ != nullptr;
}
inline bool AckPushClientIntoQueueUp::has_sender() const {
  return _internal_has_sender();
}
inline const ::KWMsg::Ident& AckPushClientIntoQueueUp::_internal_sender() const {
  const ::KWMsg::Ident* p = sender_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckPushClientIntoQueueUp::sender() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPushClientIntoQueueUp.sender)
  return _internal_sender();
}
inline void AckPushClientIntoQueueUp::unsafe_arena_set_allocated_sender(
    ::KWMsg::Ident* sender) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  sender_ = sender;
  if (sender) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckPushClientIntoQueueUp.sender)
}
inline ::KWMsg::Ident* AckPushClientIntoQueueUp::release_sender() {
  
  ::KWMsg::Ident* temp = sender_;
  sender_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckPushClientIntoQueueUp::unsafe_arena_release_sender() {
  // @@protoc_insertion_point(field_release:KWMsg.AckPushClientIntoQueueUp.sender)
  
  ::KWMsg::Ident* temp = sender_;
  sender_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckPushClientIntoQueueUp::_internal_mutable_sender() {
  
  if (sender_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    sender_ = p;
  }
  return sender_;
}
inline ::KWMsg::Ident* AckPushClientIntoQueueUp::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckPushClientIntoQueueUp.sender)
  return _internal_mutable_sender();
}
inline void AckPushClientIntoQueueUp::set_allocated_sender(::KWMsg::Ident* sender) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender_);
  }
  if (sender) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sender));
    if (message_arena != submessage_arena) {
      sender = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sender, submessage_arena);
    }
    
  } else {
    
  }
  sender_ = sender;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckPushClientIntoQueueUp.sender)
}

// bytes queue_up_ip = 7;
inline void AckPushClientIntoQueueUp::clear_queue_up_ip() {
  queue_up_ip_.ClearToEmpty();
}
inline const std::string& AckPushClientIntoQueueUp::queue_up_ip() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPushClientIntoQueueUp.queue_up_ip)
  return _internal_queue_up_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckPushClientIntoQueueUp::set_queue_up_ip(ArgT0&& arg0, ArgT... args) {
 
 queue_up_ip_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckPushClientIntoQueueUp.queue_up_ip)
}
inline std::string* AckPushClientIntoQueueUp::mutable_queue_up_ip() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckPushClientIntoQueueUp.queue_up_ip)
  return _internal_mutable_queue_up_ip();
}
inline const std::string& AckPushClientIntoQueueUp::_internal_queue_up_ip() const {
  return queue_up_ip_.Get();
}
inline void AckPushClientIntoQueueUp::_internal_set_queue_up_ip(const std::string& value) {
  
  queue_up_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckPushClientIntoQueueUp::_internal_mutable_queue_up_ip() {
  
  return queue_up_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckPushClientIntoQueueUp::release_queue_up_ip() {
  // @@protoc_insertion_point(field_release:KWMsg.AckPushClientIntoQueueUp.queue_up_ip)
  return queue_up_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckPushClientIntoQueueUp::set_allocated_queue_up_ip(std::string* queue_up_ip) {
  if (queue_up_ip != nullptr) {
    
  } else {
    
  }
  queue_up_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), queue_up_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckPushClientIntoQueueUp.queue_up_ip)
}

// int32 queue_up_port = 8;
inline void AckPushClientIntoQueueUp::clear_queue_up_port() {
  queue_up_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckPushClientIntoQueueUp::_internal_queue_up_port() const {
  return queue_up_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckPushClientIntoQueueUp::queue_up_port() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPushClientIntoQueueUp.queue_up_port)
  return _internal_queue_up_port();
}
inline void AckPushClientIntoQueueUp::_internal_set_queue_up_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  queue_up_port_ = value;
}
inline void AckPushClientIntoQueueUp::set_queue_up_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_queue_up_port(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckPushClientIntoQueueUp.queue_up_port)
}

// -------------------------------------------------------------------

// ReqQueueUpGetCurWorldSuitProxy

// bytes ticket = 1;
inline void ReqQueueUpGetCurWorldSuitProxy::clear_ticket() {
  ticket_.ClearToEmpty();
}
inline const std::string& ReqQueueUpGetCurWorldSuitProxy::ticket() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqQueueUpGetCurWorldSuitProxy.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqQueueUpGetCurWorldSuitProxy::set_ticket(ArgT0&& arg0, ArgT... args) {
 
 ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqQueueUpGetCurWorldSuitProxy.ticket)
}
inline std::string* ReqQueueUpGetCurWorldSuitProxy::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqQueueUpGetCurWorldSuitProxy.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& ReqQueueUpGetCurWorldSuitProxy::_internal_ticket() const {
  return ticket_.Get();
}
inline void ReqQueueUpGetCurWorldSuitProxy::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqQueueUpGetCurWorldSuitProxy::_internal_mutable_ticket() {
  
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqQueueUpGetCurWorldSuitProxy::release_ticket() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqQueueUpGetCurWorldSuitProxy.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqQueueUpGetCurWorldSuitProxy::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqQueueUpGetCurWorldSuitProxy.ticket)
}

// .KWMsg.Ident transpond_id = 2;
inline bool ReqQueueUpGetCurWorldSuitProxy::_internal_has_transpond_id() const {
  return this != internal_default_instance() && transpond_id_ != nullptr;
}
inline bool ReqQueueUpGetCurWorldSuitProxy::has_transpond_id() const {
  return _internal_has_transpond_id();
}
inline const ::KWMsg::Ident& ReqQueueUpGetCurWorldSuitProxy::_internal_transpond_id() const {
  const ::KWMsg::Ident* p = transpond_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqQueueUpGetCurWorldSuitProxy::transpond_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqQueueUpGetCurWorldSuitProxy.transpond_id)
  return _internal_transpond_id();
}
inline void ReqQueueUpGetCurWorldSuitProxy::unsafe_arena_set_allocated_transpond_id(
    ::KWMsg::Ident* transpond_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpond_id_);
  }
  transpond_id_ = transpond_id;
  if (transpond_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqQueueUpGetCurWorldSuitProxy.transpond_id)
}
inline ::KWMsg::Ident* ReqQueueUpGetCurWorldSuitProxy::release_transpond_id() {
  
  ::KWMsg::Ident* temp = transpond_id_;
  transpond_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqQueueUpGetCurWorldSuitProxy::unsafe_arena_release_transpond_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqQueueUpGetCurWorldSuitProxy.transpond_id)
  
  ::KWMsg::Ident* temp = transpond_id_;
  transpond_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqQueueUpGetCurWorldSuitProxy::_internal_mutable_transpond_id() {
  
  if (transpond_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    transpond_id_ = p;
  }
  return transpond_id_;
}
inline ::KWMsg::Ident* ReqQueueUpGetCurWorldSuitProxy::mutable_transpond_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqQueueUpGetCurWorldSuitProxy.transpond_id)
  return _internal_mutable_transpond_id();
}
inline void ReqQueueUpGetCurWorldSuitProxy::set_allocated_transpond_id(::KWMsg::Ident* transpond_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpond_id_);
  }
  if (transpond_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpond_id));
    if (message_arena != submessage_arena) {
      transpond_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transpond_id, submessage_arena);
    }
    
  } else {
    
  }
  transpond_id_ = transpond_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqQueueUpGetCurWorldSuitProxy.transpond_id)
}

// -------------------------------------------------------------------

// AckQueueUpGetCurWorldSuitProxy

// bytes ticket = 1;
inline void AckQueueUpGetCurWorldSuitProxy::clear_ticket() {
  ticket_.ClearToEmpty();
}
inline const std::string& AckQueueUpGetCurWorldSuitProxy::ticket() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQueueUpGetCurWorldSuitProxy.ticket)
  return _internal_ticket();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckQueueUpGetCurWorldSuitProxy::set_ticket(ArgT0&& arg0, ArgT... args) {
 
 ticket_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckQueueUpGetCurWorldSuitProxy.ticket)
}
inline std::string* AckQueueUpGetCurWorldSuitProxy::mutable_ticket() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckQueueUpGetCurWorldSuitProxy.ticket)
  return _internal_mutable_ticket();
}
inline const std::string& AckQueueUpGetCurWorldSuitProxy::_internal_ticket() const {
  return ticket_.Get();
}
inline void AckQueueUpGetCurWorldSuitProxy::_internal_set_ticket(const std::string& value) {
  
  ticket_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckQueueUpGetCurWorldSuitProxy::_internal_mutable_ticket() {
  
  return ticket_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckQueueUpGetCurWorldSuitProxy::release_ticket() {
  // @@protoc_insertion_point(field_release:KWMsg.AckQueueUpGetCurWorldSuitProxy.ticket)
  return ticket_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckQueueUpGetCurWorldSuitProxy::set_allocated_ticket(std::string* ticket) {
  if (ticket != nullptr) {
    
  } else {
    
  }
  ticket_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ticket,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckQueueUpGetCurWorldSuitProxy.ticket)
}

// .KWMsg.Ident transpond_id = 2;
inline bool AckQueueUpGetCurWorldSuitProxy::_internal_has_transpond_id() const {
  return this != internal_default_instance() && transpond_id_ != nullptr;
}
inline bool AckQueueUpGetCurWorldSuitProxy::has_transpond_id() const {
  return _internal_has_transpond_id();
}
inline const ::KWMsg::Ident& AckQueueUpGetCurWorldSuitProxy::_internal_transpond_id() const {
  const ::KWMsg::Ident* p = transpond_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckQueueUpGetCurWorldSuitProxy::transpond_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQueueUpGetCurWorldSuitProxy.transpond_id)
  return _internal_transpond_id();
}
inline void AckQueueUpGetCurWorldSuitProxy::unsafe_arena_set_allocated_transpond_id(
    ::KWMsg::Ident* transpond_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpond_id_);
  }
  transpond_id_ = transpond_id;
  if (transpond_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckQueueUpGetCurWorldSuitProxy.transpond_id)
}
inline ::KWMsg::Ident* AckQueueUpGetCurWorldSuitProxy::release_transpond_id() {
  
  ::KWMsg::Ident* temp = transpond_id_;
  transpond_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckQueueUpGetCurWorldSuitProxy::unsafe_arena_release_transpond_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckQueueUpGetCurWorldSuitProxy.transpond_id)
  
  ::KWMsg::Ident* temp = transpond_id_;
  transpond_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckQueueUpGetCurWorldSuitProxy::_internal_mutable_transpond_id() {
  
  if (transpond_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    transpond_id_ = p;
  }
  return transpond_id_;
}
inline ::KWMsg::Ident* AckQueueUpGetCurWorldSuitProxy::mutable_transpond_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckQueueUpGetCurWorldSuitProxy.transpond_id)
  return _internal_mutable_transpond_id();
}
inline void AckQueueUpGetCurWorldSuitProxy::set_allocated_transpond_id(::KWMsg::Ident* transpond_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpond_id_);
  }
  if (transpond_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(transpond_id));
    if (message_arena != submessage_arena) {
      transpond_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transpond_id, submessage_arena);
    }
    
  } else {
    
  }
  transpond_id_ = transpond_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckQueueUpGetCurWorldSuitProxy.transpond_id)
}

// bytes world_ip = 3;
inline void AckQueueUpGetCurWorldSuitProxy::clear_world_ip() {
  world_ip_.ClearToEmpty();
}
inline const std::string& AckQueueUpGetCurWorldSuitProxy::world_ip() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQueueUpGetCurWorldSuitProxy.world_ip)
  return _internal_world_ip();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckQueueUpGetCurWorldSuitProxy::set_world_ip(ArgT0&& arg0, ArgT... args) {
 
 world_ip_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckQueueUpGetCurWorldSuitProxy.world_ip)
}
inline std::string* AckQueueUpGetCurWorldSuitProxy::mutable_world_ip() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckQueueUpGetCurWorldSuitProxy.world_ip)
  return _internal_mutable_world_ip();
}
inline const std::string& AckQueueUpGetCurWorldSuitProxy::_internal_world_ip() const {
  return world_ip_.Get();
}
inline void AckQueueUpGetCurWorldSuitProxy::_internal_set_world_ip(const std::string& value) {
  
  world_ip_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckQueueUpGetCurWorldSuitProxy::_internal_mutable_world_ip() {
  
  return world_ip_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckQueueUpGetCurWorldSuitProxy::release_world_ip() {
  // @@protoc_insertion_point(field_release:KWMsg.AckQueueUpGetCurWorldSuitProxy.world_ip)
  return world_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckQueueUpGetCurWorldSuitProxy::set_allocated_world_ip(std::string* world_ip) {
  if (world_ip != nullptr) {
    
  } else {
    
  }
  world_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), world_ip,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckQueueUpGetCurWorldSuitProxy.world_ip)
}

// int32 world_port = 4;
inline void AckQueueUpGetCurWorldSuitProxy::clear_world_port() {
  world_port_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckQueueUpGetCurWorldSuitProxy::_internal_world_port() const {
  return world_port_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckQueueUpGetCurWorldSuitProxy::world_port() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQueueUpGetCurWorldSuitProxy.world_port)
  return _internal_world_port();
}
inline void AckQueueUpGetCurWorldSuitProxy::_internal_set_world_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_port_ = value;
}
inline void AckQueueUpGetCurWorldSuitProxy::set_world_port(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_port(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckQueueUpGetCurWorldSuitProxy.world_port)
}

// -------------------------------------------------------------------

// ReqUpdatePlayerLastHeartbeatTS

// bytes account = 1;
inline void ReqUpdatePlayerLastHeartbeatTS::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& ReqUpdatePlayerLastHeartbeatTS::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdatePlayerLastHeartbeatTS.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUpdatePlayerLastHeartbeatTS::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdatePlayerLastHeartbeatTS.account)
}
inline std::string* ReqUpdatePlayerLastHeartbeatTS::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdatePlayerLastHeartbeatTS.account)
  return _internal_mutable_account();
}
inline const std::string& ReqUpdatePlayerLastHeartbeatTS::_internal_account() const {
  return account_.Get();
}
inline void ReqUpdatePlayerLastHeartbeatTS::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUpdatePlayerLastHeartbeatTS::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUpdatePlayerLastHeartbeatTS::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdatePlayerLastHeartbeatTS.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUpdatePlayerLastHeartbeatTS::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdatePlayerLastHeartbeatTS.account)
}

// int64 ts = 2;
inline void ReqUpdatePlayerLastHeartbeatTS::clear_ts() {
  ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqUpdatePlayerLastHeartbeatTS::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqUpdatePlayerLastHeartbeatTS::ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdatePlayerLastHeartbeatTS.ts)
  return _internal_ts();
}
inline void ReqUpdatePlayerLastHeartbeatTS::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void ReqUpdatePlayerLastHeartbeatTS::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdatePlayerLastHeartbeatTS.ts)
}

// -------------------------------------------------------------------

// SyncQueueUpUserCancelOperation

// bytes account = 1;
inline void SyncQueueUpUserCancelOperation::clear_account() {
  account_.ClearToEmpty();
}
inline const std::string& SyncQueueUpUserCancelOperation::account() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncQueueUpUserCancelOperation.account)
  return _internal_account();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncQueueUpUserCancelOperation::set_account(ArgT0&& arg0, ArgT... args) {
 
 account_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.SyncQueueUpUserCancelOperation.account)
}
inline std::string* SyncQueueUpUserCancelOperation::mutable_account() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncQueueUpUserCancelOperation.account)
  return _internal_mutable_account();
}
inline const std::string& SyncQueueUpUserCancelOperation::_internal_account() const {
  return account_.Get();
}
inline void SyncQueueUpUserCancelOperation::_internal_set_account(const std::string& value) {
  
  account_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncQueueUpUserCancelOperation::_internal_mutable_account() {
  
  return account_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncQueueUpUserCancelOperation::release_account() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncQueueUpUserCancelOperation.account)
  return account_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncQueueUpUserCancelOperation::set_allocated_account(std::string* account) {
  if (account != nullptr) {
    
  } else {
    
  }
  account_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), account,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncQueueUpUserCancelOperation.account)
}

// int32 server_id = 2;
inline void SyncQueueUpUserCancelOperation::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncQueueUpUserCancelOperation::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncQueueUpUserCancelOperation::server_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncQueueUpUserCancelOperation.server_id)
  return _internal_server_id();
}
inline void SyncQueueUpUserCancelOperation::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void SyncQueueUpUserCancelOperation::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncQueueUpUserCancelOperation.server_id)
}

// -------------------------------------------------------------------

// SyncPlayerPropertiesCache

// .KWMsg.Ident player_id = 1;
inline bool SyncPlayerPropertiesCache::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncPlayerPropertiesCache::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncPlayerPropertiesCache::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncPlayerPropertiesCache::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerPropertiesCache.player_id)
  return _internal_player_id();
}
inline void SyncPlayerPropertiesCache::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerPropertiesCache.player_id)
}
inline ::KWMsg::Ident* SyncPlayerPropertiesCache::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerPropertiesCache::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerPropertiesCache.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerPropertiesCache::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncPlayerPropertiesCache::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerPropertiesCache.player_id)
  return _internal_mutable_player_id();
}
inline void SyncPlayerPropertiesCache::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerPropertiesCache.player_id)
}

// .KWMsg.ObjectProperty property = 2;
inline bool SyncPlayerPropertiesCache::_internal_has_property() const {
  return this != internal_default_instance() && property_ != nullptr;
}
inline bool SyncPlayerPropertiesCache::has_property() const {
  return _internal_has_property();
}
inline const ::KWMsg::ObjectProperty& SyncPlayerPropertiesCache::_internal_property() const {
  const ::KWMsg::ObjectProperty* p = property_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::ObjectProperty&>(
      ::KWMsg::_ObjectProperty_default_instance_);
}
inline const ::KWMsg::ObjectProperty& SyncPlayerPropertiesCache::property() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerPropertiesCache.property)
  return _internal_property();
}
inline void SyncPlayerPropertiesCache::unsafe_arena_set_allocated_property(
    ::KWMsg::ObjectProperty* property) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  property_ = property;
  if (property) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerPropertiesCache.property)
}
inline ::KWMsg::ObjectProperty* SyncPlayerPropertiesCache::release_property() {
  
  ::KWMsg::ObjectProperty* temp = property_;
  property_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::ObjectProperty* SyncPlayerPropertiesCache::unsafe_arena_release_property() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerPropertiesCache.property)
  
  ::KWMsg::ObjectProperty* temp = property_;
  property_ = nullptr;
  return temp;
}
inline ::KWMsg::ObjectProperty* SyncPlayerPropertiesCache::_internal_mutable_property() {
  
  if (property_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::ObjectProperty>(GetArenaForAllocation());
    property_ = p;
  }
  return property_;
}
inline ::KWMsg::ObjectProperty* SyncPlayerPropertiesCache::mutable_property() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerPropertiesCache.property)
  return _internal_mutable_property();
}
inline void SyncPlayerPropertiesCache::set_allocated_property(::KWMsg::ObjectProperty* property) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_);
  }
  if (property) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property));
    if (message_arena != submessage_arena) {
      property = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property, submessage_arena);
    }
    
  } else {
    
  }
  property_ = property;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerPropertiesCache.property)
}

// -------------------------------------------------------------------

// LoadPlayerPropertiesCache

// .KWMsg.Ident player_id = 1;
inline bool LoadPlayerPropertiesCache::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool LoadPlayerPropertiesCache::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& LoadPlayerPropertiesCache::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& LoadPlayerPropertiesCache::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.LoadPlayerPropertiesCache.player_id)
  return _internal_player_id();
}
inline void LoadPlayerPropertiesCache::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.LoadPlayerPropertiesCache.player_id)
}
inline ::KWMsg::Ident* LoadPlayerPropertiesCache::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* LoadPlayerPropertiesCache::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.LoadPlayerPropertiesCache.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* LoadPlayerPropertiesCache::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* LoadPlayerPropertiesCache::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.LoadPlayerPropertiesCache.player_id)
  return _internal_mutable_player_id();
}
inline void LoadPlayerPropertiesCache::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.LoadPlayerPropertiesCache.player_id)
}

// .KWMsg.ObjectPropertyList property_list = 2;
inline bool LoadPlayerPropertiesCache::_internal_has_property_list() const {
  return this != internal_default_instance() && property_list_ != nullptr;
}
inline bool LoadPlayerPropertiesCache::has_property_list() const {
  return _internal_has_property_list();
}
inline const ::KWMsg::ObjectPropertyList& LoadPlayerPropertiesCache::_internal_property_list() const {
  const ::KWMsg::ObjectPropertyList* p = property_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::ObjectPropertyList&>(
      ::KWMsg::_ObjectPropertyList_default_instance_);
}
inline const ::KWMsg::ObjectPropertyList& LoadPlayerPropertiesCache::property_list() const {
  // @@protoc_insertion_point(field_get:KWMsg.LoadPlayerPropertiesCache.property_list)
  return _internal_property_list();
}
inline void LoadPlayerPropertiesCache::unsafe_arena_set_allocated_property_list(
    ::KWMsg::ObjectPropertyList* property_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_list_);
  }
  property_list_ = property_list;
  if (property_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.LoadPlayerPropertiesCache.property_list)
}
inline ::KWMsg::ObjectPropertyList* LoadPlayerPropertiesCache::release_property_list() {
  
  ::KWMsg::ObjectPropertyList* temp = property_list_;
  property_list_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::ObjectPropertyList* LoadPlayerPropertiesCache::unsafe_arena_release_property_list() {
  // @@protoc_insertion_point(field_release:KWMsg.LoadPlayerPropertiesCache.property_list)
  
  ::KWMsg::ObjectPropertyList* temp = property_list_;
  property_list_ = nullptr;
  return temp;
}
inline ::KWMsg::ObjectPropertyList* LoadPlayerPropertiesCache::_internal_mutable_property_list() {
  
  if (property_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::ObjectPropertyList>(GetArenaForAllocation());
    property_list_ = p;
  }
  return property_list_;
}
inline ::KWMsg::ObjectPropertyList* LoadPlayerPropertiesCache::mutable_property_list() {
  // @@protoc_insertion_point(field_mutable:KWMsg.LoadPlayerPropertiesCache.property_list)
  return _internal_mutable_property_list();
}
inline void LoadPlayerPropertiesCache::set_allocated_property_list(::KWMsg::ObjectPropertyList* property_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_list_);
  }
  if (property_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(property_list));
    if (message_arena != submessage_arena) {
      property_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, property_list, submessage_arena);
    }
    
  } else {
    
  }
  property_list_ = property_list;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.LoadPlayerPropertiesCache.property_list)
}

// -------------------------------------------------------------------

// LoadPlayerRecordsCache

// .KWMsg.Ident player_id = 1;
inline bool LoadPlayerRecordsCache::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool LoadPlayerRecordsCache::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& LoadPlayerRecordsCache::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& LoadPlayerRecordsCache::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.LoadPlayerRecordsCache.player_id)
  return _internal_player_id();
}
inline void LoadPlayerRecordsCache::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.LoadPlayerRecordsCache.player_id)
}
inline ::KWMsg::Ident* LoadPlayerRecordsCache::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* LoadPlayerRecordsCache::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.LoadPlayerRecordsCache.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* LoadPlayerRecordsCache::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* LoadPlayerRecordsCache::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.LoadPlayerRecordsCache.player_id)
  return _internal_mutable_player_id();
}
inline void LoadPlayerRecordsCache::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.LoadPlayerRecordsCache.player_id)
}

// .KWMsg.ObjectRecordList record_list = 2;
inline bool LoadPlayerRecordsCache::_internal_has_record_list() const {
  return this != internal_default_instance() && record_list_ != nullptr;
}
inline bool LoadPlayerRecordsCache::has_record_list() const {
  return _internal_has_record_list();
}
inline const ::KWMsg::ObjectRecordList& LoadPlayerRecordsCache::_internal_record_list() const {
  const ::KWMsg::ObjectRecordList* p = record_list_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::ObjectRecordList&>(
      ::KWMsg::_ObjectRecordList_default_instance_);
}
inline const ::KWMsg::ObjectRecordList& LoadPlayerRecordsCache::record_list() const {
  // @@protoc_insertion_point(field_get:KWMsg.LoadPlayerRecordsCache.record_list)
  return _internal_record_list();
}
inline void LoadPlayerRecordsCache::unsafe_arena_set_allocated_record_list(
    ::KWMsg::ObjectRecordList* record_list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_list_);
  }
  record_list_ = record_list;
  if (record_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.LoadPlayerRecordsCache.record_list)
}
inline ::KWMsg::ObjectRecordList* LoadPlayerRecordsCache::release_record_list() {
  
  ::KWMsg::ObjectRecordList* temp = record_list_;
  record_list_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::ObjectRecordList* LoadPlayerRecordsCache::unsafe_arena_release_record_list() {
  // @@protoc_insertion_point(field_release:KWMsg.LoadPlayerRecordsCache.record_list)
  
  ::KWMsg::ObjectRecordList* temp = record_list_;
  record_list_ = nullptr;
  return temp;
}
inline ::KWMsg::ObjectRecordList* LoadPlayerRecordsCache::_internal_mutable_record_list() {
  
  if (record_list_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::ObjectRecordList>(GetArenaForAllocation());
    record_list_ = p;
  }
  return record_list_;
}
inline ::KWMsg::ObjectRecordList* LoadPlayerRecordsCache::mutable_record_list() {
  // @@protoc_insertion_point(field_mutable:KWMsg.LoadPlayerRecordsCache.record_list)
  return _internal_mutable_record_list();
}
inline void LoadPlayerRecordsCache::set_allocated_record_list(::KWMsg::ObjectRecordList* record_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_list_);
  }
  if (record_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_list));
    if (message_arena != submessage_arena) {
      record_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_list, submessage_arena);
    }
    
  } else {
    
  }
  record_list_ = record_list;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.LoadPlayerRecordsCache.record_list)
}

// -------------------------------------------------------------------

// SyncPlayerRecordsCacheAdd

// .KWMsg.Ident player_id = 1;
inline bool SyncPlayerRecordsCacheAdd::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncPlayerRecordsCacheAdd::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncPlayerRecordsCacheAdd::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncPlayerRecordsCacheAdd::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheAdd.player_id)
  return _internal_player_id();
}
inline void SyncPlayerRecordsCacheAdd::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerRecordsCacheAdd.player_id)
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheAdd::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheAdd::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerRecordsCacheAdd.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheAdd::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheAdd::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheAdd.player_id)
  return _internal_mutable_player_id();
}
inline void SyncPlayerRecordsCacheAdd::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerRecordsCacheAdd.player_id)
}

// bytes record_name = 2;
inline void SyncPlayerRecordsCacheAdd::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& SyncPlayerRecordsCacheAdd::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheAdd.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncPlayerRecordsCacheAdd::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerRecordsCacheAdd.record_name)
}
inline std::string* SyncPlayerRecordsCacheAdd::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheAdd.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& SyncPlayerRecordsCacheAdd::_internal_record_name() const {
  return record_name_.Get();
}
inline void SyncPlayerRecordsCacheAdd::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncPlayerRecordsCacheAdd::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncPlayerRecordsCacheAdd::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerRecordsCacheAdd.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncPlayerRecordsCacheAdd::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerRecordsCacheAdd.record_name)
}

// int32 row = 3;
inline void SyncPlayerRecordsCacheAdd::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerRecordsCacheAdd::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerRecordsCacheAdd::row() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheAdd.row)
  return _internal_row();
}
inline void SyncPlayerRecordsCacheAdd::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
}
inline void SyncPlayerRecordsCacheAdd::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerRecordsCacheAdd.row)
}

// repeated .KWMsg.RecordInt record_int_list = 4;
inline int SyncPlayerRecordsCacheAdd::_internal_record_int_list_size() const {
  return record_int_list_.size();
}
inline int SyncPlayerRecordsCacheAdd::record_int_list_size() const {
  return _internal_record_int_list_size();
}
inline ::KWMsg::RecordInt* SyncPlayerRecordsCacheAdd::mutable_record_int_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheAdd.record_int_list)
  return record_int_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt >*
SyncPlayerRecordsCacheAdd::mutable_record_int_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.SyncPlayerRecordsCacheAdd.record_int_list)
  return &record_int_list_;
}
inline const ::KWMsg::RecordInt& SyncPlayerRecordsCacheAdd::_internal_record_int_list(int index) const {
  return record_int_list_.Get(index);
}
inline const ::KWMsg::RecordInt& SyncPlayerRecordsCacheAdd::record_int_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheAdd.record_int_list)
  return _internal_record_int_list(index);
}
inline ::KWMsg::RecordInt* SyncPlayerRecordsCacheAdd::_internal_add_record_int_list() {
  return record_int_list_.Add();
}
inline ::KWMsg::RecordInt* SyncPlayerRecordsCacheAdd::add_record_int_list() {
  // @@protoc_insertion_point(field_add:KWMsg.SyncPlayerRecordsCacheAdd.record_int_list)
  return _internal_add_record_int_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordInt >&
SyncPlayerRecordsCacheAdd::record_int_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.SyncPlayerRecordsCacheAdd.record_int_list)
  return record_int_list_;
}

// repeated .KWMsg.RecordFloat record_float_list = 5;
inline int SyncPlayerRecordsCacheAdd::_internal_record_float_list_size() const {
  return record_float_list_.size();
}
inline int SyncPlayerRecordsCacheAdd::record_float_list_size() const {
  return _internal_record_float_list_size();
}
inline ::KWMsg::RecordFloat* SyncPlayerRecordsCacheAdd::mutable_record_float_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheAdd.record_float_list)
  return record_float_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat >*
SyncPlayerRecordsCacheAdd::mutable_record_float_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.SyncPlayerRecordsCacheAdd.record_float_list)
  return &record_float_list_;
}
inline const ::KWMsg::RecordFloat& SyncPlayerRecordsCacheAdd::_internal_record_float_list(int index) const {
  return record_float_list_.Get(index);
}
inline const ::KWMsg::RecordFloat& SyncPlayerRecordsCacheAdd::record_float_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheAdd.record_float_list)
  return _internal_record_float_list(index);
}
inline ::KWMsg::RecordFloat* SyncPlayerRecordsCacheAdd::_internal_add_record_float_list() {
  return record_float_list_.Add();
}
inline ::KWMsg::RecordFloat* SyncPlayerRecordsCacheAdd::add_record_float_list() {
  // @@protoc_insertion_point(field_add:KWMsg.SyncPlayerRecordsCacheAdd.record_float_list)
  return _internal_add_record_float_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordFloat >&
SyncPlayerRecordsCacheAdd::record_float_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.SyncPlayerRecordsCacheAdd.record_float_list)
  return record_float_list_;
}

// repeated .KWMsg.RecordString record_string_list = 6;
inline int SyncPlayerRecordsCacheAdd::_internal_record_string_list_size() const {
  return record_string_list_.size();
}
inline int SyncPlayerRecordsCacheAdd::record_string_list_size() const {
  return _internal_record_string_list_size();
}
inline ::KWMsg::RecordString* SyncPlayerRecordsCacheAdd::mutable_record_string_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheAdd.record_string_list)
  return record_string_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString >*
SyncPlayerRecordsCacheAdd::mutable_record_string_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.SyncPlayerRecordsCacheAdd.record_string_list)
  return &record_string_list_;
}
inline const ::KWMsg::RecordString& SyncPlayerRecordsCacheAdd::_internal_record_string_list(int index) const {
  return record_string_list_.Get(index);
}
inline const ::KWMsg::RecordString& SyncPlayerRecordsCacheAdd::record_string_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheAdd.record_string_list)
  return _internal_record_string_list(index);
}
inline ::KWMsg::RecordString* SyncPlayerRecordsCacheAdd::_internal_add_record_string_list() {
  return record_string_list_.Add();
}
inline ::KWMsg::RecordString* SyncPlayerRecordsCacheAdd::add_record_string_list() {
  // @@protoc_insertion_point(field_add:KWMsg.SyncPlayerRecordsCacheAdd.record_string_list)
  return _internal_add_record_string_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordString >&
SyncPlayerRecordsCacheAdd::record_string_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.SyncPlayerRecordsCacheAdd.record_string_list)
  return record_string_list_;
}

// repeated .KWMsg.RecordObject record_object_list = 7;
inline int SyncPlayerRecordsCacheAdd::_internal_record_object_list_size() const {
  return record_object_list_.size();
}
inline int SyncPlayerRecordsCacheAdd::record_object_list_size() const {
  return _internal_record_object_list_size();
}
inline ::KWMsg::RecordObject* SyncPlayerRecordsCacheAdd::mutable_record_object_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheAdd.record_object_list)
  return record_object_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject >*
SyncPlayerRecordsCacheAdd::mutable_record_object_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.SyncPlayerRecordsCacheAdd.record_object_list)
  return &record_object_list_;
}
inline const ::KWMsg::RecordObject& SyncPlayerRecordsCacheAdd::_internal_record_object_list(int index) const {
  return record_object_list_.Get(index);
}
inline const ::KWMsg::RecordObject& SyncPlayerRecordsCacheAdd::record_object_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheAdd.record_object_list)
  return _internal_record_object_list(index);
}
inline ::KWMsg::RecordObject* SyncPlayerRecordsCacheAdd::_internal_add_record_object_list() {
  return record_object_list_.Add();
}
inline ::KWMsg::RecordObject* SyncPlayerRecordsCacheAdd::add_record_object_list() {
  // @@protoc_insertion_point(field_add:KWMsg.SyncPlayerRecordsCacheAdd.record_object_list)
  return _internal_add_record_object_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordObject >&
SyncPlayerRecordsCacheAdd::record_object_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.SyncPlayerRecordsCacheAdd.record_object_list)
  return record_object_list_;
}

// repeated .KWMsg.RecordVector2 record_vector2_list = 8;
inline int SyncPlayerRecordsCacheAdd::_internal_record_vector2_list_size() const {
  return record_vector2_list_.size();
}
inline int SyncPlayerRecordsCacheAdd::record_vector2_list_size() const {
  return _internal_record_vector2_list_size();
}
inline ::KWMsg::RecordVector2* SyncPlayerRecordsCacheAdd::mutable_record_vector2_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheAdd.record_vector2_list)
  return record_vector2_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 >*
SyncPlayerRecordsCacheAdd::mutable_record_vector2_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.SyncPlayerRecordsCacheAdd.record_vector2_list)
  return &record_vector2_list_;
}
inline const ::KWMsg::RecordVector2& SyncPlayerRecordsCacheAdd::_internal_record_vector2_list(int index) const {
  return record_vector2_list_.Get(index);
}
inline const ::KWMsg::RecordVector2& SyncPlayerRecordsCacheAdd::record_vector2_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheAdd.record_vector2_list)
  return _internal_record_vector2_list(index);
}
inline ::KWMsg::RecordVector2* SyncPlayerRecordsCacheAdd::_internal_add_record_vector2_list() {
  return record_vector2_list_.Add();
}
inline ::KWMsg::RecordVector2* SyncPlayerRecordsCacheAdd::add_record_vector2_list() {
  // @@protoc_insertion_point(field_add:KWMsg.SyncPlayerRecordsCacheAdd.record_vector2_list)
  return _internal_add_record_vector2_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector2 >&
SyncPlayerRecordsCacheAdd::record_vector2_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.SyncPlayerRecordsCacheAdd.record_vector2_list)
  return record_vector2_list_;
}

// repeated .KWMsg.RecordVector3 record_vector3_list = 9;
inline int SyncPlayerRecordsCacheAdd::_internal_record_vector3_list_size() const {
  return record_vector3_list_.size();
}
inline int SyncPlayerRecordsCacheAdd::record_vector3_list_size() const {
  return _internal_record_vector3_list_size();
}
inline ::KWMsg::RecordVector3* SyncPlayerRecordsCacheAdd::mutable_record_vector3_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheAdd.record_vector3_list)
  return record_vector3_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 >*
SyncPlayerRecordsCacheAdd::mutable_record_vector3_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.SyncPlayerRecordsCacheAdd.record_vector3_list)
  return &record_vector3_list_;
}
inline const ::KWMsg::RecordVector3& SyncPlayerRecordsCacheAdd::_internal_record_vector3_list(int index) const {
  return record_vector3_list_.Get(index);
}
inline const ::KWMsg::RecordVector3& SyncPlayerRecordsCacheAdd::record_vector3_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheAdd.record_vector3_list)
  return _internal_record_vector3_list(index);
}
inline ::KWMsg::RecordVector3* SyncPlayerRecordsCacheAdd::_internal_add_record_vector3_list() {
  return record_vector3_list_.Add();
}
inline ::KWMsg::RecordVector3* SyncPlayerRecordsCacheAdd::add_record_vector3_list() {
  // @@protoc_insertion_point(field_add:KWMsg.SyncPlayerRecordsCacheAdd.record_vector3_list)
  return _internal_add_record_vector3_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecordVector3 >&
SyncPlayerRecordsCacheAdd::record_vector3_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.SyncPlayerRecordsCacheAdd.record_vector3_list)
  return record_vector3_list_;
}

// -------------------------------------------------------------------

// SyncPlayerRecordsCacheUpdate

// .KWMsg.Ident player_id = 1;
inline bool SyncPlayerRecordsCacheUpdate::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncPlayerRecordsCacheUpdate::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncPlayerRecordsCacheUpdate::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncPlayerRecordsCacheUpdate::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheUpdate.player_id)
  return _internal_player_id();
}
inline void SyncPlayerRecordsCacheUpdate::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.player_id)
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheUpdate::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheUpdate::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerRecordsCacheUpdate.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheUpdate::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheUpdate::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheUpdate.player_id)
  return _internal_mutable_player_id();
}
inline void SyncPlayerRecordsCacheUpdate::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.player_id)
}

// bytes record_name = 2;
inline void SyncPlayerRecordsCacheUpdate::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& SyncPlayerRecordsCacheUpdate::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheUpdate.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncPlayerRecordsCacheUpdate::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerRecordsCacheUpdate.record_name)
}
inline std::string* SyncPlayerRecordsCacheUpdate::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheUpdate.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& SyncPlayerRecordsCacheUpdate::_internal_record_name() const {
  return record_name_.Get();
}
inline void SyncPlayerRecordsCacheUpdate::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncPlayerRecordsCacheUpdate::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncPlayerRecordsCacheUpdate::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerRecordsCacheUpdate.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncPlayerRecordsCacheUpdate::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.record_name)
}

// int32 row = 3;
inline void SyncPlayerRecordsCacheUpdate::clear_row() {
  row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerRecordsCacheUpdate::_internal_row() const {
  return row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerRecordsCacheUpdate::row() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheUpdate.row)
  return _internal_row();
}
inline void SyncPlayerRecordsCacheUpdate::_internal_set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_ = value;
}
inline void SyncPlayerRecordsCacheUpdate::set_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerRecordsCacheUpdate.row)
}

// .KWMsg.RecordInt record_int = 4;
inline bool SyncPlayerRecordsCacheUpdate::_internal_has_record_int() const {
  return this != internal_default_instance() && record_int_ != nullptr;
}
inline bool SyncPlayerRecordsCacheUpdate::has_record_int() const {
  return _internal_has_record_int();
}
inline const ::KWMsg::RecordInt& SyncPlayerRecordsCacheUpdate::_internal_record_int() const {
  const ::KWMsg::RecordInt* p = record_int_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::RecordInt&>(
      ::KWMsg::_RecordInt_default_instance_);
}
inline const ::KWMsg::RecordInt& SyncPlayerRecordsCacheUpdate::record_int() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheUpdate.record_int)
  return _internal_record_int();
}
inline void SyncPlayerRecordsCacheUpdate::unsafe_arena_set_allocated_record_int(
    ::KWMsg::RecordInt* record_int) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_int_);
  }
  record_int_ = record_int;
  if (record_int) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.record_int)
}
inline ::KWMsg::RecordInt* SyncPlayerRecordsCacheUpdate::release_record_int() {
  
  ::KWMsg::RecordInt* temp = record_int_;
  record_int_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::RecordInt* SyncPlayerRecordsCacheUpdate::unsafe_arena_release_record_int() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerRecordsCacheUpdate.record_int)
  
  ::KWMsg::RecordInt* temp = record_int_;
  record_int_ = nullptr;
  return temp;
}
inline ::KWMsg::RecordInt* SyncPlayerRecordsCacheUpdate::_internal_mutable_record_int() {
  
  if (record_int_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::RecordInt>(GetArenaForAllocation());
    record_int_ = p;
  }
  return record_int_;
}
inline ::KWMsg::RecordInt* SyncPlayerRecordsCacheUpdate::mutable_record_int() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheUpdate.record_int)
  return _internal_mutable_record_int();
}
inline void SyncPlayerRecordsCacheUpdate::set_allocated_record_int(::KWMsg::RecordInt* record_int) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_int_);
  }
  if (record_int) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_int));
    if (message_arena != submessage_arena) {
      record_int = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_int, submessage_arena);
    }
    
  } else {
    
  }
  record_int_ = record_int;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.record_int)
}

// .KWMsg.RecordFloat record_float = 5;
inline bool SyncPlayerRecordsCacheUpdate::_internal_has_record_float() const {
  return this != internal_default_instance() && record_float_ != nullptr;
}
inline bool SyncPlayerRecordsCacheUpdate::has_record_float() const {
  return _internal_has_record_float();
}
inline const ::KWMsg::RecordFloat& SyncPlayerRecordsCacheUpdate::_internal_record_float() const {
  const ::KWMsg::RecordFloat* p = record_float_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::RecordFloat&>(
      ::KWMsg::_RecordFloat_default_instance_);
}
inline const ::KWMsg::RecordFloat& SyncPlayerRecordsCacheUpdate::record_float() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheUpdate.record_float)
  return _internal_record_float();
}
inline void SyncPlayerRecordsCacheUpdate::unsafe_arena_set_allocated_record_float(
    ::KWMsg::RecordFloat* record_float) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_float_);
  }
  record_float_ = record_float;
  if (record_float) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.record_float)
}
inline ::KWMsg::RecordFloat* SyncPlayerRecordsCacheUpdate::release_record_float() {
  
  ::KWMsg::RecordFloat* temp = record_float_;
  record_float_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::RecordFloat* SyncPlayerRecordsCacheUpdate::unsafe_arena_release_record_float() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerRecordsCacheUpdate.record_float)
  
  ::KWMsg::RecordFloat* temp = record_float_;
  record_float_ = nullptr;
  return temp;
}
inline ::KWMsg::RecordFloat* SyncPlayerRecordsCacheUpdate::_internal_mutable_record_float() {
  
  if (record_float_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::RecordFloat>(GetArenaForAllocation());
    record_float_ = p;
  }
  return record_float_;
}
inline ::KWMsg::RecordFloat* SyncPlayerRecordsCacheUpdate::mutable_record_float() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheUpdate.record_float)
  return _internal_mutable_record_float();
}
inline void SyncPlayerRecordsCacheUpdate::set_allocated_record_float(::KWMsg::RecordFloat* record_float) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_float_);
  }
  if (record_float) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_float));
    if (message_arena != submessage_arena) {
      record_float = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_float, submessage_arena);
    }
    
  } else {
    
  }
  record_float_ = record_float;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.record_float)
}

// .KWMsg.RecordString record_string = 6;
inline bool SyncPlayerRecordsCacheUpdate::_internal_has_record_string() const {
  return this != internal_default_instance() && record_string_ != nullptr;
}
inline bool SyncPlayerRecordsCacheUpdate::has_record_string() const {
  return _internal_has_record_string();
}
inline const ::KWMsg::RecordString& SyncPlayerRecordsCacheUpdate::_internal_record_string() const {
  const ::KWMsg::RecordString* p = record_string_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::RecordString&>(
      ::KWMsg::_RecordString_default_instance_);
}
inline const ::KWMsg::RecordString& SyncPlayerRecordsCacheUpdate::record_string() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheUpdate.record_string)
  return _internal_record_string();
}
inline void SyncPlayerRecordsCacheUpdate::unsafe_arena_set_allocated_record_string(
    ::KWMsg::RecordString* record_string) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_string_);
  }
  record_string_ = record_string;
  if (record_string) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.record_string)
}
inline ::KWMsg::RecordString* SyncPlayerRecordsCacheUpdate::release_record_string() {
  
  ::KWMsg::RecordString* temp = record_string_;
  record_string_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::RecordString* SyncPlayerRecordsCacheUpdate::unsafe_arena_release_record_string() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerRecordsCacheUpdate.record_string)
  
  ::KWMsg::RecordString* temp = record_string_;
  record_string_ = nullptr;
  return temp;
}
inline ::KWMsg::RecordString* SyncPlayerRecordsCacheUpdate::_internal_mutable_record_string() {
  
  if (record_string_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::RecordString>(GetArenaForAllocation());
    record_string_ = p;
  }
  return record_string_;
}
inline ::KWMsg::RecordString* SyncPlayerRecordsCacheUpdate::mutable_record_string() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheUpdate.record_string)
  return _internal_mutable_record_string();
}
inline void SyncPlayerRecordsCacheUpdate::set_allocated_record_string(::KWMsg::RecordString* record_string) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_string_);
  }
  if (record_string) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_string));
    if (message_arena != submessage_arena) {
      record_string = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_string, submessage_arena);
    }
    
  } else {
    
  }
  record_string_ = record_string;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.record_string)
}

// .KWMsg.RecordObject record_object = 7;
inline bool SyncPlayerRecordsCacheUpdate::_internal_has_record_object() const {
  return this != internal_default_instance() && record_object_ != nullptr;
}
inline bool SyncPlayerRecordsCacheUpdate::has_record_object() const {
  return _internal_has_record_object();
}
inline const ::KWMsg::RecordObject& SyncPlayerRecordsCacheUpdate::_internal_record_object() const {
  const ::KWMsg::RecordObject* p = record_object_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::RecordObject&>(
      ::KWMsg::_RecordObject_default_instance_);
}
inline const ::KWMsg::RecordObject& SyncPlayerRecordsCacheUpdate::record_object() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheUpdate.record_object)
  return _internal_record_object();
}
inline void SyncPlayerRecordsCacheUpdate::unsafe_arena_set_allocated_record_object(
    ::KWMsg::RecordObject* record_object) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_object_);
  }
  record_object_ = record_object;
  if (record_object) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.record_object)
}
inline ::KWMsg::RecordObject* SyncPlayerRecordsCacheUpdate::release_record_object() {
  
  ::KWMsg::RecordObject* temp = record_object_;
  record_object_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::RecordObject* SyncPlayerRecordsCacheUpdate::unsafe_arena_release_record_object() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerRecordsCacheUpdate.record_object)
  
  ::KWMsg::RecordObject* temp = record_object_;
  record_object_ = nullptr;
  return temp;
}
inline ::KWMsg::RecordObject* SyncPlayerRecordsCacheUpdate::_internal_mutable_record_object() {
  
  if (record_object_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::RecordObject>(GetArenaForAllocation());
    record_object_ = p;
  }
  return record_object_;
}
inline ::KWMsg::RecordObject* SyncPlayerRecordsCacheUpdate::mutable_record_object() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheUpdate.record_object)
  return _internal_mutable_record_object();
}
inline void SyncPlayerRecordsCacheUpdate::set_allocated_record_object(::KWMsg::RecordObject* record_object) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_object_);
  }
  if (record_object) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_object));
    if (message_arena != submessage_arena) {
      record_object = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_object, submessage_arena);
    }
    
  } else {
    
  }
  record_object_ = record_object;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.record_object)
}

// .KWMsg.RecordVector2 record_vector2 = 8;
inline bool SyncPlayerRecordsCacheUpdate::_internal_has_record_vector2() const {
  return this != internal_default_instance() && record_vector2_ != nullptr;
}
inline bool SyncPlayerRecordsCacheUpdate::has_record_vector2() const {
  return _internal_has_record_vector2();
}
inline const ::KWMsg::RecordVector2& SyncPlayerRecordsCacheUpdate::_internal_record_vector2() const {
  const ::KWMsg::RecordVector2* p = record_vector2_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::RecordVector2&>(
      ::KWMsg::_RecordVector2_default_instance_);
}
inline const ::KWMsg::RecordVector2& SyncPlayerRecordsCacheUpdate::record_vector2() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheUpdate.record_vector2)
  return _internal_record_vector2();
}
inline void SyncPlayerRecordsCacheUpdate::unsafe_arena_set_allocated_record_vector2(
    ::KWMsg::RecordVector2* record_vector2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_vector2_);
  }
  record_vector2_ = record_vector2;
  if (record_vector2) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.record_vector2)
}
inline ::KWMsg::RecordVector2* SyncPlayerRecordsCacheUpdate::release_record_vector2() {
  
  ::KWMsg::RecordVector2* temp = record_vector2_;
  record_vector2_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::RecordVector2* SyncPlayerRecordsCacheUpdate::unsafe_arena_release_record_vector2() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerRecordsCacheUpdate.record_vector2)
  
  ::KWMsg::RecordVector2* temp = record_vector2_;
  record_vector2_ = nullptr;
  return temp;
}
inline ::KWMsg::RecordVector2* SyncPlayerRecordsCacheUpdate::_internal_mutable_record_vector2() {
  
  if (record_vector2_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::RecordVector2>(GetArenaForAllocation());
    record_vector2_ = p;
  }
  return record_vector2_;
}
inline ::KWMsg::RecordVector2* SyncPlayerRecordsCacheUpdate::mutable_record_vector2() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheUpdate.record_vector2)
  return _internal_mutable_record_vector2();
}
inline void SyncPlayerRecordsCacheUpdate::set_allocated_record_vector2(::KWMsg::RecordVector2* record_vector2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_vector2_);
  }
  if (record_vector2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_vector2));
    if (message_arena != submessage_arena) {
      record_vector2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_vector2, submessage_arena);
    }
    
  } else {
    
  }
  record_vector2_ = record_vector2;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.record_vector2)
}

// .KWMsg.RecordVector3 record_vector3 = 9;
inline bool SyncPlayerRecordsCacheUpdate::_internal_has_record_vector3() const {
  return this != internal_default_instance() && record_vector3_ != nullptr;
}
inline bool SyncPlayerRecordsCacheUpdate::has_record_vector3() const {
  return _internal_has_record_vector3();
}
inline const ::KWMsg::RecordVector3& SyncPlayerRecordsCacheUpdate::_internal_record_vector3() const {
  const ::KWMsg::RecordVector3* p = record_vector3_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::RecordVector3&>(
      ::KWMsg::_RecordVector3_default_instance_);
}
inline const ::KWMsg::RecordVector3& SyncPlayerRecordsCacheUpdate::record_vector3() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheUpdate.record_vector3)
  return _internal_record_vector3();
}
inline void SyncPlayerRecordsCacheUpdate::unsafe_arena_set_allocated_record_vector3(
    ::KWMsg::RecordVector3* record_vector3) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_vector3_);
  }
  record_vector3_ = record_vector3;
  if (record_vector3) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.record_vector3)
}
inline ::KWMsg::RecordVector3* SyncPlayerRecordsCacheUpdate::release_record_vector3() {
  
  ::KWMsg::RecordVector3* temp = record_vector3_;
  record_vector3_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::RecordVector3* SyncPlayerRecordsCacheUpdate::unsafe_arena_release_record_vector3() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerRecordsCacheUpdate.record_vector3)
  
  ::KWMsg::RecordVector3* temp = record_vector3_;
  record_vector3_ = nullptr;
  return temp;
}
inline ::KWMsg::RecordVector3* SyncPlayerRecordsCacheUpdate::_internal_mutable_record_vector3() {
  
  if (record_vector3_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::RecordVector3>(GetArenaForAllocation());
    record_vector3_ = p;
  }
  return record_vector3_;
}
inline ::KWMsg::RecordVector3* SyncPlayerRecordsCacheUpdate::mutable_record_vector3() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheUpdate.record_vector3)
  return _internal_mutable_record_vector3();
}
inline void SyncPlayerRecordsCacheUpdate::set_allocated_record_vector3(::KWMsg::RecordVector3* record_vector3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_vector3_);
  }
  if (record_vector3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(record_vector3));
    if (message_arena != submessage_arena) {
      record_vector3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, record_vector3, submessage_arena);
    }
    
  } else {
    
  }
  record_vector3_ = record_vector3;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerRecordsCacheUpdate.record_vector3)
}

// -------------------------------------------------------------------

// SyncPlayerRecordsCacheDel

// .KWMsg.Ident player_id = 1;
inline bool SyncPlayerRecordsCacheDel::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncPlayerRecordsCacheDel::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncPlayerRecordsCacheDel::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncPlayerRecordsCacheDel::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheDel.player_id)
  return _internal_player_id();
}
inline void SyncPlayerRecordsCacheDel::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerRecordsCacheDel.player_id)
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheDel::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheDel::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerRecordsCacheDel.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheDel::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheDel::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheDel.player_id)
  return _internal_mutable_player_id();
}
inline void SyncPlayerRecordsCacheDel::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerRecordsCacheDel.player_id)
}

// bytes record_name = 2;
inline void SyncPlayerRecordsCacheDel::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& SyncPlayerRecordsCacheDel::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheDel.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncPlayerRecordsCacheDel::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerRecordsCacheDel.record_name)
}
inline std::string* SyncPlayerRecordsCacheDel::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheDel.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& SyncPlayerRecordsCacheDel::_internal_record_name() const {
  return record_name_.Get();
}
inline void SyncPlayerRecordsCacheDel::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncPlayerRecordsCacheDel::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncPlayerRecordsCacheDel::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerRecordsCacheDel.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncPlayerRecordsCacheDel::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerRecordsCacheDel.record_name)
}

// int32 remove_row = 3;
inline void SyncPlayerRecordsCacheDel::clear_remove_row() {
  remove_row_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerRecordsCacheDel::_internal_remove_row() const {
  return remove_row_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerRecordsCacheDel::remove_row() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheDel.remove_row)
  return _internal_remove_row();
}
inline void SyncPlayerRecordsCacheDel::_internal_set_remove_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  remove_row_ = value;
}
inline void SyncPlayerRecordsCacheDel::set_remove_row(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_remove_row(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerRecordsCacheDel.remove_row)
}

// -------------------------------------------------------------------

// SyncPlayerRecordsCacheSwap

// .KWMsg.Ident player_id = 1;
inline bool SyncPlayerRecordsCacheSwap::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncPlayerRecordsCacheSwap::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncPlayerRecordsCacheSwap::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncPlayerRecordsCacheSwap::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheSwap.player_id)
  return _internal_player_id();
}
inline void SyncPlayerRecordsCacheSwap::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerRecordsCacheSwap.player_id)
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheSwap::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheSwap::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerRecordsCacheSwap.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheSwap::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncPlayerRecordsCacheSwap::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheSwap.player_id)
  return _internal_mutable_player_id();
}
inline void SyncPlayerRecordsCacheSwap::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerRecordsCacheSwap.player_id)
}

// bytes record_name = 2;
inline void SyncPlayerRecordsCacheSwap::clear_record_name() {
  record_name_.ClearToEmpty();
}
inline const std::string& SyncPlayerRecordsCacheSwap::record_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheSwap.record_name)
  return _internal_record_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncPlayerRecordsCacheSwap::set_record_name(ArgT0&& arg0, ArgT... args) {
 
 record_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerRecordsCacheSwap.record_name)
}
inline std::string* SyncPlayerRecordsCacheSwap::mutable_record_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerRecordsCacheSwap.record_name)
  return _internal_mutable_record_name();
}
inline const std::string& SyncPlayerRecordsCacheSwap::_internal_record_name() const {
  return record_name_.Get();
}
inline void SyncPlayerRecordsCacheSwap::_internal_set_record_name(const std::string& value) {
  
  record_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncPlayerRecordsCacheSwap::_internal_mutable_record_name() {
  
  return record_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncPlayerRecordsCacheSwap::release_record_name() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerRecordsCacheSwap.record_name)
  return record_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncPlayerRecordsCacheSwap::set_allocated_record_name(std::string* record_name) {
  if (record_name != nullptr) {
    
  } else {
    
  }
  record_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), record_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerRecordsCacheSwap.record_name)
}

// int32 row_origin = 3;
inline void SyncPlayerRecordsCacheSwap::clear_row_origin() {
  row_origin_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerRecordsCacheSwap::_internal_row_origin() const {
  return row_origin_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerRecordsCacheSwap::row_origin() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheSwap.row_origin)
  return _internal_row_origin();
}
inline void SyncPlayerRecordsCacheSwap::_internal_set_row_origin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_origin_ = value;
}
inline void SyncPlayerRecordsCacheSwap::set_row_origin(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row_origin(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerRecordsCacheSwap.row_origin)
}

// int32 row_target = 4;
inline void SyncPlayerRecordsCacheSwap::clear_row_target() {
  row_target_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerRecordsCacheSwap::_internal_row_target() const {
  return row_target_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerRecordsCacheSwap::row_target() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerRecordsCacheSwap.row_target)
  return _internal_row_target();
}
inline void SyncPlayerRecordsCacheSwap::_internal_set_row_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  row_target_ = value;
}
inline void SyncPlayerRecordsCacheSwap::set_row_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_row_target(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerRecordsCacheSwap.row_target)
}

// -------------------------------------------------------------------

// ReqTestBattle

// .KWMsg.Ident player_id = 1;
inline bool ReqTestBattle::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqTestBattle::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqTestBattle::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqTestBattle::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTestBattle.player_id)
  return _internal_player_id();
}
inline void ReqTestBattle::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqTestBattle.player_id)
}
inline ::KWMsg::Ident* ReqTestBattle::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqTestBattle::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTestBattle.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqTestBattle::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqTestBattle::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTestBattle.player_id)
  return _internal_mutable_player_id();
}
inline void ReqTestBattle::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTestBattle.player_id)
}

// bytes battle_list = 2;
inline void ReqTestBattle::clear_battle_list() {
  battle_list_.ClearToEmpty();
}
inline const std::string& ReqTestBattle::battle_list() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTestBattle.battle_list)
  return _internal_battle_list();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqTestBattle::set_battle_list(ArgT0&& arg0, ArgT... args) {
 
 battle_list_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqTestBattle.battle_list)
}
inline std::string* ReqTestBattle::mutable_battle_list() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTestBattle.battle_list)
  return _internal_mutable_battle_list();
}
inline const std::string& ReqTestBattle::_internal_battle_list() const {
  return battle_list_.Get();
}
inline void ReqTestBattle::_internal_set_battle_list(const std::string& value) {
  
  battle_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqTestBattle::_internal_mutable_battle_list() {
  
  return battle_list_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqTestBattle::release_battle_list() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTestBattle.battle_list)
  return battle_list_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqTestBattle::set_allocated_battle_list(std::string* battle_list) {
  if (battle_list != nullptr) {
    
  } else {
    
  }
  battle_list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_list,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTestBattle.battle_list)
}

// bytes team_id = 3;
inline void ReqTestBattle::clear_team_id() {
  team_id_.ClearToEmpty();
}
inline const std::string& ReqTestBattle::team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTestBattle.team_id)
  return _internal_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqTestBattle::set_team_id(ArgT0&& arg0, ArgT... args) {
 
 team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqTestBattle.team_id)
}
inline std::string* ReqTestBattle::mutable_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTestBattle.team_id)
  return _internal_mutable_team_id();
}
inline const std::string& ReqTestBattle::_internal_team_id() const {
  return team_id_.Get();
}
inline void ReqTestBattle::_internal_set_team_id(const std::string& value) {
  
  team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqTestBattle::_internal_mutable_team_id() {
  
  return team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqTestBattle::release_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTestBattle.team_id)
  return team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqTestBattle::set_allocated_team_id(std::string* team_id) {
  if (team_id != nullptr) {
    
  } else {
    
  }
  team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTestBattle.team_id)
}

// -------------------------------------------------------------------

// AckTestBattle

// .KWMsg.EGameEventCode event_code = 1;
inline void AckTestBattle::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckTestBattle::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckTestBattle::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTestBattle.event_code)
  return _internal_event_code();
}
inline void AckTestBattle::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckTestBattle::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckTestBattle.event_code)
}

// bytes battle_list = 2;
inline void AckTestBattle::clear_battle_list() {
  battle_list_.ClearToEmpty();
}
inline const std::string& AckTestBattle::battle_list() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTestBattle.battle_list)
  return _internal_battle_list();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckTestBattle::set_battle_list(ArgT0&& arg0, ArgT... args) {
 
 battle_list_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckTestBattle.battle_list)
}
inline std::string* AckTestBattle::mutable_battle_list() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckTestBattle.battle_list)
  return _internal_mutable_battle_list();
}
inline const std::string& AckTestBattle::_internal_battle_list() const {
  return battle_list_.Get();
}
inline void AckTestBattle::_internal_set_battle_list(const std::string& value) {
  
  battle_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckTestBattle::_internal_mutable_battle_list() {
  
  return battle_list_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckTestBattle::release_battle_list() {
  // @@protoc_insertion_point(field_release:KWMsg.AckTestBattle.battle_list)
  return battle_list_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckTestBattle::set_allocated_battle_list(std::string* battle_list) {
  if (battle_list != nullptr) {
    
  } else {
    
  }
  battle_list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_list,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckTestBattle.battle_list)
}

// bytes team_id = 3;
inline void AckTestBattle::clear_team_id() {
  team_id_.ClearToEmpty();
}
inline const std::string& AckTestBattle::team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTestBattle.team_id)
  return _internal_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckTestBattle::set_team_id(ArgT0&& arg0, ArgT... args) {
 
 team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckTestBattle.team_id)
}
inline std::string* AckTestBattle::mutable_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckTestBattle.team_id)
  return _internal_mutable_team_id();
}
inline const std::string& AckTestBattle::_internal_team_id() const {
  return team_id_.Get();
}
inline void AckTestBattle::_internal_set_team_id(const std::string& value) {
  
  team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckTestBattle::_internal_mutable_team_id() {
  
  return team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckTestBattle::release_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckTestBattle.team_id)
  return team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckTestBattle::set_allocated_team_id(std::string* team_id) {
  if (team_id != nullptr) {
    
  } else {
    
  }
  team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckTestBattle.team_id)
}

// int32 scene_id = 4;
inline void AckTestBattle::clear_scene_id() {
  scene_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckTestBattle::_internal_scene_id() const {
  return scene_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckTestBattle::scene_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTestBattle.scene_id)
  return _internal_scene_id();
}
inline void AckTestBattle::_internal_set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  scene_id_ = value;
}
inline void AckTestBattle::set_scene_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_scene_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckTestBattle.scene_id)
}

// -------------------------------------------------------------------

// ReqCollectWitch

// .KWMsg.Ident player_id = 1;
inline bool ReqCollectWitch::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCollectWitch::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCollectWitch::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCollectWitch::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollectWitch.player_id)
  return _internal_player_id();
}
inline void ReqCollectWitch::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCollectWitch.player_id)
}
inline ::KWMsg::Ident* ReqCollectWitch::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCollectWitch::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollectWitch.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCollectWitch::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCollectWitch::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollectWitch.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCollectWitch::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollectWitch.player_id)
}

// bytes witch_id = 2;
inline void ReqCollectWitch::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqCollectWitch::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollectWitch.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCollectWitch::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCollectWitch.witch_id)
}
inline std::string* ReqCollectWitch::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollectWitch.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqCollectWitch::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqCollectWitch::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCollectWitch::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCollectWitch::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollectWitch.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCollectWitch::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollectWitch.witch_id)
}

// -------------------------------------------------------------------

// AckCollectWitch

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCollectWitch::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCollectWitch::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCollectWitch::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollectWitch.event_code)
  return _internal_event_code();
}
inline void AckCollectWitch::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCollectWitch::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCollectWitch.event_code)
}

// bytes witch_id = 2;
inline void AckCollectWitch::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& AckCollectWitch::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollectWitch.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCollectWitch::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCollectWitch.witch_id)
}
inline std::string* AckCollectWitch::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCollectWitch.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& AckCollectWitch::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void AckCollectWitch::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCollectWitch::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCollectWitch::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCollectWitch.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCollectWitch::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCollectWitch.witch_id)
}

// int32 is_collect = 3;
inline void AckCollectWitch::clear_is_collect() {
  is_collect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCollectWitch::_internal_is_collect() const {
  return is_collect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCollectWitch::is_collect() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollectWitch.is_collect)
  return _internal_is_collect();
}
inline void AckCollectWitch::_internal_set_is_collect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_collect_ = value;
}
inline void AckCollectWitch::set_is_collect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_collect(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCollectWitch.is_collect)
}

// -------------------------------------------------------------------

// ReqInitPlayerName

// .KWMsg.Ident player_id = 1;
inline bool ReqInitPlayerName::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqInitPlayerName::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqInitPlayerName::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqInitPlayerName::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqInitPlayerName.player_id)
  return _internal_player_id();
}
inline void ReqInitPlayerName::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqInitPlayerName.player_id)
}
inline ::KWMsg::Ident* ReqInitPlayerName::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqInitPlayerName::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqInitPlayerName.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqInitPlayerName::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqInitPlayerName::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqInitPlayerName.player_id)
  return _internal_mutable_player_id();
}
inline void ReqInitPlayerName::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqInitPlayerName.player_id)
}

// bytes name = 2;
inline void ReqInitPlayerName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ReqInitPlayerName::name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqInitPlayerName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqInitPlayerName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqInitPlayerName.name)
}
inline std::string* ReqInitPlayerName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqInitPlayerName.name)
  return _internal_mutable_name();
}
inline const std::string& ReqInitPlayerName::_internal_name() const {
  return name_.Get();
}
inline void ReqInitPlayerName::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqInitPlayerName::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqInitPlayerName::release_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqInitPlayerName.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqInitPlayerName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqInitPlayerName.name)
}

// int32 is_random_name = 3;
inline void ReqInitPlayerName::clear_is_random_name() {
  is_random_name_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqInitPlayerName::_internal_is_random_name() const {
  return is_random_name_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqInitPlayerName::is_random_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqInitPlayerName.is_random_name)
  return _internal_is_random_name();
}
inline void ReqInitPlayerName::_internal_set_is_random_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_random_name_ = value;
}
inline void ReqInitPlayerName::set_is_random_name(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_random_name(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqInitPlayerName.is_random_name)
}

// -------------------------------------------------------------------

// AckInitPlayerName

// .KWMsg.EGameEventCode event_code = 1;
inline void AckInitPlayerName::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckInitPlayerName::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckInitPlayerName::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckInitPlayerName.event_code)
  return _internal_event_code();
}
inline void AckInitPlayerName::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckInitPlayerName::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckInitPlayerName.event_code)
}

// .KWMsg.Ident player_id = 2;
inline bool AckInitPlayerName::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckInitPlayerName::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckInitPlayerName::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckInitPlayerName::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckInitPlayerName.player_id)
  return _internal_player_id();
}
inline void AckInitPlayerName::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckInitPlayerName.player_id)
}
inline ::KWMsg::Ident* AckInitPlayerName::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckInitPlayerName::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckInitPlayerName.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckInitPlayerName::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckInitPlayerName::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckInitPlayerName.player_id)
  return _internal_mutable_player_id();
}
inline void AckInitPlayerName::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckInitPlayerName.player_id)
}

// bytes name = 3;
inline void AckInitPlayerName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& AckInitPlayerName::name() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckInitPlayerName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckInitPlayerName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckInitPlayerName.name)
}
inline std::string* AckInitPlayerName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckInitPlayerName.name)
  return _internal_mutable_name();
}
inline const std::string& AckInitPlayerName::_internal_name() const {
  return name_.Get();
}
inline void AckInitPlayerName::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckInitPlayerName::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckInitPlayerName::release_name() {
  // @@protoc_insertion_point(field_release:KWMsg.AckInitPlayerName.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckInitPlayerName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckInitPlayerName.name)
}

// -------------------------------------------------------------------

// ReqUpdateModule

// .KWMsg.Ident player_id = 1;
inline bool ReqUpdateModule::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqUpdateModule::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqUpdateModule::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqUpdateModule::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdateModule.player_id)
  return _internal_player_id();
}
inline void ReqUpdateModule::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqUpdateModule.player_id)
}
inline ::KWMsg::Ident* ReqUpdateModule::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqUpdateModule::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdateModule.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqUpdateModule::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqUpdateModule::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdateModule.player_id)
  return _internal_mutable_player_id();
}
inline void ReqUpdateModule::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdateModule.player_id)
}

// -------------------------------------------------------------------

// AckUpdateModule

// .KWMsg.EGameEventCode event_code = 1;
inline void AckUpdateModule::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckUpdateModule::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckUpdateModule::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUpdateModule.event_code)
  return _internal_event_code();
}
inline void AckUpdateModule::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckUpdateModule::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckUpdateModule.event_code)
}

// bytes module_id = 2;
inline void AckUpdateModule::clear_module_id() {
  module_id_.ClearToEmpty();
}
inline const std::string& AckUpdateModule::module_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUpdateModule.module_id)
  return _internal_module_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckUpdateModule::set_module_id(ArgT0&& arg0, ArgT... args) {
 
 module_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckUpdateModule.module_id)
}
inline std::string* AckUpdateModule::mutable_module_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckUpdateModule.module_id)
  return _internal_mutable_module_id();
}
inline const std::string& AckUpdateModule::_internal_module_id() const {
  return module_id_.Get();
}
inline void AckUpdateModule::_internal_set_module_id(const std::string& value) {
  
  module_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckUpdateModule::_internal_mutable_module_id() {
  
  return module_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckUpdateModule::release_module_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckUpdateModule.module_id)
  return module_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckUpdateModule::set_allocated_module_id(std::string* module_id) {
  if (module_id != nullptr) {
    
  } else {
    
  }
  module_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckUpdateModule.module_id)
}

// int32 chapter_status = 3;
inline void AckUpdateModule::clear_chapter_status() {
  chapter_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckUpdateModule::_internal_chapter_status() const {
  return chapter_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckUpdateModule::chapter_status() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUpdateModule.chapter_status)
  return _internal_chapter_status();
}
inline void AckUpdateModule::_internal_set_chapter_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chapter_status_ = value;
}
inline void AckUpdateModule::set_chapter_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chapter_status(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckUpdateModule.chapter_status)
}

// -------------------------------------------------------------------

// ReqChapterRewardTipOk

// .KWMsg.Ident player_id = 1;
inline bool ReqChapterRewardTipOk::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqChapterRewardTipOk::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqChapterRewardTipOk::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqChapterRewardTipOk::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqChapterRewardTipOk.player_id)
  return _internal_player_id();
}
inline void ReqChapterRewardTipOk::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqChapterRewardTipOk.player_id)
}
inline ::KWMsg::Ident* ReqChapterRewardTipOk::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqChapterRewardTipOk::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqChapterRewardTipOk.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqChapterRewardTipOk::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqChapterRewardTipOk::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqChapterRewardTipOk.player_id)
  return _internal_mutable_player_id();
}
inline void ReqChapterRewardTipOk::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqChapterRewardTipOk.player_id)
}

// -------------------------------------------------------------------

// AckChapterRewardTipOk

// .KWMsg.EGameEventCode event_code = 1;
inline void AckChapterRewardTipOk::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckChapterRewardTipOk::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckChapterRewardTipOk::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckChapterRewardTipOk.event_code)
  return _internal_event_code();
}
inline void AckChapterRewardTipOk::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckChapterRewardTipOk::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckChapterRewardTipOk.event_code)
}

// bytes module_id = 2;
inline void AckChapterRewardTipOk::clear_module_id() {
  module_id_.ClearToEmpty();
}
inline const std::string& AckChapterRewardTipOk::module_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckChapterRewardTipOk.module_id)
  return _internal_module_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckChapterRewardTipOk::set_module_id(ArgT0&& arg0, ArgT... args) {
 
 module_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckChapterRewardTipOk.module_id)
}
inline std::string* AckChapterRewardTipOk::mutable_module_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckChapterRewardTipOk.module_id)
  return _internal_mutable_module_id();
}
inline const std::string& AckChapterRewardTipOk::_internal_module_id() const {
  return module_id_.Get();
}
inline void AckChapterRewardTipOk::_internal_set_module_id(const std::string& value) {
  
  module_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckChapterRewardTipOk::_internal_mutable_module_id() {
  
  return module_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckChapterRewardTipOk::release_module_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckChapterRewardTipOk.module_id)
  return module_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckChapterRewardTipOk::set_allocated_module_id(std::string* module_id) {
  if (module_id != nullptr) {
    
  } else {
    
  }
  module_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckChapterRewardTipOk.module_id)
}

// int32 chapter_status = 3;
inline void AckChapterRewardTipOk::clear_chapter_status() {
  chapter_status_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckChapterRewardTipOk::_internal_chapter_status() const {
  return chapter_status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckChapterRewardTipOk::chapter_status() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckChapterRewardTipOk.chapter_status)
  return _internal_chapter_status();
}
inline void AckChapterRewardTipOk::_internal_set_chapter_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chapter_status_ = value;
}
inline void AckChapterRewardTipOk::set_chapter_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chapter_status(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckChapterRewardTipOk.chapter_status)
}

// -------------------------------------------------------------------

// ReqCollegeDrama

// .KWMsg.Ident player_id = 1;
inline bool ReqCollegeDrama::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCollegeDrama::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCollegeDrama::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCollegeDrama::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollegeDrama.player_id)
  return _internal_player_id();
}
inline void ReqCollegeDrama::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCollegeDrama.player_id)
}
inline ::KWMsg::Ident* ReqCollegeDrama::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCollegeDrama::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollegeDrama.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCollegeDrama::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCollegeDrama::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollegeDrama.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCollegeDrama::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollegeDrama.player_id)
}

// .KWMsg.ReqCollegeDrama.DramaType drama_type = 2;
inline void ReqCollegeDrama::clear_drama_type() {
  drama_type_ = 0;
}
inline ::KWMsg::ReqCollegeDrama_DramaType ReqCollegeDrama::_internal_drama_type() const {
  return static_cast< ::KWMsg::ReqCollegeDrama_DramaType >(drama_type_);
}
inline ::KWMsg::ReqCollegeDrama_DramaType ReqCollegeDrama::drama_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollegeDrama.drama_type)
  return _internal_drama_type();
}
inline void ReqCollegeDrama::_internal_set_drama_type(::KWMsg::ReqCollegeDrama_DramaType value) {
  
  drama_type_ = value;
}
inline void ReqCollegeDrama::set_drama_type(::KWMsg::ReqCollegeDrama_DramaType value) {
  _internal_set_drama_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCollegeDrama.drama_type)
}

// bytes module_id = 3;
inline void ReqCollegeDrama::clear_module_id() {
  module_id_.ClearToEmpty();
}
inline const std::string& ReqCollegeDrama::module_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollegeDrama.module_id)
  return _internal_module_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCollegeDrama::set_module_id(ArgT0&& arg0, ArgT... args) {
 
 module_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCollegeDrama.module_id)
}
inline std::string* ReqCollegeDrama::mutable_module_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollegeDrama.module_id)
  return _internal_mutable_module_id();
}
inline const std::string& ReqCollegeDrama::_internal_module_id() const {
  return module_id_.Get();
}
inline void ReqCollegeDrama::_internal_set_module_id(const std::string& value) {
  
  module_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCollegeDrama::_internal_mutable_module_id() {
  
  return module_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCollegeDrama::release_module_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollegeDrama.module_id)
  return module_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCollegeDrama::set_allocated_module_id(std::string* module_id) {
  if (module_id != nullptr) {
    
  } else {
    
  }
  module_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), module_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollegeDrama.module_id)
}

// -------------------------------------------------------------------

// AckCollegeDrama

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCollegeDrama::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCollegeDrama::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCollegeDrama::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollegeDrama.event_code)
  return _internal_event_code();
}
inline void AckCollegeDrama::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCollegeDrama::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCollegeDrama.event_code)
}

// -------------------------------------------------------------------

// ReqCollegeTaskAction

// .KWMsg.Ident player_id = 1;
inline bool ReqCollegeTaskAction::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCollegeTaskAction::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCollegeTaskAction::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCollegeTaskAction::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollegeTaskAction.player_id)
  return _internal_player_id();
}
inline void ReqCollegeTaskAction::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCollegeTaskAction.player_id)
}
inline ::KWMsg::Ident* ReqCollegeTaskAction::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCollegeTaskAction::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollegeTaskAction.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCollegeTaskAction::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCollegeTaskAction::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollegeTaskAction.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCollegeTaskAction::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollegeTaskAction.player_id)
}

// bytes task_id = 2;
inline void ReqCollegeTaskAction::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& ReqCollegeTaskAction::task_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollegeTaskAction.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCollegeTaskAction::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCollegeTaskAction.task_id)
}
inline std::string* ReqCollegeTaskAction::mutable_task_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollegeTaskAction.task_id)
  return _internal_mutable_task_id();
}
inline const std::string& ReqCollegeTaskAction::_internal_task_id() const {
  return task_id_.Get();
}
inline void ReqCollegeTaskAction::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCollegeTaskAction::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCollegeTaskAction::release_task_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollegeTaskAction.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCollegeTaskAction::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollegeTaskAction.task_id)
}

// -------------------------------------------------------------------

// AckCollegeTaskAction

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCollegeTaskAction::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCollegeTaskAction::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCollegeTaskAction::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollegeTaskAction.event_code)
  return _internal_event_code();
}
inline void AckCollegeTaskAction::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCollegeTaskAction::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCollegeTaskAction.event_code)
}

// -------------------------------------------------------------------

// ReqCollegeTaskCountdown

// .KWMsg.Ident player_id = 1;
inline bool ReqCollegeTaskCountdown::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCollegeTaskCountdown::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCollegeTaskCountdown::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCollegeTaskCountdown::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollegeTaskCountdown.player_id)
  return _internal_player_id();
}
inline void ReqCollegeTaskCountdown::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCollegeTaskCountdown.player_id)
}
inline ::KWMsg::Ident* ReqCollegeTaskCountdown::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCollegeTaskCountdown::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollegeTaskCountdown.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCollegeTaskCountdown::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCollegeTaskCountdown::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollegeTaskCountdown.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCollegeTaskCountdown::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollegeTaskCountdown.player_id)
}

// bytes task_id = 2;
inline void ReqCollegeTaskCountdown::clear_task_id() {
  task_id_.ClearToEmpty();
}
inline const std::string& ReqCollegeTaskCountdown::task_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollegeTaskCountdown.task_id)
  return _internal_task_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCollegeTaskCountdown::set_task_id(ArgT0&& arg0, ArgT... args) {
 
 task_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCollegeTaskCountdown.task_id)
}
inline std::string* ReqCollegeTaskCountdown::mutable_task_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollegeTaskCountdown.task_id)
  return _internal_mutable_task_id();
}
inline const std::string& ReqCollegeTaskCountdown::_internal_task_id() const {
  return task_id_.Get();
}
inline void ReqCollegeTaskCountdown::_internal_set_task_id(const std::string& value) {
  
  task_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCollegeTaskCountdown::_internal_mutable_task_id() {
  
  return task_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCollegeTaskCountdown::release_task_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollegeTaskCountdown.task_id)
  return task_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCollegeTaskCountdown::set_allocated_task_id(std::string* task_id) {
  if (task_id != nullptr) {
    
  } else {
    
  }
  task_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), task_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollegeTaskCountdown.task_id)
}

// -------------------------------------------------------------------

// AckCollegeTaskCountdown

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCollegeTaskCountdown::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCollegeTaskCountdown::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCollegeTaskCountdown::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollegeTaskCountdown.event_code)
  return _internal_event_code();
}
inline void AckCollegeTaskCountdown::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCollegeTaskCountdown::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCollegeTaskCountdown.event_code)
}

// -------------------------------------------------------------------

// ExamQuestion

// bytes question_id = 1;
inline void ExamQuestion::clear_question_id() {
  question_id_.ClearToEmpty();
}
inline const std::string& ExamQuestion::question_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ExamQuestion.question_id)
  return _internal_question_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ExamQuestion::set_question_id(ArgT0&& arg0, ArgT... args) {
 
 question_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ExamQuestion.question_id)
}
inline std::string* ExamQuestion::mutable_question_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ExamQuestion.question_id)
  return _internal_mutable_question_id();
}
inline const std::string& ExamQuestion::_internal_question_id() const {
  return question_id_.Get();
}
inline void ExamQuestion::_internal_set_question_id(const std::string& value) {
  
  question_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ExamQuestion::_internal_mutable_question_id() {
  
  return question_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ExamQuestion::release_question_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ExamQuestion.question_id)
  return question_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ExamQuestion::set_allocated_question_id(std::string* question_id) {
  if (question_id != nullptr) {
    
  } else {
    
  }
  question_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), question_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ExamQuestion.question_id)
}

// -------------------------------------------------------------------

// ReqCollegeStartExam

// .KWMsg.Ident player_id = 1;
inline bool ReqCollegeStartExam::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCollegeStartExam::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCollegeStartExam::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCollegeStartExam::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollegeStartExam.player_id)
  return _internal_player_id();
}
inline void ReqCollegeStartExam::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCollegeStartExam.player_id)
}
inline ::KWMsg::Ident* ReqCollegeStartExam::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCollegeStartExam::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollegeStartExam.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCollegeStartExam::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCollegeStartExam::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollegeStartExam.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCollegeStartExam::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollegeStartExam.player_id)
}

// -------------------------------------------------------------------

// AckCollegeStartExam

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCollegeStartExam::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCollegeStartExam::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCollegeStartExam::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollegeStartExam.event_code)
  return _internal_event_code();
}
inline void AckCollegeStartExam::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCollegeStartExam::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCollegeStartExam.event_code)
}

// int32 exam_type = 2;
inline void AckCollegeStartExam::clear_exam_type() {
  exam_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCollegeStartExam::_internal_exam_type() const {
  return exam_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCollegeStartExam::exam_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollegeStartExam.exam_type)
  return _internal_exam_type();
}
inline void AckCollegeStartExam::_internal_set_exam_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exam_type_ = value;
}
inline void AckCollegeStartExam::set_exam_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exam_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCollegeStartExam.exam_type)
}

// repeated .KWMsg.ExamQuestion question_id_list = 3;
inline int AckCollegeStartExam::_internal_question_id_list_size() const {
  return question_id_list_.size();
}
inline int AckCollegeStartExam::question_id_list_size() const {
  return _internal_question_id_list_size();
}
inline void AckCollegeStartExam::clear_question_id_list() {
  question_id_list_.Clear();
}
inline ::KWMsg::ExamQuestion* AckCollegeStartExam::mutable_question_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCollegeStartExam.question_id_list)
  return question_id_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ExamQuestion >*
AckCollegeStartExam::mutable_question_id_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckCollegeStartExam.question_id_list)
  return &question_id_list_;
}
inline const ::KWMsg::ExamQuestion& AckCollegeStartExam::_internal_question_id_list(int index) const {
  return question_id_list_.Get(index);
}
inline const ::KWMsg::ExamQuestion& AckCollegeStartExam::question_id_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollegeStartExam.question_id_list)
  return _internal_question_id_list(index);
}
inline ::KWMsg::ExamQuestion* AckCollegeStartExam::_internal_add_question_id_list() {
  return question_id_list_.Add();
}
inline ::KWMsg::ExamQuestion* AckCollegeStartExam::add_question_id_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckCollegeStartExam.question_id_list)
  return _internal_add_question_id_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ExamQuestion >&
AckCollegeStartExam::question_id_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckCollegeStartExam.question_id_list)
  return question_id_list_;
}

// -------------------------------------------------------------------

// ReqCollegeAnswer

// .KWMsg.Ident player_id = 1;
inline bool ReqCollegeAnswer::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCollegeAnswer::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCollegeAnswer::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCollegeAnswer::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollegeAnswer.player_id)
  return _internal_player_id();
}
inline void ReqCollegeAnswer::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCollegeAnswer.player_id)
}
inline ::KWMsg::Ident* ReqCollegeAnswer::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCollegeAnswer::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollegeAnswer.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCollegeAnswer::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCollegeAnswer::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollegeAnswer.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCollegeAnswer::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollegeAnswer.player_id)
}

// bytes question_id = 2;
inline void ReqCollegeAnswer::clear_question_id() {
  question_id_.ClearToEmpty();
}
inline const std::string& ReqCollegeAnswer::question_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollegeAnswer.question_id)
  return _internal_question_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCollegeAnswer::set_question_id(ArgT0&& arg0, ArgT... args) {
 
 question_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCollegeAnswer.question_id)
}
inline std::string* ReqCollegeAnswer::mutable_question_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollegeAnswer.question_id)
  return _internal_mutable_question_id();
}
inline const std::string& ReqCollegeAnswer::_internal_question_id() const {
  return question_id_.Get();
}
inline void ReqCollegeAnswer::_internal_set_question_id(const std::string& value) {
  
  question_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCollegeAnswer::_internal_mutable_question_id() {
  
  return question_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCollegeAnswer::release_question_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollegeAnswer.question_id)
  return question_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCollegeAnswer::set_allocated_question_id(std::string* question_id) {
  if (question_id != nullptr) {
    
  } else {
    
  }
  question_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), question_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollegeAnswer.question_id)
}

// int32 options = 3;
inline void ReqCollegeAnswer::clear_options() {
  options_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCollegeAnswer::_internal_options() const {
  return options_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCollegeAnswer::options() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollegeAnswer.options)
  return _internal_options();
}
inline void ReqCollegeAnswer::_internal_set_options(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  options_ = value;
}
inline void ReqCollegeAnswer::set_options(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_options(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCollegeAnswer.options)
}

// -------------------------------------------------------------------

// AckCollegeAnswer

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCollegeAnswer::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCollegeAnswer::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCollegeAnswer::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollegeAnswer.event_code)
  return _internal_event_code();
}
inline void AckCollegeAnswer::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCollegeAnswer::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCollegeAnswer.event_code)
}

// bytes question_id = 2;
inline void AckCollegeAnswer::clear_question_id() {
  question_id_.ClearToEmpty();
}
inline const std::string& AckCollegeAnswer::question_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollegeAnswer.question_id)
  return _internal_question_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCollegeAnswer::set_question_id(ArgT0&& arg0, ArgT... args) {
 
 question_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCollegeAnswer.question_id)
}
inline std::string* AckCollegeAnswer::mutable_question_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCollegeAnswer.question_id)
  return _internal_mutable_question_id();
}
inline const std::string& AckCollegeAnswer::_internal_question_id() const {
  return question_id_.Get();
}
inline void AckCollegeAnswer::_internal_set_question_id(const std::string& value) {
  
  question_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCollegeAnswer::_internal_mutable_question_id() {
  
  return question_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCollegeAnswer::release_question_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCollegeAnswer.question_id)
  return question_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCollegeAnswer::set_allocated_question_id(std::string* question_id) {
  if (question_id != nullptr) {
    
  } else {
    
  }
  question_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), question_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCollegeAnswer.question_id)
}

// int32 result = 3;
inline void AckCollegeAnswer::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCollegeAnswer::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCollegeAnswer::result() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollegeAnswer.result)
  return _internal_result();
}
inline void AckCollegeAnswer::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void AckCollegeAnswer::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCollegeAnswer.result)
}

// -------------------------------------------------------------------

// CommonReward

// bytes reward_id = 1;
inline void CommonReward::clear_reward_id() {
  reward_id_.ClearToEmpty();
}
inline const std::string& CommonReward::reward_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommonReward.reward_id)
  return _internal_reward_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonReward::set_reward_id(ArgT0&& arg0, ArgT... args) {
 
 reward_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.CommonReward.reward_id)
}
inline std::string* CommonReward::mutable_reward_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.CommonReward.reward_id)
  return _internal_mutable_reward_id();
}
inline const std::string& CommonReward::_internal_reward_id() const {
  return reward_id_.Get();
}
inline void CommonReward::_internal_set_reward_id(const std::string& value) {
  
  reward_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommonReward::_internal_mutable_reward_id() {
  
  return reward_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommonReward::release_reward_id() {
  // @@protoc_insertion_point(field_release:KWMsg.CommonReward.reward_id)
  return reward_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommonReward::set_allocated_reward_id(std::string* reward_id) {
  if (reward_id != nullptr) {
    
  } else {
    
  }
  reward_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), reward_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.CommonReward.reward_id)
}

// int32 reward_count = 2;
inline void CommonReward::clear_reward_count() {
  reward_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonReward::_internal_reward_count() const {
  return reward_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonReward::reward_count() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommonReward.reward_count)
  return _internal_reward_count();
}
inline void CommonReward::_internal_set_reward_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_count_ = value;
}
inline void CommonReward::set_reward_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommonReward.reward_count)
}

// int32 reward_type = 3;
inline void CommonReward::clear_reward_type() {
  reward_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonReward::_internal_reward_type() const {
  return reward_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommonReward::reward_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommonReward.reward_type)
  return _internal_reward_type();
}
inline void CommonReward::_internal_set_reward_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_type_ = value;
}
inline void CommonReward::set_reward_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommonReward.reward_type)
}

// -------------------------------------------------------------------

// ReqCollegeReward

// .KWMsg.Ident player_id = 1;
inline bool ReqCollegeReward::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCollegeReward::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCollegeReward::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCollegeReward::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollegeReward.player_id)
  return _internal_player_id();
}
inline void ReqCollegeReward::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCollegeReward.player_id)
}
inline ::KWMsg::Ident* ReqCollegeReward::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCollegeReward::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollegeReward.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCollegeReward::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCollegeReward::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollegeReward.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCollegeReward::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollegeReward.player_id)
}

// int32 reward_type = 2;
inline void ReqCollegeReward::clear_reward_type() {
  reward_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCollegeReward::_internal_reward_type() const {
  return reward_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCollegeReward::reward_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollegeReward.reward_type)
  return _internal_reward_type();
}
inline void ReqCollegeReward::_internal_set_reward_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_type_ = value;
}
inline void ReqCollegeReward::set_reward_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCollegeReward.reward_type)
}

// -------------------------------------------------------------------

// AckCollegeReward

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCollegeReward::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCollegeReward::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCollegeReward::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollegeReward.event_code)
  return _internal_event_code();
}
inline void AckCollegeReward::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCollegeReward::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCollegeReward.event_code)
}

// repeated .KWMsg.CommonReward reward_info = 2;
inline int AckCollegeReward::_internal_reward_info_size() const {
  return reward_info_.size();
}
inline int AckCollegeReward::reward_info_size() const {
  return _internal_reward_info_size();
}
inline void AckCollegeReward::clear_reward_info() {
  reward_info_.Clear();
}
inline ::KWMsg::CommonReward* AckCollegeReward::mutable_reward_info(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCollegeReward.reward_info)
  return reward_info_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommonReward >*
AckCollegeReward::mutable_reward_info() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckCollegeReward.reward_info)
  return &reward_info_;
}
inline const ::KWMsg::CommonReward& AckCollegeReward::_internal_reward_info(int index) const {
  return reward_info_.Get(index);
}
inline const ::KWMsg::CommonReward& AckCollegeReward::reward_info(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollegeReward.reward_info)
  return _internal_reward_info(index);
}
inline ::KWMsg::CommonReward* AckCollegeReward::_internal_add_reward_info() {
  return reward_info_.Add();
}
inline ::KWMsg::CommonReward* AckCollegeReward::add_reward_info() {
  // @@protoc_insertion_point(field_add:KWMsg.AckCollegeReward.reward_info)
  return _internal_add_reward_info();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommonReward >&
AckCollegeReward::reward_info() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckCollegeReward.reward_info)
  return reward_info_;
}

// -------------------------------------------------------------------

// ReqTestSetCollegeExamStatus

// .KWMsg.Ident player_id = 1;
inline bool ReqTestSetCollegeExamStatus::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqTestSetCollegeExamStatus::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqTestSetCollegeExamStatus::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqTestSetCollegeExamStatus::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTestSetCollegeExamStatus.player_id)
  return _internal_player_id();
}
inline void ReqTestSetCollegeExamStatus::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqTestSetCollegeExamStatus.player_id)
}
inline ::KWMsg::Ident* ReqTestSetCollegeExamStatus::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqTestSetCollegeExamStatus::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTestSetCollegeExamStatus.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqTestSetCollegeExamStatus::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqTestSetCollegeExamStatus::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTestSetCollegeExamStatus.player_id)
  return _internal_mutable_player_id();
}
inline void ReqTestSetCollegeExamStatus::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTestSetCollegeExamStatus.player_id)
}

// int32 exam_type = 2;
inline void ReqTestSetCollegeExamStatus::clear_exam_type() {
  exam_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTestSetCollegeExamStatus::_internal_exam_type() const {
  return exam_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTestSetCollegeExamStatus::exam_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTestSetCollegeExamStatus.exam_type)
  return _internal_exam_type();
}
inline void ReqTestSetCollegeExamStatus::_internal_set_exam_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  exam_type_ = value;
}
inline void ReqTestSetCollegeExamStatus::set_exam_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_exam_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqTestSetCollegeExamStatus.exam_type)
}

// -------------------------------------------------------------------

// ReqCollegeExamExit

// .KWMsg.Ident player_id = 1;
inline bool ReqCollegeExamExit::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCollegeExamExit::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCollegeExamExit::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCollegeExamExit::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCollegeExamExit.player_id)
  return _internal_player_id();
}
inline void ReqCollegeExamExit::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCollegeExamExit.player_id)
}
inline ::KWMsg::Ident* ReqCollegeExamExit::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCollegeExamExit::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCollegeExamExit.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCollegeExamExit::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCollegeExamExit::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCollegeExamExit.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCollegeExamExit::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCollegeExamExit.player_id)
}

// -------------------------------------------------------------------

// AckCollegeExamExit

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCollegeExamExit::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCollegeExamExit::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCollegeExamExit::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCollegeExamExit.event_code)
  return _internal_event_code();
}
inline void AckCollegeExamExit::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCollegeExamExit::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCollegeExamExit.event_code)
}

// -------------------------------------------------------------------

// ReqSetItem

// .KWMsg.Ident player_id = 1;
inline bool ReqSetItem::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqSetItem::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqSetItem::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqSetItem::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSetItem.player_id)
  return _internal_player_id();
}
inline void ReqSetItem::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqSetItem.player_id)
}
inline ::KWMsg::Ident* ReqSetItem::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqSetItem::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSetItem.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqSetItem::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqSetItem::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSetItem.player_id)
  return _internal_mutable_player_id();
}
inline void ReqSetItem::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSetItem.player_id)
}

// bytes item_id = 2;
inline void ReqSetItem::clear_item_id() {
  item_id_.ClearToEmpty();
}
inline const std::string& ReqSetItem::item_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSetItem.item_id)
  return _internal_item_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSetItem::set_item_id(ArgT0&& arg0, ArgT... args) {
 
 item_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSetItem.item_id)
}
inline std::string* ReqSetItem::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSetItem.item_id)
  return _internal_mutable_item_id();
}
inline const std::string& ReqSetItem::_internal_item_id() const {
  return item_id_.Get();
}
inline void ReqSetItem::_internal_set_item_id(const std::string& value) {
  
  item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSetItem::_internal_mutable_item_id() {
  
  return item_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSetItem::release_item_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSetItem.item_id)
  return item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSetItem::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSetItem.item_id)
}

// int32 count = 3;
inline void ReqSetItem::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSetItem::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSetItem::count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSetItem.count)
  return _internal_count();
}
inline void ReqSetItem::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ReqSetItem::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqSetItem.count)
}

// -------------------------------------------------------------------

// ReqBattlePreparedInfo

// .KWMsg.Ident player_id = 1;
inline bool ReqBattlePreparedInfo::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBattlePreparedInfo::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBattlePreparedInfo::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBattlePreparedInfo::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattlePreparedInfo.player_id)
  return _internal_player_id();
}
inline void ReqBattlePreparedInfo::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBattlePreparedInfo.player_id)
}
inline ::KWMsg::Ident* ReqBattlePreparedInfo::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBattlePreparedInfo::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattlePreparedInfo.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBattlePreparedInfo::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBattlePreparedInfo::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattlePreparedInfo.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBattlePreparedInfo::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattlePreparedInfo.player_id)
}

// bytes battle_id = 2;
inline void ReqBattlePreparedInfo::clear_battle_id() {
  battle_id_.ClearToEmpty();
}
inline const std::string& ReqBattlePreparedInfo::battle_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattlePreparedInfo.battle_id)
  return _internal_battle_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqBattlePreparedInfo::set_battle_id(ArgT0&& arg0, ArgT... args) {
 
 battle_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqBattlePreparedInfo.battle_id)
}
inline std::string* ReqBattlePreparedInfo::mutable_battle_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattlePreparedInfo.battle_id)
  return _internal_mutable_battle_id();
}
inline const std::string& ReqBattlePreparedInfo::_internal_battle_id() const {
  return battle_id_.Get();
}
inline void ReqBattlePreparedInfo::_internal_set_battle_id(const std::string& value) {
  
  battle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqBattlePreparedInfo::_internal_mutable_battle_id() {
  
  return battle_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqBattlePreparedInfo::release_battle_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattlePreparedInfo.battle_id)
  return battle_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqBattlePreparedInfo::set_allocated_battle_id(std::string* battle_id) {
  if (battle_id != nullptr) {
    
  } else {
    
  }
  battle_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattlePreparedInfo.battle_id)
}

// bytes game_play_id = 3;
inline void ReqBattlePreparedInfo::clear_game_play_id() {
  game_play_id_.ClearToEmpty();
}
inline const std::string& ReqBattlePreparedInfo::game_play_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattlePreparedInfo.game_play_id)
  return _internal_game_play_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqBattlePreparedInfo::set_game_play_id(ArgT0&& arg0, ArgT... args) {
 
 game_play_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqBattlePreparedInfo.game_play_id)
}
inline std::string* ReqBattlePreparedInfo::mutable_game_play_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattlePreparedInfo.game_play_id)
  return _internal_mutable_game_play_id();
}
inline const std::string& ReqBattlePreparedInfo::_internal_game_play_id() const {
  return game_play_id_.Get();
}
inline void ReqBattlePreparedInfo::_internal_set_game_play_id(const std::string& value) {
  
  game_play_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqBattlePreparedInfo::_internal_mutable_game_play_id() {
  
  return game_play_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqBattlePreparedInfo::release_game_play_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattlePreparedInfo.game_play_id)
  return game_play_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqBattlePreparedInfo::set_allocated_game_play_id(std::string* game_play_id) {
  if (game_play_id != nullptr) {
    
  } else {
    
  }
  game_play_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_play_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattlePreparedInfo.game_play_id)
}

// .KWMsg.Ident challenge_id = 4;
inline bool ReqBattlePreparedInfo::_internal_has_challenge_id() const {
  return this != internal_default_instance() && challenge_id_ != nullptr;
}
inline bool ReqBattlePreparedInfo::has_challenge_id() const {
  return _internal_has_challenge_id();
}
inline const ::KWMsg::Ident& ReqBattlePreparedInfo::_internal_challenge_id() const {
  const ::KWMsg::Ident* p = challenge_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBattlePreparedInfo::challenge_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattlePreparedInfo.challenge_id)
  return _internal_challenge_id();
}
inline void ReqBattlePreparedInfo::unsafe_arena_set_allocated_challenge_id(
    ::KWMsg::Ident* challenge_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(challenge_id_);
  }
  challenge_id_ = challenge_id;
  if (challenge_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBattlePreparedInfo.challenge_id)
}
inline ::KWMsg::Ident* ReqBattlePreparedInfo::release_challenge_id() {
  
  ::KWMsg::Ident* temp = challenge_id_;
  challenge_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBattlePreparedInfo::unsafe_arena_release_challenge_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattlePreparedInfo.challenge_id)
  
  ::KWMsg::Ident* temp = challenge_id_;
  challenge_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBattlePreparedInfo::_internal_mutable_challenge_id() {
  
  if (challenge_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    challenge_id_ = p;
  }
  return challenge_id_;
}
inline ::KWMsg::Ident* ReqBattlePreparedInfo::mutable_challenge_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattlePreparedInfo.challenge_id)
  return _internal_mutable_challenge_id();
}
inline void ReqBattlePreparedInfo::set_allocated_challenge_id(::KWMsg::Ident* challenge_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(challenge_id_);
  }
  if (challenge_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(challenge_id));
    if (message_arena != submessage_arena) {
      challenge_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challenge_id, submessage_arena);
    }
    
  } else {
    
  }
  challenge_id_ = challenge_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattlePreparedInfo.challenge_id)
}

// .KWMsg.Ident replay_id = 5;
inline bool ReqBattlePreparedInfo::_internal_has_replay_id() const {
  return this != internal_default_instance() && replay_id_ != nullptr;
}
inline bool ReqBattlePreparedInfo::has_replay_id() const {
  return _internal_has_replay_id();
}
inline const ::KWMsg::Ident& ReqBattlePreparedInfo::_internal_replay_id() const {
  const ::KWMsg::Ident* p = replay_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBattlePreparedInfo::replay_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattlePreparedInfo.replay_id)
  return _internal_replay_id();
}
inline void ReqBattlePreparedInfo::unsafe_arena_set_allocated_replay_id(
    ::KWMsg::Ident* replay_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  replay_id_ = replay_id;
  if (replay_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBattlePreparedInfo.replay_id)
}
inline ::KWMsg::Ident* ReqBattlePreparedInfo::release_replay_id() {
  
  ::KWMsg::Ident* temp = replay_id_;
  replay_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBattlePreparedInfo::unsafe_arena_release_replay_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattlePreparedInfo.replay_id)
  
  ::KWMsg::Ident* temp = replay_id_;
  replay_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBattlePreparedInfo::_internal_mutable_replay_id() {
  
  if (replay_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    replay_id_ = p;
  }
  return replay_id_;
}
inline ::KWMsg::Ident* ReqBattlePreparedInfo::mutable_replay_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattlePreparedInfo.replay_id)
  return _internal_mutable_replay_id();
}
inline void ReqBattlePreparedInfo::set_allocated_replay_id(::KWMsg::Ident* replay_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  if (replay_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id));
    if (message_arena != submessage_arena) {
      replay_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_id, submessage_arena);
    }
    
  } else {
    
  }
  replay_id_ = replay_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattlePreparedInfo.replay_id)
}

// -------------------------------------------------------------------

// BattleEntityInfo

// bytes config_id = 1;
inline void BattleEntityInfo::clear_config_id() {
  config_id_.ClearToEmpty();
}
inline const std::string& BattleEntityInfo::config_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BattleEntityInfo.config_id)
  return _internal_config_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BattleEntityInfo::set_config_id(ArgT0&& arg0, ArgT... args) {
 
 config_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BattleEntityInfo.config_id)
}
inline std::string* BattleEntityInfo::mutable_config_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BattleEntityInfo.config_id)
  return _internal_mutable_config_id();
}
inline const std::string& BattleEntityInfo::_internal_config_id() const {
  return config_id_.Get();
}
inline void BattleEntityInfo::_internal_set_config_id(const std::string& value) {
  
  config_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BattleEntityInfo::_internal_mutable_config_id() {
  
  return config_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BattleEntityInfo::release_config_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BattleEntityInfo.config_id)
  return config_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BattleEntityInfo::set_allocated_config_id(std::string* config_id) {
  if (config_id != nullptr) {
    
  } else {
    
  }
  config_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BattleEntityInfo.config_id)
}

// int32 level = 2;
inline void BattleEntityInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleEntityInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleEntityInfo::level() const {
  // @@protoc_insertion_point(field_get:KWMsg.BattleEntityInfo.level)
  return _internal_level();
}
inline void BattleEntityInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void BattleEntityInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:KWMsg.BattleEntityInfo.level)
}

// repeated int64 attrs = 3;
inline int BattleEntityInfo::_internal_attrs_size() const {
  return attrs_.size();
}
inline int BattleEntityInfo::attrs_size() const {
  return _internal_attrs_size();
}
inline void BattleEntityInfo::clear_attrs() {
  attrs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BattleEntityInfo::_internal_attrs(int index) const {
  return attrs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BattleEntityInfo::attrs(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BattleEntityInfo.attrs)
  return _internal_attrs(index);
}
inline void BattleEntityInfo::set_attrs(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  attrs_.Set(index, value);
  // @@protoc_insertion_point(field_set:KWMsg.BattleEntityInfo.attrs)
}
inline void BattleEntityInfo::_internal_add_attrs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  attrs_.Add(value);
}
inline void BattleEntityInfo::add_attrs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_attrs(value);
  // @@protoc_insertion_point(field_add:KWMsg.BattleEntityInfo.attrs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BattleEntityInfo::_internal_attrs() const {
  return attrs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BattleEntityInfo::attrs() const {
  // @@protoc_insertion_point(field_list:KWMsg.BattleEntityInfo.attrs)
  return _internal_attrs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BattleEntityInfo::_internal_mutable_attrs() {
  return &attrs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BattleEntityInfo::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BattleEntityInfo.attrs)
  return _internal_mutable_attrs();
}

// -------------------------------------------------------------------

// BattleWitchInfo

// bytes config_id = 1;
inline void BattleWitchInfo::clear_config_id() {
  config_id_.ClearToEmpty();
}
inline const std::string& BattleWitchInfo::config_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BattleWitchInfo.config_id)
  return _internal_config_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BattleWitchInfo::set_config_id(ArgT0&& arg0, ArgT... args) {
 
 config_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BattleWitchInfo.config_id)
}
inline std::string* BattleWitchInfo::mutable_config_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BattleWitchInfo.config_id)
  return _internal_mutable_config_id();
}
inline const std::string& BattleWitchInfo::_internal_config_id() const {
  return config_id_.Get();
}
inline void BattleWitchInfo::_internal_set_config_id(const std::string& value) {
  
  config_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BattleWitchInfo::_internal_mutable_config_id() {
  
  return config_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BattleWitchInfo::release_config_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BattleWitchInfo.config_id)
  return config_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BattleWitchInfo::set_allocated_config_id(std::string* config_id) {
  if (config_id != nullptr) {
    
  } else {
    
  }
  config_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), config_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BattleWitchInfo.config_id)
}

// int32 level = 2;
inline void BattleWitchInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleWitchInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleWitchInfo::level() const {
  // @@protoc_insertion_point(field_get:KWMsg.BattleWitchInfo.level)
  return _internal_level();
}
inline void BattleWitchInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void BattleWitchInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:KWMsg.BattleWitchInfo.level)
}

// repeated int64 attrs = 3;
inline int BattleWitchInfo::_internal_attrs_size() const {
  return attrs_.size();
}
inline int BattleWitchInfo::attrs_size() const {
  return _internal_attrs_size();
}
inline void BattleWitchInfo::clear_attrs() {
  attrs_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BattleWitchInfo::_internal_attrs(int index) const {
  return attrs_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 BattleWitchInfo::attrs(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BattleWitchInfo.attrs)
  return _internal_attrs(index);
}
inline void BattleWitchInfo::set_attrs(int index, ::PROTOBUF_NAMESPACE_ID::int64 value) {
  attrs_.Set(index, value);
  // @@protoc_insertion_point(field_set:KWMsg.BattleWitchInfo.attrs)
}
inline void BattleWitchInfo::_internal_add_attrs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  attrs_.Add(value);
}
inline void BattleWitchInfo::add_attrs(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_add_attrs(value);
  // @@protoc_insertion_point(field_add:KWMsg.BattleWitchInfo.attrs)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BattleWitchInfo::_internal_attrs() const {
  return attrs_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >&
BattleWitchInfo::attrs() const {
  // @@protoc_insertion_point(field_list:KWMsg.BattleWitchInfo.attrs)
  return _internal_attrs();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BattleWitchInfo::_internal_mutable_attrs() {
  return &attrs_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int64 >*
BattleWitchInfo::mutable_attrs() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BattleWitchInfo.attrs)
  return _internal_mutable_attrs();
}

// int32 star_level = 4;
inline void BattleWitchInfo::clear_star_level() {
  star_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleWitchInfo::_internal_star_level() const {
  return star_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BattleWitchInfo::star_level() const {
  // @@protoc_insertion_point(field_get:KWMsg.BattleWitchInfo.star_level)
  return _internal_star_level();
}
inline void BattleWitchInfo::_internal_set_star_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  star_level_ = value;
}
inline void BattleWitchInfo::set_star_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_star_level(value);
  // @@protoc_insertion_point(field_set:KWMsg.BattleWitchInfo.star_level)
}

// bytes role_res_id = 5;
inline void BattleWitchInfo::clear_role_res_id() {
  role_res_id_.ClearToEmpty();
}
inline const std::string& BattleWitchInfo::role_res_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BattleWitchInfo.role_res_id)
  return _internal_role_res_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void BattleWitchInfo::set_role_res_id(ArgT0&& arg0, ArgT... args) {
 
 role_res_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BattleWitchInfo.role_res_id)
}
inline std::string* BattleWitchInfo::mutable_role_res_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BattleWitchInfo.role_res_id)
  return _internal_mutable_role_res_id();
}
inline const std::string& BattleWitchInfo::_internal_role_res_id() const {
  return role_res_id_.Get();
}
inline void BattleWitchInfo::_internal_set_role_res_id(const std::string& value) {
  
  role_res_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BattleWitchInfo::_internal_mutable_role_res_id() {
  
  return role_res_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BattleWitchInfo::release_role_res_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BattleWitchInfo.role_res_id)
  return role_res_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void BattleWitchInfo::set_allocated_role_res_id(std::string* role_res_id) {
  if (role_res_id != nullptr) {
    
  } else {
    
  }
  role_res_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_res_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BattleWitchInfo.role_res_id)
}

// repeated bytes skills = 6;
inline int BattleWitchInfo::_internal_skills_size() const {
  return skills_.size();
}
inline int BattleWitchInfo::skills_size() const {
  return _internal_skills_size();
}
inline void BattleWitchInfo::clear_skills() {
  skills_.Clear();
}
inline std::string* BattleWitchInfo::add_skills() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.BattleWitchInfo.skills)
  return _internal_add_skills();
}
inline const std::string& BattleWitchInfo::_internal_skills(int index) const {
  return skills_.Get(index);
}
inline const std::string& BattleWitchInfo::skills(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BattleWitchInfo.skills)
  return _internal_skills(index);
}
inline std::string* BattleWitchInfo::mutable_skills(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BattleWitchInfo.skills)
  return skills_.Mutable(index);
}
inline void BattleWitchInfo::set_skills(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.BattleWitchInfo.skills)
  skills_.Mutable(index)->assign(value);
}
inline void BattleWitchInfo::set_skills(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.BattleWitchInfo.skills)
  skills_.Mutable(index)->assign(std::move(value));
}
inline void BattleWitchInfo::set_skills(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  skills_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.BattleWitchInfo.skills)
}
inline void BattleWitchInfo::set_skills(int index, const void* value, size_t size) {
  skills_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.BattleWitchInfo.skills)
}
inline std::string* BattleWitchInfo::_internal_add_skills() {
  return skills_.Add();
}
inline void BattleWitchInfo::add_skills(const std::string& value) {
  skills_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.BattleWitchInfo.skills)
}
inline void BattleWitchInfo::add_skills(std::string&& value) {
  skills_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.BattleWitchInfo.skills)
}
inline void BattleWitchInfo::add_skills(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  skills_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.BattleWitchInfo.skills)
}
inline void BattleWitchInfo::add_skills(const void* value, size_t size) {
  skills_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.BattleWitchInfo.skills)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
BattleWitchInfo::skills() const {
  // @@protoc_insertion_point(field_list:KWMsg.BattleWitchInfo.skills)
  return skills_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
BattleWitchInfo::mutable_skills() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BattleWitchInfo.skills)
  return &skills_;
}

// -------------------------------------------------------------------

// AckBattlePreparedInfo

// .KWMsg.EGameEventCode event_code = 1;
inline void AckBattlePreparedInfo::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBattlePreparedInfo::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckBattlePreparedInfo::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattlePreparedInfo.event_code)
  return _internal_event_code();
}
inline void AckBattlePreparedInfo::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckBattlePreparedInfo::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBattlePreparedInfo.event_code)
}

// bytes battle_id = 2;
inline void AckBattlePreparedInfo::clear_battle_id() {
  battle_id_.ClearToEmpty();
}
inline const std::string& AckBattlePreparedInfo::battle_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattlePreparedInfo.battle_id)
  return _internal_battle_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckBattlePreparedInfo::set_battle_id(ArgT0&& arg0, ArgT... args) {
 
 battle_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckBattlePreparedInfo.battle_id)
}
inline std::string* AckBattlePreparedInfo::mutable_battle_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBattlePreparedInfo.battle_id)
  return _internal_mutable_battle_id();
}
inline const std::string& AckBattlePreparedInfo::_internal_battle_id() const {
  return battle_id_.Get();
}
inline void AckBattlePreparedInfo::_internal_set_battle_id(const std::string& value) {
  
  battle_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckBattlePreparedInfo::_internal_mutable_battle_id() {
  
  return battle_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckBattlePreparedInfo::release_battle_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBattlePreparedInfo.battle_id)
  return battle_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckBattlePreparedInfo::set_allocated_battle_id(std::string* battle_id) {
  if (battle_id != nullptr) {
    
  } else {
    
  }
  battle_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), battle_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBattlePreparedInfo.battle_id)
}

// repeated .KWMsg.BattleEntityInfo monsters = 3;
inline int AckBattlePreparedInfo::_internal_monsters_size() const {
  return monsters_.size();
}
inline int AckBattlePreparedInfo::monsters_size() const {
  return _internal_monsters_size();
}
inline void AckBattlePreparedInfo::clear_monsters() {
  monsters_.Clear();
}
inline ::KWMsg::BattleEntityInfo* AckBattlePreparedInfo::mutable_monsters(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBattlePreparedInfo.monsters)
  return monsters_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleEntityInfo >*
AckBattlePreparedInfo::mutable_monsters() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckBattlePreparedInfo.monsters)
  return &monsters_;
}
inline const ::KWMsg::BattleEntityInfo& AckBattlePreparedInfo::_internal_monsters(int index) const {
  return monsters_.Get(index);
}
inline const ::KWMsg::BattleEntityInfo& AckBattlePreparedInfo::monsters(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattlePreparedInfo.monsters)
  return _internal_monsters(index);
}
inline ::KWMsg::BattleEntityInfo* AckBattlePreparedInfo::_internal_add_monsters() {
  return monsters_.Add();
}
inline ::KWMsg::BattleEntityInfo* AckBattlePreparedInfo::add_monsters() {
  // @@protoc_insertion_point(field_add:KWMsg.AckBattlePreparedInfo.monsters)
  return _internal_add_monsters();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleEntityInfo >&
AckBattlePreparedInfo::monsters() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckBattlePreparedInfo.monsters)
  return monsters_;
}

// repeated .KWMsg.BattleEntityInfo npcs = 4;
inline int AckBattlePreparedInfo::_internal_npcs_size() const {
  return npcs_.size();
}
inline int AckBattlePreparedInfo::npcs_size() const {
  return _internal_npcs_size();
}
inline void AckBattlePreparedInfo::clear_npcs() {
  npcs_.Clear();
}
inline ::KWMsg::BattleEntityInfo* AckBattlePreparedInfo::mutable_npcs(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBattlePreparedInfo.npcs)
  return npcs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleEntityInfo >*
AckBattlePreparedInfo::mutable_npcs() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckBattlePreparedInfo.npcs)
  return &npcs_;
}
inline const ::KWMsg::BattleEntityInfo& AckBattlePreparedInfo::_internal_npcs(int index) const {
  return npcs_.Get(index);
}
inline const ::KWMsg::BattleEntityInfo& AckBattlePreparedInfo::npcs(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattlePreparedInfo.npcs)
  return _internal_npcs(index);
}
inline ::KWMsg::BattleEntityInfo* AckBattlePreparedInfo::_internal_add_npcs() {
  return npcs_.Add();
}
inline ::KWMsg::BattleEntityInfo* AckBattlePreparedInfo::add_npcs() {
  // @@protoc_insertion_point(field_add:KWMsg.AckBattlePreparedInfo.npcs)
  return _internal_add_npcs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleEntityInfo >&
AckBattlePreparedInfo::npcs() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckBattlePreparedInfo.npcs)
  return npcs_;
}

// bytes game_play_id = 5;
inline void AckBattlePreparedInfo::clear_game_play_id() {
  game_play_id_.ClearToEmpty();
}
inline const std::string& AckBattlePreparedInfo::game_play_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattlePreparedInfo.game_play_id)
  return _internal_game_play_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckBattlePreparedInfo::set_game_play_id(ArgT0&& arg0, ArgT... args) {
 
 game_play_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckBattlePreparedInfo.game_play_id)
}
inline std::string* AckBattlePreparedInfo::mutable_game_play_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBattlePreparedInfo.game_play_id)
  return _internal_mutable_game_play_id();
}
inline const std::string& AckBattlePreparedInfo::_internal_game_play_id() const {
  return game_play_id_.Get();
}
inline void AckBattlePreparedInfo::_internal_set_game_play_id(const std::string& value) {
  
  game_play_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckBattlePreparedInfo::_internal_mutable_game_play_id() {
  
  return game_play_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckBattlePreparedInfo::release_game_play_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBattlePreparedInfo.game_play_id)
  return game_play_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckBattlePreparedInfo::set_allocated_game_play_id(std::string* game_play_id) {
  if (game_play_id != nullptr) {
    
  } else {
    
  }
  game_play_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_play_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBattlePreparedInfo.game_play_id)
}

// .KWMsg.EBattleType battle_type = 6;
inline void AckBattlePreparedInfo::clear_battle_type() {
  battle_type_ = 0;
}
inline ::KWMsg::EBattleType AckBattlePreparedInfo::_internal_battle_type() const {
  return static_cast< ::KWMsg::EBattleType >(battle_type_);
}
inline ::KWMsg::EBattleType AckBattlePreparedInfo::battle_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattlePreparedInfo.battle_type)
  return _internal_battle_type();
}
inline void AckBattlePreparedInfo::_internal_set_battle_type(::KWMsg::EBattleType value) {
  
  battle_type_ = value;
}
inline void AckBattlePreparedInfo::set_battle_type(::KWMsg::EBattleType value) {
  _internal_set_battle_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBattlePreparedInfo.battle_type)
}

// repeated .KWMsg.BattleWitchInfo witches = 7;
inline int AckBattlePreparedInfo::_internal_witches_size() const {
  return witches_.size();
}
inline int AckBattlePreparedInfo::witches_size() const {
  return _internal_witches_size();
}
inline void AckBattlePreparedInfo::clear_witches() {
  witches_.Clear();
}
inline ::KWMsg::BattleWitchInfo* AckBattlePreparedInfo::mutable_witches(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBattlePreparedInfo.witches)
  return witches_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleWitchInfo >*
AckBattlePreparedInfo::mutable_witches() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckBattlePreparedInfo.witches)
  return &witches_;
}
inline const ::KWMsg::BattleWitchInfo& AckBattlePreparedInfo::_internal_witches(int index) const {
  return witches_.Get(index);
}
inline const ::KWMsg::BattleWitchInfo& AckBattlePreparedInfo::witches(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattlePreparedInfo.witches)
  return _internal_witches(index);
}
inline ::KWMsg::BattleWitchInfo* AckBattlePreparedInfo::_internal_add_witches() {
  return witches_.Add();
}
inline ::KWMsg::BattleWitchInfo* AckBattlePreparedInfo::add_witches() {
  // @@protoc_insertion_point(field_add:KWMsg.AckBattlePreparedInfo.witches)
  return _internal_add_witches();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BattleWitchInfo >&
AckBattlePreparedInfo::witches() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckBattlePreparedInfo.witches)
  return witches_;
}

// -------------------------------------------------------------------

// ReqBuyPower

// .KWMsg.Ident player_id = 1;
inline bool ReqBuyPower::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBuyPower::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBuyPower::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBuyPower::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBuyPower.player_id)
  return _internal_player_id();
}
inline void ReqBuyPower::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBuyPower.player_id)
}
inline ::KWMsg::Ident* ReqBuyPower::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBuyPower::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBuyPower.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBuyPower::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBuyPower::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBuyPower.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBuyPower::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBuyPower.player_id)
}

// int32 count = 2;
inline void ReqBuyPower::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqBuyPower::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqBuyPower::count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBuyPower.count)
  return _internal_count();
}
inline void ReqBuyPower::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ReqBuyPower::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqBuyPower.count)
}

// -------------------------------------------------------------------

// AckBuyPower

// .KWMsg.EGameEventCode event_code = 1;
inline void AckBuyPower::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBuyPower::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckBuyPower::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBuyPower.event_code)
  return _internal_event_code();
}
inline void AckBuyPower::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckBuyPower::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBuyPower.event_code)
}

// int32 count = 2;
inline void AckBuyPower::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBuyPower::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckBuyPower::count() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBuyPower.count)
  return _internal_count();
}
inline void AckBuyPower::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void AckBuyPower::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBuyPower.count)
}

// -------------------------------------------------------------------

// ReqTestSetResource

// .KWMsg.Ident player_id = 1;
inline bool ReqTestSetResource::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqTestSetResource::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqTestSetResource::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqTestSetResource::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTestSetResource.player_id)
  return _internal_player_id();
}
inline void ReqTestSetResource::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqTestSetResource.player_id)
}
inline ::KWMsg::Ident* ReqTestSetResource::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqTestSetResource::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTestSetResource.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqTestSetResource::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqTestSetResource::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTestSetResource.player_id)
  return _internal_mutable_player_id();
}
inline void ReqTestSetResource::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTestSetResource.player_id)
}

// bytes res_type = 2;
inline void ReqTestSetResource::clear_res_type() {
  res_type_.ClearToEmpty();
}
inline const std::string& ReqTestSetResource::res_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTestSetResource.res_type)
  return _internal_res_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqTestSetResource::set_res_type(ArgT0&& arg0, ArgT... args) {
 
 res_type_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqTestSetResource.res_type)
}
inline std::string* ReqTestSetResource::mutable_res_type() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTestSetResource.res_type)
  return _internal_mutable_res_type();
}
inline const std::string& ReqTestSetResource::_internal_res_type() const {
  return res_type_.Get();
}
inline void ReqTestSetResource::_internal_set_res_type(const std::string& value) {
  
  res_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqTestSetResource::_internal_mutable_res_type() {
  
  return res_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqTestSetResource::release_res_type() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTestSetResource.res_type)
  return res_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqTestSetResource::set_allocated_res_type(std::string* res_type) {
  if (res_type != nullptr) {
    
  } else {
    
  }
  res_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), res_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTestSetResource.res_type)
}

// int64 res_value = 3;
inline void ReqTestSetResource::clear_res_value() {
  res_value_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqTestSetResource::_internal_res_value() const {
  return res_value_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqTestSetResource::res_value() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTestSetResource.res_value)
  return _internal_res_value();
}
inline void ReqTestSetResource::_internal_set_res_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  res_value_ = value;
}
inline void ReqTestSetResource::set_res_value(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_res_value(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqTestSetResource.res_value)
}

// -------------------------------------------------------------------

// ReqBattleAdjWitchTeam

// .KWMsg.Ident player_id = 1;
inline bool ReqBattleAdjWitchTeam::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBattleAdjWitchTeam::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBattleAdjWitchTeam::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBattleAdjWitchTeam::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattleAdjWitchTeam.player_id)
  return _internal_player_id();
}
inline void ReqBattleAdjWitchTeam::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBattleAdjWitchTeam.player_id)
}
inline ::KWMsg::Ident* ReqBattleAdjWitchTeam::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBattleAdjWitchTeam::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattleAdjWitchTeam.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBattleAdjWitchTeam::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBattleAdjWitchTeam::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattleAdjWitchTeam.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBattleAdjWitchTeam::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattleAdjWitchTeam.player_id)
}

// bytes witch_team_id = 2;
inline void ReqBattleAdjWitchTeam::clear_witch_team_id() {
  witch_team_id_.ClearToEmpty();
}
inline const std::string& ReqBattleAdjWitchTeam::witch_team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattleAdjWitchTeam.witch_team_id)
  return _internal_witch_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqBattleAdjWitchTeam::set_witch_team_id(ArgT0&& arg0, ArgT... args) {
 
 witch_team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqBattleAdjWitchTeam.witch_team_id)
}
inline std::string* ReqBattleAdjWitchTeam::mutable_witch_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattleAdjWitchTeam.witch_team_id)
  return _internal_mutable_witch_team_id();
}
inline const std::string& ReqBattleAdjWitchTeam::_internal_witch_team_id() const {
  return witch_team_id_.Get();
}
inline void ReqBattleAdjWitchTeam::_internal_set_witch_team_id(const std::string& value) {
  
  witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqBattleAdjWitchTeam::_internal_mutable_witch_team_id() {
  
  return witch_team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqBattleAdjWitchTeam::release_witch_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattleAdjWitchTeam.witch_team_id)
  return witch_team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqBattleAdjWitchTeam::set_allocated_witch_team_id(std::string* witch_team_id) {
  if (witch_team_id != nullptr) {
    
  } else {
    
  }
  witch_team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattleAdjWitchTeam.witch_team_id)
}

// int32 idx = 3;
inline void ReqBattleAdjWitchTeam::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqBattleAdjWitchTeam::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqBattleAdjWitchTeam::idx() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattleAdjWitchTeam.idx)
  return _internal_idx();
}
inline void ReqBattleAdjWitchTeam::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
}
inline void ReqBattleAdjWitchTeam::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqBattleAdjWitchTeam.idx)
}

// bytes witch_id = 4;
inline void ReqBattleAdjWitchTeam::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqBattleAdjWitchTeam::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattleAdjWitchTeam.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqBattleAdjWitchTeam::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqBattleAdjWitchTeam.witch_id)
}
inline std::string* ReqBattleAdjWitchTeam::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattleAdjWitchTeam.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqBattleAdjWitchTeam::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqBattleAdjWitchTeam::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqBattleAdjWitchTeam::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqBattleAdjWitchTeam::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattleAdjWitchTeam.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqBattleAdjWitchTeam::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattleAdjWitchTeam.witch_id)
}

// -------------------------------------------------------------------

// AckBattleAdjWitchTeam

// .KWMsg.EGameEventCode event_code = 1;
inline void AckBattleAdjWitchTeam::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBattleAdjWitchTeam::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckBattleAdjWitchTeam::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattleAdjWitchTeam.event_code)
  return _internal_event_code();
}
inline void AckBattleAdjWitchTeam::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckBattleAdjWitchTeam::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBattleAdjWitchTeam.event_code)
}

// bytes witch_team_id = 2;
inline void AckBattleAdjWitchTeam::clear_witch_team_id() {
  witch_team_id_.ClearToEmpty();
}
inline const std::string& AckBattleAdjWitchTeam::witch_team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattleAdjWitchTeam.witch_team_id)
  return _internal_witch_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckBattleAdjWitchTeam::set_witch_team_id(ArgT0&& arg0, ArgT... args) {
 
 witch_team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckBattleAdjWitchTeam.witch_team_id)
}
inline std::string* AckBattleAdjWitchTeam::mutable_witch_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBattleAdjWitchTeam.witch_team_id)
  return _internal_mutable_witch_team_id();
}
inline const std::string& AckBattleAdjWitchTeam::_internal_witch_team_id() const {
  return witch_team_id_.Get();
}
inline void AckBattleAdjWitchTeam::_internal_set_witch_team_id(const std::string& value) {
  
  witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckBattleAdjWitchTeam::_internal_mutable_witch_team_id() {
  
  return witch_team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckBattleAdjWitchTeam::release_witch_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBattleAdjWitchTeam.witch_team_id)
  return witch_team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckBattleAdjWitchTeam::set_allocated_witch_team_id(std::string* witch_team_id) {
  if (witch_team_id != nullptr) {
    
  } else {
    
  }
  witch_team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBattleAdjWitchTeam.witch_team_id)
}

// -------------------------------------------------------------------

// ReqBattleChangeWitchTeamName

// .KWMsg.Ident player_id = 1;
inline bool ReqBattleChangeWitchTeamName::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBattleChangeWitchTeamName::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBattleChangeWitchTeamName::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBattleChangeWitchTeamName::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattleChangeWitchTeamName.player_id)
  return _internal_player_id();
}
inline void ReqBattleChangeWitchTeamName::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBattleChangeWitchTeamName.player_id)
}
inline ::KWMsg::Ident* ReqBattleChangeWitchTeamName::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBattleChangeWitchTeamName::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattleChangeWitchTeamName.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBattleChangeWitchTeamName::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBattleChangeWitchTeamName::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattleChangeWitchTeamName.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBattleChangeWitchTeamName::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattleChangeWitchTeamName.player_id)
}

// bytes witch_team_id = 2;
inline void ReqBattleChangeWitchTeamName::clear_witch_team_id() {
  witch_team_id_.ClearToEmpty();
}
inline const std::string& ReqBattleChangeWitchTeamName::witch_team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattleChangeWitchTeamName.witch_team_id)
  return _internal_witch_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqBattleChangeWitchTeamName::set_witch_team_id(ArgT0&& arg0, ArgT... args) {
 
 witch_team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqBattleChangeWitchTeamName.witch_team_id)
}
inline std::string* ReqBattleChangeWitchTeamName::mutable_witch_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattleChangeWitchTeamName.witch_team_id)
  return _internal_mutable_witch_team_id();
}
inline const std::string& ReqBattleChangeWitchTeamName::_internal_witch_team_id() const {
  return witch_team_id_.Get();
}
inline void ReqBattleChangeWitchTeamName::_internal_set_witch_team_id(const std::string& value) {
  
  witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqBattleChangeWitchTeamName::_internal_mutable_witch_team_id() {
  
  return witch_team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqBattleChangeWitchTeamName::release_witch_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattleChangeWitchTeamName.witch_team_id)
  return witch_team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqBattleChangeWitchTeamName::set_allocated_witch_team_id(std::string* witch_team_id) {
  if (witch_team_id != nullptr) {
    
  } else {
    
  }
  witch_team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattleChangeWitchTeamName.witch_team_id)
}

// bytes name = 3;
inline void ReqBattleChangeWitchTeamName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ReqBattleChangeWitchTeamName::name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattleChangeWitchTeamName.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqBattleChangeWitchTeamName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqBattleChangeWitchTeamName.name)
}
inline std::string* ReqBattleChangeWitchTeamName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattleChangeWitchTeamName.name)
  return _internal_mutable_name();
}
inline const std::string& ReqBattleChangeWitchTeamName::_internal_name() const {
  return name_.Get();
}
inline void ReqBattleChangeWitchTeamName::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqBattleChangeWitchTeamName::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqBattleChangeWitchTeamName::release_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattleChangeWitchTeamName.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqBattleChangeWitchTeamName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattleChangeWitchTeamName.name)
}

// -------------------------------------------------------------------

// AckBattleChangeWitchTeamName

// .KWMsg.EGameEventCode event_code = 1;
inline void AckBattleChangeWitchTeamName::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBattleChangeWitchTeamName::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckBattleChangeWitchTeamName::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattleChangeWitchTeamName.event_code)
  return _internal_event_code();
}
inline void AckBattleChangeWitchTeamName::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckBattleChangeWitchTeamName::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBattleChangeWitchTeamName.event_code)
}

// bytes witch_team_id = 2;
inline void AckBattleChangeWitchTeamName::clear_witch_team_id() {
  witch_team_id_.ClearToEmpty();
}
inline const std::string& AckBattleChangeWitchTeamName::witch_team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattleChangeWitchTeamName.witch_team_id)
  return _internal_witch_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckBattleChangeWitchTeamName::set_witch_team_id(ArgT0&& arg0, ArgT... args) {
 
 witch_team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckBattleChangeWitchTeamName.witch_team_id)
}
inline std::string* AckBattleChangeWitchTeamName::mutable_witch_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBattleChangeWitchTeamName.witch_team_id)
  return _internal_mutable_witch_team_id();
}
inline const std::string& AckBattleChangeWitchTeamName::_internal_witch_team_id() const {
  return witch_team_id_.Get();
}
inline void AckBattleChangeWitchTeamName::_internal_set_witch_team_id(const std::string& value) {
  
  witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckBattleChangeWitchTeamName::_internal_mutable_witch_team_id() {
  
  return witch_team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckBattleChangeWitchTeamName::release_witch_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBattleChangeWitchTeamName.witch_team_id)
  return witch_team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckBattleChangeWitchTeamName::set_allocated_witch_team_id(std::string* witch_team_id) {
  if (witch_team_id != nullptr) {
    
  } else {
    
  }
  witch_team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBattleChangeWitchTeamName.witch_team_id)
}

// -------------------------------------------------------------------

// ReqBattleResetWitchTeam

// .KWMsg.Ident player_id = 1;
inline bool ReqBattleResetWitchTeam::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBattleResetWitchTeam::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBattleResetWitchTeam::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBattleResetWitchTeam::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattleResetWitchTeam.player_id)
  return _internal_player_id();
}
inline void ReqBattleResetWitchTeam::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBattleResetWitchTeam.player_id)
}
inline ::KWMsg::Ident* ReqBattleResetWitchTeam::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBattleResetWitchTeam::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattleResetWitchTeam.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBattleResetWitchTeam::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBattleResetWitchTeam::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattleResetWitchTeam.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBattleResetWitchTeam::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattleResetWitchTeam.player_id)
}

// bytes witch_team_id = 2;
inline void ReqBattleResetWitchTeam::clear_witch_team_id() {
  witch_team_id_.ClearToEmpty();
}
inline const std::string& ReqBattleResetWitchTeam::witch_team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattleResetWitchTeam.witch_team_id)
  return _internal_witch_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqBattleResetWitchTeam::set_witch_team_id(ArgT0&& arg0, ArgT... args) {
 
 witch_team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqBattleResetWitchTeam.witch_team_id)
}
inline std::string* ReqBattleResetWitchTeam::mutable_witch_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattleResetWitchTeam.witch_team_id)
  return _internal_mutable_witch_team_id();
}
inline const std::string& ReqBattleResetWitchTeam::_internal_witch_team_id() const {
  return witch_team_id_.Get();
}
inline void ReqBattleResetWitchTeam::_internal_set_witch_team_id(const std::string& value) {
  
  witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqBattleResetWitchTeam::_internal_mutable_witch_team_id() {
  
  return witch_team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqBattleResetWitchTeam::release_witch_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattleResetWitchTeam.witch_team_id)
  return witch_team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqBattleResetWitchTeam::set_allocated_witch_team_id(std::string* witch_team_id) {
  if (witch_team_id != nullptr) {
    
  } else {
    
  }
  witch_team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattleResetWitchTeam.witch_team_id)
}

// -------------------------------------------------------------------

// AckBattleResetWitchTeam

// .KWMsg.EGameEventCode event_code = 1;
inline void AckBattleResetWitchTeam::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBattleResetWitchTeam::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckBattleResetWitchTeam::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattleResetWitchTeam.event_code)
  return _internal_event_code();
}
inline void AckBattleResetWitchTeam::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckBattleResetWitchTeam::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBattleResetWitchTeam.event_code)
}

// bytes witch_team_id = 2;
inline void AckBattleResetWitchTeam::clear_witch_team_id() {
  witch_team_id_.ClearToEmpty();
}
inline const std::string& AckBattleResetWitchTeam::witch_team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattleResetWitchTeam.witch_team_id)
  return _internal_witch_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckBattleResetWitchTeam::set_witch_team_id(ArgT0&& arg0, ArgT... args) {
 
 witch_team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckBattleResetWitchTeam.witch_team_id)
}
inline std::string* AckBattleResetWitchTeam::mutable_witch_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBattleResetWitchTeam.witch_team_id)
  return _internal_mutable_witch_team_id();
}
inline const std::string& AckBattleResetWitchTeam::_internal_witch_team_id() const {
  return witch_team_id_.Get();
}
inline void AckBattleResetWitchTeam::_internal_set_witch_team_id(const std::string& value) {
  
  witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckBattleResetWitchTeam::_internal_mutable_witch_team_id() {
  
  return witch_team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckBattleResetWitchTeam::release_witch_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBattleResetWitchTeam.witch_team_id)
  return witch_team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckBattleResetWitchTeam::set_allocated_witch_team_id(std::string* witch_team_id) {
  if (witch_team_id != nullptr) {
    
  } else {
    
  }
  witch_team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBattleResetWitchTeam.witch_team_id)
}

// -------------------------------------------------------------------

// ReqBattleQuickConfigWitchTeam

// .KWMsg.Ident player_id = 1;
inline bool ReqBattleQuickConfigWitchTeam::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBattleQuickConfigWitchTeam::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBattleQuickConfigWitchTeam::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBattleQuickConfigWitchTeam::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattleQuickConfigWitchTeam.player_id)
  return _internal_player_id();
}
inline void ReqBattleQuickConfigWitchTeam::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBattleQuickConfigWitchTeam.player_id)
}
inline ::KWMsg::Ident* ReqBattleQuickConfigWitchTeam::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBattleQuickConfigWitchTeam::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattleQuickConfigWitchTeam.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBattleQuickConfigWitchTeam::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBattleQuickConfigWitchTeam::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattleQuickConfigWitchTeam.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBattleQuickConfigWitchTeam::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattleQuickConfigWitchTeam.player_id)
}

// bytes witch_team_id = 2;
inline void ReqBattleQuickConfigWitchTeam::clear_witch_team_id() {
  witch_team_id_.ClearToEmpty();
}
inline const std::string& ReqBattleQuickConfigWitchTeam::witch_team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattleQuickConfigWitchTeam.witch_team_id)
  return _internal_witch_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqBattleQuickConfigWitchTeam::set_witch_team_id(ArgT0&& arg0, ArgT... args) {
 
 witch_team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqBattleQuickConfigWitchTeam.witch_team_id)
}
inline std::string* ReqBattleQuickConfigWitchTeam::mutable_witch_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattleQuickConfigWitchTeam.witch_team_id)
  return _internal_mutable_witch_team_id();
}
inline const std::string& ReqBattleQuickConfigWitchTeam::_internal_witch_team_id() const {
  return witch_team_id_.Get();
}
inline void ReqBattleQuickConfigWitchTeam::_internal_set_witch_team_id(const std::string& value) {
  
  witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqBattleQuickConfigWitchTeam::_internal_mutable_witch_team_id() {
  
  return witch_team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqBattleQuickConfigWitchTeam::release_witch_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattleQuickConfigWitchTeam.witch_team_id)
  return witch_team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqBattleQuickConfigWitchTeam::set_allocated_witch_team_id(std::string* witch_team_id) {
  if (witch_team_id != nullptr) {
    
  } else {
    
  }
  witch_team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattleQuickConfigWitchTeam.witch_team_id)
}

// repeated bytes witch_id_list = 3;
inline int ReqBattleQuickConfigWitchTeam::_internal_witch_id_list_size() const {
  return witch_id_list_.size();
}
inline int ReqBattleQuickConfigWitchTeam::witch_id_list_size() const {
  return _internal_witch_id_list_size();
}
inline void ReqBattleQuickConfigWitchTeam::clear_witch_id_list() {
  witch_id_list_.Clear();
}
inline std::string* ReqBattleQuickConfigWitchTeam::add_witch_id_list() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.ReqBattleQuickConfigWitchTeam.witch_id_list)
  return _internal_add_witch_id_list();
}
inline const std::string& ReqBattleQuickConfigWitchTeam::_internal_witch_id_list(int index) const {
  return witch_id_list_.Get(index);
}
inline const std::string& ReqBattleQuickConfigWitchTeam::witch_id_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattleQuickConfigWitchTeam.witch_id_list)
  return _internal_witch_id_list(index);
}
inline std::string* ReqBattleQuickConfigWitchTeam::mutable_witch_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattleQuickConfigWitchTeam.witch_id_list)
  return witch_id_list_.Mutable(index);
}
inline void ReqBattleQuickConfigWitchTeam::set_witch_id_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.ReqBattleQuickConfigWitchTeam.witch_id_list)
  witch_id_list_.Mutable(index)->assign(value);
}
inline void ReqBattleQuickConfigWitchTeam::set_witch_id_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.ReqBattleQuickConfigWitchTeam.witch_id_list)
  witch_id_list_.Mutable(index)->assign(std::move(value));
}
inline void ReqBattleQuickConfigWitchTeam::set_witch_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  witch_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.ReqBattleQuickConfigWitchTeam.witch_id_list)
}
inline void ReqBattleQuickConfigWitchTeam::set_witch_id_list(int index, const void* value, size_t size) {
  witch_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.ReqBattleQuickConfigWitchTeam.witch_id_list)
}
inline std::string* ReqBattleQuickConfigWitchTeam::_internal_add_witch_id_list() {
  return witch_id_list_.Add();
}
inline void ReqBattleQuickConfigWitchTeam::add_witch_id_list(const std::string& value) {
  witch_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.ReqBattleQuickConfigWitchTeam.witch_id_list)
}
inline void ReqBattleQuickConfigWitchTeam::add_witch_id_list(std::string&& value) {
  witch_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.ReqBattleQuickConfigWitchTeam.witch_id_list)
}
inline void ReqBattleQuickConfigWitchTeam::add_witch_id_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  witch_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.ReqBattleQuickConfigWitchTeam.witch_id_list)
}
inline void ReqBattleQuickConfigWitchTeam::add_witch_id_list(const void* value, size_t size) {
  witch_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.ReqBattleQuickConfigWitchTeam.witch_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReqBattleQuickConfigWitchTeam::witch_id_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ReqBattleQuickConfigWitchTeam.witch_id_list)
  return witch_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReqBattleQuickConfigWitchTeam::mutable_witch_id_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ReqBattleQuickConfigWitchTeam.witch_id_list)
  return &witch_id_list_;
}

// -------------------------------------------------------------------

// AckBattleQuickConfigWitchTeam

// .KWMsg.EGameEventCode event_code = 1;
inline void AckBattleQuickConfigWitchTeam::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBattleQuickConfigWitchTeam::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckBattleQuickConfigWitchTeam::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattleQuickConfigWitchTeam.event_code)
  return _internal_event_code();
}
inline void AckBattleQuickConfigWitchTeam::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckBattleQuickConfigWitchTeam::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBattleQuickConfigWitchTeam.event_code)
}

// bytes witch_team_id = 2;
inline void AckBattleQuickConfigWitchTeam::clear_witch_team_id() {
  witch_team_id_.ClearToEmpty();
}
inline const std::string& AckBattleQuickConfigWitchTeam::witch_team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattleQuickConfigWitchTeam.witch_team_id)
  return _internal_witch_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckBattleQuickConfigWitchTeam::set_witch_team_id(ArgT0&& arg0, ArgT... args) {
 
 witch_team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckBattleQuickConfigWitchTeam.witch_team_id)
}
inline std::string* AckBattleQuickConfigWitchTeam::mutable_witch_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBattleQuickConfigWitchTeam.witch_team_id)
  return _internal_mutable_witch_team_id();
}
inline const std::string& AckBattleQuickConfigWitchTeam::_internal_witch_team_id() const {
  return witch_team_id_.Get();
}
inline void AckBattleQuickConfigWitchTeam::_internal_set_witch_team_id(const std::string& value) {
  
  witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckBattleQuickConfigWitchTeam::_internal_mutable_witch_team_id() {
  
  return witch_team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckBattleQuickConfigWitchTeam::release_witch_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBattleQuickConfigWitchTeam.witch_team_id)
  return witch_team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckBattleQuickConfigWitchTeam::set_allocated_witch_team_id(std::string* witch_team_id) {
  if (witch_team_id != nullptr) {
    
  } else {
    
  }
  witch_team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBattleQuickConfigWitchTeam.witch_team_id)
}

// repeated bytes witch_id_list = 3;
inline int AckBattleQuickConfigWitchTeam::_internal_witch_id_list_size() const {
  return witch_id_list_.size();
}
inline int AckBattleQuickConfigWitchTeam::witch_id_list_size() const {
  return _internal_witch_id_list_size();
}
inline void AckBattleQuickConfigWitchTeam::clear_witch_id_list() {
  witch_id_list_.Clear();
}
inline std::string* AckBattleQuickConfigWitchTeam::add_witch_id_list() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.AckBattleQuickConfigWitchTeam.witch_id_list)
  return _internal_add_witch_id_list();
}
inline const std::string& AckBattleQuickConfigWitchTeam::_internal_witch_id_list(int index) const {
  return witch_id_list_.Get(index);
}
inline const std::string& AckBattleQuickConfigWitchTeam::witch_id_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattleQuickConfigWitchTeam.witch_id_list)
  return _internal_witch_id_list(index);
}
inline std::string* AckBattleQuickConfigWitchTeam::mutable_witch_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBattleQuickConfigWitchTeam.witch_id_list)
  return witch_id_list_.Mutable(index);
}
inline void AckBattleQuickConfigWitchTeam::set_witch_id_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.AckBattleQuickConfigWitchTeam.witch_id_list)
  witch_id_list_.Mutable(index)->assign(value);
}
inline void AckBattleQuickConfigWitchTeam::set_witch_id_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.AckBattleQuickConfigWitchTeam.witch_id_list)
  witch_id_list_.Mutable(index)->assign(std::move(value));
}
inline void AckBattleQuickConfigWitchTeam::set_witch_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  witch_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.AckBattleQuickConfigWitchTeam.witch_id_list)
}
inline void AckBattleQuickConfigWitchTeam::set_witch_id_list(int index, const void* value, size_t size) {
  witch_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.AckBattleQuickConfigWitchTeam.witch_id_list)
}
inline std::string* AckBattleQuickConfigWitchTeam::_internal_add_witch_id_list() {
  return witch_id_list_.Add();
}
inline void AckBattleQuickConfigWitchTeam::add_witch_id_list(const std::string& value) {
  witch_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.AckBattleQuickConfigWitchTeam.witch_id_list)
}
inline void AckBattleQuickConfigWitchTeam::add_witch_id_list(std::string&& value) {
  witch_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.AckBattleQuickConfigWitchTeam.witch_id_list)
}
inline void AckBattleQuickConfigWitchTeam::add_witch_id_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  witch_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.AckBattleQuickConfigWitchTeam.witch_id_list)
}
inline void AckBattleQuickConfigWitchTeam::add_witch_id_list(const void* value, size_t size) {
  witch_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.AckBattleQuickConfigWitchTeam.witch_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AckBattleQuickConfigWitchTeam::witch_id_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckBattleQuickConfigWitchTeam.witch_id_list)
  return witch_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AckBattleQuickConfigWitchTeam::mutable_witch_id_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckBattleQuickConfigWitchTeam.witch_id_list)
  return &witch_id_list_;
}

// -------------------------------------------------------------------

// ReqBattleBuyWitchTeam

// .KWMsg.Ident player_id = 1;
inline bool ReqBattleBuyWitchTeam::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBattleBuyWitchTeam::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBattleBuyWitchTeam::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBattleBuyWitchTeam::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattleBuyWitchTeam.player_id)
  return _internal_player_id();
}
inline void ReqBattleBuyWitchTeam::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBattleBuyWitchTeam.player_id)
}
inline ::KWMsg::Ident* ReqBattleBuyWitchTeam::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBattleBuyWitchTeam::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattleBuyWitchTeam.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBattleBuyWitchTeam::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBattleBuyWitchTeam::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattleBuyWitchTeam.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBattleBuyWitchTeam::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattleBuyWitchTeam.player_id)
}

// bytes witch_team_id = 2;
inline void ReqBattleBuyWitchTeam::clear_witch_team_id() {
  witch_team_id_.ClearToEmpty();
}
inline const std::string& ReqBattleBuyWitchTeam::witch_team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBattleBuyWitchTeam.witch_team_id)
  return _internal_witch_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqBattleBuyWitchTeam::set_witch_team_id(ArgT0&& arg0, ArgT... args) {
 
 witch_team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqBattleBuyWitchTeam.witch_team_id)
}
inline std::string* ReqBattleBuyWitchTeam::mutable_witch_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBattleBuyWitchTeam.witch_team_id)
  return _internal_mutable_witch_team_id();
}
inline const std::string& ReqBattleBuyWitchTeam::_internal_witch_team_id() const {
  return witch_team_id_.Get();
}
inline void ReqBattleBuyWitchTeam::_internal_set_witch_team_id(const std::string& value) {
  
  witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqBattleBuyWitchTeam::_internal_mutable_witch_team_id() {
  
  return witch_team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqBattleBuyWitchTeam::release_witch_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBattleBuyWitchTeam.witch_team_id)
  return witch_team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqBattleBuyWitchTeam::set_allocated_witch_team_id(std::string* witch_team_id) {
  if (witch_team_id != nullptr) {
    
  } else {
    
  }
  witch_team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBattleBuyWitchTeam.witch_team_id)
}

// -------------------------------------------------------------------

// AckBattleBuyWitchTeam

// .KWMsg.EGameEventCode event_code = 1;
inline void AckBattleBuyWitchTeam::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBattleBuyWitchTeam::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckBattleBuyWitchTeam::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattleBuyWitchTeam.event_code)
  return _internal_event_code();
}
inline void AckBattleBuyWitchTeam::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckBattleBuyWitchTeam::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBattleBuyWitchTeam.event_code)
}

// bytes witch_team_id = 2;
inline void AckBattleBuyWitchTeam::clear_witch_team_id() {
  witch_team_id_.ClearToEmpty();
}
inline const std::string& AckBattleBuyWitchTeam::witch_team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBattleBuyWitchTeam.witch_team_id)
  return _internal_witch_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckBattleBuyWitchTeam::set_witch_team_id(ArgT0&& arg0, ArgT... args) {
 
 witch_team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckBattleBuyWitchTeam.witch_team_id)
}
inline std::string* AckBattleBuyWitchTeam::mutable_witch_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBattleBuyWitchTeam.witch_team_id)
  return _internal_mutable_witch_team_id();
}
inline const std::string& AckBattleBuyWitchTeam::_internal_witch_team_id() const {
  return witch_team_id_.Get();
}
inline void AckBattleBuyWitchTeam::_internal_set_witch_team_id(const std::string& value) {
  
  witch_team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckBattleBuyWitchTeam::_internal_mutable_witch_team_id() {
  
  return witch_team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckBattleBuyWitchTeam::release_witch_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBattleBuyWitchTeam.witch_team_id)
  return witch_team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckBattleBuyWitchTeam::set_allocated_witch_team_id(std::string* witch_team_id) {
  if (witch_team_id != nullptr) {
    
  } else {
    
  }
  witch_team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBattleBuyWitchTeam.witch_team_id)
}

// -------------------------------------------------------------------

// ReqTestRecruitWitch

// .KWMsg.Ident player_id = 1;
inline bool ReqTestRecruitWitch::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqTestRecruitWitch::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqTestRecruitWitch::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqTestRecruitWitch::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTestRecruitWitch.player_id)
  return _internal_player_id();
}
inline void ReqTestRecruitWitch::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqTestRecruitWitch.player_id)
}
inline ::KWMsg::Ident* ReqTestRecruitWitch::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqTestRecruitWitch::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTestRecruitWitch.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqTestRecruitWitch::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqTestRecruitWitch::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTestRecruitWitch.player_id)
  return _internal_mutable_player_id();
}
inline void ReqTestRecruitWitch::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTestRecruitWitch.player_id)
}

// bytes witch_id = 2;
inline void ReqTestRecruitWitch::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqTestRecruitWitch::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTestRecruitWitch.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqTestRecruitWitch::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqTestRecruitWitch.witch_id)
}
inline std::string* ReqTestRecruitWitch::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTestRecruitWitch.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqTestRecruitWitch::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqTestRecruitWitch::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqTestRecruitWitch::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqTestRecruitWitch::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTestRecruitWitch.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqTestRecruitWitch::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTestRecruitWitch.witch_id)
}

// -------------------------------------------------------------------

// CommonGetRewardInfo

// .KWMsg.CommonGetRewardInfo.EShowType show_type = 1;
inline void CommonGetRewardInfo::clear_show_type() {
  show_type_ = 0;
}
inline ::KWMsg::CommonGetRewardInfo_EShowType CommonGetRewardInfo::_internal_show_type() const {
  return static_cast< ::KWMsg::CommonGetRewardInfo_EShowType >(show_type_);
}
inline ::KWMsg::CommonGetRewardInfo_EShowType CommonGetRewardInfo::show_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommonGetRewardInfo.show_type)
  return _internal_show_type();
}
inline void CommonGetRewardInfo::_internal_set_show_type(::KWMsg::CommonGetRewardInfo_EShowType value) {
  
  show_type_ = value;
}
inline void CommonGetRewardInfo::set_show_type(::KWMsg::CommonGetRewardInfo_EShowType value) {
  _internal_set_show_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommonGetRewardInfo.show_type)
}

// repeated .KWMsg.RewardInfo reward_list = 2;
inline int CommonGetRewardInfo::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int CommonGetRewardInfo::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void CommonGetRewardInfo::clear_reward_list() {
  reward_list_.Clear();
}
inline ::KWMsg::RewardInfo* CommonGetRewardInfo::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.CommonGetRewardInfo.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
CommonGetRewardInfo::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.CommonGetRewardInfo.reward_list)
  return &reward_list_;
}
inline const ::KWMsg::RewardInfo& CommonGetRewardInfo::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::KWMsg::RewardInfo& CommonGetRewardInfo::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.CommonGetRewardInfo.reward_list)
  return _internal_reward_list(index);
}
inline ::KWMsg::RewardInfo* CommonGetRewardInfo::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::KWMsg::RewardInfo* CommonGetRewardInfo::add_reward_list() {
  // @@protoc_insertion_point(field_add:KWMsg.CommonGetRewardInfo.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
CommonGetRewardInfo::reward_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.CommonGetRewardInfo.reward_list)
  return reward_list_;
}

// -------------------------------------------------------------------

// ReqSetSystemFunctionFlag

// .KWMsg.Ident player_id = 1;
inline bool ReqSetSystemFunctionFlag::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqSetSystemFunctionFlag::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqSetSystemFunctionFlag::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqSetSystemFunctionFlag::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSetSystemFunctionFlag.player_id)
  return _internal_player_id();
}
inline void ReqSetSystemFunctionFlag::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqSetSystemFunctionFlag.player_id)
}
inline ::KWMsg::Ident* ReqSetSystemFunctionFlag::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqSetSystemFunctionFlag::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSetSystemFunctionFlag.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqSetSystemFunctionFlag::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqSetSystemFunctionFlag::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSetSystemFunctionFlag.player_id)
  return _internal_mutable_player_id();
}
inline void ReqSetSystemFunctionFlag::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSetSystemFunctionFlag.player_id)
}

// bytes function_id = 2;
inline void ReqSetSystemFunctionFlag::clear_function_id() {
  function_id_.ClearToEmpty();
}
inline const std::string& ReqSetSystemFunctionFlag::function_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSetSystemFunctionFlag.function_id)
  return _internal_function_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSetSystemFunctionFlag::set_function_id(ArgT0&& arg0, ArgT... args) {
 
 function_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSetSystemFunctionFlag.function_id)
}
inline std::string* ReqSetSystemFunctionFlag::mutable_function_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSetSystemFunctionFlag.function_id)
  return _internal_mutable_function_id();
}
inline const std::string& ReqSetSystemFunctionFlag::_internal_function_id() const {
  return function_id_.Get();
}
inline void ReqSetSystemFunctionFlag::_internal_set_function_id(const std::string& value) {
  
  function_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSetSystemFunctionFlag::_internal_mutable_function_id() {
  
  return function_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSetSystemFunctionFlag::release_function_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSetSystemFunctionFlag.function_id)
  return function_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSetSystemFunctionFlag::set_allocated_function_id(std::string* function_id) {
  if (function_id != nullptr) {
    
  } else {
    
  }
  function_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), function_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSetSystemFunctionFlag.function_id)
}

// int32 flag = 3;
inline void ReqSetSystemFunctionFlag::clear_flag() {
  flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSetSystemFunctionFlag::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSetSystemFunctionFlag::flag() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSetSystemFunctionFlag.flag)
  return _internal_flag();
}
inline void ReqSetSystemFunctionFlag::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  flag_ = value;
}
inline void ReqSetSystemFunctionFlag::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqSetSystemFunctionFlag.flag)
}

// -------------------------------------------------------------------

// AckSetSystemFunctionFlag

// .KWMsg.EGameEventCode event_code = 1;
inline void AckSetSystemFunctionFlag::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckSetSystemFunctionFlag::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckSetSystemFunctionFlag::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSetSystemFunctionFlag.event_code)
  return _internal_event_code();
}
inline void AckSetSystemFunctionFlag::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckSetSystemFunctionFlag::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSetSystemFunctionFlag.event_code)
}

// -------------------------------------------------------------------

// SyncSystemFunctionUnlock

// repeated bytes function_list = 1;
inline int SyncSystemFunctionUnlock::_internal_function_list_size() const {
  return function_list_.size();
}
inline int SyncSystemFunctionUnlock::function_list_size() const {
  return _internal_function_list_size();
}
inline void SyncSystemFunctionUnlock::clear_function_list() {
  function_list_.Clear();
}
inline std::string* SyncSystemFunctionUnlock::add_function_list() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.SyncSystemFunctionUnlock.function_list)
  return _internal_add_function_list();
}
inline const std::string& SyncSystemFunctionUnlock::_internal_function_list(int index) const {
  return function_list_.Get(index);
}
inline const std::string& SyncSystemFunctionUnlock::function_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncSystemFunctionUnlock.function_list)
  return _internal_function_list(index);
}
inline std::string* SyncSystemFunctionUnlock::mutable_function_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncSystemFunctionUnlock.function_list)
  return function_list_.Mutable(index);
}
inline void SyncSystemFunctionUnlock::set_function_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.SyncSystemFunctionUnlock.function_list)
  function_list_.Mutable(index)->assign(value);
}
inline void SyncSystemFunctionUnlock::set_function_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.SyncSystemFunctionUnlock.function_list)
  function_list_.Mutable(index)->assign(std::move(value));
}
inline void SyncSystemFunctionUnlock::set_function_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  function_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.SyncSystemFunctionUnlock.function_list)
}
inline void SyncSystemFunctionUnlock::set_function_list(int index, const void* value, size_t size) {
  function_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.SyncSystemFunctionUnlock.function_list)
}
inline std::string* SyncSystemFunctionUnlock::_internal_add_function_list() {
  return function_list_.Add();
}
inline void SyncSystemFunctionUnlock::add_function_list(const std::string& value) {
  function_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.SyncSystemFunctionUnlock.function_list)
}
inline void SyncSystemFunctionUnlock::add_function_list(std::string&& value) {
  function_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.SyncSystemFunctionUnlock.function_list)
}
inline void SyncSystemFunctionUnlock::add_function_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  function_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.SyncSystemFunctionUnlock.function_list)
}
inline void SyncSystemFunctionUnlock::add_function_list(const void* value, size_t size) {
  function_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.SyncSystemFunctionUnlock.function_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
SyncSystemFunctionUnlock::function_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.SyncSystemFunctionUnlock.function_list)
  return function_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
SyncSystemFunctionUnlock::mutable_function_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.SyncSystemFunctionUnlock.function_list)
  return &function_list_;
}

// -------------------------------------------------------------------

// SyncPlayerLevelRanking

// .KWMsg.Ident player_id = 1;
inline bool SyncPlayerLevelRanking::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncPlayerLevelRanking::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncPlayerLevelRanking::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncPlayerLevelRanking::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerLevelRanking.player_id)
  return _internal_player_id();
}
inline void SyncPlayerLevelRanking::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerLevelRanking.player_id)
}
inline ::KWMsg::Ident* SyncPlayerLevelRanking::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerLevelRanking::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerLevelRanking.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerLevelRanking::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncPlayerLevelRanking::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerLevelRanking.player_id)
  return _internal_mutable_player_id();
}
inline void SyncPlayerLevelRanking::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerLevelRanking.player_id)
}

// int64 level_or_score = 2;
inline void SyncPlayerLevelRanking::clear_level_or_score() {
  level_or_score_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncPlayerLevelRanking::_internal_level_or_score() const {
  return level_or_score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncPlayerLevelRanking::level_or_score() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerLevelRanking.level_or_score)
  return _internal_level_or_score();
}
inline void SyncPlayerLevelRanking::_internal_set_level_or_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  level_or_score_ = value;
}
inline void SyncPlayerLevelRanking::set_level_or_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_level_or_score(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerLevelRanking.level_or_score)
}

// -------------------------------------------------------------------

// ReqSendGiftForWitch

// .KWMsg.Ident player_id = 1;
inline bool ReqSendGiftForWitch::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqSendGiftForWitch::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqSendGiftForWitch::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqSendGiftForWitch::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSendGiftForWitch.player_id)
  return _internal_player_id();
}
inline void ReqSendGiftForWitch::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqSendGiftForWitch.player_id)
}
inline ::KWMsg::Ident* ReqSendGiftForWitch::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqSendGiftForWitch::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSendGiftForWitch.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqSendGiftForWitch::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqSendGiftForWitch::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSendGiftForWitch.player_id)
  return _internal_mutable_player_id();
}
inline void ReqSendGiftForWitch::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSendGiftForWitch.player_id)
}

// bytes witch_id = 2;
inline void ReqSendGiftForWitch::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqSendGiftForWitch::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSendGiftForWitch.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSendGiftForWitch::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSendGiftForWitch.witch_id)
}
inline std::string* ReqSendGiftForWitch::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSendGiftForWitch.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqSendGiftForWitch::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqSendGiftForWitch::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSendGiftForWitch::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSendGiftForWitch::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSendGiftForWitch.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSendGiftForWitch::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSendGiftForWitch.witch_id)
}

// bytes gift_item_id = 3;
inline void ReqSendGiftForWitch::clear_gift_item_id() {
  gift_item_id_.ClearToEmpty();
}
inline const std::string& ReqSendGiftForWitch::gift_item_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSendGiftForWitch.gift_item_id)
  return _internal_gift_item_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSendGiftForWitch::set_gift_item_id(ArgT0&& arg0, ArgT... args) {
 
 gift_item_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSendGiftForWitch.gift_item_id)
}
inline std::string* ReqSendGiftForWitch::mutable_gift_item_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSendGiftForWitch.gift_item_id)
  return _internal_mutable_gift_item_id();
}
inline const std::string& ReqSendGiftForWitch::_internal_gift_item_id() const {
  return gift_item_id_.Get();
}
inline void ReqSendGiftForWitch::_internal_set_gift_item_id(const std::string& value) {
  
  gift_item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSendGiftForWitch::_internal_mutable_gift_item_id() {
  
  return gift_item_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSendGiftForWitch::release_gift_item_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSendGiftForWitch.gift_item_id)
  return gift_item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSendGiftForWitch::set_allocated_gift_item_id(std::string* gift_item_id) {
  if (gift_item_id != nullptr) {
    
  } else {
    
  }
  gift_item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gift_item_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSendGiftForWitch.gift_item_id)
}

// bytes box_item_id = 4;
inline void ReqSendGiftForWitch::clear_box_item_id() {
  box_item_id_.ClearToEmpty();
}
inline const std::string& ReqSendGiftForWitch::box_item_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSendGiftForWitch.box_item_id)
  return _internal_box_item_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSendGiftForWitch::set_box_item_id(ArgT0&& arg0, ArgT... args) {
 
 box_item_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSendGiftForWitch.box_item_id)
}
inline std::string* ReqSendGiftForWitch::mutable_box_item_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSendGiftForWitch.box_item_id)
  return _internal_mutable_box_item_id();
}
inline const std::string& ReqSendGiftForWitch::_internal_box_item_id() const {
  return box_item_id_.Get();
}
inline void ReqSendGiftForWitch::_internal_set_box_item_id(const std::string& value) {
  
  box_item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSendGiftForWitch::_internal_mutable_box_item_id() {
  
  return box_item_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSendGiftForWitch::release_box_item_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSendGiftForWitch.box_item_id)
  return box_item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSendGiftForWitch::set_allocated_box_item_id(std::string* box_item_id) {
  if (box_item_id != nullptr) {
    
  } else {
    
  }
  box_item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), box_item_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSendGiftForWitch.box_item_id)
}

// -------------------------------------------------------------------

// AckSendGiftForWitch

// .KWMsg.EGameEventCode event_code = 1;
inline void AckSendGiftForWitch::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckSendGiftForWitch::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckSendGiftForWitch::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSendGiftForWitch.event_code)
  return _internal_event_code();
}
inline void AckSendGiftForWitch::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckSendGiftForWitch::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSendGiftForWitch.event_code)
}

// -------------------------------------------------------------------

// ReqUseMagicalMedicine

// .KWMsg.Ident player_id = 1;
inline bool ReqUseMagicalMedicine::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqUseMagicalMedicine::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqUseMagicalMedicine::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqUseMagicalMedicine::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUseMagicalMedicine.player_id)
  return _internal_player_id();
}
inline void ReqUseMagicalMedicine::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqUseMagicalMedicine.player_id)
}
inline ::KWMsg::Ident* ReqUseMagicalMedicine::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqUseMagicalMedicine::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUseMagicalMedicine.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqUseMagicalMedicine::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqUseMagicalMedicine::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUseMagicalMedicine.player_id)
  return _internal_mutable_player_id();
}
inline void ReqUseMagicalMedicine::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUseMagicalMedicine.player_id)
}

// bytes witch_id = 2;
inline void ReqUseMagicalMedicine::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqUseMagicalMedicine::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUseMagicalMedicine.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUseMagicalMedicine::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUseMagicalMedicine.witch_id)
}
inline std::string* ReqUseMagicalMedicine::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUseMagicalMedicine.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqUseMagicalMedicine::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqUseMagicalMedicine::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUseMagicalMedicine::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUseMagicalMedicine::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUseMagicalMedicine.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUseMagicalMedicine::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUseMagicalMedicine.witch_id)
}

// bytes item_id = 3;
inline void ReqUseMagicalMedicine::clear_item_id() {
  item_id_.ClearToEmpty();
}
inline const std::string& ReqUseMagicalMedicine::item_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUseMagicalMedicine.item_id)
  return _internal_item_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUseMagicalMedicine::set_item_id(ArgT0&& arg0, ArgT... args) {
 
 item_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUseMagicalMedicine.item_id)
}
inline std::string* ReqUseMagicalMedicine::mutable_item_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUseMagicalMedicine.item_id)
  return _internal_mutable_item_id();
}
inline const std::string& ReqUseMagicalMedicine::_internal_item_id() const {
  return item_id_.Get();
}
inline void ReqUseMagicalMedicine::_internal_set_item_id(const std::string& value) {
  
  item_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUseMagicalMedicine::_internal_mutable_item_id() {
  
  return item_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUseMagicalMedicine::release_item_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUseMagicalMedicine.item_id)
  return item_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUseMagicalMedicine::set_allocated_item_id(std::string* item_id) {
  if (item_id != nullptr) {
    
  } else {
    
  }
  item_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), item_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUseMagicalMedicine.item_id)
}

// int32 use_count = 4;
inline void ReqUseMagicalMedicine::clear_use_count() {
  use_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqUseMagicalMedicine::_internal_use_count() const {
  return use_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqUseMagicalMedicine::use_count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUseMagicalMedicine.use_count)
  return _internal_use_count();
}
inline void ReqUseMagicalMedicine::_internal_set_use_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  use_count_ = value;
}
inline void ReqUseMagicalMedicine::set_use_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_use_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqUseMagicalMedicine.use_count)
}

// -------------------------------------------------------------------

// AckUseMagicalMedicine

// .KWMsg.EGameEventCode event_code = 1;
inline void AckUseMagicalMedicine::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckUseMagicalMedicine::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckUseMagicalMedicine::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUseMagicalMedicine.event_code)
  return _internal_event_code();
}
inline void AckUseMagicalMedicine::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckUseMagicalMedicine::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckUseMagicalMedicine.event_code)
}

// -------------------------------------------------------------------

// ReqUnlockWitchSkin

// .KWMsg.Ident player_id = 1;
inline bool ReqUnlockWitchSkin::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqUnlockWitchSkin::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqUnlockWitchSkin::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqUnlockWitchSkin::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUnlockWitchSkin.player_id)
  return _internal_player_id();
}
inline void ReqUnlockWitchSkin::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqUnlockWitchSkin.player_id)
}
inline ::KWMsg::Ident* ReqUnlockWitchSkin::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqUnlockWitchSkin::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUnlockWitchSkin.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqUnlockWitchSkin::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqUnlockWitchSkin::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUnlockWitchSkin.player_id)
  return _internal_mutable_player_id();
}
inline void ReqUnlockWitchSkin::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUnlockWitchSkin.player_id)
}

// bytes witch_id = 2;
inline void ReqUnlockWitchSkin::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqUnlockWitchSkin::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUnlockWitchSkin.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUnlockWitchSkin::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUnlockWitchSkin.witch_id)
}
inline std::string* ReqUnlockWitchSkin::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUnlockWitchSkin.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqUnlockWitchSkin::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqUnlockWitchSkin::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUnlockWitchSkin::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUnlockWitchSkin::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUnlockWitchSkin.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUnlockWitchSkin::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUnlockWitchSkin.witch_id)
}

// bytes witch_skin_id = 3;
inline void ReqUnlockWitchSkin::clear_witch_skin_id() {
  witch_skin_id_.ClearToEmpty();
}
inline const std::string& ReqUnlockWitchSkin::witch_skin_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUnlockWitchSkin.witch_skin_id)
  return _internal_witch_skin_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUnlockWitchSkin::set_witch_skin_id(ArgT0&& arg0, ArgT... args) {
 
 witch_skin_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUnlockWitchSkin.witch_skin_id)
}
inline std::string* ReqUnlockWitchSkin::mutable_witch_skin_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUnlockWitchSkin.witch_skin_id)
  return _internal_mutable_witch_skin_id();
}
inline const std::string& ReqUnlockWitchSkin::_internal_witch_skin_id() const {
  return witch_skin_id_.Get();
}
inline void ReqUnlockWitchSkin::_internal_set_witch_skin_id(const std::string& value) {
  
  witch_skin_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUnlockWitchSkin::_internal_mutable_witch_skin_id() {
  
  return witch_skin_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUnlockWitchSkin::release_witch_skin_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUnlockWitchSkin.witch_skin_id)
  return witch_skin_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUnlockWitchSkin::set_allocated_witch_skin_id(std::string* witch_skin_id) {
  if (witch_skin_id != nullptr) {
    
  } else {
    
  }
  witch_skin_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_skin_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUnlockWitchSkin.witch_skin_id)
}

// -------------------------------------------------------------------

// AckUnlockWitchSkin

// .KWMsg.EGameEventCode event_code = 1;
inline void AckUnlockWitchSkin::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckUnlockWitchSkin::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckUnlockWitchSkin::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUnlockWitchSkin.event_code)
  return _internal_event_code();
}
inline void AckUnlockWitchSkin::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckUnlockWitchSkin::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckUnlockWitchSkin.event_code)
}

// -------------------------------------------------------------------

// ReqWitchStarLevelUp

// .KWMsg.Ident player_id = 1;
inline bool ReqWitchStarLevelUp::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqWitchStarLevelUp::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqWitchStarLevelUp::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqWitchStarLevelUp::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchStarLevelUp.player_id)
  return _internal_player_id();
}
inline void ReqWitchStarLevelUp::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqWitchStarLevelUp.player_id)
}
inline ::KWMsg::Ident* ReqWitchStarLevelUp::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqWitchStarLevelUp::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWitchStarLevelUp.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqWitchStarLevelUp::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqWitchStarLevelUp::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWitchStarLevelUp.player_id)
  return _internal_mutable_player_id();
}
inline void ReqWitchStarLevelUp::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWitchStarLevelUp.player_id)
}

// bytes witch_id = 2;
inline void ReqWitchStarLevelUp::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqWitchStarLevelUp::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchStarLevelUp.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqWitchStarLevelUp::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqWitchStarLevelUp.witch_id)
}
inline std::string* ReqWitchStarLevelUp::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWitchStarLevelUp.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqWitchStarLevelUp::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqWitchStarLevelUp::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqWitchStarLevelUp::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqWitchStarLevelUp::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWitchStarLevelUp.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqWitchStarLevelUp::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWitchStarLevelUp.witch_id)
}

// bytes consume_item_list = 3;
inline void ReqWitchStarLevelUp::clear_consume_item_list() {
  consume_item_list_.ClearToEmpty();
}
inline const std::string& ReqWitchStarLevelUp::consume_item_list() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchStarLevelUp.consume_item_list)
  return _internal_consume_item_list();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqWitchStarLevelUp::set_consume_item_list(ArgT0&& arg0, ArgT... args) {
 
 consume_item_list_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqWitchStarLevelUp.consume_item_list)
}
inline std::string* ReqWitchStarLevelUp::mutable_consume_item_list() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWitchStarLevelUp.consume_item_list)
  return _internal_mutable_consume_item_list();
}
inline const std::string& ReqWitchStarLevelUp::_internal_consume_item_list() const {
  return consume_item_list_.Get();
}
inline void ReqWitchStarLevelUp::_internal_set_consume_item_list(const std::string& value) {
  
  consume_item_list_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqWitchStarLevelUp::_internal_mutable_consume_item_list() {
  
  return consume_item_list_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqWitchStarLevelUp::release_consume_item_list() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWitchStarLevelUp.consume_item_list)
  return consume_item_list_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqWitchStarLevelUp::set_allocated_consume_item_list(std::string* consume_item_list) {
  if (consume_item_list != nullptr) {
    
  } else {
    
  }
  consume_item_list_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), consume_item_list,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWitchStarLevelUp.consume_item_list)
}

// -------------------------------------------------------------------

// AckWitchStarLevelUp

// .KWMsg.EGameEventCode event_code = 1;
inline void AckWitchStarLevelUp::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckWitchStarLevelUp::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckWitchStarLevelUp::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckWitchStarLevelUp.event_code)
  return _internal_event_code();
}
inline void AckWitchStarLevelUp::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckWitchStarLevelUp::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckWitchStarLevelUp.event_code)
}

// -------------------------------------------------------------------

// ReqWitchKnowledgeLevelUp

// .KWMsg.Ident player_id = 1;
inline bool ReqWitchKnowledgeLevelUp::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqWitchKnowledgeLevelUp::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqWitchKnowledgeLevelUp::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqWitchKnowledgeLevelUp::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchKnowledgeLevelUp.player_id)
  return _internal_player_id();
}
inline void ReqWitchKnowledgeLevelUp::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqWitchKnowledgeLevelUp.player_id)
}
inline ::KWMsg::Ident* ReqWitchKnowledgeLevelUp::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqWitchKnowledgeLevelUp::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWitchKnowledgeLevelUp.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqWitchKnowledgeLevelUp::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqWitchKnowledgeLevelUp::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWitchKnowledgeLevelUp.player_id)
  return _internal_mutable_player_id();
}
inline void ReqWitchKnowledgeLevelUp::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWitchKnowledgeLevelUp.player_id)
}

// bytes witch_id = 2;
inline void ReqWitchKnowledgeLevelUp::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqWitchKnowledgeLevelUp::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchKnowledgeLevelUp.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqWitchKnowledgeLevelUp::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqWitchKnowledgeLevelUp.witch_id)
}
inline std::string* ReqWitchKnowledgeLevelUp::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWitchKnowledgeLevelUp.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqWitchKnowledgeLevelUp::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqWitchKnowledgeLevelUp::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqWitchKnowledgeLevelUp::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqWitchKnowledgeLevelUp::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWitchKnowledgeLevelUp.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqWitchKnowledgeLevelUp::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWitchKnowledgeLevelUp.witch_id)
}

// .KWMsg.EWitchKnowledgeOptType opt_type = 3;
inline void ReqWitchKnowledgeLevelUp::clear_opt_type() {
  opt_type_ = 0;
}
inline ::KWMsg::EWitchKnowledgeOptType ReqWitchKnowledgeLevelUp::_internal_opt_type() const {
  return static_cast< ::KWMsg::EWitchKnowledgeOptType >(opt_type_);
}
inline ::KWMsg::EWitchKnowledgeOptType ReqWitchKnowledgeLevelUp::opt_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchKnowledgeLevelUp.opt_type)
  return _internal_opt_type();
}
inline void ReqWitchKnowledgeLevelUp::_internal_set_opt_type(::KWMsg::EWitchKnowledgeOptType value) {
  
  opt_type_ = value;
}
inline void ReqWitchKnowledgeLevelUp::set_opt_type(::KWMsg::EWitchKnowledgeOptType value) {
  _internal_set_opt_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqWitchKnowledgeLevelUp.opt_type)
}

// -------------------------------------------------------------------

// AckWitchKnowledgeLevelUp

// .KWMsg.EGameEventCode event_code = 1;
inline void AckWitchKnowledgeLevelUp::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckWitchKnowledgeLevelUp::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckWitchKnowledgeLevelUp::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckWitchKnowledgeLevelUp.event_code)
  return _internal_event_code();
}
inline void AckWitchKnowledgeLevelUp::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckWitchKnowledgeLevelUp::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckWitchKnowledgeLevelUp.event_code)
}

// -------------------------------------------------------------------

// ReqExpandWitchPneumaBagSize

// .KWMsg.Ident player_id = 1;
inline bool ReqExpandWitchPneumaBagSize::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqExpandWitchPneumaBagSize::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqExpandWitchPneumaBagSize::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqExpandWitchPneumaBagSize::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqExpandWitchPneumaBagSize.player_id)
  return _internal_player_id();
}
inline void ReqExpandWitchPneumaBagSize::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqExpandWitchPneumaBagSize.player_id)
}
inline ::KWMsg::Ident* ReqExpandWitchPneumaBagSize::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqExpandWitchPneumaBagSize::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqExpandWitchPneumaBagSize.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqExpandWitchPneumaBagSize::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqExpandWitchPneumaBagSize::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqExpandWitchPneumaBagSize.player_id)
  return _internal_mutable_player_id();
}
inline void ReqExpandWitchPneumaBagSize::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqExpandWitchPneumaBagSize.player_id)
}

// int32 expand_count = 2;
inline void ReqExpandWitchPneumaBagSize::clear_expand_count() {
  expand_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqExpandWitchPneumaBagSize::_internal_expand_count() const {
  return expand_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqExpandWitchPneumaBagSize::expand_count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqExpandWitchPneumaBagSize.expand_count)
  return _internal_expand_count();
}
inline void ReqExpandWitchPneumaBagSize::_internal_set_expand_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  expand_count_ = value;
}
inline void ReqExpandWitchPneumaBagSize::set_expand_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_expand_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqExpandWitchPneumaBagSize.expand_count)
}

// -------------------------------------------------------------------

// AckExpandWitchPneumaBagSize

// .KWMsg.EGameEventCode event_code = 1;
inline void AckExpandWitchPneumaBagSize::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckExpandWitchPneumaBagSize::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckExpandWitchPneumaBagSize::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckExpandWitchPneumaBagSize.event_code)
  return _internal_event_code();
}
inline void AckExpandWitchPneumaBagSize::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckExpandWitchPneumaBagSize::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckExpandWitchPneumaBagSize.event_code)
}

// -------------------------------------------------------------------

// ReqWitchPneumaOpt

// .KWMsg.Ident player_id = 1;
inline bool ReqWitchPneumaOpt::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqWitchPneumaOpt::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqWitchPneumaOpt::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqWitchPneumaOpt::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchPneumaOpt.player_id)
  return _internal_player_id();
}
inline void ReqWitchPneumaOpt::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqWitchPneumaOpt.player_id)
}
inline ::KWMsg::Ident* ReqWitchPneumaOpt::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqWitchPneumaOpt::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWitchPneumaOpt.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqWitchPneumaOpt::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqWitchPneumaOpt::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWitchPneumaOpt.player_id)
  return _internal_mutable_player_id();
}
inline void ReqWitchPneumaOpt::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWitchPneumaOpt.player_id)
}

// .KWMsg.Ident pneuma_guid = 2;
inline bool ReqWitchPneumaOpt::_internal_has_pneuma_guid() const {
  return this != internal_default_instance() && pneuma_guid_ != nullptr;
}
inline bool ReqWitchPneumaOpt::has_pneuma_guid() const {
  return _internal_has_pneuma_guid();
}
inline const ::KWMsg::Ident& ReqWitchPneumaOpt::_internal_pneuma_guid() const {
  const ::KWMsg::Ident* p = pneuma_guid_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqWitchPneumaOpt::pneuma_guid() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchPneumaOpt.pneuma_guid)
  return _internal_pneuma_guid();
}
inline void ReqWitchPneumaOpt::unsafe_arena_set_allocated_pneuma_guid(
    ::KWMsg::Ident* pneuma_guid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pneuma_guid_);
  }
  pneuma_guid_ = pneuma_guid;
  if (pneuma_guid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqWitchPneumaOpt.pneuma_guid)
}
inline ::KWMsg::Ident* ReqWitchPneumaOpt::release_pneuma_guid() {
  
  ::KWMsg::Ident* temp = pneuma_guid_;
  pneuma_guid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqWitchPneumaOpt::unsafe_arena_release_pneuma_guid() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWitchPneumaOpt.pneuma_guid)
  
  ::KWMsg::Ident* temp = pneuma_guid_;
  pneuma_guid_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqWitchPneumaOpt::_internal_mutable_pneuma_guid() {
  
  if (pneuma_guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    pneuma_guid_ = p;
  }
  return pneuma_guid_;
}
inline ::KWMsg::Ident* ReqWitchPneumaOpt::mutable_pneuma_guid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWitchPneumaOpt.pneuma_guid)
  return _internal_mutable_pneuma_guid();
}
inline void ReqWitchPneumaOpt::set_allocated_pneuma_guid(::KWMsg::Ident* pneuma_guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pneuma_guid_);
  }
  if (pneuma_guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pneuma_guid));
    if (message_arena != submessage_arena) {
      pneuma_guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pneuma_guid, submessage_arena);
    }
    
  } else {
    
  }
  pneuma_guid_ = pneuma_guid;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWitchPneumaOpt.pneuma_guid)
}

// bytes witch_id = 3;
inline void ReqWitchPneumaOpt::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqWitchPneumaOpt::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchPneumaOpt.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqWitchPneumaOpt::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqWitchPneumaOpt.witch_id)
}
inline std::string* ReqWitchPneumaOpt::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWitchPneumaOpt.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqWitchPneumaOpt::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqWitchPneumaOpt::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqWitchPneumaOpt::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqWitchPneumaOpt::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWitchPneumaOpt.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqWitchPneumaOpt::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWitchPneumaOpt.witch_id)
}

// .KWMsg.EWitchPneumaOptType opt_type = 4;
inline void ReqWitchPneumaOpt::clear_opt_type() {
  opt_type_ = 0;
}
inline ::KWMsg::EWitchPneumaOptType ReqWitchPneumaOpt::_internal_opt_type() const {
  return static_cast< ::KWMsg::EWitchPneumaOptType >(opt_type_);
}
inline ::KWMsg::EWitchPneumaOptType ReqWitchPneumaOpt::opt_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchPneumaOpt.opt_type)
  return _internal_opt_type();
}
inline void ReqWitchPneumaOpt::_internal_set_opt_type(::KWMsg::EWitchPneumaOptType value) {
  
  opt_type_ = value;
}
inline void ReqWitchPneumaOpt::set_opt_type(::KWMsg::EWitchPneumaOptType value) {
  _internal_set_opt_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqWitchPneumaOpt.opt_type)
}

// -------------------------------------------------------------------

// AckWitchPneumaOpt

// .KWMsg.EGameEventCode event_code = 1;
inline void AckWitchPneumaOpt::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckWitchPneumaOpt::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckWitchPneumaOpt::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckWitchPneumaOpt.event_code)
  return _internal_event_code();
}
inline void AckWitchPneumaOpt::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckWitchPneumaOpt::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckWitchPneumaOpt.event_code)
}

// .KWMsg.Ident pneuma_guid = 2;
inline bool AckWitchPneumaOpt::_internal_has_pneuma_guid() const {
  return this != internal_default_instance() && pneuma_guid_ != nullptr;
}
inline bool AckWitchPneumaOpt::has_pneuma_guid() const {
  return _internal_has_pneuma_guid();
}
inline const ::KWMsg::Ident& AckWitchPneumaOpt::_internal_pneuma_guid() const {
  const ::KWMsg::Ident* p = pneuma_guid_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckWitchPneumaOpt::pneuma_guid() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckWitchPneumaOpt.pneuma_guid)
  return _internal_pneuma_guid();
}
inline void AckWitchPneumaOpt::unsafe_arena_set_allocated_pneuma_guid(
    ::KWMsg::Ident* pneuma_guid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pneuma_guid_);
  }
  pneuma_guid_ = pneuma_guid;
  if (pneuma_guid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckWitchPneumaOpt.pneuma_guid)
}
inline ::KWMsg::Ident* AckWitchPneumaOpt::release_pneuma_guid() {
  
  ::KWMsg::Ident* temp = pneuma_guid_;
  pneuma_guid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckWitchPneumaOpt::unsafe_arena_release_pneuma_guid() {
  // @@protoc_insertion_point(field_release:KWMsg.AckWitchPneumaOpt.pneuma_guid)
  
  ::KWMsg::Ident* temp = pneuma_guid_;
  pneuma_guid_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckWitchPneumaOpt::_internal_mutable_pneuma_guid() {
  
  if (pneuma_guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    pneuma_guid_ = p;
  }
  return pneuma_guid_;
}
inline ::KWMsg::Ident* AckWitchPneumaOpt::mutable_pneuma_guid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckWitchPneumaOpt.pneuma_guid)
  return _internal_mutable_pneuma_guid();
}
inline void AckWitchPneumaOpt::set_allocated_pneuma_guid(::KWMsg::Ident* pneuma_guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pneuma_guid_);
  }
  if (pneuma_guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pneuma_guid));
    if (message_arena != submessage_arena) {
      pneuma_guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pneuma_guid, submessage_arena);
    }
    
  } else {
    
  }
  pneuma_guid_ = pneuma_guid;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckWitchPneumaOpt.pneuma_guid)
}

// bytes witch_id = 3;
inline void AckWitchPneumaOpt::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& AckWitchPneumaOpt::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckWitchPneumaOpt.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckWitchPneumaOpt::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckWitchPneumaOpt.witch_id)
}
inline std::string* AckWitchPneumaOpt::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckWitchPneumaOpt.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& AckWitchPneumaOpt::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void AckWitchPneumaOpt::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckWitchPneumaOpt::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckWitchPneumaOpt::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckWitchPneumaOpt.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckWitchPneumaOpt::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckWitchPneumaOpt.witch_id)
}

// .KWMsg.EWitchPneumaOptType opt_type = 4;
inline void AckWitchPneumaOpt::clear_opt_type() {
  opt_type_ = 0;
}
inline ::KWMsg::EWitchPneumaOptType AckWitchPneumaOpt::_internal_opt_type() const {
  return static_cast< ::KWMsg::EWitchPneumaOptType >(opt_type_);
}
inline ::KWMsg::EWitchPneumaOptType AckWitchPneumaOpt::opt_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckWitchPneumaOpt.opt_type)
  return _internal_opt_type();
}
inline void AckWitchPneumaOpt::_internal_set_opt_type(::KWMsg::EWitchPneumaOptType value) {
  
  opt_type_ = value;
}
inline void AckWitchPneumaOpt::set_opt_type(::KWMsg::EWitchPneumaOptType value) {
  _internal_set_opt_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckWitchPneumaOpt.opt_type)
}

// -------------------------------------------------------------------

// ReqWitchPneumaEnhance

// .KWMsg.Ident player_id = 1;
inline bool ReqWitchPneumaEnhance::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqWitchPneumaEnhance::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqWitchPneumaEnhance::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqWitchPneumaEnhance::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchPneumaEnhance.player_id)
  return _internal_player_id();
}
inline void ReqWitchPneumaEnhance::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqWitchPneumaEnhance.player_id)
}
inline ::KWMsg::Ident* ReqWitchPneumaEnhance::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqWitchPneumaEnhance::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWitchPneumaEnhance.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqWitchPneumaEnhance::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqWitchPneumaEnhance::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWitchPneumaEnhance.player_id)
  return _internal_mutable_player_id();
}
inline void ReqWitchPneumaEnhance::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWitchPneumaEnhance.player_id)
}

// .KWMsg.Ident pneuma_guid = 2;
inline bool ReqWitchPneumaEnhance::_internal_has_pneuma_guid() const {
  return this != internal_default_instance() && pneuma_guid_ != nullptr;
}
inline bool ReqWitchPneumaEnhance::has_pneuma_guid() const {
  return _internal_has_pneuma_guid();
}
inline const ::KWMsg::Ident& ReqWitchPneumaEnhance::_internal_pneuma_guid() const {
  const ::KWMsg::Ident* p = pneuma_guid_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqWitchPneumaEnhance::pneuma_guid() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchPneumaEnhance.pneuma_guid)
  return _internal_pneuma_guid();
}
inline void ReqWitchPneumaEnhance::unsafe_arena_set_allocated_pneuma_guid(
    ::KWMsg::Ident* pneuma_guid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pneuma_guid_);
  }
  pneuma_guid_ = pneuma_guid;
  if (pneuma_guid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqWitchPneumaEnhance.pneuma_guid)
}
inline ::KWMsg::Ident* ReqWitchPneumaEnhance::release_pneuma_guid() {
  
  ::KWMsg::Ident* temp = pneuma_guid_;
  pneuma_guid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqWitchPneumaEnhance::unsafe_arena_release_pneuma_guid() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWitchPneumaEnhance.pneuma_guid)
  
  ::KWMsg::Ident* temp = pneuma_guid_;
  pneuma_guid_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqWitchPneumaEnhance::_internal_mutable_pneuma_guid() {
  
  if (pneuma_guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    pneuma_guid_ = p;
  }
  return pneuma_guid_;
}
inline ::KWMsg::Ident* ReqWitchPneumaEnhance::mutable_pneuma_guid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWitchPneumaEnhance.pneuma_guid)
  return _internal_mutable_pneuma_guid();
}
inline void ReqWitchPneumaEnhance::set_allocated_pneuma_guid(::KWMsg::Ident* pneuma_guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(pneuma_guid_);
  }
  if (pneuma_guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pneuma_guid));
    if (message_arena != submessage_arena) {
      pneuma_guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pneuma_guid, submessage_arena);
    }
    
  } else {
    
  }
  pneuma_guid_ = pneuma_guid;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWitchPneumaEnhance.pneuma_guid)
}

// -------------------------------------------------------------------

// AckWitchPneumaEnhance

// .KWMsg.EGameEventCode event_code = 1;
inline void AckWitchPneumaEnhance::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckWitchPneumaEnhance::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckWitchPneumaEnhance::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckWitchPneumaEnhance.event_code)
  return _internal_event_code();
}
inline void AckWitchPneumaEnhance::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckWitchPneumaEnhance::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckWitchPneumaEnhance.event_code)
}

// -------------------------------------------------------------------

// ReqWitchPneumaDecompose

// .KWMsg.Ident player_id = 1;
inline bool ReqWitchPneumaDecompose::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqWitchPneumaDecompose::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqWitchPneumaDecompose::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqWitchPneumaDecompose::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchPneumaDecompose.player_id)
  return _internal_player_id();
}
inline void ReqWitchPneumaDecompose::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqWitchPneumaDecompose.player_id)
}
inline ::KWMsg::Ident* ReqWitchPneumaDecompose::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqWitchPneumaDecompose::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWitchPneumaDecompose.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqWitchPneumaDecompose::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqWitchPneumaDecompose::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWitchPneumaDecompose.player_id)
  return _internal_mutable_player_id();
}
inline void ReqWitchPneumaDecompose::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWitchPneumaDecompose.player_id)
}

// repeated .KWMsg.Ident pneuma_guid_list = 2;
inline int ReqWitchPneumaDecompose::_internal_pneuma_guid_list_size() const {
  return pneuma_guid_list_.size();
}
inline int ReqWitchPneumaDecompose::pneuma_guid_list_size() const {
  return _internal_pneuma_guid_list_size();
}
inline ::KWMsg::Ident* ReqWitchPneumaDecompose::mutable_pneuma_guid_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWitchPneumaDecompose.pneuma_guid_list)
  return pneuma_guid_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >*
ReqWitchPneumaDecompose::mutable_pneuma_guid_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ReqWitchPneumaDecompose.pneuma_guid_list)
  return &pneuma_guid_list_;
}
inline const ::KWMsg::Ident& ReqWitchPneumaDecompose::_internal_pneuma_guid_list(int index) const {
  return pneuma_guid_list_.Get(index);
}
inline const ::KWMsg::Ident& ReqWitchPneumaDecompose::pneuma_guid_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchPneumaDecompose.pneuma_guid_list)
  return _internal_pneuma_guid_list(index);
}
inline ::KWMsg::Ident* ReqWitchPneumaDecompose::_internal_add_pneuma_guid_list() {
  return pneuma_guid_list_.Add();
}
inline ::KWMsg::Ident* ReqWitchPneumaDecompose::add_pneuma_guid_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ReqWitchPneumaDecompose.pneuma_guid_list)
  return _internal_add_pneuma_guid_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::Ident >&
ReqWitchPneumaDecompose::pneuma_guid_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ReqWitchPneumaDecompose.pneuma_guid_list)
  return pneuma_guid_list_;
}

// -------------------------------------------------------------------

// AckWitchPneumaDecompose

// .KWMsg.EGameEventCode event_code = 1;
inline void AckWitchPneumaDecompose::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckWitchPneumaDecompose::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckWitchPneumaDecompose::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckWitchPneumaDecompose.event_code)
  return _internal_event_code();
}
inline void AckWitchPneumaDecompose::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckWitchPneumaDecompose::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckWitchPneumaDecompose.event_code)
}

// repeated .KWMsg.RewardInfo reward_list = 2;
inline int AckWitchPneumaDecompose::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int AckWitchPneumaDecompose::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void AckWitchPneumaDecompose::clear_reward_list() {
  reward_list_.Clear();
}
inline ::KWMsg::RewardInfo* AckWitchPneumaDecompose::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckWitchPneumaDecompose.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
AckWitchPneumaDecompose::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckWitchPneumaDecompose.reward_list)
  return &reward_list_;
}
inline const ::KWMsg::RewardInfo& AckWitchPneumaDecompose::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::KWMsg::RewardInfo& AckWitchPneumaDecompose::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckWitchPneumaDecompose.reward_list)
  return _internal_reward_list(index);
}
inline ::KWMsg::RewardInfo* AckWitchPneumaDecompose::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::KWMsg::RewardInfo* AckWitchPneumaDecompose::add_reward_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckWitchPneumaDecompose.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
AckWitchPneumaDecompose::reward_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckWitchPneumaDecompose.reward_list)
  return reward_list_;
}

// -------------------------------------------------------------------

// ReqWitchSkillLevelUp

// .KWMsg.Ident player_id = 1;
inline bool ReqWitchSkillLevelUp::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqWitchSkillLevelUp::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqWitchSkillLevelUp::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqWitchSkillLevelUp::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchSkillLevelUp.player_id)
  return _internal_player_id();
}
inline void ReqWitchSkillLevelUp::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqWitchSkillLevelUp.player_id)
}
inline ::KWMsg::Ident* ReqWitchSkillLevelUp::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqWitchSkillLevelUp::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWitchSkillLevelUp.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqWitchSkillLevelUp::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqWitchSkillLevelUp::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWitchSkillLevelUp.player_id)
  return _internal_mutable_player_id();
}
inline void ReqWitchSkillLevelUp::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWitchSkillLevelUp.player_id)
}

// bytes witch_id = 2;
inline void ReqWitchSkillLevelUp::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqWitchSkillLevelUp::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchSkillLevelUp.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqWitchSkillLevelUp::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqWitchSkillLevelUp.witch_id)
}
inline std::string* ReqWitchSkillLevelUp::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWitchSkillLevelUp.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqWitchSkillLevelUp::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqWitchSkillLevelUp::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqWitchSkillLevelUp::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqWitchSkillLevelUp::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWitchSkillLevelUp.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqWitchSkillLevelUp::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWitchSkillLevelUp.witch_id)
}

// .KWMsg.EWitchSkillOptType opt_type = 3;
inline void ReqWitchSkillLevelUp::clear_opt_type() {
  opt_type_ = 0;
}
inline ::KWMsg::EWitchSkillOptType ReqWitchSkillLevelUp::_internal_opt_type() const {
  return static_cast< ::KWMsg::EWitchSkillOptType >(opt_type_);
}
inline ::KWMsg::EWitchSkillOptType ReqWitchSkillLevelUp::opt_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWitchSkillLevelUp.opt_type)
  return _internal_opt_type();
}
inline void ReqWitchSkillLevelUp::_internal_set_opt_type(::KWMsg::EWitchSkillOptType value) {
  
  opt_type_ = value;
}
inline void ReqWitchSkillLevelUp::set_opt_type(::KWMsg::EWitchSkillOptType value) {
  _internal_set_opt_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqWitchSkillLevelUp.opt_type)
}

// -------------------------------------------------------------------

// AckWitchSkillLevelUp

// .KWMsg.EGameEventCode event_code = 1;
inline void AckWitchSkillLevelUp::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckWitchSkillLevelUp::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckWitchSkillLevelUp::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckWitchSkillLevelUp.event_code)
  return _internal_event_code();
}
inline void AckWitchSkillLevelUp::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckWitchSkillLevelUp::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckWitchSkillLevelUp.event_code)
}

// -------------------------------------------------------------------

// ReqSweepEndlessTower

// .KWMsg.Ident player_id = 1;
inline bool ReqSweepEndlessTower::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqSweepEndlessTower::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqSweepEndlessTower::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqSweepEndlessTower::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSweepEndlessTower.player_id)
  return _internal_player_id();
}
inline void ReqSweepEndlessTower::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqSweepEndlessTower.player_id)
}
inline ::KWMsg::Ident* ReqSweepEndlessTower::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqSweepEndlessTower::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSweepEndlessTower.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqSweepEndlessTower::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqSweepEndlessTower::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSweepEndlessTower.player_id)
  return _internal_mutable_player_id();
}
inline void ReqSweepEndlessTower::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSweepEndlessTower.player_id)
}

// int32 sweep_count = 2;
inline void ReqSweepEndlessTower::clear_sweep_count() {
  sweep_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSweepEndlessTower::_internal_sweep_count() const {
  return sweep_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSweepEndlessTower::sweep_count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSweepEndlessTower.sweep_count)
  return _internal_sweep_count();
}
inline void ReqSweepEndlessTower::_internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sweep_count_ = value;
}
inline void ReqSweepEndlessTower::set_sweep_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sweep_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqSweepEndlessTower.sweep_count)
}

// -------------------------------------------------------------------

// AckSweepEndlessTower

// .KWMsg.EGameEventCode event_code = 1;
inline void AckSweepEndlessTower::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckSweepEndlessTower::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckSweepEndlessTower::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSweepEndlessTower.event_code)
  return _internal_event_code();
}
inline void AckSweepEndlessTower::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckSweepEndlessTower::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSweepEndlessTower.event_code)
}

// repeated .KWMsg.RewardInfo reward_list = 2;
inline int AckSweepEndlessTower::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int AckSweepEndlessTower::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void AckSweepEndlessTower::clear_reward_list() {
  reward_list_.Clear();
}
inline ::KWMsg::RewardInfo* AckSweepEndlessTower::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSweepEndlessTower.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
AckSweepEndlessTower::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckSweepEndlessTower.reward_list)
  return &reward_list_;
}
inline const ::KWMsg::RewardInfo& AckSweepEndlessTower::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::KWMsg::RewardInfo& AckSweepEndlessTower::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSweepEndlessTower.reward_list)
  return _internal_reward_list(index);
}
inline ::KWMsg::RewardInfo* AckSweepEndlessTower::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::KWMsg::RewardInfo* AckSweepEndlessTower::add_reward_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckSweepEndlessTower.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
AckSweepEndlessTower::reward_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckSweepEndlessTower.reward_list)
  return reward_list_;
}

// -------------------------------------------------------------------

// ReqBlackmartCommodityList

// .KWMsg.Ident player_id = 1;
inline bool ReqBlackmartCommodityList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBlackmartCommodityList::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBlackmartCommodityList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBlackmartCommodityList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBlackmartCommodityList.player_id)
  return _internal_player_id();
}
inline void ReqBlackmartCommodityList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBlackmartCommodityList.player_id)
}
inline ::KWMsg::Ident* ReqBlackmartCommodityList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBlackmartCommodityList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBlackmartCommodityList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBlackmartCommodityList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBlackmartCommodityList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBlackmartCommodityList.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBlackmartCommodityList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBlackmartCommodityList.player_id)
}

// -------------------------------------------------------------------

// AckBlackmartCommodityList

// .KWMsg.EGameEventCode event_code = 1;
inline void AckBlackmartCommodityList::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBlackmartCommodityList::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckBlackmartCommodityList::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBlackmartCommodityList.event_code)
  return _internal_event_code();
}
inline void AckBlackmartCommodityList::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckBlackmartCommodityList::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBlackmartCommodityList.event_code)
}

// -------------------------------------------------------------------

// ReqRefreshBlackmartCommodityList

// .KWMsg.Ident player_id = 1;
inline bool ReqRefreshBlackmartCommodityList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqRefreshBlackmartCommodityList::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqRefreshBlackmartCommodityList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqRefreshBlackmartCommodityList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRefreshBlackmartCommodityList.player_id)
  return _internal_player_id();
}
inline void ReqRefreshBlackmartCommodityList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqRefreshBlackmartCommodityList.player_id)
}
inline ::KWMsg::Ident* ReqRefreshBlackmartCommodityList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqRefreshBlackmartCommodityList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqRefreshBlackmartCommodityList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqRefreshBlackmartCommodityList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqRefreshBlackmartCommodityList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqRefreshBlackmartCommodityList.player_id)
  return _internal_mutable_player_id();
}
inline void ReqRefreshBlackmartCommodityList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqRefreshBlackmartCommodityList.player_id)
}

// -------------------------------------------------------------------

// AckRefreshBlackmartCommodityList

// .KWMsg.EGameEventCode event_code = 1;
inline void AckRefreshBlackmartCommodityList::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckRefreshBlackmartCommodityList::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckRefreshBlackmartCommodityList::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckRefreshBlackmartCommodityList.event_code)
  return _internal_event_code();
}
inline void AckRefreshBlackmartCommodityList::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckRefreshBlackmartCommodityList::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckRefreshBlackmartCommodityList.event_code)
}

// -------------------------------------------------------------------

// ReqBuyBlackmartCommodity

// .KWMsg.Ident player_id = 1;
inline bool ReqBuyBlackmartCommodity::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBuyBlackmartCommodity::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBuyBlackmartCommodity::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBuyBlackmartCommodity::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBuyBlackmartCommodity.player_id)
  return _internal_player_id();
}
inline void ReqBuyBlackmartCommodity::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBuyBlackmartCommodity.player_id)
}
inline ::KWMsg::Ident* ReqBuyBlackmartCommodity::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBuyBlackmartCommodity::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBuyBlackmartCommodity.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBuyBlackmartCommodity::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBuyBlackmartCommodity::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBuyBlackmartCommodity.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBuyBlackmartCommodity::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBuyBlackmartCommodity.player_id)
}

// bytes commodity_id = 2;
inline void ReqBuyBlackmartCommodity::clear_commodity_id() {
  commodity_id_.ClearToEmpty();
}
inline const std::string& ReqBuyBlackmartCommodity::commodity_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBuyBlackmartCommodity.commodity_id)
  return _internal_commodity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqBuyBlackmartCommodity::set_commodity_id(ArgT0&& arg0, ArgT... args) {
 
 commodity_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqBuyBlackmartCommodity.commodity_id)
}
inline std::string* ReqBuyBlackmartCommodity::mutable_commodity_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBuyBlackmartCommodity.commodity_id)
  return _internal_mutable_commodity_id();
}
inline const std::string& ReqBuyBlackmartCommodity::_internal_commodity_id() const {
  return commodity_id_.Get();
}
inline void ReqBuyBlackmartCommodity::_internal_set_commodity_id(const std::string& value) {
  
  commodity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqBuyBlackmartCommodity::_internal_mutable_commodity_id() {
  
  return commodity_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqBuyBlackmartCommodity::release_commodity_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBuyBlackmartCommodity.commodity_id)
  return commodity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqBuyBlackmartCommodity::set_allocated_commodity_id(std::string* commodity_id) {
  if (commodity_id != nullptr) {
    
  } else {
    
  }
  commodity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commodity_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBuyBlackmartCommodity.commodity_id)
}

// int32 count = 3;
inline void ReqBuyBlackmartCommodity::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqBuyBlackmartCommodity::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqBuyBlackmartCommodity::count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBuyBlackmartCommodity.count)
  return _internal_count();
}
inline void ReqBuyBlackmartCommodity::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
}
inline void ReqBuyBlackmartCommodity::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqBuyBlackmartCommodity.count)
}

// -------------------------------------------------------------------

// AckBuyBlackmartCommodity

// .KWMsg.EGameEventCode event_code = 1;
inline void AckBuyBlackmartCommodity::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBuyBlackmartCommodity::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckBuyBlackmartCommodity::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBuyBlackmartCommodity.event_code)
  return _internal_event_code();
}
inline void AckBuyBlackmartCommodity::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckBuyBlackmartCommodity::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBuyBlackmartCommodity.event_code)
}

// bytes commodity_id = 2;
inline void AckBuyBlackmartCommodity::clear_commodity_id() {
  commodity_id_.ClearToEmpty();
}
inline const std::string& AckBuyBlackmartCommodity::commodity_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBuyBlackmartCommodity.commodity_id)
  return _internal_commodity_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckBuyBlackmartCommodity::set_commodity_id(ArgT0&& arg0, ArgT... args) {
 
 commodity_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckBuyBlackmartCommodity.commodity_id)
}
inline std::string* AckBuyBlackmartCommodity::mutable_commodity_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBuyBlackmartCommodity.commodity_id)
  return _internal_mutable_commodity_id();
}
inline const std::string& AckBuyBlackmartCommodity::_internal_commodity_id() const {
  return commodity_id_.Get();
}
inline void AckBuyBlackmartCommodity::_internal_set_commodity_id(const std::string& value) {
  
  commodity_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckBuyBlackmartCommodity::_internal_mutable_commodity_id() {
  
  return commodity_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckBuyBlackmartCommodity::release_commodity_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBuyBlackmartCommodity.commodity_id)
  return commodity_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckBuyBlackmartCommodity::set_allocated_commodity_id(std::string* commodity_id) {
  if (commodity_id != nullptr) {
    
  } else {
    
  }
  commodity_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), commodity_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBuyBlackmartCommodity.commodity_id)
}

// -------------------------------------------------------------------

// SyncBlackmartCommodityUpdated

// int32 update_type = 1;
inline void SyncBlackmartCommodityUpdated::clear_update_type() {
  update_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncBlackmartCommodityUpdated::_internal_update_type() const {
  return update_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncBlackmartCommodityUpdated::update_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBlackmartCommodityUpdated.update_type)
  return _internal_update_type();
}
inline void SyncBlackmartCommodityUpdated::_internal_set_update_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  update_type_ = value;
}
inline void SyncBlackmartCommodityUpdated::set_update_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_update_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncBlackmartCommodityUpdated.update_type)
}

// -------------------------------------------------------------------

// ReqActiveMissionOperation

// .KWMsg.Ident player_id = 1;
inline bool ReqActiveMissionOperation::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqActiveMissionOperation::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqActiveMissionOperation::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqActiveMissionOperation::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqActiveMissionOperation.player_id)
  return _internal_player_id();
}
inline void ReqActiveMissionOperation::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqActiveMissionOperation.player_id)
}
inline ::KWMsg::Ident* ReqActiveMissionOperation::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqActiveMissionOperation::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqActiveMissionOperation.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqActiveMissionOperation::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqActiveMissionOperation::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqActiveMissionOperation.player_id)
  return _internal_mutable_player_id();
}
inline void ReqActiveMissionOperation::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqActiveMissionOperation.player_id)
}

// .KWMsg.EActiveMisisonFlag mission_flag = 2;
inline void ReqActiveMissionOperation::clear_mission_flag() {
  mission_flag_ = 0;
}
inline ::KWMsg::EActiveMisisonFlag ReqActiveMissionOperation::_internal_mission_flag() const {
  return static_cast< ::KWMsg::EActiveMisisonFlag >(mission_flag_);
}
inline ::KWMsg::EActiveMisisonFlag ReqActiveMissionOperation::mission_flag() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqActiveMissionOperation.mission_flag)
  return _internal_mission_flag();
}
inline void ReqActiveMissionOperation::_internal_set_mission_flag(::KWMsg::EActiveMisisonFlag value) {
  
  mission_flag_ = value;
}
inline void ReqActiveMissionOperation::set_mission_flag(::KWMsg::EActiveMisisonFlag value) {
  _internal_set_mission_flag(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqActiveMissionOperation.mission_flag)
}

// -------------------------------------------------------------------

// AckActiveMissionOperation

// .KWMsg.EGameEventCode event_code = 1;
inline void AckActiveMissionOperation::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckActiveMissionOperation::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckActiveMissionOperation::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckActiveMissionOperation.event_code)
  return _internal_event_code();
}
inline void AckActiveMissionOperation::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckActiveMissionOperation::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckActiveMissionOperation.event_code)
}

// -------------------------------------------------------------------

// ReqGetActiveMissionReward

// .KWMsg.Ident player_id = 1;
inline bool ReqGetActiveMissionReward::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqGetActiveMissionReward::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqGetActiveMissionReward::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetActiveMissionReward::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetActiveMissionReward.player_id)
  return _internal_player_id();
}
inline void ReqGetActiveMissionReward::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetActiveMissionReward.player_id)
}
inline ::KWMsg::Ident* ReqGetActiveMissionReward::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetActiveMissionReward::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetActiveMissionReward.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetActiveMissionReward::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqGetActiveMissionReward::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetActiveMissionReward.player_id)
  return _internal_mutable_player_id();
}
inline void ReqGetActiveMissionReward::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetActiveMissionReward.player_id)
}

// bytes mission_id = 2;
inline void ReqGetActiveMissionReward::clear_mission_id() {
  mission_id_.ClearToEmpty();
}
inline const std::string& ReqGetActiveMissionReward::mission_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetActiveMissionReward.mission_id)
  return _internal_mission_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGetActiveMissionReward::set_mission_id(ArgT0&& arg0, ArgT... args) {
 
 mission_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGetActiveMissionReward.mission_id)
}
inline std::string* ReqGetActiveMissionReward::mutable_mission_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetActiveMissionReward.mission_id)
  return _internal_mutable_mission_id();
}
inline const std::string& ReqGetActiveMissionReward::_internal_mission_id() const {
  return mission_id_.Get();
}
inline void ReqGetActiveMissionReward::_internal_set_mission_id(const std::string& value) {
  
  mission_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGetActiveMissionReward::_internal_mutable_mission_id() {
  
  return mission_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGetActiveMissionReward::release_mission_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetActiveMissionReward.mission_id)
  return mission_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGetActiveMissionReward::set_allocated_mission_id(std::string* mission_id) {
  if (mission_id != nullptr) {
    
  } else {
    
  }
  mission_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mission_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetActiveMissionReward.mission_id)
}

// -------------------------------------------------------------------

// AckGetActiveMissionReward

// .KWMsg.EGameEventCode event_code = 1;
inline void AckGetActiveMissionReward::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckGetActiveMissionReward::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckGetActiveMissionReward::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetActiveMissionReward.event_code)
  return _internal_event_code();
}
inline void AckGetActiveMissionReward::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckGetActiveMissionReward::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetActiveMissionReward.event_code)
}

// -------------------------------------------------------------------

// ReqDrawCard

// .KWMsg.Ident player_id = 1;
inline bool ReqDrawCard::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqDrawCard::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqDrawCard::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqDrawCard::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDrawCard.player_id)
  return _internal_player_id();
}
inline void ReqDrawCard::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqDrawCard.player_id)
}
inline ::KWMsg::Ident* ReqDrawCard::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqDrawCard::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDrawCard.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqDrawCard::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqDrawCard::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDrawCard.player_id)
  return _internal_mutable_player_id();
}
inline void ReqDrawCard::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDrawCard.player_id)
}

// bytes card_pool_id = 2;
inline void ReqDrawCard::clear_card_pool_id() {
  card_pool_id_.ClearToEmpty();
}
inline const std::string& ReqDrawCard::card_pool_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDrawCard.card_pool_id)
  return _internal_card_pool_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDrawCard::set_card_pool_id(ArgT0&& arg0, ArgT... args) {
 
 card_pool_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqDrawCard.card_pool_id)
}
inline std::string* ReqDrawCard::mutable_card_pool_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDrawCard.card_pool_id)
  return _internal_mutable_card_pool_id();
}
inline const std::string& ReqDrawCard::_internal_card_pool_id() const {
  return card_pool_id_.Get();
}
inline void ReqDrawCard::_internal_set_card_pool_id(const std::string& value) {
  
  card_pool_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqDrawCard::_internal_mutable_card_pool_id() {
  
  return card_pool_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqDrawCard::release_card_pool_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDrawCard.card_pool_id)
  return card_pool_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqDrawCard::set_allocated_card_pool_id(std::string* card_pool_id) {
  if (card_pool_id != nullptr) {
    
  } else {
    
  }
  card_pool_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), card_pool_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDrawCard.card_pool_id)
}

// int32 dc_count = 3;
inline void ReqDrawCard::clear_dc_count() {
  dc_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDrawCard::_internal_dc_count() const {
  return dc_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDrawCard::dc_count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDrawCard.dc_count)
  return _internal_dc_count();
}
inline void ReqDrawCard::_internal_set_dc_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dc_count_ = value;
}
inline void ReqDrawCard::set_dc_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_dc_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqDrawCard.dc_count)
}

// -------------------------------------------------------------------

// AckDrawCard

// .KWMsg.EGameEventCode event_code = 1;
inline void AckDrawCard::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckDrawCard::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckDrawCard::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDrawCard.event_code)
  return _internal_event_code();
}
inline void AckDrawCard::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckDrawCard::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckDrawCard.event_code)
}

// repeated .KWMsg.DrawCardInfo result = 2;
inline int AckDrawCard::_internal_result_size() const {
  return result_.size();
}
inline int AckDrawCard::result_size() const {
  return _internal_result_size();
}
inline void AckDrawCard::clear_result() {
  result_.Clear();
}
inline ::KWMsg::DrawCardInfo* AckDrawCard::mutable_result(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckDrawCard.result)
  return result_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::DrawCardInfo >*
AckDrawCard::mutable_result() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckDrawCard.result)
  return &result_;
}
inline const ::KWMsg::DrawCardInfo& AckDrawCard::_internal_result(int index) const {
  return result_.Get(index);
}
inline const ::KWMsg::DrawCardInfo& AckDrawCard::result(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDrawCard.result)
  return _internal_result(index);
}
inline ::KWMsg::DrawCardInfo* AckDrawCard::_internal_add_result() {
  return result_.Add();
}
inline ::KWMsg::DrawCardInfo* AckDrawCard::add_result() {
  // @@protoc_insertion_point(field_add:KWMsg.AckDrawCard.result)
  return _internal_add_result();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::DrawCardInfo >&
AckDrawCard::result() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckDrawCard.result)
  return result_;
}

// -------------------------------------------------------------------

// CommunityMemberInfo

// .KWMsg.Ident player_id = 1;
inline bool CommunityMemberInfo::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool CommunityMemberInfo::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& CommunityMemberInfo::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& CommunityMemberInfo::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityMemberInfo.player_id)
  return _internal_player_id();
}
inline void CommunityMemberInfo::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.CommunityMemberInfo.player_id)
}
inline ::KWMsg::Ident* CommunityMemberInfo::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* CommunityMemberInfo::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.CommunityMemberInfo.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* CommunityMemberInfo::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* CommunityMemberInfo::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.CommunityMemberInfo.player_id)
  return _internal_mutable_player_id();
}
inline void CommunityMemberInfo::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.CommunityMemberInfo.player_id)
}

// bytes name = 2;
inline void CommunityMemberInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& CommunityMemberInfo::name() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityMemberInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommunityMemberInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.CommunityMemberInfo.name)
}
inline std::string* CommunityMemberInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.CommunityMemberInfo.name)
  return _internal_mutable_name();
}
inline const std::string& CommunityMemberInfo::_internal_name() const {
  return name_.Get();
}
inline void CommunityMemberInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommunityMemberInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommunityMemberInfo::release_name() {
  // @@protoc_insertion_point(field_release:KWMsg.CommunityMemberInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommunityMemberInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.CommunityMemberInfo.name)
}

// bytes avatar_url = 3;
inline void CommunityMemberInfo::clear_avatar_url() {
  avatar_url_.ClearToEmpty();
}
inline const std::string& CommunityMemberInfo::avatar_url() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityMemberInfo.avatar_url)
  return _internal_avatar_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommunityMemberInfo::set_avatar_url(ArgT0&& arg0, ArgT... args) {
 
 avatar_url_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.CommunityMemberInfo.avatar_url)
}
inline std::string* CommunityMemberInfo::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:KWMsg.CommunityMemberInfo.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& CommunityMemberInfo::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void CommunityMemberInfo::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommunityMemberInfo::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommunityMemberInfo::release_avatar_url() {
  // @@protoc_insertion_point(field_release:KWMsg.CommunityMemberInfo.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommunityMemberInfo::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.CommunityMemberInfo.avatar_url)
}

// bytes avatar_frame = 4;
inline void CommunityMemberInfo::clear_avatar_frame() {
  avatar_frame_.ClearToEmpty();
}
inline const std::string& CommunityMemberInfo::avatar_frame() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityMemberInfo.avatar_frame)
  return _internal_avatar_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommunityMemberInfo::set_avatar_frame(ArgT0&& arg0, ArgT... args) {
 
 avatar_frame_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.CommunityMemberInfo.avatar_frame)
}
inline std::string* CommunityMemberInfo::mutable_avatar_frame() {
  // @@protoc_insertion_point(field_mutable:KWMsg.CommunityMemberInfo.avatar_frame)
  return _internal_mutable_avatar_frame();
}
inline const std::string& CommunityMemberInfo::_internal_avatar_frame() const {
  return avatar_frame_.Get();
}
inline void CommunityMemberInfo::_internal_set_avatar_frame(const std::string& value) {
  
  avatar_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommunityMemberInfo::_internal_mutable_avatar_frame() {
  
  return avatar_frame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommunityMemberInfo::release_avatar_frame() {
  // @@protoc_insertion_point(field_release:KWMsg.CommunityMemberInfo.avatar_frame)
  return avatar_frame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommunityMemberInfo::set_allocated_avatar_frame(std::string* avatar_frame) {
  if (avatar_frame != nullptr) {
    
  } else {
    
  }
  avatar_frame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_frame,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.CommunityMemberInfo.avatar_frame)
}

// int32 level = 5;
inline void CommunityMemberInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityMemberInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityMemberInfo::level() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityMemberInfo.level)
  return _internal_level();
}
inline void CommunityMemberInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void CommunityMemberInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityMemberInfo.level)
}

// int32 fighting_capacity = 6;
inline void CommunityMemberInfo::clear_fighting_capacity() {
  fighting_capacity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityMemberInfo::_internal_fighting_capacity() const {
  return fighting_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityMemberInfo::fighting_capacity() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityMemberInfo.fighting_capacity)
  return _internal_fighting_capacity();
}
inline void CommunityMemberInfo::_internal_set_fighting_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  fighting_capacity_ = value;
}
inline void CommunityMemberInfo::set_fighting_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fighting_capacity(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityMemberInfo.fighting_capacity)
}

// int32 weekly_active_val = 7;
inline void CommunityMemberInfo::clear_weekly_active_val() {
  weekly_active_val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityMemberInfo::_internal_weekly_active_val() const {
  return weekly_active_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityMemberInfo::weekly_active_val() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityMemberInfo.weekly_active_val)
  return _internal_weekly_active_val();
}
inline void CommunityMemberInfo::_internal_set_weekly_active_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  weekly_active_val_ = value;
}
inline void CommunityMemberInfo::set_weekly_active_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_weekly_active_val(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityMemberInfo.weekly_active_val)
}

// int32 total_active_val = 8;
inline void CommunityMemberInfo::clear_total_active_val() {
  total_active_val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityMemberInfo::_internal_total_active_val() const {
  return total_active_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityMemberInfo::total_active_val() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityMemberInfo.total_active_val)
  return _internal_total_active_val();
}
inline void CommunityMemberInfo::_internal_set_total_active_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_active_val_ = value;
}
inline void CommunityMemberInfo::set_total_active_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_active_val(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityMemberInfo.total_active_val)
}

// .KWMsg.ECommunityMemberPosition position = 9;
inline void CommunityMemberInfo::clear_position() {
  position_ = 0;
}
inline ::KWMsg::ECommunityMemberPosition CommunityMemberInfo::_internal_position() const {
  return static_cast< ::KWMsg::ECommunityMemberPosition >(position_);
}
inline ::KWMsg::ECommunityMemberPosition CommunityMemberInfo::position() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityMemberInfo.position)
  return _internal_position();
}
inline void CommunityMemberInfo::_internal_set_position(::KWMsg::ECommunityMemberPosition value) {
  
  position_ = value;
}
inline void CommunityMemberInfo::set_position(::KWMsg::ECommunityMemberPosition value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityMemberInfo.position)
}

// int64 join_ts = 10;
inline void CommunityMemberInfo::clear_join_ts() {
  join_ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommunityMemberInfo::_internal_join_ts() const {
  return join_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommunityMemberInfo::join_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityMemberInfo.join_ts)
  return _internal_join_ts();
}
inline void CommunityMemberInfo::_internal_set_join_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  join_ts_ = value;
}
inline void CommunityMemberInfo::set_join_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_join_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityMemberInfo.join_ts)
}

// int64 offline_ts = 11;
inline void CommunityMemberInfo::clear_offline_ts() {
  offline_ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommunityMemberInfo::_internal_offline_ts() const {
  return offline_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 CommunityMemberInfo::offline_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityMemberInfo.offline_ts)
  return _internal_offline_ts();
}
inline void CommunityMemberInfo::_internal_set_offline_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offline_ts_ = value;
}
inline void CommunityMemberInfo::set_offline_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offline_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityMemberInfo.offline_ts)
}

// -------------------------------------------------------------------

// CommunityInfo

// bytes community_name = 1;
inline void CommunityInfo::clear_community_name() {
  community_name_.ClearToEmpty();
}
inline const std::string& CommunityInfo::community_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.community_name)
  return _internal_community_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommunityInfo::set_community_name(ArgT0&& arg0, ArgT... args) {
 
 community_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.community_name)
}
inline std::string* CommunityInfo::mutable_community_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.CommunityInfo.community_name)
  return _internal_mutable_community_name();
}
inline const std::string& CommunityInfo::_internal_community_name() const {
  return community_name_.Get();
}
inline void CommunityInfo::_internal_set_community_name(const std::string& value) {
  
  community_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommunityInfo::_internal_mutable_community_name() {
  
  return community_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommunityInfo::release_community_name() {
  // @@protoc_insertion_point(field_release:KWMsg.CommunityInfo.community_name)
  return community_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommunityInfo::set_allocated_community_name(std::string* community_name) {
  if (community_name != nullptr) {
    
  } else {
    
  }
  community_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.CommunityInfo.community_name)
}

// bytes community_flag = 2;
inline void CommunityInfo::clear_community_flag() {
  community_flag_.ClearToEmpty();
}
inline const std::string& CommunityInfo::community_flag() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.community_flag)
  return _internal_community_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommunityInfo::set_community_flag(ArgT0&& arg0, ArgT... args) {
 
 community_flag_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.community_flag)
}
inline std::string* CommunityInfo::mutable_community_flag() {
  // @@protoc_insertion_point(field_mutable:KWMsg.CommunityInfo.community_flag)
  return _internal_mutable_community_flag();
}
inline const std::string& CommunityInfo::_internal_community_flag() const {
  return community_flag_.Get();
}
inline void CommunityInfo::_internal_set_community_flag(const std::string& value) {
  
  community_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommunityInfo::_internal_mutable_community_flag() {
  
  return community_flag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommunityInfo::release_community_flag() {
  // @@protoc_insertion_point(field_release:KWMsg.CommunityInfo.community_flag)
  return community_flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommunityInfo::set_allocated_community_flag(std::string* community_flag) {
  if (community_flag != nullptr) {
    
  } else {
    
  }
  community_flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_flag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.CommunityInfo.community_flag)
}

// bytes community_icon = 3;
inline void CommunityInfo::clear_community_icon() {
  community_icon_.ClearToEmpty();
}
inline const std::string& CommunityInfo::community_icon() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.community_icon)
  return _internal_community_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommunityInfo::set_community_icon(ArgT0&& arg0, ArgT... args) {
 
 community_icon_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.community_icon)
}
inline std::string* CommunityInfo::mutable_community_icon() {
  // @@protoc_insertion_point(field_mutable:KWMsg.CommunityInfo.community_icon)
  return _internal_mutable_community_icon();
}
inline const std::string& CommunityInfo::_internal_community_icon() const {
  return community_icon_.Get();
}
inline void CommunityInfo::_internal_set_community_icon(const std::string& value) {
  
  community_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommunityInfo::_internal_mutable_community_icon() {
  
  return community_icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommunityInfo::release_community_icon() {
  // @@protoc_insertion_point(field_release:KWMsg.CommunityInfo.community_icon)
  return community_icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommunityInfo::set_allocated_community_icon(std::string* community_icon) {
  if (community_icon != nullptr) {
    
  } else {
    
  }
  community_icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_icon,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.CommunityInfo.community_icon)
}

// bytes community_declaration = 4;
inline void CommunityInfo::clear_community_declaration() {
  community_declaration_.ClearToEmpty();
}
inline const std::string& CommunityInfo::community_declaration() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.community_declaration)
  return _internal_community_declaration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommunityInfo::set_community_declaration(ArgT0&& arg0, ArgT... args) {
 
 community_declaration_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.community_declaration)
}
inline std::string* CommunityInfo::mutable_community_declaration() {
  // @@protoc_insertion_point(field_mutable:KWMsg.CommunityInfo.community_declaration)
  return _internal_mutable_community_declaration();
}
inline const std::string& CommunityInfo::_internal_community_declaration() const {
  return community_declaration_.Get();
}
inline void CommunityInfo::_internal_set_community_declaration(const std::string& value) {
  
  community_declaration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommunityInfo::_internal_mutable_community_declaration() {
  
  return community_declaration_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommunityInfo::release_community_declaration() {
  // @@protoc_insertion_point(field_release:KWMsg.CommunityInfo.community_declaration)
  return community_declaration_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommunityInfo::set_allocated_community_declaration(std::string* community_declaration) {
  if (community_declaration != nullptr) {
    
  } else {
    
  }
  community_declaration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_declaration,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.CommunityInfo.community_declaration)
}

// bytes community_chat_channel_id = 5;
inline void CommunityInfo::clear_community_chat_channel_id() {
  community_chat_channel_id_.ClearToEmpty();
}
inline const std::string& CommunityInfo::community_chat_channel_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.community_chat_channel_id)
  return _internal_community_chat_channel_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommunityInfo::set_community_chat_channel_id(ArgT0&& arg0, ArgT... args) {
 
 community_chat_channel_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.community_chat_channel_id)
}
inline std::string* CommunityInfo::mutable_community_chat_channel_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.CommunityInfo.community_chat_channel_id)
  return _internal_mutable_community_chat_channel_id();
}
inline const std::string& CommunityInfo::_internal_community_chat_channel_id() const {
  return community_chat_channel_id_.Get();
}
inline void CommunityInfo::_internal_set_community_chat_channel_id(const std::string& value) {
  
  community_chat_channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommunityInfo::_internal_mutable_community_chat_channel_id() {
  
  return community_chat_channel_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommunityInfo::release_community_chat_channel_id() {
  // @@protoc_insertion_point(field_release:KWMsg.CommunityInfo.community_chat_channel_id)
  return community_chat_channel_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommunityInfo::set_allocated_community_chat_channel_id(std::string* community_chat_channel_id) {
  if (community_chat_channel_id != nullptr) {
    
  } else {
    
  }
  community_chat_channel_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_chat_channel_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.CommunityInfo.community_chat_channel_id)
}

// bytes community_chief_name = 6;
inline void CommunityInfo::clear_community_chief_name() {
  community_chief_name_.ClearToEmpty();
}
inline const std::string& CommunityInfo::community_chief_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.community_chief_name)
  return _internal_community_chief_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommunityInfo::set_community_chief_name(ArgT0&& arg0, ArgT... args) {
 
 community_chief_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.community_chief_name)
}
inline std::string* CommunityInfo::mutable_community_chief_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.CommunityInfo.community_chief_name)
  return _internal_mutable_community_chief_name();
}
inline const std::string& CommunityInfo::_internal_community_chief_name() const {
  return community_chief_name_.Get();
}
inline void CommunityInfo::_internal_set_community_chief_name(const std::string& value) {
  
  community_chief_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* CommunityInfo::_internal_mutable_community_chief_name() {
  
  return community_chief_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* CommunityInfo::release_community_chief_name() {
  // @@protoc_insertion_point(field_release:KWMsg.CommunityInfo.community_chief_name)
  return community_chief_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void CommunityInfo::set_allocated_community_chief_name(std::string* community_chief_name) {
  if (community_chief_name != nullptr) {
    
  } else {
    
  }
  community_chief_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_chief_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.CommunityInfo.community_chief_name)
}

// .KWMsg.Ident community_chief_player_id = 7;
inline bool CommunityInfo::_internal_has_community_chief_player_id() const {
  return this != internal_default_instance() && community_chief_player_id_ != nullptr;
}
inline bool CommunityInfo::has_community_chief_player_id() const {
  return _internal_has_community_chief_player_id();
}
inline const ::KWMsg::Ident& CommunityInfo::_internal_community_chief_player_id() const {
  const ::KWMsg::Ident* p = community_chief_player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& CommunityInfo::community_chief_player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.community_chief_player_id)
  return _internal_community_chief_player_id();
}
inline void CommunityInfo::unsafe_arena_set_allocated_community_chief_player_id(
    ::KWMsg::Ident* community_chief_player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(community_chief_player_id_);
  }
  community_chief_player_id_ = community_chief_player_id;
  if (community_chief_player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.CommunityInfo.community_chief_player_id)
}
inline ::KWMsg::Ident* CommunityInfo::release_community_chief_player_id() {
  
  ::KWMsg::Ident* temp = community_chief_player_id_;
  community_chief_player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* CommunityInfo::unsafe_arena_release_community_chief_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.CommunityInfo.community_chief_player_id)
  
  ::KWMsg::Ident* temp = community_chief_player_id_;
  community_chief_player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* CommunityInfo::_internal_mutable_community_chief_player_id() {
  
  if (community_chief_player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    community_chief_player_id_ = p;
  }
  return community_chief_player_id_;
}
inline ::KWMsg::Ident* CommunityInfo::mutable_community_chief_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.CommunityInfo.community_chief_player_id)
  return _internal_mutable_community_chief_player_id();
}
inline void CommunityInfo::set_allocated_community_chief_player_id(::KWMsg::Ident* community_chief_player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(community_chief_player_id_);
  }
  if (community_chief_player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(community_chief_player_id));
    if (message_arena != submessage_arena) {
      community_chief_player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, community_chief_player_id, submessage_arena);
    }
    
  } else {
    
  }
  community_chief_player_id_ = community_chief_player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.CommunityInfo.community_chief_player_id)
}

// int32 community_id = 8;
inline void CommunityInfo::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.community_id)
  return _internal_community_id();
}
inline void CommunityInfo::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void CommunityInfo::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.community_id)
}

// int32 community_level = 9;
inline void CommunityInfo::clear_community_level() {
  community_level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::_internal_community_level() const {
  return community_level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::community_level() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.community_level)
  return _internal_community_level();
}
inline void CommunityInfo::_internal_set_community_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_level_ = value;
}
inline void CommunityInfo::set_community_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_level(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.community_level)
}

// int32 community_exp = 10;
inline void CommunityInfo::clear_community_exp() {
  community_exp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::_internal_community_exp() const {
  return community_exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::community_exp() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.community_exp)
  return _internal_community_exp();
}
inline void CommunityInfo::_internal_set_community_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_exp_ = value;
}
inline void CommunityInfo::set_community_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_exp(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.community_exp)
}

// int32 community_fighting_capacity = 11;
inline void CommunityInfo::clear_community_fighting_capacity() {
  community_fighting_capacity_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::_internal_community_fighting_capacity() const {
  return community_fighting_capacity_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::community_fighting_capacity() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.community_fighting_capacity)
  return _internal_community_fighting_capacity();
}
inline void CommunityInfo::_internal_set_community_fighting_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_fighting_capacity_ = value;
}
inline void CommunityInfo::set_community_fighting_capacity(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_fighting_capacity(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.community_fighting_capacity)
}

// int32 community_weekly_active_val = 12;
inline void CommunityInfo::clear_community_weekly_active_val() {
  community_weekly_active_val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::_internal_community_weekly_active_val() const {
  return community_weekly_active_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::community_weekly_active_val() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.community_weekly_active_val)
  return _internal_community_weekly_active_val();
}
inline void CommunityInfo::_internal_set_community_weekly_active_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_weekly_active_val_ = value;
}
inline void CommunityInfo::set_community_weekly_active_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_weekly_active_val(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.community_weekly_active_val)
}

// int32 community_total_active_val = 13;
inline void CommunityInfo::clear_community_total_active_val() {
  community_total_active_val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::_internal_community_total_active_val() const {
  return community_total_active_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::community_total_active_val() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.community_total_active_val)
  return _internal_community_total_active_val();
}
inline void CommunityInfo::_internal_set_community_total_active_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_total_active_val_ = value;
}
inline void CommunityInfo::set_community_total_active_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_total_active_val(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.community_total_active_val)
}

// int32 community_approve_type = 14;
inline void CommunityInfo::clear_community_approve_type() {
  community_approve_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::_internal_community_approve_type() const {
  return community_approve_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::community_approve_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.community_approve_type)
  return _internal_community_approve_type();
}
inline void CommunityInfo::_internal_set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_approve_type_ = value;
}
inline void CommunityInfo::set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_approve_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.community_approve_type)
}

// int32 level_restriction = 15;
inline void CommunityInfo::clear_level_restriction() {
  level_restriction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::_internal_level_restriction() const {
  return level_restriction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::level_restriction() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.level_restriction)
  return _internal_level_restriction();
}
inline void CommunityInfo::_internal_set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_restriction_ = value;
}
inline void CommunityInfo::set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level_restriction(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.level_restriction)
}

// int32 member_num = 16;
inline void CommunityInfo::clear_member_num() {
  member_num_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::_internal_member_num() const {
  return member_num_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 CommunityInfo::member_num() const {
  // @@protoc_insertion_point(field_get:KWMsg.CommunityInfo.member_num)
  return _internal_member_num();
}
inline void CommunityInfo::_internal_set_member_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  member_num_ = value;
}
inline void CommunityInfo::set_member_num(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_member_num(value);
  // @@protoc_insertion_point(field_set:KWMsg.CommunityInfo.member_num)
}

// -------------------------------------------------------------------

// AppliedCommunityInfo

// int64 apply_join_ts = 1;
inline void AppliedCommunityInfo::clear_apply_join_ts() {
  apply_join_ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppliedCommunityInfo::_internal_apply_join_ts() const {
  return apply_join_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppliedCommunityInfo::apply_join_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.AppliedCommunityInfo.apply_join_ts)
  return _internal_apply_join_ts();
}
inline void AppliedCommunityInfo::_internal_set_apply_join_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  apply_join_ts_ = value;
}
inline void AppliedCommunityInfo::set_apply_join_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_apply_join_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.AppliedCommunityInfo.apply_join_ts)
}

// .KWMsg.CommunityInfo community_info = 2;
inline bool AppliedCommunityInfo::_internal_has_community_info() const {
  return this != internal_default_instance() && community_info_ != nullptr;
}
inline bool AppliedCommunityInfo::has_community_info() const {
  return _internal_has_community_info();
}
inline void AppliedCommunityInfo::clear_community_info() {
  if (GetArenaForAllocation() == nullptr && community_info_ != nullptr) {
    delete community_info_;
  }
  community_info_ = nullptr;
}
inline const ::KWMsg::CommunityInfo& AppliedCommunityInfo::_internal_community_info() const {
  const ::KWMsg::CommunityInfo* p = community_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::CommunityInfo&>(
      ::KWMsg::_CommunityInfo_default_instance_);
}
inline const ::KWMsg::CommunityInfo& AppliedCommunityInfo::community_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.AppliedCommunityInfo.community_info)
  return _internal_community_info();
}
inline void AppliedCommunityInfo::unsafe_arena_set_allocated_community_info(
    ::KWMsg::CommunityInfo* community_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(community_info_);
  }
  community_info_ = community_info;
  if (community_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AppliedCommunityInfo.community_info)
}
inline ::KWMsg::CommunityInfo* AppliedCommunityInfo::release_community_info() {
  
  ::KWMsg::CommunityInfo* temp = community_info_;
  community_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::CommunityInfo* AppliedCommunityInfo::unsafe_arena_release_community_info() {
  // @@protoc_insertion_point(field_release:KWMsg.AppliedCommunityInfo.community_info)
  
  ::KWMsg::CommunityInfo* temp = community_info_;
  community_info_ = nullptr;
  return temp;
}
inline ::KWMsg::CommunityInfo* AppliedCommunityInfo::_internal_mutable_community_info() {
  
  if (community_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::CommunityInfo>(GetArenaForAllocation());
    community_info_ = p;
  }
  return community_info_;
}
inline ::KWMsg::CommunityInfo* AppliedCommunityInfo::mutable_community_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AppliedCommunityInfo.community_info)
  return _internal_mutable_community_info();
}
inline void AppliedCommunityInfo::set_allocated_community_info(::KWMsg::CommunityInfo* community_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete community_info_;
  }
  if (community_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::CommunityInfo>::GetOwningArena(community_info);
    if (message_arena != submessage_arena) {
      community_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, community_info, submessage_arena);
    }
    
  } else {
    
  }
  community_info_ = community_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AppliedCommunityInfo.community_info)
}

// -------------------------------------------------------------------

// AppliedPlayerInfo

// int64 apply_join_ts = 1;
inline void AppliedPlayerInfo::clear_apply_join_ts() {
  apply_join_ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppliedPlayerInfo::_internal_apply_join_ts() const {
  return apply_join_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppliedPlayerInfo::apply_join_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.AppliedPlayerInfo.apply_join_ts)
  return _internal_apply_join_ts();
}
inline void AppliedPlayerInfo::_internal_set_apply_join_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  apply_join_ts_ = value;
}
inline void AppliedPlayerInfo::set_apply_join_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_apply_join_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.AppliedPlayerInfo.apply_join_ts)
}

// .KWMsg.CommunityMemberInfo player_info = 2;
inline bool AppliedPlayerInfo::_internal_has_player_info() const {
  return this != internal_default_instance() && player_info_ != nullptr;
}
inline bool AppliedPlayerInfo::has_player_info() const {
  return _internal_has_player_info();
}
inline void AppliedPlayerInfo::clear_player_info() {
  if (GetArenaForAllocation() == nullptr && player_info_ != nullptr) {
    delete player_info_;
  }
  player_info_ = nullptr;
}
inline const ::KWMsg::CommunityMemberInfo& AppliedPlayerInfo::_internal_player_info() const {
  const ::KWMsg::CommunityMemberInfo* p = player_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::CommunityMemberInfo&>(
      ::KWMsg::_CommunityMemberInfo_default_instance_);
}
inline const ::KWMsg::CommunityMemberInfo& AppliedPlayerInfo::player_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.AppliedPlayerInfo.player_info)
  return _internal_player_info();
}
inline void AppliedPlayerInfo::unsafe_arena_set_allocated_player_info(
    ::KWMsg::CommunityMemberInfo* player_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info_);
  }
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AppliedPlayerInfo.player_info)
}
inline ::KWMsg::CommunityMemberInfo* AppliedPlayerInfo::release_player_info() {
  
  ::KWMsg::CommunityMemberInfo* temp = player_info_;
  player_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::CommunityMemberInfo* AppliedPlayerInfo::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_release:KWMsg.AppliedPlayerInfo.player_info)
  
  ::KWMsg::CommunityMemberInfo* temp = player_info_;
  player_info_ = nullptr;
  return temp;
}
inline ::KWMsg::CommunityMemberInfo* AppliedPlayerInfo::_internal_mutable_player_info() {
  
  if (player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::CommunityMemberInfo>(GetArenaForAllocation());
    player_info_ = p;
  }
  return player_info_;
}
inline ::KWMsg::CommunityMemberInfo* AppliedPlayerInfo::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AppliedPlayerInfo.player_info)
  return _internal_mutable_player_info();
}
inline void AppliedPlayerInfo::set_allocated_player_info(::KWMsg::CommunityMemberInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_info_;
  }
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::CommunityMemberInfo>::GetOwningArena(player_info);
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    
  } else {
    
  }
  player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AppliedPlayerInfo.player_info)
}

// -------------------------------------------------------------------

// SyncPlayerCommunityInfo

// .KWMsg.Ident player_id = 1;
inline bool SyncPlayerCommunityInfo::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncPlayerCommunityInfo::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncPlayerCommunityInfo::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncPlayerCommunityInfo::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerCommunityInfo.player_id)
  return _internal_player_id();
}
inline void SyncPlayerCommunityInfo::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerCommunityInfo.player_id)
}
inline ::KWMsg::Ident* SyncPlayerCommunityInfo::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerCommunityInfo::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerCommunityInfo.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerCommunityInfo::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncPlayerCommunityInfo::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerCommunityInfo.player_id)
  return _internal_mutable_player_id();
}
inline void SyncPlayerCommunityInfo::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerCommunityInfo.player_id)
}

// int32 community_id = 2;
inline void SyncPlayerCommunityInfo::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerCommunityInfo::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerCommunityInfo::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerCommunityInfo.community_id)
  return _internal_community_id();
}
inline void SyncPlayerCommunityInfo::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void SyncPlayerCommunityInfo::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerCommunityInfo.community_id)
}

// .KWMsg.ECommunityMemberPosition position = 3;
inline void SyncPlayerCommunityInfo::clear_position() {
  position_ = 0;
}
inline ::KWMsg::ECommunityMemberPosition SyncPlayerCommunityInfo::_internal_position() const {
  return static_cast< ::KWMsg::ECommunityMemberPosition >(position_);
}
inline ::KWMsg::ECommunityMemberPosition SyncPlayerCommunityInfo::position() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerCommunityInfo.position)
  return _internal_position();
}
inline void SyncPlayerCommunityInfo::_internal_set_position(::KWMsg::ECommunityMemberPosition value) {
  
  position_ = value;
}
inline void SyncPlayerCommunityInfo::set_position(::KWMsg::ECommunityMemberPosition value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerCommunityInfo.position)
}

// int64 quit_ts = 4;
inline void SyncPlayerCommunityInfo::clear_quit_ts() {
  quit_ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncPlayerCommunityInfo::_internal_quit_ts() const {
  return quit_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncPlayerCommunityInfo::quit_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerCommunityInfo.quit_ts)
  return _internal_quit_ts();
}
inline void SyncPlayerCommunityInfo::_internal_set_quit_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  quit_ts_ = value;
}
inline void SyncPlayerCommunityInfo::set_quit_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_quit_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerCommunityInfo.quit_ts)
}

// -------------------------------------------------------------------

// AddCommunityActiveValAndExp

// .KWMsg.Ident player_id = 1;
inline bool AddCommunityActiveValAndExp::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AddCommunityActiveValAndExp::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AddCommunityActiveValAndExp::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AddCommunityActiveValAndExp::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AddCommunityActiveValAndExp.player_id)
  return _internal_player_id();
}
inline void AddCommunityActiveValAndExp::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AddCommunityActiveValAndExp.player_id)
}
inline ::KWMsg::Ident* AddCommunityActiveValAndExp::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AddCommunityActiveValAndExp::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AddCommunityActiveValAndExp.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AddCommunityActiveValAndExp::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AddCommunityActiveValAndExp::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AddCommunityActiveValAndExp.player_id)
  return _internal_mutable_player_id();
}
inline void AddCommunityActiveValAndExp::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AddCommunityActiveValAndExp.player_id)
}

// int32 community_id = 2;
inline void AddCommunityActiveValAndExp::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddCommunityActiveValAndExp::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddCommunityActiveValAndExp::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AddCommunityActiveValAndExp.community_id)
  return _internal_community_id();
}
inline void AddCommunityActiveValAndExp::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void AddCommunityActiveValAndExp::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AddCommunityActiveValAndExp.community_id)
}

// int32 active_val = 3;
inline void AddCommunityActiveValAndExp::clear_active_val() {
  active_val_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddCommunityActiveValAndExp::_internal_active_val() const {
  return active_val_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddCommunityActiveValAndExp::active_val() const {
  // @@protoc_insertion_point(field_get:KWMsg.AddCommunityActiveValAndExp.active_val)
  return _internal_active_val();
}
inline void AddCommunityActiveValAndExp::_internal_set_active_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  active_val_ = value;
}
inline void AddCommunityActiveValAndExp::set_active_val(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_active_val(value);
  // @@protoc_insertion_point(field_set:KWMsg.AddCommunityActiveValAndExp.active_val)
}

// int32 level_exp = 4;
inline void AddCommunityActiveValAndExp::clear_level_exp() {
  level_exp_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddCommunityActiveValAndExp::_internal_level_exp() const {
  return level_exp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AddCommunityActiveValAndExp::level_exp() const {
  // @@protoc_insertion_point(field_get:KWMsg.AddCommunityActiveValAndExp.level_exp)
  return _internal_level_exp();
}
inline void AddCommunityActiveValAndExp::_internal_set_level_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_exp_ = value;
}
inline void AddCommunityActiveValAndExp::set_level_exp(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level_exp(value);
  // @@protoc_insertion_point(field_set:KWMsg.AddCommunityActiveValAndExp.level_exp)
}

// -------------------------------------------------------------------

// NotifyApplyJoinCommunityResult

// int32 community_id = 1;
inline void NotifyApplyJoinCommunityResult::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotifyApplyJoinCommunityResult::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotifyApplyJoinCommunityResult::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.NotifyApplyJoinCommunityResult.community_id)
  return _internal_community_id();
}
inline void NotifyApplyJoinCommunityResult::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void NotifyApplyJoinCommunityResult::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.NotifyApplyJoinCommunityResult.community_id)
}

// .KWMsg.ECommunityMemberPosition position = 2;
inline void NotifyApplyJoinCommunityResult::clear_position() {
  position_ = 0;
}
inline ::KWMsg::ECommunityMemberPosition NotifyApplyJoinCommunityResult::_internal_position() const {
  return static_cast< ::KWMsg::ECommunityMemberPosition >(position_);
}
inline ::KWMsg::ECommunityMemberPosition NotifyApplyJoinCommunityResult::position() const {
  // @@protoc_insertion_point(field_get:KWMsg.NotifyApplyJoinCommunityResult.position)
  return _internal_position();
}
inline void NotifyApplyJoinCommunityResult::_internal_set_position(::KWMsg::ECommunityMemberPosition value) {
  
  position_ = value;
}
inline void NotifyApplyJoinCommunityResult::set_position(::KWMsg::ECommunityMemberPosition value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:KWMsg.NotifyApplyJoinCommunityResult.position)
}

// bytes community_chat_channel_id = 3;
inline void NotifyApplyJoinCommunityResult::clear_community_chat_channel_id() {
  community_chat_channel_id_.ClearToEmpty();
}
inline const std::string& NotifyApplyJoinCommunityResult::community_chat_channel_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.NotifyApplyJoinCommunityResult.community_chat_channel_id)
  return _internal_community_chat_channel_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotifyApplyJoinCommunityResult::set_community_chat_channel_id(ArgT0&& arg0, ArgT... args) {
 
 community_chat_channel_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.NotifyApplyJoinCommunityResult.community_chat_channel_id)
}
inline std::string* NotifyApplyJoinCommunityResult::mutable_community_chat_channel_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.NotifyApplyJoinCommunityResult.community_chat_channel_id)
  return _internal_mutable_community_chat_channel_id();
}
inline const std::string& NotifyApplyJoinCommunityResult::_internal_community_chat_channel_id() const {
  return community_chat_channel_id_.Get();
}
inline void NotifyApplyJoinCommunityResult::_internal_set_community_chat_channel_id(const std::string& value) {
  
  community_chat_channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NotifyApplyJoinCommunityResult::_internal_mutable_community_chat_channel_id() {
  
  return community_chat_channel_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NotifyApplyJoinCommunityResult::release_community_chat_channel_id() {
  // @@protoc_insertion_point(field_release:KWMsg.NotifyApplyJoinCommunityResult.community_chat_channel_id)
  return community_chat_channel_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NotifyApplyJoinCommunityResult::set_allocated_community_chat_channel_id(std::string* community_chat_channel_id) {
  if (community_chat_channel_id != nullptr) {
    
  } else {
    
  }
  community_chat_channel_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_chat_channel_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.NotifyApplyJoinCommunityResult.community_chat_channel_id)
}

// int32 join_result = 4;
inline void NotifyApplyJoinCommunityResult::clear_join_result() {
  join_result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotifyApplyJoinCommunityResult::_internal_join_result() const {
  return join_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotifyApplyJoinCommunityResult::join_result() const {
  // @@protoc_insertion_point(field_get:KWMsg.NotifyApplyJoinCommunityResult.join_result)
  return _internal_join_result();
}
inline void NotifyApplyJoinCommunityResult::_internal_set_join_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  join_result_ = value;
}
inline void NotifyApplyJoinCommunityResult::set_join_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_join_result(value);
  // @@protoc_insertion_point(field_set:KWMsg.NotifyApplyJoinCommunityResult.join_result)
}

// -------------------------------------------------------------------

// NotifyPlayerGetFiredFromCommunity

// int32 community_id = 1;
inline void NotifyPlayerGetFiredFromCommunity::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotifyPlayerGetFiredFromCommunity::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 NotifyPlayerGetFiredFromCommunity::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.NotifyPlayerGetFiredFromCommunity.community_id)
  return _internal_community_id();
}
inline void NotifyPlayerGetFiredFromCommunity::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void NotifyPlayerGetFiredFromCommunity::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.NotifyPlayerGetFiredFromCommunity.community_id)
}

// .KWMsg.ECommunityMemberPosition position = 2;
inline void NotifyPlayerGetFiredFromCommunity::clear_position() {
  position_ = 0;
}
inline ::KWMsg::ECommunityMemberPosition NotifyPlayerGetFiredFromCommunity::_internal_position() const {
  return static_cast< ::KWMsg::ECommunityMemberPosition >(position_);
}
inline ::KWMsg::ECommunityMemberPosition NotifyPlayerGetFiredFromCommunity::position() const {
  // @@protoc_insertion_point(field_get:KWMsg.NotifyPlayerGetFiredFromCommunity.position)
  return _internal_position();
}
inline void NotifyPlayerGetFiredFromCommunity::_internal_set_position(::KWMsg::ECommunityMemberPosition value) {
  
  position_ = value;
}
inline void NotifyPlayerGetFiredFromCommunity::set_position(::KWMsg::ECommunityMemberPosition value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:KWMsg.NotifyPlayerGetFiredFromCommunity.position)
}

// bytes community_chat_channel_id = 3;
inline void NotifyPlayerGetFiredFromCommunity::clear_community_chat_channel_id() {
  community_chat_channel_id_.ClearToEmpty();
}
inline const std::string& NotifyPlayerGetFiredFromCommunity::community_chat_channel_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.NotifyPlayerGetFiredFromCommunity.community_chat_channel_id)
  return _internal_community_chat_channel_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void NotifyPlayerGetFiredFromCommunity::set_community_chat_channel_id(ArgT0&& arg0, ArgT... args) {
 
 community_chat_channel_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.NotifyPlayerGetFiredFromCommunity.community_chat_channel_id)
}
inline std::string* NotifyPlayerGetFiredFromCommunity::mutable_community_chat_channel_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.NotifyPlayerGetFiredFromCommunity.community_chat_channel_id)
  return _internal_mutable_community_chat_channel_id();
}
inline const std::string& NotifyPlayerGetFiredFromCommunity::_internal_community_chat_channel_id() const {
  return community_chat_channel_id_.Get();
}
inline void NotifyPlayerGetFiredFromCommunity::_internal_set_community_chat_channel_id(const std::string& value) {
  
  community_chat_channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* NotifyPlayerGetFiredFromCommunity::_internal_mutable_community_chat_channel_id() {
  
  return community_chat_channel_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* NotifyPlayerGetFiredFromCommunity::release_community_chat_channel_id() {
  // @@protoc_insertion_point(field_release:KWMsg.NotifyPlayerGetFiredFromCommunity.community_chat_channel_id)
  return community_chat_channel_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void NotifyPlayerGetFiredFromCommunity::set_allocated_community_chat_channel_id(std::string* community_chat_channel_id) {
  if (community_chat_channel_id != nullptr) {
    
  } else {
    
  }
  community_chat_channel_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_chat_channel_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.NotifyPlayerGetFiredFromCommunity.community_chat_channel_id)
}

// -------------------------------------------------------------------

// ReqCreateCommunity

// .KWMsg.Ident player_id = 1;
inline bool ReqCreateCommunity::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCreateCommunity::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCreateCommunity::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCreateCommunity::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateCommunity.player_id)
  return _internal_player_id();
}
inline void ReqCreateCommunity::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCreateCommunity.player_id)
}
inline ::KWMsg::Ident* ReqCreateCommunity::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCreateCommunity::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCreateCommunity.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCreateCommunity::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCreateCommunity::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCreateCommunity.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCreateCommunity::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCreateCommunity.player_id)
}

// bytes community_name = 2;
inline void ReqCreateCommunity::clear_community_name() {
  community_name_.ClearToEmpty();
}
inline const std::string& ReqCreateCommunity::community_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateCommunity.community_name)
  return _internal_community_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCreateCommunity::set_community_name(ArgT0&& arg0, ArgT... args) {
 
 community_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateCommunity.community_name)
}
inline std::string* ReqCreateCommunity::mutable_community_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCreateCommunity.community_name)
  return _internal_mutable_community_name();
}
inline const std::string& ReqCreateCommunity::_internal_community_name() const {
  return community_name_.Get();
}
inline void ReqCreateCommunity::_internal_set_community_name(const std::string& value) {
  
  community_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCreateCommunity::_internal_mutable_community_name() {
  
  return community_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCreateCommunity::release_community_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCreateCommunity.community_name)
  return community_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCreateCommunity::set_allocated_community_name(std::string* community_name) {
  if (community_name != nullptr) {
    
  } else {
    
  }
  community_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCreateCommunity.community_name)
}

// bytes community_flag = 3;
inline void ReqCreateCommunity::clear_community_flag() {
  community_flag_.ClearToEmpty();
}
inline const std::string& ReqCreateCommunity::community_flag() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateCommunity.community_flag)
  return _internal_community_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCreateCommunity::set_community_flag(ArgT0&& arg0, ArgT... args) {
 
 community_flag_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateCommunity.community_flag)
}
inline std::string* ReqCreateCommunity::mutable_community_flag() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCreateCommunity.community_flag)
  return _internal_mutable_community_flag();
}
inline const std::string& ReqCreateCommunity::_internal_community_flag() const {
  return community_flag_.Get();
}
inline void ReqCreateCommunity::_internal_set_community_flag(const std::string& value) {
  
  community_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCreateCommunity::_internal_mutable_community_flag() {
  
  return community_flag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCreateCommunity::release_community_flag() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCreateCommunity.community_flag)
  return community_flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCreateCommunity::set_allocated_community_flag(std::string* community_flag) {
  if (community_flag != nullptr) {
    
  } else {
    
  }
  community_flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_flag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCreateCommunity.community_flag)
}

// bytes community_icon = 4;
inline void ReqCreateCommunity::clear_community_icon() {
  community_icon_.ClearToEmpty();
}
inline const std::string& ReqCreateCommunity::community_icon() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateCommunity.community_icon)
  return _internal_community_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCreateCommunity::set_community_icon(ArgT0&& arg0, ArgT... args) {
 
 community_icon_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateCommunity.community_icon)
}
inline std::string* ReqCreateCommunity::mutable_community_icon() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCreateCommunity.community_icon)
  return _internal_mutable_community_icon();
}
inline const std::string& ReqCreateCommunity::_internal_community_icon() const {
  return community_icon_.Get();
}
inline void ReqCreateCommunity::_internal_set_community_icon(const std::string& value) {
  
  community_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCreateCommunity::_internal_mutable_community_icon() {
  
  return community_icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCreateCommunity::release_community_icon() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCreateCommunity.community_icon)
  return community_icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCreateCommunity::set_allocated_community_icon(std::string* community_icon) {
  if (community_icon != nullptr) {
    
  } else {
    
  }
  community_icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_icon,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCreateCommunity.community_icon)
}

// bytes community_declaration = 5;
inline void ReqCreateCommunity::clear_community_declaration() {
  community_declaration_.ClearToEmpty();
}
inline const std::string& ReqCreateCommunity::community_declaration() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateCommunity.community_declaration)
  return _internal_community_declaration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCreateCommunity::set_community_declaration(ArgT0&& arg0, ArgT... args) {
 
 community_declaration_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateCommunity.community_declaration)
}
inline std::string* ReqCreateCommunity::mutable_community_declaration() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCreateCommunity.community_declaration)
  return _internal_mutable_community_declaration();
}
inline const std::string& ReqCreateCommunity::_internal_community_declaration() const {
  return community_declaration_.Get();
}
inline void ReqCreateCommunity::_internal_set_community_declaration(const std::string& value) {
  
  community_declaration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCreateCommunity::_internal_mutable_community_declaration() {
  
  return community_declaration_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCreateCommunity::release_community_declaration() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCreateCommunity.community_declaration)
  return community_declaration_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCreateCommunity::set_allocated_community_declaration(std::string* community_declaration) {
  if (community_declaration != nullptr) {
    
  } else {
    
  }
  community_declaration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_declaration,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCreateCommunity.community_declaration)
}

// int32 community_approve_type = 6;
inline void ReqCreateCommunity::clear_community_approve_type() {
  community_approve_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCreateCommunity::_internal_community_approve_type() const {
  return community_approve_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCreateCommunity::community_approve_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateCommunity.community_approve_type)
  return _internal_community_approve_type();
}
inline void ReqCreateCommunity::_internal_set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_approve_type_ = value;
}
inline void ReqCreateCommunity::set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_approve_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateCommunity.community_approve_type)
}

// int32 level_restriction = 7;
inline void ReqCreateCommunity::clear_level_restriction() {
  level_restriction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCreateCommunity::_internal_level_restriction() const {
  return level_restriction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCreateCommunity::level_restriction() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateCommunity.level_restriction)
  return _internal_level_restriction();
}
inline void ReqCreateCommunity::_internal_set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_restriction_ = value;
}
inline void ReqCreateCommunity::set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level_restriction(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateCommunity.level_restriction)
}

// -------------------------------------------------------------------

// AckCreateCommunity

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCreateCommunity::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCreateCommunity::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCreateCommunity::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateCommunity.event_code)
  return _internal_event_code();
}
inline void AckCreateCommunity::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCreateCommunity::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateCommunity.event_code)
}

// .KWMsg.CommunityInfo community_info = 2;
inline bool AckCreateCommunity::_internal_has_community_info() const {
  return this != internal_default_instance() && community_info_ != nullptr;
}
inline bool AckCreateCommunity::has_community_info() const {
  return _internal_has_community_info();
}
inline void AckCreateCommunity::clear_community_info() {
  if (GetArenaForAllocation() == nullptr && community_info_ != nullptr) {
    delete community_info_;
  }
  community_info_ = nullptr;
}
inline const ::KWMsg::CommunityInfo& AckCreateCommunity::_internal_community_info() const {
  const ::KWMsg::CommunityInfo* p = community_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::CommunityInfo&>(
      ::KWMsg::_CommunityInfo_default_instance_);
}
inline const ::KWMsg::CommunityInfo& AckCreateCommunity::community_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateCommunity.community_info)
  return _internal_community_info();
}
inline void AckCreateCommunity::unsafe_arena_set_allocated_community_info(
    ::KWMsg::CommunityInfo* community_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(community_info_);
  }
  community_info_ = community_info;
  if (community_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckCreateCommunity.community_info)
}
inline ::KWMsg::CommunityInfo* AckCreateCommunity::release_community_info() {
  
  ::KWMsg::CommunityInfo* temp = community_info_;
  community_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::CommunityInfo* AckCreateCommunity::unsafe_arena_release_community_info() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCreateCommunity.community_info)
  
  ::KWMsg::CommunityInfo* temp = community_info_;
  community_info_ = nullptr;
  return temp;
}
inline ::KWMsg::CommunityInfo* AckCreateCommunity::_internal_mutable_community_info() {
  
  if (community_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::CommunityInfo>(GetArenaForAllocation());
    community_info_ = p;
  }
  return community_info_;
}
inline ::KWMsg::CommunityInfo* AckCreateCommunity::mutable_community_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCreateCommunity.community_info)
  return _internal_mutable_community_info();
}
inline void AckCreateCommunity::set_allocated_community_info(::KWMsg::CommunityInfo* community_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete community_info_;
  }
  if (community_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::CommunityInfo>::GetOwningArena(community_info);
    if (message_arena != submessage_arena) {
      community_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, community_info, submessage_arena);
    }
    
  } else {
    
  }
  community_info_ = community_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCreateCommunity.community_info)
}

// repeated .KWMsg.CommunityMemberInfo member_info_list = 3;
inline int AckCreateCommunity::_internal_member_info_list_size() const {
  return member_info_list_.size();
}
inline int AckCreateCommunity::member_info_list_size() const {
  return _internal_member_info_list_size();
}
inline void AckCreateCommunity::clear_member_info_list() {
  member_info_list_.Clear();
}
inline ::KWMsg::CommunityMemberInfo* AckCreateCommunity::mutable_member_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCreateCommunity.member_info_list)
  return member_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityMemberInfo >*
AckCreateCommunity::mutable_member_info_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckCreateCommunity.member_info_list)
  return &member_info_list_;
}
inline const ::KWMsg::CommunityMemberInfo& AckCreateCommunity::_internal_member_info_list(int index) const {
  return member_info_list_.Get(index);
}
inline const ::KWMsg::CommunityMemberInfo& AckCreateCommunity::member_info_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateCommunity.member_info_list)
  return _internal_member_info_list(index);
}
inline ::KWMsg::CommunityMemberInfo* AckCreateCommunity::_internal_add_member_info_list() {
  return member_info_list_.Add();
}
inline ::KWMsg::CommunityMemberInfo* AckCreateCommunity::add_member_info_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckCreateCommunity.member_info_list)
  return _internal_add_member_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityMemberInfo >&
AckCreateCommunity::member_info_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckCreateCommunity.member_info_list)
  return member_info_list_;
}

// -------------------------------------------------------------------

// ReqSearchCommunity

// .KWMsg.Ident player_id = 1;
inline bool ReqSearchCommunity::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqSearchCommunity::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqSearchCommunity::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqSearchCommunity::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSearchCommunity.player_id)
  return _internal_player_id();
}
inline void ReqSearchCommunity::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqSearchCommunity.player_id)
}
inline ::KWMsg::Ident* ReqSearchCommunity::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqSearchCommunity::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSearchCommunity.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqSearchCommunity::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqSearchCommunity::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSearchCommunity.player_id)
  return _internal_mutable_player_id();
}
inline void ReqSearchCommunity::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSearchCommunity.player_id)
}

// bytes community_name_or_id = 2;
inline void ReqSearchCommunity::clear_community_name_or_id() {
  community_name_or_id_.ClearToEmpty();
}
inline const std::string& ReqSearchCommunity::community_name_or_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSearchCommunity.community_name_or_id)
  return _internal_community_name_or_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSearchCommunity::set_community_name_or_id(ArgT0&& arg0, ArgT... args) {
 
 community_name_or_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSearchCommunity.community_name_or_id)
}
inline std::string* ReqSearchCommunity::mutable_community_name_or_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSearchCommunity.community_name_or_id)
  return _internal_mutable_community_name_or_id();
}
inline const std::string& ReqSearchCommunity::_internal_community_name_or_id() const {
  return community_name_or_id_.Get();
}
inline void ReqSearchCommunity::_internal_set_community_name_or_id(const std::string& value) {
  
  community_name_or_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSearchCommunity::_internal_mutable_community_name_or_id() {
  
  return community_name_or_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSearchCommunity::release_community_name_or_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSearchCommunity.community_name_or_id)
  return community_name_or_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSearchCommunity::set_allocated_community_name_or_id(std::string* community_name_or_id) {
  if (community_name_or_id != nullptr) {
    
  } else {
    
  }
  community_name_or_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_name_or_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSearchCommunity.community_name_or_id)
}

// -------------------------------------------------------------------

// AckSearchCommunity

// .KWMsg.EGameEventCode event_code = 1;
inline void AckSearchCommunity::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckSearchCommunity::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckSearchCommunity::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSearchCommunity.event_code)
  return _internal_event_code();
}
inline void AckSearchCommunity::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckSearchCommunity::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSearchCommunity.event_code)
}

// .KWMsg.CommunityInfo community_info = 2;
inline bool AckSearchCommunity::_internal_has_community_info() const {
  return this != internal_default_instance() && community_info_ != nullptr;
}
inline bool AckSearchCommunity::has_community_info() const {
  return _internal_has_community_info();
}
inline void AckSearchCommunity::clear_community_info() {
  if (GetArenaForAllocation() == nullptr && community_info_ != nullptr) {
    delete community_info_;
  }
  community_info_ = nullptr;
}
inline const ::KWMsg::CommunityInfo& AckSearchCommunity::_internal_community_info() const {
  const ::KWMsg::CommunityInfo* p = community_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::CommunityInfo&>(
      ::KWMsg::_CommunityInfo_default_instance_);
}
inline const ::KWMsg::CommunityInfo& AckSearchCommunity::community_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSearchCommunity.community_info)
  return _internal_community_info();
}
inline void AckSearchCommunity::unsafe_arena_set_allocated_community_info(
    ::KWMsg::CommunityInfo* community_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(community_info_);
  }
  community_info_ = community_info;
  if (community_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckSearchCommunity.community_info)
}
inline ::KWMsg::CommunityInfo* AckSearchCommunity::release_community_info() {
  
  ::KWMsg::CommunityInfo* temp = community_info_;
  community_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::CommunityInfo* AckSearchCommunity::unsafe_arena_release_community_info() {
  // @@protoc_insertion_point(field_release:KWMsg.AckSearchCommunity.community_info)
  
  ::KWMsg::CommunityInfo* temp = community_info_;
  community_info_ = nullptr;
  return temp;
}
inline ::KWMsg::CommunityInfo* AckSearchCommunity::_internal_mutable_community_info() {
  
  if (community_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::CommunityInfo>(GetArenaForAllocation());
    community_info_ = p;
  }
  return community_info_;
}
inline ::KWMsg::CommunityInfo* AckSearchCommunity::mutable_community_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSearchCommunity.community_info)
  return _internal_mutable_community_info();
}
inline void AckSearchCommunity::set_allocated_community_info(::KWMsg::CommunityInfo* community_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete community_info_;
  }
  if (community_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::CommunityInfo>::GetOwningArena(community_info);
    if (message_arena != submessage_arena) {
      community_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, community_info, submessage_arena);
    }
    
  } else {
    
  }
  community_info_ = community_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckSearchCommunity.community_info)
}

// -------------------------------------------------------------------

// ReqQueryCommunity

// .KWMsg.Ident player_id = 1;
inline bool ReqQueryCommunity::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqQueryCommunity::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqQueryCommunity::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqQueryCommunity::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqQueryCommunity.player_id)
  return _internal_player_id();
}
inline void ReqQueryCommunity::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqQueryCommunity.player_id)
}
inline ::KWMsg::Ident* ReqQueryCommunity::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqQueryCommunity::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqQueryCommunity.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqQueryCommunity::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqQueryCommunity::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqQueryCommunity.player_id)
  return _internal_mutable_player_id();
}
inline void ReqQueryCommunity::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqQueryCommunity.player_id)
}

// int32 community_id = 2;
inline void ReqQueryCommunity::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqQueryCommunity::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqQueryCommunity::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqQueryCommunity.community_id)
  return _internal_community_id();
}
inline void ReqQueryCommunity::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void ReqQueryCommunity::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqQueryCommunity.community_id)
}

// -------------------------------------------------------------------

// AckQueryCommunity

// .KWMsg.EGameEventCode event_code = 1;
inline void AckQueryCommunity::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckQueryCommunity::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckQueryCommunity::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQueryCommunity.event_code)
  return _internal_event_code();
}
inline void AckQueryCommunity::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckQueryCommunity::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckQueryCommunity.event_code)
}

// .KWMsg.CommunityInfo community_info = 2;
inline bool AckQueryCommunity::_internal_has_community_info() const {
  return this != internal_default_instance() && community_info_ != nullptr;
}
inline bool AckQueryCommunity::has_community_info() const {
  return _internal_has_community_info();
}
inline void AckQueryCommunity::clear_community_info() {
  if (GetArenaForAllocation() == nullptr && community_info_ != nullptr) {
    delete community_info_;
  }
  community_info_ = nullptr;
}
inline const ::KWMsg::CommunityInfo& AckQueryCommunity::_internal_community_info() const {
  const ::KWMsg::CommunityInfo* p = community_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::CommunityInfo&>(
      ::KWMsg::_CommunityInfo_default_instance_);
}
inline const ::KWMsg::CommunityInfo& AckQueryCommunity::community_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQueryCommunity.community_info)
  return _internal_community_info();
}
inline void AckQueryCommunity::unsafe_arena_set_allocated_community_info(
    ::KWMsg::CommunityInfo* community_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(community_info_);
  }
  community_info_ = community_info;
  if (community_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckQueryCommunity.community_info)
}
inline ::KWMsg::CommunityInfo* AckQueryCommunity::release_community_info() {
  
  ::KWMsg::CommunityInfo* temp = community_info_;
  community_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::CommunityInfo* AckQueryCommunity::unsafe_arena_release_community_info() {
  // @@protoc_insertion_point(field_release:KWMsg.AckQueryCommunity.community_info)
  
  ::KWMsg::CommunityInfo* temp = community_info_;
  community_info_ = nullptr;
  return temp;
}
inline ::KWMsg::CommunityInfo* AckQueryCommunity::_internal_mutable_community_info() {
  
  if (community_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::CommunityInfo>(GetArenaForAllocation());
    community_info_ = p;
  }
  return community_info_;
}
inline ::KWMsg::CommunityInfo* AckQueryCommunity::mutable_community_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckQueryCommunity.community_info)
  return _internal_mutable_community_info();
}
inline void AckQueryCommunity::set_allocated_community_info(::KWMsg::CommunityInfo* community_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete community_info_;
  }
  if (community_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::CommunityInfo>::GetOwningArena(community_info);
    if (message_arena != submessage_arena) {
      community_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, community_info, submessage_arena);
    }
    
  } else {
    
  }
  community_info_ = community_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckQueryCommunity.community_info)
}

// repeated .KWMsg.CommunityMemberInfo member_info_list = 3;
inline int AckQueryCommunity::_internal_member_info_list_size() const {
  return member_info_list_.size();
}
inline int AckQueryCommunity::member_info_list_size() const {
  return _internal_member_info_list_size();
}
inline void AckQueryCommunity::clear_member_info_list() {
  member_info_list_.Clear();
}
inline ::KWMsg::CommunityMemberInfo* AckQueryCommunity::mutable_member_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckQueryCommunity.member_info_list)
  return member_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityMemberInfo >*
AckQueryCommunity::mutable_member_info_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckQueryCommunity.member_info_list)
  return &member_info_list_;
}
inline const ::KWMsg::CommunityMemberInfo& AckQueryCommunity::_internal_member_info_list(int index) const {
  return member_info_list_.Get(index);
}
inline const ::KWMsg::CommunityMemberInfo& AckQueryCommunity::member_info_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQueryCommunity.member_info_list)
  return _internal_member_info_list(index);
}
inline ::KWMsg::CommunityMemberInfo* AckQueryCommunity::_internal_add_member_info_list() {
  return member_info_list_.Add();
}
inline ::KWMsg::CommunityMemberInfo* AckQueryCommunity::add_member_info_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckQueryCommunity.member_info_list)
  return _internal_add_member_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityMemberInfo >&
AckQueryCommunity::member_info_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckQueryCommunity.member_info_list)
  return member_info_list_;
}

// -------------------------------------------------------------------

// ReqSpecifiedCommunityPage

// .KWMsg.Ident player_id = 1;
inline bool ReqSpecifiedCommunityPage::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqSpecifiedCommunityPage::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqSpecifiedCommunityPage::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqSpecifiedCommunityPage::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSpecifiedCommunityPage.player_id)
  return _internal_player_id();
}
inline void ReqSpecifiedCommunityPage::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqSpecifiedCommunityPage.player_id)
}
inline ::KWMsg::Ident* ReqSpecifiedCommunityPage::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqSpecifiedCommunityPage::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSpecifiedCommunityPage.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqSpecifiedCommunityPage::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqSpecifiedCommunityPage::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSpecifiedCommunityPage.player_id)
  return _internal_mutable_player_id();
}
inline void ReqSpecifiedCommunityPage::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSpecifiedCommunityPage.player_id)
}

// int32 sort_type = 2;
inline void ReqSpecifiedCommunityPage::clear_sort_type() {
  sort_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSpecifiedCommunityPage::_internal_sort_type() const {
  return sort_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSpecifiedCommunityPage::sort_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSpecifiedCommunityPage.sort_type)
  return _internal_sort_type();
}
inline void ReqSpecifiedCommunityPage::_internal_set_sort_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sort_type_ = value;
}
inline void ReqSpecifiedCommunityPage::set_sort_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sort_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqSpecifiedCommunityPage.sort_type)
}

// int32 show_only_satisfy_rules = 3;
inline void ReqSpecifiedCommunityPage::clear_show_only_satisfy_rules() {
  show_only_satisfy_rules_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSpecifiedCommunityPage::_internal_show_only_satisfy_rules() const {
  return show_only_satisfy_rules_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSpecifiedCommunityPage::show_only_satisfy_rules() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSpecifiedCommunityPage.show_only_satisfy_rules)
  return _internal_show_only_satisfy_rules();
}
inline void ReqSpecifiedCommunityPage::_internal_set_show_only_satisfy_rules(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  show_only_satisfy_rules_ = value;
}
inline void ReqSpecifiedCommunityPage::set_show_only_satisfy_rules(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_show_only_satisfy_rules(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqSpecifiedCommunityPage.show_only_satisfy_rules)
}

// int32 hide_member_is_full = 4;
inline void ReqSpecifiedCommunityPage::clear_hide_member_is_full() {
  hide_member_is_full_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSpecifiedCommunityPage::_internal_hide_member_is_full() const {
  return hide_member_is_full_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSpecifiedCommunityPage::hide_member_is_full() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSpecifiedCommunityPage.hide_member_is_full)
  return _internal_hide_member_is_full();
}
inline void ReqSpecifiedCommunityPage::_internal_set_hide_member_is_full(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hide_member_is_full_ = value;
}
inline void ReqSpecifiedCommunityPage::set_hide_member_is_full(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hide_member_is_full(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqSpecifiedCommunityPage.hide_member_is_full)
}

// int32 page_no = 5;
inline void ReqSpecifiedCommunityPage::clear_page_no() {
  page_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSpecifiedCommunityPage::_internal_page_no() const {
  return page_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSpecifiedCommunityPage::page_no() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSpecifiedCommunityPage.page_no)
  return _internal_page_no();
}
inline void ReqSpecifiedCommunityPage::_internal_set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  page_no_ = value;
}
inline void ReqSpecifiedCommunityPage::set_page_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_page_no(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqSpecifiedCommunityPage.page_no)
}

// -------------------------------------------------------------------

// AckSpecifiedCommunityPage

// .KWMsg.EGameEventCode event_code = 1;
inline void AckSpecifiedCommunityPage::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckSpecifiedCommunityPage::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckSpecifiedCommunityPage::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSpecifiedCommunityPage.event_code)
  return _internal_event_code();
}
inline void AckSpecifiedCommunityPage::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckSpecifiedCommunityPage::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSpecifiedCommunityPage.event_code)
}

// int32 cur_page_no = 2;
inline void AckSpecifiedCommunityPage::clear_cur_page_no() {
  cur_page_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckSpecifiedCommunityPage::_internal_cur_page_no() const {
  return cur_page_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckSpecifiedCommunityPage::cur_page_no() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSpecifiedCommunityPage.cur_page_no)
  return _internal_cur_page_no();
}
inline void AckSpecifiedCommunityPage::_internal_set_cur_page_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cur_page_no_ = value;
}
inline void AckSpecifiedCommunityPage::set_cur_page_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cur_page_no(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSpecifiedCommunityPage.cur_page_no)
}

// int32 total_page_no = 3;
inline void AckSpecifiedCommunityPage::clear_total_page_no() {
  total_page_no_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckSpecifiedCommunityPage::_internal_total_page_no() const {
  return total_page_no_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckSpecifiedCommunityPage::total_page_no() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSpecifiedCommunityPage.total_page_no)
  return _internal_total_page_no();
}
inline void AckSpecifiedCommunityPage::_internal_set_total_page_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  total_page_no_ = value;
}
inline void AckSpecifiedCommunityPage::set_total_page_no(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_total_page_no(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSpecifiedCommunityPage.total_page_no)
}

// repeated .KWMsg.CommunityInfo community_info_list = 4;
inline int AckSpecifiedCommunityPage::_internal_community_info_list_size() const {
  return community_info_list_.size();
}
inline int AckSpecifiedCommunityPage::community_info_list_size() const {
  return _internal_community_info_list_size();
}
inline void AckSpecifiedCommunityPage::clear_community_info_list() {
  community_info_list_.Clear();
}
inline ::KWMsg::CommunityInfo* AckSpecifiedCommunityPage::mutable_community_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSpecifiedCommunityPage.community_info_list)
  return community_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityInfo >*
AckSpecifiedCommunityPage::mutable_community_info_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckSpecifiedCommunityPage.community_info_list)
  return &community_info_list_;
}
inline const ::KWMsg::CommunityInfo& AckSpecifiedCommunityPage::_internal_community_info_list(int index) const {
  return community_info_list_.Get(index);
}
inline const ::KWMsg::CommunityInfo& AckSpecifiedCommunityPage::community_info_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSpecifiedCommunityPage.community_info_list)
  return _internal_community_info_list(index);
}
inline ::KWMsg::CommunityInfo* AckSpecifiedCommunityPage::_internal_add_community_info_list() {
  return community_info_list_.Add();
}
inline ::KWMsg::CommunityInfo* AckSpecifiedCommunityPage::add_community_info_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckSpecifiedCommunityPage.community_info_list)
  return _internal_add_community_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::CommunityInfo >&
AckSpecifiedCommunityPage::community_info_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckSpecifiedCommunityPage.community_info_list)
  return community_info_list_;
}

// -------------------------------------------------------------------

// ReqQuickJoinCommunity

// .KWMsg.Ident player_id = 1;
inline bool ReqQuickJoinCommunity::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqQuickJoinCommunity::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqQuickJoinCommunity::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqQuickJoinCommunity::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqQuickJoinCommunity.player_id)
  return _internal_player_id();
}
inline void ReqQuickJoinCommunity::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqQuickJoinCommunity.player_id)
}
inline ::KWMsg::Ident* ReqQuickJoinCommunity::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqQuickJoinCommunity::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqQuickJoinCommunity.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqQuickJoinCommunity::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqQuickJoinCommunity::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqQuickJoinCommunity.player_id)
  return _internal_mutable_player_id();
}
inline void ReqQuickJoinCommunity::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqQuickJoinCommunity.player_id)
}

// -------------------------------------------------------------------

// AckQuickJoinCommunity

// .KWMsg.EGameEventCode event_code = 1;
inline void AckQuickJoinCommunity::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckQuickJoinCommunity::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckQuickJoinCommunity::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQuickJoinCommunity.event_code)
  return _internal_event_code();
}
inline void AckQuickJoinCommunity::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckQuickJoinCommunity::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckQuickJoinCommunity.event_code)
}

// int32 community_id = 2;
inline void AckQuickJoinCommunity::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckQuickJoinCommunity::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckQuickJoinCommunity::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQuickJoinCommunity.community_id)
  return _internal_community_id();
}
inline void AckQuickJoinCommunity::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void AckQuickJoinCommunity::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckQuickJoinCommunity.community_id)
}

// .KWMsg.ECommunityMemberPosition position = 3;
inline void AckQuickJoinCommunity::clear_position() {
  position_ = 0;
}
inline ::KWMsg::ECommunityMemberPosition AckQuickJoinCommunity::_internal_position() const {
  return static_cast< ::KWMsg::ECommunityMemberPosition >(position_);
}
inline ::KWMsg::ECommunityMemberPosition AckQuickJoinCommunity::position() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQuickJoinCommunity.position)
  return _internal_position();
}
inline void AckQuickJoinCommunity::_internal_set_position(::KWMsg::ECommunityMemberPosition value) {
  
  position_ = value;
}
inline void AckQuickJoinCommunity::set_position(::KWMsg::ECommunityMemberPosition value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckQuickJoinCommunity.position)
}

// bytes community_chat_channel_id = 4;
inline void AckQuickJoinCommunity::clear_community_chat_channel_id() {
  community_chat_channel_id_.ClearToEmpty();
}
inline const std::string& AckQuickJoinCommunity::community_chat_channel_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQuickJoinCommunity.community_chat_channel_id)
  return _internal_community_chat_channel_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckQuickJoinCommunity::set_community_chat_channel_id(ArgT0&& arg0, ArgT... args) {
 
 community_chat_channel_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckQuickJoinCommunity.community_chat_channel_id)
}
inline std::string* AckQuickJoinCommunity::mutable_community_chat_channel_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckQuickJoinCommunity.community_chat_channel_id)
  return _internal_mutable_community_chat_channel_id();
}
inline const std::string& AckQuickJoinCommunity::_internal_community_chat_channel_id() const {
  return community_chat_channel_id_.Get();
}
inline void AckQuickJoinCommunity::_internal_set_community_chat_channel_id(const std::string& value) {
  
  community_chat_channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckQuickJoinCommunity::_internal_mutable_community_chat_channel_id() {
  
  return community_chat_channel_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckQuickJoinCommunity::release_community_chat_channel_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckQuickJoinCommunity.community_chat_channel_id)
  return community_chat_channel_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckQuickJoinCommunity::set_allocated_community_chat_channel_id(std::string* community_chat_channel_id) {
  if (community_chat_channel_id != nullptr) {
    
  } else {
    
  }
  community_chat_channel_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_chat_channel_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckQuickJoinCommunity.community_chat_channel_id)
}

// -------------------------------------------------------------------

// ReqApplyJoinCommunity

// .KWMsg.Ident player_id = 1;
inline bool ReqApplyJoinCommunity::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqApplyJoinCommunity::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqApplyJoinCommunity::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqApplyJoinCommunity::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqApplyJoinCommunity.player_id)
  return _internal_player_id();
}
inline void ReqApplyJoinCommunity::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqApplyJoinCommunity.player_id)
}
inline ::KWMsg::Ident* ReqApplyJoinCommunity::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqApplyJoinCommunity::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqApplyJoinCommunity.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqApplyJoinCommunity::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqApplyJoinCommunity::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqApplyJoinCommunity.player_id)
  return _internal_mutable_player_id();
}
inline void ReqApplyJoinCommunity::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqApplyJoinCommunity.player_id)
}

// int32 community_id = 2;
inline void ReqApplyJoinCommunity::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqApplyJoinCommunity::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqApplyJoinCommunity::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqApplyJoinCommunity.community_id)
  return _internal_community_id();
}
inline void ReqApplyJoinCommunity::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void ReqApplyJoinCommunity::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqApplyJoinCommunity.community_id)
}

// -------------------------------------------------------------------

// AckApplyJoinCommunity

// .KWMsg.EGameEventCode event_code = 1;
inline void AckApplyJoinCommunity::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckApplyJoinCommunity::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckApplyJoinCommunity::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckApplyJoinCommunity.event_code)
  return _internal_event_code();
}
inline void AckApplyJoinCommunity::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckApplyJoinCommunity::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckApplyJoinCommunity.event_code)
}

// int32 community_id = 2;
inline void AckApplyJoinCommunity::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckApplyJoinCommunity::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckApplyJoinCommunity::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckApplyJoinCommunity.community_id)
  return _internal_community_id();
}
inline void AckApplyJoinCommunity::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void AckApplyJoinCommunity::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckApplyJoinCommunity.community_id)
}

// .KWMsg.ECommunityMemberPosition position = 3;
inline void AckApplyJoinCommunity::clear_position() {
  position_ = 0;
}
inline ::KWMsg::ECommunityMemberPosition AckApplyJoinCommunity::_internal_position() const {
  return static_cast< ::KWMsg::ECommunityMemberPosition >(position_);
}
inline ::KWMsg::ECommunityMemberPosition AckApplyJoinCommunity::position() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckApplyJoinCommunity.position)
  return _internal_position();
}
inline void AckApplyJoinCommunity::_internal_set_position(::KWMsg::ECommunityMemberPosition value) {
  
  position_ = value;
}
inline void AckApplyJoinCommunity::set_position(::KWMsg::ECommunityMemberPosition value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckApplyJoinCommunity.position)
}

// bytes community_chat_channel_id = 4;
inline void AckApplyJoinCommunity::clear_community_chat_channel_id() {
  community_chat_channel_id_.ClearToEmpty();
}
inline const std::string& AckApplyJoinCommunity::community_chat_channel_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckApplyJoinCommunity.community_chat_channel_id)
  return _internal_community_chat_channel_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckApplyJoinCommunity::set_community_chat_channel_id(ArgT0&& arg0, ArgT... args) {
 
 community_chat_channel_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckApplyJoinCommunity.community_chat_channel_id)
}
inline std::string* AckApplyJoinCommunity::mutable_community_chat_channel_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckApplyJoinCommunity.community_chat_channel_id)
  return _internal_mutable_community_chat_channel_id();
}
inline const std::string& AckApplyJoinCommunity::_internal_community_chat_channel_id() const {
  return community_chat_channel_id_.Get();
}
inline void AckApplyJoinCommunity::_internal_set_community_chat_channel_id(const std::string& value) {
  
  community_chat_channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckApplyJoinCommunity::_internal_mutable_community_chat_channel_id() {
  
  return community_chat_channel_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckApplyJoinCommunity::release_community_chat_channel_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckApplyJoinCommunity.community_chat_channel_id)
  return community_chat_channel_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckApplyJoinCommunity::set_allocated_community_chat_channel_id(std::string* community_chat_channel_id) {
  if (community_chat_channel_id != nullptr) {
    
  } else {
    
  }
  community_chat_channel_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_chat_channel_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckApplyJoinCommunity.community_chat_channel_id)
}

// -------------------------------------------------------------------

// ReqCancelJoinCommunity

// .KWMsg.Ident player_id = 1;
inline bool ReqCancelJoinCommunity::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCancelJoinCommunity::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCancelJoinCommunity::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCancelJoinCommunity::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCancelJoinCommunity.player_id)
  return _internal_player_id();
}
inline void ReqCancelJoinCommunity::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCancelJoinCommunity.player_id)
}
inline ::KWMsg::Ident* ReqCancelJoinCommunity::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCancelJoinCommunity::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCancelJoinCommunity.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCancelJoinCommunity::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCancelJoinCommunity::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCancelJoinCommunity.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCancelJoinCommunity::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCancelJoinCommunity.player_id)
}

// int32 community_id = 2;
inline void ReqCancelJoinCommunity::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCancelJoinCommunity::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCancelJoinCommunity::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCancelJoinCommunity.community_id)
  return _internal_community_id();
}
inline void ReqCancelJoinCommunity::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void ReqCancelJoinCommunity::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCancelJoinCommunity.community_id)
}

// -------------------------------------------------------------------

// AckCancelJoinCommunity

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCancelJoinCommunity::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCancelJoinCommunity::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCancelJoinCommunity::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCancelJoinCommunity.event_code)
  return _internal_event_code();
}
inline void AckCancelJoinCommunity::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCancelJoinCommunity::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCancelJoinCommunity.event_code)
}

// -------------------------------------------------------------------

// ReqAppliedCommunityList

// .KWMsg.Ident player_id = 1;
inline bool ReqAppliedCommunityList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqAppliedCommunityList::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqAppliedCommunityList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqAppliedCommunityList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAppliedCommunityList.player_id)
  return _internal_player_id();
}
inline void ReqAppliedCommunityList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqAppliedCommunityList.player_id)
}
inline ::KWMsg::Ident* ReqAppliedCommunityList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqAppliedCommunityList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAppliedCommunityList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqAppliedCommunityList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqAppliedCommunityList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAppliedCommunityList.player_id)
  return _internal_mutable_player_id();
}
inline void ReqAppliedCommunityList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAppliedCommunityList.player_id)
}

// -------------------------------------------------------------------

// AckAppliedCommunityList

// .KWMsg.EGameEventCode event_code = 1;
inline void AckAppliedCommunityList::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckAppliedCommunityList::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckAppliedCommunityList::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckAppliedCommunityList.event_code)
  return _internal_event_code();
}
inline void AckAppliedCommunityList::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckAppliedCommunityList::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckAppliedCommunityList.event_code)
}

// repeated .KWMsg.AppliedCommunityInfo applied_community_info_list = 2;
inline int AckAppliedCommunityList::_internal_applied_community_info_list_size() const {
  return applied_community_info_list_.size();
}
inline int AckAppliedCommunityList::applied_community_info_list_size() const {
  return _internal_applied_community_info_list_size();
}
inline void AckAppliedCommunityList::clear_applied_community_info_list() {
  applied_community_info_list_.Clear();
}
inline ::KWMsg::AppliedCommunityInfo* AckAppliedCommunityList::mutable_applied_community_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckAppliedCommunityList.applied_community_info_list)
  return applied_community_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedCommunityInfo >*
AckAppliedCommunityList::mutable_applied_community_info_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckAppliedCommunityList.applied_community_info_list)
  return &applied_community_info_list_;
}
inline const ::KWMsg::AppliedCommunityInfo& AckAppliedCommunityList::_internal_applied_community_info_list(int index) const {
  return applied_community_info_list_.Get(index);
}
inline const ::KWMsg::AppliedCommunityInfo& AckAppliedCommunityList::applied_community_info_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckAppliedCommunityList.applied_community_info_list)
  return _internal_applied_community_info_list(index);
}
inline ::KWMsg::AppliedCommunityInfo* AckAppliedCommunityList::_internal_add_applied_community_info_list() {
  return applied_community_info_list_.Add();
}
inline ::KWMsg::AppliedCommunityInfo* AckAppliedCommunityList::add_applied_community_info_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckAppliedCommunityList.applied_community_info_list)
  return _internal_add_applied_community_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedCommunityInfo >&
AckAppliedCommunityList::applied_community_info_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckAppliedCommunityList.applied_community_info_list)
  return applied_community_info_list_;
}

// -------------------------------------------------------------------

// ReqModifyNameAndDeclaration

// .KWMsg.Ident player_id = 1;
inline bool ReqModifyNameAndDeclaration::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqModifyNameAndDeclaration::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqModifyNameAndDeclaration::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqModifyNameAndDeclaration::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqModifyNameAndDeclaration.player_id)
  return _internal_player_id();
}
inline void ReqModifyNameAndDeclaration::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqModifyNameAndDeclaration.player_id)
}
inline ::KWMsg::Ident* ReqModifyNameAndDeclaration::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqModifyNameAndDeclaration::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqModifyNameAndDeclaration.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqModifyNameAndDeclaration::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqModifyNameAndDeclaration::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqModifyNameAndDeclaration.player_id)
  return _internal_mutable_player_id();
}
inline void ReqModifyNameAndDeclaration::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqModifyNameAndDeclaration.player_id)
}

// int32 community_id = 2;
inline void ReqModifyNameAndDeclaration::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqModifyNameAndDeclaration::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqModifyNameAndDeclaration::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqModifyNameAndDeclaration.community_id)
  return _internal_community_id();
}
inline void ReqModifyNameAndDeclaration::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void ReqModifyNameAndDeclaration::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqModifyNameAndDeclaration.community_id)
}

// bytes community_name = 3;
inline void ReqModifyNameAndDeclaration::clear_community_name() {
  community_name_.ClearToEmpty();
}
inline const std::string& ReqModifyNameAndDeclaration::community_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqModifyNameAndDeclaration.community_name)
  return _internal_community_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqModifyNameAndDeclaration::set_community_name(ArgT0&& arg0, ArgT... args) {
 
 community_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqModifyNameAndDeclaration.community_name)
}
inline std::string* ReqModifyNameAndDeclaration::mutable_community_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqModifyNameAndDeclaration.community_name)
  return _internal_mutable_community_name();
}
inline const std::string& ReqModifyNameAndDeclaration::_internal_community_name() const {
  return community_name_.Get();
}
inline void ReqModifyNameAndDeclaration::_internal_set_community_name(const std::string& value) {
  
  community_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqModifyNameAndDeclaration::_internal_mutable_community_name() {
  
  return community_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqModifyNameAndDeclaration::release_community_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqModifyNameAndDeclaration.community_name)
  return community_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqModifyNameAndDeclaration::set_allocated_community_name(std::string* community_name) {
  if (community_name != nullptr) {
    
  } else {
    
  }
  community_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqModifyNameAndDeclaration.community_name)
}

// bytes community_declaration = 4;
inline void ReqModifyNameAndDeclaration::clear_community_declaration() {
  community_declaration_.ClearToEmpty();
}
inline const std::string& ReqModifyNameAndDeclaration::community_declaration() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqModifyNameAndDeclaration.community_declaration)
  return _internal_community_declaration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqModifyNameAndDeclaration::set_community_declaration(ArgT0&& arg0, ArgT... args) {
 
 community_declaration_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqModifyNameAndDeclaration.community_declaration)
}
inline std::string* ReqModifyNameAndDeclaration::mutable_community_declaration() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqModifyNameAndDeclaration.community_declaration)
  return _internal_mutable_community_declaration();
}
inline const std::string& ReqModifyNameAndDeclaration::_internal_community_declaration() const {
  return community_declaration_.Get();
}
inline void ReqModifyNameAndDeclaration::_internal_set_community_declaration(const std::string& value) {
  
  community_declaration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqModifyNameAndDeclaration::_internal_mutable_community_declaration() {
  
  return community_declaration_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqModifyNameAndDeclaration::release_community_declaration() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqModifyNameAndDeclaration.community_declaration)
  return community_declaration_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqModifyNameAndDeclaration::set_allocated_community_declaration(std::string* community_declaration) {
  if (community_declaration != nullptr) {
    
  } else {
    
  }
  community_declaration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_declaration,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqModifyNameAndDeclaration.community_declaration)
}

// -------------------------------------------------------------------

// AckModifyNameAndDeclaration

// .KWMsg.EGameEventCode event_code = 1;
inline void AckModifyNameAndDeclaration::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckModifyNameAndDeclaration::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckModifyNameAndDeclaration::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckModifyNameAndDeclaration.event_code)
  return _internal_event_code();
}
inline void AckModifyNameAndDeclaration::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckModifyNameAndDeclaration::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckModifyNameAndDeclaration.event_code)
}

// bytes community_name = 2;
inline void AckModifyNameAndDeclaration::clear_community_name() {
  community_name_.ClearToEmpty();
}
inline const std::string& AckModifyNameAndDeclaration::community_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckModifyNameAndDeclaration.community_name)
  return _internal_community_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckModifyNameAndDeclaration::set_community_name(ArgT0&& arg0, ArgT... args) {
 
 community_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckModifyNameAndDeclaration.community_name)
}
inline std::string* AckModifyNameAndDeclaration::mutable_community_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckModifyNameAndDeclaration.community_name)
  return _internal_mutable_community_name();
}
inline const std::string& AckModifyNameAndDeclaration::_internal_community_name() const {
  return community_name_.Get();
}
inline void AckModifyNameAndDeclaration::_internal_set_community_name(const std::string& value) {
  
  community_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckModifyNameAndDeclaration::_internal_mutable_community_name() {
  
  return community_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckModifyNameAndDeclaration::release_community_name() {
  // @@protoc_insertion_point(field_release:KWMsg.AckModifyNameAndDeclaration.community_name)
  return community_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckModifyNameAndDeclaration::set_allocated_community_name(std::string* community_name) {
  if (community_name != nullptr) {
    
  } else {
    
  }
  community_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckModifyNameAndDeclaration.community_name)
}

// bytes community_declaration = 3;
inline void AckModifyNameAndDeclaration::clear_community_declaration() {
  community_declaration_.ClearToEmpty();
}
inline const std::string& AckModifyNameAndDeclaration::community_declaration() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckModifyNameAndDeclaration.community_declaration)
  return _internal_community_declaration();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckModifyNameAndDeclaration::set_community_declaration(ArgT0&& arg0, ArgT... args) {
 
 community_declaration_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckModifyNameAndDeclaration.community_declaration)
}
inline std::string* AckModifyNameAndDeclaration::mutable_community_declaration() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckModifyNameAndDeclaration.community_declaration)
  return _internal_mutable_community_declaration();
}
inline const std::string& AckModifyNameAndDeclaration::_internal_community_declaration() const {
  return community_declaration_.Get();
}
inline void AckModifyNameAndDeclaration::_internal_set_community_declaration(const std::string& value) {
  
  community_declaration_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckModifyNameAndDeclaration::_internal_mutable_community_declaration() {
  
  return community_declaration_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckModifyNameAndDeclaration::release_community_declaration() {
  // @@protoc_insertion_point(field_release:KWMsg.AckModifyNameAndDeclaration.community_declaration)
  return community_declaration_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckModifyNameAndDeclaration::set_allocated_community_declaration(std::string* community_declaration) {
  if (community_declaration != nullptr) {
    
  } else {
    
  }
  community_declaration_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_declaration,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckModifyNameAndDeclaration.community_declaration)
}

// -------------------------------------------------------------------

// ReqModifyFlagAndIcon

// .KWMsg.Ident player_id = 1;
inline bool ReqModifyFlagAndIcon::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqModifyFlagAndIcon::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqModifyFlagAndIcon::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqModifyFlagAndIcon::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqModifyFlagAndIcon.player_id)
  return _internal_player_id();
}
inline void ReqModifyFlagAndIcon::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqModifyFlagAndIcon.player_id)
}
inline ::KWMsg::Ident* ReqModifyFlagAndIcon::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqModifyFlagAndIcon::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqModifyFlagAndIcon.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqModifyFlagAndIcon::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqModifyFlagAndIcon::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqModifyFlagAndIcon.player_id)
  return _internal_mutable_player_id();
}
inline void ReqModifyFlagAndIcon::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqModifyFlagAndIcon.player_id)
}

// int32 community_id = 2;
inline void ReqModifyFlagAndIcon::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqModifyFlagAndIcon::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqModifyFlagAndIcon::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqModifyFlagAndIcon.community_id)
  return _internal_community_id();
}
inline void ReqModifyFlagAndIcon::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void ReqModifyFlagAndIcon::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqModifyFlagAndIcon.community_id)
}

// bytes community_flag = 3;
inline void ReqModifyFlagAndIcon::clear_community_flag() {
  community_flag_.ClearToEmpty();
}
inline const std::string& ReqModifyFlagAndIcon::community_flag() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqModifyFlagAndIcon.community_flag)
  return _internal_community_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqModifyFlagAndIcon::set_community_flag(ArgT0&& arg0, ArgT... args) {
 
 community_flag_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqModifyFlagAndIcon.community_flag)
}
inline std::string* ReqModifyFlagAndIcon::mutable_community_flag() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqModifyFlagAndIcon.community_flag)
  return _internal_mutable_community_flag();
}
inline const std::string& ReqModifyFlagAndIcon::_internal_community_flag() const {
  return community_flag_.Get();
}
inline void ReqModifyFlagAndIcon::_internal_set_community_flag(const std::string& value) {
  
  community_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqModifyFlagAndIcon::_internal_mutable_community_flag() {
  
  return community_flag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqModifyFlagAndIcon::release_community_flag() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqModifyFlagAndIcon.community_flag)
  return community_flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqModifyFlagAndIcon::set_allocated_community_flag(std::string* community_flag) {
  if (community_flag != nullptr) {
    
  } else {
    
  }
  community_flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_flag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqModifyFlagAndIcon.community_flag)
}

// bytes community_icon = 4;
inline void ReqModifyFlagAndIcon::clear_community_icon() {
  community_icon_.ClearToEmpty();
}
inline const std::string& ReqModifyFlagAndIcon::community_icon() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqModifyFlagAndIcon.community_icon)
  return _internal_community_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqModifyFlagAndIcon::set_community_icon(ArgT0&& arg0, ArgT... args) {
 
 community_icon_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqModifyFlagAndIcon.community_icon)
}
inline std::string* ReqModifyFlagAndIcon::mutable_community_icon() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqModifyFlagAndIcon.community_icon)
  return _internal_mutable_community_icon();
}
inline const std::string& ReqModifyFlagAndIcon::_internal_community_icon() const {
  return community_icon_.Get();
}
inline void ReqModifyFlagAndIcon::_internal_set_community_icon(const std::string& value) {
  
  community_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqModifyFlagAndIcon::_internal_mutable_community_icon() {
  
  return community_icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqModifyFlagAndIcon::release_community_icon() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqModifyFlagAndIcon.community_icon)
  return community_icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqModifyFlagAndIcon::set_allocated_community_icon(std::string* community_icon) {
  if (community_icon != nullptr) {
    
  } else {
    
  }
  community_icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_icon,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqModifyFlagAndIcon.community_icon)
}

// -------------------------------------------------------------------

// AckModifyFlagAndIcon

// .KWMsg.EGameEventCode event_code = 1;
inline void AckModifyFlagAndIcon::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckModifyFlagAndIcon::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckModifyFlagAndIcon::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckModifyFlagAndIcon.event_code)
  return _internal_event_code();
}
inline void AckModifyFlagAndIcon::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckModifyFlagAndIcon::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckModifyFlagAndIcon.event_code)
}

// bytes community_flag = 2;
inline void AckModifyFlagAndIcon::clear_community_flag() {
  community_flag_.ClearToEmpty();
}
inline const std::string& AckModifyFlagAndIcon::community_flag() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckModifyFlagAndIcon.community_flag)
  return _internal_community_flag();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckModifyFlagAndIcon::set_community_flag(ArgT0&& arg0, ArgT... args) {
 
 community_flag_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckModifyFlagAndIcon.community_flag)
}
inline std::string* AckModifyFlagAndIcon::mutable_community_flag() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckModifyFlagAndIcon.community_flag)
  return _internal_mutable_community_flag();
}
inline const std::string& AckModifyFlagAndIcon::_internal_community_flag() const {
  return community_flag_.Get();
}
inline void AckModifyFlagAndIcon::_internal_set_community_flag(const std::string& value) {
  
  community_flag_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckModifyFlagAndIcon::_internal_mutable_community_flag() {
  
  return community_flag_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckModifyFlagAndIcon::release_community_flag() {
  // @@protoc_insertion_point(field_release:KWMsg.AckModifyFlagAndIcon.community_flag)
  return community_flag_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckModifyFlagAndIcon::set_allocated_community_flag(std::string* community_flag) {
  if (community_flag != nullptr) {
    
  } else {
    
  }
  community_flag_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_flag,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckModifyFlagAndIcon.community_flag)
}

// bytes community_icon = 3;
inline void AckModifyFlagAndIcon::clear_community_icon() {
  community_icon_.ClearToEmpty();
}
inline const std::string& AckModifyFlagAndIcon::community_icon() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckModifyFlagAndIcon.community_icon)
  return _internal_community_icon();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckModifyFlagAndIcon::set_community_icon(ArgT0&& arg0, ArgT... args) {
 
 community_icon_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckModifyFlagAndIcon.community_icon)
}
inline std::string* AckModifyFlagAndIcon::mutable_community_icon() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckModifyFlagAndIcon.community_icon)
  return _internal_mutable_community_icon();
}
inline const std::string& AckModifyFlagAndIcon::_internal_community_icon() const {
  return community_icon_.Get();
}
inline void AckModifyFlagAndIcon::_internal_set_community_icon(const std::string& value) {
  
  community_icon_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckModifyFlagAndIcon::_internal_mutable_community_icon() {
  
  return community_icon_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckModifyFlagAndIcon::release_community_icon() {
  // @@protoc_insertion_point(field_release:KWMsg.AckModifyFlagAndIcon.community_icon)
  return community_icon_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckModifyFlagAndIcon::set_allocated_community_icon(std::string* community_icon) {
  if (community_icon != nullptr) {
    
  } else {
    
  }
  community_icon_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_icon,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckModifyFlagAndIcon.community_icon)
}

// -------------------------------------------------------------------

// ReqModifyApprovedRules

// .KWMsg.Ident player_id = 1;
inline bool ReqModifyApprovedRules::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqModifyApprovedRules::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqModifyApprovedRules::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqModifyApprovedRules::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqModifyApprovedRules.player_id)
  return _internal_player_id();
}
inline void ReqModifyApprovedRules::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqModifyApprovedRules.player_id)
}
inline ::KWMsg::Ident* ReqModifyApprovedRules::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqModifyApprovedRules::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqModifyApprovedRules.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqModifyApprovedRules::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqModifyApprovedRules::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqModifyApprovedRules.player_id)
  return _internal_mutable_player_id();
}
inline void ReqModifyApprovedRules::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqModifyApprovedRules.player_id)
}

// int32 community_id = 2;
inline void ReqModifyApprovedRules::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqModifyApprovedRules::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqModifyApprovedRules::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqModifyApprovedRules.community_id)
  return _internal_community_id();
}
inline void ReqModifyApprovedRules::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void ReqModifyApprovedRules::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqModifyApprovedRules.community_id)
}

// int32 community_approve_type = 3;
inline void ReqModifyApprovedRules::clear_community_approve_type() {
  community_approve_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqModifyApprovedRules::_internal_community_approve_type() const {
  return community_approve_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqModifyApprovedRules::community_approve_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqModifyApprovedRules.community_approve_type)
  return _internal_community_approve_type();
}
inline void ReqModifyApprovedRules::_internal_set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_approve_type_ = value;
}
inline void ReqModifyApprovedRules::set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_approve_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqModifyApprovedRules.community_approve_type)
}

// int32 level_restriction = 4;
inline void ReqModifyApprovedRules::clear_level_restriction() {
  level_restriction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqModifyApprovedRules::_internal_level_restriction() const {
  return level_restriction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqModifyApprovedRules::level_restriction() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqModifyApprovedRules.level_restriction)
  return _internal_level_restriction();
}
inline void ReqModifyApprovedRules::_internal_set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_restriction_ = value;
}
inline void ReqModifyApprovedRules::set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level_restriction(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqModifyApprovedRules.level_restriction)
}

// -------------------------------------------------------------------

// AckModifyApprovedRules

// .KWMsg.EGameEventCode event_code = 1;
inline void AckModifyApprovedRules::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckModifyApprovedRules::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckModifyApprovedRules::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckModifyApprovedRules.event_code)
  return _internal_event_code();
}
inline void AckModifyApprovedRules::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckModifyApprovedRules::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckModifyApprovedRules.event_code)
}

// int32 community_approve_type = 2;
inline void AckModifyApprovedRules::clear_community_approve_type() {
  community_approve_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckModifyApprovedRules::_internal_community_approve_type() const {
  return community_approve_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckModifyApprovedRules::community_approve_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckModifyApprovedRules.community_approve_type)
  return _internal_community_approve_type();
}
inline void AckModifyApprovedRules::_internal_set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_approve_type_ = value;
}
inline void AckModifyApprovedRules::set_community_approve_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_approve_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckModifyApprovedRules.community_approve_type)
}

// int32 level_restriction = 3;
inline void AckModifyApprovedRules::clear_level_restriction() {
  level_restriction_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckModifyApprovedRules::_internal_level_restriction() const {
  return level_restriction_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckModifyApprovedRules::level_restriction() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckModifyApprovedRules.level_restriction)
  return _internal_level_restriction();
}
inline void AckModifyApprovedRules::_internal_set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_restriction_ = value;
}
inline void AckModifyApprovedRules::set_level_restriction(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level_restriction(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckModifyApprovedRules.level_restriction)
}

// -------------------------------------------------------------------

// ReqPromotionOrDemotionManager

// .KWMsg.Ident player_id = 1;
inline bool ReqPromotionOrDemotionManager::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqPromotionOrDemotionManager::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqPromotionOrDemotionManager::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqPromotionOrDemotionManager::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqPromotionOrDemotionManager.player_id)
  return _internal_player_id();
}
inline void ReqPromotionOrDemotionManager::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqPromotionOrDemotionManager.player_id)
}
inline ::KWMsg::Ident* ReqPromotionOrDemotionManager::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqPromotionOrDemotionManager::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqPromotionOrDemotionManager.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqPromotionOrDemotionManager::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqPromotionOrDemotionManager::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqPromotionOrDemotionManager.player_id)
  return _internal_mutable_player_id();
}
inline void ReqPromotionOrDemotionManager::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqPromotionOrDemotionManager.player_id)
}

// .KWMsg.Ident target_id = 2;
inline bool ReqPromotionOrDemotionManager::_internal_has_target_id() const {
  return this != internal_default_instance() && target_id_ != nullptr;
}
inline bool ReqPromotionOrDemotionManager::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::KWMsg::Ident& ReqPromotionOrDemotionManager::_internal_target_id() const {
  const ::KWMsg::Ident* p = target_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqPromotionOrDemotionManager::target_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqPromotionOrDemotionManager.target_id)
  return _internal_target_id();
}
inline void ReqPromotionOrDemotionManager::unsafe_arena_set_allocated_target_id(
    ::KWMsg::Ident* target_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  target_id_ = target_id;
  if (target_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqPromotionOrDemotionManager.target_id)
}
inline ::KWMsg::Ident* ReqPromotionOrDemotionManager::release_target_id() {
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqPromotionOrDemotionManager::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqPromotionOrDemotionManager.target_id)
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqPromotionOrDemotionManager::_internal_mutable_target_id() {
  
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    target_id_ = p;
  }
  return target_id_;
}
inline ::KWMsg::Ident* ReqPromotionOrDemotionManager::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqPromotionOrDemotionManager.target_id)
  return _internal_mutable_target_id();
}
inline void ReqPromotionOrDemotionManager::set_allocated_target_id(::KWMsg::Ident* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id));
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqPromotionOrDemotionManager.target_id)
}

// int32 community_id = 3;
inline void ReqPromotionOrDemotionManager::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqPromotionOrDemotionManager::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqPromotionOrDemotionManager::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqPromotionOrDemotionManager.community_id)
  return _internal_community_id();
}
inline void ReqPromotionOrDemotionManager::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void ReqPromotionOrDemotionManager::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqPromotionOrDemotionManager.community_id)
}

// int32 opt_type = 4;
inline void ReqPromotionOrDemotionManager::clear_opt_type() {
  opt_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqPromotionOrDemotionManager::_internal_opt_type() const {
  return opt_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqPromotionOrDemotionManager::opt_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqPromotionOrDemotionManager.opt_type)
  return _internal_opt_type();
}
inline void ReqPromotionOrDemotionManager::_internal_set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opt_type_ = value;
}
inline void ReqPromotionOrDemotionManager::set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opt_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqPromotionOrDemotionManager.opt_type)
}

// -------------------------------------------------------------------

// AckPromotionOrDemotionManager

// .KWMsg.EGameEventCode event_code = 1;
inline void AckPromotionOrDemotionManager::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckPromotionOrDemotionManager::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckPromotionOrDemotionManager::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckPromotionOrDemotionManager.event_code)
  return _internal_event_code();
}
inline void AckPromotionOrDemotionManager::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckPromotionOrDemotionManager::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckPromotionOrDemotionManager.event_code)
}

// -------------------------------------------------------------------

// ReqAppliedPlayerList

// .KWMsg.Ident player_id = 1;
inline bool ReqAppliedPlayerList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqAppliedPlayerList::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqAppliedPlayerList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqAppliedPlayerList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAppliedPlayerList.player_id)
  return _internal_player_id();
}
inline void ReqAppliedPlayerList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqAppliedPlayerList.player_id)
}
inline ::KWMsg::Ident* ReqAppliedPlayerList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqAppliedPlayerList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAppliedPlayerList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqAppliedPlayerList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqAppliedPlayerList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAppliedPlayerList.player_id)
  return _internal_mutable_player_id();
}
inline void ReqAppliedPlayerList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAppliedPlayerList.player_id)
}

// int32 community_id = 2;
inline void ReqAppliedPlayerList::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAppliedPlayerList::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAppliedPlayerList::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAppliedPlayerList.community_id)
  return _internal_community_id();
}
inline void ReqAppliedPlayerList::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void ReqAppliedPlayerList::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqAppliedPlayerList.community_id)
}

// -------------------------------------------------------------------

// AckAppliedPlayerList

// .KWMsg.EGameEventCode event_code = 1;
inline void AckAppliedPlayerList::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckAppliedPlayerList::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckAppliedPlayerList::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckAppliedPlayerList.event_code)
  return _internal_event_code();
}
inline void AckAppliedPlayerList::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckAppliedPlayerList::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckAppliedPlayerList.event_code)
}

// repeated .KWMsg.AppliedPlayerInfo applied_player_info_list = 2;
inline int AckAppliedPlayerList::_internal_applied_player_info_list_size() const {
  return applied_player_info_list_.size();
}
inline int AckAppliedPlayerList::applied_player_info_list_size() const {
  return _internal_applied_player_info_list_size();
}
inline void AckAppliedPlayerList::clear_applied_player_info_list() {
  applied_player_info_list_.Clear();
}
inline ::KWMsg::AppliedPlayerInfo* AckAppliedPlayerList::mutable_applied_player_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckAppliedPlayerList.applied_player_info_list)
  return applied_player_info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedPlayerInfo >*
AckAppliedPlayerList::mutable_applied_player_info_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckAppliedPlayerList.applied_player_info_list)
  return &applied_player_info_list_;
}
inline const ::KWMsg::AppliedPlayerInfo& AckAppliedPlayerList::_internal_applied_player_info_list(int index) const {
  return applied_player_info_list_.Get(index);
}
inline const ::KWMsg::AppliedPlayerInfo& AckAppliedPlayerList::applied_player_info_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckAppliedPlayerList.applied_player_info_list)
  return _internal_applied_player_info_list(index);
}
inline ::KWMsg::AppliedPlayerInfo* AckAppliedPlayerList::_internal_add_applied_player_info_list() {
  return applied_player_info_list_.Add();
}
inline ::KWMsg::AppliedPlayerInfo* AckAppliedPlayerList::add_applied_player_info_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckAppliedPlayerList.applied_player_info_list)
  return _internal_add_applied_player_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedPlayerInfo >&
AckAppliedPlayerList::applied_player_info_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckAppliedPlayerList.applied_player_info_list)
  return applied_player_info_list_;
}

// -------------------------------------------------------------------

// ReqDealWithJoinCommunity

// .KWMsg.Ident player_id = 1;
inline bool ReqDealWithJoinCommunity::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqDealWithJoinCommunity::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqDealWithJoinCommunity::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqDealWithJoinCommunity::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDealWithJoinCommunity.player_id)
  return _internal_player_id();
}
inline void ReqDealWithJoinCommunity::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqDealWithJoinCommunity.player_id)
}
inline ::KWMsg::Ident* ReqDealWithJoinCommunity::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqDealWithJoinCommunity::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDealWithJoinCommunity.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqDealWithJoinCommunity::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqDealWithJoinCommunity::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDealWithJoinCommunity.player_id)
  return _internal_mutable_player_id();
}
inline void ReqDealWithJoinCommunity::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDealWithJoinCommunity.player_id)
}

// .KWMsg.Ident target_id = 2;
inline bool ReqDealWithJoinCommunity::_internal_has_target_id() const {
  return this != internal_default_instance() && target_id_ != nullptr;
}
inline bool ReqDealWithJoinCommunity::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::KWMsg::Ident& ReqDealWithJoinCommunity::_internal_target_id() const {
  const ::KWMsg::Ident* p = target_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqDealWithJoinCommunity::target_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDealWithJoinCommunity.target_id)
  return _internal_target_id();
}
inline void ReqDealWithJoinCommunity::unsafe_arena_set_allocated_target_id(
    ::KWMsg::Ident* target_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  target_id_ = target_id;
  if (target_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqDealWithJoinCommunity.target_id)
}
inline ::KWMsg::Ident* ReqDealWithJoinCommunity::release_target_id() {
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqDealWithJoinCommunity::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDealWithJoinCommunity.target_id)
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqDealWithJoinCommunity::_internal_mutable_target_id() {
  
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    target_id_ = p;
  }
  return target_id_;
}
inline ::KWMsg::Ident* ReqDealWithJoinCommunity::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDealWithJoinCommunity.target_id)
  return _internal_mutable_target_id();
}
inline void ReqDealWithJoinCommunity::set_allocated_target_id(::KWMsg::Ident* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id));
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDealWithJoinCommunity.target_id)
}

// int32 community_id = 3;
inline void ReqDealWithJoinCommunity::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDealWithJoinCommunity::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDealWithJoinCommunity::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDealWithJoinCommunity.community_id)
  return _internal_community_id();
}
inline void ReqDealWithJoinCommunity::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void ReqDealWithJoinCommunity::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqDealWithJoinCommunity.community_id)
}

// int32 opt_type = 4;
inline void ReqDealWithJoinCommunity::clear_opt_type() {
  opt_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDealWithJoinCommunity::_internal_opt_type() const {
  return opt_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDealWithJoinCommunity::opt_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDealWithJoinCommunity.opt_type)
  return _internal_opt_type();
}
inline void ReqDealWithJoinCommunity::_internal_set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opt_type_ = value;
}
inline void ReqDealWithJoinCommunity::set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opt_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqDealWithJoinCommunity.opt_type)
}

// -------------------------------------------------------------------

// AckDealWithJoinCommunity

// .KWMsg.EGameEventCode event_code = 1;
inline void AckDealWithJoinCommunity::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckDealWithJoinCommunity::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckDealWithJoinCommunity::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDealWithJoinCommunity.event_code)
  return _internal_event_code();
}
inline void AckDealWithJoinCommunity::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckDealWithJoinCommunity::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckDealWithJoinCommunity.event_code)
}

// -------------------------------------------------------------------

// ReqQuitCommunity

// .KWMsg.Ident player_id = 1;
inline bool ReqQuitCommunity::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqQuitCommunity::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqQuitCommunity::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqQuitCommunity::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqQuitCommunity.player_id)
  return _internal_player_id();
}
inline void ReqQuitCommunity::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqQuitCommunity.player_id)
}
inline ::KWMsg::Ident* ReqQuitCommunity::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqQuitCommunity::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqQuitCommunity.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqQuitCommunity::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqQuitCommunity::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqQuitCommunity.player_id)
  return _internal_mutable_player_id();
}
inline void ReqQuitCommunity::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqQuitCommunity.player_id)
}

// int32 community_id = 2;
inline void ReqQuitCommunity::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqQuitCommunity::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqQuitCommunity::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqQuitCommunity.community_id)
  return _internal_community_id();
}
inline void ReqQuitCommunity::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void ReqQuitCommunity::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqQuitCommunity.community_id)
}

// -------------------------------------------------------------------

// AckQuitCommunity

// .KWMsg.EGameEventCode event_code = 1;
inline void AckQuitCommunity::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckQuitCommunity::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckQuitCommunity::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQuitCommunity.event_code)
  return _internal_event_code();
}
inline void AckQuitCommunity::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckQuitCommunity::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckQuitCommunity.event_code)
}

// int32 community_id = 2;
inline void AckQuitCommunity::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckQuitCommunity::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckQuitCommunity::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQuitCommunity.community_id)
  return _internal_community_id();
}
inline void AckQuitCommunity::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void AckQuitCommunity::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckQuitCommunity.community_id)
}

// .KWMsg.ECommunityMemberPosition position = 3;
inline void AckQuitCommunity::clear_position() {
  position_ = 0;
}
inline ::KWMsg::ECommunityMemberPosition AckQuitCommunity::_internal_position() const {
  return static_cast< ::KWMsg::ECommunityMemberPosition >(position_);
}
inline ::KWMsg::ECommunityMemberPosition AckQuitCommunity::position() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQuitCommunity.position)
  return _internal_position();
}
inline void AckQuitCommunity::_internal_set_position(::KWMsg::ECommunityMemberPosition value) {
  
  position_ = value;
}
inline void AckQuitCommunity::set_position(::KWMsg::ECommunityMemberPosition value) {
  _internal_set_position(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckQuitCommunity.position)
}

// bytes community_chat_channel_id = 4;
inline void AckQuitCommunity::clear_community_chat_channel_id() {
  community_chat_channel_id_.ClearToEmpty();
}
inline const std::string& AckQuitCommunity::community_chat_channel_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQuitCommunity.community_chat_channel_id)
  return _internal_community_chat_channel_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckQuitCommunity::set_community_chat_channel_id(ArgT0&& arg0, ArgT... args) {
 
 community_chat_channel_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckQuitCommunity.community_chat_channel_id)
}
inline std::string* AckQuitCommunity::mutable_community_chat_channel_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckQuitCommunity.community_chat_channel_id)
  return _internal_mutable_community_chat_channel_id();
}
inline const std::string& AckQuitCommunity::_internal_community_chat_channel_id() const {
  return community_chat_channel_id_.Get();
}
inline void AckQuitCommunity::_internal_set_community_chat_channel_id(const std::string& value) {
  
  community_chat_channel_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckQuitCommunity::_internal_mutable_community_chat_channel_id() {
  
  return community_chat_channel_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckQuitCommunity::release_community_chat_channel_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckQuitCommunity.community_chat_channel_id)
  return community_chat_channel_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckQuitCommunity::set_allocated_community_chat_channel_id(std::string* community_chat_channel_id) {
  if (community_chat_channel_id != nullptr) {
    
  } else {
    
  }
  community_chat_channel_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_chat_channel_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckQuitCommunity.community_chat_channel_id)
}

// -------------------------------------------------------------------

// ReqGetOutOfMyCommunity

// .KWMsg.Ident player_id = 1;
inline bool ReqGetOutOfMyCommunity::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqGetOutOfMyCommunity::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqGetOutOfMyCommunity::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetOutOfMyCommunity::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetOutOfMyCommunity.player_id)
  return _internal_player_id();
}
inline void ReqGetOutOfMyCommunity::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetOutOfMyCommunity.player_id)
}
inline ::KWMsg::Ident* ReqGetOutOfMyCommunity::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetOutOfMyCommunity::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetOutOfMyCommunity.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetOutOfMyCommunity::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqGetOutOfMyCommunity::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetOutOfMyCommunity.player_id)
  return _internal_mutable_player_id();
}
inline void ReqGetOutOfMyCommunity::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetOutOfMyCommunity.player_id)
}

// .KWMsg.Ident target_id = 2;
inline bool ReqGetOutOfMyCommunity::_internal_has_target_id() const {
  return this != internal_default_instance() && target_id_ != nullptr;
}
inline bool ReqGetOutOfMyCommunity::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::KWMsg::Ident& ReqGetOutOfMyCommunity::_internal_target_id() const {
  const ::KWMsg::Ident* p = target_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetOutOfMyCommunity::target_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetOutOfMyCommunity.target_id)
  return _internal_target_id();
}
inline void ReqGetOutOfMyCommunity::unsafe_arena_set_allocated_target_id(
    ::KWMsg::Ident* target_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  target_id_ = target_id;
  if (target_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetOutOfMyCommunity.target_id)
}
inline ::KWMsg::Ident* ReqGetOutOfMyCommunity::release_target_id() {
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetOutOfMyCommunity::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetOutOfMyCommunity.target_id)
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetOutOfMyCommunity::_internal_mutable_target_id() {
  
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    target_id_ = p;
  }
  return target_id_;
}
inline ::KWMsg::Ident* ReqGetOutOfMyCommunity::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetOutOfMyCommunity.target_id)
  return _internal_mutable_target_id();
}
inline void ReqGetOutOfMyCommunity::set_allocated_target_id(::KWMsg::Ident* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id));
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetOutOfMyCommunity.target_id)
}

// int32 community_id = 3;
inline void ReqGetOutOfMyCommunity::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGetOutOfMyCommunity::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGetOutOfMyCommunity::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetOutOfMyCommunity.community_id)
  return _internal_community_id();
}
inline void ReqGetOutOfMyCommunity::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void ReqGetOutOfMyCommunity::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGetOutOfMyCommunity.community_id)
}

// -------------------------------------------------------------------

// AckGetOutOfMyCommunity

// .KWMsg.EGameEventCode event_code = 1;
inline void AckGetOutOfMyCommunity::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckGetOutOfMyCommunity::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckGetOutOfMyCommunity::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetOutOfMyCommunity.event_code)
  return _internal_event_code();
}
inline void AckGetOutOfMyCommunity::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckGetOutOfMyCommunity::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetOutOfMyCommunity.event_code)
}

// -------------------------------------------------------------------

// ReqCommunitySignIn

// .KWMsg.Ident player_id = 1;
inline bool ReqCommunitySignIn::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCommunitySignIn::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCommunitySignIn::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCommunitySignIn::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCommunitySignIn.player_id)
  return _internal_player_id();
}
inline void ReqCommunitySignIn::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCommunitySignIn.player_id)
}
inline ::KWMsg::Ident* ReqCommunitySignIn::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCommunitySignIn::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCommunitySignIn.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCommunitySignIn::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCommunitySignIn::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCommunitySignIn.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCommunitySignIn::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCommunitySignIn.player_id)
}

// int32 community_id = 2;
inline void ReqCommunitySignIn::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCommunitySignIn::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCommunitySignIn::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCommunitySignIn.community_id)
  return _internal_community_id();
}
inline void ReqCommunitySignIn::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void ReqCommunitySignIn::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCommunitySignIn.community_id)
}

// -------------------------------------------------------------------

// AckCommunitySignIn

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCommunitySignIn::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCommunitySignIn::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCommunitySignIn::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCommunitySignIn.event_code)
  return _internal_event_code();
}
inline void AckCommunitySignIn::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCommunitySignIn::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCommunitySignIn.event_code)
}

// repeated .KWMsg.RewardInfo reward_list = 2;
inline int AckCommunitySignIn::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int AckCommunitySignIn::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void AckCommunitySignIn::clear_reward_list() {
  reward_list_.Clear();
}
inline ::KWMsg::RewardInfo* AckCommunitySignIn::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCommunitySignIn.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
AckCommunitySignIn::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckCommunitySignIn.reward_list)
  return &reward_list_;
}
inline const ::KWMsg::RewardInfo& AckCommunitySignIn::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::KWMsg::RewardInfo& AckCommunitySignIn::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCommunitySignIn.reward_list)
  return _internal_reward_list(index);
}
inline ::KWMsg::RewardInfo* AckCommunitySignIn::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::KWMsg::RewardInfo* AckCommunitySignIn::add_reward_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckCommunitySignIn.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
AckCommunitySignIn::reward_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckCommunitySignIn.reward_list)
  return reward_list_;
}

// -------------------------------------------------------------------

// PlayerBaseInfo

// .KWMsg.Ident player_id = 1;
inline bool PlayerBaseInfo::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool PlayerBaseInfo::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& PlayerBaseInfo::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& PlayerBaseInfo::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerBaseInfo.player_id)
  return _internal_player_id();
}
inline void PlayerBaseInfo::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.PlayerBaseInfo.player_id)
}
inline ::KWMsg::Ident* PlayerBaseInfo::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* PlayerBaseInfo::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerBaseInfo.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* PlayerBaseInfo::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* PlayerBaseInfo::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerBaseInfo.player_id)
  return _internal_mutable_player_id();
}
inline void PlayerBaseInfo::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerBaseInfo.player_id)
}

// bytes name = 2;
inline void PlayerBaseInfo::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& PlayerBaseInfo::name() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerBaseInfo.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerBaseInfo::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerBaseInfo.name)
}
inline std::string* PlayerBaseInfo::mutable_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerBaseInfo.name)
  return _internal_mutable_name();
}
inline const std::string& PlayerBaseInfo::_internal_name() const {
  return name_.Get();
}
inline void PlayerBaseInfo::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerBaseInfo::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerBaseInfo::release_name() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerBaseInfo.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerBaseInfo::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerBaseInfo.name)
}

// bytes avatar_url = 3;
inline void PlayerBaseInfo::clear_avatar_url() {
  avatar_url_.ClearToEmpty();
}
inline const std::string& PlayerBaseInfo::avatar_url() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerBaseInfo.avatar_url)
  return _internal_avatar_url();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerBaseInfo::set_avatar_url(ArgT0&& arg0, ArgT... args) {
 
 avatar_url_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerBaseInfo.avatar_url)
}
inline std::string* PlayerBaseInfo::mutable_avatar_url() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerBaseInfo.avatar_url)
  return _internal_mutable_avatar_url();
}
inline const std::string& PlayerBaseInfo::_internal_avatar_url() const {
  return avatar_url_.Get();
}
inline void PlayerBaseInfo::_internal_set_avatar_url(const std::string& value) {
  
  avatar_url_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerBaseInfo::_internal_mutable_avatar_url() {
  
  return avatar_url_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerBaseInfo::release_avatar_url() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerBaseInfo.avatar_url)
  return avatar_url_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerBaseInfo::set_allocated_avatar_url(std::string* avatar_url) {
  if (avatar_url != nullptr) {
    
  } else {
    
  }
  avatar_url_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_url,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerBaseInfo.avatar_url)
}

// bytes avatar_frame = 4;
inline void PlayerBaseInfo::clear_avatar_frame() {
  avatar_frame_.ClearToEmpty();
}
inline const std::string& PlayerBaseInfo::avatar_frame() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerBaseInfo.avatar_frame)
  return _internal_avatar_frame();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerBaseInfo::set_avatar_frame(ArgT0&& arg0, ArgT... args) {
 
 avatar_frame_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerBaseInfo.avatar_frame)
}
inline std::string* PlayerBaseInfo::mutable_avatar_frame() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerBaseInfo.avatar_frame)
  return _internal_mutable_avatar_frame();
}
inline const std::string& PlayerBaseInfo::_internal_avatar_frame() const {
  return avatar_frame_.Get();
}
inline void PlayerBaseInfo::_internal_set_avatar_frame(const std::string& value) {
  
  avatar_frame_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerBaseInfo::_internal_mutable_avatar_frame() {
  
  return avatar_frame_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerBaseInfo::release_avatar_frame() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerBaseInfo.avatar_frame)
  return avatar_frame_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerBaseInfo::set_allocated_avatar_frame(std::string* avatar_frame) {
  if (avatar_frame != nullptr) {
    
  } else {
    
  }
  avatar_frame_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), avatar_frame,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerBaseInfo.avatar_frame)
}

// bytes title = 5;
inline void PlayerBaseInfo::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& PlayerBaseInfo::title() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerBaseInfo.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerBaseInfo::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerBaseInfo.title)
}
inline std::string* PlayerBaseInfo::mutable_title() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerBaseInfo.title)
  return _internal_mutable_title();
}
inline const std::string& PlayerBaseInfo::_internal_title() const {
  return title_.Get();
}
inline void PlayerBaseInfo::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerBaseInfo::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerBaseInfo::release_title() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerBaseInfo.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerBaseInfo::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerBaseInfo.title)
}

// int64 offline_ts = 6;
inline void PlayerBaseInfo::clear_offline_ts() {
  offline_ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerBaseInfo::_internal_offline_ts() const {
  return offline_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 PlayerBaseInfo::offline_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerBaseInfo.offline_ts)
  return _internal_offline_ts();
}
inline void PlayerBaseInfo::_internal_set_offline_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  offline_ts_ = value;
}
inline void PlayerBaseInfo::set_offline_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_offline_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerBaseInfo.offline_ts)
}

// int32 level = 7;
inline void PlayerBaseInfo::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBaseInfo::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBaseInfo::level() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerBaseInfo.level)
  return _internal_level();
}
inline void PlayerBaseInfo::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void PlayerBaseInfo::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerBaseInfo.level)
}

// int32 community_id = 8;
inline void PlayerBaseInfo::clear_community_id() {
  community_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBaseInfo::_internal_community_id() const {
  return community_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 PlayerBaseInfo::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerBaseInfo.community_id)
  return _internal_community_id();
}
inline void PlayerBaseInfo::_internal_set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  community_id_ = value;
}
inline void PlayerBaseInfo::set_community_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_community_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.PlayerBaseInfo.community_id)
}

// bytes community_name = 9;
inline void PlayerBaseInfo::clear_community_name() {
  community_name_.ClearToEmpty();
}
inline const std::string& PlayerBaseInfo::community_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.PlayerBaseInfo.community_name)
  return _internal_community_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PlayerBaseInfo::set_community_name(ArgT0&& arg0, ArgT... args) {
 
 community_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PlayerBaseInfo.community_name)
}
inline std::string* PlayerBaseInfo::mutable_community_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PlayerBaseInfo.community_name)
  return _internal_mutable_community_name();
}
inline const std::string& PlayerBaseInfo::_internal_community_name() const {
  return community_name_.Get();
}
inline void PlayerBaseInfo::_internal_set_community_name(const std::string& value) {
  
  community_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PlayerBaseInfo::_internal_mutable_community_name() {
  
  return community_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PlayerBaseInfo::release_community_name() {
  // @@protoc_insertion_point(field_release:KWMsg.PlayerBaseInfo.community_name)
  return community_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PlayerBaseInfo::set_allocated_community_name(std::string* community_name) {
  if (community_name != nullptr) {
    
  } else {
    
  }
  community_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PlayerBaseInfo.community_name)
}

// -------------------------------------------------------------------

// FriendInfo

// .KWMsg.PlayerBaseInfo base_info = 1;
inline bool FriendInfo::_internal_has_base_info() const {
  return this != internal_default_instance() && base_info_ != nullptr;
}
inline bool FriendInfo::has_base_info() const {
  return _internal_has_base_info();
}
inline void FriendInfo::clear_base_info() {
  if (GetArenaForAllocation() == nullptr && base_info_ != nullptr) {
    delete base_info_;
  }
  base_info_ = nullptr;
}
inline const ::KWMsg::PlayerBaseInfo& FriendInfo::_internal_base_info() const {
  const ::KWMsg::PlayerBaseInfo* p = base_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::PlayerBaseInfo&>(
      ::KWMsg::_PlayerBaseInfo_default_instance_);
}
inline const ::KWMsg::PlayerBaseInfo& FriendInfo::base_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.FriendInfo.base_info)
  return _internal_base_info();
}
inline void FriendInfo::unsafe_arena_set_allocated_base_info(
    ::KWMsg::PlayerBaseInfo* base_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_info_);
  }
  base_info_ = base_info;
  if (base_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.FriendInfo.base_info)
}
inline ::KWMsg::PlayerBaseInfo* FriendInfo::release_base_info() {
  
  ::KWMsg::PlayerBaseInfo* temp = base_info_;
  base_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::PlayerBaseInfo* FriendInfo::unsafe_arena_release_base_info() {
  // @@protoc_insertion_point(field_release:KWMsg.FriendInfo.base_info)
  
  ::KWMsg::PlayerBaseInfo* temp = base_info_;
  base_info_ = nullptr;
  return temp;
}
inline ::KWMsg::PlayerBaseInfo* FriendInfo::_internal_mutable_base_info() {
  
  if (base_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::PlayerBaseInfo>(GetArenaForAllocation());
    base_info_ = p;
  }
  return base_info_;
}
inline ::KWMsg::PlayerBaseInfo* FriendInfo::mutable_base_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.FriendInfo.base_info)
  return _internal_mutable_base_info();
}
inline void FriendInfo::set_allocated_base_info(::KWMsg::PlayerBaseInfo* base_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_info_;
  }
  if (base_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::PlayerBaseInfo>::GetOwningArena(base_info);
    if (message_arena != submessage_arena) {
      base_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_info, submessage_arena);
    }
    
  } else {
    
  }
  base_info_ = base_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.FriendInfo.base_info)
}

// int32 is_collect = 2;
inline void FriendInfo::clear_is_collect() {
  is_collect_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendInfo::_internal_is_collect() const {
  return is_collect_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendInfo::is_collect() const {
  // @@protoc_insertion_point(field_get:KWMsg.FriendInfo.is_collect)
  return _internal_is_collect();
}
inline void FriendInfo::_internal_set_is_collect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  is_collect_ = value;
}
inline void FriendInfo::set_is_collect(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_is_collect(value);
  // @@protoc_insertion_point(field_set:KWMsg.FriendInfo.is_collect)
}

// int64 add_ts = 3;
inline void FriendInfo::clear_add_ts() {
  add_ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendInfo::_internal_add_ts() const {
  return add_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendInfo::add_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.FriendInfo.add_ts)
  return _internal_add_ts();
}
inline void FriendInfo::_internal_set_add_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  add_ts_ = value;
}
inline void FriendInfo::set_add_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_add_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.FriendInfo.add_ts)
}

// -------------------------------------------------------------------

// AppliedFriendInfo

// .KWMsg.PlayerBaseInfo base_info = 1;
inline bool AppliedFriendInfo::_internal_has_base_info() const {
  return this != internal_default_instance() && base_info_ != nullptr;
}
inline bool AppliedFriendInfo::has_base_info() const {
  return _internal_has_base_info();
}
inline void AppliedFriendInfo::clear_base_info() {
  if (GetArenaForAllocation() == nullptr && base_info_ != nullptr) {
    delete base_info_;
  }
  base_info_ = nullptr;
}
inline const ::KWMsg::PlayerBaseInfo& AppliedFriendInfo::_internal_base_info() const {
  const ::KWMsg::PlayerBaseInfo* p = base_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::PlayerBaseInfo&>(
      ::KWMsg::_PlayerBaseInfo_default_instance_);
}
inline const ::KWMsg::PlayerBaseInfo& AppliedFriendInfo::base_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.AppliedFriendInfo.base_info)
  return _internal_base_info();
}
inline void AppliedFriendInfo::unsafe_arena_set_allocated_base_info(
    ::KWMsg::PlayerBaseInfo* base_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_info_);
  }
  base_info_ = base_info;
  if (base_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AppliedFriendInfo.base_info)
}
inline ::KWMsg::PlayerBaseInfo* AppliedFriendInfo::release_base_info() {
  
  ::KWMsg::PlayerBaseInfo* temp = base_info_;
  base_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::PlayerBaseInfo* AppliedFriendInfo::unsafe_arena_release_base_info() {
  // @@protoc_insertion_point(field_release:KWMsg.AppliedFriendInfo.base_info)
  
  ::KWMsg::PlayerBaseInfo* temp = base_info_;
  base_info_ = nullptr;
  return temp;
}
inline ::KWMsg::PlayerBaseInfo* AppliedFriendInfo::_internal_mutable_base_info() {
  
  if (base_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::PlayerBaseInfo>(GetArenaForAllocation());
    base_info_ = p;
  }
  return base_info_;
}
inline ::KWMsg::PlayerBaseInfo* AppliedFriendInfo::mutable_base_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AppliedFriendInfo.base_info)
  return _internal_mutable_base_info();
}
inline void AppliedFriendInfo::set_allocated_base_info(::KWMsg::PlayerBaseInfo* base_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_info_;
  }
  if (base_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::PlayerBaseInfo>::GetOwningArena(base_info);
    if (message_arena != submessage_arena) {
      base_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_info, submessage_arena);
    }
    
  } else {
    
  }
  base_info_ = base_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AppliedFriendInfo.base_info)
}

// int64 apply_ts = 2;
inline void AppliedFriendInfo::clear_apply_ts() {
  apply_ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppliedFriendInfo::_internal_apply_ts() const {
  return apply_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AppliedFriendInfo::apply_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.AppliedFriendInfo.apply_ts)
  return _internal_apply_ts();
}
inline void AppliedFriendInfo::_internal_set_apply_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  apply_ts_ = value;
}
inline void AppliedFriendInfo::set_apply_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_apply_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.AppliedFriendInfo.apply_ts)
}

// -------------------------------------------------------------------

// RecommendedFriendInfo

// .KWMsg.PlayerBaseInfo base_info = 1;
inline bool RecommendedFriendInfo::_internal_has_base_info() const {
  return this != internal_default_instance() && base_info_ != nullptr;
}
inline bool RecommendedFriendInfo::has_base_info() const {
  return _internal_has_base_info();
}
inline void RecommendedFriendInfo::clear_base_info() {
  if (GetArenaForAllocation() == nullptr && base_info_ != nullptr) {
    delete base_info_;
  }
  base_info_ = nullptr;
}
inline const ::KWMsg::PlayerBaseInfo& RecommendedFriendInfo::_internal_base_info() const {
  const ::KWMsg::PlayerBaseInfo* p = base_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::PlayerBaseInfo&>(
      ::KWMsg::_PlayerBaseInfo_default_instance_);
}
inline const ::KWMsg::PlayerBaseInfo& RecommendedFriendInfo::base_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecommendedFriendInfo.base_info)
  return _internal_base_info();
}
inline void RecommendedFriendInfo::unsafe_arena_set_allocated_base_info(
    ::KWMsg::PlayerBaseInfo* base_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_info_);
  }
  base_info_ = base_info;
  if (base_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.RecommendedFriendInfo.base_info)
}
inline ::KWMsg::PlayerBaseInfo* RecommendedFriendInfo::release_base_info() {
  
  ::KWMsg::PlayerBaseInfo* temp = base_info_;
  base_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::PlayerBaseInfo* RecommendedFriendInfo::unsafe_arena_release_base_info() {
  // @@protoc_insertion_point(field_release:KWMsg.RecommendedFriendInfo.base_info)
  
  ::KWMsg::PlayerBaseInfo* temp = base_info_;
  base_info_ = nullptr;
  return temp;
}
inline ::KWMsg::PlayerBaseInfo* RecommendedFriendInfo::_internal_mutable_base_info() {
  
  if (base_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::PlayerBaseInfo>(GetArenaForAllocation());
    base_info_ = p;
  }
  return base_info_;
}
inline ::KWMsg::PlayerBaseInfo* RecommendedFriendInfo::mutable_base_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.RecommendedFriendInfo.base_info)
  return _internal_mutable_base_info();
}
inline void RecommendedFriendInfo::set_allocated_base_info(::KWMsg::PlayerBaseInfo* base_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_info_;
  }
  if (base_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::PlayerBaseInfo>::GetOwningArena(base_info);
    if (message_arena != submessage_arena) {
      base_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_info, submessage_arena);
    }
    
  } else {
    
  }
  base_info_ = base_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.RecommendedFriendInfo.base_info)
}

// .KWMsg.ERecommendedFriendType recommended_type = 2;
inline void RecommendedFriendInfo::clear_recommended_type() {
  recommended_type_ = 0;
}
inline ::KWMsg::ERecommendedFriendType RecommendedFriendInfo::_internal_recommended_type() const {
  return static_cast< ::KWMsg::ERecommendedFriendType >(recommended_type_);
}
inline ::KWMsg::ERecommendedFriendType RecommendedFriendInfo::recommended_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.RecommendedFriendInfo.recommended_type)
  return _internal_recommended_type();
}
inline void RecommendedFriendInfo::_internal_set_recommended_type(::KWMsg::ERecommendedFriendType value) {
  
  recommended_type_ = value;
}
inline void RecommendedFriendInfo::set_recommended_type(::KWMsg::ERecommendedFriendType value) {
  _internal_set_recommended_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.RecommendedFriendInfo.recommended_type)
}

// -------------------------------------------------------------------

// ReqFriendList

// .KWMsg.Ident player_id = 1;
inline bool ReqFriendList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqFriendList::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqFriendList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqFriendList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqFriendList.player_id)
  return _internal_player_id();
}
inline void ReqFriendList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqFriendList.player_id)
}
inline ::KWMsg::Ident* ReqFriendList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqFriendList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqFriendList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqFriendList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqFriendList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqFriendList.player_id)
  return _internal_mutable_player_id();
}
inline void ReqFriendList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqFriendList.player_id)
}

// -------------------------------------------------------------------

// AckFriendList

// .KWMsg.EGameEventCode event_code = 1;
inline void AckFriendList::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckFriendList::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckFriendList::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckFriendList.event_code)
  return _internal_event_code();
}
inline void AckFriendList::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckFriendList::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckFriendList.event_code)
}

// repeated .KWMsg.FriendInfo info_list = 2;
inline int AckFriendList::_internal_info_list_size() const {
  return info_list_.size();
}
inline int AckFriendList::info_list_size() const {
  return _internal_info_list_size();
}
inline void AckFriendList::clear_info_list() {
  info_list_.Clear();
}
inline ::KWMsg::FriendInfo* AckFriendList::mutable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckFriendList.info_list)
  return info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::FriendInfo >*
AckFriendList::mutable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckFriendList.info_list)
  return &info_list_;
}
inline const ::KWMsg::FriendInfo& AckFriendList::_internal_info_list(int index) const {
  return info_list_.Get(index);
}
inline const ::KWMsg::FriendInfo& AckFriendList::info_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckFriendList.info_list)
  return _internal_info_list(index);
}
inline ::KWMsg::FriendInfo* AckFriendList::_internal_add_info_list() {
  return info_list_.Add();
}
inline ::KWMsg::FriendInfo* AckFriendList::add_info_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckFriendList.info_list)
  return _internal_add_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::FriendInfo >&
AckFriendList::info_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckFriendList.info_list)
  return info_list_;
}

// -------------------------------------------------------------------

// ReqAppliedFriendList

// .KWMsg.Ident player_id = 1;
inline bool ReqAppliedFriendList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqAppliedFriendList::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqAppliedFriendList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqAppliedFriendList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAppliedFriendList.player_id)
  return _internal_player_id();
}
inline void ReqAppliedFriendList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqAppliedFriendList.player_id)
}
inline ::KWMsg::Ident* ReqAppliedFriendList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqAppliedFriendList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAppliedFriendList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqAppliedFriendList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqAppliedFriendList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAppliedFriendList.player_id)
  return _internal_mutable_player_id();
}
inline void ReqAppliedFriendList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAppliedFriendList.player_id)
}

// -------------------------------------------------------------------

// AckAppliedFriendList

// .KWMsg.EGameEventCode event_code = 1;
inline void AckAppliedFriendList::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckAppliedFriendList::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckAppliedFriendList::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckAppliedFriendList.event_code)
  return _internal_event_code();
}
inline void AckAppliedFriendList::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckAppliedFriendList::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckAppliedFriendList.event_code)
}

// repeated .KWMsg.AppliedFriendInfo info_list = 2;
inline int AckAppliedFriendList::_internal_info_list_size() const {
  return info_list_.size();
}
inline int AckAppliedFriendList::info_list_size() const {
  return _internal_info_list_size();
}
inline void AckAppliedFriendList::clear_info_list() {
  info_list_.Clear();
}
inline ::KWMsg::AppliedFriendInfo* AckAppliedFriendList::mutable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckAppliedFriendList.info_list)
  return info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedFriendInfo >*
AckAppliedFriendList::mutable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckAppliedFriendList.info_list)
  return &info_list_;
}
inline const ::KWMsg::AppliedFriendInfo& AckAppliedFriendList::_internal_info_list(int index) const {
  return info_list_.Get(index);
}
inline const ::KWMsg::AppliedFriendInfo& AckAppliedFriendList::info_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckAppliedFriendList.info_list)
  return _internal_info_list(index);
}
inline ::KWMsg::AppliedFriendInfo* AckAppliedFriendList::_internal_add_info_list() {
  return info_list_.Add();
}
inline ::KWMsg::AppliedFriendInfo* AckAppliedFriendList::add_info_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckAppliedFriendList.info_list)
  return _internal_add_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::AppliedFriendInfo >&
AckAppliedFriendList::info_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckAppliedFriendList.info_list)
  return info_list_;
}

// -------------------------------------------------------------------

// ReqAddFriend

// .KWMsg.Ident player_id = 1;
inline bool ReqAddFriend::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqAddFriend::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqAddFriend::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqAddFriend::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAddFriend.player_id)
  return _internal_player_id();
}
inline void ReqAddFriend::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqAddFriend.player_id)
}
inline ::KWMsg::Ident* ReqAddFriend::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqAddFriend::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAddFriend.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqAddFriend::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqAddFriend::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAddFriend.player_id)
  return _internal_mutable_player_id();
}
inline void ReqAddFriend::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAddFriend.player_id)
}

// .KWMsg.Ident target_id = 2;
inline bool ReqAddFriend::_internal_has_target_id() const {
  return this != internal_default_instance() && target_id_ != nullptr;
}
inline bool ReqAddFriend::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::KWMsg::Ident& ReqAddFriend::_internal_target_id() const {
  const ::KWMsg::Ident* p = target_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqAddFriend::target_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAddFriend.target_id)
  return _internal_target_id();
}
inline void ReqAddFriend::unsafe_arena_set_allocated_target_id(
    ::KWMsg::Ident* target_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  target_id_ = target_id;
  if (target_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqAddFriend.target_id)
}
inline ::KWMsg::Ident* ReqAddFriend::release_target_id() {
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqAddFriend::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAddFriend.target_id)
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqAddFriend::_internal_mutable_target_id() {
  
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    target_id_ = p;
  }
  return target_id_;
}
inline ::KWMsg::Ident* ReqAddFriend::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAddFriend.target_id)
  return _internal_mutable_target_id();
}
inline void ReqAddFriend::set_allocated_target_id(::KWMsg::Ident* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id));
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAddFriend.target_id)
}

// -------------------------------------------------------------------

// AckAddFriend

// .KWMsg.EGameEventCode event_code = 1;
inline void AckAddFriend::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckAddFriend::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckAddFriend::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckAddFriend.event_code)
  return _internal_event_code();
}
inline void AckAddFriend::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckAddFriend::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckAddFriend.event_code)
}

// -------------------------------------------------------------------

// ReqDealWithAddFriend

// .KWMsg.Ident player_id = 1;
inline bool ReqDealWithAddFriend::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqDealWithAddFriend::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqDealWithAddFriend::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqDealWithAddFriend::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDealWithAddFriend.player_id)
  return _internal_player_id();
}
inline void ReqDealWithAddFriend::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqDealWithAddFriend.player_id)
}
inline ::KWMsg::Ident* ReqDealWithAddFriend::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqDealWithAddFriend::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDealWithAddFriend.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqDealWithAddFriend::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqDealWithAddFriend::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDealWithAddFriend.player_id)
  return _internal_mutable_player_id();
}
inline void ReqDealWithAddFriend::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDealWithAddFriend.player_id)
}

// .KWMsg.Ident target_id = 2;
inline bool ReqDealWithAddFriend::_internal_has_target_id() const {
  return this != internal_default_instance() && target_id_ != nullptr;
}
inline bool ReqDealWithAddFriend::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::KWMsg::Ident& ReqDealWithAddFriend::_internal_target_id() const {
  const ::KWMsg::Ident* p = target_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqDealWithAddFriend::target_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDealWithAddFriend.target_id)
  return _internal_target_id();
}
inline void ReqDealWithAddFriend::unsafe_arena_set_allocated_target_id(
    ::KWMsg::Ident* target_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  target_id_ = target_id;
  if (target_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqDealWithAddFriend.target_id)
}
inline ::KWMsg::Ident* ReqDealWithAddFriend::release_target_id() {
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqDealWithAddFriend::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDealWithAddFriend.target_id)
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqDealWithAddFriend::_internal_mutable_target_id() {
  
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    target_id_ = p;
  }
  return target_id_;
}
inline ::KWMsg::Ident* ReqDealWithAddFriend::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDealWithAddFriend.target_id)
  return _internal_mutable_target_id();
}
inline void ReqDealWithAddFriend::set_allocated_target_id(::KWMsg::Ident* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id));
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDealWithAddFriend.target_id)
}

// int32 opt_type = 3;
inline void ReqDealWithAddFriend::clear_opt_type() {
  opt_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDealWithAddFriend::_internal_opt_type() const {
  return opt_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDealWithAddFriend::opt_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDealWithAddFriend.opt_type)
  return _internal_opt_type();
}
inline void ReqDealWithAddFriend::_internal_set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opt_type_ = value;
}
inline void ReqDealWithAddFriend::set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opt_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqDealWithAddFriend.opt_type)
}

// -------------------------------------------------------------------

// AckDealWithAddFriend

// .KWMsg.EGameEventCode event_code = 1;
inline void AckDealWithAddFriend::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckDealWithAddFriend::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckDealWithAddFriend::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDealWithAddFriend.event_code)
  return _internal_event_code();
}
inline void AckDealWithAddFriend::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckDealWithAddFriend::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckDealWithAddFriend.event_code)
}

// -------------------------------------------------------------------

// ReqDelFriend

// .KWMsg.Ident player_id = 1;
inline bool ReqDelFriend::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqDelFriend::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqDelFriend::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqDelFriend::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDelFriend.player_id)
  return _internal_player_id();
}
inline void ReqDelFriend::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqDelFriend.player_id)
}
inline ::KWMsg::Ident* ReqDelFriend::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqDelFriend::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDelFriend.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqDelFriend::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqDelFriend::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDelFriend.player_id)
  return _internal_mutable_player_id();
}
inline void ReqDelFriend::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDelFriend.player_id)
}

// .KWMsg.Ident target_id = 2;
inline bool ReqDelFriend::_internal_has_target_id() const {
  return this != internal_default_instance() && target_id_ != nullptr;
}
inline bool ReqDelFriend::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::KWMsg::Ident& ReqDelFriend::_internal_target_id() const {
  const ::KWMsg::Ident* p = target_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqDelFriend::target_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDelFriend.target_id)
  return _internal_target_id();
}
inline void ReqDelFriend::unsafe_arena_set_allocated_target_id(
    ::KWMsg::Ident* target_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  target_id_ = target_id;
  if (target_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqDelFriend.target_id)
}
inline ::KWMsg::Ident* ReqDelFriend::release_target_id() {
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqDelFriend::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDelFriend.target_id)
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqDelFriend::_internal_mutable_target_id() {
  
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    target_id_ = p;
  }
  return target_id_;
}
inline ::KWMsg::Ident* ReqDelFriend::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDelFriend.target_id)
  return _internal_mutable_target_id();
}
inline void ReqDelFriend::set_allocated_target_id(::KWMsg::Ident* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id));
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDelFriend.target_id)
}

// -------------------------------------------------------------------

// AckDelFriend

// .KWMsg.EGameEventCode event_code = 1;
inline void AckDelFriend::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckDelFriend::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckDelFriend::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDelFriend.event_code)
  return _internal_event_code();
}
inline void AckDelFriend::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckDelFriend::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckDelFriend.event_code)
}

// .KWMsg.Ident target_id = 2;
inline bool AckDelFriend::_internal_has_target_id() const {
  return this != internal_default_instance() && target_id_ != nullptr;
}
inline bool AckDelFriend::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::KWMsg::Ident& AckDelFriend::_internal_target_id() const {
  const ::KWMsg::Ident* p = target_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckDelFriend::target_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDelFriend.target_id)
  return _internal_target_id();
}
inline void AckDelFriend::unsafe_arena_set_allocated_target_id(
    ::KWMsg::Ident* target_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  target_id_ = target_id;
  if (target_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckDelFriend.target_id)
}
inline ::KWMsg::Ident* AckDelFriend::release_target_id() {
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckDelFriend::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckDelFriend.target_id)
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckDelFriend::_internal_mutable_target_id() {
  
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    target_id_ = p;
  }
  return target_id_;
}
inline ::KWMsg::Ident* AckDelFriend::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckDelFriend.target_id)
  return _internal_mutable_target_id();
}
inline void AckDelFriend::set_allocated_target_id(::KWMsg::Ident* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id));
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckDelFriend.target_id)
}

// -------------------------------------------------------------------

// ReqBlacklist

// .KWMsg.Ident player_id = 1;
inline bool ReqBlacklist::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBlacklist::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBlacklist::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBlacklist::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBlacklist.player_id)
  return _internal_player_id();
}
inline void ReqBlacklist::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBlacklist.player_id)
}
inline ::KWMsg::Ident* ReqBlacklist::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBlacklist::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBlacklist.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBlacklist::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBlacklist::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBlacklist.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBlacklist::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBlacklist.player_id)
}

// -------------------------------------------------------------------

// AckBlacklist

// .KWMsg.EGameEventCode event_code = 1;
inline void AckBlacklist::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBlacklist::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckBlacklist::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBlacklist.event_code)
  return _internal_event_code();
}
inline void AckBlacklist::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckBlacklist::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBlacklist.event_code)
}

// repeated .KWMsg.PlayerBaseInfo info_list = 2;
inline int AckBlacklist::_internal_info_list_size() const {
  return info_list_.size();
}
inline int AckBlacklist::info_list_size() const {
  return _internal_info_list_size();
}
inline void AckBlacklist::clear_info_list() {
  info_list_.Clear();
}
inline ::KWMsg::PlayerBaseInfo* AckBlacklist::mutable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBlacklist.info_list)
  return info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerBaseInfo >*
AckBlacklist::mutable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckBlacklist.info_list)
  return &info_list_;
}
inline const ::KWMsg::PlayerBaseInfo& AckBlacklist::_internal_info_list(int index) const {
  return info_list_.Get(index);
}
inline const ::KWMsg::PlayerBaseInfo& AckBlacklist::info_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBlacklist.info_list)
  return _internal_info_list(index);
}
inline ::KWMsg::PlayerBaseInfo* AckBlacklist::_internal_add_info_list() {
  return info_list_.Add();
}
inline ::KWMsg::PlayerBaseInfo* AckBlacklist::add_info_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckBlacklist.info_list)
  return _internal_add_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PlayerBaseInfo >&
AckBlacklist::info_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckBlacklist.info_list)
  return info_list_;
}

// -------------------------------------------------------------------

// ReqBlacklistOpt

// .KWMsg.Ident player_id = 1;
inline bool ReqBlacklistOpt::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBlacklistOpt::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBlacklistOpt::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBlacklistOpt::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBlacklistOpt.player_id)
  return _internal_player_id();
}
inline void ReqBlacklistOpt::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBlacklistOpt.player_id)
}
inline ::KWMsg::Ident* ReqBlacklistOpt::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBlacklistOpt::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBlacklistOpt.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBlacklistOpt::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBlacklistOpt::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBlacklistOpt.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBlacklistOpt::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBlacklistOpt.player_id)
}

// .KWMsg.Ident target_id = 2;
inline bool ReqBlacklistOpt::_internal_has_target_id() const {
  return this != internal_default_instance() && target_id_ != nullptr;
}
inline bool ReqBlacklistOpt::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::KWMsg::Ident& ReqBlacklistOpt::_internal_target_id() const {
  const ::KWMsg::Ident* p = target_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBlacklistOpt::target_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBlacklistOpt.target_id)
  return _internal_target_id();
}
inline void ReqBlacklistOpt::unsafe_arena_set_allocated_target_id(
    ::KWMsg::Ident* target_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  target_id_ = target_id;
  if (target_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBlacklistOpt.target_id)
}
inline ::KWMsg::Ident* ReqBlacklistOpt::release_target_id() {
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBlacklistOpt::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBlacklistOpt.target_id)
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBlacklistOpt::_internal_mutable_target_id() {
  
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    target_id_ = p;
  }
  return target_id_;
}
inline ::KWMsg::Ident* ReqBlacklistOpt::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBlacklistOpt.target_id)
  return _internal_mutable_target_id();
}
inline void ReqBlacklistOpt::set_allocated_target_id(::KWMsg::Ident* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id));
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBlacklistOpt.target_id)
}

// int32 opt_type = 3;
inline void ReqBlacklistOpt::clear_opt_type() {
  opt_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqBlacklistOpt::_internal_opt_type() const {
  return opt_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqBlacklistOpt::opt_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBlacklistOpt.opt_type)
  return _internal_opt_type();
}
inline void ReqBlacklistOpt::_internal_set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opt_type_ = value;
}
inline void ReqBlacklistOpt::set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opt_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqBlacklistOpt.opt_type)
}

// -------------------------------------------------------------------

// AckBlacklistOpt

// .KWMsg.EGameEventCode event_code = 1;
inline void AckBlacklistOpt::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBlacklistOpt::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckBlacklistOpt::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBlacklistOpt.event_code)
  return _internal_event_code();
}
inline void AckBlacklistOpt::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckBlacklistOpt::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBlacklistOpt.event_code)
}

// .KWMsg.Ident target_id = 2;
inline bool AckBlacklistOpt::_internal_has_target_id() const {
  return this != internal_default_instance() && target_id_ != nullptr;
}
inline bool AckBlacklistOpt::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::KWMsg::Ident& AckBlacklistOpt::_internal_target_id() const {
  const ::KWMsg::Ident* p = target_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckBlacklistOpt::target_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBlacklistOpt.target_id)
  return _internal_target_id();
}
inline void AckBlacklistOpt::unsafe_arena_set_allocated_target_id(
    ::KWMsg::Ident* target_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  target_id_ = target_id;
  if (target_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBlacklistOpt.target_id)
}
inline ::KWMsg::Ident* AckBlacklistOpt::release_target_id() {
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckBlacklistOpt::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBlacklistOpt.target_id)
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckBlacklistOpt::_internal_mutable_target_id() {
  
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    target_id_ = p;
  }
  return target_id_;
}
inline ::KWMsg::Ident* AckBlacklistOpt::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBlacklistOpt.target_id)
  return _internal_mutable_target_id();
}
inline void AckBlacklistOpt::set_allocated_target_id(::KWMsg::Ident* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id));
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBlacklistOpt.target_id)
}

// -------------------------------------------------------------------

// ReqRecommendedFriendList

// .KWMsg.Ident player_id = 1;
inline bool ReqRecommendedFriendList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqRecommendedFriendList::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqRecommendedFriendList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqRecommendedFriendList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRecommendedFriendList.player_id)
  return _internal_player_id();
}
inline void ReqRecommendedFriendList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqRecommendedFriendList.player_id)
}
inline ::KWMsg::Ident* ReqRecommendedFriendList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqRecommendedFriendList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqRecommendedFriendList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqRecommendedFriendList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqRecommendedFriendList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqRecommendedFriendList.player_id)
  return _internal_mutable_player_id();
}
inline void ReqRecommendedFriendList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqRecommendedFriendList.player_id)
}

// int32 refresh_flag = 2;
inline void ReqRecommendedFriendList::clear_refresh_flag() {
  refresh_flag_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqRecommendedFriendList::_internal_refresh_flag() const {
  return refresh_flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqRecommendedFriendList::refresh_flag() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRecommendedFriendList.refresh_flag)
  return _internal_refresh_flag();
}
inline void ReqRecommendedFriendList::_internal_set_refresh_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  refresh_flag_ = value;
}
inline void ReqRecommendedFriendList::set_refresh_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_refresh_flag(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqRecommendedFriendList.refresh_flag)
}

// -------------------------------------------------------------------

// AckRecommendedFriendList

// .KWMsg.EGameEventCode event_code = 1;
inline void AckRecommendedFriendList::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckRecommendedFriendList::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckRecommendedFriendList::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckRecommendedFriendList.event_code)
  return _internal_event_code();
}
inline void AckRecommendedFriendList::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckRecommendedFriendList::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckRecommendedFriendList.event_code)
}

// repeated .KWMsg.RecommendedFriendInfo info_list = 2;
inline int AckRecommendedFriendList::_internal_info_list_size() const {
  return info_list_.size();
}
inline int AckRecommendedFriendList::info_list_size() const {
  return _internal_info_list_size();
}
inline void AckRecommendedFriendList::clear_info_list() {
  info_list_.Clear();
}
inline ::KWMsg::RecommendedFriendInfo* AckRecommendedFriendList::mutable_info_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckRecommendedFriendList.info_list)
  return info_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecommendedFriendInfo >*
AckRecommendedFriendList::mutable_info_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckRecommendedFriendList.info_list)
  return &info_list_;
}
inline const ::KWMsg::RecommendedFriendInfo& AckRecommendedFriendList::_internal_info_list(int index) const {
  return info_list_.Get(index);
}
inline const ::KWMsg::RecommendedFriendInfo& AckRecommendedFriendList::info_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckRecommendedFriendList.info_list)
  return _internal_info_list(index);
}
inline ::KWMsg::RecommendedFriendInfo* AckRecommendedFriendList::_internal_add_info_list() {
  return info_list_.Add();
}
inline ::KWMsg::RecommendedFriendInfo* AckRecommendedFriendList::add_info_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckRecommendedFriendList.info_list)
  return _internal_add_info_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RecommendedFriendInfo >&
AckRecommendedFriendList::info_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckRecommendedFriendList.info_list)
  return info_list_;
}

// -------------------------------------------------------------------

// ReqFriendCollectOpt

// .KWMsg.Ident player_id = 1;
inline bool ReqFriendCollectOpt::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqFriendCollectOpt::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqFriendCollectOpt::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqFriendCollectOpt::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqFriendCollectOpt.player_id)
  return _internal_player_id();
}
inline void ReqFriendCollectOpt::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqFriendCollectOpt.player_id)
}
inline ::KWMsg::Ident* ReqFriendCollectOpt::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqFriendCollectOpt::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqFriendCollectOpt.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqFriendCollectOpt::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqFriendCollectOpt::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqFriendCollectOpt.player_id)
  return _internal_mutable_player_id();
}
inline void ReqFriendCollectOpt::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqFriendCollectOpt.player_id)
}

// .KWMsg.Ident target_id = 2;
inline bool ReqFriendCollectOpt::_internal_has_target_id() const {
  return this != internal_default_instance() && target_id_ != nullptr;
}
inline bool ReqFriendCollectOpt::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::KWMsg::Ident& ReqFriendCollectOpt::_internal_target_id() const {
  const ::KWMsg::Ident* p = target_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqFriendCollectOpt::target_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqFriendCollectOpt.target_id)
  return _internal_target_id();
}
inline void ReqFriendCollectOpt::unsafe_arena_set_allocated_target_id(
    ::KWMsg::Ident* target_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  target_id_ = target_id;
  if (target_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqFriendCollectOpt.target_id)
}
inline ::KWMsg::Ident* ReqFriendCollectOpt::release_target_id() {
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqFriendCollectOpt::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqFriendCollectOpt.target_id)
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqFriendCollectOpt::_internal_mutable_target_id() {
  
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    target_id_ = p;
  }
  return target_id_;
}
inline ::KWMsg::Ident* ReqFriendCollectOpt::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqFriendCollectOpt.target_id)
  return _internal_mutable_target_id();
}
inline void ReqFriendCollectOpt::set_allocated_target_id(::KWMsg::Ident* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id));
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqFriendCollectOpt.target_id)
}

// int32 opt_type = 3;
inline void ReqFriendCollectOpt::clear_opt_type() {
  opt_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqFriendCollectOpt::_internal_opt_type() const {
  return opt_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqFriendCollectOpt::opt_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqFriendCollectOpt.opt_type)
  return _internal_opt_type();
}
inline void ReqFriendCollectOpt::_internal_set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opt_type_ = value;
}
inline void ReqFriendCollectOpt::set_opt_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opt_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqFriendCollectOpt.opt_type)
}

// -------------------------------------------------------------------

// AckFriendCollectOpt

// .KWMsg.EGameEventCode event_code = 1;
inline void AckFriendCollectOpt::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckFriendCollectOpt::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckFriendCollectOpt::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckFriendCollectOpt.event_code)
  return _internal_event_code();
}
inline void AckFriendCollectOpt::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckFriendCollectOpt::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckFriendCollectOpt.event_code)
}

// .KWMsg.Ident target_id = 2;
inline bool AckFriendCollectOpt::_internal_has_target_id() const {
  return this != internal_default_instance() && target_id_ != nullptr;
}
inline bool AckFriendCollectOpt::has_target_id() const {
  return _internal_has_target_id();
}
inline const ::KWMsg::Ident& AckFriendCollectOpt::_internal_target_id() const {
  const ::KWMsg::Ident* p = target_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckFriendCollectOpt::target_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckFriendCollectOpt.target_id)
  return _internal_target_id();
}
inline void AckFriendCollectOpt::unsafe_arena_set_allocated_target_id(
    ::KWMsg::Ident* target_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  target_id_ = target_id;
  if (target_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckFriendCollectOpt.target_id)
}
inline ::KWMsg::Ident* AckFriendCollectOpt::release_target_id() {
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckFriendCollectOpt::unsafe_arena_release_target_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckFriendCollectOpt.target_id)
  
  ::KWMsg::Ident* temp = target_id_;
  target_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckFriendCollectOpt::_internal_mutable_target_id() {
  
  if (target_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    target_id_ = p;
  }
  return target_id_;
}
inline ::KWMsg::Ident* AckFriendCollectOpt::mutable_target_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckFriendCollectOpt.target_id)
  return _internal_mutable_target_id();
}
inline void AckFriendCollectOpt::set_allocated_target_id(::KWMsg::Ident* target_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id_);
  }
  if (target_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target_id));
    if (message_arena != submessage_arena) {
      target_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target_id, submessage_arena);
    }
    
  } else {
    
  }
  target_id_ = target_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckFriendCollectOpt.target_id)
}

// -------------------------------------------------------------------

// ReqFindPlayer

// .KWMsg.Ident player_id = 1;
inline bool ReqFindPlayer::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqFindPlayer::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqFindPlayer::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqFindPlayer::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqFindPlayer.player_id)
  return _internal_player_id();
}
inline void ReqFindPlayer::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqFindPlayer.player_id)
}
inline ::KWMsg::Ident* ReqFindPlayer::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqFindPlayer::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqFindPlayer.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqFindPlayer::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqFindPlayer::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqFindPlayer.player_id)
  return _internal_mutable_player_id();
}
inline void ReqFindPlayer::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqFindPlayer.player_id)
}

// bytes target_name_or_id = 2;
inline void ReqFindPlayer::clear_target_name_or_id() {
  target_name_or_id_.ClearToEmpty();
}
inline const std::string& ReqFindPlayer::target_name_or_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqFindPlayer.target_name_or_id)
  return _internal_target_name_or_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqFindPlayer::set_target_name_or_id(ArgT0&& arg0, ArgT... args) {
 
 target_name_or_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqFindPlayer.target_name_or_id)
}
inline std::string* ReqFindPlayer::mutable_target_name_or_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqFindPlayer.target_name_or_id)
  return _internal_mutable_target_name_or_id();
}
inline const std::string& ReqFindPlayer::_internal_target_name_or_id() const {
  return target_name_or_id_.Get();
}
inline void ReqFindPlayer::_internal_set_target_name_or_id(const std::string& value) {
  
  target_name_or_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqFindPlayer::_internal_mutable_target_name_or_id() {
  
  return target_name_or_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqFindPlayer::release_target_name_or_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqFindPlayer.target_name_or_id)
  return target_name_or_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqFindPlayer::set_allocated_target_name_or_id(std::string* target_name_or_id) {
  if (target_name_or_id != nullptr) {
    
  } else {
    
  }
  target_name_or_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), target_name_or_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqFindPlayer.target_name_or_id)
}

// int32 find_type = 3;
inline void ReqFindPlayer::clear_find_type() {
  find_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqFindPlayer::_internal_find_type() const {
  return find_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqFindPlayer::find_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqFindPlayer.find_type)
  return _internal_find_type();
}
inline void ReqFindPlayer::_internal_set_find_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  find_type_ = value;
}
inline void ReqFindPlayer::set_find_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_find_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqFindPlayer.find_type)
}

// -------------------------------------------------------------------

// AckFindPlayer

// .KWMsg.EGameEventCode event_code = 1;
inline void AckFindPlayer::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckFindPlayer::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckFindPlayer::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckFindPlayer.event_code)
  return _internal_event_code();
}
inline void AckFindPlayer::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckFindPlayer::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckFindPlayer.event_code)
}

// .KWMsg.PlayerBaseInfo base_info = 2;
inline bool AckFindPlayer::_internal_has_base_info() const {
  return this != internal_default_instance() && base_info_ != nullptr;
}
inline bool AckFindPlayer::has_base_info() const {
  return _internal_has_base_info();
}
inline void AckFindPlayer::clear_base_info() {
  if (GetArenaForAllocation() == nullptr && base_info_ != nullptr) {
    delete base_info_;
  }
  base_info_ = nullptr;
}
inline const ::KWMsg::PlayerBaseInfo& AckFindPlayer::_internal_base_info() const {
  const ::KWMsg::PlayerBaseInfo* p = base_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::PlayerBaseInfo&>(
      ::KWMsg::_PlayerBaseInfo_default_instance_);
}
inline const ::KWMsg::PlayerBaseInfo& AckFindPlayer::base_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckFindPlayer.base_info)
  return _internal_base_info();
}
inline void AckFindPlayer::unsafe_arena_set_allocated_base_info(
    ::KWMsg::PlayerBaseInfo* base_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(base_info_);
  }
  base_info_ = base_info;
  if (base_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckFindPlayer.base_info)
}
inline ::KWMsg::PlayerBaseInfo* AckFindPlayer::release_base_info() {
  
  ::KWMsg::PlayerBaseInfo* temp = base_info_;
  base_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::PlayerBaseInfo* AckFindPlayer::unsafe_arena_release_base_info() {
  // @@protoc_insertion_point(field_release:KWMsg.AckFindPlayer.base_info)
  
  ::KWMsg::PlayerBaseInfo* temp = base_info_;
  base_info_ = nullptr;
  return temp;
}
inline ::KWMsg::PlayerBaseInfo* AckFindPlayer::_internal_mutable_base_info() {
  
  if (base_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::PlayerBaseInfo>(GetArenaForAllocation());
    base_info_ = p;
  }
  return base_info_;
}
inline ::KWMsg::PlayerBaseInfo* AckFindPlayer::mutable_base_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckFindPlayer.base_info)
  return _internal_mutable_base_info();
}
inline void AckFindPlayer::set_allocated_base_info(::KWMsg::PlayerBaseInfo* base_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete base_info_;
  }
  if (base_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::PlayerBaseInfo>::GetOwningArena(base_info);
    if (message_arena != submessage_arena) {
      base_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base_info, submessage_arena);
    }
    
  } else {
    
  }
  base_info_ = base_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckFindPlayer.base_info)
}

// -------------------------------------------------------------------

// ReqExploreUpdateNodePostion

// .KWMsg.Ident player_id = 1;
inline bool ReqExploreUpdateNodePostion::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqExploreUpdateNodePostion::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqExploreUpdateNodePostion::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqExploreUpdateNodePostion::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqExploreUpdateNodePostion.player_id)
  return _internal_player_id();
}
inline void ReqExploreUpdateNodePostion::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqExploreUpdateNodePostion.player_id)
}
inline ::KWMsg::Ident* ReqExploreUpdateNodePostion::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqExploreUpdateNodePostion::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqExploreUpdateNodePostion.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqExploreUpdateNodePostion::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqExploreUpdateNodePostion::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqExploreUpdateNodePostion.player_id)
  return _internal_mutable_player_id();
}
inline void ReqExploreUpdateNodePostion::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqExploreUpdateNodePostion.player_id)
}

// bytes explore_node_id = 2;
inline void ReqExploreUpdateNodePostion::clear_explore_node_id() {
  explore_node_id_.ClearToEmpty();
}
inline const std::string& ReqExploreUpdateNodePostion::explore_node_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqExploreUpdateNodePostion.explore_node_id)
  return _internal_explore_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqExploreUpdateNodePostion::set_explore_node_id(ArgT0&& arg0, ArgT... args) {
 
 explore_node_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqExploreUpdateNodePostion.explore_node_id)
}
inline std::string* ReqExploreUpdateNodePostion::mutable_explore_node_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqExploreUpdateNodePostion.explore_node_id)
  return _internal_mutable_explore_node_id();
}
inline const std::string& ReqExploreUpdateNodePostion::_internal_explore_node_id() const {
  return explore_node_id_.Get();
}
inline void ReqExploreUpdateNodePostion::_internal_set_explore_node_id(const std::string& value) {
  
  explore_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqExploreUpdateNodePostion::_internal_mutable_explore_node_id() {
  
  return explore_node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqExploreUpdateNodePostion::release_explore_node_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqExploreUpdateNodePostion.explore_node_id)
  return explore_node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqExploreUpdateNodePostion::set_allocated_explore_node_id(std::string* explore_node_id) {
  if (explore_node_id != nullptr) {
    
  } else {
    
  }
  explore_node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explore_node_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqExploreUpdateNodePostion.explore_node_id)
}

// -------------------------------------------------------------------

// AckExploreUpdateNodePostion

// .KWMsg.EGameEventCode event_code = 1;
inline void AckExploreUpdateNodePostion::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckExploreUpdateNodePostion::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckExploreUpdateNodePostion::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckExploreUpdateNodePostion.event_code)
  return _internal_event_code();
}
inline void AckExploreUpdateNodePostion::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckExploreUpdateNodePostion::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckExploreUpdateNodePostion.event_code)
}

// bytes explore_node_id = 2;
inline void AckExploreUpdateNodePostion::clear_explore_node_id() {
  explore_node_id_.ClearToEmpty();
}
inline const std::string& AckExploreUpdateNodePostion::explore_node_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckExploreUpdateNodePostion.explore_node_id)
  return _internal_explore_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckExploreUpdateNodePostion::set_explore_node_id(ArgT0&& arg0, ArgT... args) {
 
 explore_node_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckExploreUpdateNodePostion.explore_node_id)
}
inline std::string* AckExploreUpdateNodePostion::mutable_explore_node_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckExploreUpdateNodePostion.explore_node_id)
  return _internal_mutable_explore_node_id();
}
inline const std::string& AckExploreUpdateNodePostion::_internal_explore_node_id() const {
  return explore_node_id_.Get();
}
inline void AckExploreUpdateNodePostion::_internal_set_explore_node_id(const std::string& value) {
  
  explore_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckExploreUpdateNodePostion::_internal_mutable_explore_node_id() {
  
  return explore_node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckExploreUpdateNodePostion::release_explore_node_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckExploreUpdateNodePostion.explore_node_id)
  return explore_node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckExploreUpdateNodePostion::set_allocated_explore_node_id(std::string* explore_node_id) {
  if (explore_node_id != nullptr) {
    
  } else {
    
  }
  explore_node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explore_node_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckExploreUpdateNodePostion.explore_node_id)
}

// -------------------------------------------------------------------

// ReqGetExploreAreaProgressRewards

// .KWMsg.Ident player_id = 1;
inline bool ReqGetExploreAreaProgressRewards::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqGetExploreAreaProgressRewards::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqGetExploreAreaProgressRewards::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetExploreAreaProgressRewards::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetExploreAreaProgressRewards.player_id)
  return _internal_player_id();
}
inline void ReqGetExploreAreaProgressRewards::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetExploreAreaProgressRewards.player_id)
}
inline ::KWMsg::Ident* ReqGetExploreAreaProgressRewards::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetExploreAreaProgressRewards::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetExploreAreaProgressRewards.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetExploreAreaProgressRewards::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqGetExploreAreaProgressRewards::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetExploreAreaProgressRewards.player_id)
  return _internal_mutable_player_id();
}
inline void ReqGetExploreAreaProgressRewards::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetExploreAreaProgressRewards.player_id)
}

// bytes explore_area_id = 2;
inline void ReqGetExploreAreaProgressRewards::clear_explore_area_id() {
  explore_area_id_.ClearToEmpty();
}
inline const std::string& ReqGetExploreAreaProgressRewards::explore_area_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetExploreAreaProgressRewards.explore_area_id)
  return _internal_explore_area_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGetExploreAreaProgressRewards::set_explore_area_id(ArgT0&& arg0, ArgT... args) {
 
 explore_area_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGetExploreAreaProgressRewards.explore_area_id)
}
inline std::string* ReqGetExploreAreaProgressRewards::mutable_explore_area_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetExploreAreaProgressRewards.explore_area_id)
  return _internal_mutable_explore_area_id();
}
inline const std::string& ReqGetExploreAreaProgressRewards::_internal_explore_area_id() const {
  return explore_area_id_.Get();
}
inline void ReqGetExploreAreaProgressRewards::_internal_set_explore_area_id(const std::string& value) {
  
  explore_area_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGetExploreAreaProgressRewards::_internal_mutable_explore_area_id() {
  
  return explore_area_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGetExploreAreaProgressRewards::release_explore_area_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetExploreAreaProgressRewards.explore_area_id)
  return explore_area_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGetExploreAreaProgressRewards::set_allocated_explore_area_id(std::string* explore_area_id) {
  if (explore_area_id != nullptr) {
    
  } else {
    
  }
  explore_area_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explore_area_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetExploreAreaProgressRewards.explore_area_id)
}

// -------------------------------------------------------------------

// AckGetExploreAreaProgressRewards

// .KWMsg.EGameEventCode event_code = 1;
inline void AckGetExploreAreaProgressRewards::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckGetExploreAreaProgressRewards::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckGetExploreAreaProgressRewards::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetExploreAreaProgressRewards.event_code)
  return _internal_event_code();
}
inline void AckGetExploreAreaProgressRewards::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckGetExploreAreaProgressRewards::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetExploreAreaProgressRewards.event_code)
}

// repeated .KWMsg.RewardInfo reward_list = 2;
inline int AckGetExploreAreaProgressRewards::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int AckGetExploreAreaProgressRewards::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void AckGetExploreAreaProgressRewards::clear_reward_list() {
  reward_list_.Clear();
}
inline ::KWMsg::RewardInfo* AckGetExploreAreaProgressRewards::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetExploreAreaProgressRewards.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
AckGetExploreAreaProgressRewards::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckGetExploreAreaProgressRewards.reward_list)
  return &reward_list_;
}
inline const ::KWMsg::RewardInfo& AckGetExploreAreaProgressRewards::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::KWMsg::RewardInfo& AckGetExploreAreaProgressRewards::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetExploreAreaProgressRewards.reward_list)
  return _internal_reward_list(index);
}
inline ::KWMsg::RewardInfo* AckGetExploreAreaProgressRewards::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::KWMsg::RewardInfo* AckGetExploreAreaProgressRewards::add_reward_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckGetExploreAreaProgressRewards.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
AckGetExploreAreaProgressRewards::reward_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckGetExploreAreaProgressRewards.reward_list)
  return reward_list_;
}

// -------------------------------------------------------------------

// ReqSweepExploreThreeStarNode

// .KWMsg.Ident player_id = 1;
inline bool ReqSweepExploreThreeStarNode::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqSweepExploreThreeStarNode::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqSweepExploreThreeStarNode::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqSweepExploreThreeStarNode::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSweepExploreThreeStarNode.player_id)
  return _internal_player_id();
}
inline void ReqSweepExploreThreeStarNode::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqSweepExploreThreeStarNode.player_id)
}
inline ::KWMsg::Ident* ReqSweepExploreThreeStarNode::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqSweepExploreThreeStarNode::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSweepExploreThreeStarNode.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqSweepExploreThreeStarNode::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqSweepExploreThreeStarNode::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSweepExploreThreeStarNode.player_id)
  return _internal_mutable_player_id();
}
inline void ReqSweepExploreThreeStarNode::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSweepExploreThreeStarNode.player_id)
}

// bytes explore_node_id = 2;
inline void ReqSweepExploreThreeStarNode::clear_explore_node_id() {
  explore_node_id_.ClearToEmpty();
}
inline const std::string& ReqSweepExploreThreeStarNode::explore_node_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSweepExploreThreeStarNode.explore_node_id)
  return _internal_explore_node_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSweepExploreThreeStarNode::set_explore_node_id(ArgT0&& arg0, ArgT... args) {
 
 explore_node_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSweepExploreThreeStarNode.explore_node_id)
}
inline std::string* ReqSweepExploreThreeStarNode::mutable_explore_node_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSweepExploreThreeStarNode.explore_node_id)
  return _internal_mutable_explore_node_id();
}
inline const std::string& ReqSweepExploreThreeStarNode::_internal_explore_node_id() const {
  return explore_node_id_.Get();
}
inline void ReqSweepExploreThreeStarNode::_internal_set_explore_node_id(const std::string& value) {
  
  explore_node_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSweepExploreThreeStarNode::_internal_mutable_explore_node_id() {
  
  return explore_node_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSweepExploreThreeStarNode::release_explore_node_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSweepExploreThreeStarNode.explore_node_id)
  return explore_node_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSweepExploreThreeStarNode::set_allocated_explore_node_id(std::string* explore_node_id) {
  if (explore_node_id != nullptr) {
    
  } else {
    
  }
  explore_node_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explore_node_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSweepExploreThreeStarNode.explore_node_id)
}

// int32 sweep_count = 3;
inline void ReqSweepExploreThreeStarNode::clear_sweep_count() {
  sweep_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSweepExploreThreeStarNode::_internal_sweep_count() const {
  return sweep_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqSweepExploreThreeStarNode::sweep_count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSweepExploreThreeStarNode.sweep_count)
  return _internal_sweep_count();
}
inline void ReqSweepExploreThreeStarNode::_internal_set_sweep_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sweep_count_ = value;
}
inline void ReqSweepExploreThreeStarNode::set_sweep_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sweep_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqSweepExploreThreeStarNode.sweep_count)
}

// -------------------------------------------------------------------

// AckSweepExploreThreeStarNode

// .KWMsg.EGameEventCode event_code = 1;
inline void AckSweepExploreThreeStarNode::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckSweepExploreThreeStarNode::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckSweepExploreThreeStarNode::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSweepExploreThreeStarNode.event_code)
  return _internal_event_code();
}
inline void AckSweepExploreThreeStarNode::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckSweepExploreThreeStarNode::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSweepExploreThreeStarNode.event_code)
}

// repeated .KWMsg.RewardInfo reward_list = 2;
inline int AckSweepExploreThreeStarNode::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int AckSweepExploreThreeStarNode::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void AckSweepExploreThreeStarNode::clear_reward_list() {
  reward_list_.Clear();
}
inline ::KWMsg::RewardInfo* AckSweepExploreThreeStarNode::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSweepExploreThreeStarNode.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
AckSweepExploreThreeStarNode::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckSweepExploreThreeStarNode.reward_list)
  return &reward_list_;
}
inline const ::KWMsg::RewardInfo& AckSweepExploreThreeStarNode::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::KWMsg::RewardInfo& AckSweepExploreThreeStarNode::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSweepExploreThreeStarNode.reward_list)
  return _internal_reward_list(index);
}
inline ::KWMsg::RewardInfo* AckSweepExploreThreeStarNode::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::KWMsg::RewardInfo* AckSweepExploreThreeStarNode::add_reward_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckSweepExploreThreeStarNode.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
AckSweepExploreThreeStarNode::reward_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckSweepExploreThreeStarNode.reward_list)
  return reward_list_;
}

// repeated .KWMsg.RewardInfo extra_reward_list = 3;
inline int AckSweepExploreThreeStarNode::_internal_extra_reward_list_size() const {
  return extra_reward_list_.size();
}
inline int AckSweepExploreThreeStarNode::extra_reward_list_size() const {
  return _internal_extra_reward_list_size();
}
inline void AckSweepExploreThreeStarNode::clear_extra_reward_list() {
  extra_reward_list_.Clear();
}
inline ::KWMsg::RewardInfo* AckSweepExploreThreeStarNode::mutable_extra_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSweepExploreThreeStarNode.extra_reward_list)
  return extra_reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
AckSweepExploreThreeStarNode::mutable_extra_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckSweepExploreThreeStarNode.extra_reward_list)
  return &extra_reward_list_;
}
inline const ::KWMsg::RewardInfo& AckSweepExploreThreeStarNode::_internal_extra_reward_list(int index) const {
  return extra_reward_list_.Get(index);
}
inline const ::KWMsg::RewardInfo& AckSweepExploreThreeStarNode::extra_reward_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSweepExploreThreeStarNode.extra_reward_list)
  return _internal_extra_reward_list(index);
}
inline ::KWMsg::RewardInfo* AckSweepExploreThreeStarNode::_internal_add_extra_reward_list() {
  return extra_reward_list_.Add();
}
inline ::KWMsg::RewardInfo* AckSweepExploreThreeStarNode::add_extra_reward_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckSweepExploreThreeStarNode.extra_reward_list)
  return _internal_add_extra_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
AckSweepExploreThreeStarNode::extra_reward_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckSweepExploreThreeStarNode.extra_reward_list)
  return extra_reward_list_;
}

// -------------------------------------------------------------------

// ReqGetExploreMapStarRewards

// .KWMsg.Ident player_id = 1;
inline bool ReqGetExploreMapStarRewards::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqGetExploreMapStarRewards::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqGetExploreMapStarRewards::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetExploreMapStarRewards::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetExploreMapStarRewards.player_id)
  return _internal_player_id();
}
inline void ReqGetExploreMapStarRewards::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetExploreMapStarRewards.player_id)
}
inline ::KWMsg::Ident* ReqGetExploreMapStarRewards::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetExploreMapStarRewards::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetExploreMapStarRewards.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetExploreMapStarRewards::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqGetExploreMapStarRewards::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetExploreMapStarRewards.player_id)
  return _internal_mutable_player_id();
}
inline void ReqGetExploreMapStarRewards::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetExploreMapStarRewards.player_id)
}

// int32 target = 2;
inline void ReqGetExploreMapStarRewards::clear_target() {
  target_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGetExploreMapStarRewards::_internal_target() const {
  return target_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGetExploreMapStarRewards::target() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetExploreMapStarRewards.target)
  return _internal_target();
}
inline void ReqGetExploreMapStarRewards::_internal_set_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_ = value;
}
inline void ReqGetExploreMapStarRewards::set_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGetExploreMapStarRewards.target)
}

// bytes explore_map_id = 3;
inline void ReqGetExploreMapStarRewards::clear_explore_map_id() {
  explore_map_id_.ClearToEmpty();
}
inline const std::string& ReqGetExploreMapStarRewards::explore_map_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetExploreMapStarRewards.explore_map_id)
  return _internal_explore_map_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGetExploreMapStarRewards::set_explore_map_id(ArgT0&& arg0, ArgT... args) {
 
 explore_map_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGetExploreMapStarRewards.explore_map_id)
}
inline std::string* ReqGetExploreMapStarRewards::mutable_explore_map_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetExploreMapStarRewards.explore_map_id)
  return _internal_mutable_explore_map_id();
}
inline const std::string& ReqGetExploreMapStarRewards::_internal_explore_map_id() const {
  return explore_map_id_.Get();
}
inline void ReqGetExploreMapStarRewards::_internal_set_explore_map_id(const std::string& value) {
  
  explore_map_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGetExploreMapStarRewards::_internal_mutable_explore_map_id() {
  
  return explore_map_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGetExploreMapStarRewards::release_explore_map_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetExploreMapStarRewards.explore_map_id)
  return explore_map_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGetExploreMapStarRewards::set_allocated_explore_map_id(std::string* explore_map_id) {
  if (explore_map_id != nullptr) {
    
  } else {
    
  }
  explore_map_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explore_map_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetExploreMapStarRewards.explore_map_id)
}

// -------------------------------------------------------------------

// AckGetExploreMapStarRewards

// .KWMsg.EGameEventCode event_code = 1;
inline void AckGetExploreMapStarRewards::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckGetExploreMapStarRewards::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckGetExploreMapStarRewards::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetExploreMapStarRewards.event_code)
  return _internal_event_code();
}
inline void AckGetExploreMapStarRewards::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckGetExploreMapStarRewards::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetExploreMapStarRewards.event_code)
}

// repeated .KWMsg.RewardInfo reward_list = 2;
inline int AckGetExploreMapStarRewards::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int AckGetExploreMapStarRewards::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void AckGetExploreMapStarRewards::clear_reward_list() {
  reward_list_.Clear();
}
inline ::KWMsg::RewardInfo* AckGetExploreMapStarRewards::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetExploreMapStarRewards.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
AckGetExploreMapStarRewards::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckGetExploreMapStarRewards.reward_list)
  return &reward_list_;
}
inline const ::KWMsg::RewardInfo& AckGetExploreMapStarRewards::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::KWMsg::RewardInfo& AckGetExploreMapStarRewards::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetExploreMapStarRewards.reward_list)
  return _internal_reward_list(index);
}
inline ::KWMsg::RewardInfo* AckGetExploreMapStarRewards::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::KWMsg::RewardInfo* AckGetExploreMapStarRewards::add_reward_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckGetExploreMapStarRewards.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
AckGetExploreMapStarRewards::reward_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckGetExploreMapStarRewards.reward_list)
  return reward_list_;
}

// -------------------------------------------------------------------

// ReqGetExploreMapBranchlineRewards

// .KWMsg.Ident player_id = 1;
inline bool ReqGetExploreMapBranchlineRewards::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqGetExploreMapBranchlineRewards::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqGetExploreMapBranchlineRewards::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetExploreMapBranchlineRewards::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetExploreMapBranchlineRewards.player_id)
  return _internal_player_id();
}
inline void ReqGetExploreMapBranchlineRewards::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetExploreMapBranchlineRewards.player_id)
}
inline ::KWMsg::Ident* ReqGetExploreMapBranchlineRewards::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetExploreMapBranchlineRewards::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetExploreMapBranchlineRewards.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetExploreMapBranchlineRewards::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqGetExploreMapBranchlineRewards::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetExploreMapBranchlineRewards.player_id)
  return _internal_mutable_player_id();
}
inline void ReqGetExploreMapBranchlineRewards::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetExploreMapBranchlineRewards.player_id)
}

// int32 target = 2;
inline void ReqGetExploreMapBranchlineRewards::clear_target() {
  target_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGetExploreMapBranchlineRewards::_internal_target() const {
  return target_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGetExploreMapBranchlineRewards::target() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetExploreMapBranchlineRewards.target)
  return _internal_target();
}
inline void ReqGetExploreMapBranchlineRewards::_internal_set_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  target_ = value;
}
inline void ReqGetExploreMapBranchlineRewards::set_target(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGetExploreMapBranchlineRewards.target)
}

// bytes explore_map_id = 3;
inline void ReqGetExploreMapBranchlineRewards::clear_explore_map_id() {
  explore_map_id_.ClearToEmpty();
}
inline const std::string& ReqGetExploreMapBranchlineRewards::explore_map_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetExploreMapBranchlineRewards.explore_map_id)
  return _internal_explore_map_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGetExploreMapBranchlineRewards::set_explore_map_id(ArgT0&& arg0, ArgT... args) {
 
 explore_map_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGetExploreMapBranchlineRewards.explore_map_id)
}
inline std::string* ReqGetExploreMapBranchlineRewards::mutable_explore_map_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetExploreMapBranchlineRewards.explore_map_id)
  return _internal_mutable_explore_map_id();
}
inline const std::string& ReqGetExploreMapBranchlineRewards::_internal_explore_map_id() const {
  return explore_map_id_.Get();
}
inline void ReqGetExploreMapBranchlineRewards::_internal_set_explore_map_id(const std::string& value) {
  
  explore_map_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGetExploreMapBranchlineRewards::_internal_mutable_explore_map_id() {
  
  return explore_map_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGetExploreMapBranchlineRewards::release_explore_map_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetExploreMapBranchlineRewards.explore_map_id)
  return explore_map_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGetExploreMapBranchlineRewards::set_allocated_explore_map_id(std::string* explore_map_id) {
  if (explore_map_id != nullptr) {
    
  } else {
    
  }
  explore_map_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explore_map_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetExploreMapBranchlineRewards.explore_map_id)
}

// -------------------------------------------------------------------

// AckGetExploreMapBranchlineRewards

// .KWMsg.EGameEventCode event_code = 1;
inline void AckGetExploreMapBranchlineRewards::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckGetExploreMapBranchlineRewards::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckGetExploreMapBranchlineRewards::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetExploreMapBranchlineRewards.event_code)
  return _internal_event_code();
}
inline void AckGetExploreMapBranchlineRewards::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckGetExploreMapBranchlineRewards::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetExploreMapBranchlineRewards.event_code)
}

// repeated .KWMsg.RewardInfo reward_list = 2;
inline int AckGetExploreMapBranchlineRewards::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int AckGetExploreMapBranchlineRewards::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void AckGetExploreMapBranchlineRewards::clear_reward_list() {
  reward_list_.Clear();
}
inline ::KWMsg::RewardInfo* AckGetExploreMapBranchlineRewards::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetExploreMapBranchlineRewards.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
AckGetExploreMapBranchlineRewards::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckGetExploreMapBranchlineRewards.reward_list)
  return &reward_list_;
}
inline const ::KWMsg::RewardInfo& AckGetExploreMapBranchlineRewards::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::KWMsg::RewardInfo& AckGetExploreMapBranchlineRewards::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetExploreMapBranchlineRewards.reward_list)
  return _internal_reward_list(index);
}
inline ::KWMsg::RewardInfo* AckGetExploreMapBranchlineRewards::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::KWMsg::RewardInfo* AckGetExploreMapBranchlineRewards::add_reward_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckGetExploreMapBranchlineRewards.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
AckGetExploreMapBranchlineRewards::reward_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckGetExploreMapBranchlineRewards.reward_list)
  return reward_list_;
}

// -------------------------------------------------------------------

// ReqUpgradeExploreGuiderFriendship

// .KWMsg.Ident player_id = 1;
inline bool ReqUpgradeExploreGuiderFriendship::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqUpgradeExploreGuiderFriendship::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqUpgradeExploreGuiderFriendship::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqUpgradeExploreGuiderFriendship::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpgradeExploreGuiderFriendship.player_id)
  return _internal_player_id();
}
inline void ReqUpgradeExploreGuiderFriendship::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqUpgradeExploreGuiderFriendship.player_id)
}
inline ::KWMsg::Ident* ReqUpgradeExploreGuiderFriendship::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqUpgradeExploreGuiderFriendship::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpgradeExploreGuiderFriendship.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqUpgradeExploreGuiderFriendship::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqUpgradeExploreGuiderFriendship::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpgradeExploreGuiderFriendship.player_id)
  return _internal_mutable_player_id();
}
inline void ReqUpgradeExploreGuiderFriendship::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpgradeExploreGuiderFriendship.player_id)
}

// bytes explore_guider_id = 2;
inline void ReqUpgradeExploreGuiderFriendship::clear_explore_guider_id() {
  explore_guider_id_.ClearToEmpty();
}
inline const std::string& ReqUpgradeExploreGuiderFriendship::explore_guider_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpgradeExploreGuiderFriendship.explore_guider_id)
  return _internal_explore_guider_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUpgradeExploreGuiderFriendship::set_explore_guider_id(ArgT0&& arg0, ArgT... args) {
 
 explore_guider_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpgradeExploreGuiderFriendship.explore_guider_id)
}
inline std::string* ReqUpgradeExploreGuiderFriendship::mutable_explore_guider_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpgradeExploreGuiderFriendship.explore_guider_id)
  return _internal_mutable_explore_guider_id();
}
inline const std::string& ReqUpgradeExploreGuiderFriendship::_internal_explore_guider_id() const {
  return explore_guider_id_.Get();
}
inline void ReqUpgradeExploreGuiderFriendship::_internal_set_explore_guider_id(const std::string& value) {
  
  explore_guider_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUpgradeExploreGuiderFriendship::_internal_mutable_explore_guider_id() {
  
  return explore_guider_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUpgradeExploreGuiderFriendship::release_explore_guider_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpgradeExploreGuiderFriendship.explore_guider_id)
  return explore_guider_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUpgradeExploreGuiderFriendship::set_allocated_explore_guider_id(std::string* explore_guider_id) {
  if (explore_guider_id != nullptr) {
    
  } else {
    
  }
  explore_guider_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), explore_guider_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpgradeExploreGuiderFriendship.explore_guider_id)
}

// -------------------------------------------------------------------

// AckUpgradeExploreGuiderFriendship

// .KWMsg.EGameEventCode event_code = 1;
inline void AckUpgradeExploreGuiderFriendship::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckUpgradeExploreGuiderFriendship::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckUpgradeExploreGuiderFriendship::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUpgradeExploreGuiderFriendship.event_code)
  return _internal_event_code();
}
inline void AckUpgradeExploreGuiderFriendship::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckUpgradeExploreGuiderFriendship::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckUpgradeExploreGuiderFriendship.event_code)
}

// -------------------------------------------------------------------

// ReqGetAppointReward

// .KWMsg.Ident player_id = 1;
inline bool ReqGetAppointReward::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqGetAppointReward::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqGetAppointReward::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetAppointReward::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetAppointReward.player_id)
  return _internal_player_id();
}
inline void ReqGetAppointReward::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetAppointReward.player_id)
}
inline ::KWMsg::Ident* ReqGetAppointReward::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetAppointReward::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetAppointReward.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetAppointReward::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqGetAppointReward::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetAppointReward.player_id)
  return _internal_mutable_player_id();
}
inline void ReqGetAppointReward::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetAppointReward.player_id)
}

// -------------------------------------------------------------------

// AckGetAppointReward

// .KWMsg.EGameEventCode event_code = 1;
inline void AckGetAppointReward::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckGetAppointReward::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckGetAppointReward::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetAppointReward.event_code)
  return _internal_event_code();
}
inline void AckGetAppointReward::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckGetAppointReward::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetAppointReward.event_code)
}

// repeated .KWMsg.RewardInfo rewards = 2;
inline int AckGetAppointReward::_internal_rewards_size() const {
  return rewards_.size();
}
inline int AckGetAppointReward::rewards_size() const {
  return _internal_rewards_size();
}
inline void AckGetAppointReward::clear_rewards() {
  rewards_.Clear();
}
inline ::KWMsg::RewardInfo* AckGetAppointReward::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetAppointReward.rewards)
  return rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
AckGetAppointReward::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckGetAppointReward.rewards)
  return &rewards_;
}
inline const ::KWMsg::RewardInfo& AckGetAppointReward::_internal_rewards(int index) const {
  return rewards_.Get(index);
}
inline const ::KWMsg::RewardInfo& AckGetAppointReward::rewards(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetAppointReward.rewards)
  return _internal_rewards(index);
}
inline ::KWMsg::RewardInfo* AckGetAppointReward::_internal_add_rewards() {
  return rewards_.Add();
}
inline ::KWMsg::RewardInfo* AckGetAppointReward::add_rewards() {
  // @@protoc_insertion_point(field_add:KWMsg.AckGetAppointReward.rewards)
  return _internal_add_rewards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
AckGetAppointReward::rewards() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckGetAppointReward.rewards)
  return rewards_;
}

// -------------------------------------------------------------------

// ReqSwitchAppointArea

// .KWMsg.Ident player_id = 1;
inline bool ReqSwitchAppointArea::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqSwitchAppointArea::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqSwitchAppointArea::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqSwitchAppointArea::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSwitchAppointArea.player_id)
  return _internal_player_id();
}
inline void ReqSwitchAppointArea::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqSwitchAppointArea.player_id)
}
inline ::KWMsg::Ident* ReqSwitchAppointArea::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqSwitchAppointArea::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSwitchAppointArea.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqSwitchAppointArea::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqSwitchAppointArea::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSwitchAppointArea.player_id)
  return _internal_mutable_player_id();
}
inline void ReqSwitchAppointArea::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSwitchAppointArea.player_id)
}

// bytes appoint_area_id = 2;
inline void ReqSwitchAppointArea::clear_appoint_area_id() {
  appoint_area_id_.ClearToEmpty();
}
inline const std::string& ReqSwitchAppointArea::appoint_area_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSwitchAppointArea.appoint_area_id)
  return _internal_appoint_area_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSwitchAppointArea::set_appoint_area_id(ArgT0&& arg0, ArgT... args) {
 
 appoint_area_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSwitchAppointArea.appoint_area_id)
}
inline std::string* ReqSwitchAppointArea::mutable_appoint_area_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSwitchAppointArea.appoint_area_id)
  return _internal_mutable_appoint_area_id();
}
inline const std::string& ReqSwitchAppointArea::_internal_appoint_area_id() const {
  return appoint_area_id_.Get();
}
inline void ReqSwitchAppointArea::_internal_set_appoint_area_id(const std::string& value) {
  
  appoint_area_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSwitchAppointArea::_internal_mutable_appoint_area_id() {
  
  return appoint_area_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSwitchAppointArea::release_appoint_area_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSwitchAppointArea.appoint_area_id)
  return appoint_area_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSwitchAppointArea::set_allocated_appoint_area_id(std::string* appoint_area_id) {
  if (appoint_area_id != nullptr) {
    
  } else {
    
  }
  appoint_area_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appoint_area_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSwitchAppointArea.appoint_area_id)
}

// -------------------------------------------------------------------

// AckSwitchAppointArea

// .KWMsg.EGameEventCode event_code = 1;
inline void AckSwitchAppointArea::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckSwitchAppointArea::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckSwitchAppointArea::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSwitchAppointArea.event_code)
  return _internal_event_code();
}
inline void AckSwitchAppointArea::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckSwitchAppointArea::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSwitchAppointArea.event_code)
}

// bytes appoint_area_id = 2;
inline void AckSwitchAppointArea::clear_appoint_area_id() {
  appoint_area_id_.ClearToEmpty();
}
inline const std::string& AckSwitchAppointArea::appoint_area_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSwitchAppointArea.appoint_area_id)
  return _internal_appoint_area_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckSwitchAppointArea::set_appoint_area_id(ArgT0&& arg0, ArgT... args) {
 
 appoint_area_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckSwitchAppointArea.appoint_area_id)
}
inline std::string* AckSwitchAppointArea::mutable_appoint_area_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSwitchAppointArea.appoint_area_id)
  return _internal_mutable_appoint_area_id();
}
inline const std::string& AckSwitchAppointArea::_internal_appoint_area_id() const {
  return appoint_area_id_.Get();
}
inline void AckSwitchAppointArea::_internal_set_appoint_area_id(const std::string& value) {
  
  appoint_area_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckSwitchAppointArea::_internal_mutable_appoint_area_id() {
  
  return appoint_area_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckSwitchAppointArea::release_appoint_area_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckSwitchAppointArea.appoint_area_id)
  return appoint_area_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckSwitchAppointArea::set_allocated_appoint_area_id(std::string* appoint_area_id) {
  if (appoint_area_id != nullptr) {
    
  } else {
    
  }
  appoint_area_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), appoint_area_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckSwitchAppointArea.appoint_area_id)
}

// repeated .KWMsg.RewardInfo rewards = 3;
inline int AckSwitchAppointArea::_internal_rewards_size() const {
  return rewards_.size();
}
inline int AckSwitchAppointArea::rewards_size() const {
  return _internal_rewards_size();
}
inline void AckSwitchAppointArea::clear_rewards() {
  rewards_.Clear();
}
inline ::KWMsg::RewardInfo* AckSwitchAppointArea::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSwitchAppointArea.rewards)
  return rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
AckSwitchAppointArea::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckSwitchAppointArea.rewards)
  return &rewards_;
}
inline const ::KWMsg::RewardInfo& AckSwitchAppointArea::_internal_rewards(int index) const {
  return rewards_.Get(index);
}
inline const ::KWMsg::RewardInfo& AckSwitchAppointArea::rewards(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSwitchAppointArea.rewards)
  return _internal_rewards(index);
}
inline ::KWMsg::RewardInfo* AckSwitchAppointArea::_internal_add_rewards() {
  return rewards_.Add();
}
inline ::KWMsg::RewardInfo* AckSwitchAppointArea::add_rewards() {
  // @@protoc_insertion_point(field_add:KWMsg.AckSwitchAppointArea.rewards)
  return _internal_add_rewards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
AckSwitchAppointArea::rewards() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckSwitchAppointArea.rewards)
  return rewards_;
}

// -------------------------------------------------------------------

// ReqStartAffair

// .KWMsg.Ident player_id = 1;
inline bool ReqStartAffair::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqStartAffair::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqStartAffair::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqStartAffair::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqStartAffair.player_id)
  return _internal_player_id();
}
inline void ReqStartAffair::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqStartAffair.player_id)
}
inline ::KWMsg::Ident* ReqStartAffair::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqStartAffair::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqStartAffair.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqStartAffair::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqStartAffair::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqStartAffair.player_id)
  return _internal_mutable_player_id();
}
inline void ReqStartAffair::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqStartAffair.player_id)
}

// bytes affair_position = 2;
inline void ReqStartAffair::clear_affair_position() {
  affair_position_.ClearToEmpty();
}
inline const std::string& ReqStartAffair::affair_position() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqStartAffair.affair_position)
  return _internal_affair_position();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqStartAffair::set_affair_position(ArgT0&& arg0, ArgT... args) {
 
 affair_position_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqStartAffair.affair_position)
}
inline std::string* ReqStartAffair::mutable_affair_position() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqStartAffair.affair_position)
  return _internal_mutable_affair_position();
}
inline const std::string& ReqStartAffair::_internal_affair_position() const {
  return affair_position_.Get();
}
inline void ReqStartAffair::_internal_set_affair_position(const std::string& value) {
  
  affair_position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqStartAffair::_internal_mutable_affair_position() {
  
  return affair_position_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqStartAffair::release_affair_position() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqStartAffair.affair_position)
  return affair_position_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqStartAffair::set_allocated_affair_position(std::string* affair_position) {
  if (affair_position != nullptr) {
    
  } else {
    
  }
  affair_position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affair_position,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqStartAffair.affair_position)
}

// bytes witch_id = 3;
inline void ReqStartAffair::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqStartAffair::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqStartAffair.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqStartAffair::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqStartAffair.witch_id)
}
inline std::string* ReqStartAffair::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqStartAffair.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqStartAffair::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqStartAffair::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqStartAffair::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqStartAffair::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqStartAffair.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqStartAffair::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqStartAffair.witch_id)
}

// .KWMsg.Ident affair_guid = 4;
inline bool ReqStartAffair::_internal_has_affair_guid() const {
  return this != internal_default_instance() && affair_guid_ != nullptr;
}
inline bool ReqStartAffair::has_affair_guid() const {
  return _internal_has_affair_guid();
}
inline const ::KWMsg::Ident& ReqStartAffair::_internal_affair_guid() const {
  const ::KWMsg::Ident* p = affair_guid_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqStartAffair::affair_guid() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqStartAffair.affair_guid)
  return _internal_affair_guid();
}
inline void ReqStartAffair::unsafe_arena_set_allocated_affair_guid(
    ::KWMsg::Ident* affair_guid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affair_guid_);
  }
  affair_guid_ = affair_guid;
  if (affair_guid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqStartAffair.affair_guid)
}
inline ::KWMsg::Ident* ReqStartAffair::release_affair_guid() {
  
  ::KWMsg::Ident* temp = affair_guid_;
  affair_guid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqStartAffair::unsafe_arena_release_affair_guid() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqStartAffair.affair_guid)
  
  ::KWMsg::Ident* temp = affair_guid_;
  affair_guid_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqStartAffair::_internal_mutable_affair_guid() {
  
  if (affair_guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    affair_guid_ = p;
  }
  return affair_guid_;
}
inline ::KWMsg::Ident* ReqStartAffair::mutable_affair_guid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqStartAffair.affair_guid)
  return _internal_mutable_affair_guid();
}
inline void ReqStartAffair::set_allocated_affair_guid(::KWMsg::Ident* affair_guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(affair_guid_);
  }
  if (affair_guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affair_guid));
    if (message_arena != submessage_arena) {
      affair_guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affair_guid, submessage_arena);
    }
    
  } else {
    
  }
  affair_guid_ = affair_guid;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqStartAffair.affair_guid)
}

// -------------------------------------------------------------------

// AckStartAffair

// .KWMsg.EGameEventCode event_code = 1;
inline void AckStartAffair::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckStartAffair::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckStartAffair::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckStartAffair.event_code)
  return _internal_event_code();
}
inline void AckStartAffair::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckStartAffair::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckStartAffair.event_code)
}

// bytes affair_position = 2;
inline void AckStartAffair::clear_affair_position() {
  affair_position_.ClearToEmpty();
}
inline const std::string& AckStartAffair::affair_position() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckStartAffair.affair_position)
  return _internal_affair_position();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckStartAffair::set_affair_position(ArgT0&& arg0, ArgT... args) {
 
 affair_position_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckStartAffair.affair_position)
}
inline std::string* AckStartAffair::mutable_affair_position() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckStartAffair.affair_position)
  return _internal_mutable_affair_position();
}
inline const std::string& AckStartAffair::_internal_affair_position() const {
  return affair_position_.Get();
}
inline void AckStartAffair::_internal_set_affair_position(const std::string& value) {
  
  affair_position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckStartAffair::_internal_mutable_affair_position() {
  
  return affair_position_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckStartAffair::release_affair_position() {
  // @@protoc_insertion_point(field_release:KWMsg.AckStartAffair.affair_position)
  return affair_position_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckStartAffair::set_allocated_affair_position(std::string* affair_position) {
  if (affair_position != nullptr) {
    
  } else {
    
  }
  affair_position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affair_position,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckStartAffair.affair_position)
}

// bytes witch_id = 3;
inline void AckStartAffair::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& AckStartAffair::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckStartAffair.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckStartAffair::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckStartAffair.witch_id)
}
inline std::string* AckStartAffair::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckStartAffair.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& AckStartAffair::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void AckStartAffair::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckStartAffair::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckStartAffair::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckStartAffair.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckStartAffair::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckStartAffair.witch_id)
}

// .KWMsg.Ident affair_guid = 4;
inline bool AckStartAffair::_internal_has_affair_guid() const {
  return this != internal_default_instance() && affair_guid_ != nullptr;
}
inline bool AckStartAffair::has_affair_guid() const {
  return _internal_has_affair_guid();
}
inline const ::KWMsg::Ident& AckStartAffair::_internal_affair_guid() const {
  const ::KWMsg::Ident* p = affair_guid_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckStartAffair::affair_guid() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckStartAffair.affair_guid)
  return _internal_affair_guid();
}
inline void AckStartAffair::unsafe_arena_set_allocated_affair_guid(
    ::KWMsg::Ident* affair_guid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affair_guid_);
  }
  affair_guid_ = affair_guid;
  if (affair_guid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckStartAffair.affair_guid)
}
inline ::KWMsg::Ident* AckStartAffair::release_affair_guid() {
  
  ::KWMsg::Ident* temp = affair_guid_;
  affair_guid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckStartAffair::unsafe_arena_release_affair_guid() {
  // @@protoc_insertion_point(field_release:KWMsg.AckStartAffair.affair_guid)
  
  ::KWMsg::Ident* temp = affair_guid_;
  affair_guid_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckStartAffair::_internal_mutable_affair_guid() {
  
  if (affair_guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    affair_guid_ = p;
  }
  return affair_guid_;
}
inline ::KWMsg::Ident* AckStartAffair::mutable_affair_guid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckStartAffair.affair_guid)
  return _internal_mutable_affair_guid();
}
inline void AckStartAffair::set_allocated_affair_guid(::KWMsg::Ident* affair_guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(affair_guid_);
  }
  if (affair_guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affair_guid));
    if (message_arena != submessage_arena) {
      affair_guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affair_guid, submessage_arena);
    }
    
  } else {
    
  }
  affair_guid_ = affair_guid;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckStartAffair.affair_guid)
}

// -------------------------------------------------------------------

// ReqTerminateAffair

// .KWMsg.Ident player_id = 1;
inline bool ReqTerminateAffair::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqTerminateAffair::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqTerminateAffair::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqTerminateAffair::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTerminateAffair.player_id)
  return _internal_player_id();
}
inline void ReqTerminateAffair::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqTerminateAffair.player_id)
}
inline ::KWMsg::Ident* ReqTerminateAffair::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqTerminateAffair::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTerminateAffair.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqTerminateAffair::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqTerminateAffair::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTerminateAffair.player_id)
  return _internal_mutable_player_id();
}
inline void ReqTerminateAffair::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTerminateAffair.player_id)
}

// bytes affair_position = 2;
inline void ReqTerminateAffair::clear_affair_position() {
  affair_position_.ClearToEmpty();
}
inline const std::string& ReqTerminateAffair::affair_position() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTerminateAffair.affair_position)
  return _internal_affair_position();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqTerminateAffair::set_affair_position(ArgT0&& arg0, ArgT... args) {
 
 affair_position_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqTerminateAffair.affair_position)
}
inline std::string* ReqTerminateAffair::mutable_affair_position() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTerminateAffair.affair_position)
  return _internal_mutable_affair_position();
}
inline const std::string& ReqTerminateAffair::_internal_affair_position() const {
  return affair_position_.Get();
}
inline void ReqTerminateAffair::_internal_set_affair_position(const std::string& value) {
  
  affair_position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqTerminateAffair::_internal_mutable_affair_position() {
  
  return affair_position_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqTerminateAffair::release_affair_position() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTerminateAffair.affair_position)
  return affair_position_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqTerminateAffair::set_allocated_affair_position(std::string* affair_position) {
  if (affair_position != nullptr) {
    
  } else {
    
  }
  affair_position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affair_position,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTerminateAffair.affair_position)
}

// -------------------------------------------------------------------

// AckTerminateAffair

// .KWMsg.EGameEventCode event_code = 1;
inline void AckTerminateAffair::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckTerminateAffair::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckTerminateAffair::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTerminateAffair.event_code)
  return _internal_event_code();
}
inline void AckTerminateAffair::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckTerminateAffair::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckTerminateAffair.event_code)
}

// bytes affair_position = 2;
inline void AckTerminateAffair::clear_affair_position() {
  affair_position_.ClearToEmpty();
}
inline const std::string& AckTerminateAffair::affair_position() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTerminateAffair.affair_position)
  return _internal_affair_position();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckTerminateAffair::set_affair_position(ArgT0&& arg0, ArgT... args) {
 
 affair_position_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckTerminateAffair.affair_position)
}
inline std::string* AckTerminateAffair::mutable_affair_position() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckTerminateAffair.affair_position)
  return _internal_mutable_affair_position();
}
inline const std::string& AckTerminateAffair::_internal_affair_position() const {
  return affair_position_.Get();
}
inline void AckTerminateAffair::_internal_set_affair_position(const std::string& value) {
  
  affair_position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckTerminateAffair::_internal_mutable_affair_position() {
  
  return affair_position_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckTerminateAffair::release_affair_position() {
  // @@protoc_insertion_point(field_release:KWMsg.AckTerminateAffair.affair_position)
  return affair_position_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckTerminateAffair::set_allocated_affair_position(std::string* affair_position) {
  if (affair_position != nullptr) {
    
  } else {
    
  }
  affair_position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affair_position,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckTerminateAffair.affair_position)
}

// -------------------------------------------------------------------

// ReqGetAffairReward

// .KWMsg.Ident player_id = 1;
inline bool ReqGetAffairReward::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqGetAffairReward::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqGetAffairReward::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetAffairReward::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetAffairReward.player_id)
  return _internal_player_id();
}
inline void ReqGetAffairReward::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetAffairReward.player_id)
}
inline ::KWMsg::Ident* ReqGetAffairReward::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetAffairReward::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetAffairReward.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetAffairReward::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqGetAffairReward::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetAffairReward.player_id)
  return _internal_mutable_player_id();
}
inline void ReqGetAffairReward::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetAffairReward.player_id)
}

// bytes affair_position = 2;
inline void ReqGetAffairReward::clear_affair_position() {
  affair_position_.ClearToEmpty();
}
inline const std::string& ReqGetAffairReward::affair_position() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetAffairReward.affair_position)
  return _internal_affair_position();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGetAffairReward::set_affair_position(ArgT0&& arg0, ArgT... args) {
 
 affair_position_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGetAffairReward.affair_position)
}
inline std::string* ReqGetAffairReward::mutable_affair_position() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetAffairReward.affair_position)
  return _internal_mutable_affair_position();
}
inline const std::string& ReqGetAffairReward::_internal_affair_position() const {
  return affair_position_.Get();
}
inline void ReqGetAffairReward::_internal_set_affair_position(const std::string& value) {
  
  affair_position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGetAffairReward::_internal_mutable_affair_position() {
  
  return affair_position_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGetAffairReward::release_affair_position() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetAffairReward.affair_position)
  return affair_position_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGetAffairReward::set_allocated_affair_position(std::string* affair_position) {
  if (affair_position != nullptr) {
    
  } else {
    
  }
  affair_position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affair_position,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetAffairReward.affair_position)
}

// -------------------------------------------------------------------

// AckGetAffairReward

// .KWMsg.EGameEventCode event_code = 1;
inline void AckGetAffairReward::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckGetAffairReward::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckGetAffairReward::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetAffairReward.event_code)
  return _internal_event_code();
}
inline void AckGetAffairReward::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckGetAffairReward::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetAffairReward.event_code)
}

// bytes affair_position = 2;
inline void AckGetAffairReward::clear_affair_position() {
  affair_position_.ClearToEmpty();
}
inline const std::string& AckGetAffairReward::affair_position() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetAffairReward.affair_position)
  return _internal_affair_position();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckGetAffairReward::set_affair_position(ArgT0&& arg0, ArgT... args) {
 
 affair_position_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckGetAffairReward.affair_position)
}
inline std::string* AckGetAffairReward::mutable_affair_position() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetAffairReward.affair_position)
  return _internal_mutable_affair_position();
}
inline const std::string& AckGetAffairReward::_internal_affair_position() const {
  return affair_position_.Get();
}
inline void AckGetAffairReward::_internal_set_affair_position(const std::string& value) {
  
  affair_position_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckGetAffairReward::_internal_mutable_affair_position() {
  
  return affair_position_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckGetAffairReward::release_affair_position() {
  // @@protoc_insertion_point(field_release:KWMsg.AckGetAffairReward.affair_position)
  return affair_position_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckGetAffairReward::set_allocated_affair_position(std::string* affair_position) {
  if (affair_position != nullptr) {
    
  } else {
    
  }
  affair_position_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), affair_position,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckGetAffairReward.affair_position)
}

// repeated .KWMsg.RewardInfo rewards = 3;
inline int AckGetAffairReward::_internal_rewards_size() const {
  return rewards_.size();
}
inline int AckGetAffairReward::rewards_size() const {
  return _internal_rewards_size();
}
inline void AckGetAffairReward::clear_rewards() {
  rewards_.Clear();
}
inline ::KWMsg::RewardInfo* AckGetAffairReward::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetAffairReward.rewards)
  return rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
AckGetAffairReward::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckGetAffairReward.rewards)
  return &rewards_;
}
inline const ::KWMsg::RewardInfo& AckGetAffairReward::_internal_rewards(int index) const {
  return rewards_.Get(index);
}
inline const ::KWMsg::RewardInfo& AckGetAffairReward::rewards(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetAffairReward.rewards)
  return _internal_rewards(index);
}
inline ::KWMsg::RewardInfo* AckGetAffairReward::_internal_add_rewards() {
  return rewards_.Add();
}
inline ::KWMsg::RewardInfo* AckGetAffairReward::add_rewards() {
  // @@protoc_insertion_point(field_add:KWMsg.AckGetAffairReward.rewards)
  return _internal_add_rewards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
AckGetAffairReward::rewards() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckGetAffairReward.rewards)
  return rewards_;
}

// -------------------------------------------------------------------

// ReqDeleteAffair

// .KWMsg.Ident player_id = 1;
inline bool ReqDeleteAffair::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqDeleteAffair::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqDeleteAffair::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqDeleteAffair::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDeleteAffair.player_id)
  return _internal_player_id();
}
inline void ReqDeleteAffair::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqDeleteAffair.player_id)
}
inline ::KWMsg::Ident* ReqDeleteAffair::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqDeleteAffair::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDeleteAffair.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqDeleteAffair::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqDeleteAffair::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDeleteAffair.player_id)
  return _internal_mutable_player_id();
}
inline void ReqDeleteAffair::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDeleteAffair.player_id)
}

// .KWMsg.Ident affair_guid = 2;
inline bool ReqDeleteAffair::_internal_has_affair_guid() const {
  return this != internal_default_instance() && affair_guid_ != nullptr;
}
inline bool ReqDeleteAffair::has_affair_guid() const {
  return _internal_has_affair_guid();
}
inline const ::KWMsg::Ident& ReqDeleteAffair::_internal_affair_guid() const {
  const ::KWMsg::Ident* p = affair_guid_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqDeleteAffair::affair_guid() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDeleteAffair.affair_guid)
  return _internal_affair_guid();
}
inline void ReqDeleteAffair::unsafe_arena_set_allocated_affair_guid(
    ::KWMsg::Ident* affair_guid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affair_guid_);
  }
  affair_guid_ = affair_guid;
  if (affair_guid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqDeleteAffair.affair_guid)
}
inline ::KWMsg::Ident* ReqDeleteAffair::release_affair_guid() {
  
  ::KWMsg::Ident* temp = affair_guid_;
  affair_guid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqDeleteAffair::unsafe_arena_release_affair_guid() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDeleteAffair.affair_guid)
  
  ::KWMsg::Ident* temp = affair_guid_;
  affair_guid_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqDeleteAffair::_internal_mutable_affair_guid() {
  
  if (affair_guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    affair_guid_ = p;
  }
  return affair_guid_;
}
inline ::KWMsg::Ident* ReqDeleteAffair::mutable_affair_guid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDeleteAffair.affair_guid)
  return _internal_mutable_affair_guid();
}
inline void ReqDeleteAffair::set_allocated_affair_guid(::KWMsg::Ident* affair_guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(affair_guid_);
  }
  if (affair_guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affair_guid));
    if (message_arena != submessage_arena) {
      affair_guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affair_guid, submessage_arena);
    }
    
  } else {
    
  }
  affair_guid_ = affair_guid;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDeleteAffair.affair_guid)
}

// -------------------------------------------------------------------

// AckDeleteAffair

// .KWMsg.EGameEventCode event_code = 1;
inline void AckDeleteAffair::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckDeleteAffair::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckDeleteAffair::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDeleteAffair.event_code)
  return _internal_event_code();
}
inline void AckDeleteAffair::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckDeleteAffair::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckDeleteAffair.event_code)
}

// .KWMsg.Ident affair_guid = 2;
inline bool AckDeleteAffair::_internal_has_affair_guid() const {
  return this != internal_default_instance() && affair_guid_ != nullptr;
}
inline bool AckDeleteAffair::has_affair_guid() const {
  return _internal_has_affair_guid();
}
inline const ::KWMsg::Ident& AckDeleteAffair::_internal_affair_guid() const {
  const ::KWMsg::Ident* p = affair_guid_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckDeleteAffair::affair_guid() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDeleteAffair.affair_guid)
  return _internal_affair_guid();
}
inline void AckDeleteAffair::unsafe_arena_set_allocated_affair_guid(
    ::KWMsg::Ident* affair_guid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affair_guid_);
  }
  affair_guid_ = affair_guid;
  if (affair_guid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckDeleteAffair.affair_guid)
}
inline ::KWMsg::Ident* AckDeleteAffair::release_affair_guid() {
  
  ::KWMsg::Ident* temp = affair_guid_;
  affair_guid_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckDeleteAffair::unsafe_arena_release_affair_guid() {
  // @@protoc_insertion_point(field_release:KWMsg.AckDeleteAffair.affair_guid)
  
  ::KWMsg::Ident* temp = affair_guid_;
  affair_guid_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckDeleteAffair::_internal_mutable_affair_guid() {
  
  if (affair_guid_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    affair_guid_ = p;
  }
  return affair_guid_;
}
inline ::KWMsg::Ident* AckDeleteAffair::mutable_affair_guid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckDeleteAffair.affair_guid)
  return _internal_mutable_affair_guid();
}
inline void AckDeleteAffair::set_allocated_affair_guid(::KWMsg::Ident* affair_guid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(affair_guid_);
  }
  if (affair_guid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(affair_guid));
    if (message_arena != submessage_arena) {
      affair_guid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, affair_guid, submessage_arena);
    }
    
  } else {
    
  }
  affair_guid_ = affair_guid;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckDeleteAffair.affair_guid)
}

// -------------------------------------------------------------------

// ReqStartAppoint

// .KWMsg.Ident player_id = 1;
inline bool ReqStartAppoint::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqStartAppoint::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqStartAppoint::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqStartAppoint::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqStartAppoint.player_id)
  return _internal_player_id();
}
inline void ReqStartAppoint::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqStartAppoint.player_id)
}
inline ::KWMsg::Ident* ReqStartAppoint::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqStartAppoint::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqStartAppoint.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqStartAppoint::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqStartAppoint::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqStartAppoint.player_id)
  return _internal_mutable_player_id();
}
inline void ReqStartAppoint::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqStartAppoint.player_id)
}

// -------------------------------------------------------------------

// AckStartAppoint

// .KWMsg.EGameEventCode event_code = 1;
inline void AckStartAppoint::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckStartAppoint::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckStartAppoint::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckStartAppoint.event_code)
  return _internal_event_code();
}
inline void AckStartAppoint::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckStartAppoint::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckStartAppoint.event_code)
}

// -------------------------------------------------------------------

// ReqSetHouseKeeper

// .KWMsg.Ident player_id = 1;
inline bool ReqSetHouseKeeper::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqSetHouseKeeper::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqSetHouseKeeper::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqSetHouseKeeper::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSetHouseKeeper.player_id)
  return _internal_player_id();
}
inline void ReqSetHouseKeeper::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqSetHouseKeeper.player_id)
}
inline ::KWMsg::Ident* ReqSetHouseKeeper::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqSetHouseKeeper::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSetHouseKeeper.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqSetHouseKeeper::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqSetHouseKeeper::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSetHouseKeeper.player_id)
  return _internal_mutable_player_id();
}
inline void ReqSetHouseKeeper::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSetHouseKeeper.player_id)
}

// bytes witch_id = 2;
inline void ReqSetHouseKeeper::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqSetHouseKeeper::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSetHouseKeeper.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSetHouseKeeper::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSetHouseKeeper.witch_id)
}
inline std::string* ReqSetHouseKeeper::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSetHouseKeeper.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqSetHouseKeeper::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqSetHouseKeeper::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSetHouseKeeper::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSetHouseKeeper::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSetHouseKeeper.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSetHouseKeeper::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSetHouseKeeper.witch_id)
}

// -------------------------------------------------------------------

// AckSetHouseKeeper

// .KWMsg.EGameEventCode event_code = 1;
inline void AckSetHouseKeeper::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckSetHouseKeeper::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckSetHouseKeeper::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSetHouseKeeper.event_code)
  return _internal_event_code();
}
inline void AckSetHouseKeeper::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckSetHouseKeeper::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSetHouseKeeper.event_code)
}

// -------------------------------------------------------------------

// ReqSetHouseKeeperSkinId

// .KWMsg.Ident player_id = 1;
inline bool ReqSetHouseKeeperSkinId::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqSetHouseKeeperSkinId::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqSetHouseKeeperSkinId::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqSetHouseKeeperSkinId::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSetHouseKeeperSkinId.player_id)
  return _internal_player_id();
}
inline void ReqSetHouseKeeperSkinId::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqSetHouseKeeperSkinId.player_id)
}
inline ::KWMsg::Ident* ReqSetHouseKeeperSkinId::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqSetHouseKeeperSkinId::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSetHouseKeeperSkinId.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqSetHouseKeeperSkinId::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqSetHouseKeeperSkinId::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSetHouseKeeperSkinId.player_id)
  return _internal_mutable_player_id();
}
inline void ReqSetHouseKeeperSkinId::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSetHouseKeeperSkinId.player_id)
}

// bytes witch_id = 2;
inline void ReqSetHouseKeeperSkinId::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqSetHouseKeeperSkinId::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSetHouseKeeperSkinId.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSetHouseKeeperSkinId::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSetHouseKeeperSkinId.witch_id)
}
inline std::string* ReqSetHouseKeeperSkinId::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSetHouseKeeperSkinId.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqSetHouseKeeperSkinId::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqSetHouseKeeperSkinId::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSetHouseKeeperSkinId::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSetHouseKeeperSkinId::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSetHouseKeeperSkinId.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSetHouseKeeperSkinId::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSetHouseKeeperSkinId.witch_id)
}

// bytes witch_skin_id = 3;
inline void ReqSetHouseKeeperSkinId::clear_witch_skin_id() {
  witch_skin_id_.ClearToEmpty();
}
inline const std::string& ReqSetHouseKeeperSkinId::witch_skin_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSetHouseKeeperSkinId.witch_skin_id)
  return _internal_witch_skin_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSetHouseKeeperSkinId::set_witch_skin_id(ArgT0&& arg0, ArgT... args) {
 
 witch_skin_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSetHouseKeeperSkinId.witch_skin_id)
}
inline std::string* ReqSetHouseKeeperSkinId::mutable_witch_skin_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSetHouseKeeperSkinId.witch_skin_id)
  return _internal_mutable_witch_skin_id();
}
inline const std::string& ReqSetHouseKeeperSkinId::_internal_witch_skin_id() const {
  return witch_skin_id_.Get();
}
inline void ReqSetHouseKeeperSkinId::_internal_set_witch_skin_id(const std::string& value) {
  
  witch_skin_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSetHouseKeeperSkinId::_internal_mutable_witch_skin_id() {
  
  return witch_skin_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSetHouseKeeperSkinId::release_witch_skin_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSetHouseKeeperSkinId.witch_skin_id)
  return witch_skin_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSetHouseKeeperSkinId::set_allocated_witch_skin_id(std::string* witch_skin_id) {
  if (witch_skin_id != nullptr) {
    
  } else {
    
  }
  witch_skin_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_skin_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSetHouseKeeperSkinId.witch_skin_id)
}

// -------------------------------------------------------------------

// AckSetHouseKeeperSkinId

// .KWMsg.EGameEventCode event_code = 1;
inline void AckSetHouseKeeperSkinId::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckSetHouseKeeperSkinId::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckSetHouseKeeperSkinId::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSetHouseKeeperSkinId.event_code)
  return _internal_event_code();
}
inline void AckSetHouseKeeperSkinId::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckSetHouseKeeperSkinId::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSetHouseKeeperSkinId.event_code)
}

// -------------------------------------------------------------------

// ReqHousekeeperInitSignin

// .KWMsg.Ident player_id = 1;
inline bool ReqHousekeeperInitSignin::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqHousekeeperInitSignin::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqHousekeeperInitSignin::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqHousekeeperInitSignin::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqHousekeeperInitSignin.player_id)
  return _internal_player_id();
}
inline void ReqHousekeeperInitSignin::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqHousekeeperInitSignin.player_id)
}
inline ::KWMsg::Ident* ReqHousekeeperInitSignin::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqHousekeeperInitSignin::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqHousekeeperInitSignin.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqHousekeeperInitSignin::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqHousekeeperInitSignin::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqHousekeeperInitSignin.player_id)
  return _internal_mutable_player_id();
}
inline void ReqHousekeeperInitSignin::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqHousekeeperInitSignin.player_id)
}

// -------------------------------------------------------------------

// AckHousekeeperInitSignin

// .KWMsg.EGameEventCode event_code = 1;
inline void AckHousekeeperInitSignin::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckHousekeeperInitSignin::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckHousekeeperInitSignin::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckHousekeeperInitSignin.event_code)
  return _internal_event_code();
}
inline void AckHousekeeperInitSignin::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckHousekeeperInitSignin::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckHousekeeperInitSignin.event_code)
}

// -------------------------------------------------------------------

// ReqHousekeeperFinishedSignin

// .KWMsg.Ident player_id = 1;
inline bool ReqHousekeeperFinishedSignin::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqHousekeeperFinishedSignin::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqHousekeeperFinishedSignin::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqHousekeeperFinishedSignin::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqHousekeeperFinishedSignin.player_id)
  return _internal_player_id();
}
inline void ReqHousekeeperFinishedSignin::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqHousekeeperFinishedSignin.player_id)
}
inline ::KWMsg::Ident* ReqHousekeeperFinishedSignin::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqHousekeeperFinishedSignin::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqHousekeeperFinishedSignin.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqHousekeeperFinishedSignin::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqHousekeeperFinishedSignin::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqHousekeeperFinishedSignin.player_id)
  return _internal_mutable_player_id();
}
inline void ReqHousekeeperFinishedSignin::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqHousekeeperFinishedSignin.player_id)
}

// -------------------------------------------------------------------

// AckHousekeeperFinishedSignin

// .KWMsg.EGameEventCode event_code = 1;
inline void AckHousekeeperFinishedSignin::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckHousekeeperFinishedSignin::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckHousekeeperFinishedSignin::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckHousekeeperFinishedSignin.event_code)
  return _internal_event_code();
}
inline void AckHousekeeperFinishedSignin::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckHousekeeperFinishedSignin::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckHousekeeperFinishedSignin.event_code)
}

// -------------------------------------------------------------------

// ReqGetPneumaIslandStarReward

// .KWMsg.Ident player_id = 1;
inline bool ReqGetPneumaIslandStarReward::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqGetPneumaIslandStarReward::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqGetPneumaIslandStarReward::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetPneumaIslandStarReward::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetPneumaIslandStarReward.player_id)
  return _internal_player_id();
}
inline void ReqGetPneumaIslandStarReward::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetPneumaIslandStarReward.player_id)
}
inline ::KWMsg::Ident* ReqGetPneumaIslandStarReward::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetPneumaIslandStarReward::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetPneumaIslandStarReward.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetPneumaIslandStarReward::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqGetPneumaIslandStarReward::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetPneumaIslandStarReward.player_id)
  return _internal_mutable_player_id();
}
inline void ReqGetPneumaIslandStarReward::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetPneumaIslandStarReward.player_id)
}

// bytes boss_id = 2;
inline void ReqGetPneumaIslandStarReward::clear_boss_id() {
  boss_id_.ClearToEmpty();
}
inline const std::string& ReqGetPneumaIslandStarReward::boss_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetPneumaIslandStarReward.boss_id)
  return _internal_boss_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGetPneumaIslandStarReward::set_boss_id(ArgT0&& arg0, ArgT... args) {
 
 boss_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGetPneumaIslandStarReward.boss_id)
}
inline std::string* ReqGetPneumaIslandStarReward::mutable_boss_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetPneumaIslandStarReward.boss_id)
  return _internal_mutable_boss_id();
}
inline const std::string& ReqGetPneumaIslandStarReward::_internal_boss_id() const {
  return boss_id_.Get();
}
inline void ReqGetPneumaIslandStarReward::_internal_set_boss_id(const std::string& value) {
  
  boss_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGetPneumaIslandStarReward::_internal_mutable_boss_id() {
  
  return boss_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGetPneumaIslandStarReward::release_boss_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetPneumaIslandStarReward.boss_id)
  return boss_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGetPneumaIslandStarReward::set_allocated_boss_id(std::string* boss_id) {
  if (boss_id != nullptr) {
    
  } else {
    
  }
  boss_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boss_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetPneumaIslandStarReward.boss_id)
}

// int32 reward_idx = 3;
inline void ReqGetPneumaIslandStarReward::clear_reward_idx() {
  reward_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGetPneumaIslandStarReward::_internal_reward_idx() const {
  return reward_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqGetPneumaIslandStarReward::reward_idx() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetPneumaIslandStarReward.reward_idx)
  return _internal_reward_idx();
}
inline void ReqGetPneumaIslandStarReward::_internal_set_reward_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_idx_ = value;
}
inline void ReqGetPneumaIslandStarReward::set_reward_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward_idx(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqGetPneumaIslandStarReward.reward_idx)
}

// -------------------------------------------------------------------

// AckGetPneumaIslandStarReward

// .KWMsg.EGameEventCode event_code = 1;
inline void AckGetPneumaIslandStarReward::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckGetPneumaIslandStarReward::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckGetPneumaIslandStarReward::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPneumaIslandStarReward.event_code)
  return _internal_event_code();
}
inline void AckGetPneumaIslandStarReward::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckGetPneumaIslandStarReward::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetPneumaIslandStarReward.event_code)
}

// bytes boss_id = 2;
inline void AckGetPneumaIslandStarReward::clear_boss_id() {
  boss_id_.ClearToEmpty();
}
inline const std::string& AckGetPneumaIslandStarReward::boss_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPneumaIslandStarReward.boss_id)
  return _internal_boss_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckGetPneumaIslandStarReward::set_boss_id(ArgT0&& arg0, ArgT... args) {
 
 boss_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckGetPneumaIslandStarReward.boss_id)
}
inline std::string* AckGetPneumaIslandStarReward::mutable_boss_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetPneumaIslandStarReward.boss_id)
  return _internal_mutable_boss_id();
}
inline const std::string& AckGetPneumaIslandStarReward::_internal_boss_id() const {
  return boss_id_.Get();
}
inline void AckGetPneumaIslandStarReward::_internal_set_boss_id(const std::string& value) {
  
  boss_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckGetPneumaIslandStarReward::_internal_mutable_boss_id() {
  
  return boss_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckGetPneumaIslandStarReward::release_boss_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckGetPneumaIslandStarReward.boss_id)
  return boss_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckGetPneumaIslandStarReward::set_allocated_boss_id(std::string* boss_id) {
  if (boss_id != nullptr) {
    
  } else {
    
  }
  boss_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boss_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckGetPneumaIslandStarReward.boss_id)
}

// int32 reward_idx = 3;
inline void AckGetPneumaIslandStarReward::clear_reward_idx() {
  reward_idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetPneumaIslandStarReward::_internal_reward_idx() const {
  return reward_idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetPneumaIslandStarReward::reward_idx() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPneumaIslandStarReward.reward_idx)
  return _internal_reward_idx();
}
inline void AckGetPneumaIslandStarReward::_internal_set_reward_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  reward_idx_ = value;
}
inline void AckGetPneumaIslandStarReward::set_reward_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_reward_idx(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetPneumaIslandStarReward.reward_idx)
}

// repeated .KWMsg.RewardInfo rewards = 4;
inline int AckGetPneumaIslandStarReward::_internal_rewards_size() const {
  return rewards_.size();
}
inline int AckGetPneumaIslandStarReward::rewards_size() const {
  return _internal_rewards_size();
}
inline void AckGetPneumaIslandStarReward::clear_rewards() {
  rewards_.Clear();
}
inline ::KWMsg::RewardInfo* AckGetPneumaIslandStarReward::mutable_rewards(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetPneumaIslandStarReward.rewards)
  return rewards_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
AckGetPneumaIslandStarReward::mutable_rewards() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckGetPneumaIslandStarReward.rewards)
  return &rewards_;
}
inline const ::KWMsg::RewardInfo& AckGetPneumaIslandStarReward::_internal_rewards(int index) const {
  return rewards_.Get(index);
}
inline const ::KWMsg::RewardInfo& AckGetPneumaIslandStarReward::rewards(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPneumaIslandStarReward.rewards)
  return _internal_rewards(index);
}
inline ::KWMsg::RewardInfo* AckGetPneumaIslandStarReward::_internal_add_rewards() {
  return rewards_.Add();
}
inline ::KWMsg::RewardInfo* AckGetPneumaIslandStarReward::add_rewards() {
  // @@protoc_insertion_point(field_add:KWMsg.AckGetPneumaIslandStarReward.rewards)
  return _internal_add_rewards();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
AckGetPneumaIslandStarReward::rewards() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckGetPneumaIslandStarReward.rewards)
  return rewards_;
}

// -------------------------------------------------------------------

// ReqUpdatePneumaIslandShowState

// .KWMsg.Ident player_id = 1;
inline bool ReqUpdatePneumaIslandShowState::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqUpdatePneumaIslandShowState::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqUpdatePneumaIslandShowState::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqUpdatePneumaIslandShowState::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdatePneumaIslandShowState.player_id)
  return _internal_player_id();
}
inline void ReqUpdatePneumaIslandShowState::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqUpdatePneumaIslandShowState.player_id)
}
inline ::KWMsg::Ident* ReqUpdatePneumaIslandShowState::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqUpdatePneumaIslandShowState::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdatePneumaIslandShowState.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqUpdatePneumaIslandShowState::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqUpdatePneumaIslandShowState::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdatePneumaIslandShowState.player_id)
  return _internal_mutable_player_id();
}
inline void ReqUpdatePneumaIslandShowState::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdatePneumaIslandShowState.player_id)
}

// bytes boss_group_id = 2;
inline void ReqUpdatePneumaIslandShowState::clear_boss_group_id() {
  boss_group_id_.ClearToEmpty();
}
inline const std::string& ReqUpdatePneumaIslandShowState::boss_group_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdatePneumaIslandShowState.boss_group_id)
  return _internal_boss_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUpdatePneumaIslandShowState::set_boss_group_id(ArgT0&& arg0, ArgT... args) {
 
 boss_group_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdatePneumaIslandShowState.boss_group_id)
}
inline std::string* ReqUpdatePneumaIslandShowState::mutable_boss_group_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdatePneumaIslandShowState.boss_group_id)
  return _internal_mutable_boss_group_id();
}
inline const std::string& ReqUpdatePneumaIslandShowState::_internal_boss_group_id() const {
  return boss_group_id_.Get();
}
inline void ReqUpdatePneumaIslandShowState::_internal_set_boss_group_id(const std::string& value) {
  
  boss_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUpdatePneumaIslandShowState::_internal_mutable_boss_group_id() {
  
  return boss_group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUpdatePneumaIslandShowState::release_boss_group_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdatePneumaIslandShowState.boss_group_id)
  return boss_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUpdatePneumaIslandShowState::set_allocated_boss_group_id(std::string* boss_group_id) {
  if (boss_group_id != nullptr) {
    
  } else {
    
  }
  boss_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boss_group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdatePneumaIslandShowState.boss_group_id)
}

// -------------------------------------------------------------------

// AckUpdatePneumaIslandShowState

// .KWMsg.EGameEventCode event_code = 1;
inline void AckUpdatePneumaIslandShowState::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckUpdatePneumaIslandShowState::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckUpdatePneumaIslandShowState::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUpdatePneumaIslandShowState.event_code)
  return _internal_event_code();
}
inline void AckUpdatePneumaIslandShowState::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckUpdatePneumaIslandShowState::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckUpdatePneumaIslandShowState.event_code)
}

// bytes boss_group_id = 2;
inline void AckUpdatePneumaIslandShowState::clear_boss_group_id() {
  boss_group_id_.ClearToEmpty();
}
inline const std::string& AckUpdatePneumaIslandShowState::boss_group_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUpdatePneumaIslandShowState.boss_group_id)
  return _internal_boss_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckUpdatePneumaIslandShowState::set_boss_group_id(ArgT0&& arg0, ArgT... args) {
 
 boss_group_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckUpdatePneumaIslandShowState.boss_group_id)
}
inline std::string* AckUpdatePneumaIslandShowState::mutable_boss_group_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckUpdatePneumaIslandShowState.boss_group_id)
  return _internal_mutable_boss_group_id();
}
inline const std::string& AckUpdatePneumaIslandShowState::_internal_boss_group_id() const {
  return boss_group_id_.Get();
}
inline void AckUpdatePneumaIslandShowState::_internal_set_boss_group_id(const std::string& value) {
  
  boss_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckUpdatePneumaIslandShowState::_internal_mutable_boss_group_id() {
  
  return boss_group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckUpdatePneumaIslandShowState::release_boss_group_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckUpdatePneumaIslandShowState.boss_group_id)
  return boss_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckUpdatePneumaIslandShowState::set_allocated_boss_group_id(std::string* boss_group_id) {
  if (boss_group_id != nullptr) {
    
  } else {
    
  }
  boss_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boss_group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckUpdatePneumaIslandShowState.boss_group_id)
}

// -------------------------------------------------------------------

// ReqUpdatePneumaAutoDecomposeState

// .KWMsg.Ident player_id = 1;
inline bool ReqUpdatePneumaAutoDecomposeState::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqUpdatePneumaAutoDecomposeState::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqUpdatePneumaAutoDecomposeState::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqUpdatePneumaAutoDecomposeState::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdatePneumaAutoDecomposeState.player_id)
  return _internal_player_id();
}
inline void ReqUpdatePneumaAutoDecomposeState::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqUpdatePneumaAutoDecomposeState.player_id)
}
inline ::KWMsg::Ident* ReqUpdatePneumaAutoDecomposeState::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqUpdatePneumaAutoDecomposeState::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdatePneumaAutoDecomposeState.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqUpdatePneumaAutoDecomposeState::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqUpdatePneumaAutoDecomposeState::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdatePneumaAutoDecomposeState.player_id)
  return _internal_mutable_player_id();
}
inline void ReqUpdatePneumaAutoDecomposeState::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdatePneumaAutoDecomposeState.player_id)
}

// int32 enable = 2;
inline void ReqUpdatePneumaAutoDecomposeState::clear_enable() {
  enable_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqUpdatePneumaAutoDecomposeState::_internal_enable() const {
  return enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqUpdatePneumaAutoDecomposeState::enable() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdatePneumaAutoDecomposeState.enable)
  return _internal_enable();
}
inline void ReqUpdatePneumaAutoDecomposeState::_internal_set_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enable_ = value;
}
inline void ReqUpdatePneumaAutoDecomposeState::set_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdatePneumaAutoDecomposeState.enable)
}

// -------------------------------------------------------------------

// AckUpdatePneumaAutoDecomposeState

// .KWMsg.EGameEventCode event_code = 1;
inline void AckUpdatePneumaAutoDecomposeState::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckUpdatePneumaAutoDecomposeState::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckUpdatePneumaAutoDecomposeState::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUpdatePneumaAutoDecomposeState.event_code)
  return _internal_event_code();
}
inline void AckUpdatePneumaAutoDecomposeState::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckUpdatePneumaAutoDecomposeState::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckUpdatePneumaAutoDecomposeState.event_code)
}

// int32 enable = 2;
inline void AckUpdatePneumaAutoDecomposeState::clear_enable() {
  enable_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckUpdatePneumaAutoDecomposeState::_internal_enable() const {
  return enable_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckUpdatePneumaAutoDecomposeState::enable() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUpdatePneumaAutoDecomposeState.enable)
  return _internal_enable();
}
inline void AckUpdatePneumaAutoDecomposeState::_internal_set_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  enable_ = value;
}
inline void AckUpdatePneumaAutoDecomposeState::set_enable(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_enable(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckUpdatePneumaAutoDecomposeState.enable)
}

// -------------------------------------------------------------------

// PneumaDecomposeScheme

// bytes pneuma_type = 1;
inline void PneumaDecomposeScheme::clear_pneuma_type() {
  pneuma_type_.ClearToEmpty();
}
inline const std::string& PneumaDecomposeScheme::pneuma_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.PneumaDecomposeScheme.pneuma_type)
  return _internal_pneuma_type();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PneumaDecomposeScheme::set_pneuma_type(ArgT0&& arg0, ArgT... args) {
 
 pneuma_type_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PneumaDecomposeScheme.pneuma_type)
}
inline std::string* PneumaDecomposeScheme::mutable_pneuma_type() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PneumaDecomposeScheme.pneuma_type)
  return _internal_mutable_pneuma_type();
}
inline const std::string& PneumaDecomposeScheme::_internal_pneuma_type() const {
  return pneuma_type_.Get();
}
inline void PneumaDecomposeScheme::_internal_set_pneuma_type(const std::string& value) {
  
  pneuma_type_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PneumaDecomposeScheme::_internal_mutable_pneuma_type() {
  
  return pneuma_type_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PneumaDecomposeScheme::release_pneuma_type() {
  // @@protoc_insertion_point(field_release:KWMsg.PneumaDecomposeScheme.pneuma_type)
  return pneuma_type_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PneumaDecomposeScheme::set_allocated_pneuma_type(std::string* pneuma_type) {
  if (pneuma_type != nullptr) {
    
  } else {
    
  }
  pneuma_type_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pneuma_type,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PneumaDecomposeScheme.pneuma_type)
}

// bytes decompose_scheme = 2;
inline void PneumaDecomposeScheme::clear_decompose_scheme() {
  decompose_scheme_.ClearToEmpty();
}
inline const std::string& PneumaDecomposeScheme::decompose_scheme() const {
  // @@protoc_insertion_point(field_get:KWMsg.PneumaDecomposeScheme.decompose_scheme)
  return _internal_decompose_scheme();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void PneumaDecomposeScheme::set_decompose_scheme(ArgT0&& arg0, ArgT... args) {
 
 decompose_scheme_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.PneumaDecomposeScheme.decompose_scheme)
}
inline std::string* PneumaDecomposeScheme::mutable_decompose_scheme() {
  // @@protoc_insertion_point(field_mutable:KWMsg.PneumaDecomposeScheme.decompose_scheme)
  return _internal_mutable_decompose_scheme();
}
inline const std::string& PneumaDecomposeScheme::_internal_decompose_scheme() const {
  return decompose_scheme_.Get();
}
inline void PneumaDecomposeScheme::_internal_set_decompose_scheme(const std::string& value) {
  
  decompose_scheme_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* PneumaDecomposeScheme::_internal_mutable_decompose_scheme() {
  
  return decompose_scheme_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* PneumaDecomposeScheme::release_decompose_scheme() {
  // @@protoc_insertion_point(field_release:KWMsg.PneumaDecomposeScheme.decompose_scheme)
  return decompose_scheme_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void PneumaDecomposeScheme::set_allocated_decompose_scheme(std::string* decompose_scheme) {
  if (decompose_scheme != nullptr) {
    
  } else {
    
  }
  decompose_scheme_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), decompose_scheme,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.PneumaDecomposeScheme.decompose_scheme)
}

// -------------------------------------------------------------------

// ReqUpdatePneumaDecomposeScheme

// .KWMsg.Ident player_id = 1;
inline bool ReqUpdatePneumaDecomposeScheme::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqUpdatePneumaDecomposeScheme::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqUpdatePneumaDecomposeScheme::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqUpdatePneumaDecomposeScheme::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdatePneumaDecomposeScheme.player_id)
  return _internal_player_id();
}
inline void ReqUpdatePneumaDecomposeScheme::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqUpdatePneumaDecomposeScheme.player_id)
}
inline ::KWMsg::Ident* ReqUpdatePneumaDecomposeScheme::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqUpdatePneumaDecomposeScheme::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdatePneumaDecomposeScheme.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqUpdatePneumaDecomposeScheme::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqUpdatePneumaDecomposeScheme::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdatePneumaDecomposeScheme.player_id)
  return _internal_mutable_player_id();
}
inline void ReqUpdatePneumaDecomposeScheme::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdatePneumaDecomposeScheme.player_id)
}

// bytes boss_id = 2;
inline void ReqUpdatePneumaDecomposeScheme::clear_boss_id() {
  boss_id_.ClearToEmpty();
}
inline const std::string& ReqUpdatePneumaDecomposeScheme::boss_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdatePneumaDecomposeScheme.boss_id)
  return _internal_boss_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUpdatePneumaDecomposeScheme::set_boss_id(ArgT0&& arg0, ArgT... args) {
 
 boss_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdatePneumaDecomposeScheme.boss_id)
}
inline std::string* ReqUpdatePneumaDecomposeScheme::mutable_boss_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdatePneumaDecomposeScheme.boss_id)
  return _internal_mutable_boss_id();
}
inline const std::string& ReqUpdatePneumaDecomposeScheme::_internal_boss_id() const {
  return boss_id_.Get();
}
inline void ReqUpdatePneumaDecomposeScheme::_internal_set_boss_id(const std::string& value) {
  
  boss_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUpdatePneumaDecomposeScheme::_internal_mutable_boss_id() {
  
  return boss_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUpdatePneumaDecomposeScheme::release_boss_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdatePneumaDecomposeScheme.boss_id)
  return boss_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUpdatePneumaDecomposeScheme::set_allocated_boss_id(std::string* boss_id) {
  if (boss_id != nullptr) {
    
  } else {
    
  }
  boss_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boss_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdatePneumaDecomposeScheme.boss_id)
}

// repeated .KWMsg.PneumaDecomposeScheme scheme_list = 3;
inline int ReqUpdatePneumaDecomposeScheme::_internal_scheme_list_size() const {
  return scheme_list_.size();
}
inline int ReqUpdatePneumaDecomposeScheme::scheme_list_size() const {
  return _internal_scheme_list_size();
}
inline void ReqUpdatePneumaDecomposeScheme::clear_scheme_list() {
  scheme_list_.Clear();
}
inline ::KWMsg::PneumaDecomposeScheme* ReqUpdatePneumaDecomposeScheme::mutable_scheme_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdatePneumaDecomposeScheme.scheme_list)
  return scheme_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PneumaDecomposeScheme >*
ReqUpdatePneumaDecomposeScheme::mutable_scheme_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ReqUpdatePneumaDecomposeScheme.scheme_list)
  return &scheme_list_;
}
inline const ::KWMsg::PneumaDecomposeScheme& ReqUpdatePneumaDecomposeScheme::_internal_scheme_list(int index) const {
  return scheme_list_.Get(index);
}
inline const ::KWMsg::PneumaDecomposeScheme& ReqUpdatePneumaDecomposeScheme::scheme_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdatePneumaDecomposeScheme.scheme_list)
  return _internal_scheme_list(index);
}
inline ::KWMsg::PneumaDecomposeScheme* ReqUpdatePneumaDecomposeScheme::_internal_add_scheme_list() {
  return scheme_list_.Add();
}
inline ::KWMsg::PneumaDecomposeScheme* ReqUpdatePneumaDecomposeScheme::add_scheme_list() {
  // @@protoc_insertion_point(field_add:KWMsg.ReqUpdatePneumaDecomposeScheme.scheme_list)
  return _internal_add_scheme_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PneumaDecomposeScheme >&
ReqUpdatePneumaDecomposeScheme::scheme_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ReqUpdatePneumaDecomposeScheme.scheme_list)
  return scheme_list_;
}

// -------------------------------------------------------------------

// AckUpdatePneumaDecomposeScheme

// .KWMsg.EGameEventCode event_code = 1;
inline void AckUpdatePneumaDecomposeScheme::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckUpdatePneumaDecomposeScheme::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckUpdatePneumaDecomposeScheme::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUpdatePneumaDecomposeScheme.event_code)
  return _internal_event_code();
}
inline void AckUpdatePneumaDecomposeScheme::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckUpdatePneumaDecomposeScheme::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckUpdatePneumaDecomposeScheme.event_code)
}

// bytes boss_id = 2;
inline void AckUpdatePneumaDecomposeScheme::clear_boss_id() {
  boss_id_.ClearToEmpty();
}
inline const std::string& AckUpdatePneumaDecomposeScheme::boss_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUpdatePneumaDecomposeScheme.boss_id)
  return _internal_boss_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckUpdatePneumaDecomposeScheme::set_boss_id(ArgT0&& arg0, ArgT... args) {
 
 boss_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckUpdatePneumaDecomposeScheme.boss_id)
}
inline std::string* AckUpdatePneumaDecomposeScheme::mutable_boss_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckUpdatePneumaDecomposeScheme.boss_id)
  return _internal_mutable_boss_id();
}
inline const std::string& AckUpdatePneumaDecomposeScheme::_internal_boss_id() const {
  return boss_id_.Get();
}
inline void AckUpdatePneumaDecomposeScheme::_internal_set_boss_id(const std::string& value) {
  
  boss_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckUpdatePneumaDecomposeScheme::_internal_mutable_boss_id() {
  
  return boss_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckUpdatePneumaDecomposeScheme::release_boss_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckUpdatePneumaDecomposeScheme.boss_id)
  return boss_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckUpdatePneumaDecomposeScheme::set_allocated_boss_id(std::string* boss_id) {
  if (boss_id != nullptr) {
    
  } else {
    
  }
  boss_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), boss_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckUpdatePneumaDecomposeScheme.boss_id)
}

// repeated .KWMsg.PneumaDecomposeScheme scheme_list = 3;
inline int AckUpdatePneumaDecomposeScheme::_internal_scheme_list_size() const {
  return scheme_list_.size();
}
inline int AckUpdatePneumaDecomposeScheme::scheme_list_size() const {
  return _internal_scheme_list_size();
}
inline void AckUpdatePneumaDecomposeScheme::clear_scheme_list() {
  scheme_list_.Clear();
}
inline ::KWMsg::PneumaDecomposeScheme* AckUpdatePneumaDecomposeScheme::mutable_scheme_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckUpdatePneumaDecomposeScheme.scheme_list)
  return scheme_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PneumaDecomposeScheme >*
AckUpdatePneumaDecomposeScheme::mutable_scheme_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckUpdatePneumaDecomposeScheme.scheme_list)
  return &scheme_list_;
}
inline const ::KWMsg::PneumaDecomposeScheme& AckUpdatePneumaDecomposeScheme::_internal_scheme_list(int index) const {
  return scheme_list_.Get(index);
}
inline const ::KWMsg::PneumaDecomposeScheme& AckUpdatePneumaDecomposeScheme::scheme_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUpdatePneumaDecomposeScheme.scheme_list)
  return _internal_scheme_list(index);
}
inline ::KWMsg::PneumaDecomposeScheme* AckUpdatePneumaDecomposeScheme::_internal_add_scheme_list() {
  return scheme_list_.Add();
}
inline ::KWMsg::PneumaDecomposeScheme* AckUpdatePneumaDecomposeScheme::add_scheme_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckUpdatePneumaDecomposeScheme.scheme_list)
  return _internal_add_scheme_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::PneumaDecomposeScheme >&
AckUpdatePneumaDecomposeScheme::scheme_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckUpdatePneumaDecomposeScheme.scheme_list)
  return scheme_list_;
}

// -------------------------------------------------------------------

// ReqCreateOrder

// .KWMsg.Ident player_id = 1;
inline bool ReqCreateOrder::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCreateOrder::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCreateOrder::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCreateOrder::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateOrder.player_id)
  return _internal_player_id();
}
inline void ReqCreateOrder::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCreateOrder.player_id)
}
inline ::KWMsg::Ident* ReqCreateOrder::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCreateOrder::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCreateOrder.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCreateOrder::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCreateOrder::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCreateOrder.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCreateOrder::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCreateOrder.player_id)
}

// bytes product_id = 2;
inline void ReqCreateOrder::clear_product_id() {
  product_id_.ClearToEmpty();
}
inline const std::string& ReqCreateOrder::product_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateOrder.product_id)
  return _internal_product_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCreateOrder::set_product_id(ArgT0&& arg0, ArgT... args) {
 
 product_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateOrder.product_id)
}
inline std::string* ReqCreateOrder::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCreateOrder.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& ReqCreateOrder::_internal_product_id() const {
  return product_id_.Get();
}
inline void ReqCreateOrder::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCreateOrder::_internal_mutable_product_id() {
  
  return product_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCreateOrder::release_product_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCreateOrder.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCreateOrder::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCreateOrder.product_id)
}

// -------------------------------------------------------------------

// AckCreateOrder

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCreateOrder::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCreateOrder::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCreateOrder::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateOrder.event_code)
  return _internal_event_code();
}
inline void AckCreateOrder::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCreateOrder::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateOrder.event_code)
}

// bytes product_id = 2;
inline void AckCreateOrder::clear_product_id() {
  product_id_.ClearToEmpty();
}
inline const std::string& AckCreateOrder::product_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateOrder.product_id)
  return _internal_product_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCreateOrder::set_product_id(ArgT0&& arg0, ArgT... args) {
 
 product_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateOrder.product_id)
}
inline std::string* AckCreateOrder::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCreateOrder.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& AckCreateOrder::_internal_product_id() const {
  return product_id_.Get();
}
inline void AckCreateOrder::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCreateOrder::_internal_mutable_product_id() {
  
  return product_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCreateOrder::release_product_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCreateOrder.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCreateOrder::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCreateOrder.product_id)
}

// bytes order_id = 3;
inline void AckCreateOrder::clear_order_id() {
  order_id_.ClearToEmpty();
}
inline const std::string& AckCreateOrder::order_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateOrder.order_id)
  return _internal_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCreateOrder::set_order_id(ArgT0&& arg0, ArgT... args) {
 
 order_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateOrder.order_id)
}
inline std::string* AckCreateOrder::mutable_order_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCreateOrder.order_id)
  return _internal_mutable_order_id();
}
inline const std::string& AckCreateOrder::_internal_order_id() const {
  return order_id_.Get();
}
inline void AckCreateOrder::_internal_set_order_id(const std::string& value) {
  
  order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCreateOrder::_internal_mutable_order_id() {
  
  return order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCreateOrder::release_order_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCreateOrder.order_id)
  return order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCreateOrder::set_allocated_order_id(std::string* order_id) {
  if (order_id != nullptr) {
    
  } else {
    
  }
  order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCreateOrder.order_id)
}

// int64 order_ts = 4;
inline void AckCreateOrder::clear_order_ts() {
  order_ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AckCreateOrder::_internal_order_ts() const {
  return order_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AckCreateOrder::order_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateOrder.order_ts)
  return _internal_order_ts();
}
inline void AckCreateOrder::_internal_set_order_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  order_ts_ = value;
}
inline void AckCreateOrder::set_order_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_order_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateOrder.order_ts)
}

// int32 server_id = 5;
inline void AckCreateOrder::clear_server_id() {
  server_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCreateOrder::_internal_server_id() const {
  return server_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCreateOrder::server_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateOrder.server_id)
  return _internal_server_id();
}
inline void AckCreateOrder::_internal_set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  server_id_ = value;
}
inline void AckCreateOrder::set_server_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_server_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateOrder.server_id)
}

// -------------------------------------------------------------------

// ReqCallbackRecharge

// bytes sdk_uid = 1;
inline void ReqCallbackRecharge::clear_sdk_uid() {
  sdk_uid_.ClearToEmpty();
}
inline const std::string& ReqCallbackRecharge::sdk_uid() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.sdk_uid)
  return _internal_sdk_uid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCallbackRecharge::set_sdk_uid(ArgT0&& arg0, ArgT... args) {
 
 sdk_uid_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.sdk_uid)
}
inline std::string* ReqCallbackRecharge::mutable_sdk_uid() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCallbackRecharge.sdk_uid)
  return _internal_mutable_sdk_uid();
}
inline const std::string& ReqCallbackRecharge::_internal_sdk_uid() const {
  return sdk_uid_.Get();
}
inline void ReqCallbackRecharge::_internal_set_sdk_uid(const std::string& value) {
  
  sdk_uid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::_internal_mutable_sdk_uid() {
  
  return sdk_uid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::release_sdk_uid() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCallbackRecharge.sdk_uid)
  return sdk_uid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCallbackRecharge::set_allocated_sdk_uid(std::string* sdk_uid) {
  if (sdk_uid != nullptr) {
    
  } else {
    
  }
  sdk_uid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdk_uid,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCallbackRecharge.sdk_uid)
}

// bytes sdk_order_id = 2;
inline void ReqCallbackRecharge::clear_sdk_order_id() {
  sdk_order_id_.ClearToEmpty();
}
inline const std::string& ReqCallbackRecharge::sdk_order_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.sdk_order_id)
  return _internal_sdk_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCallbackRecharge::set_sdk_order_id(ArgT0&& arg0, ArgT... args) {
 
 sdk_order_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.sdk_order_id)
}
inline std::string* ReqCallbackRecharge::mutable_sdk_order_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCallbackRecharge.sdk_order_id)
  return _internal_mutable_sdk_order_id();
}
inline const std::string& ReqCallbackRecharge::_internal_sdk_order_id() const {
  return sdk_order_id_.Get();
}
inline void ReqCallbackRecharge::_internal_set_sdk_order_id(const std::string& value) {
  
  sdk_order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::_internal_mutable_sdk_order_id() {
  
  return sdk_order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::release_sdk_order_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCallbackRecharge.sdk_order_id)
  return sdk_order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCallbackRecharge::set_allocated_sdk_order_id(std::string* sdk_order_id) {
  if (sdk_order_id != nullptr) {
    
  } else {
    
  }
  sdk_order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdk_order_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCallbackRecharge.sdk_order_id)
}

// bytes app_order_id = 3;
inline void ReqCallbackRecharge::clear_app_order_id() {
  app_order_id_.ClearToEmpty();
}
inline const std::string& ReqCallbackRecharge::app_order_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.app_order_id)
  return _internal_app_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCallbackRecharge::set_app_order_id(ArgT0&& arg0, ArgT... args) {
 
 app_order_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.app_order_id)
}
inline std::string* ReqCallbackRecharge::mutable_app_order_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCallbackRecharge.app_order_id)
  return _internal_mutable_app_order_id();
}
inline const std::string& ReqCallbackRecharge::_internal_app_order_id() const {
  return app_order_id_.Get();
}
inline void ReqCallbackRecharge::_internal_set_app_order_id(const std::string& value) {
  
  app_order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::_internal_mutable_app_order_id() {
  
  return app_order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::release_app_order_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCallbackRecharge.app_order_id)
  return app_order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCallbackRecharge::set_allocated_app_order_id(std::string* app_order_id) {
  if (app_order_id != nullptr) {
    
  } else {
    
  }
  app_order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_order_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCallbackRecharge.app_order_id)
}

// bytes product_id = 4;
inline void ReqCallbackRecharge::clear_product_id() {
  product_id_.ClearToEmpty();
}
inline const std::string& ReqCallbackRecharge::product_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.product_id)
  return _internal_product_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCallbackRecharge::set_product_id(ArgT0&& arg0, ArgT... args) {
 
 product_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.product_id)
}
inline std::string* ReqCallbackRecharge::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCallbackRecharge.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& ReqCallbackRecharge::_internal_product_id() const {
  return product_id_.Get();
}
inline void ReqCallbackRecharge::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::_internal_mutable_product_id() {
  
  return product_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::release_product_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCallbackRecharge.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCallbackRecharge::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCallbackRecharge.product_id)
}

// int64 timestamp = 5;
inline void ReqCallbackRecharge::clear_timestamp() {
  timestamp_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqCallbackRecharge::_internal_timestamp() const {
  return timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqCallbackRecharge::timestamp() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.timestamp)
  return _internal_timestamp();
}
inline void ReqCallbackRecharge::_internal_set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  timestamp_ = value;
}
inline void ReqCallbackRecharge::set_timestamp(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.timestamp)
}

// int64 money_amount = 6;
inline void ReqCallbackRecharge::clear_money_amount() {
  money_amount_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqCallbackRecharge::_internal_money_amount() const {
  return money_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqCallbackRecharge::money_amount() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.money_amount)
  return _internal_money_amount();
}
inline void ReqCallbackRecharge::_internal_set_money_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  money_amount_ = value;
}
inline void ReqCallbackRecharge::set_money_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_money_amount(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.money_amount)
}

// bytes money_currency = 7;
inline void ReqCallbackRecharge::clear_money_currency() {
  money_currency_.ClearToEmpty();
}
inline const std::string& ReqCallbackRecharge::money_currency() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.money_currency)
  return _internal_money_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCallbackRecharge::set_money_currency(ArgT0&& arg0, ArgT... args) {
 
 money_currency_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.money_currency)
}
inline std::string* ReqCallbackRecharge::mutable_money_currency() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCallbackRecharge.money_currency)
  return _internal_mutable_money_currency();
}
inline const std::string& ReqCallbackRecharge::_internal_money_currency() const {
  return money_currency_.Get();
}
inline void ReqCallbackRecharge::_internal_set_money_currency(const std::string& value) {
  
  money_currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::_internal_mutable_money_currency() {
  
  return money_currency_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::release_money_currency() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCallbackRecharge.money_currency)
  return money_currency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCallbackRecharge::set_allocated_money_currency(std::string* money_currency) {
  if (money_currency != nullptr) {
    
  } else {
    
  }
  money_currency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), money_currency,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCallbackRecharge.money_currency)
}

// int64 order_amount = 8;
inline void ReqCallbackRecharge::clear_order_amount() {
  order_amount_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqCallbackRecharge::_internal_order_amount() const {
  return order_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqCallbackRecharge::order_amount() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.order_amount)
  return _internal_order_amount();
}
inline void ReqCallbackRecharge::_internal_set_order_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  order_amount_ = value;
}
inline void ReqCallbackRecharge::set_order_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_order_amount(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.order_amount)
}

// bytes order_currency = 9;
inline void ReqCallbackRecharge::clear_order_currency() {
  order_currency_.ClearToEmpty();
}
inline const std::string& ReqCallbackRecharge::order_currency() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.order_currency)
  return _internal_order_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCallbackRecharge::set_order_currency(ArgT0&& arg0, ArgT... args) {
 
 order_currency_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.order_currency)
}
inline std::string* ReqCallbackRecharge::mutable_order_currency() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCallbackRecharge.order_currency)
  return _internal_mutable_order_currency();
}
inline const std::string& ReqCallbackRecharge::_internal_order_currency() const {
  return order_currency_.Get();
}
inline void ReqCallbackRecharge::_internal_set_order_currency(const std::string& value) {
  
  order_currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::_internal_mutable_order_currency() {
  
  return order_currency_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::release_order_currency() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCallbackRecharge.order_currency)
  return order_currency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCallbackRecharge::set_allocated_order_currency(std::string* order_currency) {
  if (order_currency != nullptr) {
    
  } else {
    
  }
  order_currency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_currency,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCallbackRecharge.order_currency)
}

// int32 pay_type = 10;
inline void ReqCallbackRecharge::clear_pay_type() {
  pay_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCallbackRecharge::_internal_pay_type() const {
  return pay_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCallbackRecharge::pay_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.pay_type)
  return _internal_pay_type();
}
inline void ReqCallbackRecharge::_internal_set_pay_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  pay_type_ = value;
}
inline void ReqCallbackRecharge::set_pay_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pay_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.pay_type)
}

// int32 platform_id = 11;
inline void ReqCallbackRecharge::clear_platform_id() {
  platform_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCallbackRecharge::_internal_platform_id() const {
  return platform_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCallbackRecharge::platform_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.platform_id)
  return _internal_platform_id();
}
inline void ReqCallbackRecharge::_internal_set_platform_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  platform_id_ = value;
}
inline void ReqCallbackRecharge::set_platform_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_platform_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.platform_id)
}

// int32 sandbox = 12;
inline void ReqCallbackRecharge::clear_sandbox() {
  sandbox_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCallbackRecharge::_internal_sandbox() const {
  return sandbox_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCallbackRecharge::sandbox() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.sandbox)
  return _internal_sandbox();
}
inline void ReqCallbackRecharge::_internal_set_sandbox(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  sandbox_ = value;
}
inline void ReqCallbackRecharge::set_sandbox(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_sandbox(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.sandbox)
}

// int32 source_type = 13;
inline void ReqCallbackRecharge::clear_source_type() {
  source_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCallbackRecharge::_internal_source_type() const {
  return source_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCallbackRecharge::source_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.source_type)
  return _internal_source_type();
}
inline void ReqCallbackRecharge::_internal_set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  source_type_ = value;
}
inline void ReqCallbackRecharge::set_source_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_source_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.source_type)
}

// bytes role_id = 14;
inline void ReqCallbackRecharge::clear_role_id() {
  role_id_.ClearToEmpty();
}
inline const std::string& ReqCallbackRecharge::role_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.role_id)
  return _internal_role_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCallbackRecharge::set_role_id(ArgT0&& arg0, ArgT... args) {
 
 role_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.role_id)
}
inline std::string* ReqCallbackRecharge::mutable_role_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCallbackRecharge.role_id)
  return _internal_mutable_role_id();
}
inline const std::string& ReqCallbackRecharge::_internal_role_id() const {
  return role_id_.Get();
}
inline void ReqCallbackRecharge::_internal_set_role_id(const std::string& value) {
  
  role_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::_internal_mutable_role_id() {
  
  return role_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::release_role_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCallbackRecharge.role_id)
  return role_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCallbackRecharge::set_allocated_role_id(std::string* role_id) {
  if (role_id != nullptr) {
    
  } else {
    
  }
  role_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), role_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCallbackRecharge.role_id)
}

// bytes ext = 15;
inline void ReqCallbackRecharge::clear_ext() {
  ext_.ClearToEmpty();
}
inline const std::string& ReqCallbackRecharge::ext() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCallbackRecharge.ext)
  return _internal_ext();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCallbackRecharge::set_ext(ArgT0&& arg0, ArgT... args) {
 
 ext_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCallbackRecharge.ext)
}
inline std::string* ReqCallbackRecharge::mutable_ext() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCallbackRecharge.ext)
  return _internal_mutable_ext();
}
inline const std::string& ReqCallbackRecharge::_internal_ext() const {
  return ext_.Get();
}
inline void ReqCallbackRecharge::_internal_set_ext(const std::string& value) {
  
  ext_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::_internal_mutable_ext() {
  
  return ext_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCallbackRecharge::release_ext() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCallbackRecharge.ext)
  return ext_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCallbackRecharge::set_allocated_ext(std::string* ext) {
  if (ext != nullptr) {
    
  } else {
    
  }
  ext_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ext,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCallbackRecharge.ext)
}

// -------------------------------------------------------------------

// AckCallbackRecharge

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCallbackRecharge::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCallbackRecharge::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCallbackRecharge::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCallbackRecharge.event_code)
  return _internal_event_code();
}
inline void AckCallbackRecharge::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCallbackRecharge::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCallbackRecharge.event_code)
}

// bytes app_order_id = 2;
inline void AckCallbackRecharge::clear_app_order_id() {
  app_order_id_.ClearToEmpty();
}
inline const std::string& AckCallbackRecharge::app_order_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCallbackRecharge.app_order_id)
  return _internal_app_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCallbackRecharge::set_app_order_id(ArgT0&& arg0, ArgT... args) {
 
 app_order_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCallbackRecharge.app_order_id)
}
inline std::string* AckCallbackRecharge::mutable_app_order_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCallbackRecharge.app_order_id)
  return _internal_mutable_app_order_id();
}
inline const std::string& AckCallbackRecharge::_internal_app_order_id() const {
  return app_order_id_.Get();
}
inline void AckCallbackRecharge::_internal_set_app_order_id(const std::string& value) {
  
  app_order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCallbackRecharge::_internal_mutable_app_order_id() {
  
  return app_order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCallbackRecharge::release_app_order_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCallbackRecharge.app_order_id)
  return app_order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCallbackRecharge::set_allocated_app_order_id(std::string* app_order_id) {
  if (app_order_id != nullptr) {
    
  } else {
    
  }
  app_order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), app_order_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCallbackRecharge.app_order_id)
}

// bytes sdk_order_id = 3;
inline void AckCallbackRecharge::clear_sdk_order_id() {
  sdk_order_id_.ClearToEmpty();
}
inline const std::string& AckCallbackRecharge::sdk_order_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCallbackRecharge.sdk_order_id)
  return _internal_sdk_order_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCallbackRecharge::set_sdk_order_id(ArgT0&& arg0, ArgT... args) {
 
 sdk_order_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCallbackRecharge.sdk_order_id)
}
inline std::string* AckCallbackRecharge::mutable_sdk_order_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCallbackRecharge.sdk_order_id)
  return _internal_mutable_sdk_order_id();
}
inline const std::string& AckCallbackRecharge::_internal_sdk_order_id() const {
  return sdk_order_id_.Get();
}
inline void AckCallbackRecharge::_internal_set_sdk_order_id(const std::string& value) {
  
  sdk_order_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCallbackRecharge::_internal_mutable_sdk_order_id() {
  
  return sdk_order_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCallbackRecharge::release_sdk_order_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCallbackRecharge.sdk_order_id)
  return sdk_order_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCallbackRecharge::set_allocated_sdk_order_id(std::string* sdk_order_id) {
  if (sdk_order_id != nullptr) {
    
  } else {
    
  }
  sdk_order_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sdk_order_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCallbackRecharge.sdk_order_id)
}

// bytes product_id = 4;
inline void AckCallbackRecharge::clear_product_id() {
  product_id_.ClearToEmpty();
}
inline const std::string& AckCallbackRecharge::product_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCallbackRecharge.product_id)
  return _internal_product_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCallbackRecharge::set_product_id(ArgT0&& arg0, ArgT... args) {
 
 product_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCallbackRecharge.product_id)
}
inline std::string* AckCallbackRecharge::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCallbackRecharge.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& AckCallbackRecharge::_internal_product_id() const {
  return product_id_.Get();
}
inline void AckCallbackRecharge::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCallbackRecharge::_internal_mutable_product_id() {
  
  return product_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCallbackRecharge::release_product_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCallbackRecharge.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCallbackRecharge::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCallbackRecharge.product_id)
}

// int64 money_amount = 5;
inline void AckCallbackRecharge::clear_money_amount() {
  money_amount_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AckCallbackRecharge::_internal_money_amount() const {
  return money_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AckCallbackRecharge::money_amount() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCallbackRecharge.money_amount)
  return _internal_money_amount();
}
inline void AckCallbackRecharge::_internal_set_money_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  money_amount_ = value;
}
inline void AckCallbackRecharge::set_money_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_money_amount(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCallbackRecharge.money_amount)
}

// bytes money_currency = 6;
inline void AckCallbackRecharge::clear_money_currency() {
  money_currency_.ClearToEmpty();
}
inline const std::string& AckCallbackRecharge::money_currency() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCallbackRecharge.money_currency)
  return _internal_money_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCallbackRecharge::set_money_currency(ArgT0&& arg0, ArgT... args) {
 
 money_currency_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCallbackRecharge.money_currency)
}
inline std::string* AckCallbackRecharge::mutable_money_currency() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCallbackRecharge.money_currency)
  return _internal_mutable_money_currency();
}
inline const std::string& AckCallbackRecharge::_internal_money_currency() const {
  return money_currency_.Get();
}
inline void AckCallbackRecharge::_internal_set_money_currency(const std::string& value) {
  
  money_currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCallbackRecharge::_internal_mutable_money_currency() {
  
  return money_currency_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCallbackRecharge::release_money_currency() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCallbackRecharge.money_currency)
  return money_currency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCallbackRecharge::set_allocated_money_currency(std::string* money_currency) {
  if (money_currency != nullptr) {
    
  } else {
    
  }
  money_currency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), money_currency,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCallbackRecharge.money_currency)
}

// int64 order_amount = 7;
inline void AckCallbackRecharge::clear_order_amount() {
  order_amount_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AckCallbackRecharge::_internal_order_amount() const {
  return order_amount_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AckCallbackRecharge::order_amount() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCallbackRecharge.order_amount)
  return _internal_order_amount();
}
inline void AckCallbackRecharge::_internal_set_order_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  order_amount_ = value;
}
inline void AckCallbackRecharge::set_order_amount(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_order_amount(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCallbackRecharge.order_amount)
}

// bytes order_currency = 8;
inline void AckCallbackRecharge::clear_order_currency() {
  order_currency_.ClearToEmpty();
}
inline const std::string& AckCallbackRecharge::order_currency() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCallbackRecharge.order_currency)
  return _internal_order_currency();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCallbackRecharge::set_order_currency(ArgT0&& arg0, ArgT... args) {
 
 order_currency_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCallbackRecharge.order_currency)
}
inline std::string* AckCallbackRecharge::mutable_order_currency() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCallbackRecharge.order_currency)
  return _internal_mutable_order_currency();
}
inline const std::string& AckCallbackRecharge::_internal_order_currency() const {
  return order_currency_.Get();
}
inline void AckCallbackRecharge::_internal_set_order_currency(const std::string& value) {
  
  order_currency_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCallbackRecharge::_internal_mutable_order_currency() {
  
  return order_currency_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCallbackRecharge::release_order_currency() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCallbackRecharge.order_currency)
  return order_currency_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCallbackRecharge::set_allocated_order_currency(std::string* order_currency) {
  if (order_currency != nullptr) {
    
  } else {
    
  }
  order_currency_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), order_currency,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCallbackRecharge.order_currency)
}

// int32 basic_add_number = 9;
inline void AckCallbackRecharge::clear_basic_add_number() {
  basic_add_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCallbackRecharge::_internal_basic_add_number() const {
  return basic_add_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCallbackRecharge::basic_add_number() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCallbackRecharge.basic_add_number)
  return _internal_basic_add_number();
}
inline void AckCallbackRecharge::_internal_set_basic_add_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  basic_add_number_ = value;
}
inline void AckCallbackRecharge::set_basic_add_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_basic_add_number(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCallbackRecharge.basic_add_number)
}

// int32 extra_add_number = 10;
inline void AckCallbackRecharge::clear_extra_add_number() {
  extra_add_number_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCallbackRecharge::_internal_extra_add_number() const {
  return extra_add_number_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCallbackRecharge::extra_add_number() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCallbackRecharge.extra_add_number)
  return _internal_extra_add_number();
}
inline void AckCallbackRecharge::_internal_set_extra_add_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extra_add_number_ = value;
}
inline void AckCallbackRecharge::set_extra_add_number(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extra_add_number(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCallbackRecharge.extra_add_number)
}

// int32 extra_param_type = 11;
inline void AckCallbackRecharge::clear_extra_param_type() {
  extra_param_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCallbackRecharge::_internal_extra_param_type() const {
  return extra_param_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCallbackRecharge::extra_param_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCallbackRecharge.extra_param_type)
  return _internal_extra_param_type();
}
inline void AckCallbackRecharge::_internal_set_extra_param_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  extra_param_type_ = value;
}
inline void AckCallbackRecharge::set_extra_param_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_extra_param_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCallbackRecharge.extra_param_type)
}

// bytes extra_param = 12;
inline void AckCallbackRecharge::clear_extra_param() {
  extra_param_.ClearToEmpty();
}
inline const std::string& AckCallbackRecharge::extra_param() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCallbackRecharge.extra_param)
  return _internal_extra_param();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCallbackRecharge::set_extra_param(ArgT0&& arg0, ArgT... args) {
 
 extra_param_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCallbackRecharge.extra_param)
}
inline std::string* AckCallbackRecharge::mutable_extra_param() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCallbackRecharge.extra_param)
  return _internal_mutable_extra_param();
}
inline const std::string& AckCallbackRecharge::_internal_extra_param() const {
  return extra_param_.Get();
}
inline void AckCallbackRecharge::_internal_set_extra_param(const std::string& value) {
  
  extra_param_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCallbackRecharge::_internal_mutable_extra_param() {
  
  return extra_param_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCallbackRecharge::release_extra_param() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCallbackRecharge.extra_param)
  return extra_param_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCallbackRecharge::set_allocated_extra_param(std::string* extra_param) {
  if (extra_param != nullptr) {
    
  } else {
    
  }
  extra_param_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_param,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCallbackRecharge.extra_param)
}

// -------------------------------------------------------------------

// MailInfo

// .KWMsg.Ident mail_id = 1;
inline bool MailInfo::_internal_has_mail_id() const {
  return this != internal_default_instance() && mail_id_ != nullptr;
}
inline bool MailInfo::has_mail_id() const {
  return _internal_has_mail_id();
}
inline const ::KWMsg::Ident& MailInfo::_internal_mail_id() const {
  const ::KWMsg::Ident* p = mail_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& MailInfo::mail_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.MailInfo.mail_id)
  return _internal_mail_id();
}
inline void MailInfo::unsafe_arena_set_allocated_mail_id(
    ::KWMsg::Ident* mail_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail_id_);
  }
  mail_id_ = mail_id;
  if (mail_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.MailInfo.mail_id)
}
inline ::KWMsg::Ident* MailInfo::release_mail_id() {
  
  ::KWMsg::Ident* temp = mail_id_;
  mail_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* MailInfo::unsafe_arena_release_mail_id() {
  // @@protoc_insertion_point(field_release:KWMsg.MailInfo.mail_id)
  
  ::KWMsg::Ident* temp = mail_id_;
  mail_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* MailInfo::_internal_mutable_mail_id() {
  
  if (mail_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    mail_id_ = p;
  }
  return mail_id_;
}
inline ::KWMsg::Ident* MailInfo::mutable_mail_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.MailInfo.mail_id)
  return _internal_mutable_mail_id();
}
inline void MailInfo::set_allocated_mail_id(::KWMsg::Ident* mail_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail_id_);
  }
  if (mail_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail_id));
    if (message_arena != submessage_arena) {
      mail_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mail_id, submessage_arena);
    }
    
  } else {
    
  }
  mail_id_ = mail_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.MailInfo.mail_id)
}

// bytes prompt_id = 2;
inline void MailInfo::clear_prompt_id() {
  prompt_id_.ClearToEmpty();
}
inline const std::string& MailInfo::prompt_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.MailInfo.prompt_id)
  return _internal_prompt_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailInfo::set_prompt_id(ArgT0&& arg0, ArgT... args) {
 
 prompt_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.MailInfo.prompt_id)
}
inline std::string* MailInfo::mutable_prompt_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.MailInfo.prompt_id)
  return _internal_mutable_prompt_id();
}
inline const std::string& MailInfo::_internal_prompt_id() const {
  return prompt_id_.Get();
}
inline void MailInfo::_internal_set_prompt_id(const std::string& value) {
  
  prompt_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MailInfo::_internal_mutable_prompt_id() {
  
  return prompt_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MailInfo::release_prompt_id() {
  // @@protoc_insertion_point(field_release:KWMsg.MailInfo.prompt_id)
  return prompt_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MailInfo::set_allocated_prompt_id(std::string* prompt_id) {
  if (prompt_id != nullptr) {
    
  } else {
    
  }
  prompt_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), prompt_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.MailInfo.prompt_id)
}

// bytes title = 3;
inline void MailInfo::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& MailInfo::title() const {
  // @@protoc_insertion_point(field_get:KWMsg.MailInfo.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailInfo::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.MailInfo.title)
}
inline std::string* MailInfo::mutable_title() {
  // @@protoc_insertion_point(field_mutable:KWMsg.MailInfo.title)
  return _internal_mutable_title();
}
inline const std::string& MailInfo::_internal_title() const {
  return title_.Get();
}
inline void MailInfo::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MailInfo::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MailInfo::release_title() {
  // @@protoc_insertion_point(field_release:KWMsg.MailInfo.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MailInfo::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.MailInfo.title)
}

// bytes context = 4;
inline void MailInfo::clear_context() {
  context_.ClearToEmpty();
}
inline const std::string& MailInfo::context() const {
  // @@protoc_insertion_point(field_get:KWMsg.MailInfo.context)
  return _internal_context();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailInfo::set_context(ArgT0&& arg0, ArgT... args) {
 
 context_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.MailInfo.context)
}
inline std::string* MailInfo::mutable_context() {
  // @@protoc_insertion_point(field_mutable:KWMsg.MailInfo.context)
  return _internal_mutable_context();
}
inline const std::string& MailInfo::_internal_context() const {
  return context_.Get();
}
inline void MailInfo::_internal_set_context(const std::string& value) {
  
  context_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MailInfo::_internal_mutable_context() {
  
  return context_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MailInfo::release_context() {
  // @@protoc_insertion_point(field_release:KWMsg.MailInfo.context)
  return context_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MailInfo::set_allocated_context(std::string* context) {
  if (context != nullptr) {
    
  } else {
    
  }
  context_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), context,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.MailInfo.context)
}

// bytes sender = 5;
inline void MailInfo::clear_sender() {
  sender_.ClearToEmpty();
}
inline const std::string& MailInfo::sender() const {
  // @@protoc_insertion_point(field_get:KWMsg.MailInfo.sender)
  return _internal_sender();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailInfo::set_sender(ArgT0&& arg0, ArgT... args) {
 
 sender_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.MailInfo.sender)
}
inline std::string* MailInfo::mutable_sender() {
  // @@protoc_insertion_point(field_mutable:KWMsg.MailInfo.sender)
  return _internal_mutable_sender();
}
inline const std::string& MailInfo::_internal_sender() const {
  return sender_.Get();
}
inline void MailInfo::_internal_set_sender(const std::string& value) {
  
  sender_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MailInfo::_internal_mutable_sender() {
  
  return sender_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MailInfo::release_sender() {
  // @@protoc_insertion_point(field_release:KWMsg.MailInfo.sender)
  return sender_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MailInfo::set_allocated_sender(std::string* sender) {
  if (sender != nullptr) {
    
  } else {
    
  }
  sender_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sender,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.MailInfo.sender)
}

// bytes parms = 6;
inline void MailInfo::clear_parms() {
  parms_.ClearToEmpty();
}
inline const std::string& MailInfo::parms() const {
  // @@protoc_insertion_point(field_get:KWMsg.MailInfo.parms)
  return _internal_parms();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void MailInfo::set_parms(ArgT0&& arg0, ArgT... args) {
 
 parms_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.MailInfo.parms)
}
inline std::string* MailInfo::mutable_parms() {
  // @@protoc_insertion_point(field_mutable:KWMsg.MailInfo.parms)
  return _internal_mutable_parms();
}
inline const std::string& MailInfo::_internal_parms() const {
  return parms_.Get();
}
inline void MailInfo::_internal_set_parms(const std::string& value) {
  
  parms_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* MailInfo::_internal_mutable_parms() {
  
  return parms_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* MailInfo::release_parms() {
  // @@protoc_insertion_point(field_release:KWMsg.MailInfo.parms)
  return parms_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void MailInfo::set_allocated_parms(std::string* parms) {
  if (parms != nullptr) {
    
  } else {
    
  }
  parms_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), parms,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.MailInfo.parms)
}

// repeated .KWMsg.RewardInfo reward_list = 7;
inline int MailInfo::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int MailInfo::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void MailInfo::clear_reward_list() {
  reward_list_.Clear();
}
inline ::KWMsg::RewardInfo* MailInfo::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.MailInfo.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
MailInfo::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.MailInfo.reward_list)
  return &reward_list_;
}
inline const ::KWMsg::RewardInfo& MailInfo::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::KWMsg::RewardInfo& MailInfo::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.MailInfo.reward_list)
  return _internal_reward_list(index);
}
inline ::KWMsg::RewardInfo* MailInfo::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::KWMsg::RewardInfo* MailInfo::add_reward_list() {
  // @@protoc_insertion_point(field_add:KWMsg.MailInfo.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
MailInfo::reward_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.MailInfo.reward_list)
  return reward_list_;
}

// int64 create_ts = 8;
inline void MailInfo::clear_create_ts() {
  create_ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MailInfo::_internal_create_ts() const {
  return create_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MailInfo::create_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.MailInfo.create_ts)
  return _internal_create_ts();
}
inline void MailInfo::_internal_set_create_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  create_ts_ = value;
}
inline void MailInfo::set_create_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_create_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.MailInfo.create_ts)
}

// int64 deadline_ts = 9;
inline void MailInfo::clear_deadline_ts() {
  deadline_ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MailInfo::_internal_deadline_ts() const {
  return deadline_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MailInfo::deadline_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.MailInfo.deadline_ts)
  return _internal_deadline_ts();
}
inline void MailInfo::_internal_set_deadline_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  deadline_ts_ = value;
}
inline void MailInfo::set_deadline_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_deadline_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.MailInfo.deadline_ts)
}

// -------------------------------------------------------------------

// MailInfos

// repeated .KWMsg.MailInfo list = 1;
inline int MailInfos::_internal_list_size() const {
  return list_.size();
}
inline int MailInfos::list_size() const {
  return _internal_list_size();
}
inline void MailInfos::clear_list() {
  list_.Clear();
}
inline ::KWMsg::MailInfo* MailInfos::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.MailInfos.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::MailInfo >*
MailInfos::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.MailInfos.list)
  return &list_;
}
inline const ::KWMsg::MailInfo& MailInfos::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::KWMsg::MailInfo& MailInfos::list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.MailInfos.list)
  return _internal_list(index);
}
inline ::KWMsg::MailInfo* MailInfos::_internal_add_list() {
  return list_.Add();
}
inline ::KWMsg::MailInfo* MailInfos::add_list() {
  // @@protoc_insertion_point(field_add:KWMsg.MailInfos.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::MailInfo >&
MailInfos::list() const {
  // @@protoc_insertion_point(field_list:KWMsg.MailInfos.list)
  return list_;
}

// -------------------------------------------------------------------

// ReqDeleteReadedMails

// .KWMsg.Ident player_id = 1;
inline bool ReqDeleteReadedMails::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqDeleteReadedMails::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqDeleteReadedMails::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqDeleteReadedMails::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDeleteReadedMails.player_id)
  return _internal_player_id();
}
inline void ReqDeleteReadedMails::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqDeleteReadedMails.player_id)
}
inline ::KWMsg::Ident* ReqDeleteReadedMails::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqDeleteReadedMails::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDeleteReadedMails.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqDeleteReadedMails::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqDeleteReadedMails::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDeleteReadedMails.player_id)
  return _internal_mutable_player_id();
}
inline void ReqDeleteReadedMails::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDeleteReadedMails.player_id)
}

// repeated bytes mail_ids = 2;
inline int ReqDeleteReadedMails::_internal_mail_ids_size() const {
  return mail_ids_.size();
}
inline int ReqDeleteReadedMails::mail_ids_size() const {
  return _internal_mail_ids_size();
}
inline void ReqDeleteReadedMails::clear_mail_ids() {
  mail_ids_.Clear();
}
inline std::string* ReqDeleteReadedMails::add_mail_ids() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.ReqDeleteReadedMails.mail_ids)
  return _internal_add_mail_ids();
}
inline const std::string& ReqDeleteReadedMails::_internal_mail_ids(int index) const {
  return mail_ids_.Get(index);
}
inline const std::string& ReqDeleteReadedMails::mail_ids(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDeleteReadedMails.mail_ids)
  return _internal_mail_ids(index);
}
inline std::string* ReqDeleteReadedMails::mutable_mail_ids(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDeleteReadedMails.mail_ids)
  return mail_ids_.Mutable(index);
}
inline void ReqDeleteReadedMails::set_mail_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.ReqDeleteReadedMails.mail_ids)
  mail_ids_.Mutable(index)->assign(value);
}
inline void ReqDeleteReadedMails::set_mail_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.ReqDeleteReadedMails.mail_ids)
  mail_ids_.Mutable(index)->assign(std::move(value));
}
inline void ReqDeleteReadedMails::set_mail_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mail_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.ReqDeleteReadedMails.mail_ids)
}
inline void ReqDeleteReadedMails::set_mail_ids(int index, const void* value, size_t size) {
  mail_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.ReqDeleteReadedMails.mail_ids)
}
inline std::string* ReqDeleteReadedMails::_internal_add_mail_ids() {
  return mail_ids_.Add();
}
inline void ReqDeleteReadedMails::add_mail_ids(const std::string& value) {
  mail_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.ReqDeleteReadedMails.mail_ids)
}
inline void ReqDeleteReadedMails::add_mail_ids(std::string&& value) {
  mail_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.ReqDeleteReadedMails.mail_ids)
}
inline void ReqDeleteReadedMails::add_mail_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mail_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.ReqDeleteReadedMails.mail_ids)
}
inline void ReqDeleteReadedMails::add_mail_ids(const void* value, size_t size) {
  mail_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.ReqDeleteReadedMails.mail_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReqDeleteReadedMails::mail_ids() const {
  // @@protoc_insertion_point(field_list:KWMsg.ReqDeleteReadedMails.mail_ids)
  return mail_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReqDeleteReadedMails::mutable_mail_ids() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ReqDeleteReadedMails.mail_ids)
  return &mail_ids_;
}

// -------------------------------------------------------------------

// AckDeleteReadedMails

// .KWMsg.EGameEventCode event_code = 1;
inline void AckDeleteReadedMails::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckDeleteReadedMails::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckDeleteReadedMails::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDeleteReadedMails.event_code)
  return _internal_event_code();
}
inline void AckDeleteReadedMails::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckDeleteReadedMails::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckDeleteReadedMails.event_code)
}

// -------------------------------------------------------------------

// ReqReadMails

// .KWMsg.Ident player_id = 1;
inline bool ReqReadMails::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqReadMails::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqReadMails::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqReadMails::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqReadMails.player_id)
  return _internal_player_id();
}
inline void ReqReadMails::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqReadMails.player_id)
}
inline ::KWMsg::Ident* ReqReadMails::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqReadMails::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqReadMails.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqReadMails::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqReadMails::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqReadMails.player_id)
  return _internal_mutable_player_id();
}
inline void ReqReadMails::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqReadMails.player_id)
}

// repeated bytes mail_ids = 2;
inline int ReqReadMails::_internal_mail_ids_size() const {
  return mail_ids_.size();
}
inline int ReqReadMails::mail_ids_size() const {
  return _internal_mail_ids_size();
}
inline void ReqReadMails::clear_mail_ids() {
  mail_ids_.Clear();
}
inline std::string* ReqReadMails::add_mail_ids() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.ReqReadMails.mail_ids)
  return _internal_add_mail_ids();
}
inline const std::string& ReqReadMails::_internal_mail_ids(int index) const {
  return mail_ids_.Get(index);
}
inline const std::string& ReqReadMails::mail_ids(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqReadMails.mail_ids)
  return _internal_mail_ids(index);
}
inline std::string* ReqReadMails::mutable_mail_ids(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqReadMails.mail_ids)
  return mail_ids_.Mutable(index);
}
inline void ReqReadMails::set_mail_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.ReqReadMails.mail_ids)
  mail_ids_.Mutable(index)->assign(value);
}
inline void ReqReadMails::set_mail_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.ReqReadMails.mail_ids)
  mail_ids_.Mutable(index)->assign(std::move(value));
}
inline void ReqReadMails::set_mail_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mail_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.ReqReadMails.mail_ids)
}
inline void ReqReadMails::set_mail_ids(int index, const void* value, size_t size) {
  mail_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.ReqReadMails.mail_ids)
}
inline std::string* ReqReadMails::_internal_add_mail_ids() {
  return mail_ids_.Add();
}
inline void ReqReadMails::add_mail_ids(const std::string& value) {
  mail_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.ReqReadMails.mail_ids)
}
inline void ReqReadMails::add_mail_ids(std::string&& value) {
  mail_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.ReqReadMails.mail_ids)
}
inline void ReqReadMails::add_mail_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  mail_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.ReqReadMails.mail_ids)
}
inline void ReqReadMails::add_mail_ids(const void* value, size_t size) {
  mail_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.ReqReadMails.mail_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReqReadMails::mail_ids() const {
  // @@protoc_insertion_point(field_list:KWMsg.ReqReadMails.mail_ids)
  return mail_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReqReadMails::mutable_mail_ids() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ReqReadMails.mail_ids)
  return &mail_ids_;
}

// -------------------------------------------------------------------

// AckReadMails

// .KWMsg.EGameEventCode event_code = 1;
inline void AckReadMails::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckReadMails::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckReadMails::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckReadMails.event_code)
  return _internal_event_code();
}
inline void AckReadMails::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckReadMails::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckReadMails.event_code)
}

// repeated .KWMsg.RewardInfo reward_list = 2;
inline int AckReadMails::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int AckReadMails::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void AckReadMails::clear_reward_list() {
  reward_list_.Clear();
}
inline ::KWMsg::RewardInfo* AckReadMails::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckReadMails.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
AckReadMails::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckReadMails.reward_list)
  return &reward_list_;
}
inline const ::KWMsg::RewardInfo& AckReadMails::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::KWMsg::RewardInfo& AckReadMails::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckReadMails.reward_list)
  return _internal_reward_list(index);
}
inline ::KWMsg::RewardInfo* AckReadMails::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::KWMsg::RewardInfo* AckReadMails::add_reward_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckReadMails.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
AckReadMails::reward_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckReadMails.reward_list)
  return reward_list_;
}

// -------------------------------------------------------------------

// ReqWorldSendMailToPlayer

// .KWMsg.Ident player_id = 1;
inline bool ReqWorldSendMailToPlayer::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqWorldSendMailToPlayer::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqWorldSendMailToPlayer::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqWorldSendMailToPlayer::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWorldSendMailToPlayer.player_id)
  return _internal_player_id();
}
inline void ReqWorldSendMailToPlayer::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqWorldSendMailToPlayer.player_id)
}
inline ::KWMsg::Ident* ReqWorldSendMailToPlayer::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqWorldSendMailToPlayer::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWorldSendMailToPlayer.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqWorldSendMailToPlayer::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqWorldSendMailToPlayer::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWorldSendMailToPlayer.player_id)
  return _internal_mutable_player_id();
}
inline void ReqWorldSendMailToPlayer::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWorldSendMailToPlayer.player_id)
}

// .KWMsg.MailInfo mail_info = 2;
inline bool ReqWorldSendMailToPlayer::_internal_has_mail_info() const {
  return this != internal_default_instance() && mail_info_ != nullptr;
}
inline bool ReqWorldSendMailToPlayer::has_mail_info() const {
  return _internal_has_mail_info();
}
inline void ReqWorldSendMailToPlayer::clear_mail_info() {
  if (GetArenaForAllocation() == nullptr && mail_info_ != nullptr) {
    delete mail_info_;
  }
  mail_info_ = nullptr;
}
inline const ::KWMsg::MailInfo& ReqWorldSendMailToPlayer::_internal_mail_info() const {
  const ::KWMsg::MailInfo* p = mail_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::MailInfo&>(
      ::KWMsg::_MailInfo_default_instance_);
}
inline const ::KWMsg::MailInfo& ReqWorldSendMailToPlayer::mail_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqWorldSendMailToPlayer.mail_info)
  return _internal_mail_info();
}
inline void ReqWorldSendMailToPlayer::unsafe_arena_set_allocated_mail_info(
    ::KWMsg::MailInfo* mail_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail_info_);
  }
  mail_info_ = mail_info;
  if (mail_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqWorldSendMailToPlayer.mail_info)
}
inline ::KWMsg::MailInfo* ReqWorldSendMailToPlayer::release_mail_info() {
  
  ::KWMsg::MailInfo* temp = mail_info_;
  mail_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::MailInfo* ReqWorldSendMailToPlayer::unsafe_arena_release_mail_info() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqWorldSendMailToPlayer.mail_info)
  
  ::KWMsg::MailInfo* temp = mail_info_;
  mail_info_ = nullptr;
  return temp;
}
inline ::KWMsg::MailInfo* ReqWorldSendMailToPlayer::_internal_mutable_mail_info() {
  
  if (mail_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::MailInfo>(GetArenaForAllocation());
    mail_info_ = p;
  }
  return mail_info_;
}
inline ::KWMsg::MailInfo* ReqWorldSendMailToPlayer::mutable_mail_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqWorldSendMailToPlayer.mail_info)
  return _internal_mutable_mail_info();
}
inline void ReqWorldSendMailToPlayer::set_allocated_mail_info(::KWMsg::MailInfo* mail_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mail_info_;
  }
  if (mail_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::MailInfo>::GetOwningArena(mail_info);
    if (message_arena != submessage_arena) {
      mail_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mail_info, submessage_arena);
    }
    
  } else {
    
  }
  mail_info_ = mail_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqWorldSendMailToPlayer.mail_info)
}

// -------------------------------------------------------------------

// AckWorldSendMailToPlayer

// .KWMsg.EGameEventCode event_code = 1;
inline void AckWorldSendMailToPlayer::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckWorldSendMailToPlayer::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckWorldSendMailToPlayer::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckWorldSendMailToPlayer.event_code)
  return _internal_event_code();
}
inline void AckWorldSendMailToPlayer::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckWorldSendMailToPlayer::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckWorldSendMailToPlayer.event_code)
}

// .KWMsg.Ident player_id = 2;
inline bool AckWorldSendMailToPlayer::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckWorldSendMailToPlayer::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckWorldSendMailToPlayer::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckWorldSendMailToPlayer::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckWorldSendMailToPlayer.player_id)
  return _internal_player_id();
}
inline void AckWorldSendMailToPlayer::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckWorldSendMailToPlayer.player_id)
}
inline ::KWMsg::Ident* AckWorldSendMailToPlayer::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckWorldSendMailToPlayer::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckWorldSendMailToPlayer.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckWorldSendMailToPlayer::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckWorldSendMailToPlayer::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckWorldSendMailToPlayer.player_id)
  return _internal_mutable_player_id();
}
inline void AckWorldSendMailToPlayer::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckWorldSendMailToPlayer.player_id)
}

// .KWMsg.MailInfo mail_info = 3;
inline bool AckWorldSendMailToPlayer::_internal_has_mail_info() const {
  return this != internal_default_instance() && mail_info_ != nullptr;
}
inline bool AckWorldSendMailToPlayer::has_mail_info() const {
  return _internal_has_mail_info();
}
inline void AckWorldSendMailToPlayer::clear_mail_info() {
  if (GetArenaForAllocation() == nullptr && mail_info_ != nullptr) {
    delete mail_info_;
  }
  mail_info_ = nullptr;
}
inline const ::KWMsg::MailInfo& AckWorldSendMailToPlayer::_internal_mail_info() const {
  const ::KWMsg::MailInfo* p = mail_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::MailInfo&>(
      ::KWMsg::_MailInfo_default_instance_);
}
inline const ::KWMsg::MailInfo& AckWorldSendMailToPlayer::mail_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckWorldSendMailToPlayer.mail_info)
  return _internal_mail_info();
}
inline void AckWorldSendMailToPlayer::unsafe_arena_set_allocated_mail_info(
    ::KWMsg::MailInfo* mail_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail_info_);
  }
  mail_info_ = mail_info;
  if (mail_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckWorldSendMailToPlayer.mail_info)
}
inline ::KWMsg::MailInfo* AckWorldSendMailToPlayer::release_mail_info() {
  
  ::KWMsg::MailInfo* temp = mail_info_;
  mail_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::MailInfo* AckWorldSendMailToPlayer::unsafe_arena_release_mail_info() {
  // @@protoc_insertion_point(field_release:KWMsg.AckWorldSendMailToPlayer.mail_info)
  
  ::KWMsg::MailInfo* temp = mail_info_;
  mail_info_ = nullptr;
  return temp;
}
inline ::KWMsg::MailInfo* AckWorldSendMailToPlayer::_internal_mutable_mail_info() {
  
  if (mail_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::MailInfo>(GetArenaForAllocation());
    mail_info_ = p;
  }
  return mail_info_;
}
inline ::KWMsg::MailInfo* AckWorldSendMailToPlayer::mutable_mail_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckWorldSendMailToPlayer.mail_info)
  return _internal_mutable_mail_info();
}
inline void AckWorldSendMailToPlayer::set_allocated_mail_info(::KWMsg::MailInfo* mail_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mail_info_;
  }
  if (mail_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::MailInfo>::GetOwningArena(mail_info);
    if (message_arena != submessage_arena) {
      mail_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mail_info, submessage_arena);
    }
    
  } else {
    
  }
  mail_info_ = mail_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckWorldSendMailToPlayer.mail_info)
}

// -------------------------------------------------------------------

// SyncAddPreSendAllPlayersMails

// .KWMsg.MailInfo mail_info = 1;
inline bool SyncAddPreSendAllPlayersMails::_internal_has_mail_info() const {
  return this != internal_default_instance() && mail_info_ != nullptr;
}
inline bool SyncAddPreSendAllPlayersMails::has_mail_info() const {
  return _internal_has_mail_info();
}
inline void SyncAddPreSendAllPlayersMails::clear_mail_info() {
  if (GetArenaForAllocation() == nullptr && mail_info_ != nullptr) {
    delete mail_info_;
  }
  mail_info_ = nullptr;
}
inline const ::KWMsg::MailInfo& SyncAddPreSendAllPlayersMails::_internal_mail_info() const {
  const ::KWMsg::MailInfo* p = mail_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::MailInfo&>(
      ::KWMsg::_MailInfo_default_instance_);
}
inline const ::KWMsg::MailInfo& SyncAddPreSendAllPlayersMails::mail_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncAddPreSendAllPlayersMails.mail_info)
  return _internal_mail_info();
}
inline void SyncAddPreSendAllPlayersMails::unsafe_arena_set_allocated_mail_info(
    ::KWMsg::MailInfo* mail_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail_info_);
  }
  mail_info_ = mail_info;
  if (mail_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncAddPreSendAllPlayersMails.mail_info)
}
inline ::KWMsg::MailInfo* SyncAddPreSendAllPlayersMails::release_mail_info() {
  
  ::KWMsg::MailInfo* temp = mail_info_;
  mail_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::MailInfo* SyncAddPreSendAllPlayersMails::unsafe_arena_release_mail_info() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncAddPreSendAllPlayersMails.mail_info)
  
  ::KWMsg::MailInfo* temp = mail_info_;
  mail_info_ = nullptr;
  return temp;
}
inline ::KWMsg::MailInfo* SyncAddPreSendAllPlayersMails::_internal_mutable_mail_info() {
  
  if (mail_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::MailInfo>(GetArenaForAllocation());
    mail_info_ = p;
  }
  return mail_info_;
}
inline ::KWMsg::MailInfo* SyncAddPreSendAllPlayersMails::mutable_mail_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncAddPreSendAllPlayersMails.mail_info)
  return _internal_mutable_mail_info();
}
inline void SyncAddPreSendAllPlayersMails::set_allocated_mail_info(::KWMsg::MailInfo* mail_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mail_info_;
  }
  if (mail_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::MailInfo>::GetOwningArena(mail_info);
    if (message_arena != submessage_arena) {
      mail_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mail_info, submessage_arena);
    }
    
  } else {
    
  }
  mail_info_ = mail_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncAddPreSendAllPlayersMails.mail_info)
}

// -------------------------------------------------------------------

// SyncDelPreSendAllPlayersMails

// .KWMsg.MailInfo mail_info = 1;
inline bool SyncDelPreSendAllPlayersMails::_internal_has_mail_info() const {
  return this != internal_default_instance() && mail_info_ != nullptr;
}
inline bool SyncDelPreSendAllPlayersMails::has_mail_info() const {
  return _internal_has_mail_info();
}
inline void SyncDelPreSendAllPlayersMails::clear_mail_info() {
  if (GetArenaForAllocation() == nullptr && mail_info_ != nullptr) {
    delete mail_info_;
  }
  mail_info_ = nullptr;
}
inline const ::KWMsg::MailInfo& SyncDelPreSendAllPlayersMails::_internal_mail_info() const {
  const ::KWMsg::MailInfo* p = mail_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::MailInfo&>(
      ::KWMsg::_MailInfo_default_instance_);
}
inline const ::KWMsg::MailInfo& SyncDelPreSendAllPlayersMails::mail_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncDelPreSendAllPlayersMails.mail_info)
  return _internal_mail_info();
}
inline void SyncDelPreSendAllPlayersMails::unsafe_arena_set_allocated_mail_info(
    ::KWMsg::MailInfo* mail_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail_info_);
  }
  mail_info_ = mail_info;
  if (mail_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncDelPreSendAllPlayersMails.mail_info)
}
inline ::KWMsg::MailInfo* SyncDelPreSendAllPlayersMails::release_mail_info() {
  
  ::KWMsg::MailInfo* temp = mail_info_;
  mail_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::MailInfo* SyncDelPreSendAllPlayersMails::unsafe_arena_release_mail_info() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncDelPreSendAllPlayersMails.mail_info)
  
  ::KWMsg::MailInfo* temp = mail_info_;
  mail_info_ = nullptr;
  return temp;
}
inline ::KWMsg::MailInfo* SyncDelPreSendAllPlayersMails::_internal_mutable_mail_info() {
  
  if (mail_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::MailInfo>(GetArenaForAllocation());
    mail_info_ = p;
  }
  return mail_info_;
}
inline ::KWMsg::MailInfo* SyncDelPreSendAllPlayersMails::mutable_mail_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncDelPreSendAllPlayersMails.mail_info)
  return _internal_mutable_mail_info();
}
inline void SyncDelPreSendAllPlayersMails::set_allocated_mail_info(::KWMsg::MailInfo* mail_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mail_info_;
  }
  if (mail_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::MailInfo>::GetOwningArena(mail_info);
    if (message_arena != submessage_arena) {
      mail_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mail_info, submessage_arena);
    }
    
  } else {
    
  }
  mail_info_ = mail_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncDelPreSendAllPlayersMails.mail_info)
}

// -------------------------------------------------------------------

// SyncAddPreSendPlayerMails

// .KWMsg.Ident player_id = 1;
inline bool SyncAddPreSendPlayerMails::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncAddPreSendPlayerMails::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncAddPreSendPlayerMails::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncAddPreSendPlayerMails::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncAddPreSendPlayerMails.player_id)
  return _internal_player_id();
}
inline void SyncAddPreSendPlayerMails::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncAddPreSendPlayerMails.player_id)
}
inline ::KWMsg::Ident* SyncAddPreSendPlayerMails::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncAddPreSendPlayerMails::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncAddPreSendPlayerMails.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncAddPreSendPlayerMails::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncAddPreSendPlayerMails::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncAddPreSendPlayerMails.player_id)
  return _internal_mutable_player_id();
}
inline void SyncAddPreSendPlayerMails::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncAddPreSendPlayerMails.player_id)
}

// .KWMsg.MailInfo mail_info = 2;
inline bool SyncAddPreSendPlayerMails::_internal_has_mail_info() const {
  return this != internal_default_instance() && mail_info_ != nullptr;
}
inline bool SyncAddPreSendPlayerMails::has_mail_info() const {
  return _internal_has_mail_info();
}
inline void SyncAddPreSendPlayerMails::clear_mail_info() {
  if (GetArenaForAllocation() == nullptr && mail_info_ != nullptr) {
    delete mail_info_;
  }
  mail_info_ = nullptr;
}
inline const ::KWMsg::MailInfo& SyncAddPreSendPlayerMails::_internal_mail_info() const {
  const ::KWMsg::MailInfo* p = mail_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::MailInfo&>(
      ::KWMsg::_MailInfo_default_instance_);
}
inline const ::KWMsg::MailInfo& SyncAddPreSendPlayerMails::mail_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncAddPreSendPlayerMails.mail_info)
  return _internal_mail_info();
}
inline void SyncAddPreSendPlayerMails::unsafe_arena_set_allocated_mail_info(
    ::KWMsg::MailInfo* mail_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail_info_);
  }
  mail_info_ = mail_info;
  if (mail_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncAddPreSendPlayerMails.mail_info)
}
inline ::KWMsg::MailInfo* SyncAddPreSendPlayerMails::release_mail_info() {
  
  ::KWMsg::MailInfo* temp = mail_info_;
  mail_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::MailInfo* SyncAddPreSendPlayerMails::unsafe_arena_release_mail_info() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncAddPreSendPlayerMails.mail_info)
  
  ::KWMsg::MailInfo* temp = mail_info_;
  mail_info_ = nullptr;
  return temp;
}
inline ::KWMsg::MailInfo* SyncAddPreSendPlayerMails::_internal_mutable_mail_info() {
  
  if (mail_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::MailInfo>(GetArenaForAllocation());
    mail_info_ = p;
  }
  return mail_info_;
}
inline ::KWMsg::MailInfo* SyncAddPreSendPlayerMails::mutable_mail_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncAddPreSendPlayerMails.mail_info)
  return _internal_mutable_mail_info();
}
inline void SyncAddPreSendPlayerMails::set_allocated_mail_info(::KWMsg::MailInfo* mail_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mail_info_;
  }
  if (mail_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::MailInfo>::GetOwningArena(mail_info);
    if (message_arena != submessage_arena) {
      mail_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mail_info, submessage_arena);
    }
    
  } else {
    
  }
  mail_info_ = mail_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncAddPreSendPlayerMails.mail_info)
}

// -------------------------------------------------------------------

// SyncDelPreSendPlayerMails

// .KWMsg.Ident player_id = 1;
inline bool SyncDelPreSendPlayerMails::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncDelPreSendPlayerMails::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncDelPreSendPlayerMails::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncDelPreSendPlayerMails::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncDelPreSendPlayerMails.player_id)
  return _internal_player_id();
}
inline void SyncDelPreSendPlayerMails::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncDelPreSendPlayerMails.player_id)
}
inline ::KWMsg::Ident* SyncDelPreSendPlayerMails::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncDelPreSendPlayerMails::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncDelPreSendPlayerMails.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncDelPreSendPlayerMails::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncDelPreSendPlayerMails::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncDelPreSendPlayerMails.player_id)
  return _internal_mutable_player_id();
}
inline void SyncDelPreSendPlayerMails::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncDelPreSendPlayerMails.player_id)
}

// .KWMsg.MailInfo mail_info = 2;
inline bool SyncDelPreSendPlayerMails::_internal_has_mail_info() const {
  return this != internal_default_instance() && mail_info_ != nullptr;
}
inline bool SyncDelPreSendPlayerMails::has_mail_info() const {
  return _internal_has_mail_info();
}
inline void SyncDelPreSendPlayerMails::clear_mail_info() {
  if (GetArenaForAllocation() == nullptr && mail_info_ != nullptr) {
    delete mail_info_;
  }
  mail_info_ = nullptr;
}
inline const ::KWMsg::MailInfo& SyncDelPreSendPlayerMails::_internal_mail_info() const {
  const ::KWMsg::MailInfo* p = mail_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::MailInfo&>(
      ::KWMsg::_MailInfo_default_instance_);
}
inline const ::KWMsg::MailInfo& SyncDelPreSendPlayerMails::mail_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncDelPreSendPlayerMails.mail_info)
  return _internal_mail_info();
}
inline void SyncDelPreSendPlayerMails::unsafe_arena_set_allocated_mail_info(
    ::KWMsg::MailInfo* mail_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mail_info_);
  }
  mail_info_ = mail_info;
  if (mail_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncDelPreSendPlayerMails.mail_info)
}
inline ::KWMsg::MailInfo* SyncDelPreSendPlayerMails::release_mail_info() {
  
  ::KWMsg::MailInfo* temp = mail_info_;
  mail_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::MailInfo* SyncDelPreSendPlayerMails::unsafe_arena_release_mail_info() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncDelPreSendPlayerMails.mail_info)
  
  ::KWMsg::MailInfo* temp = mail_info_;
  mail_info_ = nullptr;
  return temp;
}
inline ::KWMsg::MailInfo* SyncDelPreSendPlayerMails::_internal_mutable_mail_info() {
  
  if (mail_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::MailInfo>(GetArenaForAllocation());
    mail_info_ = p;
  }
  return mail_info_;
}
inline ::KWMsg::MailInfo* SyncDelPreSendPlayerMails::mutable_mail_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncDelPreSendPlayerMails.mail_info)
  return _internal_mutable_mail_info();
}
inline void SyncDelPreSendPlayerMails::set_allocated_mail_info(::KWMsg::MailInfo* mail_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete mail_info_;
  }
  if (mail_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::MailInfo>::GetOwningArena(mail_info);
    if (message_arena != submessage_arena) {
      mail_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mail_info, submessage_arena);
    }
    
  } else {
    
  }
  mail_info_ = mail_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncDelPreSendPlayerMails.mail_info)
}

// -------------------------------------------------------------------

// SyncPlayerMailSessions

// .KWMsg.Ident player_id = 1;
inline bool SyncPlayerMailSessions::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncPlayerMailSessions::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncPlayerMailSessions::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncPlayerMailSessions::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerMailSessions.player_id)
  return _internal_player_id();
}
inline void SyncPlayerMailSessions::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerMailSessions.player_id)
}
inline ::KWMsg::Ident* SyncPlayerMailSessions::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerMailSessions::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerMailSessions.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerMailSessions::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncPlayerMailSessions::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerMailSessions.player_id)
  return _internal_mutable_player_id();
}
inline void SyncPlayerMailSessions::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerMailSessions.player_id)
}

// int64 ts = 2;
inline void SyncPlayerMailSessions::clear_ts() {
  ts_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncPlayerMailSessions::_internal_ts() const {
  return ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SyncPlayerMailSessions::ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerMailSessions.ts)
  return _internal_ts();
}
inline void SyncPlayerMailSessions::_internal_set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  ts_ = value;
}
inline void SyncPlayerMailSessions::set_ts(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerMailSessions.ts)
}

// -------------------------------------------------------------------

// ReqRegisterChatSdkAccount

// .KWMsg.Ident player_id = 1;
inline bool ReqRegisterChatSdkAccount::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqRegisterChatSdkAccount::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqRegisterChatSdkAccount::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqRegisterChatSdkAccount::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRegisterChatSdkAccount.player_id)
  return _internal_player_id();
}
inline void ReqRegisterChatSdkAccount::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqRegisterChatSdkAccount.player_id)
}
inline ::KWMsg::Ident* ReqRegisterChatSdkAccount::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqRegisterChatSdkAccount::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqRegisterChatSdkAccount.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqRegisterChatSdkAccount::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqRegisterChatSdkAccount::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqRegisterChatSdkAccount.player_id)
  return _internal_mutable_player_id();
}
inline void ReqRegisterChatSdkAccount::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqRegisterChatSdkAccount.player_id)
}

// bytes chat_sdk_passwd = 2;
inline void ReqRegisterChatSdkAccount::clear_chat_sdk_passwd() {
  chat_sdk_passwd_.ClearToEmpty();
}
inline const std::string& ReqRegisterChatSdkAccount::chat_sdk_passwd() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRegisterChatSdkAccount.chat_sdk_passwd)
  return _internal_chat_sdk_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqRegisterChatSdkAccount::set_chat_sdk_passwd(ArgT0&& arg0, ArgT... args) {
 
 chat_sdk_passwd_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqRegisterChatSdkAccount.chat_sdk_passwd)
}
inline std::string* ReqRegisterChatSdkAccount::mutable_chat_sdk_passwd() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqRegisterChatSdkAccount.chat_sdk_passwd)
  return _internal_mutable_chat_sdk_passwd();
}
inline const std::string& ReqRegisterChatSdkAccount::_internal_chat_sdk_passwd() const {
  return chat_sdk_passwd_.Get();
}
inline void ReqRegisterChatSdkAccount::_internal_set_chat_sdk_passwd(const std::string& value) {
  
  chat_sdk_passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqRegisterChatSdkAccount::_internal_mutable_chat_sdk_passwd() {
  
  return chat_sdk_passwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqRegisterChatSdkAccount::release_chat_sdk_passwd() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqRegisterChatSdkAccount.chat_sdk_passwd)
  return chat_sdk_passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqRegisterChatSdkAccount::set_allocated_chat_sdk_passwd(std::string* chat_sdk_passwd) {
  if (chat_sdk_passwd != nullptr) {
    
  } else {
    
  }
  chat_sdk_passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_sdk_passwd,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqRegisterChatSdkAccount.chat_sdk_passwd)
}

// int32 world_id = 3;
inline void ReqRegisterChatSdkAccount::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqRegisterChatSdkAccount::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqRegisterChatSdkAccount::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRegisterChatSdkAccount.world_id)
  return _internal_world_id();
}
inline void ReqRegisterChatSdkAccount::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void ReqRegisterChatSdkAccount::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqRegisterChatSdkAccount.world_id)
}

// -------------------------------------------------------------------

// AckRegisterChatSdkAccount

// .KWMsg.EGameEventCode event_code = 1;
inline void AckRegisterChatSdkAccount::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckRegisterChatSdkAccount::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckRegisterChatSdkAccount::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckRegisterChatSdkAccount.event_code)
  return _internal_event_code();
}
inline void AckRegisterChatSdkAccount::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckRegisterChatSdkAccount::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckRegisterChatSdkAccount.event_code)
}

// .KWMsg.Ident player_id = 2;
inline bool AckRegisterChatSdkAccount::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckRegisterChatSdkAccount::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckRegisterChatSdkAccount::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckRegisterChatSdkAccount::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckRegisterChatSdkAccount.player_id)
  return _internal_player_id();
}
inline void AckRegisterChatSdkAccount::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckRegisterChatSdkAccount.player_id)
}
inline ::KWMsg::Ident* AckRegisterChatSdkAccount::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckRegisterChatSdkAccount::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckRegisterChatSdkAccount.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckRegisterChatSdkAccount::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckRegisterChatSdkAccount::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckRegisterChatSdkAccount.player_id)
  return _internal_mutable_player_id();
}
inline void AckRegisterChatSdkAccount::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckRegisterChatSdkAccount.player_id)
}

// bytes chat_sdk_passwd = 3;
inline void AckRegisterChatSdkAccount::clear_chat_sdk_passwd() {
  chat_sdk_passwd_.ClearToEmpty();
}
inline const std::string& AckRegisterChatSdkAccount::chat_sdk_passwd() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckRegisterChatSdkAccount.chat_sdk_passwd)
  return _internal_chat_sdk_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckRegisterChatSdkAccount::set_chat_sdk_passwd(ArgT0&& arg0, ArgT... args) {
 
 chat_sdk_passwd_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckRegisterChatSdkAccount.chat_sdk_passwd)
}
inline std::string* AckRegisterChatSdkAccount::mutable_chat_sdk_passwd() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckRegisterChatSdkAccount.chat_sdk_passwd)
  return _internal_mutable_chat_sdk_passwd();
}
inline const std::string& AckRegisterChatSdkAccount::_internal_chat_sdk_passwd() const {
  return chat_sdk_passwd_.Get();
}
inline void AckRegisterChatSdkAccount::_internal_set_chat_sdk_passwd(const std::string& value) {
  
  chat_sdk_passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckRegisterChatSdkAccount::_internal_mutable_chat_sdk_passwd() {
  
  return chat_sdk_passwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckRegisterChatSdkAccount::release_chat_sdk_passwd() {
  // @@protoc_insertion_point(field_release:KWMsg.AckRegisterChatSdkAccount.chat_sdk_passwd)
  return chat_sdk_passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckRegisterChatSdkAccount::set_allocated_chat_sdk_passwd(std::string* chat_sdk_passwd) {
  if (chat_sdk_passwd != nullptr) {
    
  } else {
    
  }
  chat_sdk_passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_sdk_passwd,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckRegisterChatSdkAccount.chat_sdk_passwd)
}

// int32 world_id = 4;
inline void AckRegisterChatSdkAccount::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckRegisterChatSdkAccount::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckRegisterChatSdkAccount::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckRegisterChatSdkAccount.world_id)
  return _internal_world_id();
}
inline void AckRegisterChatSdkAccount::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void AckRegisterChatSdkAccount::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckRegisterChatSdkAccount.world_id)
}

// -------------------------------------------------------------------

// ReqCreateChatroom

// int32 chatroom_type = 1;
inline void ReqCreateChatroom::clear_chatroom_type() {
  chatroom_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCreateChatroom::_internal_chatroom_type() const {
  return chatroom_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCreateChatroom::chatroom_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateChatroom.chatroom_type)
  return _internal_chatroom_type();
}
inline void ReqCreateChatroom::_internal_set_chatroom_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chatroom_type_ = value;
}
inline void ReqCreateChatroom::set_chatroom_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chatroom_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateChatroom.chatroom_type)
}

// bytes chatroom_name = 2;
inline void ReqCreateChatroom::clear_chatroom_name() {
  chatroom_name_.ClearToEmpty();
}
inline const std::string& ReqCreateChatroom::chatroom_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateChatroom.chatroom_name)
  return _internal_chatroom_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCreateChatroom::set_chatroom_name(ArgT0&& arg0, ArgT... args) {
 
 chatroom_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateChatroom.chatroom_name)
}
inline std::string* ReqCreateChatroom::mutable_chatroom_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCreateChatroom.chatroom_name)
  return _internal_mutable_chatroom_name();
}
inline const std::string& ReqCreateChatroom::_internal_chatroom_name() const {
  return chatroom_name_.Get();
}
inline void ReqCreateChatroom::_internal_set_chatroom_name(const std::string& value) {
  
  chatroom_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCreateChatroom::_internal_mutable_chatroom_name() {
  
  return chatroom_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCreateChatroom::release_chatroom_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCreateChatroom.chatroom_name)
  return chatroom_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCreateChatroom::set_allocated_chatroom_name(std::string* chatroom_name) {
  if (chatroom_name != nullptr) {
    
  } else {
    
  }
  chatroom_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatroom_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCreateChatroom.chatroom_name)
}

// int32 world_id = 3;
inline void ReqCreateChatroom::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCreateChatroom::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCreateChatroom::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateChatroom.world_id)
  return _internal_world_id();
}
inline void ReqCreateChatroom::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void ReqCreateChatroom::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateChatroom.world_id)
}

// bytes extra_data = 4;
inline void ReqCreateChatroom::clear_extra_data() {
  extra_data_.ClearToEmpty();
}
inline const std::string& ReqCreateChatroom::extra_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateChatroom.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCreateChatroom::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 extra_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateChatroom.extra_data)
}
inline std::string* ReqCreateChatroom::mutable_extra_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCreateChatroom.extra_data)
  return _internal_mutable_extra_data();
}
inline const std::string& ReqCreateChatroom::_internal_extra_data() const {
  return extra_data_.Get();
}
inline void ReqCreateChatroom::_internal_set_extra_data(const std::string& value) {
  
  extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCreateChatroom::_internal_mutable_extra_data() {
  
  return extra_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCreateChatroom::release_extra_data() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCreateChatroom.extra_data)
  return extra_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCreateChatroom::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  extra_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCreateChatroom.extra_data)
}

// -------------------------------------------------------------------

// AckCreateChatroom

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCreateChatroom::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCreateChatroom::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCreateChatroom::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateChatroom.event_code)
  return _internal_event_code();
}
inline void AckCreateChatroom::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCreateChatroom::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateChatroom.event_code)
}

// int32 chatroom_type = 2;
inline void AckCreateChatroom::clear_chatroom_type() {
  chatroom_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCreateChatroom::_internal_chatroom_type() const {
  return chatroom_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCreateChatroom::chatroom_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateChatroom.chatroom_type)
  return _internal_chatroom_type();
}
inline void AckCreateChatroom::_internal_set_chatroom_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chatroom_type_ = value;
}
inline void AckCreateChatroom::set_chatroom_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chatroom_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateChatroom.chatroom_type)
}

// bytes chatroom_name = 3;
inline void AckCreateChatroom::clear_chatroom_name() {
  chatroom_name_.ClearToEmpty();
}
inline const std::string& AckCreateChatroom::chatroom_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateChatroom.chatroom_name)
  return _internal_chatroom_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCreateChatroom::set_chatroom_name(ArgT0&& arg0, ArgT... args) {
 
 chatroom_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateChatroom.chatroom_name)
}
inline std::string* AckCreateChatroom::mutable_chatroom_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCreateChatroom.chatroom_name)
  return _internal_mutable_chatroom_name();
}
inline const std::string& AckCreateChatroom::_internal_chatroom_name() const {
  return chatroom_name_.Get();
}
inline void AckCreateChatroom::_internal_set_chatroom_name(const std::string& value) {
  
  chatroom_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCreateChatroom::_internal_mutable_chatroom_name() {
  
  return chatroom_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCreateChatroom::release_chatroom_name() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCreateChatroom.chatroom_name)
  return chatroom_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCreateChatroom::set_allocated_chatroom_name(std::string* chatroom_name) {
  if (chatroom_name != nullptr) {
    
  } else {
    
  }
  chatroom_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatroom_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCreateChatroom.chatroom_name)
}

// int32 world_id = 4;
inline void AckCreateChatroom::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCreateChatroom::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCreateChatroom::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateChatroom.world_id)
  return _internal_world_id();
}
inline void AckCreateChatroom::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void AckCreateChatroom::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateChatroom.world_id)
}

// bytes extra_data = 5;
inline void AckCreateChatroom::clear_extra_data() {
  extra_data_.ClearToEmpty();
}
inline const std::string& AckCreateChatroom::extra_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateChatroom.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCreateChatroom::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 extra_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateChatroom.extra_data)
}
inline std::string* AckCreateChatroom::mutable_extra_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCreateChatroom.extra_data)
  return _internal_mutable_extra_data();
}
inline const std::string& AckCreateChatroom::_internal_extra_data() const {
  return extra_data_.Get();
}
inline void AckCreateChatroom::_internal_set_extra_data(const std::string& value) {
  
  extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCreateChatroom::_internal_mutable_extra_data() {
  
  return extra_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCreateChatroom::release_extra_data() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCreateChatroom.extra_data)
  return extra_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCreateChatroom::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  extra_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCreateChatroom.extra_data)
}

// bytes chatroom_id = 6;
inline void AckCreateChatroom::clear_chatroom_id() {
  chatroom_id_.ClearToEmpty();
}
inline const std::string& AckCreateChatroom::chatroom_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateChatroom.chatroom_id)
  return _internal_chatroom_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCreateChatroom::set_chatroom_id(ArgT0&& arg0, ArgT... args) {
 
 chatroom_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateChatroom.chatroom_id)
}
inline std::string* AckCreateChatroom::mutable_chatroom_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCreateChatroom.chatroom_id)
  return _internal_mutable_chatroom_id();
}
inline const std::string& AckCreateChatroom::_internal_chatroom_id() const {
  return chatroom_id_.Get();
}
inline void AckCreateChatroom::_internal_set_chatroom_id(const std::string& value) {
  
  chatroom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCreateChatroom::_internal_mutable_chatroom_id() {
  
  return chatroom_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCreateChatroom::release_chatroom_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCreateChatroom.chatroom_id)
  return chatroom_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCreateChatroom::set_allocated_chatroom_id(std::string* chatroom_id) {
  if (chatroom_id != nullptr) {
    
  } else {
    
  }
  chatroom_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatroom_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCreateChatroom.chatroom_id)
}

// -------------------------------------------------------------------

// ReqSdkLoginInfoAndChatroom

// .KWMsg.Ident player_id = 1;
inline bool ReqSdkLoginInfoAndChatroom::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqSdkLoginInfoAndChatroom::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqSdkLoginInfoAndChatroom::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqSdkLoginInfoAndChatroom::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSdkLoginInfoAndChatroom.player_id)
  return _internal_player_id();
}
inline void ReqSdkLoginInfoAndChatroom::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqSdkLoginInfoAndChatroom.player_id)
}
inline ::KWMsg::Ident* ReqSdkLoginInfoAndChatroom::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqSdkLoginInfoAndChatroom::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSdkLoginInfoAndChatroom.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqSdkLoginInfoAndChatroom::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqSdkLoginInfoAndChatroom::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSdkLoginInfoAndChatroom.player_id)
  return _internal_mutable_player_id();
}
inline void ReqSdkLoginInfoAndChatroom::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSdkLoginInfoAndChatroom.player_id)
}

// bytes community_id = 2;
inline void ReqSdkLoginInfoAndChatroom::clear_community_id() {
  community_id_.ClearToEmpty();
}
inline const std::string& ReqSdkLoginInfoAndChatroom::community_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSdkLoginInfoAndChatroom.community_id)
  return _internal_community_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSdkLoginInfoAndChatroom::set_community_id(ArgT0&& arg0, ArgT... args) {
 
 community_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSdkLoginInfoAndChatroom.community_id)
}
inline std::string* ReqSdkLoginInfoAndChatroom::mutable_community_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSdkLoginInfoAndChatroom.community_id)
  return _internal_mutable_community_id();
}
inline const std::string& ReqSdkLoginInfoAndChatroom::_internal_community_id() const {
  return community_id_.Get();
}
inline void ReqSdkLoginInfoAndChatroom::_internal_set_community_id(const std::string& value) {
  
  community_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSdkLoginInfoAndChatroom::_internal_mutable_community_id() {
  
  return community_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSdkLoginInfoAndChatroom::release_community_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSdkLoginInfoAndChatroom.community_id)
  return community_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSdkLoginInfoAndChatroom::set_allocated_community_id(std::string* community_id) {
  if (community_id != nullptr) {
    
  } else {
    
  }
  community_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSdkLoginInfoAndChatroom.community_id)
}

// -------------------------------------------------------------------

// AckSdkLoginInfoAndChatroom

// .KWMsg.EGameEventCode event_code = 1;
inline void AckSdkLoginInfoAndChatroom::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckSdkLoginInfoAndChatroom::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckSdkLoginInfoAndChatroom::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSdkLoginInfoAndChatroom.event_code)
  return _internal_event_code();
}
inline void AckSdkLoginInfoAndChatroom::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckSdkLoginInfoAndChatroom::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSdkLoginInfoAndChatroom.event_code)
}

// bytes chat_sdk_passwd = 2;
inline void AckSdkLoginInfoAndChatroom::clear_chat_sdk_passwd() {
  chat_sdk_passwd_.ClearToEmpty();
}
inline const std::string& AckSdkLoginInfoAndChatroom::chat_sdk_passwd() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSdkLoginInfoAndChatroom.chat_sdk_passwd)
  return _internal_chat_sdk_passwd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckSdkLoginInfoAndChatroom::set_chat_sdk_passwd(ArgT0&& arg0, ArgT... args) {
 
 chat_sdk_passwd_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckSdkLoginInfoAndChatroom.chat_sdk_passwd)
}
inline std::string* AckSdkLoginInfoAndChatroom::mutable_chat_sdk_passwd() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSdkLoginInfoAndChatroom.chat_sdk_passwd)
  return _internal_mutable_chat_sdk_passwd();
}
inline const std::string& AckSdkLoginInfoAndChatroom::_internal_chat_sdk_passwd() const {
  return chat_sdk_passwd_.Get();
}
inline void AckSdkLoginInfoAndChatroom::_internal_set_chat_sdk_passwd(const std::string& value) {
  
  chat_sdk_passwd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckSdkLoginInfoAndChatroom::_internal_mutable_chat_sdk_passwd() {
  
  return chat_sdk_passwd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckSdkLoginInfoAndChatroom::release_chat_sdk_passwd() {
  // @@protoc_insertion_point(field_release:KWMsg.AckSdkLoginInfoAndChatroom.chat_sdk_passwd)
  return chat_sdk_passwd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckSdkLoginInfoAndChatroom::set_allocated_chat_sdk_passwd(std::string* chat_sdk_passwd) {
  if (chat_sdk_passwd != nullptr) {
    
  } else {
    
  }
  chat_sdk_passwd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_sdk_passwd,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckSdkLoginInfoAndChatroom.chat_sdk_passwd)
}

// bytes public_chatroom_id = 3;
inline void AckSdkLoginInfoAndChatroom::clear_public_chatroom_id() {
  public_chatroom_id_.ClearToEmpty();
}
inline const std::string& AckSdkLoginInfoAndChatroom::public_chatroom_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSdkLoginInfoAndChatroom.public_chatroom_id)
  return _internal_public_chatroom_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckSdkLoginInfoAndChatroom::set_public_chatroom_id(ArgT0&& arg0, ArgT... args) {
 
 public_chatroom_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckSdkLoginInfoAndChatroom.public_chatroom_id)
}
inline std::string* AckSdkLoginInfoAndChatroom::mutable_public_chatroom_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSdkLoginInfoAndChatroom.public_chatroom_id)
  return _internal_mutable_public_chatroom_id();
}
inline const std::string& AckSdkLoginInfoAndChatroom::_internal_public_chatroom_id() const {
  return public_chatroom_id_.Get();
}
inline void AckSdkLoginInfoAndChatroom::_internal_set_public_chatroom_id(const std::string& value) {
  
  public_chatroom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckSdkLoginInfoAndChatroom::_internal_mutable_public_chatroom_id() {
  
  return public_chatroom_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckSdkLoginInfoAndChatroom::release_public_chatroom_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckSdkLoginInfoAndChatroom.public_chatroom_id)
  return public_chatroom_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckSdkLoginInfoAndChatroom::set_allocated_public_chatroom_id(std::string* public_chatroom_id) {
  if (public_chatroom_id != nullptr) {
    
  } else {
    
  }
  public_chatroom_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), public_chatroom_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckSdkLoginInfoAndChatroom.public_chatroom_id)
}

// bytes system_chatroom_id = 4;
inline void AckSdkLoginInfoAndChatroom::clear_system_chatroom_id() {
  system_chatroom_id_.ClearToEmpty();
}
inline const std::string& AckSdkLoginInfoAndChatroom::system_chatroom_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSdkLoginInfoAndChatroom.system_chatroom_id)
  return _internal_system_chatroom_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckSdkLoginInfoAndChatroom::set_system_chatroom_id(ArgT0&& arg0, ArgT... args) {
 
 system_chatroom_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckSdkLoginInfoAndChatroom.system_chatroom_id)
}
inline std::string* AckSdkLoginInfoAndChatroom::mutable_system_chatroom_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSdkLoginInfoAndChatroom.system_chatroom_id)
  return _internal_mutable_system_chatroom_id();
}
inline const std::string& AckSdkLoginInfoAndChatroom::_internal_system_chatroom_id() const {
  return system_chatroom_id_.Get();
}
inline void AckSdkLoginInfoAndChatroom::_internal_set_system_chatroom_id(const std::string& value) {
  
  system_chatroom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckSdkLoginInfoAndChatroom::_internal_mutable_system_chatroom_id() {
  
  return system_chatroom_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckSdkLoginInfoAndChatroom::release_system_chatroom_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckSdkLoginInfoAndChatroom.system_chatroom_id)
  return system_chatroom_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckSdkLoginInfoAndChatroom::set_allocated_system_chatroom_id(std::string* system_chatroom_id) {
  if (system_chatroom_id != nullptr) {
    
  } else {
    
  }
  system_chatroom_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), system_chatroom_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckSdkLoginInfoAndChatroom.system_chatroom_id)
}

// bytes community_chatroom_id = 5;
inline void AckSdkLoginInfoAndChatroom::clear_community_chatroom_id() {
  community_chatroom_id_.ClearToEmpty();
}
inline const std::string& AckSdkLoginInfoAndChatroom::community_chatroom_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSdkLoginInfoAndChatroom.community_chatroom_id)
  return _internal_community_chatroom_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckSdkLoginInfoAndChatroom::set_community_chatroom_id(ArgT0&& arg0, ArgT... args) {
 
 community_chatroom_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckSdkLoginInfoAndChatroom.community_chatroom_id)
}
inline std::string* AckSdkLoginInfoAndChatroom::mutable_community_chatroom_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSdkLoginInfoAndChatroom.community_chatroom_id)
  return _internal_mutable_community_chatroom_id();
}
inline const std::string& AckSdkLoginInfoAndChatroom::_internal_community_chatroom_id() const {
  return community_chatroom_id_.Get();
}
inline void AckSdkLoginInfoAndChatroom::_internal_set_community_chatroom_id(const std::string& value) {
  
  community_chatroom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckSdkLoginInfoAndChatroom::_internal_mutable_community_chatroom_id() {
  
  return community_chatroom_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckSdkLoginInfoAndChatroom::release_community_chatroom_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckSdkLoginInfoAndChatroom.community_chatroom_id)
  return community_chatroom_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckSdkLoginInfoAndChatroom::set_allocated_community_chatroom_id(std::string* community_chatroom_id) {
  if (community_chatroom_id != nullptr) {
    
  } else {
    
  }
  community_chatroom_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), community_chatroom_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckSdkLoginInfoAndChatroom.community_chatroom_id)
}

// -------------------------------------------------------------------

// ReqReportChatPlayer

// .KWMsg.Ident player_id = 1;
inline bool ReqReportChatPlayer::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqReportChatPlayer::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqReportChatPlayer::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqReportChatPlayer::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqReportChatPlayer.player_id)
  return _internal_player_id();
}
inline void ReqReportChatPlayer::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqReportChatPlayer.player_id)
}
inline ::KWMsg::Ident* ReqReportChatPlayer::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqReportChatPlayer::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqReportChatPlayer.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqReportChatPlayer::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqReportChatPlayer::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqReportChatPlayer.player_id)
  return _internal_mutable_player_id();
}
inline void ReqReportChatPlayer::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqReportChatPlayer.player_id)
}

// .KWMsg.Ident chat_player_id = 2;
inline bool ReqReportChatPlayer::_internal_has_chat_player_id() const {
  return this != internal_default_instance() && chat_player_id_ != nullptr;
}
inline bool ReqReportChatPlayer::has_chat_player_id() const {
  return _internal_has_chat_player_id();
}
inline const ::KWMsg::Ident& ReqReportChatPlayer::_internal_chat_player_id() const {
  const ::KWMsg::Ident* p = chat_player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqReportChatPlayer::chat_player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqReportChatPlayer.chat_player_id)
  return _internal_chat_player_id();
}
inline void ReqReportChatPlayer::unsafe_arena_set_allocated_chat_player_id(
    ::KWMsg::Ident* chat_player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_player_id_);
  }
  chat_player_id_ = chat_player_id;
  if (chat_player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqReportChatPlayer.chat_player_id)
}
inline ::KWMsg::Ident* ReqReportChatPlayer::release_chat_player_id() {
  
  ::KWMsg::Ident* temp = chat_player_id_;
  chat_player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqReportChatPlayer::unsafe_arena_release_chat_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqReportChatPlayer.chat_player_id)
  
  ::KWMsg::Ident* temp = chat_player_id_;
  chat_player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqReportChatPlayer::_internal_mutable_chat_player_id() {
  
  if (chat_player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    chat_player_id_ = p;
  }
  return chat_player_id_;
}
inline ::KWMsg::Ident* ReqReportChatPlayer::mutable_chat_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqReportChatPlayer.chat_player_id)
  return _internal_mutable_chat_player_id();
}
inline void ReqReportChatPlayer::set_allocated_chat_player_id(::KWMsg::Ident* chat_player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_player_id_);
  }
  if (chat_player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_player_id));
    if (message_arena != submessage_arena) {
      chat_player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_player_id, submessage_arena);
    }
    
  } else {
    
  }
  chat_player_id_ = chat_player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqReportChatPlayer.chat_player_id)
}

// int32 report_type = 3;
inline void ReqReportChatPlayer::clear_report_type() {
  report_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqReportChatPlayer::_internal_report_type() const {
  return report_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqReportChatPlayer::report_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqReportChatPlayer.report_type)
  return _internal_report_type();
}
inline void ReqReportChatPlayer::_internal_set_report_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  report_type_ = value;
}
inline void ReqReportChatPlayer::set_report_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_report_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqReportChatPlayer.report_type)
}

// bytes report_content = 4;
inline void ReqReportChatPlayer::clear_report_content() {
  report_content_.ClearToEmpty();
}
inline const std::string& ReqReportChatPlayer::report_content() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqReportChatPlayer.report_content)
  return _internal_report_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqReportChatPlayer::set_report_content(ArgT0&& arg0, ArgT... args) {
 
 report_content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqReportChatPlayer.report_content)
}
inline std::string* ReqReportChatPlayer::mutable_report_content() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqReportChatPlayer.report_content)
  return _internal_mutable_report_content();
}
inline const std::string& ReqReportChatPlayer::_internal_report_content() const {
  return report_content_.Get();
}
inline void ReqReportChatPlayer::_internal_set_report_content(const std::string& value) {
  
  report_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqReportChatPlayer::_internal_mutable_report_content() {
  
  return report_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqReportChatPlayer::release_report_content() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqReportChatPlayer.report_content)
  return report_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqReportChatPlayer::set_allocated_report_content(std::string* report_content) {
  if (report_content != nullptr) {
    
  } else {
    
  }
  report_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), report_content,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqReportChatPlayer.report_content)
}

// -------------------------------------------------------------------

// AckReportChatPlayer

// .KWMsg.EGameEventCode event_code = 1;
inline void AckReportChatPlayer::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckReportChatPlayer::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckReportChatPlayer::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckReportChatPlayer.event_code)
  return _internal_event_code();
}
inline void AckReportChatPlayer::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckReportChatPlayer::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckReportChatPlayer.event_code)
}

// .KWMsg.Ident chat_player_id = 2;
inline bool AckReportChatPlayer::_internal_has_chat_player_id() const {
  return this != internal_default_instance() && chat_player_id_ != nullptr;
}
inline bool AckReportChatPlayer::has_chat_player_id() const {
  return _internal_has_chat_player_id();
}
inline const ::KWMsg::Ident& AckReportChatPlayer::_internal_chat_player_id() const {
  const ::KWMsg::Ident* p = chat_player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckReportChatPlayer::chat_player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckReportChatPlayer.chat_player_id)
  return _internal_chat_player_id();
}
inline void AckReportChatPlayer::unsafe_arena_set_allocated_chat_player_id(
    ::KWMsg::Ident* chat_player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_player_id_);
  }
  chat_player_id_ = chat_player_id;
  if (chat_player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckReportChatPlayer.chat_player_id)
}
inline ::KWMsg::Ident* AckReportChatPlayer::release_chat_player_id() {
  
  ::KWMsg::Ident* temp = chat_player_id_;
  chat_player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckReportChatPlayer::unsafe_arena_release_chat_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckReportChatPlayer.chat_player_id)
  
  ::KWMsg::Ident* temp = chat_player_id_;
  chat_player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckReportChatPlayer::_internal_mutable_chat_player_id() {
  
  if (chat_player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    chat_player_id_ = p;
  }
  return chat_player_id_;
}
inline ::KWMsg::Ident* AckReportChatPlayer::mutable_chat_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckReportChatPlayer.chat_player_id)
  return _internal_mutable_chat_player_id();
}
inline void AckReportChatPlayer::set_allocated_chat_player_id(::KWMsg::Ident* chat_player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_player_id_);
  }
  if (chat_player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(chat_player_id));
    if (message_arena != submessage_arena) {
      chat_player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, chat_player_id, submessage_arena);
    }
    
  } else {
    
  }
  chat_player_id_ = chat_player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckReportChatPlayer.chat_player_id)
}

// int32 report_type = 3;
inline void AckReportChatPlayer::clear_report_type() {
  report_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckReportChatPlayer::_internal_report_type() const {
  return report_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckReportChatPlayer::report_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckReportChatPlayer.report_type)
  return _internal_report_type();
}
inline void AckReportChatPlayer::_internal_set_report_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  report_type_ = value;
}
inline void AckReportChatPlayer::set_report_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_report_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckReportChatPlayer.report_type)
}

// bytes report_content = 4;
inline void AckReportChatPlayer::clear_report_content() {
  report_content_.ClearToEmpty();
}
inline const std::string& AckReportChatPlayer::report_content() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckReportChatPlayer.report_content)
  return _internal_report_content();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckReportChatPlayer::set_report_content(ArgT0&& arg0, ArgT... args) {
 
 report_content_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckReportChatPlayer.report_content)
}
inline std::string* AckReportChatPlayer::mutable_report_content() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckReportChatPlayer.report_content)
  return _internal_mutable_report_content();
}
inline const std::string& AckReportChatPlayer::_internal_report_content() const {
  return report_content_.Get();
}
inline void AckReportChatPlayer::_internal_set_report_content(const std::string& value) {
  
  report_content_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckReportChatPlayer::_internal_mutable_report_content() {
  
  return report_content_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckReportChatPlayer::release_report_content() {
  // @@protoc_insertion_point(field_release:KWMsg.AckReportChatPlayer.report_content)
  return report_content_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckReportChatPlayer::set_allocated_report_content(std::string* report_content) {
  if (report_content != nullptr) {
    
  } else {
    
  }
  report_content_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), report_content,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckReportChatPlayer.report_content)
}

// -------------------------------------------------------------------

// ReqSendChatroomMsg

// bytes chatroom_ids = 1;
inline void ReqSendChatroomMsg::clear_chatroom_ids() {
  chatroom_ids_.ClearToEmpty();
}
inline const std::string& ReqSendChatroomMsg::chatroom_ids() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSendChatroomMsg.chatroom_ids)
  return _internal_chatroom_ids();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSendChatroomMsg::set_chatroom_ids(ArgT0&& arg0, ArgT... args) {
 
 chatroom_ids_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSendChatroomMsg.chatroom_ids)
}
inline std::string* ReqSendChatroomMsg::mutable_chatroom_ids() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSendChatroomMsg.chatroom_ids)
  return _internal_mutable_chatroom_ids();
}
inline const std::string& ReqSendChatroomMsg::_internal_chatroom_ids() const {
  return chatroom_ids_.Get();
}
inline void ReqSendChatroomMsg::_internal_set_chatroom_ids(const std::string& value) {
  
  chatroom_ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSendChatroomMsg::_internal_mutable_chatroom_ids() {
  
  return chatroom_ids_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSendChatroomMsg::release_chatroom_ids() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSendChatroomMsg.chatroom_ids)
  return chatroom_ids_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSendChatroomMsg::set_allocated_chatroom_ids(std::string* chatroom_ids) {
  if (chatroom_ids != nullptr) {
    
  } else {
    
  }
  chatroom_ids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatroom_ids,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSendChatroomMsg.chatroom_ids)
}

// bytes chat_msg = 2;
inline void ReqSendChatroomMsg::clear_chat_msg() {
  chat_msg_.ClearToEmpty();
}
inline const std::string& ReqSendChatroomMsg::chat_msg() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSendChatroomMsg.chat_msg)
  return _internal_chat_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSendChatroomMsg::set_chat_msg(ArgT0&& arg0, ArgT... args) {
 
 chat_msg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSendChatroomMsg.chat_msg)
}
inline std::string* ReqSendChatroomMsg::mutable_chat_msg() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSendChatroomMsg.chat_msg)
  return _internal_mutable_chat_msg();
}
inline const std::string& ReqSendChatroomMsg::_internal_chat_msg() const {
  return chat_msg_.Get();
}
inline void ReqSendChatroomMsg::_internal_set_chat_msg(const std::string& value) {
  
  chat_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSendChatroomMsg::_internal_mutable_chat_msg() {
  
  return chat_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSendChatroomMsg::release_chat_msg() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSendChatroomMsg.chat_msg)
  return chat_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSendChatroomMsg::set_allocated_chat_msg(std::string* chat_msg) {
  if (chat_msg != nullptr) {
    
  } else {
    
  }
  chat_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSendChatroomMsg.chat_msg)
}

// -------------------------------------------------------------------

// AckSendChatroomMsg

// bytes chatroom_ids = 1;
inline void AckSendChatroomMsg::clear_chatroom_ids() {
  chatroom_ids_.ClearToEmpty();
}
inline const std::string& AckSendChatroomMsg::chatroom_ids() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSendChatroomMsg.chatroom_ids)
  return _internal_chatroom_ids();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckSendChatroomMsg::set_chatroom_ids(ArgT0&& arg0, ArgT... args) {
 
 chatroom_ids_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckSendChatroomMsg.chatroom_ids)
}
inline std::string* AckSendChatroomMsg::mutable_chatroom_ids() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSendChatroomMsg.chatroom_ids)
  return _internal_mutable_chatroom_ids();
}
inline const std::string& AckSendChatroomMsg::_internal_chatroom_ids() const {
  return chatroom_ids_.Get();
}
inline void AckSendChatroomMsg::_internal_set_chatroom_ids(const std::string& value) {
  
  chatroom_ids_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckSendChatroomMsg::_internal_mutable_chatroom_ids() {
  
  return chatroom_ids_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckSendChatroomMsg::release_chatroom_ids() {
  // @@protoc_insertion_point(field_release:KWMsg.AckSendChatroomMsg.chatroom_ids)
  return chatroom_ids_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckSendChatroomMsg::set_allocated_chatroom_ids(std::string* chatroom_ids) {
  if (chatroom_ids != nullptr) {
    
  } else {
    
  }
  chatroom_ids_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatroom_ids,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckSendChatroomMsg.chatroom_ids)
}

// bytes chat_msg = 2;
inline void AckSendChatroomMsg::clear_chat_msg() {
  chat_msg_.ClearToEmpty();
}
inline const std::string& AckSendChatroomMsg::chat_msg() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSendChatroomMsg.chat_msg)
  return _internal_chat_msg();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckSendChatroomMsg::set_chat_msg(ArgT0&& arg0, ArgT... args) {
 
 chat_msg_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckSendChatroomMsg.chat_msg)
}
inline std::string* AckSendChatroomMsg::mutable_chat_msg() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSendChatroomMsg.chat_msg)
  return _internal_mutable_chat_msg();
}
inline const std::string& AckSendChatroomMsg::_internal_chat_msg() const {
  return chat_msg_.Get();
}
inline void AckSendChatroomMsg::_internal_set_chat_msg(const std::string& value) {
  
  chat_msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckSendChatroomMsg::_internal_mutable_chat_msg() {
  
  return chat_msg_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckSendChatroomMsg::release_chat_msg() {
  // @@protoc_insertion_point(field_release:KWMsg.AckSendChatroomMsg.chat_msg)
  return chat_msg_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckSendChatroomMsg::set_allocated_chat_msg(std::string* chat_msg) {
  if (chat_msg != nullptr) {
    
  } else {
    
  }
  chat_msg_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_msg,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckSendChatroomMsg.chat_msg)
}

// -------------------------------------------------------------------

// ReqUpdateChatroomAnnouncement

// bytes chatroom_id = 1;
inline void ReqUpdateChatroomAnnouncement::clear_chatroom_id() {
  chatroom_id_.ClearToEmpty();
}
inline const std::string& ReqUpdateChatroomAnnouncement::chatroom_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdateChatroomAnnouncement.chatroom_id)
  return _internal_chatroom_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUpdateChatroomAnnouncement::set_chatroom_id(ArgT0&& arg0, ArgT... args) {
 
 chatroom_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdateChatroomAnnouncement.chatroom_id)
}
inline std::string* ReqUpdateChatroomAnnouncement::mutable_chatroom_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdateChatroomAnnouncement.chatroom_id)
  return _internal_mutable_chatroom_id();
}
inline const std::string& ReqUpdateChatroomAnnouncement::_internal_chatroom_id() const {
  return chatroom_id_.Get();
}
inline void ReqUpdateChatroomAnnouncement::_internal_set_chatroom_id(const std::string& value) {
  
  chatroom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUpdateChatroomAnnouncement::_internal_mutable_chatroom_id() {
  
  return chatroom_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUpdateChatroomAnnouncement::release_chatroom_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdateChatroomAnnouncement.chatroom_id)
  return chatroom_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUpdateChatroomAnnouncement::set_allocated_chatroom_id(std::string* chatroom_id) {
  if (chatroom_id != nullptr) {
    
  } else {
    
  }
  chatroom_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatroom_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdateChatroomAnnouncement.chatroom_id)
}

// bytes announcement = 2;
inline void ReqUpdateChatroomAnnouncement::clear_announcement() {
  announcement_.ClearToEmpty();
}
inline const std::string& ReqUpdateChatroomAnnouncement::announcement() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUpdateChatroomAnnouncement.announcement)
  return _internal_announcement();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUpdateChatroomAnnouncement::set_announcement(ArgT0&& arg0, ArgT... args) {
 
 announcement_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUpdateChatroomAnnouncement.announcement)
}
inline std::string* ReqUpdateChatroomAnnouncement::mutable_announcement() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUpdateChatroomAnnouncement.announcement)
  return _internal_mutable_announcement();
}
inline const std::string& ReqUpdateChatroomAnnouncement::_internal_announcement() const {
  return announcement_.Get();
}
inline void ReqUpdateChatroomAnnouncement::_internal_set_announcement(const std::string& value) {
  
  announcement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUpdateChatroomAnnouncement::_internal_mutable_announcement() {
  
  return announcement_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUpdateChatroomAnnouncement::release_announcement() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUpdateChatroomAnnouncement.announcement)
  return announcement_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUpdateChatroomAnnouncement::set_allocated_announcement(std::string* announcement) {
  if (announcement != nullptr) {
    
  } else {
    
  }
  announcement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), announcement,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUpdateChatroomAnnouncement.announcement)
}

// -------------------------------------------------------------------

// AckUpdateChatroomAnnouncement

// bytes chatroom_id = 1;
inline void AckUpdateChatroomAnnouncement::clear_chatroom_id() {
  chatroom_id_.ClearToEmpty();
}
inline const std::string& AckUpdateChatroomAnnouncement::chatroom_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUpdateChatroomAnnouncement.chatroom_id)
  return _internal_chatroom_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckUpdateChatroomAnnouncement::set_chatroom_id(ArgT0&& arg0, ArgT... args) {
 
 chatroom_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckUpdateChatroomAnnouncement.chatroom_id)
}
inline std::string* AckUpdateChatroomAnnouncement::mutable_chatroom_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckUpdateChatroomAnnouncement.chatroom_id)
  return _internal_mutable_chatroom_id();
}
inline const std::string& AckUpdateChatroomAnnouncement::_internal_chatroom_id() const {
  return chatroom_id_.Get();
}
inline void AckUpdateChatroomAnnouncement::_internal_set_chatroom_id(const std::string& value) {
  
  chatroom_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckUpdateChatroomAnnouncement::_internal_mutable_chatroom_id() {
  
  return chatroom_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckUpdateChatroomAnnouncement::release_chatroom_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckUpdateChatroomAnnouncement.chatroom_id)
  return chatroom_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckUpdateChatroomAnnouncement::set_allocated_chatroom_id(std::string* chatroom_id) {
  if (chatroom_id != nullptr) {
    
  } else {
    
  }
  chatroom_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chatroom_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckUpdateChatroomAnnouncement.chatroom_id)
}

// bytes announcement = 2;
inline void AckUpdateChatroomAnnouncement::clear_announcement() {
  announcement_.ClearToEmpty();
}
inline const std::string& AckUpdateChatroomAnnouncement::announcement() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUpdateChatroomAnnouncement.announcement)
  return _internal_announcement();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckUpdateChatroomAnnouncement::set_announcement(ArgT0&& arg0, ArgT... args) {
 
 announcement_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckUpdateChatroomAnnouncement.announcement)
}
inline std::string* AckUpdateChatroomAnnouncement::mutable_announcement() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckUpdateChatroomAnnouncement.announcement)
  return _internal_mutable_announcement();
}
inline const std::string& AckUpdateChatroomAnnouncement::_internal_announcement() const {
  return announcement_.Get();
}
inline void AckUpdateChatroomAnnouncement::_internal_set_announcement(const std::string& value) {
  
  announcement_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckUpdateChatroomAnnouncement::_internal_mutable_announcement() {
  
  return announcement_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckUpdateChatroomAnnouncement::release_announcement() {
  // @@protoc_insertion_point(field_release:KWMsg.AckUpdateChatroomAnnouncement.announcement)
  return announcement_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckUpdateChatroomAnnouncement::set_allocated_announcement(std::string* announcement) {
  if (announcement != nullptr) {
    
  } else {
    
  }
  announcement_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), announcement,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckUpdateChatroomAnnouncement.announcement)
}

// -------------------------------------------------------------------

// ReqCheckChatText

// .KWMsg.Ident player_id = 1;
inline bool ReqCheckChatText::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqCheckChatText::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqCheckChatText::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCheckChatText::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCheckChatText.player_id)
  return _internal_player_id();
}
inline void ReqCheckChatText::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCheckChatText.player_id)
}
inline ::KWMsg::Ident* ReqCheckChatText::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCheckChatText::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCheckChatText.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCheckChatText::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqCheckChatText::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCheckChatText.player_id)
  return _internal_mutable_player_id();
}
inline void ReqCheckChatText::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCheckChatText.player_id)
}

// bytes chat_text = 2;
inline void ReqCheckChatText::clear_chat_text() {
  chat_text_.ClearToEmpty();
}
inline const std::string& ReqCheckChatText::chat_text() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCheckChatText.chat_text)
  return _internal_chat_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCheckChatText::set_chat_text(ArgT0&& arg0, ArgT... args) {
 
 chat_text_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCheckChatText.chat_text)
}
inline std::string* ReqCheckChatText::mutable_chat_text() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCheckChatText.chat_text)
  return _internal_mutable_chat_text();
}
inline const std::string& ReqCheckChatText::_internal_chat_text() const {
  return chat_text_.Get();
}
inline void ReqCheckChatText::_internal_set_chat_text(const std::string& value) {
  
  chat_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCheckChatText::_internal_mutable_chat_text() {
  
  return chat_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCheckChatText::release_chat_text() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCheckChatText.chat_text)
  return chat_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCheckChatText::set_allocated_chat_text(std::string* chat_text) {
  if (chat_text != nullptr) {
    
  } else {
    
  }
  chat_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCheckChatText.chat_text)
}

// int32 world_id = 3;
inline void ReqCheckChatText::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCheckChatText::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCheckChatText::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCheckChatText.world_id)
  return _internal_world_id();
}
inline void ReqCheckChatText::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void ReqCheckChatText::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCheckChatText.world_id)
}

// .KWMsg.EChatType chat_type = 4;
inline void ReqCheckChatText::clear_chat_type() {
  chat_type_ = 0;
}
inline ::KWMsg::EChatType ReqCheckChatText::_internal_chat_type() const {
  return static_cast< ::KWMsg::EChatType >(chat_type_);
}
inline ::KWMsg::EChatType ReqCheckChatText::chat_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCheckChatText.chat_type)
  return _internal_chat_type();
}
inline void ReqCheckChatText::_internal_set_chat_type(::KWMsg::EChatType value) {
  
  chat_type_ = value;
}
inline void ReqCheckChatText::set_chat_type(::KWMsg::EChatType value) {
  _internal_set_chat_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCheckChatText.chat_type)
}

// .KWMsg.Ident other_player_id = 5;
inline bool ReqCheckChatText::_internal_has_other_player_id() const {
  return this != internal_default_instance() && other_player_id_ != nullptr;
}
inline bool ReqCheckChatText::has_other_player_id() const {
  return _internal_has_other_player_id();
}
inline const ::KWMsg::Ident& ReqCheckChatText::_internal_other_player_id() const {
  const ::KWMsg::Ident* p = other_player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqCheckChatText::other_player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCheckChatText.other_player_id)
  return _internal_other_player_id();
}
inline void ReqCheckChatText::unsafe_arena_set_allocated_other_player_id(
    ::KWMsg::Ident* other_player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_player_id_);
  }
  other_player_id_ = other_player_id;
  if (other_player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqCheckChatText.other_player_id)
}
inline ::KWMsg::Ident* ReqCheckChatText::release_other_player_id() {
  
  ::KWMsg::Ident* temp = other_player_id_;
  other_player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqCheckChatText::unsafe_arena_release_other_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCheckChatText.other_player_id)
  
  ::KWMsg::Ident* temp = other_player_id_;
  other_player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqCheckChatText::_internal_mutable_other_player_id() {
  
  if (other_player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    other_player_id_ = p;
  }
  return other_player_id_;
}
inline ::KWMsg::Ident* ReqCheckChatText::mutable_other_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCheckChatText.other_player_id)
  return _internal_mutable_other_player_id();
}
inline void ReqCheckChatText::set_allocated_other_player_id(::KWMsg::Ident* other_player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_player_id_);
  }
  if (other_player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_player_id));
    if (message_arena != submessage_arena) {
      other_player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_player_id, submessage_arena);
    }
    
  } else {
    
  }
  other_player_id_ = other_player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCheckChatText.other_player_id)
}

// -------------------------------------------------------------------

// AckCheckChatText

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCheckChatText::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCheckChatText::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCheckChatText::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCheckChatText.event_code)
  return _internal_event_code();
}
inline void AckCheckChatText::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCheckChatText::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCheckChatText.event_code)
}

// .KWMsg.Ident player_id = 2;
inline bool AckCheckChatText::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckCheckChatText::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckCheckChatText::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckCheckChatText::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCheckChatText.player_id)
  return _internal_player_id();
}
inline void AckCheckChatText::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckCheckChatText.player_id)
}
inline ::KWMsg::Ident* AckCheckChatText::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckCheckChatText::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCheckChatText.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckCheckChatText::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckCheckChatText::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCheckChatText.player_id)
  return _internal_mutable_player_id();
}
inline void AckCheckChatText::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCheckChatText.player_id)
}

// bytes chat_text = 3;
inline void AckCheckChatText::clear_chat_text() {
  chat_text_.ClearToEmpty();
}
inline const std::string& AckCheckChatText::chat_text() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCheckChatText.chat_text)
  return _internal_chat_text();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCheckChatText::set_chat_text(ArgT0&& arg0, ArgT... args) {
 
 chat_text_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCheckChatText.chat_text)
}
inline std::string* AckCheckChatText::mutable_chat_text() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCheckChatText.chat_text)
  return _internal_mutable_chat_text();
}
inline const std::string& AckCheckChatText::_internal_chat_text() const {
  return chat_text_.Get();
}
inline void AckCheckChatText::_internal_set_chat_text(const std::string& value) {
  
  chat_text_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCheckChatText::_internal_mutable_chat_text() {
  
  return chat_text_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCheckChatText::release_chat_text() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCheckChatText.chat_text)
  return chat_text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCheckChatText::set_allocated_chat_text(std::string* chat_text) {
  if (chat_text != nullptr) {
    
  } else {
    
  }
  chat_text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_text,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCheckChatText.chat_text)
}

// int32 suggestion = 4;
inline void AckCheckChatText::clear_suggestion() {
  suggestion_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCheckChatText::_internal_suggestion() const {
  return suggestion_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCheckChatText::suggestion() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCheckChatText.suggestion)
  return _internal_suggestion();
}
inline void AckCheckChatText::_internal_set_suggestion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  suggestion_ = value;
}
inline void AckCheckChatText::set_suggestion(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_suggestion(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCheckChatText.suggestion)
}

// int32 world_id = 5;
inline void AckCheckChatText::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCheckChatText::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCheckChatText::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCheckChatText.world_id)
  return _internal_world_id();
}
inline void AckCheckChatText::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void AckCheckChatText::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCheckChatText.world_id)
}

// .KWMsg.EChatType chat_type = 6;
inline void AckCheckChatText::clear_chat_type() {
  chat_type_ = 0;
}
inline ::KWMsg::EChatType AckCheckChatText::_internal_chat_type() const {
  return static_cast< ::KWMsg::EChatType >(chat_type_);
}
inline ::KWMsg::EChatType AckCheckChatText::chat_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCheckChatText.chat_type)
  return _internal_chat_type();
}
inline void AckCheckChatText::_internal_set_chat_type(::KWMsg::EChatType value) {
  
  chat_type_ = value;
}
inline void AckCheckChatText::set_chat_type(::KWMsg::EChatType value) {
  _internal_set_chat_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCheckChatText.chat_type)
}

// .KWMsg.Ident other_player_id = 7;
inline bool AckCheckChatText::_internal_has_other_player_id() const {
  return this != internal_default_instance() && other_player_id_ != nullptr;
}
inline bool AckCheckChatText::has_other_player_id() const {
  return _internal_has_other_player_id();
}
inline const ::KWMsg::Ident& AckCheckChatText::_internal_other_player_id() const {
  const ::KWMsg::Ident* p = other_player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckCheckChatText::other_player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCheckChatText.other_player_id)
  return _internal_other_player_id();
}
inline void AckCheckChatText::unsafe_arena_set_allocated_other_player_id(
    ::KWMsg::Ident* other_player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_player_id_);
  }
  other_player_id_ = other_player_id;
  if (other_player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckCheckChatText.other_player_id)
}
inline ::KWMsg::Ident* AckCheckChatText::release_other_player_id() {
  
  ::KWMsg::Ident* temp = other_player_id_;
  other_player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckCheckChatText::unsafe_arena_release_other_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCheckChatText.other_player_id)
  
  ::KWMsg::Ident* temp = other_player_id_;
  other_player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckCheckChatText::_internal_mutable_other_player_id() {
  
  if (other_player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    other_player_id_ = p;
  }
  return other_player_id_;
}
inline ::KWMsg::Ident* AckCheckChatText::mutable_other_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCheckChatText.other_player_id)
  return _internal_mutable_other_player_id();
}
inline void AckCheckChatText::set_allocated_other_player_id(::KWMsg::Ident* other_player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_player_id_);
  }
  if (other_player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(other_player_id));
    if (message_arena != submessage_arena) {
      other_player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, other_player_id, submessage_arena);
    }
    
  } else {
    
  }
  other_player_id_ = other_player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCheckChatText.other_player_id)
}

// -------------------------------------------------------------------

// ReqCreateChatGroup

// int32 chat_group_type = 1;
inline void ReqCreateChatGroup::clear_chat_group_type() {
  chat_group_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCreateChatGroup::_internal_chat_group_type() const {
  return chat_group_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCreateChatGroup::chat_group_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateChatGroup.chat_group_type)
  return _internal_chat_group_type();
}
inline void ReqCreateChatGroup::_internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_group_type_ = value;
}
inline void ReqCreateChatGroup::set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_group_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateChatGroup.chat_group_type)
}

// bytes chat_group_name = 2;
inline void ReqCreateChatGroup::clear_chat_group_name() {
  chat_group_name_.ClearToEmpty();
}
inline const std::string& ReqCreateChatGroup::chat_group_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateChatGroup.chat_group_name)
  return _internal_chat_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCreateChatGroup::set_chat_group_name(ArgT0&& arg0, ArgT... args) {
 
 chat_group_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateChatGroup.chat_group_name)
}
inline std::string* ReqCreateChatGroup::mutable_chat_group_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCreateChatGroup.chat_group_name)
  return _internal_mutable_chat_group_name();
}
inline const std::string& ReqCreateChatGroup::_internal_chat_group_name() const {
  return chat_group_name_.Get();
}
inline void ReqCreateChatGroup::_internal_set_chat_group_name(const std::string& value) {
  
  chat_group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCreateChatGroup::_internal_mutable_chat_group_name() {
  
  return chat_group_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCreateChatGroup::release_chat_group_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCreateChatGroup.chat_group_name)
  return chat_group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCreateChatGroup::set_allocated_chat_group_name(std::string* chat_group_name) {
  if (chat_group_name != nullptr) {
    
  } else {
    
  }
  chat_group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_group_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCreateChatGroup.chat_group_name)
}

// bytes owner = 3;
inline void ReqCreateChatGroup::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& ReqCreateChatGroup::owner() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateChatGroup.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCreateChatGroup::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateChatGroup.owner)
}
inline std::string* ReqCreateChatGroup::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCreateChatGroup.owner)
  return _internal_mutable_owner();
}
inline const std::string& ReqCreateChatGroup::_internal_owner() const {
  return owner_.Get();
}
inline void ReqCreateChatGroup::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCreateChatGroup::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCreateChatGroup::release_owner() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCreateChatGroup.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCreateChatGroup::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCreateChatGroup.owner)
}

// bytes extra_data = 4;
inline void ReqCreateChatGroup::clear_extra_data() {
  extra_data_.ClearToEmpty();
}
inline const std::string& ReqCreateChatGroup::extra_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateChatGroup.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqCreateChatGroup::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 extra_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateChatGroup.extra_data)
}
inline std::string* ReqCreateChatGroup::mutable_extra_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqCreateChatGroup.extra_data)
  return _internal_mutable_extra_data();
}
inline const std::string& ReqCreateChatGroup::_internal_extra_data() const {
  return extra_data_.Get();
}
inline void ReqCreateChatGroup::_internal_set_extra_data(const std::string& value) {
  
  extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqCreateChatGroup::_internal_mutable_extra_data() {
  
  return extra_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqCreateChatGroup::release_extra_data() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqCreateChatGroup.extra_data)
  return extra_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqCreateChatGroup::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  extra_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqCreateChatGroup.extra_data)
}

// int32 world_id = 5;
inline void ReqCreateChatGroup::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCreateChatGroup::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqCreateChatGroup::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqCreateChatGroup.world_id)
  return _internal_world_id();
}
inline void ReqCreateChatGroup::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void ReqCreateChatGroup::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqCreateChatGroup.world_id)
}

// -------------------------------------------------------------------

// AckCreateChatGroup

// .KWMsg.EGameEventCode event_code = 1;
inline void AckCreateChatGroup::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckCreateChatGroup::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckCreateChatGroup::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateChatGroup.event_code)
  return _internal_event_code();
}
inline void AckCreateChatGroup::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckCreateChatGroup::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateChatGroup.event_code)
}

// int32 chat_group_type = 2;
inline void AckCreateChatGroup::clear_chat_group_type() {
  chat_group_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCreateChatGroup::_internal_chat_group_type() const {
  return chat_group_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCreateChatGroup::chat_group_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateChatGroup.chat_group_type)
  return _internal_chat_group_type();
}
inline void AckCreateChatGroup::_internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_group_type_ = value;
}
inline void AckCreateChatGroup::set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_group_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateChatGroup.chat_group_type)
}

// bytes chat_group_name = 3;
inline void AckCreateChatGroup::clear_chat_group_name() {
  chat_group_name_.ClearToEmpty();
}
inline const std::string& AckCreateChatGroup::chat_group_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateChatGroup.chat_group_name)
  return _internal_chat_group_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCreateChatGroup::set_chat_group_name(ArgT0&& arg0, ArgT... args) {
 
 chat_group_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateChatGroup.chat_group_name)
}
inline std::string* AckCreateChatGroup::mutable_chat_group_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCreateChatGroup.chat_group_name)
  return _internal_mutable_chat_group_name();
}
inline const std::string& AckCreateChatGroup::_internal_chat_group_name() const {
  return chat_group_name_.Get();
}
inline void AckCreateChatGroup::_internal_set_chat_group_name(const std::string& value) {
  
  chat_group_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCreateChatGroup::_internal_mutable_chat_group_name() {
  
  return chat_group_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCreateChatGroup::release_chat_group_name() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCreateChatGroup.chat_group_name)
  return chat_group_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCreateChatGroup::set_allocated_chat_group_name(std::string* chat_group_name) {
  if (chat_group_name != nullptr) {
    
  } else {
    
  }
  chat_group_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_group_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCreateChatGroup.chat_group_name)
}

// bytes owner = 4;
inline void AckCreateChatGroup::clear_owner() {
  owner_.ClearToEmpty();
}
inline const std::string& AckCreateChatGroup::owner() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateChatGroup.owner)
  return _internal_owner();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCreateChatGroup::set_owner(ArgT0&& arg0, ArgT... args) {
 
 owner_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateChatGroup.owner)
}
inline std::string* AckCreateChatGroup::mutable_owner() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCreateChatGroup.owner)
  return _internal_mutable_owner();
}
inline const std::string& AckCreateChatGroup::_internal_owner() const {
  return owner_.Get();
}
inline void AckCreateChatGroup::_internal_set_owner(const std::string& value) {
  
  owner_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCreateChatGroup::_internal_mutable_owner() {
  
  return owner_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCreateChatGroup::release_owner() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCreateChatGroup.owner)
  return owner_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCreateChatGroup::set_allocated_owner(std::string* owner) {
  if (owner != nullptr) {
    
  } else {
    
  }
  owner_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), owner,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCreateChatGroup.owner)
}

// bytes extra_data = 5;
inline void AckCreateChatGroup::clear_extra_data() {
  extra_data_.ClearToEmpty();
}
inline const std::string& AckCreateChatGroup::extra_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateChatGroup.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCreateChatGroup::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 extra_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateChatGroup.extra_data)
}
inline std::string* AckCreateChatGroup::mutable_extra_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCreateChatGroup.extra_data)
  return _internal_mutable_extra_data();
}
inline const std::string& AckCreateChatGroup::_internal_extra_data() const {
  return extra_data_.Get();
}
inline void AckCreateChatGroup::_internal_set_extra_data(const std::string& value) {
  
  extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCreateChatGroup::_internal_mutable_extra_data() {
  
  return extra_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCreateChatGroup::release_extra_data() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCreateChatGroup.extra_data)
  return extra_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCreateChatGroup::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  extra_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCreateChatGroup.extra_data)
}

// int32 world_id = 6;
inline void AckCreateChatGroup::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCreateChatGroup::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckCreateChatGroup::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateChatGroup.world_id)
  return _internal_world_id();
}
inline void AckCreateChatGroup::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void AckCreateChatGroup::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateChatGroup.world_id)
}

// bytes chat_group_id = 7;
inline void AckCreateChatGroup::clear_chat_group_id() {
  chat_group_id_.ClearToEmpty();
}
inline const std::string& AckCreateChatGroup::chat_group_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckCreateChatGroup.chat_group_id)
  return _internal_chat_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckCreateChatGroup::set_chat_group_id(ArgT0&& arg0, ArgT... args) {
 
 chat_group_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckCreateChatGroup.chat_group_id)
}
inline std::string* AckCreateChatGroup::mutable_chat_group_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckCreateChatGroup.chat_group_id)
  return _internal_mutable_chat_group_id();
}
inline const std::string& AckCreateChatGroup::_internal_chat_group_id() const {
  return chat_group_id_.Get();
}
inline void AckCreateChatGroup::_internal_set_chat_group_id(const std::string& value) {
  
  chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckCreateChatGroup::_internal_mutable_chat_group_id() {
  
  return chat_group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckCreateChatGroup::release_chat_group_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckCreateChatGroup.chat_group_id)
  return chat_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckCreateChatGroup::set_allocated_chat_group_id(std::string* chat_group_id) {
  if (chat_group_id != nullptr) {
    
  } else {
    
  }
  chat_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckCreateChatGroup.chat_group_id)
}

// -------------------------------------------------------------------

// ReqDeleteChatGroup

// bytes chat_group_id = 1;
inline void ReqDeleteChatGroup::clear_chat_group_id() {
  chat_group_id_.ClearToEmpty();
}
inline const std::string& ReqDeleteChatGroup::chat_group_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDeleteChatGroup.chat_group_id)
  return _internal_chat_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDeleteChatGroup::set_chat_group_id(ArgT0&& arg0, ArgT... args) {
 
 chat_group_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqDeleteChatGroup.chat_group_id)
}
inline std::string* ReqDeleteChatGroup::mutable_chat_group_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDeleteChatGroup.chat_group_id)
  return _internal_mutable_chat_group_id();
}
inline const std::string& ReqDeleteChatGroup::_internal_chat_group_id() const {
  return chat_group_id_.Get();
}
inline void ReqDeleteChatGroup::_internal_set_chat_group_id(const std::string& value) {
  
  chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqDeleteChatGroup::_internal_mutable_chat_group_id() {
  
  return chat_group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqDeleteChatGroup::release_chat_group_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDeleteChatGroup.chat_group_id)
  return chat_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqDeleteChatGroup::set_allocated_chat_group_id(std::string* chat_group_id) {
  if (chat_group_id != nullptr) {
    
  } else {
    
  }
  chat_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDeleteChatGroup.chat_group_id)
}

// int32 chat_group_type = 2;
inline void ReqDeleteChatGroup::clear_chat_group_type() {
  chat_group_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDeleteChatGroup::_internal_chat_group_type() const {
  return chat_group_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDeleteChatGroup::chat_group_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDeleteChatGroup.chat_group_type)
  return _internal_chat_group_type();
}
inline void ReqDeleteChatGroup::_internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_group_type_ = value;
}
inline void ReqDeleteChatGroup::set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_group_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqDeleteChatGroup.chat_group_type)
}

// bytes extra_data = 3;
inline void ReqDeleteChatGroup::clear_extra_data() {
  extra_data_.ClearToEmpty();
}
inline const std::string& ReqDeleteChatGroup::extra_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDeleteChatGroup.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDeleteChatGroup::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 extra_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqDeleteChatGroup.extra_data)
}
inline std::string* ReqDeleteChatGroup::mutable_extra_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDeleteChatGroup.extra_data)
  return _internal_mutable_extra_data();
}
inline const std::string& ReqDeleteChatGroup::_internal_extra_data() const {
  return extra_data_.Get();
}
inline void ReqDeleteChatGroup::_internal_set_extra_data(const std::string& value) {
  
  extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqDeleteChatGroup::_internal_mutable_extra_data() {
  
  return extra_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqDeleteChatGroup::release_extra_data() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDeleteChatGroup.extra_data)
  return extra_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqDeleteChatGroup::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  extra_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDeleteChatGroup.extra_data)
}

// int32 world_id = 4;
inline void ReqDeleteChatGroup::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDeleteChatGroup::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDeleteChatGroup::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDeleteChatGroup.world_id)
  return _internal_world_id();
}
inline void ReqDeleteChatGroup::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void ReqDeleteChatGroup::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqDeleteChatGroup.world_id)
}

// -------------------------------------------------------------------

// AckDeleteChatGroup

// .KWMsg.EGameEventCode event_code = 1;
inline void AckDeleteChatGroup::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckDeleteChatGroup::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckDeleteChatGroup::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDeleteChatGroup.event_code)
  return _internal_event_code();
}
inline void AckDeleteChatGroup::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckDeleteChatGroup::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckDeleteChatGroup.event_code)
}

// bytes chat_group_id = 2;
inline void AckDeleteChatGroup::clear_chat_group_id() {
  chat_group_id_.ClearToEmpty();
}
inline const std::string& AckDeleteChatGroup::chat_group_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDeleteChatGroup.chat_group_id)
  return _internal_chat_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckDeleteChatGroup::set_chat_group_id(ArgT0&& arg0, ArgT... args) {
 
 chat_group_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckDeleteChatGroup.chat_group_id)
}
inline std::string* AckDeleteChatGroup::mutable_chat_group_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckDeleteChatGroup.chat_group_id)
  return _internal_mutable_chat_group_id();
}
inline const std::string& AckDeleteChatGroup::_internal_chat_group_id() const {
  return chat_group_id_.Get();
}
inline void AckDeleteChatGroup::_internal_set_chat_group_id(const std::string& value) {
  
  chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckDeleteChatGroup::_internal_mutable_chat_group_id() {
  
  return chat_group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckDeleteChatGroup::release_chat_group_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckDeleteChatGroup.chat_group_id)
  return chat_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckDeleteChatGroup::set_allocated_chat_group_id(std::string* chat_group_id) {
  if (chat_group_id != nullptr) {
    
  } else {
    
  }
  chat_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckDeleteChatGroup.chat_group_id)
}

// int32 chat_group_type = 3;
inline void AckDeleteChatGroup::clear_chat_group_type() {
  chat_group_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckDeleteChatGroup::_internal_chat_group_type() const {
  return chat_group_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckDeleteChatGroup::chat_group_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDeleteChatGroup.chat_group_type)
  return _internal_chat_group_type();
}
inline void AckDeleteChatGroup::_internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_group_type_ = value;
}
inline void AckDeleteChatGroup::set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_group_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckDeleteChatGroup.chat_group_type)
}

// bytes extra_data = 4;
inline void AckDeleteChatGroup::clear_extra_data() {
  extra_data_.ClearToEmpty();
}
inline const std::string& AckDeleteChatGroup::extra_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDeleteChatGroup.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckDeleteChatGroup::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 extra_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckDeleteChatGroup.extra_data)
}
inline std::string* AckDeleteChatGroup::mutable_extra_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckDeleteChatGroup.extra_data)
  return _internal_mutable_extra_data();
}
inline const std::string& AckDeleteChatGroup::_internal_extra_data() const {
  return extra_data_.Get();
}
inline void AckDeleteChatGroup::_internal_set_extra_data(const std::string& value) {
  
  extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckDeleteChatGroup::_internal_mutable_extra_data() {
  
  return extra_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckDeleteChatGroup::release_extra_data() {
  // @@protoc_insertion_point(field_release:KWMsg.AckDeleteChatGroup.extra_data)
  return extra_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckDeleteChatGroup::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  extra_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckDeleteChatGroup.extra_data)
}

// int32 world_id = 5;
inline void AckDeleteChatGroup::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckDeleteChatGroup::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckDeleteChatGroup::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDeleteChatGroup.world_id)
  return _internal_world_id();
}
inline void AckDeleteChatGroup::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void AckDeleteChatGroup::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckDeleteChatGroup.world_id)
}

// -------------------------------------------------------------------

// ReqTransferChatGroup

// bytes chat_group_id = 1;
inline void ReqTransferChatGroup::clear_chat_group_id() {
  chat_group_id_.ClearToEmpty();
}
inline const std::string& ReqTransferChatGroup::chat_group_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTransferChatGroup.chat_group_id)
  return _internal_chat_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqTransferChatGroup::set_chat_group_id(ArgT0&& arg0, ArgT... args) {
 
 chat_group_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqTransferChatGroup.chat_group_id)
}
inline std::string* ReqTransferChatGroup::mutable_chat_group_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTransferChatGroup.chat_group_id)
  return _internal_mutable_chat_group_id();
}
inline const std::string& ReqTransferChatGroup::_internal_chat_group_id() const {
  return chat_group_id_.Get();
}
inline void ReqTransferChatGroup::_internal_set_chat_group_id(const std::string& value) {
  
  chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqTransferChatGroup::_internal_mutable_chat_group_id() {
  
  return chat_group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqTransferChatGroup::release_chat_group_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTransferChatGroup.chat_group_id)
  return chat_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqTransferChatGroup::set_allocated_chat_group_id(std::string* chat_group_id) {
  if (chat_group_id != nullptr) {
    
  } else {
    
  }
  chat_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTransferChatGroup.chat_group_id)
}

// int32 chat_group_type = 2;
inline void ReqTransferChatGroup::clear_chat_group_type() {
  chat_group_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTransferChatGroup::_internal_chat_group_type() const {
  return chat_group_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTransferChatGroup::chat_group_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTransferChatGroup.chat_group_type)
  return _internal_chat_group_type();
}
inline void ReqTransferChatGroup::_internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_group_type_ = value;
}
inline void ReqTransferChatGroup::set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_group_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqTransferChatGroup.chat_group_type)
}

// bytes extra_data = 3;
inline void ReqTransferChatGroup::clear_extra_data() {
  extra_data_.ClearToEmpty();
}
inline const std::string& ReqTransferChatGroup::extra_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTransferChatGroup.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqTransferChatGroup::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 extra_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqTransferChatGroup.extra_data)
}
inline std::string* ReqTransferChatGroup::mutable_extra_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTransferChatGroup.extra_data)
  return _internal_mutable_extra_data();
}
inline const std::string& ReqTransferChatGroup::_internal_extra_data() const {
  return extra_data_.Get();
}
inline void ReqTransferChatGroup::_internal_set_extra_data(const std::string& value) {
  
  extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqTransferChatGroup::_internal_mutable_extra_data() {
  
  return extra_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqTransferChatGroup::release_extra_data() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTransferChatGroup.extra_data)
  return extra_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqTransferChatGroup::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  extra_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTransferChatGroup.extra_data)
}

// bytes user_name = 4;
inline void ReqTransferChatGroup::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& ReqTransferChatGroup::user_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTransferChatGroup.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqTransferChatGroup::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 user_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqTransferChatGroup.user_name)
}
inline std::string* ReqTransferChatGroup::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqTransferChatGroup.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& ReqTransferChatGroup::_internal_user_name() const {
  return user_name_.Get();
}
inline void ReqTransferChatGroup::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqTransferChatGroup::_internal_mutable_user_name() {
  
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqTransferChatGroup::release_user_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqTransferChatGroup.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqTransferChatGroup::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqTransferChatGroup.user_name)
}

// int32 world_id = 5;
inline void ReqTransferChatGroup::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTransferChatGroup::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqTransferChatGroup::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqTransferChatGroup.world_id)
  return _internal_world_id();
}
inline void ReqTransferChatGroup::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void ReqTransferChatGroup::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqTransferChatGroup.world_id)
}

// -------------------------------------------------------------------

// AckTransferChatGroup

// .KWMsg.EGameEventCode event_code = 1;
inline void AckTransferChatGroup::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckTransferChatGroup::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckTransferChatGroup::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTransferChatGroup.event_code)
  return _internal_event_code();
}
inline void AckTransferChatGroup::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckTransferChatGroup::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckTransferChatGroup.event_code)
}

// bytes chat_group_id = 2;
inline void AckTransferChatGroup::clear_chat_group_id() {
  chat_group_id_.ClearToEmpty();
}
inline const std::string& AckTransferChatGroup::chat_group_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTransferChatGroup.chat_group_id)
  return _internal_chat_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckTransferChatGroup::set_chat_group_id(ArgT0&& arg0, ArgT... args) {
 
 chat_group_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckTransferChatGroup.chat_group_id)
}
inline std::string* AckTransferChatGroup::mutable_chat_group_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckTransferChatGroup.chat_group_id)
  return _internal_mutable_chat_group_id();
}
inline const std::string& AckTransferChatGroup::_internal_chat_group_id() const {
  return chat_group_id_.Get();
}
inline void AckTransferChatGroup::_internal_set_chat_group_id(const std::string& value) {
  
  chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckTransferChatGroup::_internal_mutable_chat_group_id() {
  
  return chat_group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckTransferChatGroup::release_chat_group_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckTransferChatGroup.chat_group_id)
  return chat_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckTransferChatGroup::set_allocated_chat_group_id(std::string* chat_group_id) {
  if (chat_group_id != nullptr) {
    
  } else {
    
  }
  chat_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckTransferChatGroup.chat_group_id)
}

// int32 chat_group_type = 3;
inline void AckTransferChatGroup::clear_chat_group_type() {
  chat_group_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckTransferChatGroup::_internal_chat_group_type() const {
  return chat_group_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckTransferChatGroup::chat_group_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTransferChatGroup.chat_group_type)
  return _internal_chat_group_type();
}
inline void AckTransferChatGroup::_internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_group_type_ = value;
}
inline void AckTransferChatGroup::set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_group_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckTransferChatGroup.chat_group_type)
}

// bytes extra_data = 4;
inline void AckTransferChatGroup::clear_extra_data() {
  extra_data_.ClearToEmpty();
}
inline const std::string& AckTransferChatGroup::extra_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTransferChatGroup.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckTransferChatGroup::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 extra_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckTransferChatGroup.extra_data)
}
inline std::string* AckTransferChatGroup::mutable_extra_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckTransferChatGroup.extra_data)
  return _internal_mutable_extra_data();
}
inline const std::string& AckTransferChatGroup::_internal_extra_data() const {
  return extra_data_.Get();
}
inline void AckTransferChatGroup::_internal_set_extra_data(const std::string& value) {
  
  extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckTransferChatGroup::_internal_mutable_extra_data() {
  
  return extra_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckTransferChatGroup::release_extra_data() {
  // @@protoc_insertion_point(field_release:KWMsg.AckTransferChatGroup.extra_data)
  return extra_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckTransferChatGroup::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  extra_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckTransferChatGroup.extra_data)
}

// bytes user_name = 5;
inline void AckTransferChatGroup::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& AckTransferChatGroup::user_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTransferChatGroup.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckTransferChatGroup::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 user_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckTransferChatGroup.user_name)
}
inline std::string* AckTransferChatGroup::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckTransferChatGroup.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& AckTransferChatGroup::_internal_user_name() const {
  return user_name_.Get();
}
inline void AckTransferChatGroup::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckTransferChatGroup::_internal_mutable_user_name() {
  
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckTransferChatGroup::release_user_name() {
  // @@protoc_insertion_point(field_release:KWMsg.AckTransferChatGroup.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckTransferChatGroup::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckTransferChatGroup.user_name)
}

// int32 world_id = 6;
inline void AckTransferChatGroup::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckTransferChatGroup::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckTransferChatGroup::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckTransferChatGroup.world_id)
  return _internal_world_id();
}
inline void AckTransferChatGroup::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void AckTransferChatGroup::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckTransferChatGroup.world_id)
}

// -------------------------------------------------------------------

// ReqAddChatGroupUser

// bytes chat_group_id = 1;
inline void ReqAddChatGroupUser::clear_chat_group_id() {
  chat_group_id_.ClearToEmpty();
}
inline const std::string& ReqAddChatGroupUser::chat_group_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAddChatGroupUser.chat_group_id)
  return _internal_chat_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAddChatGroupUser::set_chat_group_id(ArgT0&& arg0, ArgT... args) {
 
 chat_group_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqAddChatGroupUser.chat_group_id)
}
inline std::string* ReqAddChatGroupUser::mutable_chat_group_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAddChatGroupUser.chat_group_id)
  return _internal_mutable_chat_group_id();
}
inline const std::string& ReqAddChatGroupUser::_internal_chat_group_id() const {
  return chat_group_id_.Get();
}
inline void ReqAddChatGroupUser::_internal_set_chat_group_id(const std::string& value) {
  
  chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqAddChatGroupUser::_internal_mutable_chat_group_id() {
  
  return chat_group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqAddChatGroupUser::release_chat_group_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAddChatGroupUser.chat_group_id)
  return chat_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqAddChatGroupUser::set_allocated_chat_group_id(std::string* chat_group_id) {
  if (chat_group_id != nullptr) {
    
  } else {
    
  }
  chat_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAddChatGroupUser.chat_group_id)
}

// int32 chat_group_type = 2;
inline void ReqAddChatGroupUser::clear_chat_group_type() {
  chat_group_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAddChatGroupUser::_internal_chat_group_type() const {
  return chat_group_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAddChatGroupUser::chat_group_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAddChatGroupUser.chat_group_type)
  return _internal_chat_group_type();
}
inline void ReqAddChatGroupUser::_internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_group_type_ = value;
}
inline void ReqAddChatGroupUser::set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_group_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqAddChatGroupUser.chat_group_type)
}

// bytes extra_data = 3;
inline void ReqAddChatGroupUser::clear_extra_data() {
  extra_data_.ClearToEmpty();
}
inline const std::string& ReqAddChatGroupUser::extra_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAddChatGroupUser.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAddChatGroupUser::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 extra_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqAddChatGroupUser.extra_data)
}
inline std::string* ReqAddChatGroupUser::mutable_extra_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAddChatGroupUser.extra_data)
  return _internal_mutable_extra_data();
}
inline const std::string& ReqAddChatGroupUser::_internal_extra_data() const {
  return extra_data_.Get();
}
inline void ReqAddChatGroupUser::_internal_set_extra_data(const std::string& value) {
  
  extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqAddChatGroupUser::_internal_mutable_extra_data() {
  
  return extra_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqAddChatGroupUser::release_extra_data() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAddChatGroupUser.extra_data)
  return extra_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqAddChatGroupUser::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  extra_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAddChatGroupUser.extra_data)
}

// bytes user_name = 4;
inline void ReqAddChatGroupUser::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& ReqAddChatGroupUser::user_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAddChatGroupUser.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAddChatGroupUser::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 user_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqAddChatGroupUser.user_name)
}
inline std::string* ReqAddChatGroupUser::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAddChatGroupUser.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& ReqAddChatGroupUser::_internal_user_name() const {
  return user_name_.Get();
}
inline void ReqAddChatGroupUser::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqAddChatGroupUser::_internal_mutable_user_name() {
  
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqAddChatGroupUser::release_user_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAddChatGroupUser.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqAddChatGroupUser::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAddChatGroupUser.user_name)
}

// int32 world_id = 5;
inline void ReqAddChatGroupUser::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAddChatGroupUser::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAddChatGroupUser::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAddChatGroupUser.world_id)
  return _internal_world_id();
}
inline void ReqAddChatGroupUser::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void ReqAddChatGroupUser::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqAddChatGroupUser.world_id)
}

// -------------------------------------------------------------------

// AckAddChatGroupUser

// .KWMsg.EGameEventCode event_code = 1;
inline void AckAddChatGroupUser::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckAddChatGroupUser::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckAddChatGroupUser::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckAddChatGroupUser.event_code)
  return _internal_event_code();
}
inline void AckAddChatGroupUser::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckAddChatGroupUser::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckAddChatGroupUser.event_code)
}

// bytes chat_group_id = 2;
inline void AckAddChatGroupUser::clear_chat_group_id() {
  chat_group_id_.ClearToEmpty();
}
inline const std::string& AckAddChatGroupUser::chat_group_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckAddChatGroupUser.chat_group_id)
  return _internal_chat_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckAddChatGroupUser::set_chat_group_id(ArgT0&& arg0, ArgT... args) {
 
 chat_group_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckAddChatGroupUser.chat_group_id)
}
inline std::string* AckAddChatGroupUser::mutable_chat_group_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckAddChatGroupUser.chat_group_id)
  return _internal_mutable_chat_group_id();
}
inline const std::string& AckAddChatGroupUser::_internal_chat_group_id() const {
  return chat_group_id_.Get();
}
inline void AckAddChatGroupUser::_internal_set_chat_group_id(const std::string& value) {
  
  chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckAddChatGroupUser::_internal_mutable_chat_group_id() {
  
  return chat_group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckAddChatGroupUser::release_chat_group_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckAddChatGroupUser.chat_group_id)
  return chat_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckAddChatGroupUser::set_allocated_chat_group_id(std::string* chat_group_id) {
  if (chat_group_id != nullptr) {
    
  } else {
    
  }
  chat_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckAddChatGroupUser.chat_group_id)
}

// int32 chat_group_type = 3;
inline void AckAddChatGroupUser::clear_chat_group_type() {
  chat_group_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckAddChatGroupUser::_internal_chat_group_type() const {
  return chat_group_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckAddChatGroupUser::chat_group_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckAddChatGroupUser.chat_group_type)
  return _internal_chat_group_type();
}
inline void AckAddChatGroupUser::_internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_group_type_ = value;
}
inline void AckAddChatGroupUser::set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_group_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckAddChatGroupUser.chat_group_type)
}

// bytes extra_data = 4;
inline void AckAddChatGroupUser::clear_extra_data() {
  extra_data_.ClearToEmpty();
}
inline const std::string& AckAddChatGroupUser::extra_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckAddChatGroupUser.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckAddChatGroupUser::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 extra_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckAddChatGroupUser.extra_data)
}
inline std::string* AckAddChatGroupUser::mutable_extra_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckAddChatGroupUser.extra_data)
  return _internal_mutable_extra_data();
}
inline const std::string& AckAddChatGroupUser::_internal_extra_data() const {
  return extra_data_.Get();
}
inline void AckAddChatGroupUser::_internal_set_extra_data(const std::string& value) {
  
  extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckAddChatGroupUser::_internal_mutable_extra_data() {
  
  return extra_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckAddChatGroupUser::release_extra_data() {
  // @@protoc_insertion_point(field_release:KWMsg.AckAddChatGroupUser.extra_data)
  return extra_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckAddChatGroupUser::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  extra_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckAddChatGroupUser.extra_data)
}

// bytes user_name = 5;
inline void AckAddChatGroupUser::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& AckAddChatGroupUser::user_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckAddChatGroupUser.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckAddChatGroupUser::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 user_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckAddChatGroupUser.user_name)
}
inline std::string* AckAddChatGroupUser::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckAddChatGroupUser.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& AckAddChatGroupUser::_internal_user_name() const {
  return user_name_.Get();
}
inline void AckAddChatGroupUser::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckAddChatGroupUser::_internal_mutable_user_name() {
  
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckAddChatGroupUser::release_user_name() {
  // @@protoc_insertion_point(field_release:KWMsg.AckAddChatGroupUser.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckAddChatGroupUser::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckAddChatGroupUser.user_name)
}

// int32 world_id = 6;
inline void AckAddChatGroupUser::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckAddChatGroupUser::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckAddChatGroupUser::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckAddChatGroupUser.world_id)
  return _internal_world_id();
}
inline void AckAddChatGroupUser::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void AckAddChatGroupUser::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckAddChatGroupUser.world_id)
}

// -------------------------------------------------------------------

// ReqDeleteChatGroupUser

// bytes chat_group_id = 1;
inline void ReqDeleteChatGroupUser::clear_chat_group_id() {
  chat_group_id_.ClearToEmpty();
}
inline const std::string& ReqDeleteChatGroupUser::chat_group_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDeleteChatGroupUser.chat_group_id)
  return _internal_chat_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDeleteChatGroupUser::set_chat_group_id(ArgT0&& arg0, ArgT... args) {
 
 chat_group_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqDeleteChatGroupUser.chat_group_id)
}
inline std::string* ReqDeleteChatGroupUser::mutable_chat_group_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDeleteChatGroupUser.chat_group_id)
  return _internal_mutable_chat_group_id();
}
inline const std::string& ReqDeleteChatGroupUser::_internal_chat_group_id() const {
  return chat_group_id_.Get();
}
inline void ReqDeleteChatGroupUser::_internal_set_chat_group_id(const std::string& value) {
  
  chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqDeleteChatGroupUser::_internal_mutable_chat_group_id() {
  
  return chat_group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqDeleteChatGroupUser::release_chat_group_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDeleteChatGroupUser.chat_group_id)
  return chat_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqDeleteChatGroupUser::set_allocated_chat_group_id(std::string* chat_group_id) {
  if (chat_group_id != nullptr) {
    
  } else {
    
  }
  chat_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDeleteChatGroupUser.chat_group_id)
}

// int32 chat_group_type = 2;
inline void ReqDeleteChatGroupUser::clear_chat_group_type() {
  chat_group_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDeleteChatGroupUser::_internal_chat_group_type() const {
  return chat_group_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDeleteChatGroupUser::chat_group_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDeleteChatGroupUser.chat_group_type)
  return _internal_chat_group_type();
}
inline void ReqDeleteChatGroupUser::_internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_group_type_ = value;
}
inline void ReqDeleteChatGroupUser::set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_group_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqDeleteChatGroupUser.chat_group_type)
}

// bytes extra_data = 3;
inline void ReqDeleteChatGroupUser::clear_extra_data() {
  extra_data_.ClearToEmpty();
}
inline const std::string& ReqDeleteChatGroupUser::extra_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDeleteChatGroupUser.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDeleteChatGroupUser::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 extra_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqDeleteChatGroupUser.extra_data)
}
inline std::string* ReqDeleteChatGroupUser::mutable_extra_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDeleteChatGroupUser.extra_data)
  return _internal_mutable_extra_data();
}
inline const std::string& ReqDeleteChatGroupUser::_internal_extra_data() const {
  return extra_data_.Get();
}
inline void ReqDeleteChatGroupUser::_internal_set_extra_data(const std::string& value) {
  
  extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqDeleteChatGroupUser::_internal_mutable_extra_data() {
  
  return extra_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqDeleteChatGroupUser::release_extra_data() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDeleteChatGroupUser.extra_data)
  return extra_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqDeleteChatGroupUser::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  extra_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDeleteChatGroupUser.extra_data)
}

// bytes user_name = 4;
inline void ReqDeleteChatGroupUser::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& ReqDeleteChatGroupUser::user_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDeleteChatGroupUser.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqDeleteChatGroupUser::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 user_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqDeleteChatGroupUser.user_name)
}
inline std::string* ReqDeleteChatGroupUser::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqDeleteChatGroupUser.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& ReqDeleteChatGroupUser::_internal_user_name() const {
  return user_name_.Get();
}
inline void ReqDeleteChatGroupUser::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqDeleteChatGroupUser::_internal_mutable_user_name() {
  
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqDeleteChatGroupUser::release_user_name() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqDeleteChatGroupUser.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqDeleteChatGroupUser::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqDeleteChatGroupUser.user_name)
}

// int32 world_id = 5;
inline void ReqDeleteChatGroupUser::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDeleteChatGroupUser::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqDeleteChatGroupUser::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqDeleteChatGroupUser.world_id)
  return _internal_world_id();
}
inline void ReqDeleteChatGroupUser::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void ReqDeleteChatGroupUser::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqDeleteChatGroupUser.world_id)
}

// -------------------------------------------------------------------

// AckDeleteChatGroupUser

// .KWMsg.EGameEventCode event_code = 1;
inline void AckDeleteChatGroupUser::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckDeleteChatGroupUser::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckDeleteChatGroupUser::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDeleteChatGroupUser.event_code)
  return _internal_event_code();
}
inline void AckDeleteChatGroupUser::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckDeleteChatGroupUser::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckDeleteChatGroupUser.event_code)
}

// bytes chat_group_id = 2;
inline void AckDeleteChatGroupUser::clear_chat_group_id() {
  chat_group_id_.ClearToEmpty();
}
inline const std::string& AckDeleteChatGroupUser::chat_group_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDeleteChatGroupUser.chat_group_id)
  return _internal_chat_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckDeleteChatGroupUser::set_chat_group_id(ArgT0&& arg0, ArgT... args) {
 
 chat_group_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckDeleteChatGroupUser.chat_group_id)
}
inline std::string* AckDeleteChatGroupUser::mutable_chat_group_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckDeleteChatGroupUser.chat_group_id)
  return _internal_mutable_chat_group_id();
}
inline const std::string& AckDeleteChatGroupUser::_internal_chat_group_id() const {
  return chat_group_id_.Get();
}
inline void AckDeleteChatGroupUser::_internal_set_chat_group_id(const std::string& value) {
  
  chat_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckDeleteChatGroupUser::_internal_mutable_chat_group_id() {
  
  return chat_group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckDeleteChatGroupUser::release_chat_group_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckDeleteChatGroupUser.chat_group_id)
  return chat_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckDeleteChatGroupUser::set_allocated_chat_group_id(std::string* chat_group_id) {
  if (chat_group_id != nullptr) {
    
  } else {
    
  }
  chat_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chat_group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckDeleteChatGroupUser.chat_group_id)
}

// int32 chat_group_type = 3;
inline void AckDeleteChatGroupUser::clear_chat_group_type() {
  chat_group_type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckDeleteChatGroupUser::_internal_chat_group_type() const {
  return chat_group_type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckDeleteChatGroupUser::chat_group_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDeleteChatGroupUser.chat_group_type)
  return _internal_chat_group_type();
}
inline void AckDeleteChatGroupUser::_internal_set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  chat_group_type_ = value;
}
inline void AckDeleteChatGroupUser::set_chat_group_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_chat_group_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckDeleteChatGroupUser.chat_group_type)
}

// bytes extra_data = 4;
inline void AckDeleteChatGroupUser::clear_extra_data() {
  extra_data_.ClearToEmpty();
}
inline const std::string& AckDeleteChatGroupUser::extra_data() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDeleteChatGroupUser.extra_data)
  return _internal_extra_data();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckDeleteChatGroupUser::set_extra_data(ArgT0&& arg0, ArgT... args) {
 
 extra_data_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckDeleteChatGroupUser.extra_data)
}
inline std::string* AckDeleteChatGroupUser::mutable_extra_data() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckDeleteChatGroupUser.extra_data)
  return _internal_mutable_extra_data();
}
inline const std::string& AckDeleteChatGroupUser::_internal_extra_data() const {
  return extra_data_.Get();
}
inline void AckDeleteChatGroupUser::_internal_set_extra_data(const std::string& value) {
  
  extra_data_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckDeleteChatGroupUser::_internal_mutable_extra_data() {
  
  return extra_data_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckDeleteChatGroupUser::release_extra_data() {
  // @@protoc_insertion_point(field_release:KWMsg.AckDeleteChatGroupUser.extra_data)
  return extra_data_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckDeleteChatGroupUser::set_allocated_extra_data(std::string* extra_data) {
  if (extra_data != nullptr) {
    
  } else {
    
  }
  extra_data_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), extra_data,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckDeleteChatGroupUser.extra_data)
}

// bytes user_name = 5;
inline void AckDeleteChatGroupUser::clear_user_name() {
  user_name_.ClearToEmpty();
}
inline const std::string& AckDeleteChatGroupUser::user_name() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDeleteChatGroupUser.user_name)
  return _internal_user_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckDeleteChatGroupUser::set_user_name(ArgT0&& arg0, ArgT... args) {
 
 user_name_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckDeleteChatGroupUser.user_name)
}
inline std::string* AckDeleteChatGroupUser::mutable_user_name() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckDeleteChatGroupUser.user_name)
  return _internal_mutable_user_name();
}
inline const std::string& AckDeleteChatGroupUser::_internal_user_name() const {
  return user_name_.Get();
}
inline void AckDeleteChatGroupUser::_internal_set_user_name(const std::string& value) {
  
  user_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckDeleteChatGroupUser::_internal_mutable_user_name() {
  
  return user_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckDeleteChatGroupUser::release_user_name() {
  // @@protoc_insertion_point(field_release:KWMsg.AckDeleteChatGroupUser.user_name)
  return user_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckDeleteChatGroupUser::set_allocated_user_name(std::string* user_name) {
  if (user_name != nullptr) {
    
  } else {
    
  }
  user_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), user_name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckDeleteChatGroupUser.user_name)
}

// int32 world_id = 6;
inline void AckDeleteChatGroupUser::clear_world_id() {
  world_id_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckDeleteChatGroupUser::_internal_world_id() const {
  return world_id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckDeleteChatGroupUser::world_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckDeleteChatGroupUser.world_id)
  return _internal_world_id();
}
inline void AckDeleteChatGroupUser::_internal_set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  world_id_ = value;
}
inline void AckDeleteChatGroupUser::set_world_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_world_id(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckDeleteChatGroupUser.world_id)
}

// -------------------------------------------------------------------

// ReqSwitchChatBubble

// .KWMsg.Ident player_id = 1;
inline bool ReqSwitchChatBubble::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqSwitchChatBubble::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqSwitchChatBubble::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqSwitchChatBubble::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSwitchChatBubble.player_id)
  return _internal_player_id();
}
inline void ReqSwitchChatBubble::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqSwitchChatBubble.player_id)
}
inline ::KWMsg::Ident* ReqSwitchChatBubble::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqSwitchChatBubble::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSwitchChatBubble.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqSwitchChatBubble::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqSwitchChatBubble::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSwitchChatBubble.player_id)
  return _internal_mutable_player_id();
}
inline void ReqSwitchChatBubble::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSwitchChatBubble.player_id)
}

// bytes bubble_id = 2;
inline void ReqSwitchChatBubble::clear_bubble_id() {
  bubble_id_.ClearToEmpty();
}
inline const std::string& ReqSwitchChatBubble::bubble_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqSwitchChatBubble.bubble_id)
  return _internal_bubble_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqSwitchChatBubble::set_bubble_id(ArgT0&& arg0, ArgT... args) {
 
 bubble_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqSwitchChatBubble.bubble_id)
}
inline std::string* ReqSwitchChatBubble::mutable_bubble_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqSwitchChatBubble.bubble_id)
  return _internal_mutable_bubble_id();
}
inline const std::string& ReqSwitchChatBubble::_internal_bubble_id() const {
  return bubble_id_.Get();
}
inline void ReqSwitchChatBubble::_internal_set_bubble_id(const std::string& value) {
  
  bubble_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqSwitchChatBubble::_internal_mutable_bubble_id() {
  
  return bubble_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqSwitchChatBubble::release_bubble_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqSwitchChatBubble.bubble_id)
  return bubble_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqSwitchChatBubble::set_allocated_bubble_id(std::string* bubble_id) {
  if (bubble_id != nullptr) {
    
  } else {
    
  }
  bubble_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bubble_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqSwitchChatBubble.bubble_id)
}

// -------------------------------------------------------------------

// AckSwitchChatBubble

// .KWMsg.EGameEventCode event_code = 1;
inline void AckSwitchChatBubble::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckSwitchChatBubble::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckSwitchChatBubble::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSwitchChatBubble.event_code)
  return _internal_event_code();
}
inline void AckSwitchChatBubble::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckSwitchChatBubble::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckSwitchChatBubble.event_code)
}

// bytes bubble_id = 2;
inline void AckSwitchChatBubble::clear_bubble_id() {
  bubble_id_.ClearToEmpty();
}
inline const std::string& AckSwitchChatBubble::bubble_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckSwitchChatBubble.bubble_id)
  return _internal_bubble_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckSwitchChatBubble::set_bubble_id(ArgT0&& arg0, ArgT... args) {
 
 bubble_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckSwitchChatBubble.bubble_id)
}
inline std::string* AckSwitchChatBubble::mutable_bubble_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckSwitchChatBubble.bubble_id)
  return _internal_mutable_bubble_id();
}
inline const std::string& AckSwitchChatBubble::_internal_bubble_id() const {
  return bubble_id_.Get();
}
inline void AckSwitchChatBubble::_internal_set_bubble_id(const std::string& value) {
  
  bubble_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckSwitchChatBubble::_internal_mutable_bubble_id() {
  
  return bubble_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckSwitchChatBubble::release_bubble_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckSwitchChatBubble.bubble_id)
  return bubble_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckSwitchChatBubble::set_allocated_bubble_id(std::string* bubble_id) {
  if (bubble_id != nullptr) {
    
  } else {
    
  }
  bubble_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bubble_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckSwitchChatBubble.bubble_id)
}

// -------------------------------------------------------------------

// ReqUnlockChatBubble

// .KWMsg.Ident player_id = 1;
inline bool ReqUnlockChatBubble::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqUnlockChatBubble::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqUnlockChatBubble::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqUnlockChatBubble::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUnlockChatBubble.player_id)
  return _internal_player_id();
}
inline void ReqUnlockChatBubble::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqUnlockChatBubble.player_id)
}
inline ::KWMsg::Ident* ReqUnlockChatBubble::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqUnlockChatBubble::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUnlockChatBubble.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqUnlockChatBubble::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqUnlockChatBubble::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUnlockChatBubble.player_id)
  return _internal_mutable_player_id();
}
inline void ReqUnlockChatBubble::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUnlockChatBubble.player_id)
}

// bytes bubble_id = 2;
inline void ReqUnlockChatBubble::clear_bubble_id() {
  bubble_id_.ClearToEmpty();
}
inline const std::string& ReqUnlockChatBubble::bubble_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUnlockChatBubble.bubble_id)
  return _internal_bubble_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUnlockChatBubble::set_bubble_id(ArgT0&& arg0, ArgT... args) {
 
 bubble_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUnlockChatBubble.bubble_id)
}
inline std::string* ReqUnlockChatBubble::mutable_bubble_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUnlockChatBubble.bubble_id)
  return _internal_mutable_bubble_id();
}
inline const std::string& ReqUnlockChatBubble::_internal_bubble_id() const {
  return bubble_id_.Get();
}
inline void ReqUnlockChatBubble::_internal_set_bubble_id(const std::string& value) {
  
  bubble_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUnlockChatBubble::_internal_mutable_bubble_id() {
  
  return bubble_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUnlockChatBubble::release_bubble_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUnlockChatBubble.bubble_id)
  return bubble_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUnlockChatBubble::set_allocated_bubble_id(std::string* bubble_id) {
  if (bubble_id != nullptr) {
    
  } else {
    
  }
  bubble_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bubble_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUnlockChatBubble.bubble_id)
}

// -------------------------------------------------------------------

// AckUnlockChatBubble

// .KWMsg.EGameEventCode event_code = 1;
inline void AckUnlockChatBubble::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckUnlockChatBubble::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckUnlockChatBubble::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUnlockChatBubble.event_code)
  return _internal_event_code();
}
inline void AckUnlockChatBubble::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckUnlockChatBubble::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckUnlockChatBubble.event_code)
}

// bytes bubble_id = 2;
inline void AckUnlockChatBubble::clear_bubble_id() {
  bubble_id_.ClearToEmpty();
}
inline const std::string& AckUnlockChatBubble::bubble_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUnlockChatBubble.bubble_id)
  return _internal_bubble_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckUnlockChatBubble::set_bubble_id(ArgT0&& arg0, ArgT... args) {
 
 bubble_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckUnlockChatBubble.bubble_id)
}
inline std::string* AckUnlockChatBubble::mutable_bubble_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckUnlockChatBubble.bubble_id)
  return _internal_mutable_bubble_id();
}
inline const std::string& AckUnlockChatBubble::_internal_bubble_id() const {
  return bubble_id_.Get();
}
inline void AckUnlockChatBubble::_internal_set_bubble_id(const std::string& value) {
  
  bubble_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckUnlockChatBubble::_internal_mutable_bubble_id() {
  
  return bubble_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckUnlockChatBubble::release_bubble_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckUnlockChatBubble.bubble_id)
  return bubble_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckUnlockChatBubble::set_allocated_bubble_id(std::string* bubble_id) {
  if (bubble_id != nullptr) {
    
  } else {
    
  }
  bubble_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), bubble_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckUnlockChatBubble.bubble_id)
}

// -------------------------------------------------------------------

// ReqUnlockChatMemeGroup

// .KWMsg.Ident player_id = 1;
inline bool ReqUnlockChatMemeGroup::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqUnlockChatMemeGroup::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqUnlockChatMemeGroup::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqUnlockChatMemeGroup::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUnlockChatMemeGroup.player_id)
  return _internal_player_id();
}
inline void ReqUnlockChatMemeGroup::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqUnlockChatMemeGroup.player_id)
}
inline ::KWMsg::Ident* ReqUnlockChatMemeGroup::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqUnlockChatMemeGroup::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUnlockChatMemeGroup.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqUnlockChatMemeGroup::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqUnlockChatMemeGroup::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUnlockChatMemeGroup.player_id)
  return _internal_mutable_player_id();
}
inline void ReqUnlockChatMemeGroup::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUnlockChatMemeGroup.player_id)
}

// bytes meme_group_id = 2;
inline void ReqUnlockChatMemeGroup::clear_meme_group_id() {
  meme_group_id_.ClearToEmpty();
}
inline const std::string& ReqUnlockChatMemeGroup::meme_group_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUnlockChatMemeGroup.meme_group_id)
  return _internal_meme_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUnlockChatMemeGroup::set_meme_group_id(ArgT0&& arg0, ArgT... args) {
 
 meme_group_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUnlockChatMemeGroup.meme_group_id)
}
inline std::string* ReqUnlockChatMemeGroup::mutable_meme_group_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUnlockChatMemeGroup.meme_group_id)
  return _internal_mutable_meme_group_id();
}
inline const std::string& ReqUnlockChatMemeGroup::_internal_meme_group_id() const {
  return meme_group_id_.Get();
}
inline void ReqUnlockChatMemeGroup::_internal_set_meme_group_id(const std::string& value) {
  
  meme_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUnlockChatMemeGroup::_internal_mutable_meme_group_id() {
  
  return meme_group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUnlockChatMemeGroup::release_meme_group_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUnlockChatMemeGroup.meme_group_id)
  return meme_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUnlockChatMemeGroup::set_allocated_meme_group_id(std::string* meme_group_id) {
  if (meme_group_id != nullptr) {
    
  } else {
    
  }
  meme_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), meme_group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUnlockChatMemeGroup.meme_group_id)
}

// -------------------------------------------------------------------

// AckUnlockChatMemeGroup

// .KWMsg.EGameEventCode event_code = 1;
inline void AckUnlockChatMemeGroup::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckUnlockChatMemeGroup::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckUnlockChatMemeGroup::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUnlockChatMemeGroup.event_code)
  return _internal_event_code();
}
inline void AckUnlockChatMemeGroup::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckUnlockChatMemeGroup::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckUnlockChatMemeGroup.event_code)
}

// bytes meme_group_id = 2;
inline void AckUnlockChatMemeGroup::clear_meme_group_id() {
  meme_group_id_.ClearToEmpty();
}
inline const std::string& AckUnlockChatMemeGroup::meme_group_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUnlockChatMemeGroup.meme_group_id)
  return _internal_meme_group_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckUnlockChatMemeGroup::set_meme_group_id(ArgT0&& arg0, ArgT... args) {
 
 meme_group_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckUnlockChatMemeGroup.meme_group_id)
}
inline std::string* AckUnlockChatMemeGroup::mutable_meme_group_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckUnlockChatMemeGroup.meme_group_id)
  return _internal_mutable_meme_group_id();
}
inline const std::string& AckUnlockChatMemeGroup::_internal_meme_group_id() const {
  return meme_group_id_.Get();
}
inline void AckUnlockChatMemeGroup::_internal_set_meme_group_id(const std::string& value) {
  
  meme_group_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckUnlockChatMemeGroup::_internal_mutable_meme_group_id() {
  
  return meme_group_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckUnlockChatMemeGroup::release_meme_group_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckUnlockChatMemeGroup.meme_group_id)
  return meme_group_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckUnlockChatMemeGroup::set_allocated_meme_group_id(std::string* meme_group_id) {
  if (meme_group_id != nullptr) {
    
  } else {
    
  }
  meme_group_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), meme_group_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckUnlockChatMemeGroup.meme_group_id)
}

// -------------------------------------------------------------------

// ReqUnlockChatMeme

// .KWMsg.Ident player_id = 1;
inline bool ReqUnlockChatMeme::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqUnlockChatMeme::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqUnlockChatMeme::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqUnlockChatMeme::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUnlockChatMeme.player_id)
  return _internal_player_id();
}
inline void ReqUnlockChatMeme::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqUnlockChatMeme.player_id)
}
inline ::KWMsg::Ident* ReqUnlockChatMeme::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqUnlockChatMeme::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUnlockChatMeme.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqUnlockChatMeme::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqUnlockChatMeme::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUnlockChatMeme.player_id)
  return _internal_mutable_player_id();
}
inline void ReqUnlockChatMeme::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUnlockChatMeme.player_id)
}

// bytes meme_id = 2;
inline void ReqUnlockChatMeme::clear_meme_id() {
  meme_id_.ClearToEmpty();
}
inline const std::string& ReqUnlockChatMeme::meme_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqUnlockChatMeme.meme_id)
  return _internal_meme_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqUnlockChatMeme::set_meme_id(ArgT0&& arg0, ArgT... args) {
 
 meme_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqUnlockChatMeme.meme_id)
}
inline std::string* ReqUnlockChatMeme::mutable_meme_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqUnlockChatMeme.meme_id)
  return _internal_mutable_meme_id();
}
inline const std::string& ReqUnlockChatMeme::_internal_meme_id() const {
  return meme_id_.Get();
}
inline void ReqUnlockChatMeme::_internal_set_meme_id(const std::string& value) {
  
  meme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqUnlockChatMeme::_internal_mutable_meme_id() {
  
  return meme_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqUnlockChatMeme::release_meme_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqUnlockChatMeme.meme_id)
  return meme_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqUnlockChatMeme::set_allocated_meme_id(std::string* meme_id) {
  if (meme_id != nullptr) {
    
  } else {
    
  }
  meme_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), meme_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqUnlockChatMeme.meme_id)
}

// -------------------------------------------------------------------

// AckUnlockChatMeme

// .KWMsg.EGameEventCode event_code = 1;
inline void AckUnlockChatMeme::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckUnlockChatMeme::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckUnlockChatMeme::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUnlockChatMeme.event_code)
  return _internal_event_code();
}
inline void AckUnlockChatMeme::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckUnlockChatMeme::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckUnlockChatMeme.event_code)
}

// bytes meme_id = 2;
inline void AckUnlockChatMeme::clear_meme_id() {
  meme_id_.ClearToEmpty();
}
inline const std::string& AckUnlockChatMeme::meme_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckUnlockChatMeme.meme_id)
  return _internal_meme_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckUnlockChatMeme::set_meme_id(ArgT0&& arg0, ArgT... args) {
 
 meme_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckUnlockChatMeme.meme_id)
}
inline std::string* AckUnlockChatMeme::mutable_meme_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckUnlockChatMeme.meme_id)
  return _internal_mutable_meme_id();
}
inline const std::string& AckUnlockChatMeme::_internal_meme_id() const {
  return meme_id_.Get();
}
inline void AckUnlockChatMeme::_internal_set_meme_id(const std::string& value) {
  
  meme_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckUnlockChatMeme::_internal_mutable_meme_id() {
  
  return meme_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckUnlockChatMeme::release_meme_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckUnlockChatMeme.meme_id)
  return meme_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckUnlockChatMeme::set_allocated_meme_id(std::string* meme_id) {
  if (meme_id != nullptr) {
    
  } else {
    
  }
  meme_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), meme_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckUnlockChatMeme.meme_id)
}

// -------------------------------------------------------------------

// SyncPlayerHonorPointChanged

// .KWMsg.Ident player_id = 1;
inline bool SyncPlayerHonorPointChanged::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncPlayerHonorPointChanged::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncPlayerHonorPointChanged::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncPlayerHonorPointChanged::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerHonorPointChanged.player_id)
  return _internal_player_id();
}
inline void SyncPlayerHonorPointChanged::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerHonorPointChanged.player_id)
}
inline ::KWMsg::Ident* SyncPlayerHonorPointChanged::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerHonorPointChanged::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerHonorPointChanged.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerHonorPointChanged::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncPlayerHonorPointChanged::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerHonorPointChanged.player_id)
  return _internal_mutable_player_id();
}
inline void SyncPlayerHonorPointChanged::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerHonorPointChanged.player_id)
}

// int32 honor_point = 2;
inline void SyncPlayerHonorPointChanged::clear_honor_point() {
  honor_point_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerHonorPointChanged::_internal_honor_point() const {
  return honor_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerHonorPointChanged::honor_point() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerHonorPointChanged.honor_point)
  return _internal_honor_point();
}
inline void SyncPlayerHonorPointChanged::_internal_set_honor_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  honor_point_ = value;
}
inline void SyncPlayerHonorPointChanged::set_honor_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_honor_point(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerHonorPointChanged.honor_point)
}

// -------------------------------------------------------------------

// SavePlayerHonorPointRanking

// bytes key = 1;
inline void SavePlayerHonorPointRanking::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& SavePlayerHonorPointRanking::key() const {
  // @@protoc_insertion_point(field_get:KWMsg.SavePlayerHonorPointRanking.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SavePlayerHonorPointRanking::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.SavePlayerHonorPointRanking.key)
}
inline std::string* SavePlayerHonorPointRanking::mutable_key() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SavePlayerHonorPointRanking.key)
  return _internal_mutable_key();
}
inline const std::string& SavePlayerHonorPointRanking::_internal_key() const {
  return key_.Get();
}
inline void SavePlayerHonorPointRanking::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SavePlayerHonorPointRanking::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SavePlayerHonorPointRanking::release_key() {
  // @@protoc_insertion_point(field_release:KWMsg.SavePlayerHonorPointRanking.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SavePlayerHonorPointRanking::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SavePlayerHonorPointRanking.key)
}

// int64 score = 2;
inline void SavePlayerHonorPointRanking::clear_score() {
  score_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SavePlayerHonorPointRanking::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SavePlayerHonorPointRanking::score() const {
  // @@protoc_insertion_point(field_get:KWMsg.SavePlayerHonorPointRanking.score)
  return _internal_score();
}
inline void SavePlayerHonorPointRanking::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void SavePlayerHonorPointRanking::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:KWMsg.SavePlayerHonorPointRanking.score)
}

// -------------------------------------------------------------------

// SyncPlayerStrategyPointChanged

// .KWMsg.Ident player_id = 1;
inline bool SyncPlayerStrategyPointChanged::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncPlayerStrategyPointChanged::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncPlayerStrategyPointChanged::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncPlayerStrategyPointChanged::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerStrategyPointChanged.player_id)
  return _internal_player_id();
}
inline void SyncPlayerStrategyPointChanged::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncPlayerStrategyPointChanged.player_id)
}
inline ::KWMsg::Ident* SyncPlayerStrategyPointChanged::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerStrategyPointChanged::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncPlayerStrategyPointChanged.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncPlayerStrategyPointChanged::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncPlayerStrategyPointChanged::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncPlayerStrategyPointChanged.player_id)
  return _internal_mutable_player_id();
}
inline void SyncPlayerStrategyPointChanged::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncPlayerStrategyPointChanged.player_id)
}

// int32 strategy_point = 2;
inline void SyncPlayerStrategyPointChanged::clear_strategy_point() {
  strategy_point_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerStrategyPointChanged::_internal_strategy_point() const {
  return strategy_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncPlayerStrategyPointChanged::strategy_point() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncPlayerStrategyPointChanged.strategy_point)
  return _internal_strategy_point();
}
inline void SyncPlayerStrategyPointChanged::_internal_set_strategy_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  strategy_point_ = value;
}
inline void SyncPlayerStrategyPointChanged::set_strategy_point(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_strategy_point(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncPlayerStrategyPointChanged.strategy_point)
}

// -------------------------------------------------------------------

// SavePlayerStrategyPointRanking

// bytes key = 1;
inline void SavePlayerStrategyPointRanking::clear_key() {
  key_.ClearToEmpty();
}
inline const std::string& SavePlayerStrategyPointRanking::key() const {
  // @@protoc_insertion_point(field_get:KWMsg.SavePlayerStrategyPointRanking.key)
  return _internal_key();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SavePlayerStrategyPointRanking::set_key(ArgT0&& arg0, ArgT... args) {
 
 key_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.SavePlayerStrategyPointRanking.key)
}
inline std::string* SavePlayerStrategyPointRanking::mutable_key() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SavePlayerStrategyPointRanking.key)
  return _internal_mutable_key();
}
inline const std::string& SavePlayerStrategyPointRanking::_internal_key() const {
  return key_.Get();
}
inline void SavePlayerStrategyPointRanking::_internal_set_key(const std::string& value) {
  
  key_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SavePlayerStrategyPointRanking::_internal_mutable_key() {
  
  return key_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SavePlayerStrategyPointRanking::release_key() {
  // @@protoc_insertion_point(field_release:KWMsg.SavePlayerStrategyPointRanking.key)
  return key_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SavePlayerStrategyPointRanking::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SavePlayerStrategyPointRanking.key)
}

// int64 score = 2;
inline void SavePlayerStrategyPointRanking::clear_score() {
  score_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SavePlayerStrategyPointRanking::_internal_score() const {
  return score_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 SavePlayerStrategyPointRanking::score() const {
  // @@protoc_insertion_point(field_get:KWMsg.SavePlayerStrategyPointRanking.score)
  return _internal_score();
}
inline void SavePlayerStrategyPointRanking::_internal_set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  score_ = value;
}
inline void SavePlayerStrategyPointRanking::set_score(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_score(value);
  // @@protoc_insertion_point(field_set:KWMsg.SavePlayerStrategyPointRanking.score)
}

// -------------------------------------------------------------------

// SyncBotArenaState

// int32 state = 1;
inline void SyncBotArenaState::clear_state() {
  state_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncBotArenaState::_internal_state() const {
  return state_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncBotArenaState::state() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaState.state)
  return _internal_state();
}
inline void SyncBotArenaState::_internal_set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  state_ = value;
}
inline void SyncBotArenaState::set_state(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_state(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncBotArenaState.state)
}

// -------------------------------------------------------------------

// SyncBotArenaStageSession

// int32 stage = 1;
inline void SyncBotArenaStageSession::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncBotArenaStageSession::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncBotArenaStageSession::stage() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaStageSession.stage)
  return _internal_stage();
}
inline void SyncBotArenaStageSession::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void SyncBotArenaStageSession::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncBotArenaStageSession.stage)
}

// int32 session = 2;
inline void SyncBotArenaStageSession::clear_session() {
  session_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncBotArenaStageSession::_internal_session() const {
  return session_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncBotArenaStageSession::session() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaStageSession.session)
  return _internal_session();
}
inline void SyncBotArenaStageSession::_internal_set_session(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_ = value;
}
inline void SyncBotArenaStageSession::set_session(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncBotArenaStageSession.session)
}

// -------------------------------------------------------------------

// SavePlayerChallengeList

// .KWMsg.Ident player_id = 1;
inline bool SavePlayerChallengeList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SavePlayerChallengeList::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SavePlayerChallengeList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SavePlayerChallengeList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SavePlayerChallengeList.player_id)
  return _internal_player_id();
}
inline void SavePlayerChallengeList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SavePlayerChallengeList.player_id)
}
inline ::KWMsg::Ident* SavePlayerChallengeList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SavePlayerChallengeList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SavePlayerChallengeList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SavePlayerChallengeList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SavePlayerChallengeList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SavePlayerChallengeList.player_id)
  return _internal_mutable_player_id();
}
inline void SavePlayerChallengeList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SavePlayerChallengeList.player_id)
}

// .KWMsg.BotArenaChallengeList list = 2;
inline bool SavePlayerChallengeList::_internal_has_list() const {
  return this != internal_default_instance() && list_ != nullptr;
}
inline bool SavePlayerChallengeList::has_list() const {
  return _internal_has_list();
}
inline void SavePlayerChallengeList::clear_list() {
  if (GetArenaForAllocation() == nullptr && list_ != nullptr) {
    delete list_;
  }
  list_ = nullptr;
}
inline const ::KWMsg::BotArenaChallengeList& SavePlayerChallengeList::_internal_list() const {
  const ::KWMsg::BotArenaChallengeList* p = list_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BotArenaChallengeList&>(
      ::KWMsg::_BotArenaChallengeList_default_instance_);
}
inline const ::KWMsg::BotArenaChallengeList& SavePlayerChallengeList::list() const {
  // @@protoc_insertion_point(field_get:KWMsg.SavePlayerChallengeList.list)
  return _internal_list();
}
inline void SavePlayerChallengeList::unsafe_arena_set_allocated_list(
    ::KWMsg::BotArenaChallengeList* list) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(list_);
  }
  list_ = list;
  if (list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SavePlayerChallengeList.list)
}
inline ::KWMsg::BotArenaChallengeList* SavePlayerChallengeList::release_list() {
  
  ::KWMsg::BotArenaChallengeList* temp = list_;
  list_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BotArenaChallengeList* SavePlayerChallengeList::unsafe_arena_release_list() {
  // @@protoc_insertion_point(field_release:KWMsg.SavePlayerChallengeList.list)
  
  ::KWMsg::BotArenaChallengeList* temp = list_;
  list_ = nullptr;
  return temp;
}
inline ::KWMsg::BotArenaChallengeList* SavePlayerChallengeList::_internal_mutable_list() {
  
  if (list_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BotArenaChallengeList>(GetArenaForAllocation());
    list_ = p;
  }
  return list_;
}
inline ::KWMsg::BotArenaChallengeList* SavePlayerChallengeList::mutable_list() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SavePlayerChallengeList.list)
  return _internal_mutable_list();
}
inline void SavePlayerChallengeList::set_allocated_list(::KWMsg::BotArenaChallengeList* list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete list_;
  }
  if (list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BotArenaChallengeList>::GetOwningArena(list);
    if (message_arena != submessage_arena) {
      list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, list, submessage_arena);
    }
    
  } else {
    
  }
  list_ = list;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SavePlayerChallengeList.list)
}

// -------------------------------------------------------------------

// UpdatePlayerChallengeItem

// .KWMsg.Ident player_id = 1;
inline bool UpdatePlayerChallengeItem::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool UpdatePlayerChallengeItem::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& UpdatePlayerChallengeItem::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& UpdatePlayerChallengeItem::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.UpdatePlayerChallengeItem.player_id)
  return _internal_player_id();
}
inline void UpdatePlayerChallengeItem::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.UpdatePlayerChallengeItem.player_id)
}
inline ::KWMsg::Ident* UpdatePlayerChallengeItem::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* UpdatePlayerChallengeItem::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.UpdatePlayerChallengeItem.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* UpdatePlayerChallengeItem::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* UpdatePlayerChallengeItem::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.UpdatePlayerChallengeItem.player_id)
  return _internal_mutable_player_id();
}
inline void UpdatePlayerChallengeItem::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.UpdatePlayerChallengeItem.player_id)
}

// .KWMsg.BotArenaChallengeItem item = 2;
inline bool UpdatePlayerChallengeItem::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool UpdatePlayerChallengeItem::has_item() const {
  return _internal_has_item();
}
inline void UpdatePlayerChallengeItem::clear_item() {
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::KWMsg::BotArenaChallengeItem& UpdatePlayerChallengeItem::_internal_item() const {
  const ::KWMsg::BotArenaChallengeItem* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BotArenaChallengeItem&>(
      ::KWMsg::_BotArenaChallengeItem_default_instance_);
}
inline const ::KWMsg::BotArenaChallengeItem& UpdatePlayerChallengeItem::item() const {
  // @@protoc_insertion_point(field_get:KWMsg.UpdatePlayerChallengeItem.item)
  return _internal_item();
}
inline void UpdatePlayerChallengeItem::unsafe_arena_set_allocated_item(
    ::KWMsg::BotArenaChallengeItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.UpdatePlayerChallengeItem.item)
}
inline ::KWMsg::BotArenaChallengeItem* UpdatePlayerChallengeItem::release_item() {
  
  ::KWMsg::BotArenaChallengeItem* temp = item_;
  item_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BotArenaChallengeItem* UpdatePlayerChallengeItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:KWMsg.UpdatePlayerChallengeItem.item)
  
  ::KWMsg::BotArenaChallengeItem* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::KWMsg::BotArenaChallengeItem* UpdatePlayerChallengeItem::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BotArenaChallengeItem>(GetArenaForAllocation());
    item_ = p;
  }
  return item_;
}
inline ::KWMsg::BotArenaChallengeItem* UpdatePlayerChallengeItem::mutable_item() {
  // @@protoc_insertion_point(field_mutable:KWMsg.UpdatePlayerChallengeItem.item)
  return _internal_mutable_item();
}
inline void UpdatePlayerChallengeItem::set_allocated_item(::KWMsg::BotArenaChallengeItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BotArenaChallengeItem>::GetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.UpdatePlayerChallengeItem.item)
}

// -------------------------------------------------------------------

// UpdatePlayerReplayItem

// .KWMsg.Ident player_id = 1;
inline bool UpdatePlayerReplayItem::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool UpdatePlayerReplayItem::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& UpdatePlayerReplayItem::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& UpdatePlayerReplayItem::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.UpdatePlayerReplayItem.player_id)
  return _internal_player_id();
}
inline void UpdatePlayerReplayItem::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.UpdatePlayerReplayItem.player_id)
}
inline ::KWMsg::Ident* UpdatePlayerReplayItem::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* UpdatePlayerReplayItem::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.UpdatePlayerReplayItem.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* UpdatePlayerReplayItem::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* UpdatePlayerReplayItem::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.UpdatePlayerReplayItem.player_id)
  return _internal_mutable_player_id();
}
inline void UpdatePlayerReplayItem::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.UpdatePlayerReplayItem.player_id)
}

// .KWMsg.BotArenaReplayItem item = 2;
inline bool UpdatePlayerReplayItem::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool UpdatePlayerReplayItem::has_item() const {
  return _internal_has_item();
}
inline void UpdatePlayerReplayItem::clear_item() {
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::KWMsg::BotArenaReplayItem& UpdatePlayerReplayItem::_internal_item() const {
  const ::KWMsg::BotArenaReplayItem* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BotArenaReplayItem&>(
      ::KWMsg::_BotArenaReplayItem_default_instance_);
}
inline const ::KWMsg::BotArenaReplayItem& UpdatePlayerReplayItem::item() const {
  // @@protoc_insertion_point(field_get:KWMsg.UpdatePlayerReplayItem.item)
  return _internal_item();
}
inline void UpdatePlayerReplayItem::unsafe_arena_set_allocated_item(
    ::KWMsg::BotArenaReplayItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.UpdatePlayerReplayItem.item)
}
inline ::KWMsg::BotArenaReplayItem* UpdatePlayerReplayItem::release_item() {
  
  ::KWMsg::BotArenaReplayItem* temp = item_;
  item_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BotArenaReplayItem* UpdatePlayerReplayItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:KWMsg.UpdatePlayerReplayItem.item)
  
  ::KWMsg::BotArenaReplayItem* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::KWMsg::BotArenaReplayItem* UpdatePlayerReplayItem::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BotArenaReplayItem>(GetArenaForAllocation());
    item_ = p;
  }
  return item_;
}
inline ::KWMsg::BotArenaReplayItem* UpdatePlayerReplayItem::mutable_item() {
  // @@protoc_insertion_point(field_mutable:KWMsg.UpdatePlayerReplayItem.item)
  return _internal_mutable_item();
}
inline void UpdatePlayerReplayItem::set_allocated_item(::KWMsg::BotArenaReplayItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BotArenaReplayItem>::GetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.UpdatePlayerReplayItem.item)
}

// -------------------------------------------------------------------

// AddPlayerReplayItem

// .KWMsg.Ident player_id = 1;
inline bool AddPlayerReplayItem::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AddPlayerReplayItem::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AddPlayerReplayItem::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AddPlayerReplayItem::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AddPlayerReplayItem.player_id)
  return _internal_player_id();
}
inline void AddPlayerReplayItem::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AddPlayerReplayItem.player_id)
}
inline ::KWMsg::Ident* AddPlayerReplayItem::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AddPlayerReplayItem::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AddPlayerReplayItem.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AddPlayerReplayItem::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AddPlayerReplayItem::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AddPlayerReplayItem.player_id)
  return _internal_mutable_player_id();
}
inline void AddPlayerReplayItem::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AddPlayerReplayItem.player_id)
}

// .KWMsg.BotArenaReplayItem item = 2;
inline bool AddPlayerReplayItem::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool AddPlayerReplayItem::has_item() const {
  return _internal_has_item();
}
inline void AddPlayerReplayItem::clear_item() {
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::KWMsg::BotArenaReplayItem& AddPlayerReplayItem::_internal_item() const {
  const ::KWMsg::BotArenaReplayItem* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BotArenaReplayItem&>(
      ::KWMsg::_BotArenaReplayItem_default_instance_);
}
inline const ::KWMsg::BotArenaReplayItem& AddPlayerReplayItem::item() const {
  // @@protoc_insertion_point(field_get:KWMsg.AddPlayerReplayItem.item)
  return _internal_item();
}
inline void AddPlayerReplayItem::unsafe_arena_set_allocated_item(
    ::KWMsg::BotArenaReplayItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AddPlayerReplayItem.item)
}
inline ::KWMsg::BotArenaReplayItem* AddPlayerReplayItem::release_item() {
  
  ::KWMsg::BotArenaReplayItem* temp = item_;
  item_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BotArenaReplayItem* AddPlayerReplayItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:KWMsg.AddPlayerReplayItem.item)
  
  ::KWMsg::BotArenaReplayItem* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::KWMsg::BotArenaReplayItem* AddPlayerReplayItem::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BotArenaReplayItem>(GetArenaForAllocation());
    item_ = p;
  }
  return item_;
}
inline ::KWMsg::BotArenaReplayItem* AddPlayerReplayItem::mutable_item() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AddPlayerReplayItem.item)
  return _internal_mutable_item();
}
inline void AddPlayerReplayItem::set_allocated_item(::KWMsg::BotArenaReplayItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BotArenaReplayItem>::GetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AddPlayerReplayItem.item)
}

// -------------------------------------------------------------------

// DelPlayerReplayItem

// .KWMsg.Ident player_id = 1;
inline bool DelPlayerReplayItem::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool DelPlayerReplayItem::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& DelPlayerReplayItem::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& DelPlayerReplayItem::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.DelPlayerReplayItem.player_id)
  return _internal_player_id();
}
inline void DelPlayerReplayItem::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.DelPlayerReplayItem.player_id)
}
inline ::KWMsg::Ident* DelPlayerReplayItem::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* DelPlayerReplayItem::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.DelPlayerReplayItem.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* DelPlayerReplayItem::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* DelPlayerReplayItem::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DelPlayerReplayItem.player_id)
  return _internal_mutable_player_id();
}
inline void DelPlayerReplayItem::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DelPlayerReplayItem.player_id)
}

// .KWMsg.BotArenaReplayItem item = 2;
inline bool DelPlayerReplayItem::_internal_has_item() const {
  return this != internal_default_instance() && item_ != nullptr;
}
inline bool DelPlayerReplayItem::has_item() const {
  return _internal_has_item();
}
inline void DelPlayerReplayItem::clear_item() {
  if (GetArenaForAllocation() == nullptr && item_ != nullptr) {
    delete item_;
  }
  item_ = nullptr;
}
inline const ::KWMsg::BotArenaReplayItem& DelPlayerReplayItem::_internal_item() const {
  const ::KWMsg::BotArenaReplayItem* p = item_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BotArenaReplayItem&>(
      ::KWMsg::_BotArenaReplayItem_default_instance_);
}
inline const ::KWMsg::BotArenaReplayItem& DelPlayerReplayItem::item() const {
  // @@protoc_insertion_point(field_get:KWMsg.DelPlayerReplayItem.item)
  return _internal_item();
}
inline void DelPlayerReplayItem::unsafe_arena_set_allocated_item(
    ::KWMsg::BotArenaReplayItem* item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(item_);
  }
  item_ = item;
  if (item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.DelPlayerReplayItem.item)
}
inline ::KWMsg::BotArenaReplayItem* DelPlayerReplayItem::release_item() {
  
  ::KWMsg::BotArenaReplayItem* temp = item_;
  item_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BotArenaReplayItem* DelPlayerReplayItem::unsafe_arena_release_item() {
  // @@protoc_insertion_point(field_release:KWMsg.DelPlayerReplayItem.item)
  
  ::KWMsg::BotArenaReplayItem* temp = item_;
  item_ = nullptr;
  return temp;
}
inline ::KWMsg::BotArenaReplayItem* DelPlayerReplayItem::_internal_mutable_item() {
  
  if (item_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BotArenaReplayItem>(GetArenaForAllocation());
    item_ = p;
  }
  return item_;
}
inline ::KWMsg::BotArenaReplayItem* DelPlayerReplayItem::mutable_item() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DelPlayerReplayItem.item)
  return _internal_mutable_item();
}
inline void DelPlayerReplayItem::set_allocated_item(::KWMsg::BotArenaReplayItem* item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete item_;
  }
  if (item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BotArenaReplayItem>::GetOwningArena(item);
    if (message_arena != submessage_arena) {
      item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, item, submessage_arena);
    }
    
  } else {
    
  }
  item_ = item;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DelPlayerReplayItem.item)
}

// -------------------------------------------------------------------

// SyncBotArenaBattleIsReady

// .KWMsg.EGameEventCode event_code = 1;
inline void SyncBotArenaBattleIsReady::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode SyncBotArenaBattleIsReady::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode SyncBotArenaBattleIsReady::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleIsReady.event_code)
  return _internal_event_code();
}
inline void SyncBotArenaBattleIsReady::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void SyncBotArenaBattleIsReady::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncBotArenaBattleIsReady.event_code)
}

// bytes game_play_id = 2;
inline void SyncBotArenaBattleIsReady::clear_game_play_id() {
  game_play_id_.ClearToEmpty();
}
inline const std::string& SyncBotArenaBattleIsReady::game_play_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleIsReady.game_play_id)
  return _internal_game_play_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncBotArenaBattleIsReady::set_game_play_id(ArgT0&& arg0, ArgT... args) {
 
 game_play_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.SyncBotArenaBattleIsReady.game_play_id)
}
inline std::string* SyncBotArenaBattleIsReady::mutable_game_play_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncBotArenaBattleIsReady.game_play_id)
  return _internal_mutable_game_play_id();
}
inline const std::string& SyncBotArenaBattleIsReady::_internal_game_play_id() const {
  return game_play_id_.Get();
}
inline void SyncBotArenaBattleIsReady::_internal_set_game_play_id(const std::string& value) {
  
  game_play_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncBotArenaBattleIsReady::_internal_mutable_game_play_id() {
  
  return game_play_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncBotArenaBattleIsReady::release_game_play_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncBotArenaBattleIsReady.game_play_id)
  return game_play_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncBotArenaBattleIsReady::set_allocated_game_play_id(std::string* game_play_id) {
  if (game_play_id != nullptr) {
    
  } else {
    
  }
  game_play_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), game_play_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncBotArenaBattleIsReady.game_play_id)
}

// bytes team_id = 3;
inline void SyncBotArenaBattleIsReady::clear_team_id() {
  team_id_.ClearToEmpty();
}
inline const std::string& SyncBotArenaBattleIsReady::team_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleIsReady.team_id)
  return _internal_team_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncBotArenaBattleIsReady::set_team_id(ArgT0&& arg0, ArgT... args) {
 
 team_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.SyncBotArenaBattleIsReady.team_id)
}
inline std::string* SyncBotArenaBattleIsReady::mutable_team_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncBotArenaBattleIsReady.team_id)
  return _internal_mutable_team_id();
}
inline const std::string& SyncBotArenaBattleIsReady::_internal_team_id() const {
  return team_id_.Get();
}
inline void SyncBotArenaBattleIsReady::_internal_set_team_id(const std::string& value) {
  
  team_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncBotArenaBattleIsReady::_internal_mutable_team_id() {
  
  return team_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncBotArenaBattleIsReady::release_team_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncBotArenaBattleIsReady.team_id)
  return team_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncBotArenaBattleIsReady::set_allocated_team_id(std::string* team_id) {
  if (team_id != nullptr) {
    
  } else {
    
  }
  team_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), team_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncBotArenaBattleIsReady.team_id)
}

// int32 continuous_count = 4;
inline void SyncBotArenaBattleIsReady::clear_continuous_count() {
  continuous_count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncBotArenaBattleIsReady::_internal_continuous_count() const {
  return continuous_count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncBotArenaBattleIsReady::continuous_count() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleIsReady.continuous_count)
  return _internal_continuous_count();
}
inline void SyncBotArenaBattleIsReady::_internal_set_continuous_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  continuous_count_ = value;
}
inline void SyncBotArenaBattleIsReady::set_continuous_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_continuous_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncBotArenaBattleIsReady.continuous_count)
}

// int32 auto_buy = 5;
inline void SyncBotArenaBattleIsReady::clear_auto_buy() {
  auto_buy_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncBotArenaBattleIsReady::_internal_auto_buy() const {
  return auto_buy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncBotArenaBattleIsReady::auto_buy() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleIsReady.auto_buy)
  return _internal_auto_buy();
}
inline void SyncBotArenaBattleIsReady::_internal_set_auto_buy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  auto_buy_ = value;
}
inline void SyncBotArenaBattleIsReady::set_auto_buy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_auto_buy(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncBotArenaBattleIsReady.auto_buy)
}

// .KWMsg.Ident challenge_id = 6;
inline bool SyncBotArenaBattleIsReady::_internal_has_challenge_id() const {
  return challenge_item_case() == kChallengeId;
}
inline bool SyncBotArenaBattleIsReady::has_challenge_id() const {
  return _internal_has_challenge_id();
}
inline void SyncBotArenaBattleIsReady::set_has_challenge_id() {
  _oneof_case_[0] = kChallengeId;
}
inline ::KWMsg::Ident* SyncBotArenaBattleIsReady::release_challenge_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncBotArenaBattleIsReady.challenge_id)
  if (_internal_has_challenge_id()) {
    clear_has_challenge_item();
      ::KWMsg::Ident* temp = challenge_item_.challenge_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    challenge_item_.challenge_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::Ident& SyncBotArenaBattleIsReady::_internal_challenge_id() const {
  return _internal_has_challenge_id()
      ? *challenge_item_.challenge_id_
      : reinterpret_cast< ::KWMsg::Ident&>(::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncBotArenaBattleIsReady::challenge_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleIsReady.challenge_id)
  return _internal_challenge_id();
}
inline ::KWMsg::Ident* SyncBotArenaBattleIsReady::unsafe_arena_release_challenge_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.SyncBotArenaBattleIsReady.challenge_id)
  if (_internal_has_challenge_id()) {
    clear_has_challenge_item();
    ::KWMsg::Ident* temp = challenge_item_.challenge_id_;
    challenge_item_.challenge_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SyncBotArenaBattleIsReady::unsafe_arena_set_allocated_challenge_id(::KWMsg::Ident* challenge_id) {
  clear_challenge_item();
  if (challenge_id) {
    set_has_challenge_id();
    challenge_item_.challenge_id_ = challenge_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncBotArenaBattleIsReady.challenge_id)
}
inline ::KWMsg::Ident* SyncBotArenaBattleIsReady::_internal_mutable_challenge_id() {
  if (!_internal_has_challenge_id()) {
    clear_challenge_item();
    set_has_challenge_id();
    challenge_item_.challenge_id_ = CreateMaybeMessage< ::KWMsg::Ident >(GetArenaForAllocation());
  }
  return challenge_item_.challenge_id_;
}
inline ::KWMsg::Ident* SyncBotArenaBattleIsReady::mutable_challenge_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncBotArenaBattleIsReady.challenge_id)
  return _internal_mutable_challenge_id();
}

// .KWMsg.Ident replay_id = 7;
inline bool SyncBotArenaBattleIsReady::_internal_has_replay_id() const {
  return challenge_item_case() == kReplayId;
}
inline bool SyncBotArenaBattleIsReady::has_replay_id() const {
  return _internal_has_replay_id();
}
inline void SyncBotArenaBattleIsReady::set_has_replay_id() {
  _oneof_case_[0] = kReplayId;
}
inline ::KWMsg::Ident* SyncBotArenaBattleIsReady::release_replay_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncBotArenaBattleIsReady.replay_id)
  if (_internal_has_replay_id()) {
    clear_has_challenge_item();
      ::KWMsg::Ident* temp = challenge_item_.replay_id_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    challenge_item_.replay_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::Ident& SyncBotArenaBattleIsReady::_internal_replay_id() const {
  return _internal_has_replay_id()
      ? *challenge_item_.replay_id_
      : reinterpret_cast< ::KWMsg::Ident&>(::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncBotArenaBattleIsReady::replay_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleIsReady.replay_id)
  return _internal_replay_id();
}
inline ::KWMsg::Ident* SyncBotArenaBattleIsReady::unsafe_arena_release_replay_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.SyncBotArenaBattleIsReady.replay_id)
  if (_internal_has_replay_id()) {
    clear_has_challenge_item();
    ::KWMsg::Ident* temp = challenge_item_.replay_id_;
    challenge_item_.replay_id_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SyncBotArenaBattleIsReady::unsafe_arena_set_allocated_replay_id(::KWMsg::Ident* replay_id) {
  clear_challenge_item();
  if (replay_id) {
    set_has_replay_id();
    challenge_item_.replay_id_ = replay_id;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncBotArenaBattleIsReady.replay_id)
}
inline ::KWMsg::Ident* SyncBotArenaBattleIsReady::_internal_mutable_replay_id() {
  if (!_internal_has_replay_id()) {
    clear_challenge_item();
    set_has_replay_id();
    challenge_item_.replay_id_ = CreateMaybeMessage< ::KWMsg::Ident >(GetArenaForAllocation());
  }
  return challenge_item_.replay_id_;
}
inline ::KWMsg::Ident* SyncBotArenaBattleIsReady::mutable_replay_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncBotArenaBattleIsReady.replay_id)
  return _internal_mutable_replay_id();
}

// int32 challenge_result = 8;
inline void SyncBotArenaBattleIsReady::clear_challenge_result() {
  challenge_result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncBotArenaBattleIsReady::_internal_challenge_result() const {
  return challenge_result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SyncBotArenaBattleIsReady::challenge_result() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleIsReady.challenge_result)
  return _internal_challenge_result();
}
inline void SyncBotArenaBattleIsReady::_internal_set_challenge_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  challenge_result_ = value;
}
inline void SyncBotArenaBattleIsReady::set_challenge_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_challenge_result(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncBotArenaBattleIsReady.challenge_result)
}

// .KWMsg.PlayerInfo player_info = 9;
inline bool SyncBotArenaBattleIsReady::_internal_has_player_info() const {
  return entity_case() == kPlayerInfo;
}
inline bool SyncBotArenaBattleIsReady::has_player_info() const {
  return _internal_has_player_info();
}
inline void SyncBotArenaBattleIsReady::set_has_player_info() {
  _oneof_case_[1] = kPlayerInfo;
}
inline void SyncBotArenaBattleIsReady::clear_player_info() {
  if (_internal_has_player_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entity_.player_info_;
    }
    clear_has_entity();
  }
}
inline ::KWMsg::PlayerInfo* SyncBotArenaBattleIsReady::release_player_info() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncBotArenaBattleIsReady.player_info)
  if (_internal_has_player_info()) {
    clear_has_entity();
      ::KWMsg::PlayerInfo* temp = entity_.player_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entity_.player_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::PlayerInfo& SyncBotArenaBattleIsReady::_internal_player_info() const {
  return _internal_has_player_info()
      ? *entity_.player_info_
      : reinterpret_cast< ::KWMsg::PlayerInfo&>(::KWMsg::_PlayerInfo_default_instance_);
}
inline const ::KWMsg::PlayerInfo& SyncBotArenaBattleIsReady::player_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleIsReady.player_info)
  return _internal_player_info();
}
inline ::KWMsg::PlayerInfo* SyncBotArenaBattleIsReady::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.SyncBotArenaBattleIsReady.player_info)
  if (_internal_has_player_info()) {
    clear_has_entity();
    ::KWMsg::PlayerInfo* temp = entity_.player_info_;
    entity_.player_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void SyncBotArenaBattleIsReady::unsafe_arena_set_allocated_player_info(::KWMsg::PlayerInfo* player_info) {
  clear_entity();
  if (player_info) {
    set_has_player_info();
    entity_.player_info_ = player_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncBotArenaBattleIsReady.player_info)
}
inline ::KWMsg::PlayerInfo* SyncBotArenaBattleIsReady::_internal_mutable_player_info() {
  if (!_internal_has_player_info()) {
    clear_entity();
    set_has_player_info();
    entity_.player_info_ = CreateMaybeMessage< ::KWMsg::PlayerInfo >(GetArenaForAllocation());
  }
  return entity_.player_info_;
}
inline ::KWMsg::PlayerInfo* SyncBotArenaBattleIsReady::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncBotArenaBattleIsReady.player_info)
  return _internal_mutable_player_info();
}

// bytes robot_id = 10;
inline bool SyncBotArenaBattleIsReady::_internal_has_robot_id() const {
  return entity_case() == kRobotId;
}
inline bool SyncBotArenaBattleIsReady::has_robot_id() const {
  return _internal_has_robot_id();
}
inline void SyncBotArenaBattleIsReady::set_has_robot_id() {
  _oneof_case_[1] = kRobotId;
}
inline void SyncBotArenaBattleIsReady::clear_robot_id() {
  if (_internal_has_robot_id()) {
    entity_.robot_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_entity();
  }
}
inline const std::string& SyncBotArenaBattleIsReady::robot_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleIsReady.robot_id)
  return _internal_robot_id();
}
template <typename ArgT0, typename... ArgT>
inline void SyncBotArenaBattleIsReady::set_robot_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_robot_id()) {
    clear_entity();
    set_has_robot_id();
    entity_.robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  entity_.robot_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.SyncBotArenaBattleIsReady.robot_id)
}
inline std::string* SyncBotArenaBattleIsReady::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncBotArenaBattleIsReady.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& SyncBotArenaBattleIsReady::_internal_robot_id() const {
  if (_internal_has_robot_id()) {
    return entity_.robot_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void SyncBotArenaBattleIsReady::_internal_set_robot_id(const std::string& value) {
  if (!_internal_has_robot_id()) {
    clear_entity();
    set_has_robot_id();
    entity_.robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  entity_.robot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncBotArenaBattleIsReady::_internal_mutable_robot_id() {
  if (!_internal_has_robot_id()) {
    clear_entity();
    set_has_robot_id();
    entity_.robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return entity_.robot_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncBotArenaBattleIsReady::release_robot_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncBotArenaBattleIsReady.robot_id)
  if (_internal_has_robot_id()) {
    clear_has_entity();
    return entity_.robot_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void SyncBotArenaBattleIsReady::set_allocated_robot_id(std::string* robot_id) {
  if (has_entity()) {
    clear_entity();
  }
  if (robot_id != nullptr) {
    set_has_robot_id();
    entity_.robot_id_.UnsafeSetDefault(robot_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(robot_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncBotArenaBattleIsReady.robot_id)
}

inline bool SyncBotArenaBattleIsReady::has_challenge_item() const {
  return challenge_item_case() != CHALLENGE_ITEM_NOT_SET;
}
inline void SyncBotArenaBattleIsReady::clear_has_challenge_item() {
  _oneof_case_[0] = CHALLENGE_ITEM_NOT_SET;
}
inline bool SyncBotArenaBattleIsReady::has_entity() const {
  return entity_case() != ENTITY_NOT_SET;
}
inline void SyncBotArenaBattleIsReady::clear_has_entity() {
  _oneof_case_[1] = ENTITY_NOT_SET;
}
inline SyncBotArenaBattleIsReady::ChallengeItemCase SyncBotArenaBattleIsReady::challenge_item_case() const {
  return SyncBotArenaBattleIsReady::ChallengeItemCase(_oneof_case_[0]);
}
inline SyncBotArenaBattleIsReady::EntityCase SyncBotArenaBattleIsReady::entity_case() const {
  return SyncBotArenaBattleIsReady::EntityCase(_oneof_case_[1]);
}
// -------------------------------------------------------------------

// SyncBotArenaBattleReplayDatas

// .KWMsg.Ident player_id = 1;
inline bool SyncBotArenaBattleReplayDatas::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncBotArenaBattleReplayDatas::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncBotArenaBattleReplayDatas::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncBotArenaBattleReplayDatas::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleReplayDatas.player_id)
  return _internal_player_id();
}
inline void SyncBotArenaBattleReplayDatas::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncBotArenaBattleReplayDatas.player_id)
}
inline ::KWMsg::Ident* SyncBotArenaBattleReplayDatas::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncBotArenaBattleReplayDatas::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncBotArenaBattleReplayDatas.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncBotArenaBattleReplayDatas::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncBotArenaBattleReplayDatas::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncBotArenaBattleReplayDatas.player_id)
  return _internal_mutable_player_id();
}
inline void SyncBotArenaBattleReplayDatas::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncBotArenaBattleReplayDatas.player_id)
}

// .KWMsg.BotArenaReplayItem replay_item = 2;
inline bool SyncBotArenaBattleReplayDatas::_internal_has_replay_item() const {
  return this != internal_default_instance() && replay_item_ != nullptr;
}
inline bool SyncBotArenaBattleReplayDatas::has_replay_item() const {
  return _internal_has_replay_item();
}
inline void SyncBotArenaBattleReplayDatas::clear_replay_item() {
  if (GetArenaForAllocation() == nullptr && replay_item_ != nullptr) {
    delete replay_item_;
  }
  replay_item_ = nullptr;
}
inline const ::KWMsg::BotArenaReplayItem& SyncBotArenaBattleReplayDatas::_internal_replay_item() const {
  const ::KWMsg::BotArenaReplayItem* p = replay_item_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BotArenaReplayItem&>(
      ::KWMsg::_BotArenaReplayItem_default_instance_);
}
inline const ::KWMsg::BotArenaReplayItem& SyncBotArenaBattleReplayDatas::replay_item() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleReplayDatas.replay_item)
  return _internal_replay_item();
}
inline void SyncBotArenaBattleReplayDatas::unsafe_arena_set_allocated_replay_item(
    ::KWMsg::BotArenaReplayItem* replay_item) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_item_);
  }
  replay_item_ = replay_item;
  if (replay_item) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncBotArenaBattleReplayDatas.replay_item)
}
inline ::KWMsg::BotArenaReplayItem* SyncBotArenaBattleReplayDatas::release_replay_item() {
  
  ::KWMsg::BotArenaReplayItem* temp = replay_item_;
  replay_item_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BotArenaReplayItem* SyncBotArenaBattleReplayDatas::unsafe_arena_release_replay_item() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncBotArenaBattleReplayDatas.replay_item)
  
  ::KWMsg::BotArenaReplayItem* temp = replay_item_;
  replay_item_ = nullptr;
  return temp;
}
inline ::KWMsg::BotArenaReplayItem* SyncBotArenaBattleReplayDatas::_internal_mutable_replay_item() {
  
  if (replay_item_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BotArenaReplayItem>(GetArenaForAllocation());
    replay_item_ = p;
  }
  return replay_item_;
}
inline ::KWMsg::BotArenaReplayItem* SyncBotArenaBattleReplayDatas::mutable_replay_item() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncBotArenaBattleReplayDatas.replay_item)
  return _internal_mutable_replay_item();
}
inline void SyncBotArenaBattleReplayDatas::set_allocated_replay_item(::KWMsg::BotArenaReplayItem* replay_item) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete replay_item_;
  }
  if (replay_item) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BotArenaReplayItem>::GetOwningArena(replay_item);
    if (message_arena != submessage_arena) {
      replay_item = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_item, submessage_arena);
    }
    
  } else {
    
  }
  replay_item_ = replay_item;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncBotArenaBattleReplayDatas.replay_item)
}

// bytes msgs = 3;
inline void SyncBotArenaBattleReplayDatas::clear_msgs() {
  msgs_.ClearToEmpty();
}
inline const std::string& SyncBotArenaBattleReplayDatas::msgs() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleReplayDatas.msgs)
  return _internal_msgs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SyncBotArenaBattleReplayDatas::set_msgs(ArgT0&& arg0, ArgT... args) {
 
 msgs_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.SyncBotArenaBattleReplayDatas.msgs)
}
inline std::string* SyncBotArenaBattleReplayDatas::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncBotArenaBattleReplayDatas.msgs)
  return _internal_mutable_msgs();
}
inline const std::string& SyncBotArenaBattleReplayDatas::_internal_msgs() const {
  return msgs_.Get();
}
inline void SyncBotArenaBattleReplayDatas::_internal_set_msgs(const std::string& value) {
  
  msgs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SyncBotArenaBattleReplayDatas::_internal_mutable_msgs() {
  
  return msgs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SyncBotArenaBattleReplayDatas::release_msgs() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncBotArenaBattleReplayDatas.msgs)
  return msgs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SyncBotArenaBattleReplayDatas::set_allocated_msgs(std::string* msgs) {
  if (msgs != nullptr) {
    
  } else {
    
  }
  msgs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msgs,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncBotArenaBattleReplayDatas.msgs)
}

// -------------------------------------------------------------------

// SaveBotArenaBattleReplayDatas

// .KWMsg.Ident player_id = 1;
inline bool SaveBotArenaBattleReplayDatas::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SaveBotArenaBattleReplayDatas::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SaveBotArenaBattleReplayDatas::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SaveBotArenaBattleReplayDatas::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SaveBotArenaBattleReplayDatas.player_id)
  return _internal_player_id();
}
inline void SaveBotArenaBattleReplayDatas::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SaveBotArenaBattleReplayDatas.player_id)
}
inline ::KWMsg::Ident* SaveBotArenaBattleReplayDatas::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SaveBotArenaBattleReplayDatas::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SaveBotArenaBattleReplayDatas.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SaveBotArenaBattleReplayDatas::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SaveBotArenaBattleReplayDatas::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SaveBotArenaBattleReplayDatas.player_id)
  return _internal_mutable_player_id();
}
inline void SaveBotArenaBattleReplayDatas::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SaveBotArenaBattleReplayDatas.player_id)
}

// .KWMsg.Ident replay_id = 2;
inline bool SaveBotArenaBattleReplayDatas::_internal_has_replay_id() const {
  return this != internal_default_instance() && replay_id_ != nullptr;
}
inline bool SaveBotArenaBattleReplayDatas::has_replay_id() const {
  return _internal_has_replay_id();
}
inline const ::KWMsg::Ident& SaveBotArenaBattleReplayDatas::_internal_replay_id() const {
  const ::KWMsg::Ident* p = replay_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SaveBotArenaBattleReplayDatas::replay_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SaveBotArenaBattleReplayDatas.replay_id)
  return _internal_replay_id();
}
inline void SaveBotArenaBattleReplayDatas::unsafe_arena_set_allocated_replay_id(
    ::KWMsg::Ident* replay_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  replay_id_ = replay_id;
  if (replay_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SaveBotArenaBattleReplayDatas.replay_id)
}
inline ::KWMsg::Ident* SaveBotArenaBattleReplayDatas::release_replay_id() {
  
  ::KWMsg::Ident* temp = replay_id_;
  replay_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SaveBotArenaBattleReplayDatas::unsafe_arena_release_replay_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SaveBotArenaBattleReplayDatas.replay_id)
  
  ::KWMsg::Ident* temp = replay_id_;
  replay_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SaveBotArenaBattleReplayDatas::_internal_mutable_replay_id() {
  
  if (replay_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    replay_id_ = p;
  }
  return replay_id_;
}
inline ::KWMsg::Ident* SaveBotArenaBattleReplayDatas::mutable_replay_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SaveBotArenaBattleReplayDatas.replay_id)
  return _internal_mutable_replay_id();
}
inline void SaveBotArenaBattleReplayDatas::set_allocated_replay_id(::KWMsg::Ident* replay_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  if (replay_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id));
    if (message_arena != submessage_arena) {
      replay_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_id, submessage_arena);
    }
    
  } else {
    
  }
  replay_id_ = replay_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SaveBotArenaBattleReplayDatas.replay_id)
}

// bytes msgs = 3;
inline void SaveBotArenaBattleReplayDatas::clear_msgs() {
  msgs_.ClearToEmpty();
}
inline const std::string& SaveBotArenaBattleReplayDatas::msgs() const {
  // @@protoc_insertion_point(field_get:KWMsg.SaveBotArenaBattleReplayDatas.msgs)
  return _internal_msgs();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void SaveBotArenaBattleReplayDatas::set_msgs(ArgT0&& arg0, ArgT... args) {
 
 msgs_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.SaveBotArenaBattleReplayDatas.msgs)
}
inline std::string* SaveBotArenaBattleReplayDatas::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SaveBotArenaBattleReplayDatas.msgs)
  return _internal_mutable_msgs();
}
inline const std::string& SaveBotArenaBattleReplayDatas::_internal_msgs() const {
  return msgs_.Get();
}
inline void SaveBotArenaBattleReplayDatas::_internal_set_msgs(const std::string& value) {
  
  msgs_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* SaveBotArenaBattleReplayDatas::_internal_mutable_msgs() {
  
  return msgs_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* SaveBotArenaBattleReplayDatas::release_msgs() {
  // @@protoc_insertion_point(field_release:KWMsg.SaveBotArenaBattleReplayDatas.msgs)
  return msgs_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void SaveBotArenaBattleReplayDatas::set_allocated_msgs(std::string* msgs) {
  if (msgs != nullptr) {
    
  } else {
    
  }
  msgs_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), msgs,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SaveBotArenaBattleReplayDatas.msgs)
}

// -------------------------------------------------------------------

// DelBotArenaBattleReplayDatas

// .KWMsg.Ident player_id = 1;
inline bool DelBotArenaBattleReplayDatas::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool DelBotArenaBattleReplayDatas::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& DelBotArenaBattleReplayDatas::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& DelBotArenaBattleReplayDatas::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.DelBotArenaBattleReplayDatas.player_id)
  return _internal_player_id();
}
inline void DelBotArenaBattleReplayDatas::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.DelBotArenaBattleReplayDatas.player_id)
}
inline ::KWMsg::Ident* DelBotArenaBattleReplayDatas::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* DelBotArenaBattleReplayDatas::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.DelBotArenaBattleReplayDatas.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* DelBotArenaBattleReplayDatas::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* DelBotArenaBattleReplayDatas::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DelBotArenaBattleReplayDatas.player_id)
  return _internal_mutable_player_id();
}
inline void DelBotArenaBattleReplayDatas::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DelBotArenaBattleReplayDatas.player_id)
}

// .KWMsg.Ident replay_id = 2;
inline bool DelBotArenaBattleReplayDatas::_internal_has_replay_id() const {
  return this != internal_default_instance() && replay_id_ != nullptr;
}
inline bool DelBotArenaBattleReplayDatas::has_replay_id() const {
  return _internal_has_replay_id();
}
inline const ::KWMsg::Ident& DelBotArenaBattleReplayDatas::_internal_replay_id() const {
  const ::KWMsg::Ident* p = replay_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& DelBotArenaBattleReplayDatas::replay_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.DelBotArenaBattleReplayDatas.replay_id)
  return _internal_replay_id();
}
inline void DelBotArenaBattleReplayDatas::unsafe_arena_set_allocated_replay_id(
    ::KWMsg::Ident* replay_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  replay_id_ = replay_id;
  if (replay_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.DelBotArenaBattleReplayDatas.replay_id)
}
inline ::KWMsg::Ident* DelBotArenaBattleReplayDatas::release_replay_id() {
  
  ::KWMsg::Ident* temp = replay_id_;
  replay_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* DelBotArenaBattleReplayDatas::unsafe_arena_release_replay_id() {
  // @@protoc_insertion_point(field_release:KWMsg.DelBotArenaBattleReplayDatas.replay_id)
  
  ::KWMsg::Ident* temp = replay_id_;
  replay_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* DelBotArenaBattleReplayDatas::_internal_mutable_replay_id() {
  
  if (replay_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    replay_id_ = p;
  }
  return replay_id_;
}
inline ::KWMsg::Ident* DelBotArenaBattleReplayDatas::mutable_replay_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DelBotArenaBattleReplayDatas.replay_id)
  return _internal_mutable_replay_id();
}
inline void DelBotArenaBattleReplayDatas::set_allocated_replay_id(::KWMsg::Ident* replay_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  if (replay_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id));
    if (message_arena != submessage_arena) {
      replay_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_id, submessage_arena);
    }
    
  } else {
    
  }
  replay_id_ = replay_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DelBotArenaBattleReplayDatas.replay_id)
}

// -------------------------------------------------------------------

// SyncDefensivePlayerBattleReward

// .KWMsg.Ident player_id = 1;
inline bool SyncDefensivePlayerBattleReward::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncDefensivePlayerBattleReward::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncDefensivePlayerBattleReward::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncDefensivePlayerBattleReward::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncDefensivePlayerBattleReward.player_id)
  return _internal_player_id();
}
inline void SyncDefensivePlayerBattleReward::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncDefensivePlayerBattleReward.player_id)
}
inline ::KWMsg::Ident* SyncDefensivePlayerBattleReward::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncDefensivePlayerBattleReward::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncDefensivePlayerBattleReward.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncDefensivePlayerBattleReward::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncDefensivePlayerBattleReward::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncDefensivePlayerBattleReward.player_id)
  return _internal_mutable_player_id();
}
inline void SyncDefensivePlayerBattleReward::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncDefensivePlayerBattleReward.player_id)
}

// repeated .KWMsg.RewardInfo reward_list = 2;
inline int SyncDefensivePlayerBattleReward::_internal_reward_list_size() const {
  return reward_list_.size();
}
inline int SyncDefensivePlayerBattleReward::reward_list_size() const {
  return _internal_reward_list_size();
}
inline void SyncDefensivePlayerBattleReward::clear_reward_list() {
  reward_list_.Clear();
}
inline ::KWMsg::RewardInfo* SyncDefensivePlayerBattleReward::mutable_reward_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncDefensivePlayerBattleReward.reward_list)
  return reward_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >*
SyncDefensivePlayerBattleReward::mutable_reward_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.SyncDefensivePlayerBattleReward.reward_list)
  return &reward_list_;
}
inline const ::KWMsg::RewardInfo& SyncDefensivePlayerBattleReward::_internal_reward_list(int index) const {
  return reward_list_.Get(index);
}
inline const ::KWMsg::RewardInfo& SyncDefensivePlayerBattleReward::reward_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncDefensivePlayerBattleReward.reward_list)
  return _internal_reward_list(index);
}
inline ::KWMsg::RewardInfo* SyncDefensivePlayerBattleReward::_internal_add_reward_list() {
  return reward_list_.Add();
}
inline ::KWMsg::RewardInfo* SyncDefensivePlayerBattleReward::add_reward_list() {
  // @@protoc_insertion_point(field_add:KWMsg.SyncDefensivePlayerBattleReward.reward_list)
  return _internal_add_reward_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::RewardInfo >&
SyncDefensivePlayerBattleReward::reward_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.SyncDefensivePlayerBattleReward.reward_list)
  return reward_list_;
}

// -------------------------------------------------------------------

// SyncBotArenaBattleSettleData

// .KWMsg.Ident player_id = 1;
inline bool SyncBotArenaBattleSettleData::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool SyncBotArenaBattleSettleData::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& SyncBotArenaBattleSettleData::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncBotArenaBattleSettleData::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleSettleData.player_id)
  return _internal_player_id();
}
inline void SyncBotArenaBattleSettleData::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncBotArenaBattleSettleData.player_id)
}
inline ::KWMsg::Ident* SyncBotArenaBattleSettleData::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncBotArenaBattleSettleData::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncBotArenaBattleSettleData.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncBotArenaBattleSettleData::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* SyncBotArenaBattleSettleData::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncBotArenaBattleSettleData.player_id)
  return _internal_mutable_player_id();
}
inline void SyncBotArenaBattleSettleData::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncBotArenaBattleSettleData.player_id)
}

// .KWMsg.Ident challenge_id = 2;
inline bool SyncBotArenaBattleSettleData::_internal_has_challenge_id() const {
  return this != internal_default_instance() && challenge_id_ != nullptr;
}
inline bool SyncBotArenaBattleSettleData::has_challenge_id() const {
  return _internal_has_challenge_id();
}
inline const ::KWMsg::Ident& SyncBotArenaBattleSettleData::_internal_challenge_id() const {
  const ::KWMsg::Ident* p = challenge_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncBotArenaBattleSettleData::challenge_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleSettleData.challenge_id)
  return _internal_challenge_id();
}
inline void SyncBotArenaBattleSettleData::unsafe_arena_set_allocated_challenge_id(
    ::KWMsg::Ident* challenge_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(challenge_id_);
  }
  challenge_id_ = challenge_id;
  if (challenge_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncBotArenaBattleSettleData.challenge_id)
}
inline ::KWMsg::Ident* SyncBotArenaBattleSettleData::release_challenge_id() {
  
  ::KWMsg::Ident* temp = challenge_id_;
  challenge_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncBotArenaBattleSettleData::unsafe_arena_release_challenge_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncBotArenaBattleSettleData.challenge_id)
  
  ::KWMsg::Ident* temp = challenge_id_;
  challenge_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncBotArenaBattleSettleData::_internal_mutable_challenge_id() {
  
  if (challenge_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    challenge_id_ = p;
  }
  return challenge_id_;
}
inline ::KWMsg::Ident* SyncBotArenaBattleSettleData::mutable_challenge_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncBotArenaBattleSettleData.challenge_id)
  return _internal_mutable_challenge_id();
}
inline void SyncBotArenaBattleSettleData::set_allocated_challenge_id(::KWMsg::Ident* challenge_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(challenge_id_);
  }
  if (challenge_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(challenge_id));
    if (message_arena != submessage_arena) {
      challenge_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, challenge_id, submessage_arena);
    }
    
  } else {
    
  }
  challenge_id_ = challenge_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncBotArenaBattleSettleData.challenge_id)
}

// .KWMsg.Ident replay_id = 3;
inline bool SyncBotArenaBattleSettleData::_internal_has_replay_id() const {
  return this != internal_default_instance() && replay_id_ != nullptr;
}
inline bool SyncBotArenaBattleSettleData::has_replay_id() const {
  return _internal_has_replay_id();
}
inline const ::KWMsg::Ident& SyncBotArenaBattleSettleData::_internal_replay_id() const {
  const ::KWMsg::Ident* p = replay_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& SyncBotArenaBattleSettleData::replay_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleSettleData.replay_id)
  return _internal_replay_id();
}
inline void SyncBotArenaBattleSettleData::unsafe_arena_set_allocated_replay_id(
    ::KWMsg::Ident* replay_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  replay_id_ = replay_id;
  if (replay_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.SyncBotArenaBattleSettleData.replay_id)
}
inline ::KWMsg::Ident* SyncBotArenaBattleSettleData::release_replay_id() {
  
  ::KWMsg::Ident* temp = replay_id_;
  replay_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* SyncBotArenaBattleSettleData::unsafe_arena_release_replay_id() {
  // @@protoc_insertion_point(field_release:KWMsg.SyncBotArenaBattleSettleData.replay_id)
  
  ::KWMsg::Ident* temp = replay_id_;
  replay_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* SyncBotArenaBattleSettleData::_internal_mutable_replay_id() {
  
  if (replay_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    replay_id_ = p;
  }
  return replay_id_;
}
inline ::KWMsg::Ident* SyncBotArenaBattleSettleData::mutable_replay_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.SyncBotArenaBattleSettleData.replay_id)
  return _internal_mutable_replay_id();
}
inline void SyncBotArenaBattleSettleData::set_allocated_replay_id(::KWMsg::Ident* replay_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  if (replay_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id));
    if (message_arena != submessage_arena) {
      replay_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_id, submessage_arena);
    }
    
  } else {
    
  }
  replay_id_ = replay_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.SyncBotArenaBattleSettleData.replay_id)
}

// bool is_win = 4;
inline void SyncBotArenaBattleSettleData::clear_is_win() {
  is_win_ = false;
}
inline bool SyncBotArenaBattleSettleData::_internal_is_win() const {
  return is_win_;
}
inline bool SyncBotArenaBattleSettleData::is_win() const {
  // @@protoc_insertion_point(field_get:KWMsg.SyncBotArenaBattleSettleData.is_win)
  return _internal_is_win();
}
inline void SyncBotArenaBattleSettleData::_internal_set_is_win(bool value) {
  
  is_win_ = value;
}
inline void SyncBotArenaBattleSettleData::set_is_win(bool value) {
  _internal_set_is_win(value);
  // @@protoc_insertion_point(field_set:KWMsg.SyncBotArenaBattleSettleData.is_win)
}

// -------------------------------------------------------------------

// ReqClickBotarenaPromptForm

// .KWMsg.Ident player_id = 1;
inline bool ReqClickBotarenaPromptForm::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqClickBotarenaPromptForm::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqClickBotarenaPromptForm::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqClickBotarenaPromptForm::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqClickBotarenaPromptForm.player_id)
  return _internal_player_id();
}
inline void ReqClickBotarenaPromptForm::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqClickBotarenaPromptForm.player_id)
}
inline ::KWMsg::Ident* ReqClickBotarenaPromptForm::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqClickBotarenaPromptForm::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqClickBotarenaPromptForm.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqClickBotarenaPromptForm::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqClickBotarenaPromptForm::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqClickBotarenaPromptForm.player_id)
  return _internal_mutable_player_id();
}
inline void ReqClickBotarenaPromptForm::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqClickBotarenaPromptForm.player_id)
}

// .KWMsg.BotarenaPromptType type = 2;
inline void ReqClickBotarenaPromptForm::clear_type() {
  type_ = 0;
}
inline ::KWMsg::BotarenaPromptType ReqClickBotarenaPromptForm::_internal_type() const {
  return static_cast< ::KWMsg::BotarenaPromptType >(type_);
}
inline ::KWMsg::BotarenaPromptType ReqClickBotarenaPromptForm::type() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqClickBotarenaPromptForm.type)
  return _internal_type();
}
inline void ReqClickBotarenaPromptForm::_internal_set_type(::KWMsg::BotarenaPromptType value) {
  
  type_ = value;
}
inline void ReqClickBotarenaPromptForm::set_type(::KWMsg::BotarenaPromptType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqClickBotarenaPromptForm.type)
}

// -------------------------------------------------------------------

// AckClickBotarenaPromptForm

// .KWMsg.EGameEventCode event_code = 1;
inline void AckClickBotarenaPromptForm::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckClickBotarenaPromptForm::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckClickBotarenaPromptForm::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckClickBotarenaPromptForm.event_code)
  return _internal_event_code();
}
inline void AckClickBotarenaPromptForm::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckClickBotarenaPromptForm::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckClickBotarenaPromptForm.event_code)
}

// -------------------------------------------------------------------

// HonorPointRankingItem

// int32 rank = 1;
inline void HonorPointRankingItem::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HonorPointRankingItem::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 HonorPointRankingItem::rank() const {
  // @@protoc_insertion_point(field_get:KWMsg.HonorPointRankingItem.rank)
  return _internal_rank();
}
inline void HonorPointRankingItem::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void HonorPointRankingItem::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:KWMsg.HonorPointRankingItem.rank)
}

// .KWMsg.PlayerInfo player_info = 2;
inline bool HonorPointRankingItem::_internal_has_player_info() const {
  return this != internal_default_instance() && player_info_ != nullptr;
}
inline bool HonorPointRankingItem::has_player_info() const {
  return _internal_has_player_info();
}
inline void HonorPointRankingItem::clear_player_info() {
  if (GetArenaForAllocation() == nullptr && player_info_ != nullptr) {
    delete player_info_;
  }
  player_info_ = nullptr;
}
inline const ::KWMsg::PlayerInfo& HonorPointRankingItem::_internal_player_info() const {
  const ::KWMsg::PlayerInfo* p = player_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::PlayerInfo&>(
      ::KWMsg::_PlayerInfo_default_instance_);
}
inline const ::KWMsg::PlayerInfo& HonorPointRankingItem::player_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.HonorPointRankingItem.player_info)
  return _internal_player_info();
}
inline void HonorPointRankingItem::unsafe_arena_set_allocated_player_info(
    ::KWMsg::PlayerInfo* player_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info_);
  }
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.HonorPointRankingItem.player_info)
}
inline ::KWMsg::PlayerInfo* HonorPointRankingItem::release_player_info() {
  
  ::KWMsg::PlayerInfo* temp = player_info_;
  player_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::PlayerInfo* HonorPointRankingItem::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_release:KWMsg.HonorPointRankingItem.player_info)
  
  ::KWMsg::PlayerInfo* temp = player_info_;
  player_info_ = nullptr;
  return temp;
}
inline ::KWMsg::PlayerInfo* HonorPointRankingItem::_internal_mutable_player_info() {
  
  if (player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::PlayerInfo>(GetArenaForAllocation());
    player_info_ = p;
  }
  return player_info_;
}
inline ::KWMsg::PlayerInfo* HonorPointRankingItem::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.HonorPointRankingItem.player_info)
  return _internal_mutable_player_info();
}
inline void HonorPointRankingItem::set_allocated_player_info(::KWMsg::PlayerInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_info_;
  }
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::PlayerInfo>::GetOwningArena(player_info);
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    
  } else {
    
  }
  player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.HonorPointRankingItem.player_info)
}

// -------------------------------------------------------------------

// ReqGetPlayerHonorPointRanking

// .KWMsg.Ident player_id = 1;
inline bool ReqGetPlayerHonorPointRanking::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqGetPlayerHonorPointRanking::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqGetPlayerHonorPointRanking::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetPlayerHonorPointRanking::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetPlayerHonorPointRanking.player_id)
  return _internal_player_id();
}
inline void ReqGetPlayerHonorPointRanking::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetPlayerHonorPointRanking.player_id)
}
inline ::KWMsg::Ident* ReqGetPlayerHonorPointRanking::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetPlayerHonorPointRanking::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetPlayerHonorPointRanking.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetPlayerHonorPointRanking::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqGetPlayerHonorPointRanking::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetPlayerHonorPointRanking.player_id)
  return _internal_mutable_player_id();
}
inline void ReqGetPlayerHonorPointRanking::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetPlayerHonorPointRanking.player_id)
}

// -------------------------------------------------------------------

// AckGetPlayerHonorPointRanking

// .KWMsg.EGameEventCode event_code = 1;
inline void AckGetPlayerHonorPointRanking::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckGetPlayerHonorPointRanking::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckGetPlayerHonorPointRanking::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPlayerHonorPointRanking.event_code)
  return _internal_event_code();
}
inline void AckGetPlayerHonorPointRanking::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckGetPlayerHonorPointRanking::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetPlayerHonorPointRanking.event_code)
}

// .KWMsg.Ident player_id = 2;
inline bool AckGetPlayerHonorPointRanking::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckGetPlayerHonorPointRanking::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckGetPlayerHonorPointRanking::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckGetPlayerHonorPointRanking::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPlayerHonorPointRanking.player_id)
  return _internal_player_id();
}
inline void AckGetPlayerHonorPointRanking::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckGetPlayerHonorPointRanking.player_id)
}
inline ::KWMsg::Ident* AckGetPlayerHonorPointRanking::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckGetPlayerHonorPointRanking::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckGetPlayerHonorPointRanking.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckGetPlayerHonorPointRanking::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckGetPlayerHonorPointRanking::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetPlayerHonorPointRanking.player_id)
  return _internal_mutable_player_id();
}
inline void AckGetPlayerHonorPointRanking::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckGetPlayerHonorPointRanking.player_id)
}

// repeated .KWMsg.HonorPointRankingItem ranking = 3;
inline int AckGetPlayerHonorPointRanking::_internal_ranking_size() const {
  return ranking_.size();
}
inline int AckGetPlayerHonorPointRanking::ranking_size() const {
  return _internal_ranking_size();
}
inline void AckGetPlayerHonorPointRanking::clear_ranking() {
  ranking_.Clear();
}
inline ::KWMsg::HonorPointRankingItem* AckGetPlayerHonorPointRanking::mutable_ranking(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetPlayerHonorPointRanking.ranking)
  return ranking_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::HonorPointRankingItem >*
AckGetPlayerHonorPointRanking::mutable_ranking() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckGetPlayerHonorPointRanking.ranking)
  return &ranking_;
}
inline const ::KWMsg::HonorPointRankingItem& AckGetPlayerHonorPointRanking::_internal_ranking(int index) const {
  return ranking_.Get(index);
}
inline const ::KWMsg::HonorPointRankingItem& AckGetPlayerHonorPointRanking::ranking(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPlayerHonorPointRanking.ranking)
  return _internal_ranking(index);
}
inline ::KWMsg::HonorPointRankingItem* AckGetPlayerHonorPointRanking::_internal_add_ranking() {
  return ranking_.Add();
}
inline ::KWMsg::HonorPointRankingItem* AckGetPlayerHonorPointRanking::add_ranking() {
  // @@protoc_insertion_point(field_add:KWMsg.AckGetPlayerHonorPointRanking.ranking)
  return _internal_add_ranking();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::HonorPointRankingItem >&
AckGetPlayerHonorPointRanking::ranking() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckGetPlayerHonorPointRanking.ranking)
  return ranking_;
}

// .KWMsg.HonorPointRankingItem cur_rank = 4;
inline bool AckGetPlayerHonorPointRanking::_internal_has_cur_rank() const {
  return this != internal_default_instance() && cur_rank_ != nullptr;
}
inline bool AckGetPlayerHonorPointRanking::has_cur_rank() const {
  return _internal_has_cur_rank();
}
inline void AckGetPlayerHonorPointRanking::clear_cur_rank() {
  if (GetArenaForAllocation() == nullptr && cur_rank_ != nullptr) {
    delete cur_rank_;
  }
  cur_rank_ = nullptr;
}
inline const ::KWMsg::HonorPointRankingItem& AckGetPlayerHonorPointRanking::_internal_cur_rank() const {
  const ::KWMsg::HonorPointRankingItem* p = cur_rank_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::HonorPointRankingItem&>(
      ::KWMsg::_HonorPointRankingItem_default_instance_);
}
inline const ::KWMsg::HonorPointRankingItem& AckGetPlayerHonorPointRanking::cur_rank() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPlayerHonorPointRanking.cur_rank)
  return _internal_cur_rank();
}
inline void AckGetPlayerHonorPointRanking::unsafe_arena_set_allocated_cur_rank(
    ::KWMsg::HonorPointRankingItem* cur_rank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_rank_);
  }
  cur_rank_ = cur_rank;
  if (cur_rank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckGetPlayerHonorPointRanking.cur_rank)
}
inline ::KWMsg::HonorPointRankingItem* AckGetPlayerHonorPointRanking::release_cur_rank() {
  
  ::KWMsg::HonorPointRankingItem* temp = cur_rank_;
  cur_rank_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::HonorPointRankingItem* AckGetPlayerHonorPointRanking::unsafe_arena_release_cur_rank() {
  // @@protoc_insertion_point(field_release:KWMsg.AckGetPlayerHonorPointRanking.cur_rank)
  
  ::KWMsg::HonorPointRankingItem* temp = cur_rank_;
  cur_rank_ = nullptr;
  return temp;
}
inline ::KWMsg::HonorPointRankingItem* AckGetPlayerHonorPointRanking::_internal_mutable_cur_rank() {
  
  if (cur_rank_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::HonorPointRankingItem>(GetArenaForAllocation());
    cur_rank_ = p;
  }
  return cur_rank_;
}
inline ::KWMsg::HonorPointRankingItem* AckGetPlayerHonorPointRanking::mutable_cur_rank() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetPlayerHonorPointRanking.cur_rank)
  return _internal_mutable_cur_rank();
}
inline void AckGetPlayerHonorPointRanking::set_allocated_cur_rank(::KWMsg::HonorPointRankingItem* cur_rank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cur_rank_;
  }
  if (cur_rank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::HonorPointRankingItem>::GetOwningArena(cur_rank);
    if (message_arena != submessage_arena) {
      cur_rank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_rank, submessage_arena);
    }
    
  } else {
    
  }
  cur_rank_ = cur_rank;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckGetPlayerHonorPointRanking.cur_rank)
}

// -------------------------------------------------------------------

// ReqGetBotArenaMainPageData

// .KWMsg.Ident player_id = 1;
inline bool ReqGetBotArenaMainPageData::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqGetBotArenaMainPageData::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqGetBotArenaMainPageData::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetBotArenaMainPageData::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetBotArenaMainPageData.player_id)
  return _internal_player_id();
}
inline void ReqGetBotArenaMainPageData::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetBotArenaMainPageData.player_id)
}
inline ::KWMsg::Ident* ReqGetBotArenaMainPageData::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetBotArenaMainPageData::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetBotArenaMainPageData.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetBotArenaMainPageData::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqGetBotArenaMainPageData::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetBotArenaMainPageData.player_id)
  return _internal_mutable_player_id();
}
inline void ReqGetBotArenaMainPageData::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetBotArenaMainPageData.player_id)
}

// -------------------------------------------------------------------

// AckGetBotArenaMainPageData

// .KWMsg.EGameEventCode event_code = 1;
inline void AckGetBotArenaMainPageData::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckGetBotArenaMainPageData::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckGetBotArenaMainPageData::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaMainPageData.event_code)
  return _internal_event_code();
}
inline void AckGetBotArenaMainPageData::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckGetBotArenaMainPageData::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetBotArenaMainPageData.event_code)
}

// .KWMsg.Ident player_id = 2;
inline bool AckGetBotArenaMainPageData::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckGetBotArenaMainPageData::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckGetBotArenaMainPageData::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckGetBotArenaMainPageData::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaMainPageData.player_id)
  return _internal_player_id();
}
inline void AckGetBotArenaMainPageData::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckGetBotArenaMainPageData.player_id)
}
inline ::KWMsg::Ident* AckGetBotArenaMainPageData::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckGetBotArenaMainPageData::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckGetBotArenaMainPageData.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckGetBotArenaMainPageData::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckGetBotArenaMainPageData::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetBotArenaMainPageData.player_id)
  return _internal_mutable_player_id();
}
inline void AckGetBotArenaMainPageData::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckGetBotArenaMainPageData.player_id)
}

// int32 rank = 3;
inline void AckGetBotArenaMainPageData::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::rank() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaMainPageData.rank)
  return _internal_rank();
}
inline void AckGetBotArenaMainPageData::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void AckGetBotArenaMainPageData::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetBotArenaMainPageData.rank)
}

// int32 stage = 4;
inline void AckGetBotArenaMainPageData::clear_stage() {
  stage_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::_internal_stage() const {
  return stage_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::stage() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaMainPageData.stage)
  return _internal_stage();
}
inline void AckGetBotArenaMainPageData::_internal_set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_ = value;
}
inline void AckGetBotArenaMainPageData::set_stage(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetBotArenaMainPageData.stage)
}

// int32 session = 5;
inline void AckGetBotArenaMainPageData::clear_session() {
  session_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::_internal_session() const {
  return session_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::session() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaMainPageData.session)
  return _internal_session();
}
inline void AckGetBotArenaMainPageData::_internal_set_session(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_ = value;
}
inline void AckGetBotArenaMainPageData::set_session(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetBotArenaMainPageData.session)
}

// .KWMsg.BotarenaPromptType prompt_type = 6;
inline void AckGetBotArenaMainPageData::clear_prompt_type() {
  prompt_type_ = 0;
}
inline ::KWMsg::BotarenaPromptType AckGetBotArenaMainPageData::_internal_prompt_type() const {
  return static_cast< ::KWMsg::BotarenaPromptType >(prompt_type_);
}
inline ::KWMsg::BotarenaPromptType AckGetBotArenaMainPageData::prompt_type() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaMainPageData.prompt_type)
  return _internal_prompt_type();
}
inline void AckGetBotArenaMainPageData::_internal_set_prompt_type(::KWMsg::BotarenaPromptType value) {
  
  prompt_type_ = value;
}
inline void AckGetBotArenaMainPageData::set_prompt_type(::KWMsg::BotarenaPromptType value) {
  _internal_set_prompt_type(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetBotArenaMainPageData.prompt_type)
}

// bytes pre_botarena_grade_id = 7;
inline void AckGetBotArenaMainPageData::clear_pre_botarena_grade_id() {
  pre_botarena_grade_id_.ClearToEmpty();
}
inline const std::string& AckGetBotArenaMainPageData::pre_botarena_grade_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaMainPageData.pre_botarena_grade_id)
  return _internal_pre_botarena_grade_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AckGetBotArenaMainPageData::set_pre_botarena_grade_id(ArgT0&& arg0, ArgT... args) {
 
 pre_botarena_grade_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AckGetBotArenaMainPageData.pre_botarena_grade_id)
}
inline std::string* AckGetBotArenaMainPageData::mutable_pre_botarena_grade_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetBotArenaMainPageData.pre_botarena_grade_id)
  return _internal_mutable_pre_botarena_grade_id();
}
inline const std::string& AckGetBotArenaMainPageData::_internal_pre_botarena_grade_id() const {
  return pre_botarena_grade_id_.Get();
}
inline void AckGetBotArenaMainPageData::_internal_set_pre_botarena_grade_id(const std::string& value) {
  
  pre_botarena_grade_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AckGetBotArenaMainPageData::_internal_mutable_pre_botarena_grade_id() {
  
  return pre_botarena_grade_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AckGetBotArenaMainPageData::release_pre_botarena_grade_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckGetBotArenaMainPageData.pre_botarena_grade_id)
  return pre_botarena_grade_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AckGetBotArenaMainPageData::set_allocated_pre_botarena_grade_id(std::string* pre_botarena_grade_id) {
  if (pre_botarena_grade_id != nullptr) {
    
  } else {
    
  }
  pre_botarena_grade_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), pre_botarena_grade_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckGetBotArenaMainPageData.pre_botarena_grade_id)
}

// int64 pre_strategy_point = 8;
inline void AckGetBotArenaMainPageData::clear_pre_strategy_point() {
  pre_strategy_point_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AckGetBotArenaMainPageData::_internal_pre_strategy_point() const {
  return pre_strategy_point_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AckGetBotArenaMainPageData::pre_strategy_point() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaMainPageData.pre_strategy_point)
  return _internal_pre_strategy_point();
}
inline void AckGetBotArenaMainPageData::_internal_set_pre_strategy_point(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  pre_strategy_point_ = value;
}
inline void AckGetBotArenaMainPageData::set_pre_strategy_point(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_pre_strategy_point(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetBotArenaMainPageData.pre_strategy_point)
}

// int32 stage_begin_ts = 9;
inline void AckGetBotArenaMainPageData::clear_stage_begin_ts() {
  stage_begin_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::_internal_stage_begin_ts() const {
  return stage_begin_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::stage_begin_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaMainPageData.stage_begin_ts)
  return _internal_stage_begin_ts();
}
inline void AckGetBotArenaMainPageData::_internal_set_stage_begin_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_begin_ts_ = value;
}
inline void AckGetBotArenaMainPageData::set_stage_begin_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage_begin_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetBotArenaMainPageData.stage_begin_ts)
}

// int32 stage_end_ts = 10;
inline void AckGetBotArenaMainPageData::clear_stage_end_ts() {
  stage_end_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::_internal_stage_end_ts() const {
  return stage_end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::stage_end_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaMainPageData.stage_end_ts)
  return _internal_stage_end_ts();
}
inline void AckGetBotArenaMainPageData::_internal_set_stage_end_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_end_ts_ = value;
}
inline void AckGetBotArenaMainPageData::set_stage_end_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage_end_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetBotArenaMainPageData.stage_end_ts)
}

// int32 stage_settle_ts = 11;
inline void AckGetBotArenaMainPageData::clear_stage_settle_ts() {
  stage_settle_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::_internal_stage_settle_ts() const {
  return stage_settle_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::stage_settle_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaMainPageData.stage_settle_ts)
  return _internal_stage_settle_ts();
}
inline void AckGetBotArenaMainPageData::_internal_set_stage_settle_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  stage_settle_ts_ = value;
}
inline void AckGetBotArenaMainPageData::set_stage_settle_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_stage_settle_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetBotArenaMainPageData.stage_settle_ts)
}

// int32 session_begin_ts = 12;
inline void AckGetBotArenaMainPageData::clear_session_begin_ts() {
  session_begin_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::_internal_session_begin_ts() const {
  return session_begin_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::session_begin_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaMainPageData.session_begin_ts)
  return _internal_session_begin_ts();
}
inline void AckGetBotArenaMainPageData::_internal_set_session_begin_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_begin_ts_ = value;
}
inline void AckGetBotArenaMainPageData::set_session_begin_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session_begin_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetBotArenaMainPageData.session_begin_ts)
}

// int32 session_end_ts = 13;
inline void AckGetBotArenaMainPageData::clear_session_end_ts() {
  session_end_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::_internal_session_end_ts() const {
  return session_end_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::session_end_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaMainPageData.session_end_ts)
  return _internal_session_end_ts();
}
inline void AckGetBotArenaMainPageData::_internal_set_session_end_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_end_ts_ = value;
}
inline void AckGetBotArenaMainPageData::set_session_end_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session_end_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetBotArenaMainPageData.session_end_ts)
}

// int32 session_settle_ts = 14;
inline void AckGetBotArenaMainPageData::clear_session_settle_ts() {
  session_settle_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::_internal_session_settle_ts() const {
  return session_settle_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AckGetBotArenaMainPageData::session_settle_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaMainPageData.session_settle_ts)
  return _internal_session_settle_ts();
}
inline void AckGetBotArenaMainPageData::_internal_set_session_settle_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  session_settle_ts_ = value;
}
inline void AckGetBotArenaMainPageData::set_session_settle_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_session_settle_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetBotArenaMainPageData.session_settle_ts)
}

// -------------------------------------------------------------------

// StrategyPointRankingItem

// int32 rank = 1;
inline void StrategyPointRankingItem::clear_rank() {
  rank_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrategyPointRankingItem::_internal_rank() const {
  return rank_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 StrategyPointRankingItem::rank() const {
  // @@protoc_insertion_point(field_get:KWMsg.StrategyPointRankingItem.rank)
  return _internal_rank();
}
inline void StrategyPointRankingItem::_internal_set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rank_ = value;
}
inline void StrategyPointRankingItem::set_rank(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_rank(value);
  // @@protoc_insertion_point(field_set:KWMsg.StrategyPointRankingItem.rank)
}

// .KWMsg.PlayerInfo player_info = 2;
inline bool StrategyPointRankingItem::_internal_has_player_info() const {
  return this != internal_default_instance() && player_info_ != nullptr;
}
inline bool StrategyPointRankingItem::has_player_info() const {
  return _internal_has_player_info();
}
inline void StrategyPointRankingItem::clear_player_info() {
  if (GetArenaForAllocation() == nullptr && player_info_ != nullptr) {
    delete player_info_;
  }
  player_info_ = nullptr;
}
inline const ::KWMsg::PlayerInfo& StrategyPointRankingItem::_internal_player_info() const {
  const ::KWMsg::PlayerInfo* p = player_info_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::PlayerInfo&>(
      ::KWMsg::_PlayerInfo_default_instance_);
}
inline const ::KWMsg::PlayerInfo& StrategyPointRankingItem::player_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.StrategyPointRankingItem.player_info)
  return _internal_player_info();
}
inline void StrategyPointRankingItem::unsafe_arena_set_allocated_player_info(
    ::KWMsg::PlayerInfo* player_info) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_info_);
  }
  player_info_ = player_info;
  if (player_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.StrategyPointRankingItem.player_info)
}
inline ::KWMsg::PlayerInfo* StrategyPointRankingItem::release_player_info() {
  
  ::KWMsg::PlayerInfo* temp = player_info_;
  player_info_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::PlayerInfo* StrategyPointRankingItem::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_release:KWMsg.StrategyPointRankingItem.player_info)
  
  ::KWMsg::PlayerInfo* temp = player_info_;
  player_info_ = nullptr;
  return temp;
}
inline ::KWMsg::PlayerInfo* StrategyPointRankingItem::_internal_mutable_player_info() {
  
  if (player_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::PlayerInfo>(GetArenaForAllocation());
    player_info_ = p;
  }
  return player_info_;
}
inline ::KWMsg::PlayerInfo* StrategyPointRankingItem::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.StrategyPointRankingItem.player_info)
  return _internal_mutable_player_info();
}
inline void StrategyPointRankingItem::set_allocated_player_info(::KWMsg::PlayerInfo* player_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete player_info_;
  }
  if (player_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::PlayerInfo>::GetOwningArena(player_info);
    if (message_arena != submessage_arena) {
      player_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_info, submessage_arena);
    }
    
  } else {
    
  }
  player_info_ = player_info;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.StrategyPointRankingItem.player_info)
}

// -------------------------------------------------------------------

// ReqGetPlayerStrategyPointRanking

// .KWMsg.Ident player_id = 1;
inline bool ReqGetPlayerStrategyPointRanking::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqGetPlayerStrategyPointRanking::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqGetPlayerStrategyPointRanking::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetPlayerStrategyPointRanking::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetPlayerStrategyPointRanking.player_id)
  return _internal_player_id();
}
inline void ReqGetPlayerStrategyPointRanking::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetPlayerStrategyPointRanking.player_id)
}
inline ::KWMsg::Ident* ReqGetPlayerStrategyPointRanking::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetPlayerStrategyPointRanking::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetPlayerStrategyPointRanking.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetPlayerStrategyPointRanking::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqGetPlayerStrategyPointRanking::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetPlayerStrategyPointRanking.player_id)
  return _internal_mutable_player_id();
}
inline void ReqGetPlayerStrategyPointRanking::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetPlayerStrategyPointRanking.player_id)
}

// -------------------------------------------------------------------

// AckGetPlayerStrategyPointRanking

// .KWMsg.EGameEventCode event_code = 1;
inline void AckGetPlayerStrategyPointRanking::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckGetPlayerStrategyPointRanking::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckGetPlayerStrategyPointRanking::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPlayerStrategyPointRanking.event_code)
  return _internal_event_code();
}
inline void AckGetPlayerStrategyPointRanking::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckGetPlayerStrategyPointRanking::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetPlayerStrategyPointRanking.event_code)
}

// .KWMsg.Ident player_id = 2;
inline bool AckGetPlayerStrategyPointRanking::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckGetPlayerStrategyPointRanking::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckGetPlayerStrategyPointRanking::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckGetPlayerStrategyPointRanking::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPlayerStrategyPointRanking.player_id)
  return _internal_player_id();
}
inline void AckGetPlayerStrategyPointRanking::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckGetPlayerStrategyPointRanking.player_id)
}
inline ::KWMsg::Ident* AckGetPlayerStrategyPointRanking::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckGetPlayerStrategyPointRanking::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckGetPlayerStrategyPointRanking.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckGetPlayerStrategyPointRanking::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckGetPlayerStrategyPointRanking::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetPlayerStrategyPointRanking.player_id)
  return _internal_mutable_player_id();
}
inline void AckGetPlayerStrategyPointRanking::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckGetPlayerStrategyPointRanking.player_id)
}

// repeated .KWMsg.StrategyPointRankingItem ranking = 3;
inline int AckGetPlayerStrategyPointRanking::_internal_ranking_size() const {
  return ranking_.size();
}
inline int AckGetPlayerStrategyPointRanking::ranking_size() const {
  return _internal_ranking_size();
}
inline void AckGetPlayerStrategyPointRanking::clear_ranking() {
  ranking_.Clear();
}
inline ::KWMsg::StrategyPointRankingItem* AckGetPlayerStrategyPointRanking::mutable_ranking(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetPlayerStrategyPointRanking.ranking)
  return ranking_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::StrategyPointRankingItem >*
AckGetPlayerStrategyPointRanking::mutable_ranking() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckGetPlayerStrategyPointRanking.ranking)
  return &ranking_;
}
inline const ::KWMsg::StrategyPointRankingItem& AckGetPlayerStrategyPointRanking::_internal_ranking(int index) const {
  return ranking_.Get(index);
}
inline const ::KWMsg::StrategyPointRankingItem& AckGetPlayerStrategyPointRanking::ranking(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPlayerStrategyPointRanking.ranking)
  return _internal_ranking(index);
}
inline ::KWMsg::StrategyPointRankingItem* AckGetPlayerStrategyPointRanking::_internal_add_ranking() {
  return ranking_.Add();
}
inline ::KWMsg::StrategyPointRankingItem* AckGetPlayerStrategyPointRanking::add_ranking() {
  // @@protoc_insertion_point(field_add:KWMsg.AckGetPlayerStrategyPointRanking.ranking)
  return _internal_add_ranking();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::StrategyPointRankingItem >&
AckGetPlayerStrategyPointRanking::ranking() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckGetPlayerStrategyPointRanking.ranking)
  return ranking_;
}

// .KWMsg.StrategyPointRankingItem cur_rank = 4;
inline bool AckGetPlayerStrategyPointRanking::_internal_has_cur_rank() const {
  return this != internal_default_instance() && cur_rank_ != nullptr;
}
inline bool AckGetPlayerStrategyPointRanking::has_cur_rank() const {
  return _internal_has_cur_rank();
}
inline void AckGetPlayerStrategyPointRanking::clear_cur_rank() {
  if (GetArenaForAllocation() == nullptr && cur_rank_ != nullptr) {
    delete cur_rank_;
  }
  cur_rank_ = nullptr;
}
inline const ::KWMsg::StrategyPointRankingItem& AckGetPlayerStrategyPointRanking::_internal_cur_rank() const {
  const ::KWMsg::StrategyPointRankingItem* p = cur_rank_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::StrategyPointRankingItem&>(
      ::KWMsg::_StrategyPointRankingItem_default_instance_);
}
inline const ::KWMsg::StrategyPointRankingItem& AckGetPlayerStrategyPointRanking::cur_rank() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPlayerStrategyPointRanking.cur_rank)
  return _internal_cur_rank();
}
inline void AckGetPlayerStrategyPointRanking::unsafe_arena_set_allocated_cur_rank(
    ::KWMsg::StrategyPointRankingItem* cur_rank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cur_rank_);
  }
  cur_rank_ = cur_rank;
  if (cur_rank) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckGetPlayerStrategyPointRanking.cur_rank)
}
inline ::KWMsg::StrategyPointRankingItem* AckGetPlayerStrategyPointRanking::release_cur_rank() {
  
  ::KWMsg::StrategyPointRankingItem* temp = cur_rank_;
  cur_rank_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::StrategyPointRankingItem* AckGetPlayerStrategyPointRanking::unsafe_arena_release_cur_rank() {
  // @@protoc_insertion_point(field_release:KWMsg.AckGetPlayerStrategyPointRanking.cur_rank)
  
  ::KWMsg::StrategyPointRankingItem* temp = cur_rank_;
  cur_rank_ = nullptr;
  return temp;
}
inline ::KWMsg::StrategyPointRankingItem* AckGetPlayerStrategyPointRanking::_internal_mutable_cur_rank() {
  
  if (cur_rank_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::StrategyPointRankingItem>(GetArenaForAllocation());
    cur_rank_ = p;
  }
  return cur_rank_;
}
inline ::KWMsg::StrategyPointRankingItem* AckGetPlayerStrategyPointRanking::mutable_cur_rank() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetPlayerStrategyPointRanking.cur_rank)
  return _internal_mutable_cur_rank();
}
inline void AckGetPlayerStrategyPointRanking::set_allocated_cur_rank(::KWMsg::StrategyPointRankingItem* cur_rank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete cur_rank_;
  }
  if (cur_rank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::StrategyPointRankingItem>::GetOwningArena(cur_rank);
    if (message_arena != submessage_arena) {
      cur_rank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cur_rank, submessage_arena);
    }
    
  } else {
    
  }
  cur_rank_ = cur_rank;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckGetPlayerStrategyPointRanking.cur_rank)
}

// -------------------------------------------------------------------

// BotArenaChallengeItem

// .KWMsg.Ident id = 1;
inline bool BotArenaChallengeItem::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool BotArenaChallengeItem::has_id() const {
  return _internal_has_id();
}
inline const ::KWMsg::Ident& BotArenaChallengeItem::_internal_id() const {
  const ::KWMsg::Ident* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BotArenaChallengeItem::id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BotArenaChallengeItem.id)
  return _internal_id();
}
inline void BotArenaChallengeItem::unsafe_arena_set_allocated_id(
    ::KWMsg::Ident* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BotArenaChallengeItem.id)
}
inline ::KWMsg::Ident* BotArenaChallengeItem::release_id() {
  
  ::KWMsg::Ident* temp = id_;
  id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BotArenaChallengeItem::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BotArenaChallengeItem.id)
  
  ::KWMsg::Ident* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BotArenaChallengeItem::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::KWMsg::Ident* BotArenaChallengeItem::mutable_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BotArenaChallengeItem.id)
  return _internal_mutable_id();
}
inline void BotArenaChallengeItem::set_allocated_id(::KWMsg::Ident* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BotArenaChallengeItem.id)
}

// .KWMsg.PlayerInfo player_info = 2;
inline bool BotArenaChallengeItem::_internal_has_player_info() const {
  return entity_case() == kPlayerInfo;
}
inline bool BotArenaChallengeItem::has_player_info() const {
  return _internal_has_player_info();
}
inline void BotArenaChallengeItem::set_has_player_info() {
  _oneof_case_[0] = kPlayerInfo;
}
inline void BotArenaChallengeItem::clear_player_info() {
  if (_internal_has_player_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entity_.player_info_;
    }
    clear_has_entity();
  }
}
inline ::KWMsg::PlayerInfo* BotArenaChallengeItem::release_player_info() {
  // @@protoc_insertion_point(field_release:KWMsg.BotArenaChallengeItem.player_info)
  if (_internal_has_player_info()) {
    clear_has_entity();
      ::KWMsg::PlayerInfo* temp = entity_.player_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entity_.player_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::PlayerInfo& BotArenaChallengeItem::_internal_player_info() const {
  return _internal_has_player_info()
      ? *entity_.player_info_
      : reinterpret_cast< ::KWMsg::PlayerInfo&>(::KWMsg::_PlayerInfo_default_instance_);
}
inline const ::KWMsg::PlayerInfo& BotArenaChallengeItem::player_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.BotArenaChallengeItem.player_info)
  return _internal_player_info();
}
inline ::KWMsg::PlayerInfo* BotArenaChallengeItem::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BotArenaChallengeItem.player_info)
  if (_internal_has_player_info()) {
    clear_has_entity();
    ::KWMsg::PlayerInfo* temp = entity_.player_info_;
    entity_.player_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BotArenaChallengeItem::unsafe_arena_set_allocated_player_info(::KWMsg::PlayerInfo* player_info) {
  clear_entity();
  if (player_info) {
    set_has_player_info();
    entity_.player_info_ = player_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BotArenaChallengeItem.player_info)
}
inline ::KWMsg::PlayerInfo* BotArenaChallengeItem::_internal_mutable_player_info() {
  if (!_internal_has_player_info()) {
    clear_entity();
    set_has_player_info();
    entity_.player_info_ = CreateMaybeMessage< ::KWMsg::PlayerInfo >(GetArenaForAllocation());
  }
  return entity_.player_info_;
}
inline ::KWMsg::PlayerInfo* BotArenaChallengeItem::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BotArenaChallengeItem.player_info)
  return _internal_mutable_player_info();
}

// bytes robot_id = 3;
inline bool BotArenaChallengeItem::_internal_has_robot_id() const {
  return entity_case() == kRobotId;
}
inline bool BotArenaChallengeItem::has_robot_id() const {
  return _internal_has_robot_id();
}
inline void BotArenaChallengeItem::set_has_robot_id() {
  _oneof_case_[0] = kRobotId;
}
inline void BotArenaChallengeItem::clear_robot_id() {
  if (_internal_has_robot_id()) {
    entity_.robot_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_entity();
  }
}
inline const std::string& BotArenaChallengeItem::robot_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BotArenaChallengeItem.robot_id)
  return _internal_robot_id();
}
template <typename ArgT0, typename... ArgT>
inline void BotArenaChallengeItem::set_robot_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_robot_id()) {
    clear_entity();
    set_has_robot_id();
    entity_.robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  entity_.robot_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BotArenaChallengeItem.robot_id)
}
inline std::string* BotArenaChallengeItem::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BotArenaChallengeItem.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& BotArenaChallengeItem::_internal_robot_id() const {
  if (_internal_has_robot_id()) {
    return entity_.robot_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BotArenaChallengeItem::_internal_set_robot_id(const std::string& value) {
  if (!_internal_has_robot_id()) {
    clear_entity();
    set_has_robot_id();
    entity_.robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  entity_.robot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BotArenaChallengeItem::_internal_mutable_robot_id() {
  if (!_internal_has_robot_id()) {
    clear_entity();
    set_has_robot_id();
    entity_.robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return entity_.robot_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BotArenaChallengeItem::release_robot_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BotArenaChallengeItem.robot_id)
  if (_internal_has_robot_id()) {
    clear_has_entity();
    return entity_.robot_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void BotArenaChallengeItem::set_allocated_robot_id(std::string* robot_id) {
  if (has_entity()) {
    clear_entity();
  }
  if (robot_id != nullptr) {
    set_has_robot_id();
    entity_.robot_id_.UnsafeSetDefault(robot_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(robot_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BotArenaChallengeItem.robot_id)
}

// int32 result = 4;
inline void BotArenaChallengeItem::clear_result() {
  result_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BotArenaChallengeItem::_internal_result() const {
  return result_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BotArenaChallengeItem::result() const {
  // @@protoc_insertion_point(field_get:KWMsg.BotArenaChallengeItem.result)
  return _internal_result();
}
inline void BotArenaChallengeItem::_internal_set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  result_ = value;
}
inline void BotArenaChallengeItem::set_result(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:KWMsg.BotArenaChallengeItem.result)
}

inline bool BotArenaChallengeItem::has_entity() const {
  return entity_case() != ENTITY_NOT_SET;
}
inline void BotArenaChallengeItem::clear_has_entity() {
  _oneof_case_[0] = ENTITY_NOT_SET;
}
inline BotArenaChallengeItem::EntityCase BotArenaChallengeItem::entity_case() const {
  return BotArenaChallengeItem::EntityCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BotArenaChallengeList

// repeated .KWMsg.BotArenaChallengeItem list = 1;
inline int BotArenaChallengeList::_internal_list_size() const {
  return list_.size();
}
inline int BotArenaChallengeList::list_size() const {
  return _internal_list_size();
}
inline void BotArenaChallengeList::clear_list() {
  list_.Clear();
}
inline ::KWMsg::BotArenaChallengeItem* BotArenaChallengeList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BotArenaChallengeList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaChallengeItem >*
BotArenaChallengeList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BotArenaChallengeList.list)
  return &list_;
}
inline const ::KWMsg::BotArenaChallengeItem& BotArenaChallengeList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::KWMsg::BotArenaChallengeItem& BotArenaChallengeList::list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BotArenaChallengeList.list)
  return _internal_list(index);
}
inline ::KWMsg::BotArenaChallengeItem* BotArenaChallengeList::_internal_add_list() {
  return list_.Add();
}
inline ::KWMsg::BotArenaChallengeItem* BotArenaChallengeList::add_list() {
  // @@protoc_insertion_point(field_add:KWMsg.BotArenaChallengeList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaChallengeItem >&
BotArenaChallengeList::list() const {
  // @@protoc_insertion_point(field_list:KWMsg.BotArenaChallengeList.list)
  return list_;
}

// -------------------------------------------------------------------

// ReqGetPlayerBotArenaChallengeList

// .KWMsg.Ident player_id = 1;
inline bool ReqGetPlayerBotArenaChallengeList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqGetPlayerBotArenaChallengeList::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqGetPlayerBotArenaChallengeList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetPlayerBotArenaChallengeList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetPlayerBotArenaChallengeList.player_id)
  return _internal_player_id();
}
inline void ReqGetPlayerBotArenaChallengeList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetPlayerBotArenaChallengeList.player_id)
}
inline ::KWMsg::Ident* ReqGetPlayerBotArenaChallengeList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetPlayerBotArenaChallengeList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetPlayerBotArenaChallengeList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetPlayerBotArenaChallengeList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqGetPlayerBotArenaChallengeList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetPlayerBotArenaChallengeList.player_id)
  return _internal_mutable_player_id();
}
inline void ReqGetPlayerBotArenaChallengeList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetPlayerBotArenaChallengeList.player_id)
}

// -------------------------------------------------------------------

// AckGetPlayerBotArenaChallengeList

// .KWMsg.EGameEventCode event_code = 1;
inline void AckGetPlayerBotArenaChallengeList::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckGetPlayerBotArenaChallengeList::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckGetPlayerBotArenaChallengeList::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPlayerBotArenaChallengeList.event_code)
  return _internal_event_code();
}
inline void AckGetPlayerBotArenaChallengeList::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckGetPlayerBotArenaChallengeList::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetPlayerBotArenaChallengeList.event_code)
}

// .KWMsg.Ident player_id = 2;
inline bool AckGetPlayerBotArenaChallengeList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckGetPlayerBotArenaChallengeList::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckGetPlayerBotArenaChallengeList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckGetPlayerBotArenaChallengeList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPlayerBotArenaChallengeList.player_id)
  return _internal_player_id();
}
inline void AckGetPlayerBotArenaChallengeList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckGetPlayerBotArenaChallengeList.player_id)
}
inline ::KWMsg::Ident* AckGetPlayerBotArenaChallengeList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckGetPlayerBotArenaChallengeList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckGetPlayerBotArenaChallengeList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckGetPlayerBotArenaChallengeList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckGetPlayerBotArenaChallengeList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetPlayerBotArenaChallengeList.player_id)
  return _internal_mutable_player_id();
}
inline void AckGetPlayerBotArenaChallengeList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckGetPlayerBotArenaChallengeList.player_id)
}

// .KWMsg.BotArenaChallengeList result = 3;
inline bool AckGetPlayerBotArenaChallengeList::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool AckGetPlayerBotArenaChallengeList::has_result() const {
  return _internal_has_result();
}
inline void AckGetPlayerBotArenaChallengeList::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::KWMsg::BotArenaChallengeList& AckGetPlayerBotArenaChallengeList::_internal_result() const {
  const ::KWMsg::BotArenaChallengeList* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BotArenaChallengeList&>(
      ::KWMsg::_BotArenaChallengeList_default_instance_);
}
inline const ::KWMsg::BotArenaChallengeList& AckGetPlayerBotArenaChallengeList::result() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetPlayerBotArenaChallengeList.result)
  return _internal_result();
}
inline void AckGetPlayerBotArenaChallengeList::unsafe_arena_set_allocated_result(
    ::KWMsg::BotArenaChallengeList* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckGetPlayerBotArenaChallengeList.result)
}
inline ::KWMsg::BotArenaChallengeList* AckGetPlayerBotArenaChallengeList::release_result() {
  
  ::KWMsg::BotArenaChallengeList* temp = result_;
  result_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BotArenaChallengeList* AckGetPlayerBotArenaChallengeList::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:KWMsg.AckGetPlayerBotArenaChallengeList.result)
  
  ::KWMsg::BotArenaChallengeList* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::KWMsg::BotArenaChallengeList* AckGetPlayerBotArenaChallengeList::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BotArenaChallengeList>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::KWMsg::BotArenaChallengeList* AckGetPlayerBotArenaChallengeList::mutable_result() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetPlayerBotArenaChallengeList.result)
  return _internal_mutable_result();
}
inline void AckGetPlayerBotArenaChallengeList::set_allocated_result(::KWMsg::BotArenaChallengeList* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BotArenaChallengeList>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckGetPlayerBotArenaChallengeList.result)
}

// -------------------------------------------------------------------

// ReqRefreshPlayerBotArenaChallengeList

// .KWMsg.Ident player_id = 1;
inline bool ReqRefreshPlayerBotArenaChallengeList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqRefreshPlayerBotArenaChallengeList::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqRefreshPlayerBotArenaChallengeList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqRefreshPlayerBotArenaChallengeList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqRefreshPlayerBotArenaChallengeList.player_id)
  return _internal_player_id();
}
inline void ReqRefreshPlayerBotArenaChallengeList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqRefreshPlayerBotArenaChallengeList.player_id)
}
inline ::KWMsg::Ident* ReqRefreshPlayerBotArenaChallengeList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqRefreshPlayerBotArenaChallengeList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqRefreshPlayerBotArenaChallengeList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqRefreshPlayerBotArenaChallengeList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqRefreshPlayerBotArenaChallengeList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqRefreshPlayerBotArenaChallengeList.player_id)
  return _internal_mutable_player_id();
}
inline void ReqRefreshPlayerBotArenaChallengeList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqRefreshPlayerBotArenaChallengeList.player_id)
}

// -------------------------------------------------------------------

// AckRefreshPlayerBotArenaChallengeList

// .KWMsg.EGameEventCode event_code = 1;
inline void AckRefreshPlayerBotArenaChallengeList::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckRefreshPlayerBotArenaChallengeList::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckRefreshPlayerBotArenaChallengeList::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckRefreshPlayerBotArenaChallengeList.event_code)
  return _internal_event_code();
}
inline void AckRefreshPlayerBotArenaChallengeList::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckRefreshPlayerBotArenaChallengeList::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckRefreshPlayerBotArenaChallengeList.event_code)
}

// .KWMsg.Ident player_id = 2;
inline bool AckRefreshPlayerBotArenaChallengeList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckRefreshPlayerBotArenaChallengeList::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckRefreshPlayerBotArenaChallengeList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckRefreshPlayerBotArenaChallengeList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckRefreshPlayerBotArenaChallengeList.player_id)
  return _internal_player_id();
}
inline void AckRefreshPlayerBotArenaChallengeList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckRefreshPlayerBotArenaChallengeList.player_id)
}
inline ::KWMsg::Ident* AckRefreshPlayerBotArenaChallengeList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckRefreshPlayerBotArenaChallengeList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckRefreshPlayerBotArenaChallengeList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckRefreshPlayerBotArenaChallengeList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckRefreshPlayerBotArenaChallengeList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckRefreshPlayerBotArenaChallengeList.player_id)
  return _internal_mutable_player_id();
}
inline void AckRefreshPlayerBotArenaChallengeList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckRefreshPlayerBotArenaChallengeList.player_id)
}

// .KWMsg.BotArenaChallengeList result = 3;
inline bool AckRefreshPlayerBotArenaChallengeList::_internal_has_result() const {
  return this != internal_default_instance() && result_ != nullptr;
}
inline bool AckRefreshPlayerBotArenaChallengeList::has_result() const {
  return _internal_has_result();
}
inline void AckRefreshPlayerBotArenaChallengeList::clear_result() {
  if (GetArenaForAllocation() == nullptr && result_ != nullptr) {
    delete result_;
  }
  result_ = nullptr;
}
inline const ::KWMsg::BotArenaChallengeList& AckRefreshPlayerBotArenaChallengeList::_internal_result() const {
  const ::KWMsg::BotArenaChallengeList* p = result_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::BotArenaChallengeList&>(
      ::KWMsg::_BotArenaChallengeList_default_instance_);
}
inline const ::KWMsg::BotArenaChallengeList& AckRefreshPlayerBotArenaChallengeList::result() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckRefreshPlayerBotArenaChallengeList.result)
  return _internal_result();
}
inline void AckRefreshPlayerBotArenaChallengeList::unsafe_arena_set_allocated_result(
    ::KWMsg::BotArenaChallengeList* result) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(result_);
  }
  result_ = result;
  if (result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckRefreshPlayerBotArenaChallengeList.result)
}
inline ::KWMsg::BotArenaChallengeList* AckRefreshPlayerBotArenaChallengeList::release_result() {
  
  ::KWMsg::BotArenaChallengeList* temp = result_;
  result_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::BotArenaChallengeList* AckRefreshPlayerBotArenaChallengeList::unsafe_arena_release_result() {
  // @@protoc_insertion_point(field_release:KWMsg.AckRefreshPlayerBotArenaChallengeList.result)
  
  ::KWMsg::BotArenaChallengeList* temp = result_;
  result_ = nullptr;
  return temp;
}
inline ::KWMsg::BotArenaChallengeList* AckRefreshPlayerBotArenaChallengeList::_internal_mutable_result() {
  
  if (result_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::BotArenaChallengeList>(GetArenaForAllocation());
    result_ = p;
  }
  return result_;
}
inline ::KWMsg::BotArenaChallengeList* AckRefreshPlayerBotArenaChallengeList::mutable_result() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckRefreshPlayerBotArenaChallengeList.result)
  return _internal_mutable_result();
}
inline void AckRefreshPlayerBotArenaChallengeList::set_allocated_result(::KWMsg::BotArenaChallengeList* result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete result_;
  }
  if (result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::BotArenaChallengeList>::GetOwningArena(result);
    if (message_arena != submessage_arena) {
      result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, result, submessage_arena);
    }
    
  } else {
    
  }
  result_ = result;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckRefreshPlayerBotArenaChallengeList.result)
}

// -------------------------------------------------------------------

// ReqAdjBotarenaDefensiveTeam

// .KWMsg.Ident player_id = 1;
inline bool ReqAdjBotarenaDefensiveTeam::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqAdjBotarenaDefensiveTeam::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqAdjBotarenaDefensiveTeam::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqAdjBotarenaDefensiveTeam::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAdjBotarenaDefensiveTeam.player_id)
  return _internal_player_id();
}
inline void ReqAdjBotarenaDefensiveTeam::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqAdjBotarenaDefensiveTeam.player_id)
}
inline ::KWMsg::Ident* ReqAdjBotarenaDefensiveTeam::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqAdjBotarenaDefensiveTeam::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAdjBotarenaDefensiveTeam.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqAdjBotarenaDefensiveTeam::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqAdjBotarenaDefensiveTeam::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAdjBotarenaDefensiveTeam.player_id)
  return _internal_mutable_player_id();
}
inline void ReqAdjBotarenaDefensiveTeam::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAdjBotarenaDefensiveTeam.player_id)
}

// int32 idx = 2;
inline void ReqAdjBotarenaDefensiveTeam::clear_idx() {
  idx_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAdjBotarenaDefensiveTeam::_internal_idx() const {
  return idx_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ReqAdjBotarenaDefensiveTeam::idx() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAdjBotarenaDefensiveTeam.idx)
  return _internal_idx();
}
inline void ReqAdjBotarenaDefensiveTeam::_internal_set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  idx_ = value;
}
inline void ReqAdjBotarenaDefensiveTeam::set_idx(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_idx(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqAdjBotarenaDefensiveTeam.idx)
}

// bytes witch_id = 3;
inline void ReqAdjBotarenaDefensiveTeam::clear_witch_id() {
  witch_id_.ClearToEmpty();
}
inline const std::string& ReqAdjBotarenaDefensiveTeam::witch_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqAdjBotarenaDefensiveTeam.witch_id)
  return _internal_witch_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqAdjBotarenaDefensiveTeam::set_witch_id(ArgT0&& arg0, ArgT... args) {
 
 witch_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqAdjBotarenaDefensiveTeam.witch_id)
}
inline std::string* ReqAdjBotarenaDefensiveTeam::mutable_witch_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqAdjBotarenaDefensiveTeam.witch_id)
  return _internal_mutable_witch_id();
}
inline const std::string& ReqAdjBotarenaDefensiveTeam::_internal_witch_id() const {
  return witch_id_.Get();
}
inline void ReqAdjBotarenaDefensiveTeam::_internal_set_witch_id(const std::string& value) {
  
  witch_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqAdjBotarenaDefensiveTeam::_internal_mutable_witch_id() {
  
  return witch_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqAdjBotarenaDefensiveTeam::release_witch_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqAdjBotarenaDefensiveTeam.witch_id)
  return witch_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqAdjBotarenaDefensiveTeam::set_allocated_witch_id(std::string* witch_id) {
  if (witch_id != nullptr) {
    
  } else {
    
  }
  witch_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), witch_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqAdjBotarenaDefensiveTeam.witch_id)
}

// -------------------------------------------------------------------

// AckAdjBotarenaDefensiveTeam

// .KWMsg.EGameEventCode event_code = 1;
inline void AckAdjBotarenaDefensiveTeam::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckAdjBotarenaDefensiveTeam::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckAdjBotarenaDefensiveTeam::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckAdjBotarenaDefensiveTeam.event_code)
  return _internal_event_code();
}
inline void AckAdjBotarenaDefensiveTeam::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckAdjBotarenaDefensiveTeam::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckAdjBotarenaDefensiveTeam.event_code)
}

// -------------------------------------------------------------------

// ReqResetBotarenaDefensiveTeam

// .KWMsg.Ident player_id = 1;
inline bool ReqResetBotarenaDefensiveTeam::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqResetBotarenaDefensiveTeam::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqResetBotarenaDefensiveTeam::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqResetBotarenaDefensiveTeam::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqResetBotarenaDefensiveTeam.player_id)
  return _internal_player_id();
}
inline void ReqResetBotarenaDefensiveTeam::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqResetBotarenaDefensiveTeam.player_id)
}
inline ::KWMsg::Ident* ReqResetBotarenaDefensiveTeam::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqResetBotarenaDefensiveTeam::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqResetBotarenaDefensiveTeam.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqResetBotarenaDefensiveTeam::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqResetBotarenaDefensiveTeam::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqResetBotarenaDefensiveTeam.player_id)
  return _internal_mutable_player_id();
}
inline void ReqResetBotarenaDefensiveTeam::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqResetBotarenaDefensiveTeam.player_id)
}

// -------------------------------------------------------------------

// AckResetBotarenaDefensiveTeam

// .KWMsg.EGameEventCode event_code = 1;
inline void AckResetBotarenaDefensiveTeam::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckResetBotarenaDefensiveTeam::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckResetBotarenaDefensiveTeam::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckResetBotarenaDefensiveTeam.event_code)
  return _internal_event_code();
}
inline void AckResetBotarenaDefensiveTeam::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckResetBotarenaDefensiveTeam::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckResetBotarenaDefensiveTeam.event_code)
}

// -------------------------------------------------------------------

// ReqQuickConfigBotarenaDefensiveTeam

// .KWMsg.Ident player_id = 1;
inline bool ReqQuickConfigBotarenaDefensiveTeam::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqQuickConfigBotarenaDefensiveTeam::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqQuickConfigBotarenaDefensiveTeam::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqQuickConfigBotarenaDefensiveTeam::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.player_id)
  return _internal_player_id();
}
inline void ReqQuickConfigBotarenaDefensiveTeam::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.player_id)
}
inline ::KWMsg::Ident* ReqQuickConfigBotarenaDefensiveTeam::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqQuickConfigBotarenaDefensiveTeam::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqQuickConfigBotarenaDefensiveTeam::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqQuickConfigBotarenaDefensiveTeam::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.player_id)
  return _internal_mutable_player_id();
}
inline void ReqQuickConfigBotarenaDefensiveTeam::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.player_id)
}

// repeated bytes witch_id_list = 2;
inline int ReqQuickConfigBotarenaDefensiveTeam::_internal_witch_id_list_size() const {
  return witch_id_list_.size();
}
inline int ReqQuickConfigBotarenaDefensiveTeam::witch_id_list_size() const {
  return _internal_witch_id_list_size();
}
inline void ReqQuickConfigBotarenaDefensiveTeam::clear_witch_id_list() {
  witch_id_list_.Clear();
}
inline std::string* ReqQuickConfigBotarenaDefensiveTeam::add_witch_id_list() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.witch_id_list)
  return _internal_add_witch_id_list();
}
inline const std::string& ReqQuickConfigBotarenaDefensiveTeam::_internal_witch_id_list(int index) const {
  return witch_id_list_.Get(index);
}
inline const std::string& ReqQuickConfigBotarenaDefensiveTeam::witch_id_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.witch_id_list)
  return _internal_witch_id_list(index);
}
inline std::string* ReqQuickConfigBotarenaDefensiveTeam::mutable_witch_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.witch_id_list)
  return witch_id_list_.Mutable(index);
}
inline void ReqQuickConfigBotarenaDefensiveTeam::set_witch_id_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.witch_id_list)
  witch_id_list_.Mutable(index)->assign(value);
}
inline void ReqQuickConfigBotarenaDefensiveTeam::set_witch_id_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.witch_id_list)
  witch_id_list_.Mutable(index)->assign(std::move(value));
}
inline void ReqQuickConfigBotarenaDefensiveTeam::set_witch_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  witch_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.witch_id_list)
}
inline void ReqQuickConfigBotarenaDefensiveTeam::set_witch_id_list(int index, const void* value, size_t size) {
  witch_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.witch_id_list)
}
inline std::string* ReqQuickConfigBotarenaDefensiveTeam::_internal_add_witch_id_list() {
  return witch_id_list_.Add();
}
inline void ReqQuickConfigBotarenaDefensiveTeam::add_witch_id_list(const std::string& value) {
  witch_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.witch_id_list)
}
inline void ReqQuickConfigBotarenaDefensiveTeam::add_witch_id_list(std::string&& value) {
  witch_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.witch_id_list)
}
inline void ReqQuickConfigBotarenaDefensiveTeam::add_witch_id_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  witch_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.witch_id_list)
}
inline void ReqQuickConfigBotarenaDefensiveTeam::add_witch_id_list(const void* value, size_t size) {
  witch_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.witch_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ReqQuickConfigBotarenaDefensiveTeam::witch_id_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.witch_id_list)
  return witch_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ReqQuickConfigBotarenaDefensiveTeam::mutable_witch_id_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.ReqQuickConfigBotarenaDefensiveTeam.witch_id_list)
  return &witch_id_list_;
}

// -------------------------------------------------------------------

// AckQuickConfigBotarenaDefensiveTeam

// .KWMsg.EGameEventCode event_code = 1;
inline void AckQuickConfigBotarenaDefensiveTeam::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckQuickConfigBotarenaDefensiveTeam::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckQuickConfigBotarenaDefensiveTeam::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQuickConfigBotarenaDefensiveTeam.event_code)
  return _internal_event_code();
}
inline void AckQuickConfigBotarenaDefensiveTeam::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckQuickConfigBotarenaDefensiveTeam::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckQuickConfigBotarenaDefensiveTeam.event_code)
}

// repeated bytes witch_id_list = 2;
inline int AckQuickConfigBotarenaDefensiveTeam::_internal_witch_id_list_size() const {
  return witch_id_list_.size();
}
inline int AckQuickConfigBotarenaDefensiveTeam::witch_id_list_size() const {
  return _internal_witch_id_list_size();
}
inline void AckQuickConfigBotarenaDefensiveTeam::clear_witch_id_list() {
  witch_id_list_.Clear();
}
inline std::string* AckQuickConfigBotarenaDefensiveTeam::add_witch_id_list() {
  // @@protoc_insertion_point(field_add_mutable:KWMsg.AckQuickConfigBotarenaDefensiveTeam.witch_id_list)
  return _internal_add_witch_id_list();
}
inline const std::string& AckQuickConfigBotarenaDefensiveTeam::_internal_witch_id_list(int index) const {
  return witch_id_list_.Get(index);
}
inline const std::string& AckQuickConfigBotarenaDefensiveTeam::witch_id_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckQuickConfigBotarenaDefensiveTeam.witch_id_list)
  return _internal_witch_id_list(index);
}
inline std::string* AckQuickConfigBotarenaDefensiveTeam::mutable_witch_id_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckQuickConfigBotarenaDefensiveTeam.witch_id_list)
  return witch_id_list_.Mutable(index);
}
inline void AckQuickConfigBotarenaDefensiveTeam::set_witch_id_list(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:KWMsg.AckQuickConfigBotarenaDefensiveTeam.witch_id_list)
  witch_id_list_.Mutable(index)->assign(value);
}
inline void AckQuickConfigBotarenaDefensiveTeam::set_witch_id_list(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:KWMsg.AckQuickConfigBotarenaDefensiveTeam.witch_id_list)
  witch_id_list_.Mutable(index)->assign(std::move(value));
}
inline void AckQuickConfigBotarenaDefensiveTeam::set_witch_id_list(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  witch_id_list_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:KWMsg.AckQuickConfigBotarenaDefensiveTeam.witch_id_list)
}
inline void AckQuickConfigBotarenaDefensiveTeam::set_witch_id_list(int index, const void* value, size_t size) {
  witch_id_list_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:KWMsg.AckQuickConfigBotarenaDefensiveTeam.witch_id_list)
}
inline std::string* AckQuickConfigBotarenaDefensiveTeam::_internal_add_witch_id_list() {
  return witch_id_list_.Add();
}
inline void AckQuickConfigBotarenaDefensiveTeam::add_witch_id_list(const std::string& value) {
  witch_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:KWMsg.AckQuickConfigBotarenaDefensiveTeam.witch_id_list)
}
inline void AckQuickConfigBotarenaDefensiveTeam::add_witch_id_list(std::string&& value) {
  witch_id_list_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:KWMsg.AckQuickConfigBotarenaDefensiveTeam.witch_id_list)
}
inline void AckQuickConfigBotarenaDefensiveTeam::add_witch_id_list(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  witch_id_list_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:KWMsg.AckQuickConfigBotarenaDefensiveTeam.witch_id_list)
}
inline void AckQuickConfigBotarenaDefensiveTeam::add_witch_id_list(const void* value, size_t size) {
  witch_id_list_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:KWMsg.AckQuickConfigBotarenaDefensiveTeam.witch_id_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
AckQuickConfigBotarenaDefensiveTeam::witch_id_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckQuickConfigBotarenaDefensiveTeam.witch_id_list)
  return witch_id_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
AckQuickConfigBotarenaDefensiveTeam::mutable_witch_id_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckQuickConfigBotarenaDefensiveTeam.witch_id_list)
  return &witch_id_list_;
}

// -------------------------------------------------------------------

// ReqBuyShabowToken

// .KWMsg.Ident player_id = 1;
inline bool ReqBuyShabowToken::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBuyShabowToken::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBuyShabowToken::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBuyShabowToken::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBuyShabowToken.player_id)
  return _internal_player_id();
}
inline void ReqBuyShabowToken::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBuyShabowToken.player_id)
}
inline ::KWMsg::Ident* ReqBuyShabowToken::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBuyShabowToken::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBuyShabowToken.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBuyShabowToken::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBuyShabowToken::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBuyShabowToken.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBuyShabowToken::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBuyShabowToken.player_id)
}

// int64 count = 2;
inline void ReqBuyShabowToken::clear_count() {
  count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqBuyShabowToken::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqBuyShabowToken::count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBuyShabowToken.count)
  return _internal_count();
}
inline void ReqBuyShabowToken::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void ReqBuyShabowToken::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqBuyShabowToken.count)
}

// -------------------------------------------------------------------

// AckBuyShabowToken

// .KWMsg.EGameEventCode event_code = 1;
inline void AckBuyShabowToken::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBuyShabowToken::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckBuyShabowToken::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBuyShabowToken.event_code)
  return _internal_event_code();
}
inline void AckBuyShabowToken::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckBuyShabowToken::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBuyShabowToken.event_code)
}

// -------------------------------------------------------------------

// BotArenaReplayItem

// .KWMsg.Ident id = 1;
inline bool BotArenaReplayItem::_internal_has_id() const {
  return this != internal_default_instance() && id_ != nullptr;
}
inline bool BotArenaReplayItem::has_id() const {
  return _internal_has_id();
}
inline const ::KWMsg::Ident& BotArenaReplayItem::_internal_id() const {
  const ::KWMsg::Ident* p = id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& BotArenaReplayItem::id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BotArenaReplayItem.id)
  return _internal_id();
}
inline void BotArenaReplayItem::unsafe_arena_set_allocated_id(
    ::KWMsg::Ident* id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  id_ = id;
  if (id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BotArenaReplayItem.id)
}
inline ::KWMsg::Ident* BotArenaReplayItem::release_id() {
  
  ::KWMsg::Ident* temp = id_;
  id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* BotArenaReplayItem::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BotArenaReplayItem.id)
  
  ::KWMsg::Ident* temp = id_;
  id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* BotArenaReplayItem::_internal_mutable_id() {
  
  if (id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    id_ = p;
  }
  return id_;
}
inline ::KWMsg::Ident* BotArenaReplayItem::mutable_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BotArenaReplayItem.id)
  return _internal_mutable_id();
}
inline void BotArenaReplayItem::set_allocated_id(::KWMsg::Ident* id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(id_);
  }
  if (id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(id));
    if (message_arena != submessage_arena) {
      id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, id, submessage_arena);
    }
    
  } else {
    
  }
  id_ = id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BotArenaReplayItem.id)
}

// .KWMsg.PlayerInfo player_info = 2;
inline bool BotArenaReplayItem::_internal_has_player_info() const {
  return entity_case() == kPlayerInfo;
}
inline bool BotArenaReplayItem::has_player_info() const {
  return _internal_has_player_info();
}
inline void BotArenaReplayItem::set_has_player_info() {
  _oneof_case_[0] = kPlayerInfo;
}
inline void BotArenaReplayItem::clear_player_info() {
  if (_internal_has_player_info()) {
    if (GetArenaForAllocation() == nullptr) {
      delete entity_.player_info_;
    }
    clear_has_entity();
  }
}
inline ::KWMsg::PlayerInfo* BotArenaReplayItem::release_player_info() {
  // @@protoc_insertion_point(field_release:KWMsg.BotArenaReplayItem.player_info)
  if (_internal_has_player_info()) {
    clear_has_entity();
      ::KWMsg::PlayerInfo* temp = entity_.player_info_;
    if (GetArenaForAllocation() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    entity_.player_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::KWMsg::PlayerInfo& BotArenaReplayItem::_internal_player_info() const {
  return _internal_has_player_info()
      ? *entity_.player_info_
      : reinterpret_cast< ::KWMsg::PlayerInfo&>(::KWMsg::_PlayerInfo_default_instance_);
}
inline const ::KWMsg::PlayerInfo& BotArenaReplayItem::player_info() const {
  // @@protoc_insertion_point(field_get:KWMsg.BotArenaReplayItem.player_info)
  return _internal_player_info();
}
inline ::KWMsg::PlayerInfo* BotArenaReplayItem::unsafe_arena_release_player_info() {
  // @@protoc_insertion_point(field_unsafe_arena_release:KWMsg.BotArenaReplayItem.player_info)
  if (_internal_has_player_info()) {
    clear_has_entity();
    ::KWMsg::PlayerInfo* temp = entity_.player_info_;
    entity_.player_info_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void BotArenaReplayItem::unsafe_arena_set_allocated_player_info(::KWMsg::PlayerInfo* player_info) {
  clear_entity();
  if (player_info) {
    set_has_player_info();
    entity_.player_info_ = player_info;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BotArenaReplayItem.player_info)
}
inline ::KWMsg::PlayerInfo* BotArenaReplayItem::_internal_mutable_player_info() {
  if (!_internal_has_player_info()) {
    clear_entity();
    set_has_player_info();
    entity_.player_info_ = CreateMaybeMessage< ::KWMsg::PlayerInfo >(GetArenaForAllocation());
  }
  return entity_.player_info_;
}
inline ::KWMsg::PlayerInfo* BotArenaReplayItem::mutable_player_info() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BotArenaReplayItem.player_info)
  return _internal_mutable_player_info();
}

// bytes robot_id = 3;
inline bool BotArenaReplayItem::_internal_has_robot_id() const {
  return entity_case() == kRobotId;
}
inline bool BotArenaReplayItem::has_robot_id() const {
  return _internal_has_robot_id();
}
inline void BotArenaReplayItem::set_has_robot_id() {
  _oneof_case_[0] = kRobotId;
}
inline void BotArenaReplayItem::clear_robot_id() {
  if (_internal_has_robot_id()) {
    entity_.robot_id_.Destroy(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
    clear_has_entity();
  }
}
inline const std::string& BotArenaReplayItem::robot_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.BotArenaReplayItem.robot_id)
  return _internal_robot_id();
}
template <typename ArgT0, typename... ArgT>
inline void BotArenaReplayItem::set_robot_id(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_robot_id()) {
    clear_entity();
    set_has_robot_id();
    entity_.robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  entity_.robot_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.BotArenaReplayItem.robot_id)
}
inline std::string* BotArenaReplayItem::mutable_robot_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BotArenaReplayItem.robot_id)
  return _internal_mutable_robot_id();
}
inline const std::string& BotArenaReplayItem::_internal_robot_id() const {
  if (_internal_has_robot_id()) {
    return entity_.robot_id_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void BotArenaReplayItem::_internal_set_robot_id(const std::string& value) {
  if (!_internal_has_robot_id()) {
    clear_entity();
    set_has_robot_id();
    entity_.robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  entity_.robot_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* BotArenaReplayItem::_internal_mutable_robot_id() {
  if (!_internal_has_robot_id()) {
    clear_entity();
    set_has_robot_id();
    entity_.robot_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return entity_.robot_id_.Mutable(
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* BotArenaReplayItem::release_robot_id() {
  // @@protoc_insertion_point(field_release:KWMsg.BotArenaReplayItem.robot_id)
  if (_internal_has_robot_id()) {
    clear_has_entity();
    return entity_.robot_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
  } else {
    return nullptr;
  }
}
inline void BotArenaReplayItem::set_allocated_robot_id(std::string* robot_id) {
  if (has_entity()) {
    clear_entity();
  }
  if (robot_id != nullptr) {
    set_has_robot_id();
    entity_.robot_id_.UnsafeSetDefault(robot_id);
    ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArenaForAllocation();
    if (arena != nullptr) {
      arena->Own(robot_id);
    }
  }
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BotArenaReplayItem.robot_id)
}

// .KWMsg.RewardInfo reward = 4;
inline bool BotArenaReplayItem::_internal_has_reward() const {
  return this != internal_default_instance() && reward_ != nullptr;
}
inline bool BotArenaReplayItem::has_reward() const {
  return _internal_has_reward();
}
inline void BotArenaReplayItem::clear_reward() {
  if (GetArenaForAllocation() == nullptr && reward_ != nullptr) {
    delete reward_;
  }
  reward_ = nullptr;
}
inline const ::KWMsg::RewardInfo& BotArenaReplayItem::_internal_reward() const {
  const ::KWMsg::RewardInfo* p = reward_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::RewardInfo&>(
      ::KWMsg::_RewardInfo_default_instance_);
}
inline const ::KWMsg::RewardInfo& BotArenaReplayItem::reward() const {
  // @@protoc_insertion_point(field_get:KWMsg.BotArenaReplayItem.reward)
  return _internal_reward();
}
inline void BotArenaReplayItem::unsafe_arena_set_allocated_reward(
    ::KWMsg::RewardInfo* reward) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(reward_);
  }
  reward_ = reward;
  if (reward) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.BotArenaReplayItem.reward)
}
inline ::KWMsg::RewardInfo* BotArenaReplayItem::release_reward() {
  
  ::KWMsg::RewardInfo* temp = reward_;
  reward_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::RewardInfo* BotArenaReplayItem::unsafe_arena_release_reward() {
  // @@protoc_insertion_point(field_release:KWMsg.BotArenaReplayItem.reward)
  
  ::KWMsg::RewardInfo* temp = reward_;
  reward_ = nullptr;
  return temp;
}
inline ::KWMsg::RewardInfo* BotArenaReplayItem::_internal_mutable_reward() {
  
  if (reward_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::RewardInfo>(GetArenaForAllocation());
    reward_ = p;
  }
  return reward_;
}
inline ::KWMsg::RewardInfo* BotArenaReplayItem::mutable_reward() {
  // @@protoc_insertion_point(field_mutable:KWMsg.BotArenaReplayItem.reward)
  return _internal_mutable_reward();
}
inline void BotArenaReplayItem::set_allocated_reward(::KWMsg::RewardInfo* reward) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reward_;
  }
  if (reward) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::RewardInfo>::GetOwningArena(reward);
    if (message_arena != submessage_arena) {
      reward = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, reward, submessage_arena);
    }
    
  } else {
    
  }
  reward_ = reward;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.BotArenaReplayItem.reward)
}

// int32 create_ts = 5;
inline void BotArenaReplayItem::clear_create_ts() {
  create_ts_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BotArenaReplayItem::_internal_create_ts() const {
  return create_ts_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BotArenaReplayItem::create_ts() const {
  // @@protoc_insertion_point(field_get:KWMsg.BotArenaReplayItem.create_ts)
  return _internal_create_ts();
}
inline void BotArenaReplayItem::_internal_set_create_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  create_ts_ = value;
}
inline void BotArenaReplayItem::set_create_ts(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_create_ts(value);
  // @@protoc_insertion_point(field_set:KWMsg.BotArenaReplayItem.create_ts)
}

// .KWMsg.BotarenaReplayResult result = 6;
inline void BotArenaReplayItem::clear_result() {
  result_ = 0;
}
inline ::KWMsg::BotarenaReplayResult BotArenaReplayItem::_internal_result() const {
  return static_cast< ::KWMsg::BotarenaReplayResult >(result_);
}
inline ::KWMsg::BotarenaReplayResult BotArenaReplayItem::result() const {
  // @@protoc_insertion_point(field_get:KWMsg.BotArenaReplayItem.result)
  return _internal_result();
}
inline void BotArenaReplayItem::_internal_set_result(::KWMsg::BotarenaReplayResult value) {
  
  result_ = value;
}
inline void BotArenaReplayItem::set_result(::KWMsg::BotarenaReplayResult value) {
  _internal_set_result(value);
  // @@protoc_insertion_point(field_set:KWMsg.BotArenaReplayItem.result)
}

// bool is_counter_attack = 7;
inline void BotArenaReplayItem::clear_is_counter_attack() {
  is_counter_attack_ = false;
}
inline bool BotArenaReplayItem::_internal_is_counter_attack() const {
  return is_counter_attack_;
}
inline bool BotArenaReplayItem::is_counter_attack() const {
  // @@protoc_insertion_point(field_get:KWMsg.BotArenaReplayItem.is_counter_attack)
  return _internal_is_counter_attack();
}
inline void BotArenaReplayItem::_internal_set_is_counter_attack(bool value) {
  
  is_counter_attack_ = value;
}
inline void BotArenaReplayItem::set_is_counter_attack(bool value) {
  _internal_set_is_counter_attack(value);
  // @@protoc_insertion_point(field_set:KWMsg.BotArenaReplayItem.is_counter_attack)
}

inline bool BotArenaReplayItem::has_entity() const {
  return entity_case() != ENTITY_NOT_SET;
}
inline void BotArenaReplayItem::clear_has_entity() {
  _oneof_case_[0] = ENTITY_NOT_SET;
}
inline BotArenaReplayItem::EntityCase BotArenaReplayItem::entity_case() const {
  return BotArenaReplayItem::EntityCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// BotArenaReplayList

// repeated .KWMsg.BotArenaReplayItem list = 1;
inline int BotArenaReplayList::_internal_list_size() const {
  return list_.size();
}
inline int BotArenaReplayList::list_size() const {
  return _internal_list_size();
}
inline void BotArenaReplayList::clear_list() {
  list_.Clear();
}
inline ::KWMsg::BotArenaReplayItem* BotArenaReplayList::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.BotArenaReplayList.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaReplayItem >*
BotArenaReplayList::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.BotArenaReplayList.list)
  return &list_;
}
inline const ::KWMsg::BotArenaReplayItem& BotArenaReplayList::_internal_list(int index) const {
  return list_.Get(index);
}
inline const ::KWMsg::BotArenaReplayItem& BotArenaReplayList::list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.BotArenaReplayList.list)
  return _internal_list(index);
}
inline ::KWMsg::BotArenaReplayItem* BotArenaReplayList::_internal_add_list() {
  return list_.Add();
}
inline ::KWMsg::BotArenaReplayItem* BotArenaReplayList::add_list() {
  // @@protoc_insertion_point(field_add:KWMsg.BotArenaReplayList.list)
  return _internal_add_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaReplayItem >&
BotArenaReplayList::list() const {
  // @@protoc_insertion_point(field_list:KWMsg.BotArenaReplayList.list)
  return list_;
}

// -------------------------------------------------------------------

// ReqGetBotArenaReplayList

// .KWMsg.Ident player_id = 1;
inline bool ReqGetBotArenaReplayList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqGetBotArenaReplayList::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqGetBotArenaReplayList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetBotArenaReplayList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetBotArenaReplayList.player_id)
  return _internal_player_id();
}
inline void ReqGetBotArenaReplayList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetBotArenaReplayList.player_id)
}
inline ::KWMsg::Ident* ReqGetBotArenaReplayList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetBotArenaReplayList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetBotArenaReplayList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetBotArenaReplayList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqGetBotArenaReplayList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetBotArenaReplayList.player_id)
  return _internal_mutable_player_id();
}
inline void ReqGetBotArenaReplayList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetBotArenaReplayList.player_id)
}

// -------------------------------------------------------------------

// AckGetBotArenaReplayList

// .KWMsg.EGameEventCode event_code = 1;
inline void AckGetBotArenaReplayList::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckGetBotArenaReplayList::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckGetBotArenaReplayList::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaReplayList.event_code)
  return _internal_event_code();
}
inline void AckGetBotArenaReplayList::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckGetBotArenaReplayList::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetBotArenaReplayList.event_code)
}

// .KWMsg.Ident player_id = 2;
inline bool AckGetBotArenaReplayList::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckGetBotArenaReplayList::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckGetBotArenaReplayList::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckGetBotArenaReplayList::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaReplayList.player_id)
  return _internal_player_id();
}
inline void AckGetBotArenaReplayList::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckGetBotArenaReplayList.player_id)
}
inline ::KWMsg::Ident* AckGetBotArenaReplayList::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckGetBotArenaReplayList::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckGetBotArenaReplayList.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckGetBotArenaReplayList::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckGetBotArenaReplayList::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetBotArenaReplayList.player_id)
  return _internal_mutable_player_id();
}
inline void AckGetBotArenaReplayList::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckGetBotArenaReplayList.player_id)
}

// repeated .KWMsg.BotArenaReplayItem replay_list = 3;
inline int AckGetBotArenaReplayList::_internal_replay_list_size() const {
  return replay_list_.size();
}
inline int AckGetBotArenaReplayList::replay_list_size() const {
  return _internal_replay_list_size();
}
inline void AckGetBotArenaReplayList::clear_replay_list() {
  replay_list_.Clear();
}
inline ::KWMsg::BotArenaReplayItem* AckGetBotArenaReplayList::mutable_replay_list(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetBotArenaReplayList.replay_list)
  return replay_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaReplayItem >*
AckGetBotArenaReplayList::mutable_replay_list() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckGetBotArenaReplayList.replay_list)
  return &replay_list_;
}
inline const ::KWMsg::BotArenaReplayItem& AckGetBotArenaReplayList::_internal_replay_list(int index) const {
  return replay_list_.Get(index);
}
inline const ::KWMsg::BotArenaReplayItem& AckGetBotArenaReplayList::replay_list(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetBotArenaReplayList.replay_list)
  return _internal_replay_list(index);
}
inline ::KWMsg::BotArenaReplayItem* AckGetBotArenaReplayList::_internal_add_replay_list() {
  return replay_list_.Add();
}
inline ::KWMsg::BotArenaReplayItem* AckGetBotArenaReplayList::add_replay_list() {
  // @@protoc_insertion_point(field_add:KWMsg.AckGetBotArenaReplayList.replay_list)
  return _internal_add_replay_list();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::BotArenaReplayItem >&
AckGetBotArenaReplayList::replay_list() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckGetBotArenaReplayList.replay_list)
  return replay_list_;
}

// -------------------------------------------------------------------

// ReqReplayBotArenaBattle

// .KWMsg.Ident player_id = 1;
inline bool ReqReplayBotArenaBattle::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqReplayBotArenaBattle::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqReplayBotArenaBattle::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqReplayBotArenaBattle::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqReplayBotArenaBattle.player_id)
  return _internal_player_id();
}
inline void ReqReplayBotArenaBattle::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqReplayBotArenaBattle.player_id)
}
inline ::KWMsg::Ident* ReqReplayBotArenaBattle::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqReplayBotArenaBattle::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqReplayBotArenaBattle.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqReplayBotArenaBattle::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqReplayBotArenaBattle::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqReplayBotArenaBattle.player_id)
  return _internal_mutable_player_id();
}
inline void ReqReplayBotArenaBattle::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqReplayBotArenaBattle.player_id)
}

// .KWMsg.Ident replay_id = 2;
inline bool ReqReplayBotArenaBattle::_internal_has_replay_id() const {
  return this != internal_default_instance() && replay_id_ != nullptr;
}
inline bool ReqReplayBotArenaBattle::has_replay_id() const {
  return _internal_has_replay_id();
}
inline const ::KWMsg::Ident& ReqReplayBotArenaBattle::_internal_replay_id() const {
  const ::KWMsg::Ident* p = replay_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqReplayBotArenaBattle::replay_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqReplayBotArenaBattle.replay_id)
  return _internal_replay_id();
}
inline void ReqReplayBotArenaBattle::unsafe_arena_set_allocated_replay_id(
    ::KWMsg::Ident* replay_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  replay_id_ = replay_id;
  if (replay_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqReplayBotArenaBattle.replay_id)
}
inline ::KWMsg::Ident* ReqReplayBotArenaBattle::release_replay_id() {
  
  ::KWMsg::Ident* temp = replay_id_;
  replay_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqReplayBotArenaBattle::unsafe_arena_release_replay_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqReplayBotArenaBattle.replay_id)
  
  ::KWMsg::Ident* temp = replay_id_;
  replay_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqReplayBotArenaBattle::_internal_mutable_replay_id() {
  
  if (replay_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    replay_id_ = p;
  }
  return replay_id_;
}
inline ::KWMsg::Ident* ReqReplayBotArenaBattle::mutable_replay_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqReplayBotArenaBattle.replay_id)
  return _internal_mutable_replay_id();
}
inline void ReqReplayBotArenaBattle::set_allocated_replay_id(::KWMsg::Ident* replay_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  if (replay_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id));
    if (message_arena != submessage_arena) {
      replay_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_id, submessage_arena);
    }
    
  } else {
    
  }
  replay_id_ = replay_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqReplayBotArenaBattle.replay_id)
}

// -------------------------------------------------------------------

// AckReplayBotArenaBattle

// .KWMsg.EGameEventCode event_code = 1;
inline void AckReplayBotArenaBattle::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckReplayBotArenaBattle::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckReplayBotArenaBattle::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckReplayBotArenaBattle.event_code)
  return _internal_event_code();
}
inline void AckReplayBotArenaBattle::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckReplayBotArenaBattle::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckReplayBotArenaBattle.event_code)
}

// .KWMsg.Ident player_id = 2;
inline bool AckReplayBotArenaBattle::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckReplayBotArenaBattle::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckReplayBotArenaBattle::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckReplayBotArenaBattle::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckReplayBotArenaBattle.player_id)
  return _internal_player_id();
}
inline void AckReplayBotArenaBattle::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckReplayBotArenaBattle.player_id)
}
inline ::KWMsg::Ident* AckReplayBotArenaBattle::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckReplayBotArenaBattle::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckReplayBotArenaBattle.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckReplayBotArenaBattle::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckReplayBotArenaBattle::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckReplayBotArenaBattle.player_id)
  return _internal_mutable_player_id();
}
inline void AckReplayBotArenaBattle::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckReplayBotArenaBattle.player_id)
}

// .KWMsg.Ident replay_id = 3;
inline bool AckReplayBotArenaBattle::_internal_has_replay_id() const {
  return this != internal_default_instance() && replay_id_ != nullptr;
}
inline bool AckReplayBotArenaBattle::has_replay_id() const {
  return _internal_has_replay_id();
}
inline const ::KWMsg::Ident& AckReplayBotArenaBattle::_internal_replay_id() const {
  const ::KWMsg::Ident* p = replay_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckReplayBotArenaBattle::replay_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckReplayBotArenaBattle.replay_id)
  return _internal_replay_id();
}
inline void AckReplayBotArenaBattle::unsafe_arena_set_allocated_replay_id(
    ::KWMsg::Ident* replay_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  replay_id_ = replay_id;
  if (replay_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckReplayBotArenaBattle.replay_id)
}
inline ::KWMsg::Ident* AckReplayBotArenaBattle::release_replay_id() {
  
  ::KWMsg::Ident* temp = replay_id_;
  replay_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckReplayBotArenaBattle::unsafe_arena_release_replay_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckReplayBotArenaBattle.replay_id)
  
  ::KWMsg::Ident* temp = replay_id_;
  replay_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckReplayBotArenaBattle::_internal_mutable_replay_id() {
  
  if (replay_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    replay_id_ = p;
  }
  return replay_id_;
}
inline ::KWMsg::Ident* AckReplayBotArenaBattle::mutable_replay_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckReplayBotArenaBattle.replay_id)
  return _internal_mutable_replay_id();
}
inline void AckReplayBotArenaBattle::set_allocated_replay_id(::KWMsg::Ident* replay_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id_);
  }
  if (replay_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(replay_id));
    if (message_arena != submessage_arena) {
      replay_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, replay_id, submessage_arena);
    }
    
  } else {
    
  }
  replay_id_ = replay_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckReplayBotArenaBattle.replay_id)
}

// -------------------------------------------------------------------

// ShopReceipt

// bytes product_id = 1;
inline void ShopReceipt::clear_product_id() {
  product_id_.ClearToEmpty();
}
inline const std::string& ShopReceipt::product_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ShopReceipt.product_id)
  return _internal_product_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShopReceipt::set_product_id(ArgT0&& arg0, ArgT... args) {
 
 product_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ShopReceipt.product_id)
}
inline std::string* ShopReceipt::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ShopReceipt.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& ShopReceipt::_internal_product_id() const {
  return product_id_.Get();
}
inline void ShopReceipt::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ShopReceipt::_internal_mutable_product_id() {
  
  return product_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ShopReceipt::release_product_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ShopReceipt.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ShopReceipt::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ShopReceipt.product_id)
}

// bytes shop_goods_id = 2;
inline void ShopReceipt::clear_shop_goods_id() {
  shop_goods_id_.ClearToEmpty();
}
inline const std::string& ShopReceipt::shop_goods_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ShopReceipt.shop_goods_id)
  return _internal_shop_goods_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShopReceipt::set_shop_goods_id(ArgT0&& arg0, ArgT... args) {
 
 shop_goods_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ShopReceipt.shop_goods_id)
}
inline std::string* ShopReceipt::mutable_shop_goods_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ShopReceipt.shop_goods_id)
  return _internal_mutable_shop_goods_id();
}
inline const std::string& ShopReceipt::_internal_shop_goods_id() const {
  return shop_goods_id_.Get();
}
inline void ShopReceipt::_internal_set_shop_goods_id(const std::string& value) {
  
  shop_goods_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ShopReceipt::_internal_mutable_shop_goods_id() {
  
  return shop_goods_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ShopReceipt::release_shop_goods_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ShopReceipt.shop_goods_id)
  return shop_goods_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ShopReceipt::set_allocated_shop_goods_id(std::string* shop_goods_id) {
  if (shop_goods_id != nullptr) {
    
  } else {
    
  }
  shop_goods_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shop_goods_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ShopReceipt.shop_goods_id)
}

// bytes shop_id = 3;
inline void ShopReceipt::clear_shop_id() {
  shop_id_.ClearToEmpty();
}
inline const std::string& ShopReceipt::shop_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ShopReceipt.shop_id)
  return _internal_shop_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ShopReceipt::set_shop_id(ArgT0&& arg0, ArgT... args) {
 
 shop_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ShopReceipt.shop_id)
}
inline std::string* ShopReceipt::mutable_shop_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ShopReceipt.shop_id)
  return _internal_mutable_shop_id();
}
inline const std::string& ShopReceipt::_internal_shop_id() const {
  return shop_id_.Get();
}
inline void ShopReceipt::_internal_set_shop_id(const std::string& value) {
  
  shop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ShopReceipt::_internal_mutable_shop_id() {
  
  return shop_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ShopReceipt::release_shop_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ShopReceipt.shop_id)
  return shop_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ShopReceipt::set_allocated_shop_id(std::string* shop_id) {
  if (shop_id != nullptr) {
    
  } else {
    
  }
  shop_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shop_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ShopReceipt.shop_id)
}

// int64 count = 4;
inline void ShopReceipt::clear_count() {
  count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShopReceipt::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ShopReceipt::count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ShopReceipt.count)
  return _internal_count();
}
inline void ShopReceipt::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void ShopReceipt::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ShopReceipt.count)
}

// -------------------------------------------------------------------

// DelPlayerShopReceipts

// .KWMsg.Ident player_id = 1;
inline bool DelPlayerShopReceipts::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool DelPlayerShopReceipts::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& DelPlayerShopReceipts::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& DelPlayerShopReceipts::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.DelPlayerShopReceipts.player_id)
  return _internal_player_id();
}
inline void DelPlayerShopReceipts::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.DelPlayerShopReceipts.player_id)
}
inline ::KWMsg::Ident* DelPlayerShopReceipts::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* DelPlayerShopReceipts::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.DelPlayerShopReceipts.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* DelPlayerShopReceipts::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* DelPlayerShopReceipts::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DelPlayerShopReceipts.player_id)
  return _internal_mutable_player_id();
}
inline void DelPlayerShopReceipts::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DelPlayerShopReceipts.player_id)
}

// bytes shop_id = 2;
inline void DelPlayerShopReceipts::clear_shop_id() {
  shop_id_.ClearToEmpty();
}
inline const std::string& DelPlayerShopReceipts::shop_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.DelPlayerShopReceipts.shop_id)
  return _internal_shop_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelPlayerShopReceipts::set_shop_id(ArgT0&& arg0, ArgT... args) {
 
 shop_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.DelPlayerShopReceipts.shop_id)
}
inline std::string* DelPlayerShopReceipts::mutable_shop_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DelPlayerShopReceipts.shop_id)
  return _internal_mutable_shop_id();
}
inline const std::string& DelPlayerShopReceipts::_internal_shop_id() const {
  return shop_id_.Get();
}
inline void DelPlayerShopReceipts::_internal_set_shop_id(const std::string& value) {
  
  shop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DelPlayerShopReceipts::_internal_mutable_shop_id() {
  
  return shop_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DelPlayerShopReceipts::release_shop_id() {
  // @@protoc_insertion_point(field_release:KWMsg.DelPlayerShopReceipts.shop_id)
  return shop_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DelPlayerShopReceipts::set_allocated_shop_id(std::string* shop_id) {
  if (shop_id != nullptr) {
    
  } else {
    
  }
  shop_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shop_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DelPlayerShopReceipts.shop_id)
}

// bytes shop_goods_id = 3;
inline void DelPlayerShopReceipts::clear_shop_goods_id() {
  shop_goods_id_.ClearToEmpty();
}
inline const std::string& DelPlayerShopReceipts::shop_goods_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.DelPlayerShopReceipts.shop_goods_id)
  return _internal_shop_goods_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void DelPlayerShopReceipts::set_shop_goods_id(ArgT0&& arg0, ArgT... args) {
 
 shop_goods_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.DelPlayerShopReceipts.shop_goods_id)
}
inline std::string* DelPlayerShopReceipts::mutable_shop_goods_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.DelPlayerShopReceipts.shop_goods_id)
  return _internal_mutable_shop_goods_id();
}
inline const std::string& DelPlayerShopReceipts::_internal_shop_goods_id() const {
  return shop_goods_id_.Get();
}
inline void DelPlayerShopReceipts::_internal_set_shop_goods_id(const std::string& value) {
  
  shop_goods_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* DelPlayerShopReceipts::_internal_mutable_shop_goods_id() {
  
  return shop_goods_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* DelPlayerShopReceipts::release_shop_goods_id() {
  // @@protoc_insertion_point(field_release:KWMsg.DelPlayerShopReceipts.shop_goods_id)
  return shop_goods_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void DelPlayerShopReceipts::set_allocated_shop_goods_id(std::string* shop_goods_id) {
  if (shop_goods_id != nullptr) {
    
  } else {
    
  }
  shop_goods_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shop_goods_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.DelPlayerShopReceipts.shop_goods_id)
}

// -------------------------------------------------------------------

// UpdPlayerShopReceipt

// .KWMsg.Ident player_id = 1;
inline bool UpdPlayerShopReceipt::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool UpdPlayerShopReceipt::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& UpdPlayerShopReceipt::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& UpdPlayerShopReceipt::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.UpdPlayerShopReceipt.player_id)
  return _internal_player_id();
}
inline void UpdPlayerShopReceipt::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.UpdPlayerShopReceipt.player_id)
}
inline ::KWMsg::Ident* UpdPlayerShopReceipt::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* UpdPlayerShopReceipt::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.UpdPlayerShopReceipt.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* UpdPlayerShopReceipt::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* UpdPlayerShopReceipt::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.UpdPlayerShopReceipt.player_id)
  return _internal_mutable_player_id();
}
inline void UpdPlayerShopReceipt::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.UpdPlayerShopReceipt.player_id)
}

// bytes shop_id = 2;
inline void UpdPlayerShopReceipt::clear_shop_id() {
  shop_id_.ClearToEmpty();
}
inline const std::string& UpdPlayerShopReceipt::shop_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.UpdPlayerShopReceipt.shop_id)
  return _internal_shop_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdPlayerShopReceipt::set_shop_id(ArgT0&& arg0, ArgT... args) {
 
 shop_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.UpdPlayerShopReceipt.shop_id)
}
inline std::string* UpdPlayerShopReceipt::mutable_shop_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.UpdPlayerShopReceipt.shop_id)
  return _internal_mutable_shop_id();
}
inline const std::string& UpdPlayerShopReceipt::_internal_shop_id() const {
  return shop_id_.Get();
}
inline void UpdPlayerShopReceipt::_internal_set_shop_id(const std::string& value) {
  
  shop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdPlayerShopReceipt::_internal_mutable_shop_id() {
  
  return shop_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdPlayerShopReceipt::release_shop_id() {
  // @@protoc_insertion_point(field_release:KWMsg.UpdPlayerShopReceipt.shop_id)
  return shop_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdPlayerShopReceipt::set_allocated_shop_id(std::string* shop_id) {
  if (shop_id != nullptr) {
    
  } else {
    
  }
  shop_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shop_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.UpdPlayerShopReceipt.shop_id)
}

// bytes shop_goods_id = 3;
inline void UpdPlayerShopReceipt::clear_shop_goods_id() {
  shop_goods_id_.ClearToEmpty();
}
inline const std::string& UpdPlayerShopReceipt::shop_goods_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.UpdPlayerShopReceipt.shop_goods_id)
  return _internal_shop_goods_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void UpdPlayerShopReceipt::set_shop_goods_id(ArgT0&& arg0, ArgT... args) {
 
 shop_goods_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.UpdPlayerShopReceipt.shop_goods_id)
}
inline std::string* UpdPlayerShopReceipt::mutable_shop_goods_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.UpdPlayerShopReceipt.shop_goods_id)
  return _internal_mutable_shop_goods_id();
}
inline const std::string& UpdPlayerShopReceipt::_internal_shop_goods_id() const {
  return shop_goods_id_.Get();
}
inline void UpdPlayerShopReceipt::_internal_set_shop_goods_id(const std::string& value) {
  
  shop_goods_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* UpdPlayerShopReceipt::_internal_mutable_shop_goods_id() {
  
  return shop_goods_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* UpdPlayerShopReceipt::release_shop_goods_id() {
  // @@protoc_insertion_point(field_release:KWMsg.UpdPlayerShopReceipt.shop_goods_id)
  return shop_goods_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void UpdPlayerShopReceipt::set_allocated_shop_goods_id(std::string* shop_goods_id) {
  if (shop_goods_id != nullptr) {
    
  } else {
    
  }
  shop_goods_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shop_goods_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.UpdPlayerShopReceipt.shop_goods_id)
}

// .KWMsg.ShopReceipt receipt = 4;
inline bool UpdPlayerShopReceipt::_internal_has_receipt() const {
  return this != internal_default_instance() && receipt_ != nullptr;
}
inline bool UpdPlayerShopReceipt::has_receipt() const {
  return _internal_has_receipt();
}
inline void UpdPlayerShopReceipt::clear_receipt() {
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
}
inline const ::KWMsg::ShopReceipt& UpdPlayerShopReceipt::_internal_receipt() const {
  const ::KWMsg::ShopReceipt* p = receipt_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::ShopReceipt&>(
      ::KWMsg::_ShopReceipt_default_instance_);
}
inline const ::KWMsg::ShopReceipt& UpdPlayerShopReceipt::receipt() const {
  // @@protoc_insertion_point(field_get:KWMsg.UpdPlayerShopReceipt.receipt)
  return _internal_receipt();
}
inline void UpdPlayerShopReceipt::unsafe_arena_set_allocated_receipt(
    ::KWMsg::ShopReceipt* receipt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_);
  }
  receipt_ = receipt;
  if (receipt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.UpdPlayerShopReceipt.receipt)
}
inline ::KWMsg::ShopReceipt* UpdPlayerShopReceipt::release_receipt() {
  
  ::KWMsg::ShopReceipt* temp = receipt_;
  receipt_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::ShopReceipt* UpdPlayerShopReceipt::unsafe_arena_release_receipt() {
  // @@protoc_insertion_point(field_release:KWMsg.UpdPlayerShopReceipt.receipt)
  
  ::KWMsg::ShopReceipt* temp = receipt_;
  receipt_ = nullptr;
  return temp;
}
inline ::KWMsg::ShopReceipt* UpdPlayerShopReceipt::_internal_mutable_receipt() {
  
  if (receipt_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::ShopReceipt>(GetArenaForAllocation());
    receipt_ = p;
  }
  return receipt_;
}
inline ::KWMsg::ShopReceipt* UpdPlayerShopReceipt::mutable_receipt() {
  // @@protoc_insertion_point(field_mutable:KWMsg.UpdPlayerShopReceipt.receipt)
  return _internal_mutable_receipt();
}
inline void UpdPlayerShopReceipt::set_allocated_receipt(::KWMsg::ShopReceipt* receipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete receipt_;
  }
  if (receipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::ShopReceipt>::GetOwningArena(receipt);
    if (message_arena != submessage_arena) {
      receipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receipt, submessage_arena);
    }
    
  } else {
    
  }
  receipt_ = receipt;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.UpdPlayerShopReceipt.receipt)
}

// -------------------------------------------------------------------

// AddPlayerShopReceipt

// .KWMsg.Ident player_id = 1;
inline bool AddPlayerShopReceipt::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AddPlayerShopReceipt::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AddPlayerShopReceipt::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AddPlayerShopReceipt::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AddPlayerShopReceipt.player_id)
  return _internal_player_id();
}
inline void AddPlayerShopReceipt::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AddPlayerShopReceipt.player_id)
}
inline ::KWMsg::Ident* AddPlayerShopReceipt::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AddPlayerShopReceipt::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AddPlayerShopReceipt.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AddPlayerShopReceipt::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AddPlayerShopReceipt::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AddPlayerShopReceipt.player_id)
  return _internal_mutable_player_id();
}
inline void AddPlayerShopReceipt::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AddPlayerShopReceipt.player_id)
}

// bytes shop_id = 2;
inline void AddPlayerShopReceipt::clear_shop_id() {
  shop_id_.ClearToEmpty();
}
inline const std::string& AddPlayerShopReceipt::shop_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AddPlayerShopReceipt.shop_id)
  return _internal_shop_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPlayerShopReceipt::set_shop_id(ArgT0&& arg0, ArgT... args) {
 
 shop_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AddPlayerShopReceipt.shop_id)
}
inline std::string* AddPlayerShopReceipt::mutable_shop_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AddPlayerShopReceipt.shop_id)
  return _internal_mutable_shop_id();
}
inline const std::string& AddPlayerShopReceipt::_internal_shop_id() const {
  return shop_id_.Get();
}
inline void AddPlayerShopReceipt::_internal_set_shop_id(const std::string& value) {
  
  shop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPlayerShopReceipt::_internal_mutable_shop_id() {
  
  return shop_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPlayerShopReceipt::release_shop_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AddPlayerShopReceipt.shop_id)
  return shop_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPlayerShopReceipt::set_allocated_shop_id(std::string* shop_id) {
  if (shop_id != nullptr) {
    
  } else {
    
  }
  shop_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shop_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AddPlayerShopReceipt.shop_id)
}

// bytes shop_goods_id = 3;
inline void AddPlayerShopReceipt::clear_shop_goods_id() {
  shop_goods_id_.ClearToEmpty();
}
inline const std::string& AddPlayerShopReceipt::shop_goods_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AddPlayerShopReceipt.shop_goods_id)
  return _internal_shop_goods_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void AddPlayerShopReceipt::set_shop_goods_id(ArgT0&& arg0, ArgT... args) {
 
 shop_goods_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.AddPlayerShopReceipt.shop_goods_id)
}
inline std::string* AddPlayerShopReceipt::mutable_shop_goods_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AddPlayerShopReceipt.shop_goods_id)
  return _internal_mutable_shop_goods_id();
}
inline const std::string& AddPlayerShopReceipt::_internal_shop_goods_id() const {
  return shop_goods_id_.Get();
}
inline void AddPlayerShopReceipt::_internal_set_shop_goods_id(const std::string& value) {
  
  shop_goods_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* AddPlayerShopReceipt::_internal_mutable_shop_goods_id() {
  
  return shop_goods_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* AddPlayerShopReceipt::release_shop_goods_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AddPlayerShopReceipt.shop_goods_id)
  return shop_goods_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void AddPlayerShopReceipt::set_allocated_shop_goods_id(std::string* shop_goods_id) {
  if (shop_goods_id != nullptr) {
    
  } else {
    
  }
  shop_goods_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shop_goods_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AddPlayerShopReceipt.shop_goods_id)
}

// .KWMsg.ShopReceipt receipt = 4;
inline bool AddPlayerShopReceipt::_internal_has_receipt() const {
  return this != internal_default_instance() && receipt_ != nullptr;
}
inline bool AddPlayerShopReceipt::has_receipt() const {
  return _internal_has_receipt();
}
inline void AddPlayerShopReceipt::clear_receipt() {
  if (GetArenaForAllocation() == nullptr && receipt_ != nullptr) {
    delete receipt_;
  }
  receipt_ = nullptr;
}
inline const ::KWMsg::ShopReceipt& AddPlayerShopReceipt::_internal_receipt() const {
  const ::KWMsg::ShopReceipt* p = receipt_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::ShopReceipt&>(
      ::KWMsg::_ShopReceipt_default_instance_);
}
inline const ::KWMsg::ShopReceipt& AddPlayerShopReceipt::receipt() const {
  // @@protoc_insertion_point(field_get:KWMsg.AddPlayerShopReceipt.receipt)
  return _internal_receipt();
}
inline void AddPlayerShopReceipt::unsafe_arena_set_allocated_receipt(
    ::KWMsg::ShopReceipt* receipt) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(receipt_);
  }
  receipt_ = receipt;
  if (receipt) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AddPlayerShopReceipt.receipt)
}
inline ::KWMsg::ShopReceipt* AddPlayerShopReceipt::release_receipt() {
  
  ::KWMsg::ShopReceipt* temp = receipt_;
  receipt_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::ShopReceipt* AddPlayerShopReceipt::unsafe_arena_release_receipt() {
  // @@protoc_insertion_point(field_release:KWMsg.AddPlayerShopReceipt.receipt)
  
  ::KWMsg::ShopReceipt* temp = receipt_;
  receipt_ = nullptr;
  return temp;
}
inline ::KWMsg::ShopReceipt* AddPlayerShopReceipt::_internal_mutable_receipt() {
  
  if (receipt_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::ShopReceipt>(GetArenaForAllocation());
    receipt_ = p;
  }
  return receipt_;
}
inline ::KWMsg::ShopReceipt* AddPlayerShopReceipt::mutable_receipt() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AddPlayerShopReceipt.receipt)
  return _internal_mutable_receipt();
}
inline void AddPlayerShopReceipt::set_allocated_receipt(::KWMsg::ShopReceipt* receipt) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete receipt_;
  }
  if (receipt) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::ShopReceipt>::GetOwningArena(receipt);
    if (message_arena != submessage_arena) {
      receipt = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, receipt, submessage_arena);
    }
    
  } else {
    
  }
  receipt_ = receipt;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AddPlayerShopReceipt.receipt)
}

// -------------------------------------------------------------------

// ReqGetShopProducts

// .KWMsg.Ident player_id = 1;
inline bool ReqGetShopProducts::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqGetShopProducts::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqGetShopProducts::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqGetShopProducts::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetShopProducts.player_id)
  return _internal_player_id();
}
inline void ReqGetShopProducts::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqGetShopProducts.player_id)
}
inline ::KWMsg::Ident* ReqGetShopProducts::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqGetShopProducts::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetShopProducts.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqGetShopProducts::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqGetShopProducts::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetShopProducts.player_id)
  return _internal_mutable_player_id();
}
inline void ReqGetShopProducts::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetShopProducts.player_id)
}

// bytes shop_id = 2;
inline void ReqGetShopProducts::clear_shop_id() {
  shop_id_.ClearToEmpty();
}
inline const std::string& ReqGetShopProducts::shop_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqGetShopProducts.shop_id)
  return _internal_shop_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqGetShopProducts::set_shop_id(ArgT0&& arg0, ArgT... args) {
 
 shop_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqGetShopProducts.shop_id)
}
inline std::string* ReqGetShopProducts::mutable_shop_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqGetShopProducts.shop_id)
  return _internal_mutable_shop_id();
}
inline const std::string& ReqGetShopProducts::_internal_shop_id() const {
  return shop_id_.Get();
}
inline void ReqGetShopProducts::_internal_set_shop_id(const std::string& value) {
  
  shop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqGetShopProducts::_internal_mutable_shop_id() {
  
  return shop_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqGetShopProducts::release_shop_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqGetShopProducts.shop_id)
  return shop_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqGetShopProducts::set_allocated_shop_id(std::string* shop_id) {
  if (shop_id != nullptr) {
    
  } else {
    
  }
  shop_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shop_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqGetShopProducts.shop_id)
}

// -------------------------------------------------------------------

// AckGetShopProducts

// .KWMsg.EGameEventCode event_code = 1;
inline void AckGetShopProducts::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckGetShopProducts::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckGetShopProducts::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetShopProducts.event_code)
  return _internal_event_code();
}
inline void AckGetShopProducts::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckGetShopProducts::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckGetShopProducts.event_code)
}

// .KWMsg.Ident player_id = 2;
inline bool AckGetShopProducts::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckGetShopProducts::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckGetShopProducts::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckGetShopProducts::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetShopProducts.player_id)
  return _internal_player_id();
}
inline void AckGetShopProducts::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckGetShopProducts.player_id)
}
inline ::KWMsg::Ident* AckGetShopProducts::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckGetShopProducts::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckGetShopProducts.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckGetShopProducts::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckGetShopProducts::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetShopProducts.player_id)
  return _internal_mutable_player_id();
}
inline void AckGetShopProducts::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckGetShopProducts.player_id)
}

// repeated .KWMsg.ProductInfo products = 3;
inline int AckGetShopProducts::_internal_products_size() const {
  return products_.size();
}
inline int AckGetShopProducts::products_size() const {
  return _internal_products_size();
}
inline void AckGetShopProducts::clear_products() {
  products_.Clear();
}
inline ::KWMsg::ProductInfo* AckGetShopProducts::mutable_products(int index) {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckGetShopProducts.products)
  return products_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ProductInfo >*
AckGetShopProducts::mutable_products() {
  // @@protoc_insertion_point(field_mutable_list:KWMsg.AckGetShopProducts.products)
  return &products_;
}
inline const ::KWMsg::ProductInfo& AckGetShopProducts::_internal_products(int index) const {
  return products_.Get(index);
}
inline const ::KWMsg::ProductInfo& AckGetShopProducts::products(int index) const {
  // @@protoc_insertion_point(field_get:KWMsg.AckGetShopProducts.products)
  return _internal_products(index);
}
inline ::KWMsg::ProductInfo* AckGetShopProducts::_internal_add_products() {
  return products_.Add();
}
inline ::KWMsg::ProductInfo* AckGetShopProducts::add_products() {
  // @@protoc_insertion_point(field_add:KWMsg.AckGetShopProducts.products)
  return _internal_add_products();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::KWMsg::ProductInfo >&
AckGetShopProducts::products() const {
  // @@protoc_insertion_point(field_list:KWMsg.AckGetShopProducts.products)
  return products_;
}

// -------------------------------------------------------------------

// ReqBuyProduct

// .KWMsg.Ident player_id = 1;
inline bool ReqBuyProduct::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool ReqBuyProduct::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& ReqBuyProduct::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& ReqBuyProduct::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBuyProduct.player_id)
  return _internal_player_id();
}
inline void ReqBuyProduct::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.ReqBuyProduct.player_id)
}
inline ::KWMsg::Ident* ReqBuyProduct::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* ReqBuyProduct::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBuyProduct.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* ReqBuyProduct::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* ReqBuyProduct::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBuyProduct.player_id)
  return _internal_mutable_player_id();
}
inline void ReqBuyProduct::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBuyProduct.player_id)
}

// bytes shop_id = 2;
inline void ReqBuyProduct::clear_shop_id() {
  shop_id_.ClearToEmpty();
}
inline const std::string& ReqBuyProduct::shop_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBuyProduct.shop_id)
  return _internal_shop_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqBuyProduct::set_shop_id(ArgT0&& arg0, ArgT... args) {
 
 shop_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqBuyProduct.shop_id)
}
inline std::string* ReqBuyProduct::mutable_shop_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBuyProduct.shop_id)
  return _internal_mutable_shop_id();
}
inline const std::string& ReqBuyProduct::_internal_shop_id() const {
  return shop_id_.Get();
}
inline void ReqBuyProduct::_internal_set_shop_id(const std::string& value) {
  
  shop_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqBuyProduct::_internal_mutable_shop_id() {
  
  return shop_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqBuyProduct::release_shop_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBuyProduct.shop_id)
  return shop_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqBuyProduct::set_allocated_shop_id(std::string* shop_id) {
  if (shop_id != nullptr) {
    
  } else {
    
  }
  shop_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shop_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBuyProduct.shop_id)
}

// bytes product_id = 3;
inline void ReqBuyProduct::clear_product_id() {
  product_id_.ClearToEmpty();
}
inline const std::string& ReqBuyProduct::product_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBuyProduct.product_id)
  return _internal_product_id();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ReqBuyProduct::set_product_id(ArgT0&& arg0, ArgT... args) {
 
 product_id_.SetBytes(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:KWMsg.ReqBuyProduct.product_id)
}
inline std::string* ReqBuyProduct::mutable_product_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.ReqBuyProduct.product_id)
  return _internal_mutable_product_id();
}
inline const std::string& ReqBuyProduct::_internal_product_id() const {
  return product_id_.Get();
}
inline void ReqBuyProduct::_internal_set_product_id(const std::string& value) {
  
  product_id_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ReqBuyProduct::_internal_mutable_product_id() {
  
  return product_id_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ReqBuyProduct::release_product_id() {
  // @@protoc_insertion_point(field_release:KWMsg.ReqBuyProduct.product_id)
  return product_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ReqBuyProduct::set_allocated_product_id(std::string* product_id) {
  if (product_id != nullptr) {
    
  } else {
    
  }
  product_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), product_id,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:KWMsg.ReqBuyProduct.product_id)
}

// int64 count = 4;
inline void ReqBuyProduct::clear_count() {
  count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqBuyProduct::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ReqBuyProduct::count() const {
  // @@protoc_insertion_point(field_get:KWMsg.ReqBuyProduct.count)
  return _internal_count();
}
inline void ReqBuyProduct::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void ReqBuyProduct::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.ReqBuyProduct.count)
}

// -------------------------------------------------------------------

// AckBuyProduct

// .KWMsg.EGameEventCode event_code = 1;
inline void AckBuyProduct::clear_event_code() {
  event_code_ = 0;
}
inline ::KWMsg::EGameEventCode AckBuyProduct::_internal_event_code() const {
  return static_cast< ::KWMsg::EGameEventCode >(event_code_);
}
inline ::KWMsg::EGameEventCode AckBuyProduct::event_code() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBuyProduct.event_code)
  return _internal_event_code();
}
inline void AckBuyProduct::_internal_set_event_code(::KWMsg::EGameEventCode value) {
  
  event_code_ = value;
}
inline void AckBuyProduct::set_event_code(::KWMsg::EGameEventCode value) {
  _internal_set_event_code(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBuyProduct.event_code)
}

// .KWMsg.Ident player_id = 2;
inline bool AckBuyProduct::_internal_has_player_id() const {
  return this != internal_default_instance() && player_id_ != nullptr;
}
inline bool AckBuyProduct::has_player_id() const {
  return _internal_has_player_id();
}
inline const ::KWMsg::Ident& AckBuyProduct::_internal_player_id() const {
  const ::KWMsg::Ident* p = player_id_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::Ident&>(
      ::KWMsg::_Ident_default_instance_);
}
inline const ::KWMsg::Ident& AckBuyProduct::player_id() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBuyProduct.player_id)
  return _internal_player_id();
}
inline void AckBuyProduct::unsafe_arena_set_allocated_player_id(
    ::KWMsg::Ident* player_id) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  player_id_ = player_id;
  if (player_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBuyProduct.player_id)
}
inline ::KWMsg::Ident* AckBuyProduct::release_player_id() {
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::Ident* AckBuyProduct::unsafe_arena_release_player_id() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBuyProduct.player_id)
  
  ::KWMsg::Ident* temp = player_id_;
  player_id_ = nullptr;
  return temp;
}
inline ::KWMsg::Ident* AckBuyProduct::_internal_mutable_player_id() {
  
  if (player_id_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::Ident>(GetArenaForAllocation());
    player_id_ = p;
  }
  return player_id_;
}
inline ::KWMsg::Ident* AckBuyProduct::mutable_player_id() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBuyProduct.player_id)
  return _internal_mutable_player_id();
}
inline void AckBuyProduct::set_allocated_player_id(::KWMsg::Ident* player_id) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id_);
  }
  if (player_id) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(player_id));
    if (message_arena != submessage_arena) {
      player_id = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, player_id, submessage_arena);
    }
    
  } else {
    
  }
  player_id_ = player_id;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBuyProduct.player_id)
}

// .KWMsg.ProductInfo product = 3;
inline bool AckBuyProduct::_internal_has_product() const {
  return this != internal_default_instance() && product_ != nullptr;
}
inline bool AckBuyProduct::has_product() const {
  return _internal_has_product();
}
inline void AckBuyProduct::clear_product() {
  if (GetArenaForAllocation() == nullptr && product_ != nullptr) {
    delete product_;
  }
  product_ = nullptr;
}
inline const ::KWMsg::ProductInfo& AckBuyProduct::_internal_product() const {
  const ::KWMsg::ProductInfo* p = product_;
  return p != nullptr ? *p : reinterpret_cast<const ::KWMsg::ProductInfo&>(
      ::KWMsg::_ProductInfo_default_instance_);
}
inline const ::KWMsg::ProductInfo& AckBuyProduct::product() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBuyProduct.product)
  return _internal_product();
}
inline void AckBuyProduct::unsafe_arena_set_allocated_product(
    ::KWMsg::ProductInfo* product) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(product_);
  }
  product_ = product;
  if (product) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:KWMsg.AckBuyProduct.product)
}
inline ::KWMsg::ProductInfo* AckBuyProduct::release_product() {
  
  ::KWMsg::ProductInfo* temp = product_;
  product_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::KWMsg::ProductInfo* AckBuyProduct::unsafe_arena_release_product() {
  // @@protoc_insertion_point(field_release:KWMsg.AckBuyProduct.product)
  
  ::KWMsg::ProductInfo* temp = product_;
  product_ = nullptr;
  return temp;
}
inline ::KWMsg::ProductInfo* AckBuyProduct::_internal_mutable_product() {
  
  if (product_ == nullptr) {
    auto* p = CreateMaybeMessage<::KWMsg::ProductInfo>(GetArenaForAllocation());
    product_ = p;
  }
  return product_;
}
inline ::KWMsg::ProductInfo* AckBuyProduct::mutable_product() {
  // @@protoc_insertion_point(field_mutable:KWMsg.AckBuyProduct.product)
  return _internal_mutable_product();
}
inline void AckBuyProduct::set_allocated_product(::KWMsg::ProductInfo* product) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete product_;
  }
  if (product) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::KWMsg::ProductInfo>::GetOwningArena(product);
    if (message_arena != submessage_arena) {
      product = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, product, submessage_arena);
    }
    
  } else {
    
  }
  product_ = product;
  // @@protoc_insertion_point(field_set_allocated:KWMsg.AckBuyProduct.product)
}

// int64 count = 4;
inline void AckBuyProduct::clear_count() {
  count_ = int64_t{0};
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AckBuyProduct::_internal_count() const {
  return count_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 AckBuyProduct::count() const {
  // @@protoc_insertion_point(field_get:KWMsg.AckBuyProduct.count)
  return _internal_count();
}
inline void AckBuyProduct::_internal_set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  count_ = value;
}
inline void AckBuyProduct::set_count(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_count(value);
  // @@protoc_insertion_point(field_set:KWMsg.AckBuyProduct.count)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace KWMsg

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::KWMsg::PosSyncUnit_EMoveType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::PosSyncUnit_EMoveType>() {
  return ::KWMsg::PosSyncUnit_EMoveType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::ReqAckPlayerChat_EGameChatChannel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::ReqAckPlayerChat_EGameChatChannel>() {
  return ::KWMsg::ReqAckPlayerChat_EGameChatChannel_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::ReqAckPlayerChat_EGameChatType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::ReqAckPlayerChat_EGameChatType>() {
  return ::KWMsg::ReqAckPlayerChat_EGameChatType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::ReqCollegeDrama_DramaType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::ReqCollegeDrama_DramaType>() {
  return ::KWMsg::ReqCollegeDrama_DramaType_descriptor();
}
template <> struct is_proto_enum< ::KWMsg::CommonGetRewardInfo_EShowType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::KWMsg::CommonGetRewardInfo_EShowType>() {
  return ::KWMsg::CommonGetRewardInfo_EShowType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_kwmsgshare_2eproto
